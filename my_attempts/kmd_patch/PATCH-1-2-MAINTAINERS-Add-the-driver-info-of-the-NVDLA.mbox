From mboxrd@z Thu Jan  1 00:00:00 1970
Return-Path: <linux-kernel-owner@kernel.org>
X-Spam-Checker-Version: SpamAssassin 3.4.0 (2014-02-07) on
	aws-us-west-2-korg-lkml-1.web.codeaurora.org
Received: from vger.kernel.org (vger.kernel.org [23.128.96.18])
	by smtp.lore.kernel.org (Postfix) with ESMTP id C251EC4167D
	for <linux-kernel@archiver.kernel.org>; Tue, 19 Apr 2022 14:00:10 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1345326AbiDSOCu (ORCPT
        <rfc822;linux-kernel@archiver.kernel.org>);
        Tue, 19 Apr 2022 10:02:50 -0400
Received: from lindbergh.monkeyblade.net ([23.128.96.19]:38288 "EHLO
        lindbergh.monkeyblade.net" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1347073AbiDSOCn (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Tue, 19 Apr 2022 10:02:43 -0400
Received: from out0.migadu.com (out0.migadu.com [94.23.1.103])
        by lindbergh.monkeyblade.net (Postfix) with ESMTPS id D5B19E082;
        Tue, 19 Apr 2022 06:59:58 -0700 (PDT)
X-Report-Abuse: Please report any abuse attempt to abuse@migadu.com and include these headers.
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=linux.dev; s=key1;
        t=1650376796;
        h=from:from:reply-to:subject:subject:date:date:message-id:message-id:
         to:to:cc:cc:mime-version:mime-version:
         content-transfer-encoding:content-transfer-encoding:
         in-reply-to:in-reply-to:references:references;
        bh=bbuiKIXU9Y3lzbKjNQ9FewzTFV/RXsoBT5tR1UAOnzY=;
        b=AGOVAP2SzUy3vDds+Pbq0TKdXHOA7ZH9R76SU3W1AUBbivHJbmi+tmUNKNPRzPlQqrkH6s
        D3Y5jRKeIfEkbvK0hrRYpq6pjSXVHzn0CFN+eSVCWF31KeXAAYisI2NJnBI7vamC0EgvIO
        AE6QW/BGQ7LYFqxyPLdtB/TWtSWW+Ws=
From:   Cai Huoqing <cai.huoqing@linux.dev>
To:     cai.huoqing@linux.dev
Cc:     Maarten Lankhorst <maarten.lankhorst@linux.intel.com>,
        Maxime Ripard <mripard@kernel.org>,
        Thomas Zimmermann <tzimmermann@suse.de>,
        David Airlie <airlied@linux.ie>,
        Daniel Vetter <daniel@ffwll.ch>,
        Sumit Semwal <sumit.semwal@linaro.org>,
        =?UTF-8?q?Christian=20K=C3=B6nig?= <christian.koenig@amd.com>,
        linux-kernel@vger.kernel.org, dri-devel@lists.freedesktop.org,
        linux-media@vger.kernel.org, linaro-mm-sig@lists.linaro.org
Subject: [PATCH 1/2] MAINTAINERS: Add the driver info of the NVDLA
Date:   Tue, 19 Apr 2022 21:58:59 +0800
Message-Id: <20220419135908.39606-2-cai.huoqing@linux.dev>
In-Reply-To: <20220419135908.39606-1-cai.huoqing@linux.dev>
References: <20220419135908.39606-1-cai.huoqing@linux.dev>
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
X-Migadu-Flow: FLOW_OUT
X-Migadu-Auth-User: linux.dev
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

The NVIDIA Deep Learning Accelerator (NVDLA) is an open source IP
which is integrated into Jetson AGX Xavier. After adding the driver
support for it, I add the driver info of the NVDLA to MAINTAINERS file.

Signed-off-by: Cai Huoqing <cai.huoqing@linux.dev>
---
 MAINTAINERS | 7 +++++++
 1 file changed, 7 insertions(+)

diff --git a/MAINTAINERS b/MAINTAINERS
index 452f3662e5ac..0e5464d61a6d 100644
--- a/MAINTAINERS
+++ b/MAINTAINERS
@@ -6485,6 +6485,13 @@ T:	git git://anongit.freedesktop.org/drm/drm-misc
 F:	Documentation/devicetree/bindings/display/panel/samsung,lms380kf01.yaml
 F:	drivers/gpu/drm/panel/panel-widechips-ws2401.c
 
+DRM DRIVER FOR NVDLA
+M:	Cai Huoqing <cai.huoqing@linux.dev>
+L:	dri-devel@lists.freedesktop.org
+S:	Maintained
+T:	git git://anongit.freedesktop.org/drm/drm-misc
+F:	drivers/gpu/drm/nvdla/
+
 DRM DRIVERS
 M:	David Airlie <airlied@linux.ie>
 M:	Daniel Vetter <daniel@ffwll.ch>
-- 
2.25.1


From mboxrd@z Thu Jan  1 00:00:00 1970
Return-Path: <linux-kernel-owner@kernel.org>
X-Spam-Checker-Version: SpamAssassin 3.4.0 (2014-02-07) on
	aws-us-west-2-korg-lkml-1.web.codeaurora.org
Received: from vger.kernel.org (vger.kernel.org [23.128.96.18])
	by smtp.lore.kernel.org (Postfix) with ESMTP id E6644C433EF
	for <linux-kernel@archiver.kernel.org>; Tue, 19 Apr 2022 14:00:13 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1345610AbiDSOCw (ORCPT
        <rfc822;linux-kernel@archiver.kernel.org>);
        Tue, 19 Apr 2022 10:02:52 -0400
Received: from lindbergh.monkeyblade.net ([23.128.96.19]:37376 "EHLO
        lindbergh.monkeyblade.net" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1345080AbiDSOC1 (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Tue, 19 Apr 2022 10:02:27 -0400
Received: from out0.migadu.com (out0.migadu.com [IPv6:2001:41d0:2:267::])
        by lindbergh.monkeyblade.net (Postfix) with ESMTPS id D595039174;
        Tue, 19 Apr 2022 06:59:43 -0700 (PDT)
X-Report-Abuse: Please report any abuse attempt to abuse@migadu.com and include these headers.
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=linux.dev; s=key1;
        t=1650376782;
        h=from:from:reply-to:subject:subject:date:date:message-id:message-id:
         to:to:cc:cc:mime-version:mime-version:
         content-transfer-encoding:content-transfer-encoding;
        bh=mFWtlF0oHPGP6DlOf6E0rXJ/V6DYNXr//ANS9HvqQvw=;
        b=aJtULM7iH7zTY3r4fHqFFgnk7UShgfYh7JBWbfvVijbe+NAZk7o5lf0cGTu4BrE8W68yHM
        5o9hD6w59zxGhT62iGBdulTuLB1xhfCnA3e+QqpQXs6mueg80DkTVbXmdLZShHm+I/ZG/d
        kwxrgWiHz7qYebXVBViiZxDA+YvydT8=
From:   Cai Huoqing <cai.huoqing@linux.dev>
To:     cai.huoqing@linux.dev
Cc:     Maarten Lankhorst <maarten.lankhorst@linux.intel.com>,
        Maxime Ripard <mripard@kernel.org>,
        Thomas Zimmermann <tzimmermann@suse.de>,
        David Airlie <airlied@linux.ie>,
        Daniel Vetter <daniel@ffwll.ch>,
        Sumit Semwal <sumit.semwal@linaro.org>,
        =?UTF-8?q?Christian=20K=C3=B6nig?= <christian.koenig@amd.com>,
        linux-kernel@vger.kernel.org, dri-devel@lists.freedesktop.org,
        linux-media@vger.kernel.org, linaro-mm-sig@lists.linaro.org
Subject: [PATCH 0/2] drm/nvdla: Add driver support for NVDLA
Date:   Tue, 19 Apr 2022 21:58:58 +0800
Message-Id: <20220419135908.39606-1-cai.huoqing@linux.dev>
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
X-Migadu-Flow: FLOW_OUT
X-Migadu-Auth-User: linux.dev
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

The NVIDIA Deep Learning Accelerator (NVDLA) is an open source IP
which is integrated into NVIDIA Jetson AGX Xavier,
so add driver support for this accelerator.

NVDLA introduce:
http://nvdla.org/primer.html

User mode driver:
https://github.com/caihuoq/nvdla/tree/main/sw/umd


Cai Huoqing (2):
  MAINTAINERS: Add the driver info of the NVDLA
  drm/nvdla: Add driver support for NVDLA

 MAINTAINERS                             |    7 +
 drivers/gpu/drm/Kconfig                 |    2 +
 drivers/gpu/drm/Makefile                |    1 +
 drivers/gpu/drm/nvdla/Kconfig           |    8 +
 drivers/gpu/drm/nvdla/Makefile          |   19 +
 drivers/gpu/drm/nvdla/nvdla_bdma.c      |  200 +
 drivers/gpu/drm/nvdla/nvdla_cache.c     |  215 +
 drivers/gpu/drm/nvdla/nvdla_cdp.c       |  300 ++
 drivers/gpu/drm/nvdla/nvdla_common.c    |  295 ++
 drivers/gpu/drm/nvdla/nvdla_common.h    |  835 +++
 drivers/gpu/drm/nvdla/nvdla_conv.c      |  683 +++
 drivers/gpu/drm/nvdla/nvdla_drm.c       |  695 +++
 drivers/gpu/drm/nvdla/nvdla_drm.h       |  127 +
 drivers/gpu/drm/nvdla/nvdla_engine.c    |  233 +
 drivers/gpu/drm/nvdla/nvdla_engine.h    |  272 +
 drivers/gpu/drm/nvdla/nvdla_gem.c       |  393 ++
 drivers/gpu/drm/nvdla/nvdla_ioctl.h     |   99 +
 drivers/gpu/drm/nvdla/nvdla_pdp.c       |  446 ++
 drivers/gpu/drm/nvdla/nvdla_reg.h       | 6411 +++++++++++++++++++++++
 drivers/gpu/drm/nvdla/nvdla_rubik.c     |  217 +
 drivers/gpu/drm/nvdla/nvdla_sched.h     |   52 +
 drivers/gpu/drm/nvdla/nvdla_scheduler.c | 1005 ++++
 drivers/gpu/drm/nvdla/nvdla_sdp.c       |  728 +++
 23 files changed, 13243 insertions(+)
 create mode 100644 drivers/gpu/drm/nvdla/Kconfig
 create mode 100644 drivers/gpu/drm/nvdla/Makefile
 create mode 100644 drivers/gpu/drm/nvdla/nvdla_bdma.c
 create mode 100644 drivers/gpu/drm/nvdla/nvdla_cache.c
 create mode 100644 drivers/gpu/drm/nvdla/nvdla_cdp.c
 create mode 100644 drivers/gpu/drm/nvdla/nvdla_common.c
 create mode 100644 drivers/gpu/drm/nvdla/nvdla_common.h
 create mode 100644 drivers/gpu/drm/nvdla/nvdla_conv.c
 create mode 100644 drivers/gpu/drm/nvdla/nvdla_drm.c
 create mode 100644 drivers/gpu/drm/nvdla/nvdla_drm.h
 create mode 100644 drivers/gpu/drm/nvdla/nvdla_engine.c
 create mode 100644 drivers/gpu/drm/nvdla/nvdla_engine.h
 create mode 100644 drivers/gpu/drm/nvdla/nvdla_gem.c
 create mode 100644 drivers/gpu/drm/nvdla/nvdla_ioctl.h
 create mode 100644 drivers/gpu/drm/nvdla/nvdla_pdp.c
 create mode 100644 drivers/gpu/drm/nvdla/nvdla_reg.h
 create mode 100644 drivers/gpu/drm/nvdla/nvdla_rubik.c
 create mode 100644 drivers/gpu/drm/nvdla/nvdla_sched.h
 create mode 100644 drivers/gpu/drm/nvdla/nvdla_scheduler.c
 create mode 100644 drivers/gpu/drm/nvdla/nvdla_sdp.c

-- 
2.25.1


From mboxrd@z Thu Jan  1 00:00:00 1970
Return-Path: <linux-kernel-owner@kernel.org>
X-Spam-Checker-Version: SpamAssassin 3.4.0 (2014-02-07) on
	aws-us-west-2-korg-lkml-1.web.codeaurora.org
Received: from vger.kernel.org (vger.kernel.org [23.128.96.18])
	by smtp.lore.kernel.org (Postfix) with ESMTP id 53A73C4332F
	for <linux-kernel@archiver.kernel.org>; Tue, 19 Apr 2022 14:08:01 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1353040AbiDSOKl (ORCPT
        <rfc822;linux-kernel@archiver.kernel.org>);
        Tue, 19 Apr 2022 10:10:41 -0400
Received: from lindbergh.monkeyblade.net ([23.128.96.19]:53298 "EHLO
        lindbergh.monkeyblade.net" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1353018AbiDSOKg (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Tue, 19 Apr 2022 10:10:36 -0400
Received: from NAM10-MW2-obe.outbound.protection.outlook.com (mail-mw2nam10on2075.outbound.protection.outlook.com [40.107.94.75])
        by lindbergh.monkeyblade.net (Postfix) with ESMTPS id 429372AC4F;
        Tue, 19 Apr 2022 07:07:53 -0700 (PDT)
ARC-Seal: i=1; a=rsa-sha256; s=arcselector9901; d=microsoft.com; cv=none;
 b=fvm02jCGiBWoMXiNsoPiEl0HOdFaw7bCl4XWTBFCyknZu496l8cXJXVu6RpkwJLrY1vOna5CGRJDDYTr6xVFvUZfsr0hX7tb+YH+o2eLQFJP0LSSnyQTiq5WD79FDt9UtqMiGWwSa0WvkCeiaBsbHYfzfBjy5hDe4NLGU9l1QIz8vDs8tCAAncENbHCJG2gx6bJhb/2TjdPyDcckJzCSYH6YDWU2Q9CWcGwjptUCubYH7pn93KvaiZQxAB9j1yv8fPAvIt3rGqUtVGerEt/1thGUBjSCHFL4p9evfeaH1rs/KOdi7FScdtV3Nm3zt1dR2XGMOVcxznkIH3Nv4VXWMg==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=microsoft.com;
 s=arcselector9901;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-AntiSpam-MessageData-ChunkCount:X-MS-Exchange-AntiSpam-MessageData-0:X-MS-Exchange-AntiSpam-MessageData-1;
 bh=7BnXtaO/qFovLvSMJhUJ2hoYS8USkfJ/TgVJsmJH0gY=;
 b=j9Q7e2N4fJZ/lzXHqo//vHp5BKqty0Op9y9LMZ2HoYPAyDKQG1G8qrHAdZjVt/NefKjlIGdx7SMn6L0Onl/fUbofrSAFk9r+0o4p7jFtIzDiJ2R6jUI6qiQRzwXxbti0Zstj3aDaCh8thO4ngspFJzNmUFgJVFh22udzGHDhbQiqCtuRKCXy+fdfVkb9ohC6fnKoluYDYcbNOhcDBh6OW457RQbs4fZ6N34M3vLnebRtBxXrcq9sb6UcwM7QE30fdwZXLoEInzQ7Q7j9gopyHswOwfOtqiyOW3Lv+r8oWjbDEySNp7L1ZWYE0Wr+KLEnugyeSfIX8zJa9ESc92kNnw==
ARC-Authentication-Results: i=1; mx.microsoft.com 1; spf=pass
 smtp.mailfrom=amd.com; dmarc=pass action=none header.from=amd.com; dkim=pass
 header.d=amd.com; arc=none
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=amd.com; s=selector1;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=7BnXtaO/qFovLvSMJhUJ2hoYS8USkfJ/TgVJsmJH0gY=;
 b=HJ2PZRR9xRnYXusFt9/OUhOWu20Mo++q6XphM61klbBeaVI1sTARWoMukfzlSvdhi/5/elIJ0ly1WPybXBgi6yLQpzFTI8tXSH424cj4D4AkTwH04T6nYHbkD35ACjCXDUXscKCnWpDC0oBVVEhzcetHy+Tz2K+M4jlLnVnQRqI=
Authentication-Results: dkim=none (message not signed)
 header.d=none;dmarc=none action=none header.from=amd.com;
Received: from BN8PR12MB3587.namprd12.prod.outlook.com (2603:10b6:408:43::13)
 by BN6PR1201MB0017.namprd12.prod.outlook.com (2603:10b6:405:53::20) with
 Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.5164.20; Tue, 19 Apr
 2022 14:07:51 +0000
Received: from BN8PR12MB3587.namprd12.prod.outlook.com
 ([fe80::a5fb:7137:5e64:cf8]) by BN8PR12MB3587.namprd12.prod.outlook.com
 ([fe80::a5fb:7137:5e64:cf8%5]) with mapi id 15.20.5164.026; Tue, 19 Apr 2022
 14:07:51 +0000
Message-ID: <20bac605-97e6-e5cd-c4e4-83a8121645d8@amd.com>
Date:   Tue, 19 Apr 2022 16:07:44 +0200
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:91.0) Gecko/20100101
 Thunderbird/91.7.0
Subject: Re: [PATCH 2/2] drm/nvdla: Add driver support for NVDLA
Content-Language: en-US
To:     Cai Huoqing <cai.huoqing@linux.dev>
Cc:     Maarten Lankhorst <maarten.lankhorst@linux.intel.com>,
        Maxime Ripard <mripard@kernel.org>,
        Thomas Zimmermann <tzimmermann@suse.de>,
        David Airlie <airlied@linux.ie>,
        Daniel Vetter <daniel@ffwll.ch>,
        Sumit Semwal <sumit.semwal@linaro.org>,
        linux-kernel@vger.kernel.org, dri-devel@lists.freedesktop.org,
        linux-media@vger.kernel.org, linaro-mm-sig@lists.linaro.org
References: <20220419135908.39606-1-cai.huoqing@linux.dev>
 <20220419135908.39606-3-cai.huoqing@linux.dev>
From:   =?UTF-8?Q?Christian_K=c3=b6nig?= <christian.koenig@amd.com>
In-Reply-To: <20220419135908.39606-3-cai.huoqing@linux.dev>
Content-Type: text/plain; charset=UTF-8; format=flowed
Content-Transfer-Encoding: 7bit
X-ClientProxiedBy: FR2P281CA0010.DEUP281.PROD.OUTLOOK.COM
 (2603:10a6:d10:a::20) To BN8PR12MB3587.namprd12.prod.outlook.com
 (2603:10b6:408:43::13)
MIME-Version: 1.0
X-MS-PublicTrafficType: Email
X-MS-Office365-Filtering-Correlation-Id: 7533b2ae-cfce-453c-f919-08da220dfd94
X-MS-TrafficTypeDiagnostic: BN6PR1201MB0017:EE_
X-Microsoft-Antispam-PRVS: <BN6PR1201MB001775B523DB70AFDAB0CFCA83F29@BN6PR1201MB0017.namprd12.prod.outlook.com>
X-MS-Exchange-SenderADCheck: 1
X-MS-Exchange-AntiSpam-Relay: 0
X-Microsoft-Antispam: BCL:0;
X-Microsoft-Antispam-Message-Info: t8KdAe21chIfNO615DErUkN/yUCvLhBYMrDYXgpiJwHlAqZIY0JoeMEtBYkYAuB8HGo6XLc3eVjOQO/OIi6mrc22SBpddkToeA8a1Oqiu0nQ8PoCk/RfImNRtKQRv5UbrJU4EgByP/mS7xSTfKjkp5U/j4eWIVerGBkUCgMJScE4RlFMeoAGd8axJP8G3oJRx0wUk4+vSFhFXHkeUbLwfUB5orLSGWGLiYopYE/6BKUb0Fgo2l8ZdeucU6rDJ1Wwv5LfJg/MYuEsVnVmx1kGL/89/pmG0kTPurjlz25PCHguJX33Xk70ECJB4ayWDIbkgA+hJ5IaAfASQyWMLdGol3E6RBaNzN7I1oncOAmadxJgzQGBH2VDVv9hRHKrWYEjms2XF/T06PWxdezdLOKBn5fhuKdwmb2Yy0Xl8w1Q17GsSkSKcZGqKcloLQIvBcQybBDJukvyEwPNNu00I/URlkiBaq+3Dz28nEMTHSFlVXuiU38EJNeA+ou6Hfeb7fKk52hLltjWOg0AdQnyfM5px+43LCagx8RytBYBJkydLVl9+cZCWF7DlyNUy2CNuvdJHA5qXXfyiZVwdrvCKLWdT2U//bjCdnSUkVEeqCdKhDZzKUILuDoHSnYgQl0HBvdl418faFhoOu0fSsl9H541RJmwLcr36n/Ggf9+kdL0gp9+HLmEb7W67te+ppQZp3RUAMrSaah6vttFN6oo52OPzxazcdzKl10AHSvtVJ5tgGgUBbWzb2dV6WNXyp9QlJaA
X-Forefront-Antispam-Report: CIP:255.255.255.255;CTRY:;LANG:en;SCL:1;SRV:;IPV:NLI;SFV:NSPM;H:BN8PR12MB3587.namprd12.prod.outlook.com;PTR:;CAT:NONE;SFS:(13230001)(4636009)(366004)(6916009)(66476007)(86362001)(66556008)(66946007)(31686004)(7416002)(8936002)(508600001)(4744005)(316002)(8676002)(54906003)(31696002)(4326008)(5660300002)(6486002)(36756003)(2906002)(186003)(2616005)(38100700002)(6512007)(6506007)(6666004)(45980500001)(43740500002);DIR:OUT;SFP:1101;
X-MS-Exchange-AntiSpam-MessageData-ChunkCount: 2
X-MS-Exchange-AntiSpam-MessageData-0: =?utf-8?B?eVFFZHBsODAxQUJrZmZYb21CTCtZV0pUOEI4YlJTaXQwUm9wNkxjN0JSYjVM?=
 =?utf-8?B?YUtxekQvS1dQVTZGcWozYzhNeHpMclRRRVBUWG14VjRpTkJ6UmdpVjIzN1hz?=
 =?utf-8?B?bmZWRXJ1dDgvWDlkNHdMMlZ6RTUrUS9NNVJ4SDRsT0hJYnp4QWZ1K1dreGNF?=
 =?utf-8?B?eUI1QklDM21obXQzTmwrazRtMm92R2ozRkNQeitWYUo5djFPRXQxdDE0ZERG?=
 =?utf-8?B?T1N2QVlNME5ORXVsSmY4UWRtZ21BNkh4aEc5ODM4bk9jc0I4ZDRRb05vSFlH?=
 =?utf-8?B?S1ByaU1jWGk0enJBeGRnR2tGT2JUMWRPaUdJaWFNRGtCcTRMTkIvVGcvWjM4?=
 =?utf-8?B?d0ZLaWI2amVHamhCR21FT3ppYTlsSWk3Y1RBUHpLZk9DZlh4ZGczYVo4bk5B?=
 =?utf-8?B?aEFxdEF1MGVJZHh0SnFQNjF1c3hlVlFRQUY2MFdXbVlhVVFwVnlCOHZ2WGx1?=
 =?utf-8?B?VmNLM0ptTGs1MEpLUHJXQ3E5QUtHQStKYkFvUWJoUEtQODEyRGRQQmlxemFx?=
 =?utf-8?B?R2NweUovNzY0UlJGdTJVdkFSV1NXeVRQOVVHS0pXS3RQcWY1Mzh1Y25YR0tL?=
 =?utf-8?B?eGR1RTQ1RWpOQi9yTVZMWWpWVDZKQjl4VC9vTTdEU25kZDNmS1phcGlrd2RS?=
 =?utf-8?B?OUdxTXJlcDUya3BSSXRvbk1JNkErdHEwWW0vaHdFQ2UwNHNSVHdpZzdNVENz?=
 =?utf-8?B?MjE3QjBqUWhDN2ZmclJMREx0WWlpVzBsbjMvSDJkZkpyK0VpUFEzR0pmdGJn?=
 =?utf-8?B?TGo3bVV1VDFlZ25PNm5zclh6K1RBZGh5WmNhVklMKzNtM3VNZTdYUkxxaTA3?=
 =?utf-8?B?d1hDS3VjdWdLUXYrSnJxMXZtTVU0VlZEaEdyTWtnNC9UQVhUcFpXY2NucDR5?=
 =?utf-8?B?bnlkdkFHVjRIeFB2VzFFeEh3L2JoWWl6N0NMaVgxRFlkNDlNN3FVWlJMQ01v?=
 =?utf-8?B?WHdOd1BUQk9zZWYzSVlhTXlVSTBDM1F6QjM1QUNMUEdVRDBhMXl6K1NXbitq?=
 =?utf-8?B?VFpuVnh2dkNucjREYzAvUUZuL1NEbUdEcnM4YUlMQ2c0WC96VURYVlJJSWN0?=
 =?utf-8?B?UkM4NkZ4TGhqYzd3blBySmtaYWtUeDFFUnFpbWZuekFyeUczT09CSlJUaU1p?=
 =?utf-8?B?TWd4aEd1MzVaNVByemlUenQrOVdLaWdyM3ZqaHZuRC9RNTZLb1NKa0xLYTRn?=
 =?utf-8?B?RHEyMlR0MTFXZ3FFT0x1OFZJbHdqVVB1RGlzanUzUFFmSFZYckNiTldoYzlh?=
 =?utf-8?B?VUNSSU5IQWV2T0dxaDROTmhrS3JHbWsyNXlNY3lpT1libHFKV2h3Mmx4WExi?=
 =?utf-8?B?WXk4WWFzMTBDMGswQ05jeU5qemhUcG5ISFZKempNS09NMlpJa3M1b3doNllH?=
 =?utf-8?B?UjFmdlVXV3B6RW0vY1NTR01Rd0tlYWVhSG9mZm12N2d1T0xlb0t5ZVFudFNN?=
 =?utf-8?B?dDJhcTdsUlhtVVhqRVFJRHJ0Q20wQW9lcVYxUG1nc21HNmRGc3o5Q0VEU0N6?=
 =?utf-8?B?anJZTlc5RzFDNXJmdEFnd3ZFTmdjaXRuMDR0am51UmFINnRFbmNsZnA2ZWhT?=
 =?utf-8?B?aWpWWlhSWlVQeHZtSVR1ZFJjQ1ZlM0p4dFlFaUNvcnF0ajdZY2ZJeEZidU50?=
 =?utf-8?B?R3JlWERMQ1czUEUxWEo3U0lBdU9QamtxbHZsRFlDU202MzJIRTZuNmFTMWR2?=
 =?utf-8?B?REZ3STBVKzAyYUVSRnphb3puQ2NXOE5rWDJxa3dSN3N5MXlpR3hvNXRxelNt?=
 =?utf-8?B?Mm5TZHQwZU9rYU9nOU5ucUNFM0cyOFdhanJPeWhsMVgrY2NQQm5nTlNlWERM?=
 =?utf-8?B?VWw1eFJVUnlKci9SbytaRUlOdUpOdzlrNlFNY1ZTSlU3TzBDVGV0V0x1eTdS?=
 =?utf-8?B?bFk1U3AwT3BCRXdGTE5qTlNDZ1N5QVpqeWJTOHVMK0NlNndrR2oxYnA0aFB5?=
 =?utf-8?B?dHFRYUdqeXRrNnFQWkdaUFlIWXRUQTNkTEZJcDJ4aTRtTDc4eHIxOGdUd09T?=
 =?utf-8?B?VGVlVmlVK2dURklScDJmU0hLTkVsQnFlWFFOc3RucE5FY3MwQWNBelYwQ3d3?=
 =?utf-8?B?ZDhCRTY5N1Q0cHFrcGt2ZU8wVXpwMFNEZHdYWkg1ZnZiRWVISDVxcE9HVmdZ?=
 =?utf-8?B?cW4zcDZvcEV1QU5reGhiT3M5M3VieFJXakNWNWx4YWhvWTlpeHZTUjVKb2gw?=
 =?utf-8?B?UnkrQjlWNGVINkNHNjB1ZnNxSWZvTjl0enhWdmsybFFHaHh3Q3A0SHd3TDNW?=
 =?utf-8?B?bXJHck5HQkpSSW90WmcrV1V6OFUxdGI4T0k0clBlcmtMcEQzUDkxLzBqS2VI?=
 =?utf-8?B?ODVZdUd5WEpucVhHekNhNmI3ZXRBUm5ENlB4VHVLWEdrSGNNTG9RRElDck5Q?=
 =?utf-8?Q?zF4gvbLMx50xvZR6OSNu6ycx8I0SbKEq7zxnAkrfVbuPE?=
X-MS-Exchange-AntiSpam-MessageData-1: seHKmdpjES02qw==
X-OriginatorOrg: amd.com
X-MS-Exchange-CrossTenant-Network-Message-Id: 7533b2ae-cfce-453c-f919-08da220dfd94
X-MS-Exchange-CrossTenant-AuthSource: BN8PR12MB3587.namprd12.prod.outlook.com
X-MS-Exchange-CrossTenant-AuthAs: Internal
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 19 Apr 2022 14:07:51.2851
 (UTC)
X-MS-Exchange-CrossTenant-FromEntityHeader: Hosted
X-MS-Exchange-CrossTenant-Id: 3dd8961f-e488-4e60-8e11-a82d994e183d
X-MS-Exchange-CrossTenant-MailboxType: HOSTED
X-MS-Exchange-CrossTenant-UserPrincipalName: nBYI4MuLvzNv3wxZ61q6vpPP5/OE/i5BJRHNgAvpGHzVmYRO12jX/9d6/E58l+EY
X-MS-Exchange-Transport-CrossTenantHeadersStamped: BN6PR1201MB0017
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

Am 19.04.22 um 15:59 schrieb Cai Huoqing:
> The NVIDIA Deep Learning Accelerator (NVDLA) is an open source IP
> which is integrated into NVIDIA Jetson AGX Xavier,
> so add driver support for this accelerator.
>
> Signed-off-by: Cai Huoqing <cai.huoqing@linux.dev>
>

Well doesn't looks so bad on first glance (regarding coding style etc..)

But am I blind or isn't there any UAPI for the driver? I mean adding a 
DRM driver without any change to include/uapi/drm is really odd.

Regards,
Christian.

From mboxrd@z Thu Jan  1 00:00:00 1970
Return-Path: <linux-kernel-owner@kernel.org>
Received: from vger.kernel.org (vger.kernel.org [23.128.96.18])
	by smtp.lore.kernel.org (Postfix) with ESMTP id 64B0BC433EF
	for <linux-kernel@archiver.kernel.org>; Tue, 19 Apr 2022 14:00:30 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1346047AbiDSODJ (ORCPT
        <rfc822;linux-kernel@archiver.kernel.org>);
        Tue, 19 Apr 2022 10:03:09 -0400
Received: from lindbergh.monkeyblade.net ([23.128.96.19]:39772 "EHLO
        lindbergh.monkeyblade.net" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1346122AbiDSODE (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Tue, 19 Apr 2022 10:03:04 -0400
Received: from out0.migadu.com (out0.migadu.com [IPv6:2001:41d0:2:267::])
        by lindbergh.monkeyblade.net (Postfix) with ESMTPS id 6E78FE082;
        Tue, 19 Apr 2022 07:00:20 -0700 (PDT)
X-Report-Abuse: Please report any abuse attempt to abuse@migadu.com and include these headers.
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=linux.dev; s=key1;
        t=1650376818;
        h=from:from:reply-to:subject:subject:date:date:message-id:message-id:
         to:to:cc:cc:mime-version:mime-version:
         content-transfer-encoding:content-transfer-encoding:
         in-reply-to:in-reply-to:references:references;
        bh=u5Wvlvmle3kAEhd+ojl34QrMg46Tjf7j2xlUSKh9vcM=;
        b=S8d8eQmdOHnnCLSfElo4+JkEtMfdNdh6T6AV/VZjY434RtjnFHhEK531BUY4IoXwOusSlI
        hQFmdmKFr7vhD4Y8dTR5E5zIX4uPqf6RZraCctXdZ8ibp46uYJJU3CqXOU3YrvkXV7cyvC
        MyDKXC6xk4OpRn+VDH63i1j0QgOhPTY=
From:   Cai Huoqing <cai.huoqing@linux.dev>
To:     cai.huoqing@linux.dev
Cc:     Maarten Lankhorst <maarten.lankhorst@linux.intel.com>,
        Maxime Ripard <mripard@kernel.org>,
        Thomas Zimmermann <tzimmermann@suse.de>,
        David Airlie <airlied@linux.ie>,
        Daniel Vetter <daniel@ffwll.ch>,
        Sumit Semwal <sumit.semwal@linaro.org>,
        =?UTF-8?q?Christian=20K=C3=B6nig?= <christian.koenig@amd.com>,
        linux-kernel@vger.kernel.org, dri-devel@lists.freedesktop.org,
        linux-media@vger.kernel.org, linaro-mm-sig@lists.linaro.org
Subject: [PATCH 2/2] drm/nvdla: Add driver support for NVDLA
Date:   Tue, 19 Apr 2022 21:59:00 +0800
Message-Id: <20220419135908.39606-3-cai.huoqing@linux.dev>
In-Reply-To: <20220419135908.39606-1-cai.huoqing@linux.dev>
References: <20220419135908.39606-1-cai.huoqing@linux.dev>
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
X-Migadu-Flow: FLOW_OUT
X-Migadu-Auth-User: linux.dev
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

The NVIDIA Deep Learning Accelerator (NVDLA) is an open source IP
which is integrated into NVIDIA Jetson AGX Xavier,
so add driver support for this accelerator.

Signed-off-by: Cai Huoqing <cai.huoqing@linux.dev>
---
 drivers/gpu/drm/Kconfig                 |    2 +
 drivers/gpu/drm/Makefile                |    1 +
 drivers/gpu/drm/nvdla/Kconfig           |    8 +
 drivers/gpu/drm/nvdla/Makefile          |   19 +
 drivers/gpu/drm/nvdla/nvdla_bdma.c      |  200 +
 drivers/gpu/drm/nvdla/nvdla_cache.c     |  215 +
 drivers/gpu/drm/nvdla/nvdla_cdp.c       |  300 ++
 drivers/gpu/drm/nvdla/nvdla_common.c    |  295 ++
 drivers/gpu/drm/nvdla/nvdla_common.h    |  835 +++
 drivers/gpu/drm/nvdla/nvdla_conv.c      |  683 +++
 drivers/gpu/drm/nvdla/nvdla_drm.c       |  695 +++
 drivers/gpu/drm/nvdla/nvdla_drm.h       |  127 +
 drivers/gpu/drm/nvdla/nvdla_engine.c    |  233 +
 drivers/gpu/drm/nvdla/nvdla_engine.h    |  272 +
 drivers/gpu/drm/nvdla/nvdla_gem.c       |  393 ++
 drivers/gpu/drm/nvdla/nvdla_ioctl.h     |   99 +
 drivers/gpu/drm/nvdla/nvdla_pdp.c       |  446 ++
 drivers/gpu/drm/nvdla/nvdla_reg.h       | 6411 +++++++++++++++++++++++
 drivers/gpu/drm/nvdla/nvdla_rubik.c     |  217 +
 drivers/gpu/drm/nvdla/nvdla_sched.h     |   52 +
 drivers/gpu/drm/nvdla/nvdla_scheduler.c | 1005 ++++
 drivers/gpu/drm/nvdla/nvdla_sdp.c       |  728 +++
 22 files changed, 13236 insertions(+)
 create mode 100644 drivers/gpu/drm/nvdla/Kconfig
 create mode 100644 drivers/gpu/drm/nvdla/Makefile
 create mode 100644 drivers/gpu/drm/nvdla/nvdla_bdma.c
 create mode 100644 drivers/gpu/drm/nvdla/nvdla_cache.c
 create mode 100644 drivers/gpu/drm/nvdla/nvdla_cdp.c
 create mode 100644 drivers/gpu/drm/nvdla/nvdla_common.c
 create mode 100644 drivers/gpu/drm/nvdla/nvdla_common.h
 create mode 100644 drivers/gpu/drm/nvdla/nvdla_conv.c
 create mode 100644 drivers/gpu/drm/nvdla/nvdla_drm.c
 create mode 100644 drivers/gpu/drm/nvdla/nvdla_drm.h
 create mode 100644 drivers/gpu/drm/nvdla/nvdla_engine.c
 create mode 100644 drivers/gpu/drm/nvdla/nvdla_engine.h
 create mode 100644 drivers/gpu/drm/nvdla/nvdla_gem.c
 create mode 100644 drivers/gpu/drm/nvdla/nvdla_ioctl.h
 create mode 100644 drivers/gpu/drm/nvdla/nvdla_pdp.c
 create mode 100644 drivers/gpu/drm/nvdla/nvdla_reg.h
 create mode 100644 drivers/gpu/drm/nvdla/nvdla_rubik.c
 create mode 100644 drivers/gpu/drm/nvdla/nvdla_sched.h
 create mode 100644 drivers/gpu/drm/nvdla/nvdla_scheduler.c
 create mode 100644 drivers/gpu/drm/nvdla/nvdla_sdp.c

diff --git a/drivers/gpu/drm/Kconfig b/drivers/gpu/drm/Kconfig
index 5133c3f028ab..a55cff374abd 100644
--- a/drivers/gpu/drm/Kconfig
+++ b/drivers/gpu/drm/Kconfig
@@ -409,6 +409,8 @@ source "drivers/gpu/drm/solomon/Kconfig"
 
 source "drivers/gpu/drm/sprd/Kconfig"
 
+source "drivers/gpu/drm/nvdla/Kconfig"
+
 config DRM_HYPERV
 	tristate "DRM Support for Hyper-V synthetic video device"
 	depends on DRM && PCI && MMU && HYPERV
diff --git a/drivers/gpu/drm/Makefile b/drivers/gpu/drm/Makefile
index c2ef5f9fce54..8fa3537f308a 100644
--- a/drivers/gpu/drm/Makefile
+++ b/drivers/gpu/drm/Makefile
@@ -134,3 +134,4 @@ obj-y			+= gud/
 obj-$(CONFIG_DRM_HYPERV) += hyperv/
 obj-y			+= solomon/
 obj-$(CONFIG_DRM_SPRD) += sprd/
+obj-$(CONFIG_DRM_NVDLA) += nvdla/
diff --git a/drivers/gpu/drm/nvdla/Kconfig b/drivers/gpu/drm/nvdla/Kconfig
new file mode 100644
index 000000000000..11c04f5da877
--- /dev/null
+++ b/drivers/gpu/drm/nvdla/Kconfig
@@ -0,0 +1,8 @@
+# SPDX-License-Identifier: GPL-2.0-only
+config DRM_NVDLA
+	tristate "NVDLA DRM"
+	depends on DRM
+	select DRM_GEM_CMA_HELPER
+	help
+	  Choose this option for open-source NVIDIA DLA support.
+	  If M is selected the module will be called nvdla-drm.
diff --git a/drivers/gpu/drm/nvdla/Makefile b/drivers/gpu/drm/nvdla/Makefile
new file mode 100644
index 000000000000..74f37d258f8d
--- /dev/null
+++ b/drivers/gpu/drm/nvdla/Makefile
@@ -0,0 +1,19 @@
+
+# SPDX-License-Identifier: GPL-2.0
+nvdla-drm-y := \
+	nvdla_drm.o \
+	nvdla_gem.o \
+	nvdla_scheduler.o \
+	nvdla_engine.o \
+	nvdla_bdma.o \
+	nvdla_conv.o \
+	nvdla_sdp.o \
+	nvdla_cdp.o \
+	nvdla_pdp.o \
+	nvdla_rubik.o \
+	nvdla_cache.o \
+	nvdla_common.o \
+	nvdla_engine_data.o \
+	nvdla_engine_debug.o \
+
+obj-$(CONFIG_DRM_NVDLA) += nvdla-drm.o
diff --git a/drivers/gpu/drm/nvdla/nvdla_bdma.c b/drivers/gpu/drm/nvdla/nvdla_bdma.c
new file mode 100644
index 000000000000..225613f27acf
--- /dev/null
+++ b/drivers/gpu/drm/nvdla/nvdla_bdma.c
@@ -0,0 +1,200 @@
+// SPDX-License-Identifier: BSD-3-Clause OR GPL-2.0
+/*
+ * Copyright (C) 2017-2018 NVIDIA CORPORATION
+ * Copyright (C) 2022 Cai Huoqing
+ */
+
+#include "nvdla_common.h"
+#include "nvdla_drm.h"
+#include "nvdla_reg.h"
+#include "nvdla_engine.h"
+
+static const uint8_t map_mem[] = {
+	FIELD_ENUM(BDMA_CFG_CMD_0, SRC_RAM_TYPE, MC),
+	FIELD_ENUM(BDMA_CFG_CMD_0, SRC_RAM_TYPE, CVSRAM),
+};
+
+void
+dla_bdma_set_producer(struct dla_engine *engine, int32_t group_id, int32_t rdma_group_id)
+{
+	/**
+	 * There is no producer bit for BDMA operation,
+	 * interrupt pointer decides which outstanding request
+	 * to use for this BDMA operation
+	 */
+}
+
+int
+dla_bdma_enable(struct dla_engine *engine, struct dla_processor_group *group)
+{
+	if (group->surface_desc->bdma_surface.num_transfers == (uint16_t)0) {
+		group->events |= ((uint8_t)1 << DLA_EVENT_OP_COMPLETED);
+		goto exit;
+	}
+
+	/**
+	 * Launch BDMA transfer
+	 */
+	if (group->id == 0)
+		bdma_reg_write(engine, CFG_LAUNCH0, FIELD_ENUM(BDMA_CFG_LAUNCH0_0,
+							GRP0_LAUNCH, YES));
+	else
+		bdma_reg_write(engine, CFG_LAUNCH1, FIELD_ENUM(BDMA_CFG_LAUNCH1_0,
+							GRP1_LAUNCH, YES));
+
+exit:
+	return 0;
+}
+
+void
+dla_bdma_rdma_check(struct dla_processor_group *group)
+{
+	group->is_rdma_needed = 0;
+}
+
+/**
+ * Program BDMA slot for transfer
+ */
+static int32_t
+processor_bdma_program_slot(struct dla_engine *engine,
+							struct dla_bdma_surface_desc *bdma_surface,
+							struct dla_bdma_transfer_desc *transfer)
+{
+	int32_t ret = 0;
+	uint64_t source_addr = 0;
+	uint64_t destination_addr = 0;
+	uint32_t high, low, reg;
+	uint8_t  bdma_free_slots = 0;
+
+	/* make sure there're enough free slots */
+	if (bdma_free_slots <= 0) {
+		do {
+			reg = bdma_reg_read(engine, STATUS);
+			reg = (reg & MASK(BDMA_STATUS_0, FREE_SLOT)) >>
+					SHIFT(BDMA_STATUS_0, FREE_SLOT);
+		} while (reg == 0);
+		bdma_free_slots = (uint8_t)reg;
+	}
+
+	dla_get_dma_address(engine->driver_context, engine->task->task_data,
+						transfer->source_address,
+						(void *)&source_addr,
+						DESTINATION_DMA);
+	dla_get_dma_address(engine->driver_context, engine->task->task_data,
+						transfer->destination_address,
+						(void *)&destination_addr,
+						DESTINATION_DMA);
+
+	ASSERT_GOTO((transfer->line_repeat <= 8192),
+				ret, -EINVAL, exit);
+	ASSERT_GOTO((transfer->surface_repeat <= 8192),
+				ret, -EINVAL, exit);
+	ASSERT_GOTO((transfer->line_size % 32) == 0,
+				ret, -EINVAL, exit);
+	ASSERT_GOTO(transfer->source_line >= transfer->line_size,
+				ret, -EINVAL, exit);
+	ASSERT_GOTO(transfer->destination_line >= transfer->line_size,
+				ret, -EINVAL, exit);
+	ASSERT_GOTO(transfer->source_surface >=
+			(transfer->source_line * transfer->line_repeat),
+				ret, -EINVAL, exit);
+	ASSERT_GOTO(transfer->destination_surface >=
+			(transfer->destination_line * transfer->line_repeat),
+				ret, -EINVAL, exit);
+
+	/* config registers */
+	high = upper_32_bits(source_addr);
+	low = lower_32_bits(source_addr);
+	bdma_reg_write(engine, CFG_SRC_ADDR_LOW, low);
+	bdma_reg_write(engine, CFG_SRC_ADDR_HIGH, high);
+	high = upper_32_bits(destination_addr);
+	low = lower_32_bits(destination_addr);
+	bdma_reg_write(engine, CFG_DST_ADDR_LOW, low);
+	bdma_reg_write(engine, CFG_DST_ADDR_HIGH, high);
+	bdma_reg_write(engine, CFG_LINE, (transfer->line_size >> 5) - 1);
+	reg = (map_mem[bdma_surface->source_type] <<
+				SHIFT(BDMA_CFG_CMD_0, SRC_RAM_TYPE)) |
+		(map_mem[bdma_surface->destination_type] <<
+				SHIFT(BDMA_CFG_CMD_0, DST_RAM_TYPE));
+	bdma_reg_write(engine, CFG_CMD, reg);
+	bdma_reg_write(engine, CFG_LINE_REPEAT, transfer->line_repeat - 1);
+	bdma_reg_write(engine, CFG_SRC_LINE, transfer->source_line);
+	bdma_reg_write(engine, CFG_DST_LINE, transfer->destination_line);
+	bdma_reg_write(engine, CFG_SURF_REPEAT, transfer->surface_repeat - 1);
+	bdma_reg_write(engine, CFG_SRC_SURF, transfer->source_surface);
+	bdma_reg_write(engine, CFG_DST_SURF, transfer->destination_surface);
+	bdma_reg_write(engine, CFG_OP, FIELD_ENUM(BDMA_CFG_OP_0, EN, ENABLE));
+
+exit:
+	return ret;
+}
+
+int
+dla_bdma_is_ready(struct dla_processor *processor,
+				  struct dla_processor_group *group)
+{
+	struct dla_processor_group *next_group;
+
+	next_group = &processor->groups[!group->id];
+
+	/**
+	 * If another group is already programmed but not active then
+	 * do not program this operation as BDMA does not really
+	 * have shadow copies for groups. It will end programming
+	 * same group. Wait for another group to get enabled.
+	 */
+	if ((processor->group_status & (1 << next_group->id)) &&
+						!next_group->active)
+		return 0;
+
+	return 1;
+}
+
+void
+dla_bdma_dump_config(struct dla_processor_group *group)
+{
+	struct dla_bdma_op_desc *bdma_op;
+	struct dla_bdma_surface_desc *bdma_surface;
+
+	bdma_surface = &group->surface_desc->bdma_surface;
+	bdma_op = &group->operation_desc->bdma_op;
+}
+
+int
+dla_bdma_program(struct dla_engine *engine, struct dla_processor_group *group)
+{
+	int32_t i;
+	int32_t ret = 0;
+	struct dla_bdma_surface_desc *bdma_surface;
+
+	if (!engine->config_data->bdma_enable) {
+		pr_err("BDMA is not supported for this configuration\n");
+		ret = -EINVAL;
+		goto exit;
+	}
+
+	bdma_surface = &group->surface_desc->bdma_surface;
+
+	pr_debug("Num of transfers %u\n", bdma_surface->num_transfers);
+	if (bdma_surface->num_transfers == (uint16_t)0)
+		goto exit;
+
+	if (bdma_surface->num_transfers > NUM_MAX_BDMA_OPS) {
+		pr_err("Invalid number of transfers\n");
+		ret = -EINVAL;
+		goto exit;
+	}
+
+	for (i = 0; i < bdma_surface->num_transfers; i++) {
+		ret = processor_bdma_program_slot(engine, bdma_surface,
+					&bdma_surface->transfers[i]);
+		if (ret)
+			goto exit;
+	}
+
+	dla_enable_intr(engine, MASK(GLB_S_INTR_MASK_0, BDMA_DONE_MASK1) |
+			MASK(GLB_S_INTR_MASK_0, BDMA_DONE_MASK0));
+
+exit:
+	return ret;
+}
diff --git a/drivers/gpu/drm/nvdla/nvdla_cache.c b/drivers/gpu/drm/nvdla/nvdla_cache.c
new file mode 100644
index 000000000000..f8bd7b514aab
--- /dev/null
+++ b/drivers/gpu/drm/nvdla/nvdla_cache.c
@@ -0,0 +1,215 @@
+// SPDX-License-Identifier: BSD-3-Clause OR GPL-2.0
+/*
+ * Copyright (C) 2017-2018 NVIDIA CORPORATION
+ * Copyright (C) 2022 Cai Huoqing
+ */
+
+#include "nvdla_common.h"
+#include "nvdla_drm.h"
+#include "nvdla_reg.h"
+#include "nvdla_engine.h"
+
+#define DLA_OP_CACHE_SIZE (DLA_NUM_GROUPS * ((DLA_OP_NUM + 2) * 2))
+
+static struct dla_common_op_desc desc_cache[DLA_OP_NUM][DLA_OP_CACHE_SIZE];
+static int32_t desc_refcount[DLA_OP_NUM][DLA_OP_CACHE_SIZE];
+
+void
+dla_get_refcount(struct dla_common_op_desc *op_desc)
+{
+	int32_t i;
+	struct dla_common_op_desc *desc = NULL;
+
+	if (op_desc == NULL)
+		return;
+
+	if (op_desc->index == -1)
+		return;
+
+	desc = &desc_cache[op_desc->op_type][0];
+
+	for (i = 0; i < DLA_OP_CACHE_SIZE; i++, desc++) {
+		if (desc->index == op_desc->index &&
+				desc->roi_index == op_desc->roi_index) {
+			desc_refcount[op_desc->op_type][i]++;
+			return;
+		}
+	}
+}
+
+struct dla_common_op_desc *
+dla_get_op_desc(struct dla_engine *engine,
+				struct dla_task *task, int16_t index,
+				uint8_t op_type, uint8_t roi_index)
+{
+	int32_t i;
+	int32_t ret;
+	uint64_t op_base;
+	uint64_t dep_graph_addr;
+	struct dla_common_op_desc *desc = NULL;
+
+	if (index == -1) {
+		pr_debug("no desc get due to index==-1\n");
+		goto exit;
+	}
+
+	dep_graph_addr = (sizeof(struct dla_common_op_desc) *
+				engine->network->num_operations * roi_index);
+
+	desc = &desc_cache[op_type][0];
+
+	for (i = 0; i < DLA_OP_CACHE_SIZE; i++, desc++) {
+		if (desc->index == index && desc->roi_index == roi_index) {
+			if (desc->op_type != op_type) {
+				pr_err("op_cache[op=%u] contains incorrect entry of op[%u]\n",
+					   op_type, desc->op_type);
+				continue;
+			}
+			desc_refcount[op_type][i]++;
+			goto exit;
+		}
+	}
+
+	desc = &desc_cache[op_type][0];
+
+	for (i = 0; i < DLA_OP_CACHE_SIZE; i++, desc++) {
+		if (desc->index == -1) {
+			op_base = dep_graph_addr +
+					(sizeof(struct dla_common_op_desc) *
+					(uint64_t)index);
+			ret = dla_data_read(engine->driver_context,
+					task->task_data,
+					task->dependency_graph_addr,
+					(void *)(desc),
+					sizeof(struct dla_common_op_desc),
+					op_base);
+			if (ret) {
+				desc = NULL;
+				goto exit;
+			}
+
+			if (op_type != desc->op_type) {
+				/*
+				 * op_type of entry read from DRAM should not
+				 * mismatch with given op_type. If they
+				 * mismatches, then wrong entry is fetched, so
+				 * report this issue by throwing error.
+				 */
+				pr_err("Fetched [op_type=%u] from DRAM doesn't match with op_type[%u]\n",
+					   desc->op_type, op_type);
+				desc->op_type = op_type;
+				desc->index = -1;
+				desc->roi_index = -1;
+				desc = NULL;
+				goto exit;
+			}
+
+			desc->index = index;
+			desc->roi_index = roi_index;
+
+			desc_refcount[op_type][i]++;
+			goto exit;
+		}
+	}
+
+exit:
+	return desc;
+}
+
+static void
+dla_free_op_desc(struct dla_engine *engine, struct dla_common_op_desc *op_desc)
+{
+	uint64_t op_base;
+	uint64_t dep_graph_addr;
+	struct dla_task *task;
+
+	pr_debug("Enter: %s op desc index %u ROI %d\n", __func__,
+				op_desc->index, op_desc->roi_index);
+
+	task = engine->task;
+	dep_graph_addr = (sizeof(struct dla_common_op_desc) *
+				engine->network->num_operations *
+				op_desc->roi_index);
+
+	if (op_desc->index == -1)
+		goto exit;
+
+	if (op_desc == NULL)
+		goto exit;
+
+	/**
+	 * TODO: keeping the depth value hardcoded as 0 for now,
+	 * need to replace it once corresponding implementation is done.
+	 */
+	op_base = (dep_graph_addr +
+			(sizeof(struct dla_common_op_desc) *
+			(uint64_t)op_desc->index));
+
+	/**
+	 * Flush descriptor to DRAM
+	 */
+	dla_data_write(engine->driver_context,
+			task->task_data,
+			(void *)op_desc,
+			task->dependency_graph_addr,
+			sizeof(struct dla_common_op_desc),
+			op_base);
+
+	/**
+	 * Release it
+	 */
+	op_desc->index = -1;
+	op_desc->roi_index = -1;
+exit:
+	return;
+}
+
+void
+dla_put_op_desc(struct dla_engine *engine, struct dla_common_op_desc *op_desc)
+{
+	int32_t i;
+	struct dla_common_op_desc *desc;
+
+	if (op_desc == NULL)
+		return;
+
+	if (op_desc->index == -1)
+		return;
+
+	desc = &desc_cache[op_desc->op_type][0];
+
+	for (i = 0; i < DLA_OP_CACHE_SIZE; i++, desc++) {
+		if (desc->index == op_desc->index &&
+				desc->roi_index == op_desc->roi_index) {
+
+			desc_refcount[op_desc->op_type][i]--;
+
+			/**
+			 * Free desc if refcount is 0
+			 */
+			if (desc_refcount[op_desc->op_type][i] == 0)
+				dla_free_op_desc(engine, op_desc);
+
+			return;
+		}
+	}
+}
+
+void
+dla_init_op_cache(struct dla_engine *engine)
+{
+	int32_t i, j;
+	struct dla_common_op_desc *desc = &desc_cache[0][0];
+
+	memset((uint8_t *)&desc_cache[0][0], 0, sizeof(desc_cache));
+	memset((uint8_t *)&desc_refcount[0][0], 0, sizeof(desc_refcount));
+
+	for (i = 0; i < DLA_OP_NUM; i++) {
+		for (j = 0; j < DLA_OP_CACHE_SIZE; j++) {
+			desc->index = -1;
+			desc->roi_index = -1;
+			desc->op_type = (uint8_t)i;
+			desc++;
+		}
+	}
+}
diff --git a/drivers/gpu/drm/nvdla/nvdla_cdp.c b/drivers/gpu/drm/nvdla/nvdla_cdp.c
new file mode 100644
index 000000000000..793161e50b1c
--- /dev/null
+++ b/drivers/gpu/drm/nvdla/nvdla_cdp.c
@@ -0,0 +1,300 @@
+// SPDX-License-Identifier: BSD-3-Clause OR GPL-2.0
+/*
+ * Copyright (C) 2017-2018 NVIDIA CORPORATION
+ * Copyright (C) 2022 Cai Huoqing
+ */
+
+#include "nvdla_common.h"
+#include "nvdla_drm.h"
+#include "nvdla_reg.h"
+#include "nvdla_engine.h"
+
+static const uint8_t map_ram[] = {
+	FIELD_ENUM(CDP_RDMA_D_SRC_DMA_CFG_0, SRC_RAM_TYPE, MC),
+	FIELD_ENUM(CDP_RDMA_D_SRC_DMA_CFG_0, SRC_RAM_TYPE, CV),
+};
+
+static const uint8_t map_precision[] = {
+	FIELD_ENUM(CDP_RDMA_D_DATA_FORMAT_0, INPUT_DATA, INT8),
+	FIELD_ENUM(CDP_RDMA_D_DATA_FORMAT_0, INPUT_DATA, INT16),
+	FIELD_ENUM(CDP_RDMA_D_DATA_FORMAT_0, INPUT_DATA, FP16),
+};
+
+static const uint8_t map_perf_dma[] = {
+	FIELD_ENUM(CDP_D_PERF_ENABLE_0, DMA_EN, DISABLE),
+	FIELD_ENUM(CDP_D_PERF_ENABLE_0, DMA_EN, ENABLE),
+};
+
+static const uint8_t map_perf_lut[] = {
+	FIELD_ENUM(CDP_D_PERF_ENABLE_0, LUT_EN, DISABLE),
+	FIELD_ENUM(CDP_D_PERF_ENABLE_0, LUT_EN, ENABLE),
+};
+
+
+static uint32_t
+map_local_size(uint8_t local_size)
+{
+	return ((local_size-1)/2)-1;
+}
+
+void
+dla_cdp_set_producer(struct dla_engine *engine, int32_t group_id, int32_t rdma_group_id)
+{
+	uint32_t reg;
+
+	/**
+	 * set producer pointer for all sub-modules
+	 */
+	reg = group_id << SHIFT(CDP_S_POINTER_0, PRODUCER);
+	cdp_reg_write(engine, S_POINTER, reg);
+	reg = group_id << SHIFT(CDP_RDMA_S_POINTER_0, PRODUCER);
+	cdp_rdma_reg_write(engine, S_POINTER, reg);
+}
+
+int
+dla_cdp_enable(struct dla_engine *engine, struct dla_processor_group *group)
+{
+	uint32_t reg;
+
+	/**
+	 * enable all sub-modules
+	 */
+	reg = FIELD_ENUM(CDP_RDMA_D_OP_ENABLE_0, OP_EN, ENABLE);
+	cdp_rdma_reg_write(engine, D_OP_ENABLE, reg);
+	reg = FIELD_ENUM(CDP_D_OP_ENABLE_0, OP_EN, ENABLE);
+	cdp_reg_write(engine, D_OP_ENABLE, reg);
+
+	return 0;
+}
+
+void
+dla_cdp_rdma_check(struct dla_processor_group *group)
+{
+	group->is_rdma_needed = 1;
+}
+
+static int32_t
+processor_cdp_program(struct dla_engine *engine, struct dla_processor_group *group)
+{
+	int32_t ret = 0;
+	uint32_t reg, high, low;
+	uint64_t input_address = 0;
+	uint64_t output_address = 0;
+	struct dla_lut_param lut;
+	struct dla_cdp_op_desc *cdp_op;
+	struct dla_cdp_surface_desc *cdp_surface;
+
+	cdp_op = &group->operation_desc->cdp_op;
+	cdp_surface = &group->surface_desc->cdp_surface;
+
+	/* Argument check */
+	if (cdp_surface->src_data.type == DLA_MEM_HW) {
+		pr_err("Invalid source memory type\n");
+		ret = -EINVAL;
+		goto exit;
+	}
+	if (cdp_surface->dst_data.type == DLA_MEM_HW) {
+		pr_err("Invalid destination memory type\n");
+		ret = -EINVAL;
+		goto exit;
+	}
+
+	if (cdp_op->in_precision != cdp_op->out_precision) {
+		pr_err("CDP does not support precision conversion\n");
+		ret = -EINVAL;
+		goto exit;
+	}
+
+	/* get the addresses from task descriptor */
+	ret = dla_read_input_address(engine, &cdp_surface->src_data,
+								 &input_address,
+								 group->op_desc->index,
+								 group->roi_index, 1);
+	if (ret)
+		goto exit;
+
+	dla_get_dma_cube_address(engine->driver_context,
+							 engine->task->task_data,
+							 cdp_surface->dst_data.address,
+							 cdp_surface->dst_data.offset,
+							 (void *)&output_address,
+							 DESTINATION_DMA);
+	if (cdp_op->lut_index >= 0) {
+		group->lut_index = cdp_op->lut_index;
+		dla_read_lut(engine, cdp_op->lut_index, (void *)&lut);
+	}
+
+	/* config CDP RDMA registers */
+	reg = ((cdp_surface->src_data.width - 1)
+		<< SHIFT(CDP_RDMA_D_DATA_CUBE_WIDTH_0, WIDTH));
+	cdp_rdma_reg_write(engine, D_DATA_CUBE_WIDTH, reg);
+
+	reg = ((cdp_surface->src_data.height - 1)
+		<< SHIFT(CDP_RDMA_D_DATA_CUBE_HEIGHT_0, HEIGHT));
+	cdp_rdma_reg_write(engine, D_DATA_CUBE_HEIGHT, reg);
+
+	reg = ((cdp_surface->src_data.channel - 1)
+		<< SHIFT(CDP_RDMA_D_DATA_CUBE_CHANNEL_0, CHANNEL));
+	cdp_rdma_reg_write(engine, D_DATA_CUBE_CHANNEL, reg);
+
+	high = upper_32_bits(input_address);
+	low = lower_32_bits(input_address);
+	cdp_rdma_reg_write(engine, D_SRC_BASE_ADDR_LOW, low);
+	cdp_rdma_reg_write(engine, D_SRC_BASE_ADDR_HIGH, high);
+
+	cdp_rdma_reg_write(engine, D_SRC_LINE_STRIDE,
+			cdp_surface->src_data.line_stride);
+	cdp_rdma_reg_write(engine, D_SRC_SURFACE_STRIDE,
+			cdp_surface->src_data.surf_stride);
+
+	reg = (map_ram[cdp_surface->src_data.type]
+		<< SHIFT(CDP_RDMA_D_SRC_DMA_CFG_0, SRC_RAM_TYPE));
+	cdp_rdma_reg_write(engine, D_SRC_DMA_CFG, reg);
+
+	reg = (map_precision[cdp_op->in_precision]
+		<< SHIFT(CDP_RDMA_D_DATA_FORMAT_0, INPUT_DATA));
+	cdp_rdma_reg_write(engine, D_DATA_FORMAT, reg);
+
+	/* config CDP */
+	if (cdp_op->lut_index >= 0)
+		update_lut(engine, CDP_S_LUT_ACCESS_CFG_0, &lut, cdp_op->in_precision);
+
+	high = upper_32_bits(output_address);
+	low = lower_32_bits(output_address);
+	cdp_reg_write(engine, D_DST_BASE_ADDR_LOW, low);
+	cdp_reg_write(engine, D_DST_BASE_ADDR_HIGH, high);
+
+	cdp_reg_write(engine, D_DST_LINE_STRIDE, cdp_surface->dst_data.line_stride);
+	cdp_reg_write(engine, D_DST_SURFACE_STRIDE, cdp_surface->dst_data.surf_stride);
+
+	reg = (map_ram[cdp_surface->dst_data.type]
+		<< SHIFT(CDP_D_DST_DMA_CFG_0, DST_RAM_TYPE));
+	cdp_reg_write(engine, D_DST_DMA_CFG, reg);
+
+	reg = (map_precision[cdp_op->in_precision]
+		<< SHIFT(CDP_D_DATA_FORMAT_0, INPUT_DATA_TYPE));
+	cdp_reg_write(engine, D_DATA_FORMAT, reg);
+
+	reg = (map_local_size(cdp_op->local_size)
+		<< SHIFT(CDP_D_LRN_CFG_0, NORMALZ_LEN));
+	cdp_reg_write(engine, D_LRN_CFG, reg);
+
+	reg = (cdp_op->in_cvt.offset
+		<< SHIFT(CDP_D_DATIN_OFFSET_0, DATIN_OFFSET));
+	cdp_reg_write(engine, D_DATIN_OFFSET, reg);
+
+	reg = (cdp_op->in_cvt.scale
+		<< SHIFT(CDP_D_DATIN_SCALE_0, DATIN_SCALE));
+	cdp_reg_write(engine, D_DATIN_SCALE, reg);
+
+	reg = (cdp_op->in_cvt.truncate
+		<< SHIFT(CDP_D_DATIN_SHIFTER_0, DATIN_SHIFTER));
+	cdp_reg_write(engine, D_DATIN_SHIFTER, reg);
+
+	reg = (cdp_op->out_cvt.offset
+		<< SHIFT(CDP_D_DATOUT_OFFSET_0, DATOUT_OFFSET));
+	cdp_reg_write(engine, D_DATOUT_OFFSET, reg);
+
+	reg = (cdp_op->out_cvt.scale
+		<< SHIFT(CDP_D_DATOUT_SCALE_0, DATOUT_SCALE));
+	cdp_reg_write(engine, D_DATOUT_SCALE, reg);
+
+	reg = (cdp_op->out_cvt.truncate
+		<< SHIFT(CDP_D_DATOUT_SHIFTER_0, DATOUT_SHIFTER));
+	cdp_reg_write(engine, D_DATOUT_SHIFTER, reg);
+
+	reg = ((cdp_op->bypass_sqsum ?
+		FIELD_ENUM(CDP_D_FUNC_BYPASS_0, SQSUM_BYPASS, ENABLE) :
+		FIELD_ENUM(CDP_D_FUNC_BYPASS_0, SQSUM_BYPASS, DISABLE)) <<
+		SHIFT(CDP_D_FUNC_BYPASS_0, SQSUM_BYPASS)) |
+		((cdp_op->bypass_out_mul ?
+		FIELD_ENUM(CDP_D_FUNC_BYPASS_0, MUL_BYPASS, ENABLE) :
+		FIELD_ENUM(CDP_D_FUNC_BYPASS_0, MUL_BYPASS, DISABLE)) <<
+		SHIFT(CDP_D_FUNC_BYPASS_0, MUL_BYPASS));
+	cdp_reg_write(engine, D_FUNC_BYPASS, reg);
+
+exit:
+	return ret;
+}
+
+int
+dla_cdp_is_ready(struct dla_processor *processor,
+				 struct dla_processor_group *group)
+{
+	struct dla_processor_group *next_group;
+	struct dla_cdp_op_desc *cdp_op;
+
+	cdp_op = &group->operation_desc->cdp_op;
+	next_group = &processor->groups[!group->id];
+
+	/**
+	 * Single LUT is shared between two CDP groups, need to make
+	 * sure that usage does not conflict. Also, LUT write
+	 * access is locked when CDP sub-engine is active, so delay
+	 * writing LUT when another group is active.
+	 */
+
+	/**
+	 * if no LUT required for current group then it can be programmed
+	 * without further checks
+	 */
+	if (cdp_op->lut_index == -1)
+		return 1;
+
+	/**
+	 * if same LUT is used for both groups then it can be programmed
+	 * without more checks. Even if another group is active and LUT
+	 * is locked, it would have been programmed by another group.
+	 */
+	if (next_group->lut_index == cdp_op->lut_index)
+		return 1;
+
+	/**
+	 * if LUT index of another group is not -1 means some LUT is programmed,
+	 * then do not program current LUT as we already know current LUT is not
+	 * -1 and neither same as another group.
+	 */
+	if (next_group->lut_index != -1)
+		return 0;
+
+	/**
+	 * if current group needs LUT different than another group and that
+	 * group is not active then program it.
+	 */
+	if (!next_group->active)
+		return 1;
+
+	/**
+	 * if control is here it means current group is using LUT different than
+	 * another group and that group is active. Wait for another group to
+	 * become idle.
+	 */
+
+	return 0;
+}
+
+void
+dla_cdp_dump_config(struct dla_processor_group *group)
+{
+	struct dla_cdp_op_desc *cdp_op;
+	struct dla_cdp_surface_desc *cdp_surface;
+
+	cdp_surface = &group->surface_desc->cdp_surface;
+	cdp_op = &group->operation_desc->cdp_op;
+}
+
+int
+dla_cdp_program(struct dla_engine *engine, struct dla_processor_group *group)
+{
+	int32_t ret;
+
+	dla_enable_intr(engine, MASK(GLB_S_INTR_MASK_0, CDP_DONE_MASK1) |
+					MASK(GLB_S_INTR_MASK_0, CDP_DONE_MASK0));
+
+	ret = processor_cdp_program(engine, group);
+	if (ret)
+		goto exit;
+
+exit:
+	return ret;
+}
diff --git a/drivers/gpu/drm/nvdla/nvdla_common.c b/drivers/gpu/drm/nvdla/nvdla_common.c
new file mode 100644
index 000000000000..3abc863d9fce
--- /dev/null
+++ b/drivers/gpu/drm/nvdla/nvdla_common.c
@@ -0,0 +1,295 @@
+// SPDX-License-Identifier: BSD-3-Clause OR GPL-2.0
+/*
+ * Copyright (C) 2017-2018 NVIDIA CORPORATION
+ * Copyright (C) 2022 Cai Huoqing
+ */
+
+#include "nvdla_reg.h"
+#include "nvdla_common.h"
+#include "nvdla_drm.h"
+#include "nvdla_engine.h"
+
+static const uint8_t map_lut_method[] = {
+	FIELD_ENUM(CDP_S_LUT_CFG_0, LUT_LE_FUNCTION, EXPONENT),
+	FIELD_ENUM(CDP_S_LUT_CFG_0, LUT_LE_FUNCTION, LINEAR)
+};
+static const uint8_t map_lut_out[] = {
+	FIELD_ENUM(CDP_S_LUT_CFG_0, LUT_UFLOW_PRIORITY, LE),
+	FIELD_ENUM(CDP_S_LUT_CFG_0, LUT_UFLOW_PRIORITY, LO)
+};
+
+static const uint16_t access_data_offset[] = {
+	CDP_S_LUT_ACCESS_DATA_0 - CDP_S_LUT_ACCESS_CFG_0,
+	SDP_S_LUT_ACCESS_DATA_0 - SDP_S_LUT_ACCESS_CFG_0,
+};
+static const uint16_t lut_cfg_offset[] = {
+	CDP_S_LUT_CFG_0 - CDP_S_LUT_ACCESS_CFG_0,
+	SDP_S_LUT_CFG_0 - SDP_S_LUT_ACCESS_CFG_0,
+};
+static const uint16_t lut_info_offset[] = {
+	CDP_S_LUT_INFO_0 - CDP_S_LUT_ACCESS_CFG_0,
+	SDP_S_LUT_INFO_0 - SDP_S_LUT_ACCESS_CFG_0,
+};
+static const uint16_t le_start_offset[] = {
+	CDP_S_LUT_LE_START_LOW_0 - CDP_S_LUT_ACCESS_CFG_0,
+	SDP_S_LUT_LE_START_0 - SDP_S_LUT_ACCESS_CFG_0,
+};
+static const uint16_t le_end_offset[] = {
+	CDP_S_LUT_LE_END_LOW_0 - CDP_S_LUT_ACCESS_CFG_0,
+	SDP_S_LUT_LE_END_0 - SDP_S_LUT_ACCESS_CFG_0,
+};
+static const uint16_t lo_start_offset[] = {
+	CDP_S_LUT_LO_START_LOW_0 - CDP_S_LUT_ACCESS_CFG_0,
+	SDP_S_LUT_LO_START_0 - SDP_S_LUT_ACCESS_CFG_0,
+};
+static const uint16_t lo_end_offset[] = {
+	CDP_S_LUT_LO_END_LOW_0 - CDP_S_LUT_ACCESS_CFG_0,
+	SDP_S_LUT_LO_END_0 - SDP_S_LUT_ACCESS_CFG_0,
+};
+static const uint16_t le_slope_scale_offset[] = {
+	CDP_S_LUT_LE_SLOPE_SCALE_0 - CDP_S_LUT_ACCESS_CFG_0,
+	SDP_S_LUT_LE_SLOPE_SCALE_0 - SDP_S_LUT_ACCESS_CFG_0,
+};
+static const uint16_t le_slope_shift_offset[] = {
+	CDP_S_LUT_LE_SLOPE_SHIFT_0 - CDP_S_LUT_ACCESS_CFG_0,
+	SDP_S_LUT_LE_SLOPE_SHIFT_0 - SDP_S_LUT_ACCESS_CFG_0,
+};
+static const uint16_t lo_slope_scale_offset[] = {
+	CDP_S_LUT_LO_SLOPE_SCALE_0 - CDP_S_LUT_ACCESS_CFG_0,
+	SDP_S_LUT_LO_SLOPE_SCALE_0 - SDP_S_LUT_ACCESS_CFG_0,
+};
+static const uint16_t lo_slope_shift_offset[] = {
+	CDP_S_LUT_LO_SLOPE_SHIFT_0 - CDP_S_LUT_ACCESS_CFG_0,
+	SDP_S_LUT_LO_SLOPE_SHIFT_0 - SDP_S_LUT_ACCESS_CFG_0,
+};
+
+void update_lut(struct dla_engine *engine, uint32_t reg_base,
+				struct dla_lut_param *lut, uint8_t precision)
+{
+	int32_t i;
+	uint32_t reg;
+	uint32_t high, low;
+	int32_t is_sdp = reg_base == SDP_S_LUT_ACCESS_CFG_0;
+
+	/* program raw table */
+	reg = (FIELD_ENUM(CDP_S_LUT_ACCESS_CFG_0, LUT_TABLE_ID, LE)
+		<< SHIFT(CDP_S_LUT_ACCESS_CFG_0, LUT_TABLE_ID)) |
+		(FIELD_ENUM(CDP_S_LUT_ACCESS_CFG_0, LUT_ACCESS_TYPE, WRITE)
+		<< SHIFT(CDP_S_LUT_ACCESS_CFG_0, LUT_ACCESS_TYPE));
+	reg_write(engine, reg_base, reg);
+
+	for (i = 0; i < (1<<LUT_LINEAR_EXP_TABLE_ENTRY_LOG2)+1; i++) {
+		dla_reg_write(engine->driver_context,
+				reg_base + access_data_offset[is_sdp],
+				lut->linear_exp_table[i]);
+	}
+
+	/* program density table */
+	reg = (FIELD_ENUM(CDP_S_LUT_ACCESS_CFG_0, LUT_TABLE_ID, LO)
+		<< SHIFT(CDP_S_LUT_ACCESS_CFG_0, LUT_TABLE_ID)) |
+		(FIELD_ENUM(CDP_S_LUT_ACCESS_CFG_0, LUT_ACCESS_TYPE, WRITE)
+		<< SHIFT(CDP_S_LUT_ACCESS_CFG_0, LUT_ACCESS_TYPE));
+	dla_reg_write(engine->driver_context, reg_base, reg);
+
+	for (i = 0; i < (1<<LUT_LINEAR_ONLY_TABLE_ENTRY_LOG2)+1; i++) {
+		dla_reg_write(engine->driver_context,
+				reg_base + access_data_offset[is_sdp],
+				lut->linear_only_table[i]);
+	}
+
+	/* program other configurations */
+	reg = (map_lut_method[lut->method] <<
+		SHIFT(CDP_S_LUT_CFG_0, LUT_LE_FUNCTION)) |
+		(map_lut_out[lut->hybrid_priority] <<
+		SHIFT(CDP_S_LUT_CFG_0, LUT_HYBRID_PRIORITY)) |
+		(map_lut_out[lut->underflow_priority] <<
+		SHIFT(CDP_S_LUT_CFG_0, LUT_UFLOW_PRIORITY)) |
+		(map_lut_out[lut->overflow_priority] <<
+		SHIFT(CDP_S_LUT_CFG_0, LUT_OFLOW_PRIORITY));
+	dla_reg_write(engine->driver_context,
+			reg_base + lut_cfg_offset[is_sdp], reg);
+
+	if (lut->method == FIELD_ENUM(CDP_S_LUT_CFG_0,
+					LUT_LE_FUNCTION, EXPONENT)) {
+		reg = ((((uint32_t)lut->linear_exp_offset.exp_offset) <<
+			SHIFT(CDP_S_LUT_INFO_0, LUT_LE_INDEX_OFFSET))&
+		MASK(CDP_S_LUT_INFO_0, LUT_LE_INDEX_OFFSET)) |
+			((((uint32_t)lut->linear_only_offset.frac_bits) <<
+			SHIFT(CDP_S_LUT_INFO_0, LUT_LO_INDEX_SELECT))&
+		MASK(CDP_S_LUT_INFO_0, LUT_LO_INDEX_SELECT));
+	} else {
+		reg = ((((uint32_t)lut->linear_exp_offset.frac_bits) <<
+			SHIFT(CDP_S_LUT_INFO_0, LUT_LE_INDEX_SELECT))&
+		MASK(CDP_S_LUT_INFO_0, LUT_LE_INDEX_SELECT)) |
+			((((uint32_t)lut->linear_only_offset.frac_bits) <<
+			SHIFT(CDP_S_LUT_INFO_0, LUT_LO_INDEX_SELECT))&
+		MASK(CDP_S_LUT_INFO_0, LUT_LO_INDEX_SELECT));
+	}
+	dla_reg_write(engine->driver_context,
+			reg_base + lut_info_offset[is_sdp], reg);
+	high = upper_32_bits(lut->linear_exp_start);
+	low = lower_32_bits(lut->linear_exp_start);
+	dla_reg_write(engine->driver_context,
+			reg_base + le_start_offset[is_sdp], low);
+	if (!is_sdp)
+		dla_reg_write(engine->driver_context,
+				reg_base + le_start_offset[is_sdp] + 4, high);
+
+	high = upper_32_bits(lut->linear_exp_end);
+	low = lower_32_bits(lut->linear_exp_end);
+	dla_reg_write(engine->driver_context,
+				reg_base + le_end_offset[is_sdp], low);
+	if (!is_sdp)
+		dla_reg_write(engine->driver_context,
+				reg_base + le_end_offset[is_sdp] + 4, high);
+
+	high = upper_32_bits(lut->linear_only_start);
+	low = lower_32_bits(lut->linear_only_start);
+	dla_reg_write(engine->driver_context,
+				reg_base + lo_start_offset[is_sdp], low);
+	if (!is_sdp)
+		dla_reg_write(engine->driver_context,
+				reg_base + lo_start_offset[is_sdp] + 4, high);
+
+	high = upper_32_bits(lut->linear_only_end);
+	low = lower_32_bits(lut->linear_only_end);
+	dla_reg_write(engine->driver_context,
+				reg_base + lo_end_offset[is_sdp], low);
+	if (!is_sdp)
+		dla_reg_write(engine->driver_context,
+				reg_base + lo_end_offset[is_sdp] + 4, high);
+
+	if (precision == PRECISION_FP16) {
+		reg = (lut->linear_exp_underflow_slope.data_f <<
+			SHIFT(CDP_S_LUT_LE_SLOPE_SCALE_0,
+					LUT_LE_SLOPE_UFLOW_SCALE)) |
+			(lut->linear_exp_overflow_slope.data_f <<
+			SHIFT(CDP_S_LUT_LE_SLOPE_SCALE_0,
+					LUT_LE_SLOPE_OFLOW_SCALE));
+		dla_reg_write(engine->driver_context,
+				reg_base + le_slope_scale_offset[is_sdp], reg);
+
+		reg = (lut->linear_only_underflow_slope.data_f <<
+			SHIFT(CDP_S_LUT_LO_SLOPE_SCALE_0,
+					LUT_LO_SLOPE_UFLOW_SCALE)) |
+			(lut->linear_only_overflow_slope.data_f <<
+			SHIFT(CDP_S_LUT_LO_SLOPE_SCALE_0,
+					LUT_LO_SLOPE_OFLOW_SCALE));
+		dla_reg_write(engine->driver_context,
+				reg_base + lo_slope_scale_offset[is_sdp], reg);
+	} else {
+		union dla_slope *oslope;
+		union dla_slope *uslope;
+
+		uslope = &lut->linear_exp_underflow_slope;
+		oslope = &lut->linear_exp_overflow_slope;
+		reg = ((((uint32_t)uslope->data_i.scale)
+			<< SHIFT(CDP_S_LUT_LE_SLOPE_SCALE_0,
+					LUT_LE_SLOPE_UFLOW_SCALE))&
+			MASK(CDP_S_LUT_LE_SLOPE_SCALE_0,
+					LUT_LE_SLOPE_UFLOW_SCALE)) |
+			((((uint32_t)oslope->data_i.scale)
+			<< SHIFT(CDP_S_LUT_LE_SLOPE_SCALE_0,
+					LUT_LE_SLOPE_OFLOW_SCALE))&
+			MASK(CDP_S_LUT_LE_SLOPE_SCALE_0,
+					LUT_LE_SLOPE_OFLOW_SCALE));
+		dla_reg_write(engine->driver_context,
+				reg_base + le_slope_scale_offset[is_sdp], reg);
+
+		reg = ((((uint32_t)uslope->data_i.shifter) <<
+			SHIFT(CDP_S_LUT_LE_SLOPE_SHIFT_0,
+					LUT_LE_SLOPE_UFLOW_SHIFT))&
+			MASK(CDP_S_LUT_LE_SLOPE_SHIFT_0,
+					LUT_LE_SLOPE_UFLOW_SHIFT)) |
+			((((uint32_t)oslope->data_i.shifter) <<
+			SHIFT(CDP_S_LUT_LE_SLOPE_SHIFT_0,
+					LUT_LE_SLOPE_OFLOW_SHIFT))&
+			MASK(CDP_S_LUT_LE_SLOPE_SHIFT_0,
+					LUT_LE_SLOPE_OFLOW_SHIFT));
+		dla_reg_write(engine->driver_context,
+				reg_base + le_slope_shift_offset[is_sdp], reg);
+
+		uslope = &lut->linear_only_underflow_slope;
+		oslope = &lut->linear_only_overflow_slope;
+		reg = ((((uint32_t)uslope->data_i.scale) <<
+			SHIFT(CDP_S_LUT_LO_SLOPE_SCALE_0,
+					LUT_LO_SLOPE_UFLOW_SCALE))&
+			MASK(CDP_S_LUT_LO_SLOPE_SCALE_0,
+					LUT_LO_SLOPE_UFLOW_SCALE)) |
+			((((uint32_t)oslope->data_i.scale) <<
+			SHIFT(CDP_S_LUT_LO_SLOPE_SCALE_0,
+					LUT_LO_SLOPE_OFLOW_SCALE))&
+			MASK(CDP_S_LUT_LO_SLOPE_SCALE_0,
+					LUT_LO_SLOPE_OFLOW_SCALE));
+		dla_reg_write(engine->driver_context,
+				reg_base + lo_slope_scale_offset[is_sdp], reg);
+		reg = ((((uint32_t)uslope->data_i.shifter) <<
+			SHIFT(CDP_S_LUT_LO_SLOPE_SHIFT_0,
+					LUT_LO_SLOPE_UFLOW_SHIFT))&
+			MASK(CDP_S_LUT_LO_SLOPE_SHIFT_0,
+					LUT_LO_SLOPE_UFLOW_SHIFT)) |
+			((((uint32_t)oslope->data_i.shifter) <<
+			SHIFT(CDP_S_LUT_LO_SLOPE_SHIFT_0,
+					LUT_LO_SLOPE_OFLOW_SHIFT))&
+			MASK(CDP_S_LUT_LO_SLOPE_SHIFT_0,
+					LUT_LO_SLOPE_OFLOW_SHIFT));
+		dla_reg_write(engine->driver_context,
+				reg_base + lo_slope_shift_offset[is_sdp], reg);
+	}
+}
+
+int
+validate_data_cube(struct dla_data_cube src_data_cube,
+				   struct dla_data_cube dst_data_cube,
+				   uint8_t mem_type)
+{
+	int32_t ret = 0;
+
+	if ((src_data_cube.width > DCUBE_MAX_WIDTH) ||
+	    (src_data_cube.height > DCUBE_MAX_HEIGHT) ||
+	    (src_data_cube.channel > DCUBE_MAX_CHANNEL)) {
+		pr_err("Invalid SrcInput Cude[W: %u, H: %u, C: %u]",
+				src_data_cube.width, src_data_cube.height,
+				src_data_cube.channel);
+		ret = -EINVAL;
+		goto exit;
+	}
+
+	if ((dst_data_cube.width > DCUBE_MAX_WIDTH) ||
+	    (dst_data_cube.height > DCUBE_MAX_HEIGHT) ||
+	    (dst_data_cube.channel > DCUBE_MAX_CHANNEL)) {
+		pr_err("Invalid DstInput Cude[W: %u, H: %u, C: %u]",
+				dst_data_cube.width, dst_data_cube.height,
+				dst_data_cube.channel);
+		ret = -EINVAL;
+		goto exit;
+	}
+
+	if (src_data_cube.type > mem_type) {
+		pr_err("Invalid src_data.mem_type: %u\n", src_data_cube.type);
+		ret = -EINVAL;
+		goto exit;
+	}
+
+	if (dst_data_cube.type > mem_type) {
+		pr_err("Invalid dst_data.mem_type: %u\n", dst_data_cube.type);
+		ret = -EINVAL;
+		goto exit;
+	}
+
+exit:
+	return ret;
+}
+
+int
+validate_precision(uint8_t precision, uint8_t map_precision)
+{
+	int32_t ret = 0;
+
+	if (precision >= map_precision) {
+		pr_err("Invalid precision: %u\n", precision);
+		ret = -EINVAL;
+	}
+
+	return ret;
+}
diff --git a/drivers/gpu/drm/nvdla/nvdla_common.h b/drivers/gpu/drm/nvdla/nvdla_common.h
new file mode 100644
index 000000000000..38cf43246890
--- /dev/null
+++ b/drivers/gpu/drm/nvdla/nvdla_common.h
@@ -0,0 +1,835 @@
+/* SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause */
+/*
+ * Copyright (C) 2017-2018 NVIDIA CORPORATION.
+ * Copyright (C) 2022 Cai Huoqing
+ */
+
+#ifndef __NVDLA_COMMON_H_
+#define __NVDLA_COMMON_H_
+
+#include <linux/types.h>
+
+#define DCUBE_MAX_WIDTH		8192
+#define DCUBE_MAX_HEIGHT	8192
+#define DCUBE_MAX_CHANNEL	8192
+
+/**
+ * @ingroup Processors
+ * @name DLA Processors
+ * Processor modules in DLA engine. Each processor has it's
+ * own operation a.k.a. HW layer. Network is formed using
+ * graph of these operations
+ * @{
+ */
+#define DLA_OP_BDMA		0
+#define DLA_OP_CONV		1
+#define DLA_OP_SDP		2
+#define DLA_OP_PDP		3
+#define DLA_OP_CDP		4
+#define DLA_OP_RUBIK	5
+/** @} */
+
+/**
+ * @ingroup Processors
+ * @name Maximum number of processors
+ * @brief DLA ash 6 processors
+ * @{
+ */
+#define DLA_OP_NUM		6
+/** @} */
+
+/**
+ * @ingroup Processors
+ * @name Number of groups
+ * @brief Each processor has 2 groups of registers
+ * @{
+ */
+#define DLA_NUM_GROUPS		2
+/** @} */
+
+/**
+ * Network descriptor
+ *
+ * Contains all information to execute a network
+ *
+ * @op_head: Index of first operation of each type in operations list
+ * @num_rois: Number of ROIs
+ * @num_operations: Number of operations in one list
+ * @num_luts: Number of LUTs
+ */
+struct dla_network_desc {
+	int16_t operation_desc_index;
+	int16_t surface_desc_index;
+
+	int16_t dependency_graph_index;
+	int16_t lut_data_index;
+
+	int16_t roi_array_index;
+	int16_t surface_index;
+
+	int16_t stat_list_index;
+	int16_t reserved1;
+
+	int16_t op_head[DLA_OP_NUM];
+
+	uint16_t num_rois;
+	uint16_t num_operations;
+
+	uint16_t num_luts;
+	uint16_t num_addresses;
+
+	int16_t input_layer;
+	uint8_t dynamic_roi;
+	uint8_t reserved0;
+} __packed __aligned(4);
+
+/**
+ * @name Memory types
+ * @brief DLA engnine can read/write to/from 3 memory types
+ * @{
+ */
+#define DLA_MEM_MC			0 /* External DRAM */
+#define DLA_MEM_CV			1 /* CV-SRAM */
+#define DLA_MEM_HW			2 /* DLA sub-module */
+/** @} */
+
+/**
+ * @ingroup Events
+ * @name Operation events
+ * @brief Different events triggered by an operations
+ * @{
+ */
+#define DLA_EVENT_OP_COMPLETED		1
+#define DLA_EVENT_OP_PROGRAMMED		2
+#define DLA_EVENT_OP_ENABLED		3
+#define DLA_EVENT_CDMA_WT_DONE		4
+#define DLA_EVENT_CDMA_DT_DONE		5
+/** @} */
+
+struct dla_consumer {
+	int16_t index; /* the index of dla_common_op_desc in dep_graph_addr */
+	uint8_t event;
+	uint8_t res;
+} __packed __aligned(4);
+
+struct dla_common_op_desc {
+	int16_t index; /* set by ucode */
+	int8_t roi_index;
+	uint8_t op_type;
+
+	uint8_t dependency_count;
+	uint8_t reserved0[3];
+
+	struct dla_consumer consumers[DLA_OP_NUM];
+	struct dla_consumer fused_parent;
+} __packed __aligned(4);
+
+struct dla_roi_array_desc {
+	uint32_t array_length;
+
+	uint32_t array_reserved;
+} __packed __aligned(4);
+
+struct dla_roi_desc {
+	uint32_t left;
+
+	uint32_t top;
+
+	uint32_t right;
+
+	uint32_t bottom;
+} __packed __aligned(4);
+
+/**
+ * @ingroup BDMA
+ * @name Maximum BDMA transfers
+ * @brief BDMA supports multiple transfers in operation. This indicates
+ *        maximum number of transfers possible in one operation.
+ * @{
+ */
+#define NUM_MAX_BDMA_OPS	20
+/** @} */
+
+struct dla_bdma_transfer_desc {
+	int16_t source_address;
+	int16_t destination_address;
+
+	uint32_t line_size;
+
+	uint32_t line_repeat;
+
+	uint32_t source_line;
+
+	uint32_t destination_line;
+
+	uint32_t surface_repeat;
+
+	uint32_t source_surface;
+
+	uint32_t destination_surface;
+} __packed __aligned(4);
+
+struct dla_bdma_surface_desc {
+	uint8_t source_type;
+	uint8_t destination_type;
+	uint16_t num_transfers;
+
+	struct dla_bdma_transfer_desc transfers[NUM_MAX_BDMA_OPS];
+} __packed __aligned(4);
+
+struct dla_bdma_op_desc {
+	uint16_t num_transfers;
+	uint16_t reserved0;
+} __packed __aligned(4);
+
+struct dla_bdma_stat_desc {
+	uint32_t read_stall;
+	uint32_t write_stall;
+} __packed __aligned(4);
+
+/**
+ * @ingroup Convolution
+ * @name Convolution mode
+ * @brief Convolution modes support by DLA
+ * @{
+ */
+#define CONV_MODE_DIRECT	0
+#define CONV_MODE_WINOGRAD	1
+/** @} */
+
+/**
+ * @ingroup Processors
+ * @name Precision BPE mapping
+ * @brief Precision formats and Bit Per Elements mapping
+ * @{
+ */
+#define BPE_PRECISION_INT8		1
+#define BPE_PRECISION_INT16		2
+#define BPE_PRECISION_FP16		2
+/** @} */
+
+
+/**
+ * @ingroup Processors
+ * @name Precision types
+ * @brief Precision formats supported by DLA engine
+ * @{
+ */
+#define PRECISION_INT8		0
+#define PRECISION_INT16		1
+#define PRECISION_FP16		2
+/** @} */
+
+/**
+ * @ingroup Processors
+ * @name Data formats
+ * @brief Data formats supported by DLA engine
+ * @{
+ */
+#define FORMAT_T_R8			0
+#define FORMAT_T_R10			1
+#define FORMAT_T_R12			2
+#define FORMAT_T_R16			3
+#define FORMAT_T_R16_I			4
+#define FORMAT_T_R16_F			5
+#define FORMAT_T_A16B16G16R16		6
+#define FORMAT_T_X16B16G16R16		7
+#define FORMAT_T_A16B16G16R16_F		8
+#define FORMAT_T_A16Y16U16V16		9
+#define FORMAT_T_V16U16Y16A16		10
+#define FORMAT_T_A16Y16U16V16_F		11
+#define FORMAT_T_A8B8G8R8		12
+#define FORMAT_T_A8R8G8B8		13
+#define FORMAT_T_B8G8R8A8		14
+#define FORMAT_T_R8G8B8A8		15
+#define FORMAT_T_X8B8G8R8		16
+#define FORMAT_T_X8R8G8B8		17
+#define FORMAT_T_B8G8R8X8		18
+#define FORMAT_T_R8G8B8X8		19
+#define FORMAT_T_A2B10G10R10		20
+#define FORMAT_T_A2R10G10B10		21
+#define FORMAT_T_B10G10R10A2		22
+#define FORMAT_T_R10G10B10A2		23
+#define FORMAT_T_A2Y10U10V10		24
+#define FORMAT_T_V10U10Y10A2		25
+#define FORMAT_T_A8Y8U8V8			26
+#define FORMAT_T_V8U8Y8A8			27
+#define FORMAT_T_Y8___U8V8_N444		28
+#define FORMAT_T_Y8___V8U8_N444		29
+#define FORMAT_T_Y10___U10V10_N444	30
+#define FORMAT_T_Y10___V10U10_N444	31
+#define FORMAT_T_Y12___U12V12_N444	32
+#define FORMAT_T_Y12___V12U12_N444	33
+#define FORMAT_T_Y16___U16V16_N444	34
+#define FORMAT_T_Y16___V16U16_N444	35
+#define FORMAT_FEATURE			36
+/** @} */
+
+/**
+ * @ingroup Convolution
+ * @name Pixel mapping
+ * @brief Pixel mapping formats supported for image input in Convolution
+ * @{
+ */
+#define MAP_PITCH_LINEAR		0
+/** @} */
+
+/**
+ * @ingroup Convolution
+ * @name Weight formats
+ * @brief Weight data formats supported in Convolution
+ * @{
+ */
+#define WEIGHT_FORMAT_UNCOMPRESSED	0
+#define WEIGHT_FORMAT_COMPRESSED	1
+/** @} */
+
+/**
+ * @ingroup Convolution
+ * @name Mean data format
+ * @brief Mean data formats supported in Convolution
+ * @{
+ */
+#define MEAN_FORMAT_DISABLE     0
+#define MEAN_FORMAT_ENABLE      1
+/** @} */
+
+struct dla_cvt_param {
+	int16_t  scale;
+	uint8_t  truncate;
+	uint8_t  enable;
+
+	int32_t  offset;
+} __packed __aligned(4);
+
+struct dla_data_cube {
+	uint16_t type; /* dla_mem_type */
+	int16_t address; /* offset to the actual IOVA in task.address_list */
+
+	uint32_t offset; /* offset within address */
+	uint32_t size;
+
+	/* cube dimensions */
+	uint16_t width;
+	uint16_t height;
+
+	uint16_t channel;
+	uint16_t reserved0;
+
+	/* stride information */
+	uint32_t line_stride;
+	uint32_t surf_stride;
+
+	/* For Rubik only */
+	uint32_t plane_stride;
+} __packed __aligned(4);
+
+#define PIXEL_OVERRIDE_UINT 0
+#define PIXEL_OVERRIDE_INT  1
+
+struct dla_conv_surface_desc {
+	/* Data cube */
+	struct dla_data_cube weight_data;
+	struct dla_data_cube wmb_data;
+	struct dla_data_cube wgs_data;
+	struct dla_data_cube src_data;
+	struct dla_data_cube dst_data;
+
+	/**
+	 * u_addr = input_data.source_addr + offset_u
+	 * this field should be set when YUV is not interleave format
+	 *
+	 */
+	int64_t offset_u;
+
+	/* line stride for 2nd plane, must be 32bytes aligned */
+	uint32_t in_line_uv_stride;
+} __packed __aligned(4);
+
+struct dla_conv_op_desc {
+	/* Performance parameters */
+
+	/* dla_conv_mode */
+	uint8_t conv_mode;
+	uint8_t data_reuse;
+	uint8_t weight_reuse;
+	uint8_t skip_data_rls;
+
+	uint8_t skip_weight_rls;
+	uint8_t reserved0;
+	uint16_t entry_per_slice;
+
+	/* dla_data_format */
+	uint8_t data_format;
+	/* dla_pixel_mapping */
+	uint8_t pixel_mapping;
+	/* number of free slices before fetch */
+	uint16_t fetch_grain;
+
+	uint8_t reserved_b[8];
+
+	/* batch_num */
+	uint8_t batch;
+	/* dla_weight_format */
+	uint8_t weight_format;
+	uint8_t data_bank;
+	uint8_t weight_bank;
+
+	/* the offset in bytes of each data cube in a batch */
+	uint32_t batch_stride;
+
+	uint8_t post_extension;
+	uint8_t pixel_override;
+	/* number of slices need to be released */
+	uint16_t release;
+
+	 /* The input cube dimension for CSC */
+	uint16_t input_width_csc;
+	uint16_t input_height_csc;
+
+	uint16_t input_channel_csc;
+	uint16_t kernel_width_csc;
+
+	uint16_t kernel_height_csc;
+	uint16_t kernel_channel_csc;
+
+	/* The input cube dimension for CMAC */
+	uint16_t input_width_cmac;
+	uint16_t input_height_cmac;
+
+	/* actual size in bytes */
+	uint32_t bytes_per_kernel;
+
+	/* Algorithm parameters */
+
+	int16_t mean_ry; /* mean value for red in RGB or Y in YUV */
+	int16_t mean_gu; /* mean value for green in RGB or U in YUV */
+
+	int16_t mean_bv; /* mean value for blue in RGB or V in YUV */
+	int16_t mean_ax;
+
+	uint8_t mean_format; /* dla_mean_format */
+	uint8_t conv_stride_x;
+	uint8_t conv_stride_y;
+	uint8_t pad_x_left;
+
+	uint8_t pad_x_right;
+	uint8_t pad_y_top;
+	uint8_t pad_y_bottom;
+	uint8_t dilation_x;
+
+	uint8_t dilation_y;
+	uint8_t reserved2[2];
+
+	/* Precision parameters */
+	uint8_t pra_truncate;
+
+	uint8_t in_precision;
+	/* The output precision from CONV, it's the MAC processing precison */
+	uint8_t out_precision;
+	int16_t pad_val;
+
+	/* input converter parameters */
+	struct dla_cvt_param in_cvt;
+	/* output converter parameters, support truncate only */
+	struct dla_cvt_param out_cvt;
+
+} __packed __aligned(4);
+
+struct dla_conv_stat_desc {
+	uint32_t data_read_stall;
+	uint32_t weight_read_stall;
+	uint32_t data_read_latency;
+	uint32_t weight_read_latency;
+	uint32_t saturation_count;
+	uint32_t nan_data_num;
+	uint32_t nan_weight_num;
+	uint32_t inf_data_num;
+	uint32_t inf_weight_num;
+} __packed __aligned(4);
+
+/**
+ * @ingroup SDP
+ * @name Activation functions
+ * @brief Activation functions supported in SDP
+ * @{
+ */
+#define ACTIVATION_NONE		0
+#define ACTIVATION_RELU		1
+#define ACTIVATION_LUT		2
+#define ACTIVATION_PRELU	3
+/** @} */
+
+/**
+ * @ingroup LUT
+ * @name LUT size
+ * @brief LUT sizes for linear and exponentila LUT
+ * @{
+ */
+#define LUT_LINEAR_EXP_TABLE_ENTRY_LOG2		6
+#define LUT_LINEAR_ONLY_TABLE_ENTRY_LOG2	8
+/** @} */
+
+/**
+ * @ingroup LUT
+ * @name LUT types
+ * @brief DLA supports two types of LUT, linear and exonential
+ * @{
+ */
+#define LUT_LINEAR_EXP_TABLE		0
+#define LUT_LINEAR_ONLY_TABLE		1
+/** @} */
+
+/**
+ * @ingroup LUT
+ * @name LUT methods
+ * @brief DLA supports two types of LUT, linear and exonential
+ * @{
+ */
+#define LUT_METHOD_EXPONENTIAL		0
+#define LUT_METHOD_LINEAR		1
+/** @} */
+
+/**
+ * @ingroup LUT
+ * @name LUT
+ * @brief DLA supports two types of LUT, linear and exonential
+ * @{
+ */
+#define LUT_PRI_LINEAR_EXP		0
+#define LUT_PRI_LINEAR_ONLY		1
+/** @} */
+
+union dla_lut_offset {
+	/**
+	 * Number should be substracted on log domain before look up
+	 * exponetial table it has the same definition as hardware
+	 * thus input scaling should also take into account when
+	 * set this field.
+	 */
+	int8_t exp_offset;
+	/**
+	 * Number of bits should be right shift before looking
+	 * up linear table
+	 */
+	int8_t frac_bits;
+	uint16_t reserved0;
+};
+
+/**
+ * This struct is used to represent floating point values by INT
+ * suppose we have a float point number fp_x, it will be represented
+ * as:
+ *
+ * fp_x = scale_int_x>>(shifter_x)
+ *
+ * This is very useful for INT pipeline;
+ */
+struct dla_float_data {
+	int16_t scale;
+	int8_t shifter;
+	uint8_t reserved0;
+} __packed __aligned(4);
+
+/**
+ * For INT pipeline, we use the struct above to represent a floating number;
+ * For FP16 pipeline, we should store the FP16 encoded value into a uint16_t
+ * container
+ */
+union dla_slope {
+	struct dla_float_data data_i;
+
+	uint16_t data_f;
+};
+
+struct dla_lut_param {
+	/**
+	 * value of expression ((1<<LUT_LINEAR_EXP_TABLE_ENTRY_LOG2)+1) is 65,
+	 * ((1<<LUT_LINEAR_ONLY_TABLE_ENTRY_LOG2)+1) is 257, and int16_t is of
+	 * 2Byte. And below two statement's combined memory size is 644 Byte.
+	 *
+	 * NOTE: below two declaration combined size should always be multiple
+	 * of 4.
+	 */
+	int16_t linear_exp_table[(1<<LUT_LINEAR_EXP_TABLE_ENTRY_LOG2)+1];
+	int16_t linear_only_table[(1<<LUT_LINEAR_ONLY_TABLE_ENTRY_LOG2)+1];
+
+	union dla_lut_offset linear_exp_offset;
+	union dla_lut_offset linear_only_offset;
+
+	/**
+	 * The start and end point of raw table,
+	 * valid when raw_method=LINEAR only
+	 */
+	uint64_t linear_exp_start;
+	uint64_t linear_exp_end;
+	uint64_t linear_only_start;
+	uint64_t linear_only_end;
+
+	union dla_slope linear_exp_underflow_slope;
+	union dla_slope linear_exp_overflow_slope;
+	union dla_slope linear_only_underflow_slope;
+	union dla_slope linear_only_overflow_slope;
+
+	/**
+	 * dla_lut_priority, when both lut are hit(or one overflow,
+	 * the other underflow), which one should be selected as output
+	 */
+	uint8_t hybrid_priority;
+	uint8_t underflow_priority;
+	uint8_t overflow_priority;
+	uint8_t method; /* dla_lut_method */
+} __packed __aligned(4);
+
+struct dla_sdp_surface_desc {
+	/* Data cube */
+	/* source input cube, available when SDP working on offline mode */
+	struct dla_data_cube src_data;
+
+	/* X1 input cube */
+	struct dla_data_cube x1_data;
+
+	/* X2 input cube */
+	struct dla_data_cube x2_data;
+
+	/* Y input cube */
+	struct dla_data_cube y_data;
+
+	/* Output cube */
+	struct dla_data_cube dst_data;
+} __packed __aligned(4);
+
+#define SDP_OP_NONE		0
+#define SDP_OP_MUL		1
+#define SDP_OP_ADD		2
+#define SDP_OP_BOTH		3
+
+#define SDP_ALU_OP_MAX		0
+#define SDP_ALU_OP_MIN		1
+#define SDP_ALU_OP_SUM		2
+#define SDP_ALU_OP_EQL		3
+
+#define SDP_OP_PER_LAYER	0
+#define SDP_OP_PER_KERNEL	1
+#define SDP_OP_PER_POINT	2
+
+struct dla_sdp_cvt {
+	struct dla_cvt_param alu_cvt;
+	struct dla_cvt_param mul_cvt;
+} __packed __aligned(4);
+
+struct dla_sdp_op {
+	uint8_t enable;
+	uint8_t alu_type; /* dla_sdp_alu_op_type */
+	uint8_t type; /* dla_sdp_op_type */
+	uint8_t mode; /* dla_sdp_op_mode */
+
+	uint8_t act; /* dla_act_type */
+	uint8_t shift_value; /* left shift */
+	uint8_t truncate;
+	uint8_t precision;
+
+	int32_t alu_operand;
+	int32_t mul_operand;
+
+	struct dla_sdp_cvt  cvt;
+} __packed __aligned(4);
+
+struct dla_sdp_op_desc {
+	/* Precision parameters */
+	/* dla_precision */
+	uint8_t src_precision;
+	uint8_t dst_precision;
+	int16_t lut_index;
+
+	struct dla_cvt_param out_cvt;
+
+	/* Performance parameters */
+	/* dla_conv_mode */
+	uint8_t conv_mode;
+	uint8_t batch_num;
+	uint16_t reserved0;
+
+	uint32_t batch_stride;	/* will be used when batch_num > 1 */
+
+	/* Algorithm parameters */
+	struct dla_sdp_op x1_op;
+	struct dla_sdp_op x2_op;
+	struct dla_sdp_op y_op;
+} __packed __aligned(4);
+
+#define POOL_MODE_AVG		0
+#define POOL_MODE_MAX		1
+#define POOL_MODE_MIN		2
+
+#define POOL_SIZE_1		0
+#define POOL_SIZE_2		1
+#define POOL_SIZE_3		2
+#define POOL_SIZE_4		3
+#define POOL_SIZE_5		4
+#define POOL_SIZE_6		5
+#define POOL_SIZE_7		6
+#define POOL_SIZE_8		7
+
+#define PDP_PAD_VAL_NUM	7
+
+struct dla_pdp_surface_desc {
+	/* Data cube */
+	struct dla_data_cube src_data;
+
+	struct dla_data_cube dst_data;
+} __packed __aligned(4);
+
+struct dla_pdp_op_desc {
+	/* Performance parameters */
+	uint16_t  partial_in_width_first;
+	uint16_t  partial_in_width_mid;
+
+	uint16_t  partial_in_width_last;
+	uint16_t  partial_width_first;
+
+	uint16_t  partial_width_mid;
+	uint16_t  partial_width_last;
+
+	uint8_t   split_num;
+
+	/* Algorithm parameters */
+	uint8_t  pool_mode; /* dla_pool_mode */
+	uint8_t  pool_width; /* dla_pool_width */
+	uint8_t  pool_height; /* dla_pool_height */
+
+	uint8_t  stride_x;
+	uint8_t  stride_y;
+
+	/**
+	 * The left/right padding size,
+	 * pad_right might be less than pad_left
+	 */
+	uint8_t  pad_left;
+	uint8_t  pad_right;
+
+	/* The top/bottom padding size */
+	uint8_t  pad_top;
+	uint8_t  pad_bottom;
+
+	/* Precision parameters */
+	uint8_t  precision; /* dla_precision */
+	uint8_t  reserved0;
+	/**
+	 * if input has non-zero "offset", this value should be set
+	 * There'll be 7 different paddding values, the relationship between
+	 * those versions are:
+	 * padding_value[0] = -offset*scaling;
+	 * padding_value[1] = 2*padding_value[0]
+	 * padding_value[2] = 3*padding_value[0]
+	 * ...
+	 * The purpose is to avoid ucode implement FP16
+	 * multiplier(for FP16 mode)
+	 */
+	int32_t  padding_value[PDP_PAD_VAL_NUM];
+} __packed __aligned(4);
+
+struct dla_pdp_stat_desc {
+	uint32_t inf_input_num;
+	uint32_t nan_input_num;
+	uint32_t nan_output_num;
+	uint32_t write_stall;
+	uint32_t runtime;
+} __packed __aligned(4);
+
+struct dla_cdp_surface_desc {
+	/* Data cube */
+	struct dla_data_cube src_data;
+
+	struct dla_data_cube dst_data;
+} __packed __aligned(4);
+
+struct dla_cdp_op_desc {
+	/* Precision parameters */
+
+	/* dla_precision */
+	uint8_t  in_precision;
+	uint8_t  out_precision;
+	int16_t  lut_index;
+
+	struct dla_cvt_param in_cvt;
+	struct dla_cvt_param out_cvt;
+
+	/* Performance parameters */
+
+	/* Algorithm parameters */
+	uint8_t  local_size;
+	uint8_t  bypass_sqsum;
+	uint8_t  bypass_out_mul;
+	uint8_t  reserved0;
+} __packed __aligned(4);
+
+struct dla_cdp_stat_desc {
+	uint32_t nan_input_num;
+	uint32_t inf_input_num;
+	uint32_t nan_output_num;
+	uint32_t write_stall;
+	uint32_t lut_uflow;
+	uint32_t lut_oflow;
+	uint32_t lut_hybrid;
+	uint32_t lut_le_hit;
+	uint32_t lut_lo_hit;
+	uint32_t saturation_count;
+	uint32_t runtime;
+} __packed __aligned(4);
+
+struct dla_rubik_surface_desc {
+	/* Data cube */
+	struct dla_data_cube src_data;
+
+	struct dla_data_cube dst_data;
+} __packed __aligned(4);
+
+/* rubik mode */
+#define RUBIK_MODE_CONTRACT	0
+#define RUBIK_MODE_SPLIT	1
+#define RUBIK_MODE_MERGE	2
+
+struct dla_rubik_op_desc {
+	/* Precision parameters */
+	uint8_t mode;
+	uint8_t precision;
+	uint8_t stride_x;
+	uint8_t stride_y;
+} __packed __aligned(4);
+
+struct dla_rubik_stat_desc {
+	uint32_t read_stall;
+	uint32_t write_stall;
+	uint32_t runtime;
+} __packed __aligned(4);
+
+union dla_surface_container {
+	struct dla_bdma_surface_desc bdma_surface;
+	struct dla_conv_surface_desc conv_surface;
+	struct dla_sdp_surface_desc sdp_surface;
+	struct dla_pdp_surface_desc pdp_surface;
+	struct dla_cdp_surface_desc cdp_surface;
+	struct dla_rubik_surface_desc rubik_surface;
+};
+
+union dla_operation_container {
+	struct dla_bdma_op_desc bdma_op;
+	struct dla_conv_op_desc conv_op;
+	struct dla_sdp_op_desc sdp_op;
+	struct dla_pdp_op_desc pdp_op;
+	struct dla_cdp_op_desc cdp_op;
+	struct dla_rubik_op_desc rubik_op;
+};
+
+struct dla_engine;
+void update_lut(struct dla_engine *engine, uint32_t reg_base,
+		struct dla_lut_param *lut,
+		uint8_t precision);
+int32_t validate_data_cube(struct dla_data_cube src_data_cube,
+			struct dla_data_cube dst_data_cube,
+			uint8_t mem_type);
+int32_t validate_precision(uint8_t precision,
+			uint8_t map_precision);
+
+#endif
diff --git a/drivers/gpu/drm/nvdla/nvdla_conv.c b/drivers/gpu/drm/nvdla/nvdla_conv.c
new file mode 100644
index 000000000000..bb24909e1afa
--- /dev/null
+++ b/drivers/gpu/drm/nvdla/nvdla_conv.c
@@ -0,0 +1,683 @@
+// SPDX-License-Identifier: BSD-3-Clause OR GPL-2.0
+/*
+ * Copyright (C) 2017-2018 NVIDIA CORPORATION
+ * Copyright (C) 2022 Cai Huoqing
+ */
+
+#include "nvdla_common.h"
+#include "nvdla_drm.h"
+#include "nvdla_reg.h"
+#include "nvdla_common.h"
+#include "nvdla_engine.h"
+
+static const uint8_t map_precision[] = {
+	FIELD_ENUM(CDMA_D_MISC_CFG_0, IN_PRECISION, INT8),
+	FIELD_ENUM(CDMA_D_MISC_CFG_0, IN_PRECISION, INT16),
+	FIELD_ENUM(CDMA_D_MISC_CFG_0, IN_PRECISION, FP16),
+};
+
+static const uint8_t map_conv[] = {
+	FIELD_ENUM(CACC_D_MISC_CFG_0, CONV_MODE, DIRECT),
+	FIELD_ENUM(CACC_D_MISC_CFG_0, CONV_MODE, WINOGRAD),
+};
+
+static const uint8_t map_weight_fmt[] = {
+	FIELD_ENUM(CSC_D_WEIGHT_FORMAT_0, WEIGHT_FORMAT, UNCOMPRESSED),
+	FIELD_ENUM(CSC_D_WEIGHT_FORMAT_0, WEIGHT_FORMAT, COMPRESSED),
+};
+
+static const uint8_t map_img_fmt[][2] = {
+	{FIELD_ENUM(CDMA_D_DATAIN_FORMAT_0,
+			PIXEL_FORMAT, T_R8), 1},
+	{FIELD_ENUM(CDMA_D_DATAIN_FORMAT_0,
+			PIXEL_FORMAT, T_R10), 2},
+	{FIELD_ENUM(CDMA_D_DATAIN_FORMAT_0,
+			PIXEL_FORMAT, T_R12), 2},
+	{FIELD_ENUM(CDMA_D_DATAIN_FORMAT_0,
+			PIXEL_FORMAT, T_R16), 2},
+	{FIELD_ENUM(CDMA_D_DATAIN_FORMAT_0,
+			PIXEL_FORMAT, T_R16_I), 2},
+	{FIELD_ENUM(CDMA_D_DATAIN_FORMAT_0,
+			PIXEL_FORMAT, T_R16_F), 2},
+	{FIELD_ENUM(CDMA_D_DATAIN_FORMAT_0,
+			PIXEL_FORMAT, T_A16B16G16R16), 8},
+	{FIELD_ENUM(CDMA_D_DATAIN_FORMAT_0,
+			PIXEL_FORMAT, T_X16B16G16R16), 8},
+	{FIELD_ENUM(CDMA_D_DATAIN_FORMAT_0,
+			PIXEL_FORMAT, T_A16B16G16R16_F), 8},
+	{FIELD_ENUM(CDMA_D_DATAIN_FORMAT_0,
+			PIXEL_FORMAT, T_A16Y16U16V16), 8},
+	{FIELD_ENUM(CDMA_D_DATAIN_FORMAT_0,
+			PIXEL_FORMAT, T_V16U16Y16A16), 8},
+	{FIELD_ENUM(CDMA_D_DATAIN_FORMAT_0,
+			PIXEL_FORMAT, T_A16Y16U16V16_F), 8},
+	{FIELD_ENUM(CDMA_D_DATAIN_FORMAT_0,
+			PIXEL_FORMAT, T_A8B8G8R8), 4},
+	{FIELD_ENUM(CDMA_D_DATAIN_FORMAT_0,
+			PIXEL_FORMAT, T_A8R8G8B8), 4},
+	{FIELD_ENUM(CDMA_D_DATAIN_FORMAT_0,
+			PIXEL_FORMAT, T_B8G8R8A8), 4},
+	{FIELD_ENUM(CDMA_D_DATAIN_FORMAT_0,
+			PIXEL_FORMAT, T_R8G8B8A8), 4},
+	{FIELD_ENUM(CDMA_D_DATAIN_FORMAT_0,
+			PIXEL_FORMAT, T_X8B8G8R8), 4},
+	{FIELD_ENUM(CDMA_D_DATAIN_FORMAT_0,
+			PIXEL_FORMAT, T_X8R8G8B8), 4},
+	{FIELD_ENUM(CDMA_D_DATAIN_FORMAT_0,
+			PIXEL_FORMAT, T_B8G8R8X8), 4},
+	{FIELD_ENUM(CDMA_D_DATAIN_FORMAT_0,
+			PIXEL_FORMAT, T_R8G8B8X8), 4},
+	{FIELD_ENUM(CDMA_D_DATAIN_FORMAT_0,
+			PIXEL_FORMAT, T_A2B10G10R10), 4},
+	{FIELD_ENUM(CDMA_D_DATAIN_FORMAT_0,
+			PIXEL_FORMAT, T_A2R10G10B10), 4},
+	{FIELD_ENUM(CDMA_D_DATAIN_FORMAT_0,
+			PIXEL_FORMAT, T_B10G10R10A2), 4},
+	{FIELD_ENUM(CDMA_D_DATAIN_FORMAT_0,
+			PIXEL_FORMAT, T_R10G10B10A2), 4},
+	{FIELD_ENUM(CDMA_D_DATAIN_FORMAT_0,
+			PIXEL_FORMAT, T_A2Y10U10V10), 4},
+	{FIELD_ENUM(CDMA_D_DATAIN_FORMAT_0,
+			PIXEL_FORMAT, T_V10U10Y10A2), 4},
+	{FIELD_ENUM(CDMA_D_DATAIN_FORMAT_0,
+			PIXEL_FORMAT, T_A8Y8U8V8), 4},
+	{FIELD_ENUM(CDMA_D_DATAIN_FORMAT_0,
+			PIXEL_FORMAT, T_V8U8Y8A8), 4},
+	{FIELD_ENUM(CDMA_D_DATAIN_FORMAT_0,
+			PIXEL_FORMAT, T_Y8___U8V8_N444), 1},
+	{FIELD_ENUM(CDMA_D_DATAIN_FORMAT_0,
+			PIXEL_FORMAT, T_Y8___V8U8_N444), 1},
+	{FIELD_ENUM(CDMA_D_DATAIN_FORMAT_0,
+			PIXEL_FORMAT, T_Y10___U10V10_N444), 2},
+	{FIELD_ENUM(CDMA_D_DATAIN_FORMAT_0,
+			PIXEL_FORMAT, T_Y10___V10U10_N444), 2},
+	{FIELD_ENUM(CDMA_D_DATAIN_FORMAT_0,
+			PIXEL_FORMAT, T_Y12___U12V12_N444), 2},
+	{FIELD_ENUM(CDMA_D_DATAIN_FORMAT_0,
+			PIXEL_FORMAT, T_Y12___V12U12_N444), 2},
+	{FIELD_ENUM(CDMA_D_DATAIN_FORMAT_0,
+			PIXEL_FORMAT, T_Y16___U16V16_N444), 2},
+	{FIELD_ENUM(CDMA_D_DATAIN_FORMAT_0,
+			PIXEL_FORMAT, T_Y16___V16U16_N444), 2},
+	{FIELD_ENUM(CDMA_D_DATAIN_FORMAT_0,
+			DATAIN_FORMAT, FEATURE), 2},
+	{FIELD_ENUM(CDMA_D_DATAIN_FORMAT_0,
+			DATAIN_FORMAT, PIXEL), 1},
+};
+
+static const uint8_t map_pixel[] = {
+	FIELD_ENUM(CDMA_D_DATAIN_FORMAT_0, PIXEL_MAPPING, PITCH_LINEAR),
+};
+
+static const uint8_t map_ram[] = {
+	FIELD_ENUM(CDMA_D_DAIN_RAM_TYPE_0, DATAIN_RAM_TYPE, MCIF),
+	FIELD_ENUM(CDMA_D_DAIN_RAM_TYPE_0, DATAIN_RAM_TYPE, CVIF),
+};
+
+static const uint8_t map_mean[] = {
+	FIELD_ENUM(CDMA_D_MEAN_FORMAT_0, MEAN_FORMAT, DISABLE),
+	FIELD_ENUM(CDMA_D_MEAN_FORMAT_0, MEAN_FORMAT, ENABLE),
+};
+
+static uint32_t
+get_in_format(uint8_t format)
+{
+	uint32_t in_format = 0;
+
+	if (format >= FORMAT_T_R8 && format < FORMAT_FEATURE) {
+		in_format = FIELD_ENUM(CDMA_D_DATAIN_FORMAT_0,
+						DATAIN_FORMAT, PIXEL);
+	} else if (format == FORMAT_FEATURE) {
+		in_format = FIELD_ENUM(CDMA_D_DATAIN_FORMAT_0,
+						DATAIN_FORMAT, FEATURE);
+	}
+
+	return in_format;
+}
+
+void
+dla_conv_set_producer(struct dla_engine *engine, int32_t group_id, int32_t rdma_group_id)
+{
+	uint32_t reg;
+
+	/* set producer pointer for all sub-modules */
+	reg = group_id << SHIFT(CACC_S_POINTER_0, PRODUCER);
+	cacc_reg_write(engine, S_POINTER, reg);
+	cmac_a_reg_write(engine, S_POINTER, reg);
+	cmac_b_reg_write(engine, S_POINTER, reg);
+	csc_reg_write(engine, S_POINTER, reg);
+	cdma_reg_write(engine, S_POINTER, reg);
+}
+
+int
+dla_conv_enable(struct dla_engine *engine, struct dla_processor_group *group)
+{
+	uint32_t reg;
+
+	do {
+		reg = cdma_reg_read(engine, S_CBUF_FLUSH_STATUS);
+	} while (!(reg & MASK(CDMA_S_CBUF_FLUSH_STATUS_0, FLUSH_DONE)));
+
+	/* enable all sub-modules */
+	reg = FIELD_ENUM(CACC_D_OP_ENABLE_0, OP_EN, ENABLE);
+	cacc_reg_write(engine, D_OP_ENABLE, reg);
+	cmac_a_reg_write(engine, D_OP_ENABLE, reg);
+	cmac_b_reg_write(engine, D_OP_ENABLE, reg);
+	csc_reg_write(engine, D_OP_ENABLE, reg);
+	cdma_reg_write(engine, D_OP_ENABLE, reg);
+
+	return 0;
+}
+
+void
+dla_conv_rdma_check(struct dla_processor_group *group)
+{
+	group->is_rdma_needed = 0;
+}
+
+static int32_t
+processor_conv_program(struct dla_engine *engine, struct dla_processor_group *group)
+{
+	int32_t ret = 0;
+	uint32_t reg, high, low, shift, mask;
+	uint32_t stride_x, stride_y, pad_x, pad_y;
+	uint64_t weight_address = 0;
+	uint64_t wmb_address = 0;
+	uint64_t wgs_address = 0;
+	uint64_t input_address = 0;
+	uint64_t output_address = 0;
+	uint32_t atom_size = 0;
+	bool weight_compress_support = false;
+	struct dla_conv_op_desc *conv_op;
+	struct dla_conv_surface_desc *conv_surface;
+
+	weight_compress_support = engine->config_data->weight_compress_support;
+	atom_size = engine->config_data->atom_size;
+	conv_op = &group->operation_desc->conv_op;
+	conv_surface = &group->surface_desc->conv_surface;
+
+	if (conv_op->weight_format == WEIGHT_FORMAT_COMPRESSED) {
+		ASSERT_GOTO((weight_compress_support), ret, -EINVAL, exit);
+		ASSERT_GOTO((conv_surface->wmb_data.address != -1),
+			ret, -EINVAL, exit);
+		dla_get_dma_cube_address(engine->driver_context,
+								 engine->task->task_data,
+								 conv_surface->wmb_data.address,
+								 conv_surface->wmb_data.offset,
+								 (void *)&wmb_address,
+								 DESTINATION_DMA);
+
+		ASSERT_GOTO((conv_surface->wgs_data.address != -1),
+			ret, -EINVAL, exit);
+		dla_get_dma_cube_address(engine->driver_context,
+								 engine->task->task_data,
+								 conv_surface->wgs_data.address,
+								 conv_surface->wgs_data.offset,
+								 (void *)&wgs_address,
+								 DESTINATION_DMA);
+	}
+
+	if (conv_surface->weight_data.address != -1) {
+		dla_get_dma_cube_address(engine->driver_context,
+								 engine->task->task_data,
+								 conv_surface->weight_data.address,
+								 conv_surface->weight_data.offset,
+								 (void *)&weight_address,
+								 DESTINATION_DMA);
+	}
+
+	if (conv_surface->dst_data.address != -1) {
+		dla_get_dma_cube_address(engine->driver_context,
+								 engine->task->task_data,
+								 conv_surface->dst_data.address,
+								 conv_surface->dst_data.offset,
+								 (void *)&output_address,
+								 DESTINATION_DMA);
+	}
+
+	ret = dla_read_input_address(engine, &conv_surface->src_data, &input_address,
+								 group->op_desc->index,
+								 group->roi_index,
+								 map_img_fmt[conv_op->data_format][1]);
+	if (ret)
+		goto exit;
+
+	ASSERT_GOTO((conv_op->out_cvt.scale  == 1), ret, -EINVAL, exit);
+	ASSERT_GOTO((conv_op->out_cvt.offset == 0), ret, -EINVAL, exit);
+
+	/* check if the register group is idle */
+	reg = cacc_reg_read(engine, S_STATUS);
+	mask = group->id ? MASK(CACC_S_STATUS_0, STATUS_1) :
+		MASK(CACC_S_STATUS_0, STATUS_0);
+	shift = group->id ? SHIFT(CACC_S_STATUS_0, STATUS_1) :
+		SHIFT(CACC_S_STATUS_0, STATUS_0);
+	reg = (reg & mask) >> shift;
+	ASSERT_GOTO((reg == FIELD_ENUM(CACC_S_STATUS_0, STATUS_0, IDLE)),
+				ret, -EINVAL, exit);
+
+	reg = cmac_a_reg_read(engine, S_STATUS);
+	mask = group->id ? MASK(CMAC_A_S_STATUS_0, STATUS_1) :
+		MASK(CMAC_A_S_STATUS_0, STATUS_0);
+	shift = group->id ? SHIFT(CMAC_A_S_STATUS_0, STATUS_1) :
+		SHIFT(CMAC_A_S_STATUS_0, STATUS_0);
+	reg = (reg & mask) >> shift;
+	ASSERT_GOTO((reg == FIELD_ENUM(CMAC_A_S_STATUS_0, STATUS_0, IDLE)),
+				ret, -EINVAL, exit);
+
+	reg = cmac_b_reg_read(engine, S_STATUS);
+	mask = group->id ? MASK(CMAC_B_S_STATUS_0, STATUS_1) :
+		MASK(CMAC_B_S_STATUS_0, STATUS_0);
+	shift = group->id ? SHIFT(CMAC_B_S_STATUS_0, STATUS_1) :
+		SHIFT(CMAC_B_S_STATUS_0, STATUS_0);
+	reg = (reg & mask) >> shift;
+	ASSERT_GOTO((reg == FIELD_ENUM(CMAC_B_S_STATUS_0, STATUS_0, IDLE)),
+				ret, -EINVAL, exit);
+
+	reg = csc_reg_read(engine, S_STATUS);
+	mask = group->id ? MASK(CSC_S_STATUS_0, STATUS_1) :
+		MASK(CSC_S_STATUS_0, STATUS_0);
+	shift = group->id ? SHIFT(CSC_S_STATUS_0, STATUS_1) :
+		SHIFT(CSC_S_STATUS_0, STATUS_0);
+	reg = (reg & mask) >> shift;
+	ASSERT_GOTO((reg == FIELD_ENUM(CSC_S_STATUS_0, STATUS_0, IDLE)),
+				ret, -EINVAL, exit);
+
+	reg = cdma_reg_read(engine, S_STATUS);
+	mask = group->id ? MASK(CDMA_S_STATUS_0, STATUS_1) :
+		MASK(CDMA_S_STATUS_0, STATUS_0);
+	shift = group->id ? SHIFT(CDMA_S_STATUS_0, STATUS_1) :
+		SHIFT(CDMA_S_STATUS_0, STATUS_0);
+	reg = (reg & mask) >> shift;
+	ASSERT_GOTO((reg == FIELD_ENUM(CDMA_S_STATUS_0, STATUS_0, IDLE)),
+		ret, -EINVAL, exit);
+
+	/* reverse config each sub-module in CC */
+
+	/* CACC */
+	reg = (map_conv[conv_op->conv_mode]
+		<< SHIFT(CACC_D_MISC_CFG_0, CONV_MODE)) |
+		(map_precision[conv_op->out_precision]
+		<< SHIFT(CACC_D_MISC_CFG_0, PROC_PRECISION));
+	cacc_reg_write(engine, D_MISC_CFG, reg);
+
+	reg = ((conv_surface->dst_data.width - 1)
+		<< SHIFT(CACC_D_DATAOUT_SIZE_0_0, DATAOUT_WIDTH)) |
+		((conv_surface->dst_data.height - 1)
+		<< SHIFT(CACC_D_DATAOUT_SIZE_0_0, DATAOUT_HEIGHT));
+	cacc_reg_write(engine, D_DATAOUT_SIZE_0, reg);
+
+	reg = ((conv_surface->dst_data.channel - 1)
+		<< SHIFT(CACC_D_DATAOUT_SIZE_1_0, DATAOUT_CHANNEL));
+	cacc_reg_write(engine, D_DATAOUT_SIZE_1, reg);
+
+	low = lower_32_bits(output_address);
+	cacc_reg_write(engine, D_DATAOUT_ADDR, low);
+	cacc_reg_write(engine, D_BATCH_NUMBER, conv_op->batch - 1);
+	cacc_reg_write(engine, D_LINE_STRIDE, conv_surface->dst_data.line_stride);
+	cacc_reg_write(engine, D_SURF_STRIDE, conv_surface->dst_data.surf_stride);
+
+	if (conv_surface->dst_data.width == 1 &&
+				conv_surface->dst_data.height == 1) {
+		ASSERT_GOTO((((uint32_t)conv_surface->dst_data.line_stride ==
+			(uint32_t)(conv_surface->dst_data.width * atom_size))),
+			ret, -EINVAL, exit);
+		reg = (CACC_D_DATAOUT_MAP_0_LINE_PACKED_TRUE <<
+				SHIFT(CACC_D_DATAOUT_MAP_0, LINE_PACKED));
+		reg |= (CACC_D_DATAOUT_MAP_0_SURF_PACKED_TRUE <<
+				SHIFT(CACC_D_DATAOUT_MAP_0, SURF_PACKED));
+	} else {
+		reg = (FIELD_ENUM(CACC_D_DATAOUT_MAP_0, LINE_PACKED, FALSE) <<
+				SHIFT(CACC_D_DATAOUT_MAP_0, LINE_PACKED));
+		reg |= (FIELD_ENUM(CACC_D_DATAOUT_MAP_0, SURF_PACKED, FALSE) <<
+				SHIFT(CACC_D_DATAOUT_MAP_0, SURF_PACKED));
+	}
+	cacc_reg_write(engine, D_DATAOUT_MAP, reg);
+
+	cacc_reg_write(engine, D_CLIP_CFG, conv_op->out_cvt.truncate);
+
+	/* CMAC */
+	reg = (map_conv[conv_op->conv_mode]
+		<< SHIFT(CMAC_A_D_MISC_CFG_0, CONV_MODE)) |
+		(map_precision[conv_op->out_precision]
+		<< SHIFT(CMAC_A_D_MISC_CFG_0, PROC_PRECISION));
+	cmac_a_reg_write(engine, D_MISC_CFG, reg);
+	cmac_b_reg_write(engine, D_MISC_CFG, reg);
+
+	/* CSC */
+	reg = (map_conv[conv_op->conv_mode]
+		<< SHIFT(CSC_D_MISC_CFG_0, CONV_MODE)) |
+		(map_precision[conv_op->out_precision]
+		<< SHIFT(CSC_D_MISC_CFG_0, IN_PRECISION)) |
+		(map_precision[conv_op->out_precision]
+		<< SHIFT(CSC_D_MISC_CFG_0, PROC_PRECISION)) |
+		(conv_op->data_reuse
+		<< SHIFT(CSC_D_MISC_CFG_0, DATA_REUSE)) |
+		(conv_op->weight_reuse
+		<< SHIFT(CSC_D_MISC_CFG_0, WEIGHT_REUSE)) |
+		(conv_op->skip_data_rls
+		<< SHIFT(CSC_D_MISC_CFG_0, SKIP_DATA_RLS)) |
+		(conv_op->skip_weight_rls
+		<< SHIFT(CSC_D_MISC_CFG_0, SKIP_WEIGHT_RLS));
+	csc_reg_write(engine, D_MISC_CFG, reg);
+
+	reg = (get_in_format(conv_op->data_format) <<
+		SHIFT(CSC_D_DATAIN_FORMAT_0, DATAIN_FORMAT));
+	csc_reg_write(engine, D_DATAIN_FORMAT, reg);
+
+	reg = ((conv_op->input_width_csc - 1)
+		<< SHIFT(CSC_D_DATAIN_SIZE_EXT_0_0, DATAIN_WIDTH_EXT)) |
+		((conv_op->input_height_csc - 1)
+		<< SHIFT(CSC_D_DATAIN_SIZE_EXT_0_0, DATAIN_HEIGHT_EXT));
+	csc_reg_write(engine, D_DATAIN_SIZE_EXT_0, reg);
+
+	reg = ((conv_op->input_channel_csc - 1)
+		<< SHIFT(CSC_D_DATAIN_SIZE_EXT_1_0, DATAIN_CHANNEL_EXT));
+	csc_reg_write(engine, D_DATAIN_SIZE_EXT_1, reg);
+
+	reg = ((conv_op->batch - 1)
+		<< SHIFT(CSC_D_BATCH_NUMBER_0, BATCHES));
+	csc_reg_write(engine, D_BATCH_NUMBER, reg);
+	reg = ((conv_op->post_extension)
+		<< SHIFT(CSC_D_POST_Y_EXTENSION_0, Y_EXTENSION));
+	csc_reg_write(engine, D_POST_Y_EXTENSION, reg);
+
+	reg = ((conv_op->entry_per_slice - 1)
+		<< SHIFT(CSC_D_ENTRY_PER_SLICE_0, ENTRIES));
+	csc_reg_write(engine, D_ENTRY_PER_SLICE, reg);
+
+	reg = (map_weight_fmt[conv_op->weight_format]
+		<< SHIFT(CSC_D_WEIGHT_FORMAT_0, WEIGHT_FORMAT));
+	csc_reg_write(engine, D_WEIGHT_FORMAT, reg);
+
+	reg = ((conv_op->kernel_width_csc - 1)
+		<< SHIFT(CSC_D_WEIGHT_SIZE_EXT_0_0, WEIGHT_WIDTH_EXT)) |
+		((conv_op->kernel_height_csc - 1)
+		<< SHIFT(CSC_D_WEIGHT_SIZE_EXT_0_0, WEIGHT_HEIGHT_EXT));
+	csc_reg_write(engine, D_WEIGHT_SIZE_EXT_0, reg);
+
+	reg = ((conv_op->kernel_channel_csc - 1)
+		<< SHIFT(CSC_D_WEIGHT_SIZE_EXT_1_0, WEIGHT_CHANNEL_EXT)) |
+		((conv_surface->dst_data.channel - 1)
+		<< SHIFT(CSC_D_WEIGHT_SIZE_EXT_1_0, WEIGHT_KERNEL));
+	csc_reg_write(engine, D_WEIGHT_SIZE_EXT_1, reg);
+
+	csc_reg_write(engine, D_WEIGHT_BYTES, conv_surface->weight_data.size);
+	csc_reg_write(engine, D_WMB_BYTES, conv_surface->wmb_data.size);
+
+	reg = ((conv_op->input_width_cmac - 1)
+		<< SHIFT(CSC_D_DATAOUT_SIZE_0_0, DATAOUT_WIDTH)) |
+		((conv_op->input_height_cmac - 1)
+		<< SHIFT(CSC_D_DATAOUT_SIZE_0_0, DATAOUT_HEIGHT));
+	csc_reg_write(engine, D_DATAOUT_SIZE_0, reg);
+
+	reg = ((conv_surface->dst_data.channel - 1)
+		<< SHIFT(CSC_D_DATAOUT_SIZE_1_0, DATAOUT_CHANNEL));
+	csc_reg_write(engine, D_DATAOUT_SIZE_1, reg);
+
+	reg = ((conv_surface->dst_data.width *
+				conv_surface->dst_data.height - 1)
+		<< SHIFT(CSC_D_ATOMICS_0, ATOMICS));
+	csc_reg_write(engine, D_ATOMICS, reg);
+	reg = ((conv_op->release - 1)
+		<< SHIFT(CSC_D_RELEASE_0, RLS_SLICES));
+	csc_reg_write(engine, D_RELEASE, reg);
+
+	if (conv_op->conv_mode == CONV_MODE_DIRECT) {
+		stride_x = conv_op->conv_stride_x - 1;
+		stride_y = conv_op->conv_stride_y - 1;
+		pad_x = conv_op->pad_x_left;
+		pad_y = conv_op->pad_y_top;
+	} else {
+		stride_x = 0;
+		stride_y = 0;
+		pad_x = 0;
+		pad_y = 0;
+	}
+
+	reg = (stride_x
+		<< SHIFT(CSC_D_CONV_STRIDE_EXT_0, CONV_X_STRIDE_EXT)) |
+		(stride_y
+		<< SHIFT(CSC_D_CONV_STRIDE_EXT_0, CONV_Y_STRIDE_EXT));
+	csc_reg_write(engine, D_CONV_STRIDE_EXT, reg);
+
+	reg = ((conv_op->dilation_x - 1)
+		<< SHIFT(CSC_D_DILATION_EXT_0, X_DILATION_EXT)) |
+		((conv_op->dilation_y - 1)
+		<< SHIFT(CSC_D_DILATION_EXT_0, Y_DILATION_EXT));
+	csc_reg_write(engine, D_DILATION_EXT, reg);
+
+	reg = (pad_x
+		<< SHIFT(CSC_D_ZERO_PADDING_0, PAD_LEFT)) |
+		(pad_y
+		<< SHIFT(CSC_D_ZERO_PADDING_0, PAD_TOP));
+	csc_reg_write(engine, D_ZERO_PADDING, reg);
+
+	reg = (conv_op->pad_val
+		<< SHIFT(CSC_D_ZERO_PADDING_VALUE_0, PAD_VALUE)) &
+		MASK(CSC_D_ZERO_PADDING_VALUE_0, PAD_VALUE);
+	csc_reg_write(engine, D_ZERO_PADDING_VALUE, reg);
+
+	reg = ((conv_op->data_bank - 1)
+		<< SHIFT(CSC_D_BANK_0, DATA_BANK)) |
+		((conv_op->weight_bank - 1)
+		<< SHIFT(CSC_D_BANK_0, WEIGHT_BANK));
+	csc_reg_write(engine, D_BANK, reg);
+	csc_reg_write(engine, D_PRA_CFG, conv_op->pra_truncate);
+
+	/* CBUF */
+	/* there's no CBUF register */
+
+	/* CDMA */
+	reg = (map_conv[conv_op->conv_mode]
+		<< SHIFT(CDMA_D_MISC_CFG_0, CONV_MODE)) |
+		(map_precision[conv_op->in_precision]
+		<< SHIFT(CDMA_D_MISC_CFG_0, IN_PRECISION)) |
+		(map_precision[conv_op->out_precision]
+		<< SHIFT(CDMA_D_MISC_CFG_0, PROC_PRECISION)) |
+		(conv_op->data_reuse
+		<< SHIFT(CDMA_D_MISC_CFG_0, DATA_REUSE)) |
+		(conv_op->weight_reuse
+		<< SHIFT(CDMA_D_MISC_CFG_0, WEIGHT_REUSE)) |
+		(conv_op->skip_data_rls
+		<< SHIFT(CDMA_D_MISC_CFG_0, SKIP_DATA_RLS)) |
+		(conv_op->skip_weight_rls
+		<< SHIFT(CDMA_D_MISC_CFG_0, SKIP_WEIGHT_RLS));
+	cdma_reg_write(engine, D_MISC_CFG, reg);
+
+	reg = (get_in_format(conv_op->data_format) <<
+		SHIFT(CDMA_D_DATAIN_FORMAT_0, DATAIN_FORMAT)) |
+		(map_img_fmt[conv_op->data_format][0]
+		<< SHIFT(CDMA_D_DATAIN_FORMAT_0, PIXEL_FORMAT)) |
+		(map_pixel[conv_op->pixel_mapping]
+		<< SHIFT(CDMA_D_DATAIN_FORMAT_0, PIXEL_MAPPING)) |
+		(conv_op->pixel_override
+		<< SHIFT(CDMA_D_DATAIN_FORMAT_0, PIXEL_SIGN_OVERRIDE));
+	cdma_reg_write(engine, D_DATAIN_FORMAT, reg);
+
+	reg = ((conv_surface->src_data.width - 1)
+		<< SHIFT(CDMA_D_DATAIN_SIZE_0_0, DATAIN_WIDTH)) |
+		((conv_surface->src_data.height - 1)
+		<< SHIFT(CDMA_D_DATAIN_SIZE_0_0, DATAIN_HEIGHT));
+	cdma_reg_write(engine, D_DATAIN_SIZE_0, reg);
+
+	reg = ((conv_surface->src_data.channel - 1)
+		<< SHIFT(CDMA_D_DATAIN_SIZE_1_0, DATAIN_CHANNEL));
+	cdma_reg_write(engine, D_DATAIN_SIZE_1, reg);
+
+	reg = ((conv_op->input_width_csc - 1)
+		<< SHIFT(CDMA_D_DATAIN_SIZE_EXT_0_0, DATAIN_WIDTH_EXT)) |
+		((conv_op->input_height_csc - 1)
+		<< SHIFT(CDMA_D_DATAIN_SIZE_EXT_0_0, DATAIN_HEIGHT_EXT));
+	cdma_reg_write(engine, D_DATAIN_SIZE_EXT_0, reg);
+
+	reg = (map_ram[conv_surface->src_data.type]
+		<< SHIFT(CDMA_D_DAIN_RAM_TYPE_0, DATAIN_RAM_TYPE));
+	cdma_reg_write(engine, D_DAIN_RAM_TYPE, reg);
+
+	high = upper_32_bits(input_address);
+	low = lower_32_bits(input_address);
+	cdma_reg_write(engine, D_DAIN_ADDR_HIGH_0, high);
+	cdma_reg_write(engine, D_DAIN_ADDR_LOW_0, low);
+
+	high = upper_32_bits((input_address + conv_surface->offset_u));
+	low = lower_32_bits(input_address + conv_surface->offset_u);
+	cdma_reg_write(engine, D_DAIN_ADDR_HIGH_1, high);
+	cdma_reg_write(engine, D_DAIN_ADDR_LOW_1, low);
+
+	cdma_reg_write(engine, D_LINE_STRIDE, conv_surface->src_data.line_stride);
+	cdma_reg_write(engine, D_SURF_STRIDE, conv_surface->src_data.surf_stride);
+	cdma_reg_write(engine, D_LINE_UV_STRIDE, conv_surface->in_line_uv_stride);
+
+	reg = ((conv_surface->src_data.line_stride ==
+			((uint32_t)conv_surface->src_data.width * atom_size))
+		<< SHIFT(CDMA_D_DAIN_MAP_0, LINE_PACKED));
+	reg |= ((conv_surface->src_data.surf_stride ==
+			((uint32_t)(conv_surface->src_data.width *
+			conv_surface->src_data.height) * atom_size))
+		<< SHIFT(CDMA_D_DAIN_MAP_0, SURF_PACKED));
+	cdma_reg_write(engine, D_DAIN_MAP, reg);
+
+	reg = ((conv_op->batch - 1)
+		<< SHIFT(CDMA_D_BATCH_NUMBER_0, BATCHES));
+	cdma_reg_write(engine, D_BATCH_NUMBER, reg);
+
+	cdma_reg_write(engine, D_BATCH_STRIDE, conv_op->batch_stride);
+
+	reg = ((conv_op->entry_per_slice - 1)
+		<< SHIFT(CDMA_D_ENTRY_PER_SLICE_0, ENTRIES));
+	cdma_reg_write(engine, D_ENTRY_PER_SLICE, reg);
+
+	reg = ((conv_op->fetch_grain - 1)
+		<< SHIFT(CDMA_D_FETCH_GRAIN_0, GRAINS));
+	cdma_reg_write(engine, D_FETCH_GRAIN, reg);
+
+	reg = (map_weight_fmt[conv_op->weight_format]
+		<< SHIFT(CDMA_D_WEIGHT_FORMAT_0, WEIGHT_FORMAT));
+	cdma_reg_write(engine, D_WEIGHT_FORMAT, reg);
+
+	reg = ((conv_op->bytes_per_kernel - 1)
+		<< SHIFT(CDMA_D_WEIGHT_SIZE_0_0, BYTE_PER_KERNEL));
+	cdma_reg_write(engine, D_WEIGHT_SIZE_0, reg);
+
+	reg = ((conv_surface->dst_data.channel - 1)
+		<< SHIFT(CDMA_D_WEIGHT_SIZE_1_0, WEIGHT_KERNEL));
+	cdma_reg_write(engine, D_WEIGHT_SIZE_1, reg);
+
+	reg = (map_ram[conv_surface->weight_data.type]
+		<< SHIFT(CDMA_D_WEIGHT_RAM_TYPE_0, WEIGHT_RAM_TYPE));
+	cdma_reg_write(engine, D_WEIGHT_RAM_TYPE, reg);
+
+	high = upper_32_bits(weight_address);
+	low = lower_32_bits(weight_address);
+	cdma_reg_write(engine, D_WEIGHT_ADDR_HIGH, high);
+	cdma_reg_write(engine, D_WEIGHT_ADDR_LOW, low);
+	cdma_reg_write(engine, D_WEIGHT_BYTES, conv_surface->weight_data.size);
+
+	if (conv_op->weight_format == WEIGHT_FORMAT_COMPRESSED) {
+		high = upper_32_bits(wgs_address);
+		low = lower_32_bits(wgs_address);
+		cdma_reg_write(engine, D_WGS_ADDR_HIGH, high);
+		cdma_reg_write(engine, D_WGS_ADDR_LOW, low);
+
+		high = upper_32_bits(wmb_address);
+		low = lower_32_bits(wmb_address);
+		cdma_reg_write(engine, D_WMB_ADDR_HIGH, high);
+		cdma_reg_write(engine, D_WMB_ADDR_LOW, low);
+		cdma_reg_write(engine, D_WMB_BYTES, conv_surface->wmb_data.size);
+	}
+
+	reg = (map_mean[conv_op->mean_format]
+		<< SHIFT(CDMA_D_MEAN_FORMAT_0, MEAN_FORMAT));
+	cdma_reg_write(engine, D_MEAN_FORMAT, reg);
+
+	if (conv_op->mean_format == MEAN_FORMAT_ENABLE) {
+		reg = ((conv_op->mean_ry
+			<< SHIFT(CDMA_D_MEAN_GLOBAL_0_0, MEAN_RY)) &
+			MASK(CDMA_D_MEAN_GLOBAL_0_0, MEAN_RY)) |
+			((conv_op->mean_gu
+			<< SHIFT(CDMA_D_MEAN_GLOBAL_0_0, MEAN_GU)) &
+			MASK(CDMA_D_MEAN_GLOBAL_0_0, MEAN_GU));
+		cdma_reg_write(engine, D_MEAN_GLOBAL_0, reg);
+
+		reg = ((conv_op->mean_bv
+			<< SHIFT(CDMA_D_MEAN_GLOBAL_1_0, MEAN_BV))&
+			MASK(CDMA_D_MEAN_GLOBAL_1_0, MEAN_BV)) |
+			((conv_op->mean_ax
+			<< SHIFT(CDMA_D_MEAN_GLOBAL_1_0, MEAN_AX))&
+			MASK(CDMA_D_MEAN_GLOBAL_1_0, MEAN_AX));
+		cdma_reg_write(engine, D_MEAN_GLOBAL_1, reg);
+	}
+
+	if (conv_op->in_cvt.enable) {
+		reg = ((FIELD_ENUM(CDMA_D_CVT_CFG_0, CVT_EN, ENABLE))
+			<< SHIFT(CDMA_D_CVT_CFG_0, CVT_EN)) |
+			(conv_op->in_cvt.truncate
+			<< SHIFT(CDMA_D_CVT_CFG_0, CVT_TRUNCATE));
+		cdma_reg_write(engine, D_CVT_CFG, reg);
+		cdma_reg_write(engine, D_CVT_OFFSET, conv_op->in_cvt.offset);
+		cdma_reg_write(engine, D_CVT_SCALE, conv_op->in_cvt.scale);
+	} else {
+		reg = ((FIELD_ENUM(CDMA_D_CVT_CFG_0, CVT_EN, DISABLE))
+			<< SHIFT(CDMA_D_CVT_CFG_0, CVT_EN));
+		cdma_reg_write(engine, D_CVT_CFG, reg);
+	}
+
+	reg = ((conv_op->conv_stride_x - 1)
+		<< SHIFT(CDMA_D_CONV_STRIDE_0, CONV_X_STRIDE)) |
+		((conv_op->conv_stride_y - 1)
+		<< SHIFT(CDMA_D_CONV_STRIDE_0, CONV_Y_STRIDE));
+	cdma_reg_write(engine, D_CONV_STRIDE, reg);
+
+	reg = (conv_op->pad_x_left <<
+		SHIFT(CDMA_D_ZERO_PADDING_0, PAD_LEFT)) |
+		(conv_op->pad_x_right
+		<< SHIFT(CDMA_D_ZERO_PADDING_0, PAD_RIGHT)) |
+		(conv_op->pad_y_top
+		<< SHIFT(CDMA_D_ZERO_PADDING_0, PAD_TOP)) |
+		(conv_op->pad_y_bottom
+		<< SHIFT(CDMA_D_ZERO_PADDING_0, PAD_BOTTOM));
+	cdma_reg_write(engine, D_ZERO_PADDING,   reg);
+
+	reg = conv_op->pad_val <<
+		SHIFT(CDMA_D_ZERO_PADDING_VALUE_0, PAD_VALUE) &
+		MASK(CDMA_D_ZERO_PADDING_VALUE_0, PAD_VALUE);
+	cdma_reg_write(engine, D_ZERO_PADDING_VALUE, reg);
+	reg = ((conv_op->weight_bank - 1)
+		<< SHIFT(CDMA_D_BANK_0, WEIGHT_BANK)) |
+		((conv_op->data_bank - 1)
+		<< SHIFT(CDMA_D_BANK_0, DATA_BANK));
+	cdma_reg_write(engine, D_BANK, reg);
+
+exit:
+	return ret;
+}
+
+int
+dla_conv_is_ready(struct dla_processor *processor,
+				  struct dla_processor_group *group)
+{
+	return 1;
+}
+
+void
+dla_conv_dump_config(struct dla_processor_group *group)
+{
+	struct dla_conv_op_desc *conv_op;
+	struct dla_conv_surface_desc *conv_surface;
+
+	conv_surface = &group->surface_desc->conv_surface;
+	conv_op = &group->operation_desc->conv_op;
+}
+
+int
+dla_conv_program(struct dla_engine *engine, struct dla_processor_group *group)
+{
+	int32_t ret;
+
+	ret = processor_conv_program(engine, group);
+	if (ret)
+		goto exit;
+
+exit:
+	return ret;
+}
diff --git a/drivers/gpu/drm/nvdla/nvdla_drm.c b/drivers/gpu/drm/nvdla/nvdla_drm.c
new file mode 100644
index 000000000000..9217eee1de3b
--- /dev/null
+++ b/drivers/gpu/drm/nvdla/nvdla_drm.c
@@ -0,0 +1,695 @@
+// SPDX-License-Identifier: BSD-3-Clause OR GPL-2.0
+/*
+ * Copyright (C) 2017-2018 NVIDIA CORPORATION
+ * Copyright (C) 2022 Cai Huoqing
+ */
+
+#include <linux/dma-buf.h>
+#include <linux/dma-mapping.h>
+#include <linux/fs.h>
+#include <linux/interrupt.h>
+#include <linux/irq.h>
+#include <linux/irqdomain.h>
+#include <linux/module.h>
+#include <linux/of.h>
+#include <linux/of_device.h>
+#include <linux/of_irq.h>
+#include <linux/of_platform.h>
+#include <linux/platform_device.h>
+#include <linux/printk.h>
+#include <linux/slab.h>
+#include <linux/spinlock.h>
+#include <linux/time.h>
+#include <linux/uaccess.h>
+#include <linux/types.h>
+
+#include "nvdla_drm.h"
+#include "nvdla_ioctl.h"
+#include "nvdla_engine.h"
+
+static struct nvdla_config nvdla_config_os_initial = {
+	.atom_size = 32,
+	.bdma_enable = true,
+	.rubik_enable = true,
+	.weight_compress_support = true,
+};
+
+static struct nvdla_config nvdla_config_small = {
+	//.atom_size = 8,
+	.atom_size = 32,  // nv_large config
+	.bdma_enable = false,
+	.rubik_enable = false,
+	.weight_compress_support = false,
+};
+
+int64_t dla_get_time_us(void)
+{
+	return ktime_get_ns() / NSEC_PER_USEC;
+}
+
+void dla_reg_write(void *driver_context, uint32_t addr, uint32_t reg)
+{
+	struct nvdla_device *nvdla_dev =
+			(struct nvdla_device *)driver_context;
+
+	if (!nvdla_dev)
+		return;
+
+	writel(reg, nvdla_dev->base + addr);
+}
+
+uint32_t dla_reg_read(void *driver_context, uint32_t addr)
+{
+	struct nvdla_device *nvdla_dev =
+			(struct nvdla_device *)driver_context;
+
+	if (!nvdla_dev)
+		return 0;
+
+	return readl(nvdla_dev->base + addr);
+}
+
+static irqreturn_t nvdla_engine_isr(int32_t irq, void *data)
+{
+	unsigned long flags;
+	uint32_t mask;
+	uint32_t reg;
+	struct dla_processor *processor = NULL;
+	struct dla_processor_group *group;
+	struct dla_engine *engine;
+	struct nvdla_device *nvdla_dev = (struct nvdla_device *)data;
+
+	if (!nvdla_dev)
+		return IRQ_NONE;
+
+	engine = nvdla_dev->engine_context;
+	spin_lock_irqsave(&nvdla_dev->nvdla_lock, flags);
+
+	mask = glb_reg_read(engine, S_INTR_MASK);
+	reg = glb_reg_read(engine, S_INTR_STATUS);
+
+	if (reg & MASK(GLB_S_INTR_STATUS_0, CACC_DONE_STATUS0)) {
+		processor = &engine->processors[DLA_OP_CONV];
+		group = &processor->groups[0];
+		group->events |= (1 << DLA_EVENT_OP_COMPLETED);
+	}
+	if (reg & MASK(GLB_S_INTR_STATUS_0, CACC_DONE_STATUS1)) {
+		processor = &engine->processors[DLA_OP_CONV];
+		group = &processor->groups[1];
+		group->events |= (1 << DLA_EVENT_OP_COMPLETED);
+	}
+	if (reg & MASK(GLB_S_INTR_STATUS_0, SDP_DONE_STATUS0)) {
+		processor = &engine->processors[DLA_OP_SDP];
+		group = &processor->groups[0];
+		group->events |= (1 << DLA_EVENT_OP_COMPLETED);
+	}
+	if (reg & MASK(GLB_S_INTR_STATUS_0, SDP_DONE_STATUS1)) {
+		processor = &engine->processors[DLA_OP_SDP];
+		group = &processor->groups[1];
+		group->events |= (1 << DLA_EVENT_OP_COMPLETED);
+	}
+	if (reg & MASK(GLB_S_INTR_STATUS_0, CDP_DONE_STATUS0)) {
+		processor = &engine->processors[DLA_OP_CDP];
+		group = &processor->groups[0];
+		group->events |= (1 << DLA_EVENT_OP_COMPLETED);
+	}
+	if (reg & MASK(GLB_S_INTR_STATUS_0, CDP_DONE_STATUS1)) {
+		processor = &engine->processors[DLA_OP_CDP];
+		group = &processor->groups[1];
+		group->events |= (1 << DLA_EVENT_OP_COMPLETED);
+	}
+	if (reg & MASK(GLB_S_INTR_STATUS_0, RUBIK_DONE_STATUS0)) {
+		processor = &engine->processors[DLA_OP_RUBIK];
+		group = &processor->groups[0];
+		group->events |= (1 << DLA_EVENT_OP_COMPLETED);
+	}
+	if (reg & MASK(GLB_S_INTR_STATUS_0, RUBIK_DONE_STATUS1)) {
+		processor = &engine->processors[DLA_OP_RUBIK];
+		group = &processor->groups[1];
+		group->events |= (1 << DLA_EVENT_OP_COMPLETED);
+	}
+	if (reg & MASK(GLB_S_INTR_STATUS_0, PDP_DONE_STATUS0)) {
+		processor = &engine->processors[DLA_OP_PDP];
+		group = &processor->groups[0];
+		group->events |= (1 << DLA_EVENT_OP_COMPLETED);
+	}
+	if (reg & MASK(GLB_S_INTR_STATUS_0, PDP_DONE_STATUS1)) {
+		processor = &engine->processors[DLA_OP_PDP];
+		group = &processor->groups[1];
+		group->events |= (1 << DLA_EVENT_OP_COMPLETED);
+	}
+	if (reg & MASK(GLB_S_INTR_STATUS_0, BDMA_DONE_STATUS0)) {
+		processor = &engine->processors[DLA_OP_BDMA];
+		group = &processor->groups[0];
+		group->events |= (1 << DLA_EVENT_OP_COMPLETED);
+	}
+	if (reg & MASK(GLB_S_INTR_STATUS_0, BDMA_DONE_STATUS1)) {
+		processor = &engine->processors[DLA_OP_BDMA];
+		group = &processor->groups[1];
+		group->events |= (1 << DLA_EVENT_OP_COMPLETED);
+	}
+	if (reg & MASK(GLB_S_INTR_STATUS_0, CDMA_DAT_DONE_STATUS0)) {
+		processor = &engine->processors[DLA_OP_CONV];
+		group = &processor->groups[0];
+		group->events |= (1 << DLA_EVENT_CDMA_DT_DONE);
+	}
+	if (reg & MASK(GLB_S_INTR_STATUS_0, CDMA_DAT_DONE_STATUS1)) {
+		processor = &engine->processors[DLA_OP_CONV];
+		group = &processor->groups[1];
+		group->events |= (1 << DLA_EVENT_CDMA_DT_DONE);
+	}
+	if (reg & MASK(GLB_S_INTR_STATUS_0, CDMA_WT_DONE_STATUS0)) {
+		processor = &engine->processors[DLA_OP_CONV];
+		group = &processor->groups[0];
+		group->events |= (1 << DLA_EVENT_CDMA_WT_DONE);
+	}
+	if (reg & MASK(GLB_S_INTR_STATUS_0, CDMA_WT_DONE_STATUS1)) {
+		processor = &engine->processors[DLA_OP_CONV];
+		group = &processor->groups[1];
+		group->events |= (1 << DLA_EVENT_CDMA_WT_DONE);
+	}
+
+	glb_reg_write(engine, S_INTR_STATUS, reg);
+	mask = glb_reg_read(engine, S_INTR_MASK);
+	reg = glb_reg_read(engine, S_INTR_STATUS);
+
+	complete(&nvdla_dev->event_notifier);
+	spin_unlock_irqrestore(&nvdla_dev->nvdla_lock, flags);
+
+	return IRQ_HANDLED;
+}
+
+static int32_t dla_read_dma_address(void *driver_context, void *task_data,
+						int16_t index, void *dst)
+{
+	int32_t ret = 0;
+	struct nvdla_mem_handle *handles;
+	dma_addr_t *phys_addr = (dma_addr_t *)(dst);
+	struct nvdla_device *nvdla_dev =
+			(struct nvdla_device *)driver_context;
+	struct nvdla_task *task = (struct nvdla_task *)task_data;
+
+	if (index == -1 || index > task->num_addresses)
+		return -EINVAL;
+
+	handles = (struct nvdla_mem_handle *)task->address_list;
+	ret = nvdla_gem_dma_addr(nvdla_dev->drm, task->file,
+					handles[index].handle,
+					phys_addr);
+
+	/* Add offset to IOVA address */
+	*phys_addr = *phys_addr + handles[index].offset;
+
+	return ret;
+}
+
+static int32_t dla_read_cpu_address(void *driver_context, void *task_data,
+						int16_t index, void *dst)
+{
+	uint64_t *temp = (uint64_t *)dst;
+	struct nvdla_task *task = (struct nvdla_task *)task_data;
+
+	if (index == -1 || index > task->num_addresses)
+		return -EINVAL;
+
+	*temp = (uint64_t)index;
+	return 0;
+}
+
+int32_t dla_get_dma_address(void *driver_context, void *task_data,
+					int16_t index, void *dst_ptr,
+					uint32_t destination)
+{
+	int32_t ret = 0;
+
+	if (destination == DESTINATION_PROCESSOR) {
+		ret = dla_read_cpu_address(driver_context, task_data,
+						index, dst_ptr);
+	} else if (destination == DESTINATION_DMA) {
+		ret = dla_read_dma_address(driver_context, task_data,
+						index, dst_ptr);
+	} else {
+		ret = -EINVAL;
+	}
+
+	return ret;
+}
+
+int32_t dla_data_write(void *driver_context, void *task_data,
+				void *src, uint64_t dst,
+				uint32_t size, uint64_t offset)
+{
+	int32_t ret;
+	void *ptr = NULL;
+	struct dma_buf *buf;
+	struct iosys_map map;
+	struct nvdla_mem_handle *handles;
+	struct nvdla_task *task = (struct nvdla_task *)task_data;
+
+	handles = task->address_list;
+	buf = dma_buf_get(handles[dst].handle);
+	if (IS_ERR(buf)) {
+		pr_err("%s: Failed get dma_buf for handle=%d\n", __func__,
+						handles[dst].handle);
+		return -EFAULT;
+	}
+
+	ret = dma_buf_begin_cpu_access(buf, DMA_BIDIRECTIONAL);
+	if (ret)
+		goto put_dma_buf;
+
+	ret = dma_buf_vmap(buf, &map);
+	ptr = ret ? NULL : map.vaddr;
+	if (!ptr) {
+		pr_err("%s: Failed to vmap dma_buf for handle=%d\n", __func__,
+						handles[dst].handle);
+		ret = -ENOMEM;
+		goto end_cpu_access;
+	}
+
+
+	memcpy((void *)((uint8_t *)ptr + offset), src, size);
+
+	dma_buf_vunmap(buf, ptr);
+
+end_cpu_access:
+	dma_buf_end_cpu_access(buf, DMA_BIDIRECTIONAL);
+
+put_dma_buf:
+	dma_buf_put(buf);
+
+	return ret;
+}
+
+int32_t dla_data_read(void *driver_context, void *task_data,
+				uint64_t src, void *dst,
+				uint32_t size, uint64_t offset)
+{
+	int32_t ret;
+	void *ptr = NULL;
+	struct dma_buf *buf;
+	struct iosys_map map;
+	struct nvdla_mem_handle *handles;
+	struct nvdla_task *task = (struct nvdla_task *)task_data;
+
+	handles = task->address_list;
+
+	buf = dma_buf_get(handles[src].handle);
+	if (IS_ERR(buf)) {
+		pr_err("%s: Failed get dma_buf for handle=%d\n", __func__,
+						handles[src].handle);
+		return -EFAULT;
+	}
+
+	ret = dma_buf_begin_cpu_access(buf, DMA_BIDIRECTIONAL);
+	if (ret)
+		goto put_dma_buf;
+
+	ret = dma_buf_vmap(buf, &map);
+	ptr = ret ? NULL : map.vaddr;
+	if (!ptr) {
+		pr_err("%s: Failed to vmap dma_buf for handle=%d\n", __func__,
+						handles[src].handle);
+		ret = -ENOMEM;
+		goto end_cpu_access;
+	}
+
+	memcpy(dst, (void *)(((uint8_t *)ptr) + offset), size);
+
+	dma_buf_vunmap(buf, ptr);
+
+end_cpu_access:
+	dma_buf_end_cpu_access(buf, DMA_BIDIRECTIONAL);
+
+put_dma_buf:
+	dma_buf_put(buf);
+
+	return ret;
+}
+
+int32_t nvdla_task_submit(struct nvdla_device *nvdla_dev, struct nvdla_task *task)
+{
+	int32_t err = 0;
+	uint32_t task_complete = 0;
+
+	//trace_printk("__nvdla_task_submit_entry\n");
+	nvdla_dev->task = task;
+
+	err = dla_execute_task(nvdla_dev->engine_context, (void *)task, nvdla_dev->config_data);
+	if (err) {
+		pr_err("Task execution failed\n");
+		return err;
+	}
+
+	pr_debug("Wait for task complete\n");
+
+	while (1) {
+		unsigned long flags;
+
+		wait_for_completion(&nvdla_dev->event_notifier);
+
+		spin_lock_irqsave(&nvdla_dev->nvdla_lock, flags);
+
+		err = dla_process_events(nvdla_dev->engine_context, &task_complete);
+
+		spin_unlock_irqrestore(&nvdla_dev->nvdla_lock, flags);
+
+		if (err || task_complete)
+			break;
+	}
+
+	pr_debug("Task complete\n");
+	dla_clear_task(nvdla_dev->engine_context);
+	//trace_printk("__nvdla_task_submit_exit\n");
+
+	return err;
+}
+
+static union dla_operation_container operation_desc[DLA_OP_NUM][DLA_NUM_GROUPS];
+static union dla_surface_container surface_desc[DLA_OP_NUM][DLA_NUM_GROUPS];
+
+static struct dla_task global_task;
+
+static struct dla_engine engine = {
+	.processors[DLA_OP_BDMA] = {
+		.name = "BDMA",
+		.op_type = DLA_OP_BDMA,
+		.program = dla_bdma_program,
+		.enable = dla_bdma_enable,
+		.set_producer = dla_bdma_set_producer,
+		.is_ready = dla_bdma_is_ready,
+		.dump_config = dla_bdma_dump_config,
+		.rdma_check = dla_bdma_rdma_check,
+		.consumer_ptr = 0,
+		.roi_index = 0,
+		.group_status = 0,
+		.rdma_status = 0,
+		.last_group = 1,
+		.groups[0] = {
+			.id = 0,
+			.rdma_id = 0,
+			.active = 0,
+			.events = 0,
+			.roi_index = 0,
+			.is_rdma_needed = 0,
+			.lut_index = -1,
+			.operation_desc = &operation_desc[DLA_OP_BDMA][0],
+			.surface_desc = &surface_desc[DLA_OP_BDMA][0],
+		},
+		.groups[1] = {
+			.id = 1,
+			.rdma_id = 0,
+			.active = 0,
+			.events = 0,
+			.roi_index = 0,
+			.is_rdma_needed = 0,
+			.lut_index = -1,
+			.operation_desc = &operation_desc[DLA_OP_BDMA][1],
+			.surface_desc = &surface_desc[DLA_OP_BDMA][1],
+		},
+	},
+	.processors[DLA_OP_CONV] = {
+		.name = "Convolution",
+		.op_type = DLA_OP_CONV,
+		.program = dla_conv_program,
+		.enable = dla_conv_enable,
+		.set_producer = dla_conv_set_producer,
+		.is_ready = dla_conv_is_ready,
+		.dump_config = dla_conv_dump_config,
+		.rdma_check = dla_conv_rdma_check,
+		.consumer_ptr = 0,
+		.roi_index = 0,
+		.group_status = 0,
+		.rdma_status = 0,
+		.last_group = 1,
+		.groups[0] = {
+			.id = 0,
+			.rdma_id = 0,
+			.active = 0,
+			.events = 0,
+			.roi_index = 0,
+			.is_rdma_needed = 0,
+			.lut_index = -1,
+			.operation_desc = &operation_desc[DLA_OP_CONV][0],
+			.surface_desc = &surface_desc[DLA_OP_CONV][0],
+		},
+		.groups[1] = {
+			.id = 1,
+			.rdma_id = 0,
+			.active = 0,
+			.events = 0,
+			.roi_index = 0,
+			.is_rdma_needed = 0,
+			.lut_index = -1,
+			.operation_desc = &operation_desc[DLA_OP_CONV][1],
+			.surface_desc = &surface_desc[DLA_OP_CONV][1],
+		},
+	},
+	.processors[DLA_OP_SDP] = {
+		.name = "SDP",
+		.op_type = DLA_OP_SDP,
+		.program = dla_sdp_program,
+		.enable = dla_sdp_enable,
+		.set_producer = dla_sdp_set_producer,
+		.is_ready = dla_sdp_is_ready,
+		.dump_config = dla_sdp_dump_config,
+		.rdma_check = dla_sdp_rdma_check,
+		.consumer_ptr = 0,
+		.roi_index = 0,
+		.group_status = 0,
+		.rdma_status = 0,
+		.last_group = 1,
+		.groups[0] = {
+			.id = 0,
+			.rdma_id = 0,
+			.active = 0,
+			.events = 0,
+			.roi_index = 0,
+			.is_rdma_needed = 0,
+			.lut_index = -1,
+			.operation_desc = &operation_desc[DLA_OP_SDP][0],
+			.surface_desc = &surface_desc[DLA_OP_SDP][0],
+		},
+		.groups[1] = {
+			.id = 1,
+			.rdma_id = 0,
+			.active = 0,
+			.events = 0,
+			.roi_index = 0,
+			.is_rdma_needed = 0,
+			.lut_index = -1,
+			.operation_desc = &operation_desc[DLA_OP_SDP][1],
+			.surface_desc = &surface_desc[DLA_OP_SDP][1],
+		},
+	},
+	.processors[DLA_OP_PDP] = {
+		.name = "PDP",
+		.op_type = DLA_OP_PDP,
+		.program = dla_pdp_program,
+		.enable = dla_pdp_enable,
+		.set_producer = dla_pdp_set_producer,
+		.is_ready = dla_pdp_is_ready,
+		.dump_config = dla_pdp_dump_config,
+		.rdma_check = dla_pdp_rdma_check,
+		.consumer_ptr = 0,
+		.roi_index = 0,
+		.group_status = 0,
+		.rdma_status = 0,
+		.last_group = 1,
+		.groups[0] = {
+			.id = 0,
+			.rdma_id = 0,
+			.active = 0,
+			.events = 0,
+			.roi_index = 0,
+			.is_rdma_needed = 0,
+			.lut_index = -1,
+			.operation_desc = &operation_desc[DLA_OP_PDP][0],
+			.surface_desc = &surface_desc[DLA_OP_PDP][0],
+		},
+		.groups[1] = {
+			.id = 1,
+			.rdma_id = 0,
+			.active = 0,
+			.events = 0,
+			.roi_index = 0,
+			.is_rdma_needed = 0,
+			.lut_index = -1,
+			.operation_desc = &operation_desc[DLA_OP_PDP][1],
+			.surface_desc = &surface_desc[DLA_OP_PDP][1],
+		},
+	},
+	.processors[DLA_OP_CDP] = {
+		.name = "CDP",
+		.op_type = DLA_OP_CDP,
+		.program = dla_cdp_program,
+		.enable = dla_cdp_enable,
+		.set_producer = dla_cdp_set_producer,
+		.is_ready = dla_cdp_is_ready,
+		.dump_config = dla_cdp_dump_config,
+		.rdma_check = dla_cdp_rdma_check,
+		.consumer_ptr = 0,
+		.roi_index = 0,
+		.group_status = 0,
+		.rdma_status = 0,
+		.last_group = 1,
+		.groups[0] = {
+			.id = 0,
+			.rdma_id = 0,
+			.active = 0,
+			.events = 0,
+			.roi_index = 0,
+			.is_rdma_needed = 0,
+			.lut_index = -1,
+			.operation_desc = &operation_desc[DLA_OP_CDP][0],
+			.surface_desc = &surface_desc[DLA_OP_CDP][0],
+		},
+		.groups[1] = {
+			.id = 1,
+			.rdma_id = 0,
+			.active = 0,
+			.events = 0,
+			.roi_index = 0,
+			.is_rdma_needed = 0,
+			.lut_index = -1,
+			.operation_desc = &operation_desc[DLA_OP_CDP][1],
+			.surface_desc = &surface_desc[DLA_OP_CDP][1],
+		},
+	},
+
+	.processors[DLA_OP_RUBIK] = {
+		.name = "RUBIK",
+		.op_type = DLA_OP_RUBIK,
+		.program = dla_rubik_program,
+		.enable = dla_rubik_enable,
+		.set_producer = dla_rubik_set_producer,
+		.is_ready = dla_rubik_is_ready,
+		.dump_config = dla_rubik_dump_config,
+		.rdma_check = dla_rubik_rdma_check,
+		.consumer_ptr = 0,
+		.roi_index = 0,
+		.group_status = 0,
+		.rdma_status = 0,
+		.last_group = 1,
+		.groups[0] = {
+			.id = 0,
+			.rdma_id = 0,
+			.active = 0,
+			.events = 0,
+			.roi_index = 0,
+			.is_rdma_needed = 0,
+			.lut_index = -1,
+			.operation_desc = &operation_desc[DLA_OP_RUBIK][0],
+			.surface_desc = &surface_desc[DLA_OP_RUBIK][0],
+		},
+		.groups[1] = {
+			.id = 1,
+			.rdma_id = 0,
+			.active = 0,
+			.events = 0,
+			.roi_index = 0,
+			.is_rdma_needed = 0,
+			.lut_index = -1,
+			.operation_desc = &operation_desc[DLA_OP_RUBIK][1],
+			.surface_desc = &surface_desc[DLA_OP_RUBIK][1],
+		},
+	},
+
+};
+
+/* driver probe and init */
+static const struct of_device_id nvdla_of_match[] = {
+	{
+		.compatible = "nvidia,nvdla_os_initial",
+		.data = &nvdla_config_os_initial,
+	},
+	{
+		.compatible = "nvidia,nvdla_2",
+		.data = &nvdla_config_small,
+	},
+	{ },
+};
+
+static int32_t nvdla_probe(struct platform_device *pdev)
+{
+	int32_t err = 0;
+	struct resource *res;
+	struct nvdla_device *nvdla_dev;
+	struct device *dev = &pdev->dev;
+	const struct of_device_id *match;
+
+	if (!pdev->dev.of_node)
+		return -EINVAL;
+
+	match = of_match_device(nvdla_of_match, &pdev->dev);
+	if (!match) {
+		pr_err("Missing DT entry!\n");
+		return -EINVAL;
+	}
+
+	nvdla_dev = devm_kzalloc(dev, sizeof(*nvdla_dev), GFP_KERNEL);
+	if (!nvdla_dev)
+		return -ENOMEM;
+
+	platform_set_drvdata(pdev, nvdla_dev);
+	nvdla_dev->pdev = pdev;
+	nvdla_dev->config_data = (struct nvdla_config *)match->data;
+
+	init_completion(&nvdla_dev->event_notifier);
+
+	res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
+	nvdla_dev->base = devm_ioremap_resource(&pdev->dev, res);
+	if (IS_ERR(nvdla_dev->base))
+		return PTR_ERR(nvdla_dev->base);
+
+	res = platform_get_resource(pdev, IORESOURCE_IRQ, 0);
+	if (!res) {
+		dev_err(&pdev->dev, "no irq resource\n");
+		return -EINVAL;
+	}
+	nvdla_dev->irq = res->start;
+
+	err = devm_request_irq(&pdev->dev, nvdla_dev->irq,
+				nvdla_engine_isr, 0,
+				dev_name(&pdev->dev), nvdla_dev);
+	if (err)
+		return err;
+
+	nvdla_dev->engine_context = &engine;
+	engine.task = &global_task;
+	engine.driver_context = (void *)nvdla_dev;
+	engine.task->task_data = NULL;
+
+	dla_init_op_cache(&engine);
+	dla_clear_task(nvdla_dev->engine_context);
+
+	err = nvdla_drm_probe(nvdla_dev);
+	if (err)
+		dev_err(&pdev->dev, "failed to register drm device\n");
+
+	return err;
+}
+
+static int32_t __exit nvdla_remove(struct platform_device *pdev)
+{
+	struct nvdla_device *nvdla_dev = dev_get_drvdata(&pdev->dev);
+
+	nvdla_drm_remove(nvdla_dev);
+
+	return 0;
+}
+
+static struct platform_driver nvdla_driver = {
+	.probe = nvdla_probe,
+	.remove = __exit_p(nvdla_remove),
+	.driver = {
+		.owner = THIS_MODULE,
+		.name = "NVDLA",
+		.of_match_table = of_match_ptr(nvdla_of_match),
+	},
+};
+module_platform_driver(nvdla_driver);
+
+MODULE_LICENSE("Dual BSD/GPL");
+MODULE_DESCRIPTION("Nvidia Deep Learning Accelerator driver");
+MODULE_IMPORT_NS(DMA_BUF);
diff --git a/drivers/gpu/drm/nvdla/nvdla_drm.h b/drivers/gpu/drm/nvdla/nvdla_drm.h
new file mode 100644
index 000000000000..356fc399accb
--- /dev/null
+++ b/drivers/gpu/drm/nvdla/nvdla_drm.h
@@ -0,0 +1,127 @@
+/* SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause */
+/*
+ * Copyright (C) 2017-2018 NVIDIA CORPORATION.
+ * Copyright (C) 2022 Cai Huoqing
+ */
+
+#ifndef __NVDLA_DRM_H_
+#define __NVDLA_DRM_H_
+
+#include <linux/completion.h>
+#include <linux/device.h>
+#include <linux/kref.h>
+#include <linux/platform_device.h>
+#include <linux/spinlock.h>
+#include <linux/errno.h>
+#include <linux/bits.h>
+#include <linux/types.h>
+
+#include "nvdla_engine.h"
+
+#define ASSERT_GOTO(_condition, _ret, _err_value, _goto)	   \
+do {														   \
+	if (!(_condition)) {									   \
+		_ret = _err_value;									   \
+		pr_err("%s:%d failed %d\n", __func__, __LINE__, _ret); \
+		goto _goto;											   \
+	} else {												   \
+		_ret = 0;											   \
+	}														   \
+} while (0)
+
+/**
+ * @brief			Task information submitted from user space
+ *
+ * ref				Reference count for task
+ * num_addresses		Number of addresses in address list
+ * nvdla_dev			Pointer to NVDLA device
+ * address_list			Address list
+ * file				DRM file instance
+ */
+struct nvdla_task {
+	struct kref ref;
+	uint32_t num_addresses;
+	struct nvdla_device *nvdla_dev;
+	struct nvdla_mem_handle *address_list;
+	struct drm_file *file;
+};
+
+/**
+ * @brief			Configuration parameters supported by the engine
+ *
+ * atom_size			Memory smallest access size
+ * bdma_enable			Defines whether bdma is supported
+ * rubik_enable			Defines whether rubik is supported
+ * weight_compress_support	Defines whether weight data compression is supported
+ */
+struct nvdla_config {
+	uint32_t atom_size;
+	bool bdma_enable;
+	bool rubik_enable;
+	bool weight_compress_support;
+};
+
+/**
+ * @brief			NVDLA device
+ *
+ * irq				Interrupt number associated with this device
+ * ref				Reference count for device
+ * base				IO mapped base address for device
+ * nvdla_lock			Spinlock used for synchronization
+ * drm				DRM device instance
+ * task				Pointer to task in execution
+ * config_data			Pointer to the configuration data
+ * pdev				Pointer to NVDLA platform device
+ * event_notifier		Completion object used to wait for events from HW
+ * engine_context		Private data passed from engine in dla_engine_init
+ */
+struct nvdla_device {
+	int32_t irq;
+	struct kref ref;
+	void __iomem *base;
+	spinlock_t nvdla_lock;
+	struct drm_device *drm;
+	struct nvdla_task *task;
+	struct nvdla_config *config_data;
+	struct platform_device *pdev;
+	struct completion event_notifier;
+
+	struct dla_engine *engine_context;
+};
+
+int32_t nvdla_task_submit(struct nvdla_device *nvdla_dev, struct nvdla_task *task);
+
+int32_t nvdla_gem_dma_addr(struct drm_device *dev, struct drm_file *file,
+					uint32_t fd, dma_addr_t *addr);
+
+int32_t nvdla_drm_probe(struct nvdla_device *nvdla_dev);
+
+void nvdla_drm_remove(struct nvdla_device *nvdla_dev);
+
+int32_t dla_process_events(struct dla_engine *engine_context, uint32_t *task_complete);
+
+void dla_clear_task(struct dla_engine *engine_context);
+
+int32_t dla_execute_task(struct dla_engine *engine_context, void *task_data, void *config_data);
+
+uint32_t dla_reg_read(void *driver_context, uint32_t addr);
+
+void dla_reg_write(void *driver_context, uint32_t addr, uint32_t reg);
+
+int32_t dla_data_read(void *driver_context, void *task_data,
+				uint64_t src, void *dst,
+				uint32_t size, uint64_t offset);
+
+int32_t dla_data_write(void *driver_context, void *task_data,
+				void *src, uint64_t dst,
+				uint32_t size, uint64_t offset);
+
+/* Destination for DMA buffer */
+#define DESTINATION_PROCESSOR	0
+#define DESTINATION_DMA		1
+
+int32_t dla_get_dma_address(void *driver_context, void *task_data,
+					int16_t index, void *dst_ptr,
+					uint32_t destination);
+
+#endif
diff --git a/drivers/gpu/drm/nvdla/nvdla_engine.c b/drivers/gpu/drm/nvdla/nvdla_engine.c
new file mode 100644
index 000000000000..26ebd6c362b0
--- /dev/null
+++ b/drivers/gpu/drm/nvdla/nvdla_engine.c
@@ -0,0 +1,233 @@
+// SPDX-License-Identifier: BSD-3-Clause OR GPL-2.0
+/*
+ * Copyright (C) 2017-2018 NVIDIA CORPORATION
+ * Copyright (C) 2022 Cai Huoqing
+ */
+
+#include "nvdla_common.h"
+#include "nvdla_drm.h"
+#include "nvdla_reg.h"
+#include "nvdla_engine.h"
+
+static const uint32_t map_rdma_ptr_addr[] = {
+	0xFFFFFFFF,
+	0xFFFFFFFF,
+	SDP_REG(RDMA_S_POINTER),
+	PDP_REG(RDMA_S_POINTER),
+	CDP_REG(RDMA_S_POINTER),
+	0xFFFFFFFF,
+};
+
+static const uint32_t map_sts_addr[] = {
+	BDMA_REG(STATUS),
+	CACC_REG(S_STATUS),
+	SDP_REG(S_STATUS),
+	PDP_REG(S_STATUS),
+	CDP_REG(S_STATUS),
+	RBK_REG(S_STATUS),
+};
+
+static const uint32_t map_ptr_addr[] = {
+	BDMA_REG(STATUS),
+	CACC_REG(S_POINTER),
+	SDP_REG(S_POINTER),
+	PDP_REG(S_POINTER),
+	CDP_REG(S_POINTER),
+	RBK_REG(S_POINTER),
+};
+
+uint32_t reg_read(struct dla_engine *engine, uint32_t addr)
+{
+	return dla_reg_read(engine->driver_context, addr);
+}
+
+void reg_write(struct dla_engine *engine, uint32_t addr, uint32_t reg)
+{
+	dla_reg_write(engine->driver_context, addr, reg);
+}
+
+int32_t dla_enable_intr(struct dla_engine *engine, uint32_t mask)
+{
+	uint32_t reg = glb_reg_read(engine, S_INTR_MASK);
+
+	reg = reg & (~mask);
+	glb_reg_write(engine, S_INTR_MASK, reg);
+
+	return 0;
+}
+
+uint8_t bdma_grp_sts[2] = {
+	FIELD_ENUM(BDMA_STATUS_0, IDLE, YES),
+	FIELD_ENUM(BDMA_STATUS_0, IDLE, YES)
+};
+
+struct dla_roi_desc roi_desc;
+
+/**
+ * Get DMA data cube address
+ */
+int32_t
+dla_get_dma_cube_address(void *driver_context, void *task_data,
+						 int16_t index, uint32_t offset, void *dst_ptr,
+						 uint32_t destination)
+{
+	int32_t ret = 0;
+	uint64_t *pdst = (uint64_t *)dst_ptr;
+       ret = dla_get_dma_address(driver_context, task_data, index,
+								dst_ptr, destination);
+	if (ret)
+		goto exit;
+
+	pdst[0] += offset;
+
+exit:
+	return ret;
+}
+
+/**
+ * Read input buffer address
+ *
+ * For input layer, in case of static ROI this address is read
+ * from address list and index is specified in data cube. In case
+ * dynamic ROI, it has to be read depending on ROI information
+ * and using surface address
+ *
+ * For all other layers, this address is read from address list
+ * using index specified in data cube
+ */
+int
+dla_read_input_address(struct dla_engine *engine, struct dla_data_cube *data,
+					   uint64_t *address, int16_t op_index,
+					   uint8_t roi_index, uint8_t bpp)
+{
+	uint64_t roi_desc_addr;
+	int32_t ret = -EINVAL;
+
+	/**
+	 * If memory type is HW then no address required
+	 */
+	if (data->type == DLA_MEM_HW) {
+		ret = 0;
+		goto exit;
+	}
+
+	/**
+	 * If address list index is not -1 means this address has to
+	 * be read from address list
+	 */
+	if (data->address != -1) {
+
+		/**
+		 * But if other parameters indicate that this is input layer
+		 * for dynamic ROI then it is an error
+		 */
+		if (engine->network->dynamic_roi &&
+			engine->network->input_layer == op_index)
+			goto exit;
+		ret = dla_get_dma_cube_address(engine->driver_context,
+						engine->task->task_data,
+						data->address,
+						data->offset,
+						(void *)address,
+						DESTINATION_DMA);
+		goto exit;
+	}
+
+	/**
+	 * Check if it is dynamic ROI and this is input layer
+	 */
+	if (engine->network->dynamic_roi && engine->network->input_layer == op_index) {
+		if (!engine->task->surface_addr)
+			goto exit;
+
+		/* Calculate address of ROI descriptor in array */
+		roi_desc_addr = engine->task->roi_array_addr;
+
+		/* Read ROI descriptor */
+		ret = dla_data_read(engine->driver_context,
+				engine->task->task_data,
+				roi_desc_addr,
+				(void *)&roi_desc,
+				sizeof(roi_desc),
+				sizeof(struct dla_roi_array_desc) +
+				roi_index * sizeof(struct dla_roi_desc));
+		if (ret)
+			goto exit;
+
+		/* Calculate ROI address */
+		*address = engine->task->surface_addr;
+		*address += (roi_desc.top * data->line_stride) +
+						(bpp * roi_desc.left);
+	}
+
+exit:
+	return ret;
+}
+
+int
+utils_get_free_group(struct dla_engine *engine, struct dla_processor *processor,
+					 uint8_t *group_id, uint8_t *rdma_id)
+{
+	int32_t ret = 0;
+	uint32_t pointer;
+	uint32_t hw_consumer_ptr;
+	uint32_t hw_rdma_ptr;
+
+	hw_rdma_ptr = 0;
+
+	if (processor->op_type == DLA_OP_BDMA) {
+		pointer = reg_read(engine, map_ptr_addr[processor->op_type]);
+		hw_consumer_ptr = ((pointer & MASK(BDMA_STATUS_0, GRP0_BUSY)) >>
+				SHIFT(BDMA_STATUS_0, GRP0_BUSY)) ==
+				FIELD_ENUM(BDMA_STATUS_0, GRP0_BUSY, YES) ?
+				1 : 0;
+	} else {
+		pointer = reg_read(engine, map_ptr_addr[processor->op_type]);
+		hw_consumer_ptr = (pointer & MASK(CDP_S_POINTER_0, CONSUMER)) >>
+				SHIFT(CDP_S_POINTER_0, CONSUMER);
+
+		/**
+		 * Read current consumer pointer for RDMA only if processor
+		 * has RDMA module
+		 */
+		if (map_rdma_ptr_addr[processor->op_type] != 0xFFFFFFFF) {
+			pointer =
+			reg_read(engine, map_rdma_ptr_addr[processor->op_type]);
+			hw_rdma_ptr = (pointer &
+					MASK(CDP_S_POINTER_0, CONSUMER)) >>
+					SHIFT(CDP_S_POINTER_0, CONSUMER);
+		}
+	}
+
+	/**
+	 * If both processors are programmed then exit
+	 */
+	if (processor->group_status == 0x3) {
+		ret = -EBUSY;
+		goto exit;
+	}
+
+	if (!processor->group_status)
+		/**
+		 * If both groups are idle then use consumer pointer
+		 */
+		*group_id = hw_consumer_ptr;
+	else
+		/**
+		 * Here it is assumed that only one group is idle or busy
+		 * and hence right shift will work to get correct
+		 * group id
+		 */
+		*group_id = !(processor->group_status >> 1);
+
+	/**
+	 * If both groups are idle then read group id from pointer
+	 */
+	if (!processor->rdma_status)
+		*rdma_id = hw_rdma_ptr;
+	else
+		*rdma_id = !(processor->rdma_status >> 1);
+
+exit:
+	return ret;
+}
diff --git a/drivers/gpu/drm/nvdla/nvdla_engine.h b/drivers/gpu/drm/nvdla/nvdla_engine.h
new file mode 100644
index 000000000000..1976f5919543
--- /dev/null
+++ b/drivers/gpu/drm/nvdla/nvdla_engine.h
@@ -0,0 +1,272 @@
+/* SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause */
+/*
+ * Copyright (C) 2017-2018 NVIDIA CORPORATION.
+ * Copyright (C) 2022 Cai Huoqing
+ */
+
+#ifndef __NVDLA_ENGINE_H_
+#define __NVDLA_ENGINE_H_
+
+#include "nvdla_common.h"
+#include "nvdla_sched.h"
+#include "nvdla_engine.h"
+#include "nvdla_reg.h"
+
+/*********************************************************/
+/******************** Utilities **************************/
+/*********************************************************/
+#define MASK(reg, field)		(reg##_##field##_FIELD)
+#define FIELD_ENUM(r, f, e)		(r##_##f##_##e)
+#define SHIFT(reg, field)		(reg##_##field##_SHIFT)
+
+#define GLB_REG(name)                GLB_##name##_0
+#define MCIF_REG(name)               MCIF_##name##_0
+#define CVIF_REG(name)               CVIF_##name##_0
+#define BDMA_REG(name)               BDMA_##name##_0
+#define CDMA_REG(name)               CDMA_##name##_0
+#define CSC_REG(name)                CSC_##name##_0
+#define CMAC_A_REG(name)             CMAC_A_##name##_0
+#define CMAC_B_REG(name)             CMAC_B_##name##_0
+#define CACC_REG(name)               CACC_##name##_0
+#define SDP_RDMA_REG(name)           SDP_RDMA_##name##_0
+#define SDP_REG(name)                SDP_##name##_0
+#define PDP_RDMA_REG(name)           PDP_RDMA_##name##_0
+#define PDP_REG(name)                PDP_##name##_0
+#define CDP_RDMA_REG(name)           CDP_RDMA_##name##_0
+#define CDP_REG(name)                CDP_##name##_0
+#define RBK_REG(name)                RBK_##name##_0
+
+/* alias for register read for each sub-module */
+#define glb_reg_read(engine, reg)           reg_read(engine, GLB_REG(reg))
+#define bdma_reg_read(engine, reg)          reg_read(engine, BDMA_REG(reg))
+#define cdma_reg_read(engine, reg)          reg_read(engine, CDMA_REG(reg))
+#define csc_reg_read(engine, reg)           reg_read(engine, CSC_REG(reg))
+#define cmac_a_reg_read(engine, reg)        reg_read(engine, CMAC_A_REG(reg))
+#define cmac_b_reg_read(engine, reg)        reg_read(engine, CMAC_B_REG(reg))
+#define cacc_reg_read(engine, reg)          reg_read(engine, CACC_REG(reg))
+#define sdp_rdma_reg_read(engine, reg)      reg_read(engine, SDP_RDMA_REG(reg))
+#define sdp_reg_read(engine, reg)           reg_read(engine, SDP_REG(reg))
+#define pdp_rdma_reg_read(engine, reg)      reg_read(engine, PDP_RDMA_REG(reg))
+#define pdp_reg_read(engine, reg)           reg_read(engine, PDP_REG(reg))
+#define cdp_rdma_reg_read(engine, reg)      reg_read(engine, CDP_RDMA_REG(reg))
+#define cdp_reg_read(engine, reg)           reg_read(engine, CDP_REG(reg))
+#define rubik_reg_read(engine, reg)         reg_read(engine, RBK_REG(reg))
+
+/* alias for register write for each sub-module */
+#define glb_reg_write(engine, reg, val)      reg_write(engine, GLB_REG(reg), val)
+#define bdma_reg_write(engine, reg, val)     reg_write(engine, BDMA_REG(reg), val)
+#define cdma_reg_write(engine, reg, val)     reg_write(engine, CDMA_REG(reg), val)
+#define csc_reg_write(engine, reg, val)      reg_write(engine, CSC_REG(reg), val)
+#define cmac_a_reg_write(engine, reg, val)   reg_write(engine, CMAC_A_REG(reg), val)
+#define cmac_b_reg_write(engine, reg, val)   reg_write(engine, CMAC_B_REG(reg), val)
+#define cacc_reg_write(engine, reg, val)     reg_write(engine, CACC_REG(reg), val)
+#define sdp_rdma_reg_write(engine, reg, val) reg_write(engine, SDP_RDMA_REG(reg), val)
+#define sdp_reg_write(engine, reg, val)      reg_write(engine, SDP_REG(reg), val)
+#define pdp_rdma_reg_write(engine, reg, val) reg_write(engine, PDP_RDMA_REG(reg), val)
+#define pdp_reg_write(engine, reg, val)      reg_write(engine, PDP_REG(reg), val)
+#define cdp_rdma_reg_write(engine, reg, val) reg_write(engine, CDP_RDMA_REG(reg), val)
+#define cdp_reg_write(engine, reg, val)      reg_write(engine, CDP_REG(reg), val)
+#define rubik_reg_write(engine, reg, val)    reg_write(engine, RBK_REG(reg), val)
+
+struct dla_processor_group {
+	uint8_t id;
+	uint8_t rdma_id;
+	uint8_t active;
+	uint8_t events;
+	uint8_t roi_index;
+	uint8_t is_rdma_needed;
+	uint8_t pending;
+	int32_t lut_index;
+	uint8_t programming;
+
+	struct dla_common_op_desc *op_desc;
+	struct dla_common_op_desc *consumers[DLA_OP_NUM];
+	struct dla_common_op_desc *fused_parent;
+	union dla_operation_container *operation_desc;
+	union dla_surface_container *surface_desc;
+};
+
+struct dla_processor {
+	const char *name;
+	uint8_t op_type;
+	uint8_t consumer_ptr;
+	uint8_t roi_index;
+	uint8_t group_status;
+	uint8_t rdma_status;
+	uint8_t last_group;
+
+	struct dla_common_op_desc *tail_op;
+	struct dla_processor_group groups[DLA_NUM_GROUPS];
+	struct dla_engine *engine;
+
+	int (*is_ready)(struct dla_processor *processor,
+				  struct dla_processor_group *group);
+	int (*enable)(struct dla_engine *engine, struct dla_processor_group *group);
+	int (*program)(struct dla_engine *engine, struct dla_processor_group *group);
+	void (*set_producer)(struct dla_engine *engine, int32_t group_id, int32_t rdma_id);
+	void (*dump_config)(struct dla_processor_group *group);
+	void (*rdma_check)(struct dla_processor_group *group);
+};
+
+struct dla_engine {
+	struct dla_task *task;
+	struct dla_config *config_data;
+	struct dla_network_desc *network;
+	struct dla_processor processors[DLA_OP_NUM];
+
+	uint16_t num_proc_hwl;
+	int32_t status;
+
+	void *driver_context;
+};
+
+void reg_write(struct dla_engine *engine, uint32_t addr, uint32_t reg);
+uint32_t reg_read(struct dla_engine *engine, uint32_t addr);
+
+/**
+ * Operation descriptor cache functions
+ */
+void
+dla_put_op_desc(struct dla_engine *engine, struct dla_common_op_desc *op_desc);
+struct dla_common_op_desc
+*dla_get_op_desc(struct dla_engine *engine, struct dla_task *task,
+			   int16_t index,
+			   uint8_t op_type,
+			   uint8_t roi_index);
+void
+dla_get_refcount(struct dla_common_op_desc *op_desc);
+void
+dla_init_op_cache(struct dla_engine *engine);
+
+/**
+ * Operation completion handler
+ */
+int
+dla_op_completion(struct dla_engine *engine, struct dla_processor *processor,
+		      struct dla_processor_group *group);
+
+int32_t
+dla_read_lut(struct dla_engine *engine, int16_t index, void *dst);
+int
+dla_enable_intr(struct dla_engine *engine, uint32_t mask);
+int
+utils_get_free_group(struct dla_engine *engine, struct dla_processor *processor,
+			uint8_t *group_id,
+			uint8_t *rdma_id);
+int32_t
+dla_get_dma_cube_address(void *driver_context,
+						void *task_data,
+						int16_t index,
+						uint32_t offset,
+						void *dst_ptr,
+						uint32_t destination);
+int
+dla_read_input_address(struct dla_engine *engine, struct dla_data_cube *data,
+		       uint64_t *address,
+		       int16_t op_index,
+		       uint8_t roi_index,
+		       uint8_t bpp);
+
+/**
+ * BDMA operations
+ */
+void
+dla_bdma_set_producer(struct dla_engine *engine, int32_t group_id, int32_t rdma_group_id);
+int
+dla_bdma_enable(struct dla_engine *engine, struct dla_processor_group *group);
+int
+dla_bdma_program(struct dla_engine *engine, struct dla_processor_group *group);
+int
+dla_bdma_is_ready(struct dla_processor *processor,
+			    struct dla_processor_group *group);
+void
+dla_bdma_dump_config(struct dla_processor_group *group);
+void
+dla_bdma_rdma_check(struct dla_processor_group *group);
+
+/**
+ * Convolution operations
+ */
+void
+dla_conv_set_producer(struct dla_engine *engine, int32_t group_id, int32_t rdma_group_id);
+int
+dla_conv_enable(struct dla_engine *engine, struct dla_processor_group *group);
+int
+dla_conv_program(struct dla_engine *engine, struct dla_processor_group *group);
+int
+dla_conv_is_ready(struct dla_processor *processor,
+			    struct dla_processor_group *group);
+void
+dla_conv_dump_config(struct dla_processor_group *group);
+void
+dla_conv_rdma_check(struct dla_processor_group *group);
+
+/**
+ * SDP operations
+ */
+void
+dla_sdp_set_producer(struct dla_engine *engine, int32_t group_id, int32_t rdma_group_id);
+int
+dla_sdp_enable(struct dla_engine *engine, struct dla_processor_group *group);
+int
+dla_sdp_program(struct dla_engine *engine, struct dla_processor_group *group);
+int
+dla_sdp_is_ready(struct dla_processor *processor,
+			   struct dla_processor_group *group);
+void
+dla_sdp_dump_config(struct dla_processor_group *group);
+void
+dla_sdp_rdma_check(struct dla_processor_group *group);
+
+/**
+ * PDP operations
+ */
+void
+dla_pdp_set_producer(struct dla_engine *engine, int32_t group_id, int32_t rdma_group_id);
+int
+dla_pdp_enable(struct dla_engine *engine, struct dla_processor_group *group);
+int
+dla_pdp_program(struct dla_engine *engine, struct dla_processor_group *group);
+int
+dla_pdp_is_ready(struct dla_processor *processor,
+			   struct dla_processor_group *group);
+void
+dla_pdp_dump_config(struct dla_processor_group *group);
+void
+dla_pdp_rdma_check(struct dla_processor_group *group);
+
+/**
+ * CDP operations
+ */
+void
+dla_cdp_set_producer(struct dla_engine *engine, int32_t group_id, int32_t rdma_group_id);
+int
+dla_cdp_enable(struct dla_engine *engine, struct dla_processor_group *group);
+int
+dla_cdp_program(struct dla_engine *engine, struct dla_processor_group *group);
+int
+dla_cdp_is_ready(struct dla_processor *processor,
+			   struct dla_processor_group *group);
+void
+dla_cdp_dump_config(struct dla_processor_group *group);
+void
+dla_cdp_rdma_check(struct dla_processor_group *group);
+
+/**
+ * RUBIK operations
+ */
+void
+dla_rubik_set_producer(struct dla_engine *engine, int32_t group_id, int32_t rdma_group_id);
+int
+dla_rubik_enable(struct dla_engine *engine, struct dla_processor_group *group);
+int
+dla_rubik_program(struct dla_engine *engine, struct dla_processor_group *group);
+int
+dla_rubik_is_ready(struct dla_processor *processor,
+			     struct dla_processor_group *group);
+void
+dla_rubik_dump_config(struct dla_processor_group *group);
+void
+dla_rubik_rdma_check(struct dla_processor_group *group);
+
+#endif
diff --git a/drivers/gpu/drm/nvdla/nvdla_gem.c b/drivers/gpu/drm/nvdla/nvdla_gem.c
new file mode 100644
index 000000000000..cccf6d01a564
--- /dev/null
+++ b/drivers/gpu/drm/nvdla/nvdla_gem.c
@@ -0,0 +1,393 @@
+// SPDX-License-Identifier: BSD-3-Clause OR GPL-2.0
+/*
+ * Copyright (C) 2017-2018 NVIDIA CORPORATION
+ * Copyright (C) 2022 Cai Huoqing
+ */
+
+#include <linux/dma-buf.h>
+#include <drm/drm_drv.h>
+#include <drm/drm_gem_cma_helper.h>
+
+#include "nvdla_drm.h"
+#include "nvdla_ioctl.h"
+
+#define to_nvdla_obj(x) container_of(x, struct nvdla_gem_object, object)
+
+struct nvdla_gem_object {
+	struct drm_gem_object object;
+
+	void *kvaddr;
+	dma_addr_t dma_addr;
+	unsigned long dma_attrs;
+};
+
+static int32_t nvdla_fill_task_desc(struct nvdla_ioctl_submit_task *local_task,
+				struct nvdla_task *task)
+{
+	struct nvdla_mem_handle *handles;
+
+	/* update task desc fields */
+	task->num_addresses = local_task->num_addresses;
+
+	handles = kzalloc(local_task->num_addresses * sizeof(struct nvdla_mem_handle),
+					  GFP_KERNEL);
+	if (handles == NULL)
+		return -EFAULT;
+
+	/* get user addresses list */
+	if (copy_from_user(handles,
+		(void __user *)local_task->address_list,
+		(task->num_addresses *
+			sizeof(struct nvdla_mem_handle)))) {
+		pr_err("failed to copy address list from user ptr\n");
+		kfree(handles);
+		return -EFAULT;
+	}
+
+	task->address_list = handles;
+
+	return 0;
+}
+
+static int32_t nvdla_submit(struct drm_device *drm, void *arg,
+					struct drm_file *file)
+{
+	int32_t err = 0;
+	struct nvdla_task *task;
+	struct nvdla_ioctl_submit_task local_task;
+	struct nvdla_ioctl_submit_task __user *user_task;
+	struct nvdla_device *nvdla_dev = dev_get_drvdata(drm->dev);
+	struct nvdla_submit_args *args =
+			(struct nvdla_submit_args *)arg;
+
+	user_task = (struct nvdla_ioctl_submit_task __user *)
+			(uintptr_t)args->tasks;
+	if (!user_task)
+		return -EINVAL;
+
+	/* IOCTL copy descriptors */
+	if (copy_from_user(&local_task, (void __user *)user_task,
+			(sizeof(*user_task))))
+		return -EFAULT;
+
+	task = kzalloc(sizeof(*task), GFP_KERNEL);
+	if (task == NULL)
+		return -EFAULT;
+
+	nvdla_dev->task = task;
+	kref_init(&task->ref);
+	task->nvdla_dev = nvdla_dev;
+	task->file = file;
+
+	/* update task desc fields */
+	err = nvdla_fill_task_desc(&local_task, task);
+	if (err)
+		goto free_task_desc;
+
+	err = nvdla_task_submit(nvdla_dev, task);
+
+	kfree(task->address_list);
+
+free_task_desc:
+	kfree(task);
+	return err;
+}
+
+static int32_t nvdla_gem_alloc(struct nvdla_gem_object *nobj)
+{
+	struct drm_gem_object *dobj = &nobj->object;
+	struct drm_device *drm = dobj->dev;
+
+	nobj->dma_attrs = DMA_ATTR_WRITE_COMBINE;
+
+	nobj->kvaddr = dma_alloc_attrs(drm->dev, dobj->size, &nobj->dma_addr,
+						GFP_KERNEL, nobj->dma_attrs);
+
+	if (!nobj->kvaddr)
+		return -ENOMEM;
+
+	return 0;
+}
+
+static void nvdla_gem_free(struct nvdla_gem_object *nobj)
+{
+	struct drm_gem_object *dobj = &nobj->object;
+	struct drm_device *drm = dobj->dev;
+
+	dma_free_attrs(drm->dev, dobj->size, nobj->kvaddr, nobj->dma_addr,
+				nobj->dma_attrs);
+}
+
+static void nvdla_gem_free_object(struct drm_gem_object *dobj)
+{
+	struct nvdla_gem_object *nobj;
+
+	drm_gem_free_mmap_offset(dobj);
+
+	nobj = to_nvdla_obj(dobj);
+
+	nvdla_gem_free(nobj);
+
+	kfree(nobj);
+}
+
+static struct nvdla_gem_object *
+nvdla_gem_create_object(struct drm_device *drm, uint32_t size)
+{
+	int32_t ret;
+	struct drm_gem_object *dobj;
+	struct nvdla_gem_object *nobj;
+
+	size = round_up(size, PAGE_SIZE);
+
+	nobj = kzalloc(sizeof(*nobj), GFP_KERNEL);
+	if (!nobj)
+		return ERR_PTR(-ENOMEM);
+
+	dobj = &nobj->object;
+
+	drm_gem_private_object_init(drm, dobj, size);
+
+	ret = nvdla_gem_alloc(nobj);
+	if (ret)
+		goto free_nvdla_obj;
+
+	return nobj;
+
+free_nvdla_obj:
+	kfree(nobj);
+	return ERR_PTR(ret);
+}
+
+static struct sg_table*
+nvdla_drm_gem_prime_get_sg_table(struct drm_gem_object *dobj)
+{
+	int32_t ret;
+	struct sg_table *sgt;
+	struct drm_device *drm = dobj->dev;
+	struct nvdla_gem_object *nobj = to_nvdla_obj(dobj);
+
+	sgt = kzalloc(sizeof(*sgt), GFP_KERNEL);
+	if (!sgt)
+		return ERR_PTR(-ENOMEM);
+
+	ret = dma_get_sgtable_attrs(drm->dev, sgt, nobj->kvaddr,
+				    nobj->dma_addr, dobj->size,
+				    nobj->dma_attrs);
+	if (ret) {
+		DRM_ERROR("failed to allocate sgt, %d\n", ret);
+		kfree(sgt);
+		return ERR_PTR(ret);
+	}
+
+	return sgt;
+}
+
+static int nvdla_drm_gem_prime_vmap(struct drm_gem_object *obj, struct iosys_map *map)
+{
+	struct nvdla_gem_object *nobj = to_nvdla_obj(obj);
+
+	map->vaddr = nobj->kvaddr;
+
+	return 0;
+}
+
+static void nvdla_drm_gem_prime_vunmap(struct drm_gem_object *obj, struct iosys_map *map)
+{
+	/* Nothing to do */
+}
+
+static int32_t nvdla_drm_gem_object_mmap(struct drm_gem_object *dobj,
+					struct vm_area_struct *vma)
+{
+	int32_t ret;
+	struct nvdla_gem_object *nobj = to_nvdla_obj(dobj);
+	struct drm_device *drm = dobj->dev;
+
+	vma->vm_flags &= ~VM_PFNMAP;
+	vma->vm_pgoff = 0;
+
+	ret = dma_mmap_attrs(drm->dev, vma, nobj->kvaddr, nobj->dma_addr,
+			     dobj->size, nobj->dma_attrs);
+	if (ret)
+		drm_gem_vm_close(vma);
+
+	return ret;
+}
+
+static const struct drm_gem_object_funcs nvdla_gem_object_funcs = {
+	.free = nvdla_gem_free_object,
+	.get_sg_table = nvdla_drm_gem_prime_get_sg_table,
+	.vmap = nvdla_drm_gem_prime_vmap,
+	.vunmap = nvdla_drm_gem_prime_vunmap,
+	.mmap = nvdla_drm_gem_object_mmap,
+};
+
+static struct nvdla_gem_object*
+nvdla_gem_create_with_handle(struct drm_file *file_priv,
+							 struct drm_device *drm, uint32_t size,
+							 uint32_t *handle)
+{
+	int32_t ret;
+	struct drm_gem_object *dobj;
+	struct nvdla_gem_object *nobj;
+
+	nobj = nvdla_gem_create_object(drm, size);
+	if (IS_ERR(nobj))
+		return ERR_CAST(nobj);
+
+	dobj = &nobj->object;
+	dobj->funcs = &nvdla_gem_object_funcs;
+	ret = drm_gem_handle_create(file_priv, dobj, handle);
+	if (ret)
+		goto free_drm_object;
+
+	drm_gem_object_put(dobj);
+
+	return nobj;
+
+free_drm_object:
+	nvdla_gem_free_object(dobj);
+
+	return ERR_PTR(ret);
+}
+
+static int32_t nvdla_gem_create(struct drm_device *drm, void *data,
+								struct drm_file *file)
+{
+	struct nvdla_gem_object *nobj;
+	struct nvdla_gem_create_args *args = data;
+
+	nobj = nvdla_gem_create_with_handle(file, drm, args->size,
+					 &args->handle);
+	if (IS_ERR(nobj))
+		return PTR_ERR(nobj);
+
+	return 0;
+}
+
+static int32_t nvdla_drm_gem_mmap_buf(struct drm_gem_object *obj,
+									  struct vm_area_struct *vma)
+{
+	int32_t ret;
+
+	ret = drm_gem_mmap_obj(obj, obj->size, vma);
+	if (ret)
+		return ret;
+
+	return nvdla_drm_gem_object_mmap(obj, vma);
+}
+
+static int32_t nvdla_drm_gem_mmap(struct file *filp, struct vm_area_struct *vma)
+{
+	int32_t ret;
+	struct drm_gem_object *obj;
+
+	ret = drm_gem_mmap(filp, vma);
+	if (ret)
+		return ret;
+
+	obj = vma->vm_private_data;
+
+	return nvdla_drm_gem_object_mmap(obj, vma);
+}
+
+int32_t nvdla_gem_dma_addr(struct drm_device *dev, struct drm_file *file,
+						   uint32_t fd, dma_addr_t *addr)
+{
+	int32_t ret;
+	uint32_t handle;
+	struct nvdla_gem_object *nobj;
+	struct drm_gem_object *dobj;
+
+	ret = drm_gem_prime_fd_to_handle(dev, file, fd, &handle);
+	if (ret)
+		return ret;
+
+	dobj = drm_gem_object_lookup(file, handle);
+	if (!dobj)
+		return -EINVAL;
+
+	nobj = to_nvdla_obj(dobj);
+
+	*addr = nobj->dma_addr;
+
+	drm_gem_object_put(dobj);
+
+	return 0;
+}
+
+static int32_t nvdla_gem_map_offset(struct drm_device *drm, void *data,
+									struct drm_file *file)
+{
+	struct nvdla_gem_map_offset_args *args = data;
+
+	return drm_gem_dumb_map_offset(file, drm, args->handle,
+								   &args->offset);
+}
+
+static const struct file_operations nvdla_drm_fops = {
+	.owner = THIS_MODULE,
+	.open = drm_open,
+	.release = drm_release,
+	.unlocked_ioctl = drm_ioctl,
+	.mmap = nvdla_drm_gem_mmap,
+	.poll = drm_poll,
+	.read = drm_read,
+#ifdef CONFIG_COMPAT
+	.compat_ioctl = drm_compat_ioctl,
+#endif
+	.llseek = noop_llseek,
+};
+
+static const struct drm_ioctl_desc nvdla_drm_ioctls[] = {
+	DRM_IOCTL_DEF_DRV(NVDLA_SUBMIT, nvdla_submit, DRM_RENDER_ALLOW),
+	DRM_IOCTL_DEF_DRV(NVDLA_GEM_CREATE, nvdla_gem_create, DRM_RENDER_ALLOW),
+	DRM_IOCTL_DEF_DRV(NVDLA_GEM_MMAP, nvdla_gem_map_offset, DRM_RENDER_ALLOW),
+	/* use DRM_IOCTL_MODE_DESTROY_DUMB to destory */
+};
+
+static struct drm_driver nvdla_drm_driver = {
+	.driver_features = DRIVER_GEM | DRIVER_RENDER,
+
+	.ioctls = nvdla_drm_ioctls,
+	.num_ioctls = ARRAY_SIZE(nvdla_drm_ioctls),
+	.fops = &nvdla_drm_fops,
+	.gem_prime_mmap		= nvdla_drm_gem_mmap_buf,
+
+	.name = "nvdla",
+	.desc = "NVDLA driver",
+	.date = "20171017",
+	.major = 0,
+	.minor = 0,
+	.patchlevel = 0,
+};
+
+int32_t nvdla_drm_probe(struct nvdla_device *nvdla_dev)
+{
+	int32_t err;
+	struct drm_device *drm;
+	struct drm_driver *driver = &nvdla_drm_driver;
+
+	drm = drm_dev_alloc(driver, &nvdla_dev->pdev->dev);
+	if (IS_ERR(drm))
+		return PTR_ERR(drm);
+
+	nvdla_dev->drm = drm;
+
+	err = drm_dev_register(drm, 0);
+	if (err < 0)
+		goto unref;
+
+	return 0;
+
+unref:
+	drm_dev_put(drm);
+	return err;
+}
+
+void nvdla_drm_remove(struct nvdla_device *nvdla_dev)
+{
+	drm_dev_unregister(nvdla_dev->drm);
+	drm_dev_put(nvdla_dev->drm);
+}
diff --git a/drivers/gpu/drm/nvdla/nvdla_ioctl.h b/drivers/gpu/drm/nvdla/nvdla_ioctl.h
new file mode 100644
index 000000000000..e21d4007b7f4
--- /dev/null
+++ b/drivers/gpu/drm/nvdla/nvdla_ioctl.h
@@ -0,0 +1,99 @@
+/* SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause */
+/*
+ * Copyright (C) 2017-2018 NVIDIA CORPORATION.
+ * Copyright (C) 2022 Cai Huoqing
+ */
+
+#ifndef __LINUX_NVDLA_IOCTL_H
+#define __LINUX_NVDLA_IOCTL_H
+
+#include <linux/ioctl.h>
+#include <linux/types.h>
+
+#if !defined(__KERNEL__)
+#define __user
+#endif
+
+/**
+ * struct nvdla_mem_handle structure for memory handles
+ *
+ * @handle		handle to DMA buffer allocated in userspace
+ * @reserved		Reserved for padding
+ * @offset		offset in bytes from start address of buffer
+ *
+ */
+struct nvdla_mem_handle {
+	__u32 handle;
+	__u32 reserved;
+	__u64 offset;
+};
+
+/**
+ * struct nvdla_ioctl_submit_task structure for single task information
+ *
+ * @num_addresses		total number of entries in address_list
+ * @reserved			Reserved for padding
+ * @address_list		pointer to array of struct nvdla_mem_handle
+ *
+ */
+struct nvdla_ioctl_submit_task {
+#define NVDLA_MAX_BUFFERS_PER_TASK (6144)
+	__u32 num_addresses;
+#define NVDLA_NO_TIMEOUT    (0xffffffff)
+	__u32 timeout;
+	__u64 address_list;
+};
+
+/**
+ * struct nvdla_submit_args structure for task submit
+ *
+ * @tasks		pointer to array of struct nvdla_ioctl_submit_task
+ * @num_tasks		number of entries in tasks
+ * @flags		flags for task submit, no flags defined yet
+ * @version		version of task structure
+ *
+ */
+struct nvdla_submit_args {
+	__u64 tasks;
+	__u16 num_tasks;
+#define NVDLA_MAX_TASKS_PER_SUBMIT	24
+#define NVDLA_SUBMIT_FLAGS_ATOMIC	(1 << 0)
+	__u16 flags;
+	__u32 version;
+};
+
+/**
+ * struct nvdla_gem_create_args for allocating DMA buffer through GEM
+ *
+ * @handle		handle updated by kernel after allocation
+ * @flags		implementation specific flags
+ * @size		size of buffer to allocate
+ */
+struct nvdla_gem_create_args {
+	__u32 handle;
+	__u32 flags;
+	__u64 size;
+};
+
+/**
+ * struct nvdla_gem_map_offset_args for mapping DMA buffer
+ *
+ * @handle		handle of the buffer
+ * @reserved		reserved for padding
+ * @offset		offset updated by kernel after mapping
+ */
+struct nvdla_gem_map_offset_args {
+	__u32 handle;
+	__u32 reserved;
+	__u64 offset;
+};
+
+#define DRM_NVDLA_SUBMIT		0x00
+#define DRM_NVDLA_GEM_CREATE		0x01
+#define DRM_NVDLA_GEM_MMAP		0x02
+
+#define DRM_IOCTL_NVDLA_SUBMIT DRM_IOWR(DRM_COMMAND_BASE + DRM_NVDLA_SUBMIT, struct nvdla_submit_args)
+#define DRM_IOCTL_NVDLA_GEM_CREATE DRM_IOWR(DRM_COMMAND_BASE + DRM_NVDLA_GEM_CREATE, struct nvdla_gem_create_args)
+#define DRM_IOCTL_NVDLA_GEM_MMAP DRM_IOWR(DRM_COMMAND_BASE + DRM_NVDLA_GEM_MMAP, struct nvdla_gem_map_offset_args)
+
+#endif
diff --git a/drivers/gpu/drm/nvdla/nvdla_pdp.c b/drivers/gpu/drm/nvdla/nvdla_pdp.c
new file mode 100644
index 000000000000..2ed0ac0f021a
--- /dev/null
+++ b/drivers/gpu/drm/nvdla/nvdla_pdp.c
@@ -0,0 +1,446 @@
+// SPDX-License-Identifier: BSD-3-Clause OR GPL-2.0
+/*
+ * Copyright (C) 2017-2018 NVIDIA CORPORATION
+ * Copyright (C) 2022 Cai Huoqing
+ */
+
+#include "nvdla_drm.h"
+#include "nvdla_reg.h"
+#include "nvdla_common.h"
+#include "nvdla_engine.h"
+
+#define MAX_SPLIT_NUM	64
+//#define ARRAY_SIZE(a)	(sizeof(a) / sizeof((a[0])))
+
+static const uint8_t map_ram[] = {
+	FIELD_ENUM(PDP_RDMA_D_SRC_RAM_CFG_0, SRC_RAM_TYPE, MC),
+	FIELD_ENUM(PDP_RDMA_D_SRC_RAM_CFG_0, SRC_RAM_TYPE, CV),
+};
+
+static const uint8_t map_pool[] = {
+	FIELD_ENUM(PDP_D_OPERATION_MODE_CFG_0,
+			POOLING_METHOD, POOLING_METHOD_AVERAGE),
+	FIELD_ENUM(PDP_D_OPERATION_MODE_CFG_0,
+			POOLING_METHOD, POOLING_METHOD_MAX),
+	FIELD_ENUM(PDP_D_OPERATION_MODE_CFG_0,
+			POOLING_METHOD, POOLING_METHOD_MIN),
+};
+
+static const uint8_t map_precision[] = {
+	FIELD_ENUM(PDP_D_DATA_FORMAT_0, INPUT_DATA, INT8),
+	FIELD_ENUM(PDP_D_DATA_FORMAT_0, INPUT_DATA, INT16),
+	FIELD_ENUM(PDP_D_DATA_FORMAT_0, INPUT_DATA, FP16),
+};
+
+static const uint8_t map_pool_kernel[] = {
+	FIELD_ENUM(PDP_D_POOLING_KERNEL_CFG_0, KERNEL_WIDTH, KERNEL_WIDTH_1),
+	FIELD_ENUM(PDP_D_POOLING_KERNEL_CFG_0, KERNEL_WIDTH, KERNEL_WIDTH_2),
+	FIELD_ENUM(PDP_D_POOLING_KERNEL_CFG_0, KERNEL_WIDTH, KERNEL_WIDTH_3),
+	FIELD_ENUM(PDP_D_POOLING_KERNEL_CFG_0, KERNEL_WIDTH, KERNEL_WIDTH_4),
+	FIELD_ENUM(PDP_D_POOLING_KERNEL_CFG_0, KERNEL_WIDTH, KERNEL_WIDTH_5),
+	FIELD_ENUM(PDP_D_POOLING_KERNEL_CFG_0, KERNEL_WIDTH, KERNEL_WIDTH_6),
+	FIELD_ENUM(PDP_D_POOLING_KERNEL_CFG_0, KERNEL_WIDTH, KERNEL_WIDTH_7),
+	FIELD_ENUM(PDP_D_POOLING_KERNEL_CFG_0, KERNEL_WIDTH, KERNEL_WIDTH_8),
+};
+
+/* The reciprocal of kernel width: 1/1, 1/2, 1/3, ... */
+static const uint32_t recip_kernel_size[2][8] = {
+	/*
+	 * INT8/16
+	 * 1      1/2     1/3     1/4     1/5     1/6     1/7     1/8
+	 */
+	{0x10000, 0x8000, 0x5555, 0x4000, 0x3333, 0x2aaa, 0x2492, 0x2000},
+	{0x7c00, 0x7800, 0x7555,  0x7400, 0x7266, 0x7155, 0x7092, 0x7000},
+};
+
+static uint32_t
+get_fly_mode(uint8_t type)
+{
+	uint32_t val;
+
+	val = type == DLA_MEM_HW ?
+			FIELD_ENUM(PDP_D_OPERATION_MODE_CFG_0,
+						FLYING_MODE, ON_FLYING) :
+			FIELD_ENUM(PDP_D_OPERATION_MODE_CFG_0,
+						FLYING_MODE, OFF_FLYING);
+
+	return val;
+}
+
+void
+dla_pdp_set_producer(struct dla_engine *engine, int32_t group_id, int32_t rdma_group_id)
+{
+	uint32_t reg;
+
+	pr_debug("group id %d rdma id %d\n", group_id, rdma_group_id);
+
+	reg = group_id << SHIFT(PDP_S_POINTER_0, PRODUCER);
+	pdp_reg_write(engine, S_POINTER, reg);
+
+	reg = rdma_group_id << SHIFT(PDP_RDMA_S_POINTER_0, PRODUCER);
+	pdp_rdma_reg_write(engine, S_POINTER, reg);
+}
+
+int
+dla_pdp_enable(struct dla_engine *engine, struct dla_processor_group *group)
+{
+	int32_t ret = 0;
+	uint32_t reg;
+
+	if (!group) {
+		ret = -EINVAL;
+		goto exit;
+	}
+
+	pr_debug("rdma needed %u\n", group->is_rdma_needed);
+
+	/**
+	 * enable all sub-modules
+	 */
+	if (group->is_rdma_needed) {
+		reg = FIELD_ENUM(PDP_RDMA_D_OP_ENABLE_0, OP_EN, ENABLE);
+		pdp_rdma_reg_write(engine, D_OP_ENABLE, reg);
+	}
+	reg = FIELD_ENUM(PDP_D_OP_ENABLE_0, OP_EN, ENABLE);
+	pdp_reg_write(engine, D_OP_ENABLE, reg);
+
+exit:
+	return ret;
+}
+
+void
+dla_pdp_rdma_check(struct dla_processor_group *group)
+{
+	struct dla_pdp_surface_desc *pdp_surface;
+
+	pdp_surface = &group->surface_desc->pdp_surface;
+
+	group->is_rdma_needed = 0;
+
+	if (pdp_surface->src_data.type != DLA_MEM_HW)
+		group->is_rdma_needed = 1;
+}
+
+static int
+validate_strides(uint8_t stride_x, uint8_t stride_y)
+{
+	int32_t ret = 0;
+
+	if (stride_x < 1 || stride_y < 1 || stride_x > 8 || stride_y > 8) {
+		pr_err("Invalid Stride (x[%d], y[%d])\n", stride_x, stride_y);
+		ret = -EINVAL;
+	}
+
+	return ret;
+}
+
+static int
+vaildate_pdp_configs(struct dla_processor_group *group)
+{
+	int32_t ret = 0;
+	struct dla_pdp_op_desc *pdp_op;
+	struct dla_pdp_surface_desc *pdp_surface;
+
+	pdp_op = &group->operation_desc->pdp_op;
+	pdp_surface = &group->surface_desc->pdp_surface;
+
+	if (pdp_surface->dst_data.type == DLA_MEM_HW) {
+		pr_err("Destination buffer for PDP has to be either MC or CV");
+		ret = -EINVAL;
+		goto exit;
+	}
+
+	ret = validate_data_cube(pdp_surface->src_data, pdp_surface->dst_data,
+								DLA_MEM_HW);
+	if (ret)
+		goto exit;
+
+	ret = validate_precision(pdp_op->precision, ARRAY_SIZE(map_precision));
+	if (ret)
+		goto exit;
+
+	ret = validate_strides(pdp_op->stride_x, pdp_op->stride_y);
+	if (ret)
+		goto exit;
+
+	if (pdp_op->split_num > MAX_SPLIT_NUM) {
+		pr_err("Invalid split_num: %u\n", pdp_op->split_num);
+		ret = -EINVAL;
+		goto exit;
+	}
+
+	if (pdp_op->pool_width >= ARRAY_SIZE(map_pool_kernel)) {
+		pr_err("Invalid pool_width: %u\n", pdp_op->pool_width);
+		ret = -EINVAL;
+		goto exit;
+	}
+
+	if (pdp_op->pool_height >= ARRAY_SIZE(map_pool_kernel)) {
+		pr_err("Invalid pool_height: %u\n", pdp_op->pool_height);
+		ret = -EINVAL;
+		goto exit;
+	}
+
+	if (pdp_op->pool_mode >= ARRAY_SIZE(map_pool)) {
+		pr_err("Invalid pool_mode: %u\n", pdp_op->pool_mode);
+		ret = -EINVAL;
+		goto exit;
+	}
+
+exit:
+	return ret;
+}
+
+static int
+processor_pdp_program(struct dla_engine *engine, struct dla_processor_group *group)
+{
+	int32_t ret = 0;
+	uint32_t reg, high, low;
+	uint64_t input_address = 0;
+	uint64_t output_address = 0;
+	struct dla_pdp_op_desc *pdp_op;
+	struct dla_pdp_surface_desc *pdp_surface;
+
+	pdp_op = &group->operation_desc->pdp_op;
+	pdp_surface = &group->surface_desc->pdp_surface;
+
+	ret = vaildate_pdp_configs(group);
+	if (ret)
+		goto exit;
+
+	ret = dla_read_input_address(engine, &pdp_surface->src_data,
+					&input_address,
+					group->op_desc->index,
+					group->roi_index,
+					1);
+	if (ret)
+		goto exit;
+
+	if (pdp_surface->dst_data.address != -1)
+		dla_get_dma_cube_address(engine->driver_context,
+					engine->task->task_data,
+					pdp_surface->dst_data.address,
+					pdp_surface->dst_data.offset,
+					(void *)&output_address,
+					DESTINATION_DMA);
+
+	if (pdp_surface->src_data.type != DLA_MEM_HW) {
+		/* PDP RDMA */
+		pdp_rdma_reg_write(engine, D_DATA_CUBE_IN_WIDTH,
+				pdp_surface->src_data.width - 1);
+		pdp_rdma_reg_write(engine, D_DATA_CUBE_IN_HEIGHT,
+				pdp_surface->src_data.height - 1);
+		pdp_rdma_reg_write(engine, D_DATA_CUBE_IN_CHANNEL,
+				pdp_surface->src_data.channel - 1);
+
+		high = upper_32_bits(input_address);
+		low  = lower_32_bits(input_address);
+		pdp_rdma_reg_write(engine, D_SRC_BASE_ADDR_HIGH, high);
+		pdp_rdma_reg_write(engine, D_SRC_BASE_ADDR_LOW, low);
+		pdp_rdma_reg_write(engine, D_SRC_LINE_STRIDE,
+				pdp_surface->src_data.line_stride);
+		pdp_rdma_reg_write(engine, D_SRC_SURFACE_STRIDE,
+				pdp_surface->src_data.surf_stride);
+
+		reg = (map_precision[pdp_op->precision]
+			<< SHIFT(PDP_RDMA_D_DATA_FORMAT_0, INPUT_DATA));
+		pdp_rdma_reg_write(engine, D_DATA_FORMAT, reg);
+
+		reg = map_ram[pdp_surface->src_data.type]
+			<< SHIFT(PDP_RDMA_D_SRC_RAM_CFG_0, SRC_RAM_TYPE);
+		pdp_rdma_reg_write(engine, D_SRC_RAM_CFG, reg);
+
+		reg = ((pdp_op->split_num - 1)
+			 << SHIFT(PDP_RDMA_D_OPERATION_MODE_CFG_0, SPLIT_NUM));
+		pdp_rdma_reg_write(engine, D_OPERATION_MODE_CFG, reg);
+
+		reg = (map_pool_kernel[pdp_op->pool_width]
+			<< SHIFT(PDP_RDMA_D_POOLING_KERNEL_CFG_0,
+							KERNEL_WIDTH)) |
+			((pdp_op->stride_x - 1)
+			<< SHIFT(PDP_RDMA_D_POOLING_KERNEL_CFG_0,
+							KERNEL_STRIDE_WIDTH));
+		pdp_rdma_reg_write(engine, D_POOLING_KERNEL_CFG, reg);
+
+		reg = (pdp_op->pad_left
+			<< SHIFT(PDP_RDMA_D_POOLING_PADDING_CFG_0, PAD_WIDTH));
+		pdp_rdma_reg_write(engine, D_POOLING_PADDING_CFG, reg);
+
+		reg = ((pdp_op->partial_in_width_first == 0 ? 0 :
+				pdp_op->partial_in_width_first - 1)
+			<< SHIFT(PDP_RDMA_D_PARTIAL_WIDTH_IN_0,
+				PARTIAL_WIDTH_IN_FIRST)) |
+			((pdp_op->partial_in_width_mid == 0 ? 0 :
+				pdp_op->partial_in_width_mid - 1)
+			<< SHIFT(PDP_RDMA_D_PARTIAL_WIDTH_IN_0,
+				PARTIAL_WIDTH_IN_MID)) |
+			((pdp_op->partial_in_width_last == 0 ? 0 :
+				pdp_op->partial_in_width_last - 1)
+			<< SHIFT(PDP_RDMA_D_PARTIAL_WIDTH_IN_0,
+				PARTIAL_WIDTH_IN_LAST));
+		pdp_rdma_reg_write(engine, D_PARTIAL_WIDTH_IN, reg);
+	} else {
+		ASSERT_GOTO(pdp_op->split_num == 1, ret,
+					-EINVAL, exit);
+	}
+
+	reg = ((pdp_surface->src_data.width - 1)
+		<< SHIFT(PDP_D_DATA_CUBE_IN_WIDTH_0, CUBE_IN_WIDTH));
+	pdp_reg_write(engine, D_DATA_CUBE_IN_WIDTH, reg);
+
+	reg = ((pdp_surface->src_data.height - 1)
+		<< SHIFT(PDP_D_DATA_CUBE_IN_HEIGHT_0, CUBE_IN_HEIGHT));
+	pdp_reg_write(engine, D_DATA_CUBE_IN_HEIGHT, reg);
+
+	reg = ((pdp_surface->src_data.channel - 1)
+		<< SHIFT(PDP_D_DATA_CUBE_IN_CHANNEL_0, CUBE_IN_CHANNEL));
+	pdp_reg_write(engine, D_DATA_CUBE_IN_CHANNEL, reg);
+
+	reg = ((pdp_surface->dst_data.width - 1)
+		<< SHIFT(PDP_D_DATA_CUBE_OUT_WIDTH_0, CUBE_OUT_WIDTH));
+	pdp_reg_write(engine, D_DATA_CUBE_OUT_WIDTH, reg);
+
+	reg = ((pdp_surface->dst_data.height - 1)
+		<< SHIFT(PDP_D_DATA_CUBE_OUT_HEIGHT_0, CUBE_OUT_HEIGHT));
+	pdp_reg_write(engine, D_DATA_CUBE_OUT_HEIGHT, reg);
+
+	reg = ((pdp_surface->dst_data.channel - 1)
+		<< SHIFT(PDP_D_DATA_CUBE_OUT_CHANNEL_0, CUBE_OUT_CHANNEL));
+	pdp_reg_write(engine, D_DATA_CUBE_OUT_CHANNEL, reg);
+
+	reg = (map_pool[pdp_op->pool_mode]
+		<< SHIFT(PDP_D_OPERATION_MODE_CFG_0, POOLING_METHOD)) |
+		(get_fly_mode(pdp_surface->src_data.type)
+		<< SHIFT(PDP_D_OPERATION_MODE_CFG_0, FLYING_MODE)) |
+		((pdp_op->split_num - 1)
+		<< SHIFT(PDP_D_OPERATION_MODE_CFG_0, SPLIT_NUM));
+	pdp_reg_write(engine, D_OPERATION_MODE_CFG, reg);
+
+	reg = ((pdp_op->partial_in_width_first == 0 ? 0 :
+			pdp_op->partial_in_width_first-1)
+		<< SHIFT(PDP_D_PARTIAL_WIDTH_IN_0, PARTIAL_WIDTH_IN_FIRST)) |
+		((pdp_op->partial_in_width_mid == 0 ? 0 :
+			pdp_op->partial_in_width_mid-1)
+		<< SHIFT(PDP_D_PARTIAL_WIDTH_IN_0, PARTIAL_WIDTH_IN_MID)) |
+		((pdp_op->partial_in_width_last == 0 ? 0 :
+			pdp_op->partial_in_width_last-1)
+		<< SHIFT(PDP_D_PARTIAL_WIDTH_IN_0, PARTIAL_WIDTH_IN_LAST));
+	pdp_reg_write(engine, D_PARTIAL_WIDTH_IN, reg);
+
+	reg = ((pdp_op->partial_width_first == 0 ? 0 :
+			pdp_op->partial_width_first-1)
+		<< SHIFT(PDP_D_PARTIAL_WIDTH_OUT_0, PARTIAL_WIDTH_OUT_FIRST)) |
+		((pdp_op->partial_width_mid == 0 ? 0 :
+			pdp_op->partial_width_mid-1)
+		<< SHIFT(PDP_D_PARTIAL_WIDTH_OUT_0, PARTIAL_WIDTH_OUT_MID))   |
+		((pdp_op->partial_width_last == 0 ? 0 :
+			pdp_op->partial_width_last-1)
+		<< SHIFT(PDP_D_PARTIAL_WIDTH_OUT_0, PARTIAL_WIDTH_OUT_LAST));
+	pdp_reg_write(engine, D_PARTIAL_WIDTH_OUT, reg);
+
+	reg = (map_pool_kernel[pdp_op->pool_width]
+		<< SHIFT(PDP_D_POOLING_KERNEL_CFG_0, KERNEL_WIDTH)) |
+		(map_pool_kernel[pdp_op->pool_height]
+		<< SHIFT(PDP_D_POOLING_KERNEL_CFG_0, KERNEL_HEIGHT))|
+		((pdp_op->stride_x - 1)
+		<< SHIFT(PDP_D_POOLING_KERNEL_CFG_0, KERNEL_STRIDE_WIDTH)) |
+		((pdp_op->stride_y - 1)
+		<< SHIFT(PDP_D_POOLING_KERNEL_CFG_0, KERNEL_STRIDE_HEIGHT));
+	pdp_reg_write(engine, D_POOLING_KERNEL_CFG, reg);
+
+	pdp_reg_write(engine, D_RECIP_KERNEL_WIDTH,
+			recip_kernel_size[pdp_op->precision ==
+					PRECISION_FP16][pdp_op->pool_width]);
+	pdp_reg_write(engine, D_RECIP_KERNEL_HEIGHT,
+			recip_kernel_size[pdp_op->precision ==
+					PRECISION_FP16][pdp_op->pool_height]);
+
+	reg = (pdp_op->pad_left
+		<< SHIFT(PDP_D_POOLING_PADDING_CFG_0, PAD_LEFT)) |
+		(pdp_op->pad_right
+		<< SHIFT(PDP_D_POOLING_PADDING_CFG_0, PAD_RIGHT)) |
+		(pdp_op->pad_top
+		<< SHIFT(PDP_D_POOLING_PADDING_CFG_0, PAD_TOP)) |
+		(pdp_op->pad_bottom
+		<< SHIFT(PDP_D_POOLING_PADDING_CFG_0, PAD_BOTTOM));
+	if (pdp_op->precision == PRECISION_FP16) {
+		int32_t i;
+
+		for (i = 0; i < 7; i++)
+			ASSERT_GOTO(pdp_op->padding_value[i] == 0, ret,
+						-EINVAL, exit);
+	}
+
+	pdp_reg_write(engine, D_POOLING_PADDING_CFG, reg);
+	pdp_reg_write(engine, D_POOLING_PADDING_VALUE_1_CFG, pdp_op->padding_value[0]);
+	pdp_reg_write(engine, D_POOLING_PADDING_VALUE_2_CFG, pdp_op->padding_value[1]);
+	pdp_reg_write(engine, D_POOLING_PADDING_VALUE_3_CFG, pdp_op->padding_value[2]);
+	pdp_reg_write(engine, D_POOLING_PADDING_VALUE_4_CFG, pdp_op->padding_value[3]);
+	pdp_reg_write(engine, D_POOLING_PADDING_VALUE_5_CFG, pdp_op->padding_value[4]);
+	pdp_reg_write(engine, D_POOLING_PADDING_VALUE_6_CFG, pdp_op->padding_value[5]);
+	pdp_reg_write(engine, D_POOLING_PADDING_VALUE_7_CFG, pdp_op->padding_value[6]);
+
+	if (pdp_surface->src_data.type != DLA_MEM_HW) {
+		pdp_reg_write(engine, D_SRC_LINE_STRIDE,
+				pdp_surface->src_data.line_stride);
+		pdp_reg_write(engine, D_SRC_SURFACE_STRIDE,
+				pdp_surface->src_data.surf_stride);
+	}
+
+	high = upper_32_bits(output_address);
+	low = lower_32_bits(output_address);
+	pdp_reg_write(engine, D_DST_BASE_ADDR_LOW, low);
+	pdp_reg_write(engine, D_DST_BASE_ADDR_HIGH, high);
+
+	pdp_reg_write(engine, D_DST_LINE_STRIDE, pdp_surface->dst_data.line_stride);
+	pdp_reg_write(engine, D_DST_SURFACE_STRIDE, pdp_surface->dst_data.surf_stride);
+
+	reg = (map_ram[pdp_surface->dst_data.type]
+		<< SHIFT(PDP_D_DST_RAM_CFG_0, DST_RAM_TYPE));
+	pdp_reg_write(engine, D_DST_RAM_CFG, reg);
+
+	reg = (map_precision[pdp_op->precision]
+		<< SHIFT(PDP_D_DATA_FORMAT_0, INPUT_DATA));
+	pdp_reg_write(engine, D_DATA_FORMAT, reg);
+
+exit:
+	return ret;
+}
+
+int
+dla_pdp_is_ready(struct dla_processor *processor,
+			   struct dla_processor_group *group)
+{
+	return 1;
+}
+
+void
+dla_pdp_dump_config(struct dla_processor_group *group)
+{
+	struct dla_pdp_op_desc *pdp_op;
+	struct dla_pdp_surface_desc *pdp_surface;
+
+	pdp_surface = &group->surface_desc->pdp_surface;
+	pdp_op = &group->operation_desc->pdp_op;
+}
+
+int
+dla_pdp_program(struct dla_engine *engine, struct dla_processor_group *group)
+{
+	int32_t ret;
+
+	if (!group) {
+		ret = -EINVAL;
+		goto exit;
+	}
+
+	dla_enable_intr(engine, MASK(GLB_S_INTR_MASK_0, PDP_DONE_MASK1) |
+			MASK(GLB_S_INTR_MASK_0, PDP_DONE_MASK0));
+
+	ret = processor_pdp_program(engine, group);
+	if (ret)
+		goto exit;
+
+exit:
+	return ret;
+}
diff --git a/drivers/gpu/drm/nvdla/nvdla_reg.h b/drivers/gpu/drm/nvdla/nvdla_reg.h
new file mode 100644
index 000000000000..5ca2897405bc
--- /dev/null
+++ b/drivers/gpu/drm/nvdla/nvdla_reg.h
@@ -0,0 +1,6411 @@
+/* SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause */
+/*
+ * Copyright (C) 2017-2018 NVIDIA CORPORATION.
+ * Copyright (C) 2022 Cai Huoqing
+ */
+
+#ifndef __NVDLA_REG_H_
+#define __NVDLA_REG_H_
+
+// Register NVDLA_CFGROM_CFGROM_HW_VERSION_0
+#define NVDLA_CFGROM_CFGROM_HW_VERSION_0			_MK_ADDR_CONST(0x0)
+#define NVDLA_CFGROM_CFGROM_HW_VERSION_0_HW_VERSION_SHIFT			_MK_SHIFT_CONST(0)
+#define NVDLA_CFGROM_CFGROM_HW_VERSION_0_HW_VERSION_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_HW_VERSION_0_HW_VERSION_SHIFT)
+
+
+// Register NVDLA_CFGROM_CFGROM_GLB_DESC_0
+#define NVDLA_CFGROM_CFGROM_GLB_DESC_0			_MK_ADDR_CONST(0x4)
+#define NVDLA_CFGROM_CFGROM_GLB_DESC_0_GLB_DESC_SHIFT			_MK_SHIFT_CONST(0)
+#define NVDLA_CFGROM_CFGROM_GLB_DESC_0_GLB_DESC_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_GLB_DESC_0_GLB_DESC_SHIFT)
+
+
+// Register NVDLA_CFGROM_CFGROM_CIF_DESC_0
+#define NVDLA_CFGROM_CFGROM_CIF_DESC_0			_MK_ADDR_CONST(0x8)
+#define NVDLA_CFGROM_CFGROM_CIF_DESC_0_CIF_DESC_SHIFT			_MK_SHIFT_CONST(0)
+#define NVDLA_CFGROM_CFGROM_CIF_DESC_0_CIF_DESC_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CIF_DESC_0_CIF_DESC_SHIFT)
+
+
+// Register NVDLA_CFGROM_CFGROM_CIF_CAP_INCOMPAT_0
+#define NVDLA_CFGROM_CFGROM_CIF_CAP_INCOMPAT_0			_MK_ADDR_CONST(0xc)
+#define NVDLA_CFGROM_CFGROM_CIF_CAP_INCOMPAT_0_CIF_CAP_INCOMPAT_SHIFT			_MK_SHIFT_CONST(0)
+#define NVDLA_CFGROM_CFGROM_CIF_CAP_INCOMPAT_0_CIF_CAP_INCOMPAT_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CIF_CAP_INCOMPAT_0_CIF_CAP_INCOMPAT_SHIFT)
+
+
+// Register NVDLA_CFGROM_CFGROM_CIF_CAP_COMPAT_0
+#define NVDLA_CFGROM_CFGROM_CIF_CAP_COMPAT_0			_MK_ADDR_CONST(0x10)
+#define NVDLA_CFGROM_CFGROM_CIF_CAP_COMPAT_0_CIF_CAP_COMPAT_SHIFT			_MK_SHIFT_CONST(0)
+#define NVDLA_CFGROM_CFGROM_CIF_CAP_COMPAT_0_CIF_CAP_COMPAT_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CIF_CAP_COMPAT_0_CIF_CAP_COMPAT_SHIFT)
+
+
+// Register NVDLA_CFGROM_CFGROM_CIF_BASE_WIDTH_0
+#define NVDLA_CFGROM_CFGROM_CIF_BASE_WIDTH_0			_MK_ADDR_CONST(0x14)
+#define NVDLA_CFGROM_CFGROM_CIF_BASE_WIDTH_0_CIF_BASE_WIDTH_SHIFT			_MK_SHIFT_CONST(0)
+#define NVDLA_CFGROM_CFGROM_CIF_BASE_WIDTH_0_CIF_BASE_WIDTH_FIELD			_MK_FIELD_CONST(0xff, NVDLA_CFGROM_CFGROM_CIF_BASE_WIDTH_0_CIF_BASE_WIDTH_SHIFT)
+
+
+// Register NVDLA_CFGROM_CFGROM_CIF_BASE_LATENCY_0
+#define NVDLA_CFGROM_CFGROM_CIF_BASE_LATENCY_0			_MK_ADDR_CONST(0x18)
+#define NVDLA_CFGROM_CFGROM_CIF_BASE_LATENCY_0_CIF_BASE_LATENCY_SHIFT			_MK_SHIFT_CONST(0)
+#define NVDLA_CFGROM_CFGROM_CIF_BASE_LATENCY_0_CIF_BASE_LATENCY_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CIF_BASE_LATENCY_0_CIF_BASE_LATENCY_SHIFT)
+
+
+// Register NVDLA_CFGROM_CFGROM_CIF_BASE_BURST_LENGTH_MAX_0
+#define NVDLA_CFGROM_CFGROM_CIF_BASE_BURST_LENGTH_MAX_0			_MK_ADDR_CONST(0x1c)
+#define NVDLA_CFGROM_CFGROM_CIF_BASE_BURST_LENGTH_MAX_0_BASE_BURST_LENGTH_MAX_SHIFT			_MK_SHIFT_CONST(5)
+#define NVDLA_CFGROM_CFGROM_CIF_BASE_BURST_LENGTH_MAX_0_BASE_BURST_LENGTH_MAX_FIELD			_MK_FIELD_CONST(0x7ffffff, NVDLA_CFGROM_CFGROM_CIF_BASE_BURST_LENGTH_MAX_0_BASE_BURST_LENGTH_MAX_SHIFT)
+
+
+// Register NVDLA_CFGROM_CFGROM_CIF_BASE_MEM_ADDR_WIDTH_0
+#define NVDLA_CFGROM_CFGROM_CIF_BASE_MEM_ADDR_WIDTH_0			_MK_ADDR_CONST(0x20)
+#define NVDLA_CFGROM_CFGROM_CIF_BASE_MEM_ADDR_WIDTH_0_CIF_BASE_MEM_ADDR_WIDTH_SHIFT			_MK_SHIFT_CONST(5)
+#define NVDLA_CFGROM_CFGROM_CIF_BASE_MEM_ADDR_WIDTH_0_CIF_BASE_MEM_ADDR_WIDTH_FIELD			_MK_FIELD_CONST(0x7ffffff, NVDLA_CFGROM_CFGROM_CIF_BASE_MEM_ADDR_WIDTH_0_CIF_BASE_MEM_ADDR_WIDTH_SHIFT)
+
+
+// Register NVDLA_CFGROM_CFGROM_CDMA_DESC_0
+#define NVDLA_CFGROM_CFGROM_CDMA_DESC_0			_MK_ADDR_CONST(0x24)
+#define NVDLA_CFGROM_CFGROM_CDMA_DESC_0_CDMA_DESC_SHIFT			_MK_SHIFT_CONST(0)
+#define NVDLA_CFGROM_CFGROM_CDMA_DESC_0_CDMA_DESC_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CDMA_DESC_0_CDMA_DESC_SHIFT)
+
+
+// Register NVDLA_CFGROM_CFGROM_CDMA_CAP_INCOMPAT_0
+#define NVDLA_CFGROM_CFGROM_CDMA_CAP_INCOMPAT_0			_MK_ADDR_CONST(0x28)
+#define NVDLA_CFGROM_CFGROM_CDMA_CAP_INCOMPAT_0_CDMA_CAP_INCOMPAT_SHIFT			_MK_SHIFT_CONST(0)
+#define NVDLA_CFGROM_CFGROM_CDMA_CAP_INCOMPAT_0_CDMA_CAP_INCOMPAT_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CDMA_CAP_INCOMPAT_0_CDMA_CAP_INCOMPAT_SHIFT)
+
+
+// Register NVDLA_CFGROM_CFGROM_CDMA_CAP_COMPAT_0
+#define NVDLA_CFGROM_CFGROM_CDMA_CAP_COMPAT_0			_MK_ADDR_CONST(0x2c)
+#define NVDLA_CFGROM_CFGROM_CDMA_CAP_COMPAT_0_CDMA_CAP_COMPAT_SHIFT			_MK_SHIFT_CONST(0)
+#define NVDLA_CFGROM_CFGROM_CDMA_CAP_COMPAT_0_CDMA_CAP_COMPAT_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CDMA_CAP_COMPAT_0_CDMA_CAP_COMPAT_SHIFT)
+
+
+// Register NVDLA_CFGROM_CFGROM_CDMA_BASE_FEATURE_TYPES_0
+#define NVDLA_CFGROM_CFGROM_CDMA_BASE_FEATURE_TYPES_0			_MK_ADDR_CONST(0x30)
+#define NVDLA_CFGROM_CFGROM_CDMA_BASE_FEATURE_TYPES_0_CDMA_BASE_FEATURE_TYPES_SHIFT			_MK_SHIFT_CONST(0)
+#define NVDLA_CFGROM_CFGROM_CDMA_BASE_FEATURE_TYPES_0_CDMA_BASE_FEATURE_TYPES_FIELD			_MK_FIELD_CONST(0xfff, NVDLA_CFGROM_CFGROM_CDMA_BASE_FEATURE_TYPES_0_CDMA_BASE_FEATURE_TYPES_SHIFT)
+
+
+// Register NVDLA_CFGROM_CFGROM_CDMA_BASE_WEIGHT_TYPES_0
+#define NVDLA_CFGROM_CFGROM_CDMA_BASE_WEIGHT_TYPES_0			_MK_ADDR_CONST(0x34)
+#define NVDLA_CFGROM_CFGROM_CDMA_BASE_WEIGHT_TYPES_0_CDMA_BASE_WEIGHT_TYPES_SHIFT			_MK_SHIFT_CONST(0)
+#define NVDLA_CFGROM_CFGROM_CDMA_BASE_WEIGHT_TYPES_0_CDMA_BASE_WEIGHT_TYPES_FIELD			_MK_FIELD_CONST(0xfff, NVDLA_CFGROM_CFGROM_CDMA_BASE_WEIGHT_TYPES_0_CDMA_BASE_WEIGHT_TYPES_SHIFT)
+
+
+// Register NVDLA_CFGROM_CFGROM_CDMA_BASE_ATOMIC_C_0
+#define NVDLA_CFGROM_CFGROM_CDMA_BASE_ATOMIC_C_0			_MK_ADDR_CONST(0x38)
+#define NVDLA_CFGROM_CFGROM_CDMA_BASE_ATOMIC_C_0_CDMA_BASE_ATOMIC_C_SHIFT			_MK_SHIFT_CONST(0)
+#define NVDLA_CFGROM_CFGROM_CDMA_BASE_ATOMIC_C_0_CDMA_BASE_ATOMIC_C_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CDMA_BASE_ATOMIC_C_0_CDMA_BASE_ATOMIC_C_SHIFT)
+
+
+// Register NVDLA_CFGROM_CFGROM_CDMA_BASE_ATOMIC_K_0
+#define NVDLA_CFGROM_CFGROM_CDMA_BASE_ATOMIC_K_0			_MK_ADDR_CONST(0x3c)
+#define NVDLA_CFGROM_CFGROM_CDMA_BASE_ATOMIC_K_0_CDMA_BASE_ATOMIC_K_SHIFT			_MK_SHIFT_CONST(0)
+#define NVDLA_CFGROM_CFGROM_CDMA_BASE_ATOMIC_K_0_CDMA_BASE_ATOMIC_K_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CDMA_BASE_ATOMIC_K_0_CDMA_BASE_ATOMIC_K_SHIFT)
+
+
+// Register NVDLA_CFGROM_CFGROM_CDMA_BASE_ATOMIC_M_0
+#define NVDLA_CFGROM_CFGROM_CDMA_BASE_ATOMIC_M_0			_MK_ADDR_CONST(0x40)
+#define NVDLA_CFGROM_CFGROM_CDMA_BASE_ATOMIC_M_0_CDMA_BASE_ATOMIC_M_SHIFT			_MK_SHIFT_CONST(0)
+#define NVDLA_CFGROM_CFGROM_CDMA_BASE_ATOMIC_M_0_CDMA_BASE_ATOMIC_M_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CDMA_BASE_ATOMIC_M_0_CDMA_BASE_ATOMIC_M_SHIFT)
+
+
+// Register NVDLA_CFGROM_CFGROM_CDMA_BASE_CBUF_BANK_NUM_0
+#define NVDLA_CFGROM_CFGROM_CDMA_BASE_CBUF_BANK_NUM_0			_MK_ADDR_CONST(0x44)
+#define NVDLA_CFGROM_CFGROM_CDMA_BASE_CBUF_BANK_NUM_0_CDMA_BASE_CBUF_BANK_NUM_SHIFT			_MK_SHIFT_CONST(0)
+#define NVDLA_CFGROM_CFGROM_CDMA_BASE_CBUF_BANK_NUM_0_CDMA_BASE_CBUF_BANK_NUM_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CDMA_BASE_CBUF_BANK_NUM_0_CDMA_BASE_CBUF_BANK_NUM_SHIFT)
+
+
+// Register NVDLA_CFGROM_CFGROM_CDMA_BASE_CBUF_BANK_WIDTH_0
+#define NVDLA_CFGROM_CFGROM_CDMA_BASE_CBUF_BANK_WIDTH_0			_MK_ADDR_CONST(0x48)
+#define NVDLA_CFGROM_CFGROM_CDMA_BASE_CBUF_BANK_WIDTH_0_CDMA_BASE_CBUF_BANK_WIDTH_SHIFT			_MK_SHIFT_CONST(0)
+#define NVDLA_CFGROM_CFGROM_CDMA_BASE_CBUF_BANK_WIDTH_0_CDMA_BASE_CBUF_BANK_WIDTH_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CDMA_BASE_CBUF_BANK_WIDTH_0_CDMA_BASE_CBUF_BANK_WIDTH_SHIFT)
+
+
+// Register NVDLA_CFGROM_CFGROM_CDMA_BASE_CBUF_BANK_DEPTH_0
+#define NVDLA_CFGROM_CFGROM_CDMA_BASE_CBUF_BANK_DEPTH_0			_MK_ADDR_CONST(0x4c)
+#define NVDLA_CFGROM_CFGROM_CDMA_BASE_CBUF_BANK_DEPTH_0_CDMA_BASE_CBUF_BANK_DEPTH_SHIFT			_MK_SHIFT_CONST(0)
+#define NVDLA_CFGROM_CFGROM_CDMA_BASE_CBUF_BANK_DEPTH_0_CDMA_BASE_CBUF_BANK_DEPTH_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CDMA_BASE_CBUF_BANK_DEPTH_0_CDMA_BASE_CBUF_BANK_DEPTH_SHIFT)
+
+
+// Register NVDLA_CFGROM_CFGROM_CDMA_MULTI_BATCH_MAX_0
+#define NVDLA_CFGROM_CFGROM_CDMA_MULTI_BATCH_MAX_0			_MK_ADDR_CONST(0x50)
+#define NVDLA_CFGROM_CFGROM_CDMA_MULTI_BATCH_MAX_0_CDMA_MULTI_BATCH_MAX_SHIFT			_MK_SHIFT_CONST(0)
+#define NVDLA_CFGROM_CFGROM_CDMA_MULTI_BATCH_MAX_0_CDMA_MULTI_BATCH_MAX_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CDMA_MULTI_BATCH_MAX_0_CDMA_MULTI_BATCH_MAX_SHIFT)
+
+
+// Register NVDLA_CFGROM_CFGROM_CDMA_IMAGE_IN_FORMATS_PACKED_0
+#define NVDLA_CFGROM_CFGROM_CDMA_IMAGE_IN_FORMATS_PACKED_0			_MK_ADDR_CONST(0x54)
+#define NVDLA_CFGROM_CFGROM_CDMA_IMAGE_IN_FORMATS_PACKED_0_CDMA_IMAGE_IN_FORMATS_PACKED_SHIFT			_MK_SHIFT_CONST(0)
+#define NVDLA_CFGROM_CFGROM_CDMA_IMAGE_IN_FORMATS_PACKED_0_CDMA_IMAGE_IN_FORMATS_PACKED_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CDMA_IMAGE_IN_FORMATS_PACKED_0_CDMA_IMAGE_IN_FORMATS_PACKED_SHIFT)
+
+
+// Register NVDLA_CFGROM_CFGROM_CDMA_IMAGE_IN_FORMATS_SEMI_0
+#define NVDLA_CFGROM_CFGROM_CDMA_IMAGE_IN_FORMATS_SEMI_0			_MK_ADDR_CONST(0x58)
+#define NVDLA_CFGROM_CFGROM_CDMA_IMAGE_IN_FORMATS_SEMI_0_CDMA_IMAGE_IN_FORMATS_SEMI_SHIFT			_MK_SHIFT_CONST(0)
+#define NVDLA_CFGROM_CFGROM_CDMA_IMAGE_IN_FORMATS_SEMI_0_CDMA_IMAGE_IN_FORMATS_SEMI_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CDMA_IMAGE_IN_FORMATS_SEMI_0_CDMA_IMAGE_IN_FORMATS_SEMI_SHIFT)
+
+
+// Register NVDLA_CFGROM_CFGROM_CBUF_DESC_0
+#define NVDLA_CFGROM_CFGROM_CBUF_DESC_0			_MK_ADDR_CONST(0x5c)
+#define NVDLA_CFGROM_CFGROM_CBUF_DESC_0_CBUF_DESC_SHIFT			_MK_SHIFT_CONST(0)
+#define NVDLA_CFGROM_CFGROM_CBUF_DESC_0_CBUF_DESC_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CBUF_DESC_0_CBUF_DESC_SHIFT)
+
+
+// Register NVDLA_CFGROM_CFGROM_CBUF_CAP_INCOMPAT_0
+#define NVDLA_CFGROM_CFGROM_CBUF_CAP_INCOMPAT_0			_MK_ADDR_CONST(0x60)
+#define NVDLA_CFGROM_CFGROM_CBUF_CAP_INCOMPAT_0_CBUF_CAP_INCOMPAT_SHIFT			_MK_SHIFT_CONST(0)
+#define NVDLA_CFGROM_CFGROM_CBUF_CAP_INCOMPAT_0_CBUF_CAP_INCOMPAT_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CBUF_CAP_INCOMPAT_0_CBUF_CAP_INCOMPAT_SHIFT)
+
+
+// Register NVDLA_CFGROM_CFGROM_CBUF_CAP_COMPAT_0
+#define NVDLA_CFGROM_CFGROM_CBUF_CAP_COMPAT_0			_MK_ADDR_CONST(0x64)
+#define NVDLA_CFGROM_CFGROM_CBUF_CAP_COMPAT_0_CBUF_CAP_COMPAT_SHIFT			_MK_SHIFT_CONST(0)
+#define NVDLA_CFGROM_CFGROM_CBUF_CAP_COMPAT_0_CBUF_CAP_COMPAT_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CBUF_CAP_COMPAT_0_CBUF_CAP_COMPAT_SHIFT)
+
+
+// Register NVDLA_CFGROM_CFGROM_CBUF_BASE_CBUF_BANK_NUM_0
+#define NVDLA_CFGROM_CFGROM_CBUF_BASE_CBUF_BANK_NUM_0			_MK_ADDR_CONST(0x68)
+#define NVDLA_CFGROM_CFGROM_CBUF_BASE_CBUF_BANK_NUM_0_CBUF_BASE_CBUF_BANK_NUM_SHIFT			_MK_SHIFT_CONST(0)
+#define NVDLA_CFGROM_CFGROM_CBUF_BASE_CBUF_BANK_NUM_0_CBUF_BASE_CBUF_BANK_NUM_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CBUF_BASE_CBUF_BANK_NUM_0_CBUF_BASE_CBUF_BANK_NUM_SHIFT)
+
+
+// Register NVDLA_CFGROM_CFGROM_CBUF_BASE_CBUF_BANK_WIDTH_0
+#define NVDLA_CFGROM_CFGROM_CBUF_BASE_CBUF_BANK_WIDTH_0			_MK_ADDR_CONST(0x6c)
+#define NVDLA_CFGROM_CFGROM_CBUF_BASE_CBUF_BANK_WIDTH_0_CBUF_BASE_CBUF_BANK_WIDTH_SHIFT			_MK_SHIFT_CONST(0)
+#define NVDLA_CFGROM_CFGROM_CBUF_BASE_CBUF_BANK_WIDTH_0_CBUF_BASE_CBUF_BANK_WIDTH_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CBUF_BASE_CBUF_BANK_WIDTH_0_CBUF_BASE_CBUF_BANK_WIDTH_SHIFT)
+
+
+// Register NVDLA_CFGROM_CFGROM_CBUF_BASE_CBUF_BANK_DEPTH_0
+#define NVDLA_CFGROM_CFGROM_CBUF_BASE_CBUF_BANK_DEPTH_0			_MK_ADDR_CONST(0x70)
+#define NVDLA_CFGROM_CFGROM_CBUF_BASE_CBUF_BANK_DEPTH_0_CBUF_BASE_CBUF_BANK_DEPTH_SHIFT			_MK_SHIFT_CONST(0)
+#define NVDLA_CFGROM_CFGROM_CBUF_BASE_CBUF_BANK_DEPTH_0_CBUF_BASE_CBUF_BANK_DEPTH_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CBUF_BASE_CBUF_BANK_DEPTH_0_CBUF_BASE_CBUF_BANK_DEPTH_SHIFT)
+
+
+// Register NVDLA_CFGROM_CFGROM_CBUF_BASE_CDMA_ID_0
+#define NVDLA_CFGROM_CFGROM_CBUF_BASE_CDMA_ID_0			_MK_ADDR_CONST(0x74)
+#define NVDLA_CFGROM_CFGROM_CBUF_BASE_CDMA_ID_0_CBUF_BASE_CDMA_ID_SHIFT			_MK_SHIFT_CONST(0)
+#define NVDLA_CFGROM_CFGROM_CBUF_BASE_CDMA_ID_0_CBUF_BASE_CDMA_ID_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CBUF_BASE_CDMA_ID_0_CBUF_BASE_CDMA_ID_SHIFT)
+
+
+// Register NVDLA_CFGROM_CFGROM_CSC_DESC_0
+#define NVDLA_CFGROM_CFGROM_CSC_DESC_0			_MK_ADDR_CONST(0x78)
+#define NVDLA_CFGROM_CFGROM_CSC_DESC_0_CSC_DESC_SHIFT			_MK_SHIFT_CONST(0)
+#define NVDLA_CFGROM_CFGROM_CSC_DESC_0_CSC_DESC_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CSC_DESC_0_CSC_DESC_SHIFT)
+
+
+// Register NVDLA_CFGROM_CFGROM_CSC_CAP_INCOMPAT_0
+#define NVDLA_CFGROM_CFGROM_CSC_CAP_INCOMPAT_0			_MK_ADDR_CONST(0x7c)
+#define NVDLA_CFGROM_CFGROM_CSC_CAP_INCOMPAT_0_CSC_CAP_INCOMPAT_SHIFT			_MK_SHIFT_CONST(0)
+#define NVDLA_CFGROM_CFGROM_CSC_CAP_INCOMPAT_0_CSC_CAP_INCOMPAT_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CSC_CAP_INCOMPAT_0_CSC_CAP_INCOMPAT_SHIFT)
+
+
+// Register NVDLA_CFGROM_CFGROM_CSC_CAP_COMPAT_0
+#define NVDLA_CFGROM_CFGROM_CSC_CAP_COMPAT_0			_MK_ADDR_CONST(0x80)
+#define NVDLA_CFGROM_CFGROM_CSC_CAP_COMPAT_0_CSC_CAP_COMPAT_SHIFT			_MK_SHIFT_CONST(0)
+#define NVDLA_CFGROM_CFGROM_CSC_CAP_COMPAT_0_CSC_CAP_COMPAT_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CSC_CAP_COMPAT_0_CSC_CAP_COMPAT_SHIFT)
+
+
+// Register NVDLA_CFGROM_CFGROM_CSC_BASE_FEATURE_TYPES_0
+#define NVDLA_CFGROM_CFGROM_CSC_BASE_FEATURE_TYPES_0			_MK_ADDR_CONST(0x84)
+#define NVDLA_CFGROM_CFGROM_CSC_BASE_FEATURE_TYPES_0_CSC_BASE_FEATURE_TYPES_SHIFT			_MK_SHIFT_CONST(0)
+#define NVDLA_CFGROM_CFGROM_CSC_BASE_FEATURE_TYPES_0_CSC_BASE_FEATURE_TYPES_FIELD			_MK_FIELD_CONST(0xfff, NVDLA_CFGROM_CFGROM_CSC_BASE_FEATURE_TYPES_0_CSC_BASE_FEATURE_TYPES_SHIFT)
+
+
+// Register NVDLA_CFGROM_CFGROM_CSC_BASE_WEIGHT_TYPES_0
+#define NVDLA_CFGROM_CFGROM_CSC_BASE_WEIGHT_TYPES_0			_MK_ADDR_CONST(0x88)
+#define NVDLA_CFGROM_CFGROM_CSC_BASE_WEIGHT_TYPES_0_CSC_BASE_WEIGHT_TYPES_SHIFT			_MK_SHIFT_CONST(0)
+#define NVDLA_CFGROM_CFGROM_CSC_BASE_WEIGHT_TYPES_0_CSC_BASE_WEIGHT_TYPES_FIELD			_MK_FIELD_CONST(0xfff, NVDLA_CFGROM_CFGROM_CSC_BASE_WEIGHT_TYPES_0_CSC_BASE_WEIGHT_TYPES_SHIFT)
+
+
+// Register NVDLA_CFGROM_CFGROM_CSC_BASE_ATOMIC_C_0
+#define NVDLA_CFGROM_CFGROM_CSC_BASE_ATOMIC_C_0			_MK_ADDR_CONST(0x8c)
+#define NVDLA_CFGROM_CFGROM_CSC_BASE_ATOMIC_C_0_CSC_BASE_ATOMIC_C_SHIFT			_MK_SHIFT_CONST(0)
+#define NVDLA_CFGROM_CFGROM_CSC_BASE_ATOMIC_C_0_CSC_BASE_ATOMIC_C_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CSC_BASE_ATOMIC_C_0_CSC_BASE_ATOMIC_C_SHIFT)
+
+
+// Register NVDLA_CFGROM_CFGROM_CSC_BASE_ATOMIC_K_0
+#define NVDLA_CFGROM_CFGROM_CSC_BASE_ATOMIC_K_0			_MK_ADDR_CONST(0x90)
+#define NVDLA_CFGROM_CFGROM_CSC_BASE_ATOMIC_K_0_CSC_BASE_ATOMIC_K_SHIFT			_MK_SHIFT_CONST(0)
+#define NVDLA_CFGROM_CFGROM_CSC_BASE_ATOMIC_K_0_CSC_BASE_ATOMIC_K_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CSC_BASE_ATOMIC_K_0_CSC_BASE_ATOMIC_K_SHIFT)
+
+
+// Register NVDLA_CFGROM_CFGROM_CSC_BASE_ATOMIC_M_0
+#define NVDLA_CFGROM_CFGROM_CSC_BASE_ATOMIC_M_0			_MK_ADDR_CONST(0x94)
+#define NVDLA_CFGROM_CFGROM_CSC_BASE_ATOMIC_M_0_CSC_BASE_ATOMIC_M_SHIFT			_MK_SHIFT_CONST(0)
+#define NVDLA_CFGROM_CFGROM_CSC_BASE_ATOMIC_M_0_CSC_BASE_ATOMIC_M_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CSC_BASE_ATOMIC_M_0_CSC_BASE_ATOMIC_M_SHIFT)
+
+
+// Register NVDLA_CFGROM_CFGROM_CSC_BASE_CBUF_BANK_NUM_0
+#define NVDLA_CFGROM_CFGROM_CSC_BASE_CBUF_BANK_NUM_0			_MK_ADDR_CONST(0x98)
+#define NVDLA_CFGROM_CFGROM_CSC_BASE_CBUF_BANK_NUM_0_CSC_BASE_CBUF_BANK_NUM_SHIFT			_MK_SHIFT_CONST(0)
+#define NVDLA_CFGROM_CFGROM_CSC_BASE_CBUF_BANK_NUM_0_CSC_BASE_CBUF_BANK_NUM_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CSC_BASE_CBUF_BANK_NUM_0_CSC_BASE_CBUF_BANK_NUM_SHIFT)
+
+
+// Register NVDLA_CFGROM_CFGROM_CSC_BASE_CBUF_BANK_WIDTH_0
+#define NVDLA_CFGROM_CFGROM_CSC_BASE_CBUF_BANK_WIDTH_0			_MK_ADDR_CONST(0x9c)
+#define NVDLA_CFGROM_CFGROM_CSC_BASE_CBUF_BANK_WIDTH_0_CSC_BASE_CBUF_BANK_WIDTH_SHIFT			_MK_SHIFT_CONST(0)
+#define NVDLA_CFGROM_CFGROM_CSC_BASE_CBUF_BANK_WIDTH_0_CSC_BASE_CBUF_BANK_WIDTH_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CSC_BASE_CBUF_BANK_WIDTH_0_CSC_BASE_CBUF_BANK_WIDTH_SHIFT)
+
+
+// Register NVDLA_CFGROM_CFGROM_CSC_BASE_CBUF_BANK_DEPTH_0
+#define NVDLA_CFGROM_CFGROM_CSC_BASE_CBUF_BANK_DEPTH_0			_MK_ADDR_CONST(0xa0)
+#define NVDLA_CFGROM_CFGROM_CSC_BASE_CBUF_BANK_DEPTH_0_CSC_BASE_CBUF_BANK_DEPTH_SHIFT			_MK_SHIFT_CONST(0)
+#define NVDLA_CFGROM_CFGROM_CSC_BASE_CBUF_BANK_DEPTH_0_CSC_BASE_CBUF_BANK_DEPTH_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CSC_BASE_CBUF_BANK_DEPTH_0_CSC_BASE_CBUF_BANK_DEPTH_SHIFT)
+
+
+// Register NVDLA_CFGROM_CFGROM_CSC_BASE_CDMA_ID_0
+#define NVDLA_CFGROM_CFGROM_CSC_BASE_CDMA_ID_0			_MK_ADDR_CONST(0xa4)
+#define NVDLA_CFGROM_CFGROM_CSC_BASE_CDMA_ID_0_CSC_BASE_CDMA_ID_SHIFT			_MK_SHIFT_CONST(0)
+#define NVDLA_CFGROM_CFGROM_CSC_BASE_CDMA_ID_0_CSC_BASE_CDMA_ID_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CSC_BASE_CDMA_ID_0_CSC_BASE_CDMA_ID_SHIFT)
+
+
+// Register NVDLA_CFGROM_CFGROM_CSC_MULTI_BATCH_MAX_0
+#define NVDLA_CFGROM_CFGROM_CSC_MULTI_BATCH_MAX_0			_MK_ADDR_CONST(0xa8)
+#define NVDLA_CFGROM_CFGROM_CSC_MULTI_BATCH_MAX_0_CSC_MULTI_BATCH_MAX_SHIFT			_MK_SHIFT_CONST(0)
+#define NVDLA_CFGROM_CFGROM_CSC_MULTI_BATCH_MAX_0_CSC_MULTI_BATCH_MAX_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CSC_MULTI_BATCH_MAX_0_CSC_MULTI_BATCH_MAX_SHIFT)
+
+
+// Register NVDLA_CFGROM_CFGROM_CMAC_A_DESC_0
+#define NVDLA_CFGROM_CFGROM_CMAC_A_DESC_0			_MK_ADDR_CONST(0xac)
+#define NVDLA_CFGROM_CFGROM_CMAC_A_DESC_0_CMAC_A_DESC_SHIFT			_MK_SHIFT_CONST(0)
+#define NVDLA_CFGROM_CFGROM_CMAC_A_DESC_0_CMAC_A_DESC_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CMAC_A_DESC_0_CMAC_A_DESC_SHIFT)
+
+
+// Register NVDLA_CFGROM_CFGROM_CMAC_A_CAP_INCOMPAT_0
+#define NVDLA_CFGROM_CFGROM_CMAC_A_CAP_INCOMPAT_0			_MK_ADDR_CONST(0xb0)
+#define NVDLA_CFGROM_CFGROM_CMAC_A_CAP_INCOMPAT_0_CMAC_A_CAP_INCOMPAT_SHIFT			_MK_SHIFT_CONST(0)
+#define NVDLA_CFGROM_CFGROM_CMAC_A_CAP_INCOMPAT_0_CMAC_A_CAP_INCOMPAT_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CMAC_A_CAP_INCOMPAT_0_CMAC_A_CAP_INCOMPAT_SHIFT)
+
+
+// Register NVDLA_CFGROM_CFGROM_CMAC_A_CAP_COMPAT_0
+#define NVDLA_CFGROM_CFGROM_CMAC_A_CAP_COMPAT_0			_MK_ADDR_CONST(0xb4)
+#define NVDLA_CFGROM_CFGROM_CMAC_A_CAP_COMPAT_0_CMAC_A_CAP_COMPAT_SHIFT			_MK_SHIFT_CONST(0)
+#define NVDLA_CFGROM_CFGROM_CMAC_A_CAP_COMPAT_0_CMAC_A_CAP_COMPAT_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CMAC_A_CAP_COMPAT_0_CMAC_A_CAP_COMPAT_SHIFT)
+
+
+// Register NVDLA_CFGROM_CFGROM_CMAC_A_BASE_FEATURE_TYPES_0
+#define NVDLA_CFGROM_CFGROM_CMAC_A_BASE_FEATURE_TYPES_0			_MK_ADDR_CONST(0xb8)
+#define NVDLA_CFGROM_CFGROM_CMAC_A_BASE_FEATURE_TYPES_0_CMAC_A_BASE_FEATURE_TYPES_SHIFT			_MK_SHIFT_CONST(0)
+#define NVDLA_CFGROM_CFGROM_CMAC_A_BASE_FEATURE_TYPES_0_CMAC_A_BASE_FEATURE_TYPES_FIELD			_MK_FIELD_CONST(0xfff, NVDLA_CFGROM_CFGROM_CMAC_A_BASE_FEATURE_TYPES_0_CMAC_A_BASE_FEATURE_TYPES_SHIFT)
+
+
+// Register NVDLA_CFGROM_CFGROM_CMAC_A_BASE_WEIGHT_TYPES_0
+#define NVDLA_CFGROM_CFGROM_CMAC_A_BASE_WEIGHT_TYPES_0			_MK_ADDR_CONST(0xbc)
+#define NVDLA_CFGROM_CFGROM_CMAC_A_BASE_WEIGHT_TYPES_0_CMAC_A_BASE_WEIGHT_TYPES_SHIFT			_MK_SHIFT_CONST(0)
+#define NVDLA_CFGROM_CFGROM_CMAC_A_BASE_WEIGHT_TYPES_0_CMAC_A_BASE_WEIGHT_TYPES_FIELD			_MK_FIELD_CONST(0xfff, NVDLA_CFGROM_CFGROM_CMAC_A_BASE_WEIGHT_TYPES_0_CMAC_A_BASE_WEIGHT_TYPES_SHIFT)
+
+
+// Register NVDLA_CFGROM_CFGROM_CMAC_A_BASE_ATOMIC_C_0
+#define NVDLA_CFGROM_CFGROM_CMAC_A_BASE_ATOMIC_C_0			_MK_ADDR_CONST(0xc0)
+#define NVDLA_CFGROM_CFGROM_CMAC_A_BASE_ATOMIC_C_0_CMAC_A_BASE_ATOMIC_C_SHIFT			_MK_SHIFT_CONST(0)
+#define NVDLA_CFGROM_CFGROM_CMAC_A_BASE_ATOMIC_C_0_CMAC_A_BASE_ATOMIC_C_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CMAC_A_BASE_ATOMIC_C_0_CMAC_A_BASE_ATOMIC_C_SHIFT)
+
+
+// Register NVDLA_CFGROM_CFGROM_CMAC_A_BASE_ATOMIC_K_0
+#define NVDLA_CFGROM_CFGROM_CMAC_A_BASE_ATOMIC_K_0			_MK_ADDR_CONST(0xc4)
+#define NVDLA_CFGROM_CFGROM_CMAC_A_BASE_ATOMIC_K_0_CMAC_A_BASE_ATOMIC_K_SHIFT			_MK_SHIFT_CONST(0)
+#define NVDLA_CFGROM_CFGROM_CMAC_A_BASE_ATOMIC_K_0_CMAC_A_BASE_ATOMIC_K_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CMAC_A_BASE_ATOMIC_K_0_CMAC_A_BASE_ATOMIC_K_SHIFT)
+
+
+// Register NVDLA_CFGROM_CFGROM_CMAC_A_BASE_CDMA_ID_0
+#define NVDLA_CFGROM_CFGROM_CMAC_A_BASE_CDMA_ID_0			_MK_ADDR_CONST(0xc8)
+#define NVDLA_CFGROM_CFGROM_CMAC_A_BASE_CDMA_ID_0_CMAC_A_BASE_CDMA_ID_SHIFT			_MK_SHIFT_CONST(0)
+#define NVDLA_CFGROM_CFGROM_CMAC_A_BASE_CDMA_ID_0_CMAC_A_BASE_CDMA_ID_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CMAC_A_BASE_CDMA_ID_0_CMAC_A_BASE_CDMA_ID_SHIFT)
+
+
+// Register NVDLA_CFGROM_CFGROM_CMAC_B_DESC_0
+#define NVDLA_CFGROM_CFGROM_CMAC_B_DESC_0			_MK_ADDR_CONST(0xcc)
+#define NVDLA_CFGROM_CFGROM_CMAC_B_DESC_0_CMAC_B_DESC_SHIFT			_MK_SHIFT_CONST(0)
+#define NVDLA_CFGROM_CFGROM_CMAC_B_DESC_0_CMAC_B_DESC_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CMAC_B_DESC_0_CMAC_B_DESC_SHIFT)
+
+
+// Register NVDLA_CFGROM_CFGROM_CMAC_B_CAP_INCOMPAT_0
+#define NVDLA_CFGROM_CFGROM_CMAC_B_CAP_INCOMPAT_0			_MK_ADDR_CONST(0xd0)
+#define NVDLA_CFGROM_CFGROM_CMAC_B_CAP_INCOMPAT_0_CMAC_B_CAP_INCOMPAT_SHIFT			_MK_SHIFT_CONST(0)
+#define NVDLA_CFGROM_CFGROM_CMAC_B_CAP_INCOMPAT_0_CMAC_B_CAP_INCOMPAT_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CMAC_B_CAP_INCOMPAT_0_CMAC_B_CAP_INCOMPAT_SHIFT)
+
+
+// Register NVDLA_CFGROM_CFGROM_CMAC_B_CAP_COMPAT_0
+#define NVDLA_CFGROM_CFGROM_CMAC_B_CAP_COMPAT_0			_MK_ADDR_CONST(0xd4)
+#define NVDLA_CFGROM_CFGROM_CMAC_B_CAP_COMPAT_0_CMAC_B_CAP_COMPAT_SHIFT			_MK_SHIFT_CONST(0)
+#define NVDLA_CFGROM_CFGROM_CMAC_B_CAP_COMPAT_0_CMAC_B_CAP_COMPAT_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CMAC_B_CAP_COMPAT_0_CMAC_B_CAP_COMPAT_SHIFT)
+
+
+// Register NVDLA_CFGROM_CFGROM_CMAC_B_BASE_FEATURE_TYPES_0
+#define NVDLA_CFGROM_CFGROM_CMAC_B_BASE_FEATURE_TYPES_0			_MK_ADDR_CONST(0xd8)
+#define NVDLA_CFGROM_CFGROM_CMAC_B_BASE_FEATURE_TYPES_0_CMAC_B_BASE_FEATURE_TYPES_SHIFT			_MK_SHIFT_CONST(0)
+#define NVDLA_CFGROM_CFGROM_CMAC_B_BASE_FEATURE_TYPES_0_CMAC_B_BASE_FEATURE_TYPES_FIELD			_MK_FIELD_CONST(0xfff, NVDLA_CFGROM_CFGROM_CMAC_B_BASE_FEATURE_TYPES_0_CMAC_B_BASE_FEATURE_TYPES_SHIFT)
+
+
+// Register NVDLA_CFGROM_CFGROM_CMAC_B_BASE_WEIGHT_TYPES_0
+#define NVDLA_CFGROM_CFGROM_CMAC_B_BASE_WEIGHT_TYPES_0			_MK_ADDR_CONST(0xdc)
+#define NVDLA_CFGROM_CFGROM_CMAC_B_BASE_WEIGHT_TYPES_0_CMAC_B_BASE_WEIGHT_TYPES_SHIFT			_MK_SHIFT_CONST(0)
+#define NVDLA_CFGROM_CFGROM_CMAC_B_BASE_WEIGHT_TYPES_0_CMAC_B_BASE_WEIGHT_TYPES_FIELD			_MK_FIELD_CONST(0xfff, NVDLA_CFGROM_CFGROM_CMAC_B_BASE_WEIGHT_TYPES_0_CMAC_B_BASE_WEIGHT_TYPES_SHIFT)
+
+
+// Register NVDLA_CFGROM_CFGROM_CMAC_B_BASE_ATOMIC_C_0
+#define NVDLA_CFGROM_CFGROM_CMAC_B_BASE_ATOMIC_C_0			_MK_ADDR_CONST(0xe0)
+#define NVDLA_CFGROM_CFGROM_CMAC_B_BASE_ATOMIC_C_0_CMAC_B_BASE_ATOMIC_C_SHIFT			_MK_SHIFT_CONST(0)
+#define NVDLA_CFGROM_CFGROM_CMAC_B_BASE_ATOMIC_C_0_CMAC_B_BASE_ATOMIC_C_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CMAC_B_BASE_ATOMIC_C_0_CMAC_B_BASE_ATOMIC_C_SHIFT)
+
+
+// Register NVDLA_CFGROM_CFGROM_CMAC_B_BASE_ATOMIC_K_0
+#define NVDLA_CFGROM_CFGROM_CMAC_B_BASE_ATOMIC_K_0			_MK_ADDR_CONST(0xe4)
+#define NVDLA_CFGROM_CFGROM_CMAC_B_BASE_ATOMIC_K_0_CMAC_B_BASE_ATOMIC_K_SHIFT			_MK_SHIFT_CONST(0)
+#define NVDLA_CFGROM_CFGROM_CMAC_B_BASE_ATOMIC_K_0_CMAC_B_BASE_ATOMIC_K_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CMAC_B_BASE_ATOMIC_K_0_CMAC_B_BASE_ATOMIC_K_SHIFT)
+
+
+// Register NVDLA_CFGROM_CFGROM_CMAC_B_BASE_CDMA_ID_0
+#define NVDLA_CFGROM_CFGROM_CMAC_B_BASE_CDMA_ID_0			_MK_ADDR_CONST(0xe8)
+#define NVDLA_CFGROM_CFGROM_CMAC_B_BASE_CDMA_ID_0_CMAC_B_BASE_CDMA_ID_SHIFT			_MK_SHIFT_CONST(0)
+#define NVDLA_CFGROM_CFGROM_CMAC_B_BASE_CDMA_ID_0_CMAC_B_BASE_CDMA_ID_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CMAC_B_BASE_CDMA_ID_0_CMAC_B_BASE_CDMA_ID_SHIFT)
+
+
+// Register NVDLA_CFGROM_CFGROM_CACC_DESC_0
+#define NVDLA_CFGROM_CFGROM_CACC_DESC_0			_MK_ADDR_CONST(0xec)
+#define NVDLA_CFGROM_CFGROM_CACC_DESC_0_CACC_DESC_SHIFT			_MK_SHIFT_CONST(0)
+#define NVDLA_CFGROM_CFGROM_CACC_DESC_0_CACC_DESC_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CACC_DESC_0_CACC_DESC_SHIFT)
+
+
+// Register NVDLA_CFGROM_CFGROM_CACC_CAP_INCOMPAT_0
+#define NVDLA_CFGROM_CFGROM_CACC_CAP_INCOMPAT_0			_MK_ADDR_CONST(0xf0)
+#define NVDLA_CFGROM_CFGROM_CACC_CAP_INCOMPAT_0_CACC_CAP_INCOMPAT_SHIFT			_MK_SHIFT_CONST(0)
+#define NVDLA_CFGROM_CFGROM_CACC_CAP_INCOMPAT_0_CACC_CAP_INCOMPAT_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CACC_CAP_INCOMPAT_0_CACC_CAP_INCOMPAT_SHIFT)
+
+
+// Register NVDLA_CFGROM_CFGROM_CACC_CAP_COMPAT_0
+#define NVDLA_CFGROM_CFGROM_CACC_CAP_COMPAT_0			_MK_ADDR_CONST(0xf4)
+#define NVDLA_CFGROM_CFGROM_CACC_CAP_COMPAT_0_CACC_CAP_COMPAT_SHIFT			_MK_SHIFT_CONST(0)
+#define NVDLA_CFGROM_CFGROM_CACC_CAP_COMPAT_0_CACC_CAP_COMPAT_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CACC_CAP_COMPAT_0_CACC_CAP_COMPAT_SHIFT)
+
+
+// Register NVDLA_CFGROM_CFGROM_CACC_BASE_FEATURE_TYPES_0
+#define NVDLA_CFGROM_CFGROM_CACC_BASE_FEATURE_TYPES_0			_MK_ADDR_CONST(0xf8)
+#define NVDLA_CFGROM_CFGROM_CACC_BASE_FEATURE_TYPES_0_CACC_BASE_FEATURE_TYPES_SHIFT			_MK_SHIFT_CONST(0)
+#define NVDLA_CFGROM_CFGROM_CACC_BASE_FEATURE_TYPES_0_CACC_BASE_FEATURE_TYPES_FIELD			_MK_FIELD_CONST(0xfff, NVDLA_CFGROM_CFGROM_CACC_BASE_FEATURE_TYPES_0_CACC_BASE_FEATURE_TYPES_SHIFT)
+
+
+// Register NVDLA_CFGROM_CFGROM_CACC_BASE_WEIGHT_TYPES_0
+#define NVDLA_CFGROM_CFGROM_CACC_BASE_WEIGHT_TYPES_0			_MK_ADDR_CONST(0xfc)
+#define NVDLA_CFGROM_CFGROM_CACC_BASE_WEIGHT_TYPES_0_CACC_BASE_WEIGHT_TYPES_SHIFT			_MK_SHIFT_CONST(0)
+#define NVDLA_CFGROM_CFGROM_CACC_BASE_WEIGHT_TYPES_0_CACC_BASE_WEIGHT_TYPES_FIELD			_MK_FIELD_CONST(0xfff, NVDLA_CFGROM_CFGROM_CACC_BASE_WEIGHT_TYPES_0_CACC_BASE_WEIGHT_TYPES_SHIFT)
+
+
+// Register NVDLA_CFGROM_CFGROM_CACC_BASE_ATOMIC_C_0
+#define NVDLA_CFGROM_CFGROM_CACC_BASE_ATOMIC_C_0			_MK_ADDR_CONST(0x100)
+#define NVDLA_CFGROM_CFGROM_CACC_BASE_ATOMIC_C_0_CACC_BASE_ATOMIC_C_SHIFT			_MK_SHIFT_CONST(0)
+#define NVDLA_CFGROM_CFGROM_CACC_BASE_ATOMIC_C_0_CACC_BASE_ATOMIC_C_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CACC_BASE_ATOMIC_C_0_CACC_BASE_ATOMIC_C_SHIFT)
+
+
+// Register NVDLA_CFGROM_CFGROM_CACC_BASE_ATOMIC_K_0
+#define NVDLA_CFGROM_CFGROM_CACC_BASE_ATOMIC_K_0			_MK_ADDR_CONST(0x104)
+#define NVDLA_CFGROM_CFGROM_CACC_BASE_ATOMIC_K_0_CACC_BASE_ATOMIC_K_SHIFT			_MK_SHIFT_CONST(0)
+#define NVDLA_CFGROM_CFGROM_CACC_BASE_ATOMIC_K_0_CACC_BASE_ATOMIC_K_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CACC_BASE_ATOMIC_K_0_CACC_BASE_ATOMIC_K_SHIFT)
+
+
+// Register NVDLA_CFGROM_CFGROM_CACC_BASE_CDMA_ID_0
+#define NVDLA_CFGROM_CFGROM_CACC_BASE_CDMA_ID_0			_MK_ADDR_CONST(0x108)
+#define NVDLA_CFGROM_CFGROM_CACC_BASE_CDMA_ID_0_CACC_BASE_CDMA_ID_SHIFT			_MK_SHIFT_CONST(0)
+#define NVDLA_CFGROM_CFGROM_CACC_BASE_CDMA_ID_0_CACC_BASE_CDMA_ID_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CACC_BASE_CDMA_ID_0_CACC_BASE_CDMA_ID_SHIFT)
+
+
+// Register NVDLA_CFGROM_CFGROM_CACC_MULTI_BATCH_MAX_0
+#define NVDLA_CFGROM_CFGROM_CACC_MULTI_BATCH_MAX_0			_MK_ADDR_CONST(0x10c)
+#define NVDLA_CFGROM_CFGROM_CACC_MULTI_BATCH_MAX_0_CACC_MULTI_BATCH_MAX_SHIFT			_MK_SHIFT_CONST(0)
+#define NVDLA_CFGROM_CFGROM_CACC_MULTI_BATCH_MAX_0_CACC_MULTI_BATCH_MAX_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CACC_MULTI_BATCH_MAX_0_CACC_MULTI_BATCH_MAX_SHIFT)
+
+
+// Register NVDLA_CFGROM_CFGROM_SDP_RDMA_DESC_0
+#define NVDLA_CFGROM_CFGROM_SDP_RDMA_DESC_0			_MK_ADDR_CONST(0x110)
+#define NVDLA_CFGROM_CFGROM_SDP_RDMA_DESC_0_SDP_RDMA_DESC_SHIFT			_MK_SHIFT_CONST(0)
+#define NVDLA_CFGROM_CFGROM_SDP_RDMA_DESC_0_SDP_RDMA_DESC_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_SDP_RDMA_DESC_0_SDP_RDMA_DESC_SHIFT)
+
+
+// Register NVDLA_CFGROM_CFGROM_SDP_RDMA_CAP_INCOMPAT_0
+#define NVDLA_CFGROM_CFGROM_SDP_RDMA_CAP_INCOMPAT_0			_MK_ADDR_CONST(0x114)
+#define NVDLA_CFGROM_CFGROM_SDP_RDMA_CAP_INCOMPAT_0_SDP_RDMA_CAP_INCOMPAT_SHIFT			_MK_SHIFT_CONST(0)
+#define NVDLA_CFGROM_CFGROM_SDP_RDMA_CAP_INCOMPAT_0_SDP_RDMA_CAP_INCOMPAT_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_SDP_RDMA_CAP_INCOMPAT_0_SDP_RDMA_CAP_INCOMPAT_SHIFT)
+
+
+// Register NVDLA_CFGROM_CFGROM_SDP_RDMA_CAP_COMPAT_0
+#define NVDLA_CFGROM_CFGROM_SDP_RDMA_CAP_COMPAT_0			_MK_ADDR_CONST(0x118)
+#define NVDLA_CFGROM_CFGROM_SDP_RDMA_CAP_COMPAT_0_SDP_RDMA_CAP_COMPAT_SHIFT			_MK_SHIFT_CONST(0)
+#define NVDLA_CFGROM_CFGROM_SDP_RDMA_CAP_COMPAT_0_SDP_RDMA_CAP_COMPAT_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_SDP_RDMA_CAP_COMPAT_0_SDP_RDMA_CAP_COMPAT_SHIFT)
+
+
+// Register NVDLA_CFGROM_CFGROM_SDP_RDMA_BASE_ATOMIC_M_0
+#define NVDLA_CFGROM_CFGROM_SDP_RDMA_BASE_ATOMIC_M_0			_MK_ADDR_CONST(0x11c)
+#define NVDLA_CFGROM_CFGROM_SDP_RDMA_BASE_ATOMIC_M_0_SDP_RDMA_BASE_ATOMIC_M_SHIFT			_MK_SHIFT_CONST(0)
+#define NVDLA_CFGROM_CFGROM_SDP_RDMA_BASE_ATOMIC_M_0_SDP_RDMA_BASE_ATOMIC_M_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_SDP_RDMA_BASE_ATOMIC_M_0_SDP_RDMA_BASE_ATOMIC_M_SHIFT)
+
+
+// Register NVDLA_CFGROM_CFGROM_SDP_RDMA_BASE_SDP_ID_0
+#define NVDLA_CFGROM_CFGROM_SDP_RDMA_BASE_SDP_ID_0			_MK_ADDR_CONST(0x120)
+#define NVDLA_CFGROM_CFGROM_SDP_RDMA_BASE_SDP_ID_0_SDP_RDMA_BASE_SDP_ID_SHIFT			_MK_SHIFT_CONST(0)
+#define NVDLA_CFGROM_CFGROM_SDP_RDMA_BASE_SDP_ID_0_SDP_RDMA_BASE_SDP_ID_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_SDP_RDMA_BASE_SDP_ID_0_SDP_RDMA_BASE_SDP_ID_SHIFT)
+
+
+// Register NVDLA_CFGROM_CFGROM_SDP_DESC_0
+#define NVDLA_CFGROM_CFGROM_SDP_DESC_0			_MK_ADDR_CONST(0x124)
+#define NVDLA_CFGROM_CFGROM_SDP_DESC_0_SDP_DESC_SHIFT			_MK_SHIFT_CONST(0)
+#define NVDLA_CFGROM_CFGROM_SDP_DESC_0_SDP_DESC_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_SDP_DESC_0_SDP_DESC_SHIFT)
+
+
+// Register NVDLA_CFGROM_CFGROM_SDP_CAP_INCOMPAT_0
+#define NVDLA_CFGROM_CFGROM_SDP_CAP_INCOMPAT_0			_MK_ADDR_CONST(0x128)
+#define NVDLA_CFGROM_CFGROM_SDP_CAP_INCOMPAT_0_SDP_CAP_INCOMPAT_SHIFT			_MK_SHIFT_CONST(0)
+#define NVDLA_CFGROM_CFGROM_SDP_CAP_INCOMPAT_0_SDP_CAP_INCOMPAT_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_SDP_CAP_INCOMPAT_0_SDP_CAP_INCOMPAT_SHIFT)
+
+
+// Register NVDLA_CFGROM_CFGROM_SDP_CAP_COMPAT_0
+#define NVDLA_CFGROM_CFGROM_SDP_CAP_COMPAT_0			_MK_ADDR_CONST(0x12c)
+#define NVDLA_CFGROM_CFGROM_SDP_CAP_COMPAT_0_SDP_CAP_COMPAT_SHIFT			_MK_SHIFT_CONST(0)
+#define NVDLA_CFGROM_CFGROM_SDP_CAP_COMPAT_0_SDP_CAP_COMPAT_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_SDP_CAP_COMPAT_0_SDP_CAP_COMPAT_SHIFT)
+
+
+// Register NVDLA_CFGROM_CFGROM_SDP_BASE_FEATURE_TYPES_0
+#define NVDLA_CFGROM_CFGROM_SDP_BASE_FEATURE_TYPES_0			_MK_ADDR_CONST(0x130)
+#define NVDLA_CFGROM_CFGROM_SDP_BASE_FEATURE_TYPES_0_SDP_BASE_FEATURE_TYPES_SHIFT			_MK_SHIFT_CONST(0)
+#define NVDLA_CFGROM_CFGROM_SDP_BASE_FEATURE_TYPES_0_SDP_BASE_FEATURE_TYPES_FIELD			_MK_FIELD_CONST(0xfff, NVDLA_CFGROM_CFGROM_SDP_BASE_FEATURE_TYPES_0_SDP_BASE_FEATURE_TYPES_SHIFT)
+
+
+// Register NVDLA_CFGROM_CFGROM_SDP_BASE_WEIGHT_TYPES_0
+#define NVDLA_CFGROM_CFGROM_SDP_BASE_WEIGHT_TYPES_0			_MK_ADDR_CONST(0x134)
+#define NVDLA_CFGROM_CFGROM_SDP_BASE_WEIGHT_TYPES_0_SDP_BASE_WEIGHT_TYPES_SHIFT			_MK_SHIFT_CONST(0)
+#define NVDLA_CFGROM_CFGROM_SDP_BASE_WEIGHT_TYPES_0_SDP_BASE_WEIGHT_TYPES_FIELD			_MK_FIELD_CONST(0xfff, NVDLA_CFGROM_CFGROM_SDP_BASE_WEIGHT_TYPES_0_SDP_BASE_WEIGHT_TYPES_SHIFT)
+
+
+// Register NVDLA_CFGROM_CFGROM_SDP_BASE_CDMA_ID_0
+#define NVDLA_CFGROM_CFGROM_SDP_BASE_CDMA_ID_0			_MK_ADDR_CONST(0x138)
+#define NVDLA_CFGROM_CFGROM_SDP_BASE_CDMA_ID_0_SDP_BASE_CDMA_ID_SHIFT			_MK_SHIFT_CONST(0)
+#define NVDLA_CFGROM_CFGROM_SDP_BASE_CDMA_ID_0_SDP_BASE_CDMA_ID_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_SDP_BASE_CDMA_ID_0_SDP_BASE_CDMA_ID_SHIFT)
+
+
+// Register NVDLA_CFGROM_CFGROM_SDP_MULTI_BATCH_MAX_0
+#define NVDLA_CFGROM_CFGROM_SDP_MULTI_BATCH_MAX_0			_MK_ADDR_CONST(0x13c)
+#define NVDLA_CFGROM_CFGROM_SDP_MULTI_BATCH_MAX_0_SDP_MULTI_BATCH_MAX_SHIFT			_MK_SHIFT_CONST(0)
+#define NVDLA_CFGROM_CFGROM_SDP_MULTI_BATCH_MAX_0_SDP_MULTI_BATCH_MAX_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_SDP_MULTI_BATCH_MAX_0_SDP_MULTI_BATCH_MAX_SHIFT)
+
+
+// Register NVDLA_CFGROM_CFGROM_SDP_BS_THROUGHPUT_0
+#define NVDLA_CFGROM_CFGROM_SDP_BS_THROUGHPUT_0			_MK_ADDR_CONST(0x140)
+#define NVDLA_CFGROM_CFGROM_SDP_BS_THROUGHPUT_0_SDP_BS_THROUGHPUT_SHIFT			_MK_SHIFT_CONST(0)
+#define NVDLA_CFGROM_CFGROM_SDP_BS_THROUGHPUT_0_SDP_BS_THROUGHPUT_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_SDP_BS_THROUGHPUT_0_SDP_BS_THROUGHPUT_SHIFT)
+
+
+// Register NVDLA_CFGROM_CFGROM_SDP_BN_THROUGHPUT_0
+#define NVDLA_CFGROM_CFGROM_SDP_BN_THROUGHPUT_0			_MK_ADDR_CONST(0x144)
+#define NVDLA_CFGROM_CFGROM_SDP_BN_THROUGHPUT_0_SDP_BN_THROUGHPUT_SHIFT			_MK_SHIFT_CONST(0)
+#define NVDLA_CFGROM_CFGROM_SDP_BN_THROUGHPUT_0_SDP_BN_THROUGHPUT_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_SDP_BN_THROUGHPUT_0_SDP_BN_THROUGHPUT_SHIFT)
+
+
+// Register NVDLA_CFGROM_CFGROM_SDP_EW_THROUGHPUT_0
+#define NVDLA_CFGROM_CFGROM_SDP_EW_THROUGHPUT_0			_MK_ADDR_CONST(0x148)
+#define NVDLA_CFGROM_CFGROM_SDP_EW_THROUGHPUT_0_SDP_EW_THROUGHPUT_SHIFT			_MK_SHIFT_CONST(0)
+#define NVDLA_CFGROM_CFGROM_SDP_EW_THROUGHPUT_0_SDP_EW_THROUGHPUT_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_SDP_EW_THROUGHPUT_0_SDP_EW_THROUGHPUT_SHIFT)
+
+
+// Register NVDLA_CFGROM_CFGROM_PDP_RDMA_DESC_0
+#define NVDLA_CFGROM_CFGROM_PDP_RDMA_DESC_0			_MK_ADDR_CONST(0x14c)
+#define NVDLA_CFGROM_CFGROM_PDP_RDMA_DESC_0_PDP_RDMA_DESC_SHIFT			_MK_SHIFT_CONST(0)
+#define NVDLA_CFGROM_CFGROM_PDP_RDMA_DESC_0_PDP_RDMA_DESC_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_PDP_RDMA_DESC_0_PDP_RDMA_DESC_SHIFT)
+
+
+// Register NVDLA_CFGROM_CFGROM_PDP_RDMA_CAP_INCOMPAT_0
+#define NVDLA_CFGROM_CFGROM_PDP_RDMA_CAP_INCOMPAT_0			_MK_ADDR_CONST(0x150)
+#define NVDLA_CFGROM_CFGROM_PDP_RDMA_CAP_INCOMPAT_0_PDP_RDMA_CAP_INCOMPAT_SHIFT			_MK_SHIFT_CONST(0)
+#define NVDLA_CFGROM_CFGROM_PDP_RDMA_CAP_INCOMPAT_0_PDP_RDMA_CAP_INCOMPAT_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_PDP_RDMA_CAP_INCOMPAT_0_PDP_RDMA_CAP_INCOMPAT_SHIFT)
+
+
+// Register NVDLA_CFGROM_CFGROM_PDP_RDMA_CAP_COMPAT_0
+#define NVDLA_CFGROM_CFGROM_PDP_RDMA_CAP_COMPAT_0			_MK_ADDR_CONST(0x154)
+#define NVDLA_CFGROM_CFGROM_PDP_RDMA_CAP_COMPAT_0_PDP_RDMA_CAP_COMPAT_SHIFT			_MK_SHIFT_CONST(0)
+#define NVDLA_CFGROM_CFGROM_PDP_RDMA_CAP_COMPAT_0_PDP_RDMA_CAP_COMPAT_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_PDP_RDMA_CAP_COMPAT_0_PDP_RDMA_CAP_COMPAT_SHIFT)
+
+
+// Register NVDLA_CFGROM_CFGROM_PDP_RDMA_BASE_ATOMIC_M_0
+#define NVDLA_CFGROM_CFGROM_PDP_RDMA_BASE_ATOMIC_M_0			_MK_ADDR_CONST(0x158)
+#define NVDLA_CFGROM_CFGROM_PDP_RDMA_BASE_ATOMIC_M_0_PDP_RDMA_BASE_ATOMIC_M_SHIFT			_MK_SHIFT_CONST(0)
+#define NVDLA_CFGROM_CFGROM_PDP_RDMA_BASE_ATOMIC_M_0_PDP_RDMA_BASE_ATOMIC_M_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_PDP_RDMA_BASE_ATOMIC_M_0_PDP_RDMA_BASE_ATOMIC_M_SHIFT)
+
+
+// Register NVDLA_CFGROM_CFGROM_PDP_RDMA_BASE_PDP_ID_0
+#define NVDLA_CFGROM_CFGROM_PDP_RDMA_BASE_PDP_ID_0			_MK_ADDR_CONST(0x15c)
+#define NVDLA_CFGROM_CFGROM_PDP_RDMA_BASE_PDP_ID_0_PDP_RDMA_BASE_PDP_ID_SHIFT			_MK_SHIFT_CONST(0)
+#define NVDLA_CFGROM_CFGROM_PDP_RDMA_BASE_PDP_ID_0_PDP_RDMA_BASE_PDP_ID_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_PDP_RDMA_BASE_PDP_ID_0_PDP_RDMA_BASE_PDP_ID_SHIFT)
+
+
+// Register NVDLA_CFGROM_CFGROM_PDP_DESC_0
+#define NVDLA_CFGROM_CFGROM_PDP_DESC_0			_MK_ADDR_CONST(0x160)
+#define NVDLA_CFGROM_CFGROM_PDP_DESC_0_PDP_DESC_SHIFT			_MK_SHIFT_CONST(0)
+#define NVDLA_CFGROM_CFGROM_PDP_DESC_0_PDP_DESC_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_PDP_DESC_0_PDP_DESC_SHIFT)
+
+
+// Register NVDLA_CFGROM_CFGROM_PDP_CAP_INCOMPAT_0
+#define NVDLA_CFGROM_CFGROM_PDP_CAP_INCOMPAT_0			_MK_ADDR_CONST(0x164)
+#define NVDLA_CFGROM_CFGROM_PDP_CAP_INCOMPAT_0_PDP_CAP_INCOMPAT_SHIFT			_MK_SHIFT_CONST(0)
+#define NVDLA_CFGROM_CFGROM_PDP_CAP_INCOMPAT_0_PDP_CAP_INCOMPAT_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_PDP_CAP_INCOMPAT_0_PDP_CAP_INCOMPAT_SHIFT)
+
+
+// Register NVDLA_CFGROM_CFGROM_PDP_CAP_COMPAT_0
+#define NVDLA_CFGROM_CFGROM_PDP_CAP_COMPAT_0			_MK_ADDR_CONST(0x168)
+#define NVDLA_CFGROM_CFGROM_PDP_CAP_COMPAT_0_PDP_CAP_COMPAT_SHIFT			_MK_SHIFT_CONST(0)
+#define NVDLA_CFGROM_CFGROM_PDP_CAP_COMPAT_0_PDP_CAP_COMPAT_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_PDP_CAP_COMPAT_0_PDP_CAP_COMPAT_SHIFT)
+
+
+// Register NVDLA_CFGROM_CFGROM_PDP_BASE_FEATURE_TYPES_0
+#define NVDLA_CFGROM_CFGROM_PDP_BASE_FEATURE_TYPES_0			_MK_ADDR_CONST(0x16c)
+#define NVDLA_CFGROM_CFGROM_PDP_BASE_FEATURE_TYPES_0_PDP_BASE_FEATURE_TYPES_SHIFT			_MK_SHIFT_CONST(0)
+#define NVDLA_CFGROM_CFGROM_PDP_BASE_FEATURE_TYPES_0_PDP_BASE_FEATURE_TYPES_FIELD			_MK_FIELD_CONST(0xfff, NVDLA_CFGROM_CFGROM_PDP_BASE_FEATURE_TYPES_0_PDP_BASE_FEATURE_TYPES_SHIFT)
+
+
+// Register NVDLA_CFGROM_CFGROM_PDP_BASE_THROUGHPUT_0
+#define NVDLA_CFGROM_CFGROM_PDP_BASE_THROUGHPUT_0			_MK_ADDR_CONST(0x170)
+#define NVDLA_CFGROM_CFGROM_PDP_BASE_THROUGHPUT_0_PDP_BASE_THROUGHPUT_SHIFT			_MK_SHIFT_CONST(0)
+#define NVDLA_CFGROM_CFGROM_PDP_BASE_THROUGHPUT_0_PDP_BASE_THROUGHPUT_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_PDP_BASE_THROUGHPUT_0_PDP_BASE_THROUGHPUT_SHIFT)
+
+
+// Register NVDLA_CFGROM_CFGROM_CDP_RDMA_DESC_0
+#define NVDLA_CFGROM_CFGROM_CDP_RDMA_DESC_0			_MK_ADDR_CONST(0x174)
+#define NVDLA_CFGROM_CFGROM_CDP_RDMA_DESC_0_CDP_RDMA_DESC_SHIFT			_MK_SHIFT_CONST(0)
+#define NVDLA_CFGROM_CFGROM_CDP_RDMA_DESC_0_CDP_RDMA_DESC_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CDP_RDMA_DESC_0_CDP_RDMA_DESC_SHIFT)
+
+
+// Register NVDLA_CFGROM_CFGROM_CDP_RDMA_CAP_INCOMPAT_0
+#define NVDLA_CFGROM_CFGROM_CDP_RDMA_CAP_INCOMPAT_0			_MK_ADDR_CONST(0x178)
+#define NVDLA_CFGROM_CFGROM_CDP_RDMA_CAP_INCOMPAT_0_CDP_RDMA_CAP_INCOMPAT_SHIFT			_MK_SHIFT_CONST(0)
+#define NVDLA_CFGROM_CFGROM_CDP_RDMA_CAP_INCOMPAT_0_CDP_RDMA_CAP_INCOMPAT_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CDP_RDMA_CAP_INCOMPAT_0_CDP_RDMA_CAP_INCOMPAT_SHIFT)
+
+
+// Register NVDLA_CFGROM_CFGROM_CDP_RDMA_CAP_COMPAT_0
+#define NVDLA_CFGROM_CFGROM_CDP_RDMA_CAP_COMPAT_0			_MK_ADDR_CONST(0x17c)
+#define NVDLA_CFGROM_CFGROM_CDP_RDMA_CAP_COMPAT_0_CDP_RDMA_CAP_COMPAT_SHIFT			_MK_SHIFT_CONST(0)
+#define NVDLA_CFGROM_CFGROM_CDP_RDMA_CAP_COMPAT_0_CDP_RDMA_CAP_COMPAT_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CDP_RDMA_CAP_COMPAT_0_CDP_RDMA_CAP_COMPAT_SHIFT)
+
+
+// Register NVDLA_CFGROM_CFGROM_CDP_RDMA_BASE_ATOMIC_M_0
+#define NVDLA_CFGROM_CFGROM_CDP_RDMA_BASE_ATOMIC_M_0			_MK_ADDR_CONST(0x180)
+#define NVDLA_CFGROM_CFGROM_CDP_RDMA_BASE_ATOMIC_M_0_CDP_RDMA_BASE_ATOMIC_M_SHIFT			_MK_SHIFT_CONST(0)
+#define NVDLA_CFGROM_CFGROM_CDP_RDMA_BASE_ATOMIC_M_0_CDP_RDMA_BASE_ATOMIC_M_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CDP_RDMA_BASE_ATOMIC_M_0_CDP_RDMA_BASE_ATOMIC_M_SHIFT)
+
+
+// Register NVDLA_CFGROM_CFGROM_CDP_RDMA_BASE_CDP_ID_0
+#define NVDLA_CFGROM_CFGROM_CDP_RDMA_BASE_CDP_ID_0			_MK_ADDR_CONST(0x184)
+#define NVDLA_CFGROM_CFGROM_CDP_RDMA_BASE_CDP_ID_0_CDP_RDMA_BASE_CDP_ID_SHIFT			_MK_SHIFT_CONST(0)
+#define NVDLA_CFGROM_CFGROM_CDP_RDMA_BASE_CDP_ID_0_CDP_RDMA_BASE_CDP_ID_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CDP_RDMA_BASE_CDP_ID_0_CDP_RDMA_BASE_CDP_ID_SHIFT)
+
+
+// Register NVDLA_CFGROM_CFGROM_CDP_DESC_0
+#define NVDLA_CFGROM_CFGROM_CDP_DESC_0			_MK_ADDR_CONST(0x188)
+#define NVDLA_CFGROM_CFGROM_CDP_DESC_0_CDP_DESC_SHIFT			_MK_SHIFT_CONST(0)
+#define NVDLA_CFGROM_CFGROM_CDP_DESC_0_CDP_DESC_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CDP_DESC_0_CDP_DESC_SHIFT)
+
+
+// Register NVDLA_CFGROM_CFGROM_CDP_CAP_INCOMPAT_0
+#define NVDLA_CFGROM_CFGROM_CDP_CAP_INCOMPAT_0			_MK_ADDR_CONST(0x18c)
+#define NVDLA_CFGROM_CFGROM_CDP_CAP_INCOMPAT_0_CDP_CAP_INCOMPAT_SHIFT			_MK_SHIFT_CONST(0)
+#define NVDLA_CFGROM_CFGROM_CDP_CAP_INCOMPAT_0_CDP_CAP_INCOMPAT_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CDP_CAP_INCOMPAT_0_CDP_CAP_INCOMPAT_SHIFT)
+
+
+// Register NVDLA_CFGROM_CFGROM_CDP_CAP_COMPAT_0
+#define NVDLA_CFGROM_CFGROM_CDP_CAP_COMPAT_0			_MK_ADDR_CONST(0x190)
+#define NVDLA_CFGROM_CFGROM_CDP_CAP_COMPAT_0_CDP_CAP_COMPAT_SHIFT			_MK_SHIFT_CONST(0)
+#define NVDLA_CFGROM_CFGROM_CDP_CAP_COMPAT_0_CDP_CAP_COMPAT_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CDP_CAP_COMPAT_0_CDP_CAP_COMPAT_SHIFT)
+
+
+// Register NVDLA_CFGROM_CFGROM_CDP_BASE_FEATURE_TYPES_0
+#define NVDLA_CFGROM_CFGROM_CDP_BASE_FEATURE_TYPES_0			_MK_ADDR_CONST(0x194)
+#define NVDLA_CFGROM_CFGROM_CDP_BASE_FEATURE_TYPES_0_CDP_BASE_FEATURE_TYPES_SHIFT			_MK_SHIFT_CONST(0)
+#define NVDLA_CFGROM_CFGROM_CDP_BASE_FEATURE_TYPES_0_CDP_BASE_FEATURE_TYPES_FIELD			_MK_FIELD_CONST(0xfff, NVDLA_CFGROM_CFGROM_CDP_BASE_FEATURE_TYPES_0_CDP_BASE_FEATURE_TYPES_SHIFT)
+
+
+// Register NVDLA_CFGROM_CFGROM_CDP_BASE_THROUGHPUT_0
+#define NVDLA_CFGROM_CFGROM_CDP_BASE_THROUGHPUT_0			_MK_ADDR_CONST(0x198)
+#define NVDLA_CFGROM_CFGROM_CDP_BASE_THROUGHPUT_0_CDP_BASE_THROUGHPUT_SHIFT			_MK_SHIFT_CONST(0)
+#define NVDLA_CFGROM_CFGROM_CDP_BASE_THROUGHPUT_0_CDP_BASE_THROUGHPUT_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CDP_BASE_THROUGHPUT_0_CDP_BASE_THROUGHPUT_SHIFT)
+
+
+// Register NVDLA_CFGROM_CFGROM_END_OF_LIST_0
+#define NVDLA_CFGROM_CFGROM_END_OF_LIST_0			_MK_ADDR_CONST(0x19c)
+#define NVDLA_CFGROM_CFGROM_END_OF_LIST_0_END_OF_LIST_SHIFT			_MK_SHIFT_CONST(0)
+#define NVDLA_CFGROM_CFGROM_END_OF_LIST_0_END_OF_LIST_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_END_OF_LIST_0_END_OF_LIST_SHIFT)
+
+
+
+// To satisfy various compilers and platforms,
+// we let users control the types and syntax of certain constants, using macros.
+#ifndef _MK_SHIFT_CONST
+  #define _MK_SHIFT_CONST(_constant_) _constant_
+#endif
+#ifndef _MK_MASK_CONST
+  #define _MK_MASK_CONST(_constant_) _constant_
+#endif
+#ifndef _MK_ENUM_CONST
+  #define _MK_ENUM_CONST(_constant_) (_constant_ ## UL)
+#endif
+#ifndef _MK_ADDR_CONST
+  #define _MK_ADDR_CONST(_constant_) _constant_
+#endif
+#ifndef _MK_FIELD_CONST
+  #define _MK_FIELD_CONST(_mask_, _shift_) (_MK_MASK_CONST(_mask_) << _MK_SHIFT_CONST(_shift_))
+#endif
+
+
+// Register GLB_S_NVDLA_HW_VERSION_0
+#define GLB_S_NVDLA_HW_VERSION_0			_MK_ADDR_CONST(0x1000)
+#define GLB_S_NVDLA_HW_VERSION_0_MAJOR_SHIFT			_MK_SHIFT_CONST(0)
+#define GLB_S_NVDLA_HW_VERSION_0_MAJOR_FIELD			_MK_FIELD_CONST(0xff, GLB_S_NVDLA_HW_VERSION_0_MAJOR_SHIFT)
+#define GLB_S_NVDLA_HW_VERSION_0_MINOR_SHIFT			_MK_SHIFT_CONST(8)
+#define GLB_S_NVDLA_HW_VERSION_0_MINOR_FIELD			_MK_FIELD_CONST(0xffff, GLB_S_NVDLA_HW_VERSION_0_MINOR_SHIFT)
+
+
+// Register GLB_S_INTR_MASK_0
+#define GLB_S_INTR_MASK_0			_MK_ADDR_CONST(0x1004)
+#define GLB_S_INTR_MASK_0_SDP_DONE_MASK0_SHIFT			_MK_SHIFT_CONST(0)
+#define GLB_S_INTR_MASK_0_SDP_DONE_MASK0_FIELD			_MK_FIELD_CONST(0x1, GLB_S_INTR_MASK_0_SDP_DONE_MASK0_SHIFT)
+#define GLB_S_INTR_MASK_0_SDP_DONE_MASK1_SHIFT			_MK_SHIFT_CONST(1)
+#define GLB_S_INTR_MASK_0_SDP_DONE_MASK1_FIELD			_MK_FIELD_CONST(0x1, GLB_S_INTR_MASK_0_SDP_DONE_MASK1_SHIFT)
+#define GLB_S_INTR_MASK_0_CDP_DONE_MASK0_SHIFT			_MK_SHIFT_CONST(2)
+#define GLB_S_INTR_MASK_0_CDP_DONE_MASK0_FIELD			_MK_FIELD_CONST(0x1, GLB_S_INTR_MASK_0_CDP_DONE_MASK0_SHIFT)
+#define GLB_S_INTR_MASK_0_CDP_DONE_MASK1_SHIFT			_MK_SHIFT_CONST(3)
+#define GLB_S_INTR_MASK_0_CDP_DONE_MASK1_FIELD			_MK_FIELD_CONST(0x1, GLB_S_INTR_MASK_0_CDP_DONE_MASK1_SHIFT)
+#define GLB_S_INTR_MASK_0_PDP_DONE_MASK0_SHIFT			_MK_SHIFT_CONST(4)
+#define GLB_S_INTR_MASK_0_PDP_DONE_MASK0_FIELD			_MK_FIELD_CONST(0x1, GLB_S_INTR_MASK_0_PDP_DONE_MASK0_SHIFT)
+#define GLB_S_INTR_MASK_0_PDP_DONE_MASK1_SHIFT			_MK_SHIFT_CONST(5)
+#define GLB_S_INTR_MASK_0_PDP_DONE_MASK1_FIELD			_MK_FIELD_CONST(0x1, GLB_S_INTR_MASK_0_PDP_DONE_MASK1_SHIFT)
+#define GLB_S_INTR_MASK_0_BDMA_DONE_MASK0_SHIFT			_MK_SHIFT_CONST(6)
+#define GLB_S_INTR_MASK_0_BDMA_DONE_MASK0_FIELD			_MK_FIELD_CONST(0x1, GLB_S_INTR_MASK_0_BDMA_DONE_MASK0_SHIFT)
+#define GLB_S_INTR_MASK_0_BDMA_DONE_MASK1_SHIFT			_MK_SHIFT_CONST(7)
+#define GLB_S_INTR_MASK_0_BDMA_DONE_MASK1_FIELD			_MK_FIELD_CONST(0x1, GLB_S_INTR_MASK_0_BDMA_DONE_MASK1_SHIFT)
+#define GLB_S_INTR_MASK_0_RUBIK_DONE_MASK0_SHIFT			_MK_SHIFT_CONST(8)
+#define GLB_S_INTR_MASK_0_RUBIK_DONE_MASK0_FIELD			_MK_FIELD_CONST(0x1, GLB_S_INTR_MASK_0_RUBIK_DONE_MASK0_SHIFT)
+#define GLB_S_INTR_MASK_0_RUBIK_DONE_MASK1_SHIFT			_MK_SHIFT_CONST(9)
+#define GLB_S_INTR_MASK_0_RUBIK_DONE_MASK1_FIELD			_MK_FIELD_CONST(0x1, GLB_S_INTR_MASK_0_RUBIK_DONE_MASK1_SHIFT)
+#define GLB_S_INTR_MASK_0_CDMA_DAT_DONE_MASK0_SHIFT			_MK_SHIFT_CONST(16)
+#define GLB_S_INTR_MASK_0_CDMA_DAT_DONE_MASK0_FIELD			_MK_FIELD_CONST(0x1, GLB_S_INTR_MASK_0_CDMA_DAT_DONE_MASK0_SHIFT)
+#define GLB_S_INTR_MASK_0_CDMA_DAT_DONE_MASK1_SHIFT			_MK_SHIFT_CONST(17)
+#define GLB_S_INTR_MASK_0_CDMA_DAT_DONE_MASK1_FIELD			_MK_FIELD_CONST(0x1, GLB_S_INTR_MASK_0_CDMA_DAT_DONE_MASK1_SHIFT)
+#define GLB_S_INTR_MASK_0_CDMA_WT_DONE_MASK0_SHIFT			_MK_SHIFT_CONST(18)
+#define GLB_S_INTR_MASK_0_CDMA_WT_DONE_MASK0_FIELD			_MK_FIELD_CONST(0x1, GLB_S_INTR_MASK_0_CDMA_WT_DONE_MASK0_SHIFT)
+#define GLB_S_INTR_MASK_0_CDMA_WT_DONE_MASK1_SHIFT			_MK_SHIFT_CONST(19)
+#define GLB_S_INTR_MASK_0_CDMA_WT_DONE_MASK1_FIELD			_MK_FIELD_CONST(0x1, GLB_S_INTR_MASK_0_CDMA_WT_DONE_MASK1_SHIFT)
+#define GLB_S_INTR_MASK_0_CACC_DONE_MASK0_SHIFT			_MK_SHIFT_CONST(20)
+#define GLB_S_INTR_MASK_0_CACC_DONE_MASK0_FIELD			_MK_FIELD_CONST(0x1, GLB_S_INTR_MASK_0_CACC_DONE_MASK0_SHIFT)
+#define GLB_S_INTR_MASK_0_CACC_DONE_MASK1_SHIFT			_MK_SHIFT_CONST(21)
+#define GLB_S_INTR_MASK_0_CACC_DONE_MASK1_FIELD			_MK_FIELD_CONST(0x1, GLB_S_INTR_MASK_0_CACC_DONE_MASK1_SHIFT)
+
+
+// Register GLB_S_INTR_SET_0
+#define GLB_S_INTR_SET_0			_MK_ADDR_CONST(0x1008)
+#define GLB_S_INTR_SET_0_SDP_DONE_SET0_SHIFT			_MK_SHIFT_CONST(0)
+#define GLB_S_INTR_SET_0_SDP_DONE_SET0_FIELD			_MK_FIELD_CONST(0x1, GLB_S_INTR_SET_0_SDP_DONE_SET0_SHIFT)
+#define GLB_S_INTR_SET_0_SDP_DONE_SET1_SHIFT			_MK_SHIFT_CONST(1)
+#define GLB_S_INTR_SET_0_SDP_DONE_SET1_FIELD			_MK_FIELD_CONST(0x1, GLB_S_INTR_SET_0_SDP_DONE_SET1_SHIFT)
+#define GLB_S_INTR_SET_0_CDP_DONE_SET0_SHIFT			_MK_SHIFT_CONST(2)
+#define GLB_S_INTR_SET_0_CDP_DONE_SET0_FIELD			_MK_FIELD_CONST(0x1, GLB_S_INTR_SET_0_CDP_DONE_SET0_SHIFT)
+#define GLB_S_INTR_SET_0_CDP_DONE_SET1_SHIFT			_MK_SHIFT_CONST(3)
+#define GLB_S_INTR_SET_0_CDP_DONE_SET1_FIELD			_MK_FIELD_CONST(0x1, GLB_S_INTR_SET_0_CDP_DONE_SET1_SHIFT)
+#define GLB_S_INTR_SET_0_PDP_DONE_SET0_SHIFT			_MK_SHIFT_CONST(4)
+#define GLB_S_INTR_SET_0_PDP_DONE_SET0_FIELD			_MK_FIELD_CONST(0x1, GLB_S_INTR_SET_0_PDP_DONE_SET0_SHIFT)
+#define GLB_S_INTR_SET_0_PDP_DONE_SET1_SHIFT			_MK_SHIFT_CONST(5)
+#define GLB_S_INTR_SET_0_PDP_DONE_SET1_FIELD			_MK_FIELD_CONST(0x1, GLB_S_INTR_SET_0_PDP_DONE_SET1_SHIFT)
+#define GLB_S_INTR_SET_0_BDMA_DONE_SET0_SHIFT			_MK_SHIFT_CONST(6)
+#define GLB_S_INTR_SET_0_BDMA_DONE_SET0_FIELD			_MK_FIELD_CONST(0x1, GLB_S_INTR_SET_0_BDMA_DONE_SET0_SHIFT)
+#define GLB_S_INTR_SET_0_BDMA_DONE_SET1_SHIFT			_MK_SHIFT_CONST(7)
+#define GLB_S_INTR_SET_0_BDMA_DONE_SET1_FIELD			_MK_FIELD_CONST(0x1, GLB_S_INTR_SET_0_BDMA_DONE_SET1_SHIFT)
+#define GLB_S_INTR_SET_0_RUBIK_DONE_SET0_SHIFT			_MK_SHIFT_CONST(8)
+#define GLB_S_INTR_SET_0_RUBIK_DONE_SET0_FIELD			_MK_FIELD_CONST(0x1, GLB_S_INTR_SET_0_RUBIK_DONE_SET0_SHIFT)
+#define GLB_S_INTR_SET_0_RUBIK_DONE_SET1_SHIFT			_MK_SHIFT_CONST(9)
+#define GLB_S_INTR_SET_0_RUBIK_DONE_SET1_FIELD			_MK_FIELD_CONST(0x1, GLB_S_INTR_SET_0_RUBIK_DONE_SET1_SHIFT)
+#define GLB_S_INTR_SET_0_CDMA_DAT_DONE_SET0_SHIFT			_MK_SHIFT_CONST(16)
+#define GLB_S_INTR_SET_0_CDMA_DAT_DONE_SET0_FIELD			_MK_FIELD_CONST(0x1, GLB_S_INTR_SET_0_CDMA_DAT_DONE_SET0_SHIFT)
+#define GLB_S_INTR_SET_0_CDMA_DAT_DONE_SET1_SHIFT			_MK_SHIFT_CONST(17)
+#define GLB_S_INTR_SET_0_CDMA_DAT_DONE_SET1_FIELD			_MK_FIELD_CONST(0x1, GLB_S_INTR_SET_0_CDMA_DAT_DONE_SET1_SHIFT)
+#define GLB_S_INTR_SET_0_CDMA_WT_DONE_SET0_SHIFT			_MK_SHIFT_CONST(18)
+#define GLB_S_INTR_SET_0_CDMA_WT_DONE_SET0_FIELD			_MK_FIELD_CONST(0x1, GLB_S_INTR_SET_0_CDMA_WT_DONE_SET0_SHIFT)
+#define GLB_S_INTR_SET_0_CDMA_WT_DONE_SET1_SHIFT			_MK_SHIFT_CONST(19)
+#define GLB_S_INTR_SET_0_CDMA_WT_DONE_SET1_FIELD			_MK_FIELD_CONST(0x1, GLB_S_INTR_SET_0_CDMA_WT_DONE_SET1_SHIFT)
+#define GLB_S_INTR_SET_0_CACC_DONE_SET0_SHIFT			_MK_SHIFT_CONST(20)
+#define GLB_S_INTR_SET_0_CACC_DONE_SET0_FIELD			_MK_FIELD_CONST(0x1, GLB_S_INTR_SET_0_CACC_DONE_SET0_SHIFT)
+#define GLB_S_INTR_SET_0_CACC_DONE_SET1_SHIFT			_MK_SHIFT_CONST(21)
+#define GLB_S_INTR_SET_0_CACC_DONE_SET1_FIELD			_MK_FIELD_CONST(0x1, GLB_S_INTR_SET_0_CACC_DONE_SET1_SHIFT)
+
+
+// Register GLB_S_INTR_STATUS_0
+#define GLB_S_INTR_STATUS_0			_MK_ADDR_CONST(0x100c)
+#define GLB_S_INTR_STATUS_0_SDP_DONE_STATUS0_SHIFT			_MK_SHIFT_CONST(0)
+#define GLB_S_INTR_STATUS_0_SDP_DONE_STATUS0_FIELD			_MK_FIELD_CONST(0x1, GLB_S_INTR_STATUS_0_SDP_DONE_STATUS0_SHIFT)
+#define GLB_S_INTR_STATUS_0_SDP_DONE_STATUS1_SHIFT			_MK_SHIFT_CONST(1)
+#define GLB_S_INTR_STATUS_0_SDP_DONE_STATUS1_FIELD			_MK_FIELD_CONST(0x1, GLB_S_INTR_STATUS_0_SDP_DONE_STATUS1_SHIFT)
+#define GLB_S_INTR_STATUS_0_CDP_DONE_STATUS0_SHIFT			_MK_SHIFT_CONST(2)
+#define GLB_S_INTR_STATUS_0_CDP_DONE_STATUS0_FIELD			_MK_FIELD_CONST(0x1, GLB_S_INTR_STATUS_0_CDP_DONE_STATUS0_SHIFT)
+#define GLB_S_INTR_STATUS_0_CDP_DONE_STATUS1_SHIFT			_MK_SHIFT_CONST(3)
+#define GLB_S_INTR_STATUS_0_CDP_DONE_STATUS1_FIELD			_MK_FIELD_CONST(0x1, GLB_S_INTR_STATUS_0_CDP_DONE_STATUS1_SHIFT)
+#define GLB_S_INTR_STATUS_0_PDP_DONE_STATUS0_SHIFT			_MK_SHIFT_CONST(4)
+#define GLB_S_INTR_STATUS_0_PDP_DONE_STATUS0_FIELD			_MK_FIELD_CONST(0x1, GLB_S_INTR_STATUS_0_PDP_DONE_STATUS0_SHIFT)
+#define GLB_S_INTR_STATUS_0_PDP_DONE_STATUS1_SHIFT			_MK_SHIFT_CONST(5)
+#define GLB_S_INTR_STATUS_0_PDP_DONE_STATUS1_FIELD			_MK_FIELD_CONST(0x1, GLB_S_INTR_STATUS_0_PDP_DONE_STATUS1_SHIFT)
+#define GLB_S_INTR_STATUS_0_BDMA_DONE_STATUS0_SHIFT			_MK_SHIFT_CONST(6)
+#define GLB_S_INTR_STATUS_0_BDMA_DONE_STATUS0_FIELD			_MK_FIELD_CONST(0x1, GLB_S_INTR_STATUS_0_BDMA_DONE_STATUS0_SHIFT)
+#define GLB_S_INTR_STATUS_0_BDMA_DONE_STATUS1_SHIFT			_MK_SHIFT_CONST(7)
+#define GLB_S_INTR_STATUS_0_BDMA_DONE_STATUS1_FIELD			_MK_FIELD_CONST(0x1, GLB_S_INTR_STATUS_0_BDMA_DONE_STATUS1_SHIFT)
+#define GLB_S_INTR_STATUS_0_RUBIK_DONE_STATUS0_SHIFT			_MK_SHIFT_CONST(8)
+#define GLB_S_INTR_STATUS_0_RUBIK_DONE_STATUS0_FIELD			_MK_FIELD_CONST(0x1, GLB_S_INTR_STATUS_0_RUBIK_DONE_STATUS0_SHIFT)
+#define GLB_S_INTR_STATUS_0_RUBIK_DONE_STATUS1_SHIFT			_MK_SHIFT_CONST(9)
+#define GLB_S_INTR_STATUS_0_RUBIK_DONE_STATUS1_FIELD			_MK_FIELD_CONST(0x1, GLB_S_INTR_STATUS_0_RUBIK_DONE_STATUS1_SHIFT)
+#define GLB_S_INTR_STATUS_0_CDMA_DAT_DONE_STATUS0_SHIFT			_MK_SHIFT_CONST(16)
+#define GLB_S_INTR_STATUS_0_CDMA_DAT_DONE_STATUS0_FIELD			_MK_FIELD_CONST(0x1, GLB_S_INTR_STATUS_0_CDMA_DAT_DONE_STATUS0_SHIFT)
+#define GLB_S_INTR_STATUS_0_CDMA_DAT_DONE_STATUS1_SHIFT			_MK_SHIFT_CONST(17)
+#define GLB_S_INTR_STATUS_0_CDMA_DAT_DONE_STATUS1_FIELD			_MK_FIELD_CONST(0x1, GLB_S_INTR_STATUS_0_CDMA_DAT_DONE_STATUS1_SHIFT)
+#define GLB_S_INTR_STATUS_0_CDMA_WT_DONE_STATUS0_SHIFT			_MK_SHIFT_CONST(18)
+#define GLB_S_INTR_STATUS_0_CDMA_WT_DONE_STATUS0_FIELD			_MK_FIELD_CONST(0x1, GLB_S_INTR_STATUS_0_CDMA_WT_DONE_STATUS0_SHIFT)
+#define GLB_S_INTR_STATUS_0_CDMA_WT_DONE_STATUS1_SHIFT			_MK_SHIFT_CONST(19)
+#define GLB_S_INTR_STATUS_0_CDMA_WT_DONE_STATUS1_FIELD			_MK_FIELD_CONST(0x1, GLB_S_INTR_STATUS_0_CDMA_WT_DONE_STATUS1_SHIFT)
+#define GLB_S_INTR_STATUS_0_CACC_DONE_STATUS0_SHIFT			_MK_SHIFT_CONST(20)
+#define GLB_S_INTR_STATUS_0_CACC_DONE_STATUS0_FIELD			_MK_FIELD_CONST(0x1, GLB_S_INTR_STATUS_0_CACC_DONE_STATUS0_SHIFT)
+#define GLB_S_INTR_STATUS_0_CACC_DONE_STATUS1_SHIFT			_MK_SHIFT_CONST(21)
+#define GLB_S_INTR_STATUS_0_CACC_DONE_STATUS1_FIELD			_MK_FIELD_CONST(0x1, GLB_S_INTR_STATUS_0_CACC_DONE_STATUS1_SHIFT)
+
+
+
+// To satisfy various compilers and platforms,
+// we let users control the types and syntax of certain constants, using macros.
+#ifndef _MK_SHIFT_CONST
+  #define _MK_SHIFT_CONST(_constant_) _constant_
+#endif
+#ifndef _MK_MASK_CONST
+  #define _MK_MASK_CONST(_constant_) _constant_
+#endif
+#ifndef _MK_ENUM_CONST
+  #define _MK_ENUM_CONST(_constant_) (_constant_ ## UL)
+#endif
+#ifndef _MK_ADDR_CONST
+  #define _MK_ADDR_CONST(_constant_) _constant_
+#endif
+#ifndef _MK_FIELD_CONST
+  #define _MK_FIELD_CONST(_mask_, _shift_) (_MK_MASK_CONST(_mask_) << _MK_SHIFT_CONST(_shift_))
+#endif
+
+
+// Register NVDLA_MCIF_CFG_RD_WEIGHT_0_0
+#define NVDLA_MCIF_CFG_RD_WEIGHT_0_0			_MK_ADDR_CONST(0x2000)
+#define NVDLA_MCIF_CFG_RD_WEIGHT_0_0_RD_WEIGHT_BDMA_SHIFT			_MK_SHIFT_CONST(0)
+#define NVDLA_MCIF_CFG_RD_WEIGHT_0_0_RD_WEIGHT_BDMA_FIELD			_MK_FIELD_CONST(0xff, NVDLA_MCIF_CFG_RD_WEIGHT_0_0_RD_WEIGHT_BDMA_SHIFT)
+#define NVDLA_MCIF_CFG_RD_WEIGHT_0_0_RD_WEIGHT_SDP_SHIFT			_MK_SHIFT_CONST(8)
+#define NVDLA_MCIF_CFG_RD_WEIGHT_0_0_RD_WEIGHT_SDP_FIELD			_MK_FIELD_CONST(0xff, NVDLA_MCIF_CFG_RD_WEIGHT_0_0_RD_WEIGHT_SDP_SHIFT)
+#define NVDLA_MCIF_CFG_RD_WEIGHT_0_0_RD_WEIGHT_PDP_SHIFT			_MK_SHIFT_CONST(16)
+#define NVDLA_MCIF_CFG_RD_WEIGHT_0_0_RD_WEIGHT_PDP_FIELD			_MK_FIELD_CONST(0xff, NVDLA_MCIF_CFG_RD_WEIGHT_0_0_RD_WEIGHT_PDP_SHIFT)
+#define NVDLA_MCIF_CFG_RD_WEIGHT_0_0_RD_WEIGHT_CDP_SHIFT			_MK_SHIFT_CONST(24)
+#define NVDLA_MCIF_CFG_RD_WEIGHT_0_0_RD_WEIGHT_CDP_FIELD			_MK_FIELD_CONST(0xff, NVDLA_MCIF_CFG_RD_WEIGHT_0_0_RD_WEIGHT_CDP_SHIFT)
+
+
+// Register NVDLA_MCIF_CFG_RD_WEIGHT_1_0
+#define NVDLA_MCIF_CFG_RD_WEIGHT_1_0			_MK_ADDR_CONST(0x2004)
+#define NVDLA_MCIF_CFG_RD_WEIGHT_1_0_RD_WEIGHT_SDP_B_SHIFT			_MK_SHIFT_CONST(0)
+#define NVDLA_MCIF_CFG_RD_WEIGHT_1_0_RD_WEIGHT_SDP_B_FIELD			_MK_FIELD_CONST(0xff, NVDLA_MCIF_CFG_RD_WEIGHT_1_0_RD_WEIGHT_SDP_B_SHIFT)
+#define NVDLA_MCIF_CFG_RD_WEIGHT_1_0_RD_WEIGHT_SDP_N_SHIFT			_MK_SHIFT_CONST(8)
+#define NVDLA_MCIF_CFG_RD_WEIGHT_1_0_RD_WEIGHT_SDP_N_FIELD			_MK_FIELD_CONST(0xff, NVDLA_MCIF_CFG_RD_WEIGHT_1_0_RD_WEIGHT_SDP_N_SHIFT)
+#define NVDLA_MCIF_CFG_RD_WEIGHT_1_0_RD_WEIGHT_SDP_E_SHIFT			_MK_SHIFT_CONST(16)
+#define NVDLA_MCIF_CFG_RD_WEIGHT_1_0_RD_WEIGHT_SDP_E_FIELD			_MK_FIELD_CONST(0xff, NVDLA_MCIF_CFG_RD_WEIGHT_1_0_RD_WEIGHT_SDP_E_SHIFT)
+#define NVDLA_MCIF_CFG_RD_WEIGHT_1_0_RD_WEIGHT_CDMA_DAT_SHIFT			_MK_SHIFT_CONST(24)
+#define NVDLA_MCIF_CFG_RD_WEIGHT_1_0_RD_WEIGHT_CDMA_DAT_FIELD			_MK_FIELD_CONST(0xff, NVDLA_MCIF_CFG_RD_WEIGHT_1_0_RD_WEIGHT_CDMA_DAT_SHIFT)
+
+
+// Register NVDLA_MCIF_CFG_RD_WEIGHT_2_0
+#define NVDLA_MCIF_CFG_RD_WEIGHT_2_0			_MK_ADDR_CONST(0x2008)
+#define NVDLA_MCIF_CFG_RD_WEIGHT_2_0_RD_WEIGHT_CDMA_WT_SHIFT			_MK_SHIFT_CONST(0)
+#define NVDLA_MCIF_CFG_RD_WEIGHT_2_0_RD_WEIGHT_CDMA_WT_FIELD			_MK_FIELD_CONST(0xff, NVDLA_MCIF_CFG_RD_WEIGHT_2_0_RD_WEIGHT_CDMA_WT_SHIFT)
+#define NVDLA_MCIF_CFG_RD_WEIGHT_2_0_RD_WEIGHT_RBK_SHIFT			_MK_SHIFT_CONST(8)
+#define NVDLA_MCIF_CFG_RD_WEIGHT_2_0_RD_WEIGHT_RBK_FIELD			_MK_FIELD_CONST(0xff, NVDLA_MCIF_CFG_RD_WEIGHT_2_0_RD_WEIGHT_RBK_SHIFT)
+#define NVDLA_MCIF_CFG_RD_WEIGHT_2_0_RD_WEIGHT_RSV_1_SHIFT			_MK_SHIFT_CONST(16)
+#define NVDLA_MCIF_CFG_RD_WEIGHT_2_0_RD_WEIGHT_RSV_1_FIELD			_MK_FIELD_CONST(0xff, NVDLA_MCIF_CFG_RD_WEIGHT_2_0_RD_WEIGHT_RSV_1_SHIFT)
+#define NVDLA_MCIF_CFG_RD_WEIGHT_2_0_RD_WEIGHT_RSV_0_SHIFT			_MK_SHIFT_CONST(24)
+#define NVDLA_MCIF_CFG_RD_WEIGHT_2_0_RD_WEIGHT_RSV_0_FIELD			_MK_FIELD_CONST(0xff, NVDLA_MCIF_CFG_RD_WEIGHT_2_0_RD_WEIGHT_RSV_0_SHIFT)
+
+
+// Register NVDLA_MCIF_CFG_WR_WEIGHT_0_0
+#define NVDLA_MCIF_CFG_WR_WEIGHT_0_0			_MK_ADDR_CONST(0x200c)
+#define NVDLA_MCIF_CFG_WR_WEIGHT_0_0_WR_WEIGHT_BDMA_SHIFT			_MK_SHIFT_CONST(0)
+#define NVDLA_MCIF_CFG_WR_WEIGHT_0_0_WR_WEIGHT_BDMA_FIELD			_MK_FIELD_CONST(0xff, NVDLA_MCIF_CFG_WR_WEIGHT_0_0_WR_WEIGHT_BDMA_SHIFT)
+#define NVDLA_MCIF_CFG_WR_WEIGHT_0_0_WR_WEIGHT_SDP_SHIFT			_MK_SHIFT_CONST(8)
+#define NVDLA_MCIF_CFG_WR_WEIGHT_0_0_WR_WEIGHT_SDP_FIELD			_MK_FIELD_CONST(0xff, NVDLA_MCIF_CFG_WR_WEIGHT_0_0_WR_WEIGHT_SDP_SHIFT)
+#define NVDLA_MCIF_CFG_WR_WEIGHT_0_0_WR_WEIGHT_PDP_SHIFT			_MK_SHIFT_CONST(16)
+#define NVDLA_MCIF_CFG_WR_WEIGHT_0_0_WR_WEIGHT_PDP_FIELD			_MK_FIELD_CONST(0xff, NVDLA_MCIF_CFG_WR_WEIGHT_0_0_WR_WEIGHT_PDP_SHIFT)
+#define NVDLA_MCIF_CFG_WR_WEIGHT_0_0_WR_WEIGHT_CDP_SHIFT			_MK_SHIFT_CONST(24)
+#define NVDLA_MCIF_CFG_WR_WEIGHT_0_0_WR_WEIGHT_CDP_FIELD			_MK_FIELD_CONST(0xff, NVDLA_MCIF_CFG_WR_WEIGHT_0_0_WR_WEIGHT_CDP_SHIFT)
+
+
+// Register NVDLA_MCIF_CFG_WR_WEIGHT_1_0
+#define NVDLA_MCIF_CFG_WR_WEIGHT_1_0			_MK_ADDR_CONST(0x2010)
+#define NVDLA_MCIF_CFG_WR_WEIGHT_1_0_WR_WEIGHT_RBK_SHIFT			_MK_SHIFT_CONST(0)
+#define NVDLA_MCIF_CFG_WR_WEIGHT_1_0_WR_WEIGHT_RBK_FIELD			_MK_FIELD_CONST(0xff, NVDLA_MCIF_CFG_WR_WEIGHT_1_0_WR_WEIGHT_RBK_SHIFT)
+#define NVDLA_MCIF_CFG_WR_WEIGHT_1_0_WR_WEIGHT_RSV_2_SHIFT			_MK_SHIFT_CONST(8)
+#define NVDLA_MCIF_CFG_WR_WEIGHT_1_0_WR_WEIGHT_RSV_2_FIELD			_MK_FIELD_CONST(0xff, NVDLA_MCIF_CFG_WR_WEIGHT_1_0_WR_WEIGHT_RSV_2_SHIFT)
+#define NVDLA_MCIF_CFG_WR_WEIGHT_1_0_WR_WEIGHT_RSV_1_SHIFT			_MK_SHIFT_CONST(16)
+#define NVDLA_MCIF_CFG_WR_WEIGHT_1_0_WR_WEIGHT_RSV_1_FIELD			_MK_FIELD_CONST(0xff, NVDLA_MCIF_CFG_WR_WEIGHT_1_0_WR_WEIGHT_RSV_1_SHIFT)
+#define NVDLA_MCIF_CFG_WR_WEIGHT_1_0_WR_WEIGHT_RSV_0_SHIFT			_MK_SHIFT_CONST(24)
+#define NVDLA_MCIF_CFG_WR_WEIGHT_1_0_WR_WEIGHT_RSV_0_FIELD			_MK_FIELD_CONST(0xff, NVDLA_MCIF_CFG_WR_WEIGHT_1_0_WR_WEIGHT_RSV_0_SHIFT)
+
+
+// Register NVDLA_MCIF_CFG_OUTSTANDING_CNT_0
+#define NVDLA_MCIF_CFG_OUTSTANDING_CNT_0			_MK_ADDR_CONST(0x2014)
+#define NVDLA_MCIF_CFG_OUTSTANDING_CNT_0_RD_OS_CNT_SHIFT			_MK_SHIFT_CONST(0)
+#define NVDLA_MCIF_CFG_OUTSTANDING_CNT_0_RD_OS_CNT_FIELD			_MK_FIELD_CONST(0xff, NVDLA_MCIF_CFG_OUTSTANDING_CNT_0_RD_OS_CNT_SHIFT)
+#define NVDLA_MCIF_CFG_OUTSTANDING_CNT_0_WR_OS_CNT_SHIFT			_MK_SHIFT_CONST(8)
+#define NVDLA_MCIF_CFG_OUTSTANDING_CNT_0_WR_OS_CNT_FIELD			_MK_FIELD_CONST(0xff, NVDLA_MCIF_CFG_OUTSTANDING_CNT_0_WR_OS_CNT_SHIFT)
+
+
+// Register NVDLA_MCIF_STATUS_0
+#define NVDLA_MCIF_STATUS_0			_MK_ADDR_CONST(0x2018)
+#define NVDLA_MCIF_STATUS_0_IDLE_SHIFT			_MK_SHIFT_CONST(8)
+#define NVDLA_MCIF_STATUS_0_IDLE_FIELD			_MK_FIELD_CONST(0x1, NVDLA_MCIF_STATUS_0_IDLE_SHIFT)
+#define NVDLA_MCIF_STATUS_0_IDLE_NO			_MK_ENUM_CONST(0x0)
+#define NVDLA_MCIF_STATUS_0_IDLE_YES			_MK_ENUM_CONST(0x1)
+
+
+
+// To satisfy various compilers and platforms,
+// we let users control the types and syntax of certain constants, using macros.
+#ifndef _MK_SHIFT_CONST
+  #define _MK_SHIFT_CONST(_constant_) _constant_
+#endif
+#ifndef _MK_MASK_CONST
+  #define _MK_MASK_CONST(_constant_) _constant_
+#endif
+#ifndef _MK_ENUM_CONST
+  #define _MK_ENUM_CONST(_constant_) (_constant_ ## UL)
+#endif
+#ifndef _MK_ADDR_CONST
+  #define _MK_ADDR_CONST(_constant_) _constant_
+#endif
+#ifndef _MK_FIELD_CONST
+  #define _MK_FIELD_CONST(_mask_, _shift_) (_MK_MASK_CONST(_mask_) << _MK_SHIFT_CONST(_shift_))
+#endif
+
+
+// Register CDMA_S_STATUS_0
+#define CDMA_S_STATUS_0			_MK_ADDR_CONST(0x3000)
+#define CDMA_S_STATUS_0_STATUS_0_SHIFT			_MK_SHIFT_CONST(0)
+#define CDMA_S_STATUS_0_STATUS_0_FIELD			_MK_FIELD_CONST(0x3, CDMA_S_STATUS_0_STATUS_0_SHIFT)
+#define CDMA_S_STATUS_0_STATUS_0_IDLE			_MK_ENUM_CONST(0x0)
+#define CDMA_S_STATUS_0_STATUS_0_RUNNING			_MK_ENUM_CONST(0x1)
+#define CDMA_S_STATUS_0_STATUS_0_PENDING			_MK_ENUM_CONST(0x2)
+#define CDMA_S_STATUS_0_STATUS_1_SHIFT			_MK_SHIFT_CONST(16)
+#define CDMA_S_STATUS_0_STATUS_1_FIELD			_MK_FIELD_CONST(0x3, CDMA_S_STATUS_0_STATUS_1_SHIFT)
+#define CDMA_S_STATUS_0_STATUS_1_IDLE			_MK_ENUM_CONST(0x0)
+#define CDMA_S_STATUS_0_STATUS_1_RUNNING			_MK_ENUM_CONST(0x1)
+#define CDMA_S_STATUS_0_STATUS_1_PENDING			_MK_ENUM_CONST(0x2)
+
+
+// Register CDMA_S_POINTER_0
+#define CDMA_S_POINTER_0			_MK_ADDR_CONST(0x3004)
+#define CDMA_S_POINTER_0_PRODUCER_SHIFT			_MK_SHIFT_CONST(0)
+#define CDMA_S_POINTER_0_PRODUCER_FIELD			_MK_FIELD_CONST(0x1, CDMA_S_POINTER_0_PRODUCER_SHIFT)
+#define CDMA_S_POINTER_0_PRODUCER_GROUP_0			_MK_ENUM_CONST(0x0)
+#define CDMA_S_POINTER_0_PRODUCER_GROUP_1			_MK_ENUM_CONST(0x1)
+#define CDMA_S_POINTER_0_CONSUMER_SHIFT			_MK_SHIFT_CONST(16)
+#define CDMA_S_POINTER_0_CONSUMER_FIELD			_MK_FIELD_CONST(0x1, CDMA_S_POINTER_0_CONSUMER_SHIFT)
+#define CDMA_S_POINTER_0_CONSUMER_GROUP_0			_MK_ENUM_CONST(0x0)
+#define CDMA_S_POINTER_0_CONSUMER_GROUP_1			_MK_ENUM_CONST(0x1)
+
+
+// Register CDMA_S_ARBITER_0
+#define CDMA_S_ARBITER_0			_MK_ADDR_CONST(0x3008)
+#define CDMA_S_ARBITER_0_ARB_WEIGHT_SHIFT			_MK_SHIFT_CONST(0)
+#define CDMA_S_ARBITER_0_ARB_WEIGHT_FIELD			_MK_FIELD_CONST(0xf, CDMA_S_ARBITER_0_ARB_WEIGHT_SHIFT)
+#define CDMA_S_ARBITER_0_ARB_WMB_SHIFT			_MK_SHIFT_CONST(16)
+#define CDMA_S_ARBITER_0_ARB_WMB_FIELD			_MK_FIELD_CONST(0xf, CDMA_S_ARBITER_0_ARB_WMB_SHIFT)
+
+
+// Register CDMA_S_CBUF_FLUSH_STATUS_0
+#define CDMA_S_CBUF_FLUSH_STATUS_0			_MK_ADDR_CONST(0x300c)
+#define CDMA_S_CBUF_FLUSH_STATUS_0_FLUSH_DONE_SHIFT			_MK_SHIFT_CONST(0)
+#define CDMA_S_CBUF_FLUSH_STATUS_0_FLUSH_DONE_FIELD			_MK_FIELD_CONST(0x1, CDMA_S_CBUF_FLUSH_STATUS_0_FLUSH_DONE_SHIFT)
+
+
+// Register CDMA_D_OP_ENABLE_0
+#define CDMA_D_OP_ENABLE_0			_MK_ADDR_CONST(0x3010)
+#define CDMA_D_OP_ENABLE_0_OP_EN_SHIFT			_MK_SHIFT_CONST(0)
+#define CDMA_D_OP_ENABLE_0_OP_EN_FIELD			_MK_FIELD_CONST(0x1, CDMA_D_OP_ENABLE_0_OP_EN_SHIFT)
+#define CDMA_D_OP_ENABLE_0_OP_EN_DISABLE			_MK_ENUM_CONST(0x0)
+#define CDMA_D_OP_ENABLE_0_OP_EN_ENABLE			_MK_ENUM_CONST(0x1)
+
+
+// Register CDMA_D_MISC_CFG_0
+#define CDMA_D_MISC_CFG_0			_MK_ADDR_CONST(0x3014)
+#define CDMA_D_MISC_CFG_0_CONV_MODE_SHIFT			_MK_SHIFT_CONST(0)
+#define CDMA_D_MISC_CFG_0_CONV_MODE_FIELD			_MK_FIELD_CONST(0x1, CDMA_D_MISC_CFG_0_CONV_MODE_SHIFT)
+#define CDMA_D_MISC_CFG_0_CONV_MODE_DIRECT			_MK_ENUM_CONST(0x0)
+#define CDMA_D_MISC_CFG_0_CONV_MODE_WINOGRAD			_MK_ENUM_CONST(0x1)
+#define CDMA_D_MISC_CFG_0_IN_PRECISION_SHIFT			_MK_SHIFT_CONST(8)
+#define CDMA_D_MISC_CFG_0_IN_PRECISION_FIELD			_MK_FIELD_CONST(0x3, CDMA_D_MISC_CFG_0_IN_PRECISION_SHIFT)
+#define CDMA_D_MISC_CFG_0_IN_PRECISION_INT8			_MK_ENUM_CONST(0x0)
+#define CDMA_D_MISC_CFG_0_IN_PRECISION_INT16			_MK_ENUM_CONST(0x1)
+#define CDMA_D_MISC_CFG_0_IN_PRECISION_FP16			_MK_ENUM_CONST(0x2)
+#define CDMA_D_MISC_CFG_0_PROC_PRECISION_SHIFT			_MK_SHIFT_CONST(12)
+#define CDMA_D_MISC_CFG_0_PROC_PRECISION_FIELD			_MK_FIELD_CONST(0x3, CDMA_D_MISC_CFG_0_PROC_PRECISION_SHIFT)
+#define CDMA_D_MISC_CFG_0_PROC_PRECISION_INT8			_MK_ENUM_CONST(0x0)
+#define CDMA_D_MISC_CFG_0_PROC_PRECISION_INT16			_MK_ENUM_CONST(0x1)
+#define CDMA_D_MISC_CFG_0_PROC_PRECISION_FP16			_MK_ENUM_CONST(0x2)
+#define CDMA_D_MISC_CFG_0_DATA_REUSE_SHIFT			_MK_SHIFT_CONST(16)
+#define CDMA_D_MISC_CFG_0_DATA_REUSE_FIELD			_MK_FIELD_CONST(0x1, CDMA_D_MISC_CFG_0_DATA_REUSE_SHIFT)
+#define CDMA_D_MISC_CFG_0_DATA_REUSE_DISABLE			_MK_ENUM_CONST(0x0)
+#define CDMA_D_MISC_CFG_0_DATA_REUSE_ENABLE			_MK_ENUM_CONST(0x1)
+#define CDMA_D_MISC_CFG_0_WEIGHT_REUSE_SHIFT			_MK_SHIFT_CONST(20)
+#define CDMA_D_MISC_CFG_0_WEIGHT_REUSE_FIELD			_MK_FIELD_CONST(0x1, CDMA_D_MISC_CFG_0_WEIGHT_REUSE_SHIFT)
+#define CDMA_D_MISC_CFG_0_WEIGHT_REUSE_DISABLE			_MK_ENUM_CONST(0x0)
+#define CDMA_D_MISC_CFG_0_WEIGHT_REUSE_ENABLE			_MK_ENUM_CONST(0x1)
+#define CDMA_D_MISC_CFG_0_SKIP_DATA_RLS_SHIFT			_MK_SHIFT_CONST(24)
+#define CDMA_D_MISC_CFG_0_SKIP_DATA_RLS_FIELD			_MK_FIELD_CONST(0x1, CDMA_D_MISC_CFG_0_SKIP_DATA_RLS_SHIFT)
+#define CDMA_D_MISC_CFG_0_SKIP_DATA_RLS_DISABLE			_MK_ENUM_CONST(0x0)
+#define CDMA_D_MISC_CFG_0_SKIP_DATA_RLS_ENABLE			_MK_ENUM_CONST(0x1)
+#define CDMA_D_MISC_CFG_0_SKIP_WEIGHT_RLS_SHIFT			_MK_SHIFT_CONST(28)
+#define CDMA_D_MISC_CFG_0_SKIP_WEIGHT_RLS_FIELD			_MK_FIELD_CONST(0x1, CDMA_D_MISC_CFG_0_SKIP_WEIGHT_RLS_SHIFT)
+#define CDMA_D_MISC_CFG_0_SKIP_WEIGHT_RLS_DISABLE			_MK_ENUM_CONST(0x0)
+#define CDMA_D_MISC_CFG_0_SKIP_WEIGHT_RLS_ENABLE			_MK_ENUM_CONST(0x1)
+
+
+// Register CDMA_D_DATAIN_FORMAT_0
+#define CDMA_D_DATAIN_FORMAT_0			_MK_ADDR_CONST(0x3018)
+#define CDMA_D_DATAIN_FORMAT_0_DATAIN_FORMAT_SHIFT			_MK_SHIFT_CONST(0)
+#define CDMA_D_DATAIN_FORMAT_0_DATAIN_FORMAT_FIELD			_MK_FIELD_CONST(0x1, CDMA_D_DATAIN_FORMAT_0_DATAIN_FORMAT_SHIFT)
+#define CDMA_D_DATAIN_FORMAT_0_DATAIN_FORMAT_FEATURE			_MK_ENUM_CONST(0x0)
+#define CDMA_D_DATAIN_FORMAT_0_DATAIN_FORMAT_PIXEL			_MK_ENUM_CONST(0x1)
+#define CDMA_D_DATAIN_FORMAT_0_PIXEL_FORMAT_SHIFT			_MK_SHIFT_CONST(8)
+#define CDMA_D_DATAIN_FORMAT_0_PIXEL_FORMAT_FIELD			_MK_FIELD_CONST(0x3f, CDMA_D_DATAIN_FORMAT_0_PIXEL_FORMAT_SHIFT)
+#define CDMA_D_DATAIN_FORMAT_0_PIXEL_FORMAT_T_R8			_MK_ENUM_CONST(0x0)
+#define CDMA_D_DATAIN_FORMAT_0_PIXEL_FORMAT_T_R10			_MK_ENUM_CONST(0x1)
+#define CDMA_D_DATAIN_FORMAT_0_PIXEL_FORMAT_T_R12			_MK_ENUM_CONST(0x2)
+#define CDMA_D_DATAIN_FORMAT_0_PIXEL_FORMAT_T_R16			_MK_ENUM_CONST(0x3)
+#define CDMA_D_DATAIN_FORMAT_0_PIXEL_FORMAT_T_R16_I			_MK_ENUM_CONST(0x4)
+#define CDMA_D_DATAIN_FORMAT_0_PIXEL_FORMAT_T_R16_F			_MK_ENUM_CONST(0x5)
+#define CDMA_D_DATAIN_FORMAT_0_PIXEL_FORMAT_T_A16B16G16R16			_MK_ENUM_CONST(0x6)
+#define CDMA_D_DATAIN_FORMAT_0_PIXEL_FORMAT_T_X16B16G16R16			_MK_ENUM_CONST(0x7)
+#define CDMA_D_DATAIN_FORMAT_0_PIXEL_FORMAT_T_A16B16G16R16_F			_MK_ENUM_CONST(0x8)
+#define CDMA_D_DATAIN_FORMAT_0_PIXEL_FORMAT_T_A16Y16U16V16			_MK_ENUM_CONST(0x9)
+#define CDMA_D_DATAIN_FORMAT_0_PIXEL_FORMAT_T_V16U16Y16A16			_MK_ENUM_CONST(0xa)
+#define CDMA_D_DATAIN_FORMAT_0_PIXEL_FORMAT_T_A16Y16U16V16_F			_MK_ENUM_CONST(0xb)
+#define CDMA_D_DATAIN_FORMAT_0_PIXEL_FORMAT_T_A8B8G8R8			_MK_ENUM_CONST(0xc)
+#define CDMA_D_DATAIN_FORMAT_0_PIXEL_FORMAT_T_A8R8G8B8			_MK_ENUM_CONST(0xd)
+#define CDMA_D_DATAIN_FORMAT_0_PIXEL_FORMAT_T_B8G8R8A8			_MK_ENUM_CONST(0xe)
+#define CDMA_D_DATAIN_FORMAT_0_PIXEL_FORMAT_T_R8G8B8A8			_MK_ENUM_CONST(0xf)
+#define CDMA_D_DATAIN_FORMAT_0_PIXEL_FORMAT_T_X8B8G8R8			_MK_ENUM_CONST(0x10)
+#define CDMA_D_DATAIN_FORMAT_0_PIXEL_FORMAT_T_X8R8G8B8			_MK_ENUM_CONST(0x11)
+#define CDMA_D_DATAIN_FORMAT_0_PIXEL_FORMAT_T_B8G8R8X8			_MK_ENUM_CONST(0x12)
+#define CDMA_D_DATAIN_FORMAT_0_PIXEL_FORMAT_T_R8G8B8X8			_MK_ENUM_CONST(0x13)
+#define CDMA_D_DATAIN_FORMAT_0_PIXEL_FORMAT_T_A2B10G10R10			_MK_ENUM_CONST(0x14)
+#define CDMA_D_DATAIN_FORMAT_0_PIXEL_FORMAT_T_A2R10G10B10			_MK_ENUM_CONST(0x15)
+#define CDMA_D_DATAIN_FORMAT_0_PIXEL_FORMAT_T_B10G10R10A2			_MK_ENUM_CONST(0x16)
+#define CDMA_D_DATAIN_FORMAT_0_PIXEL_FORMAT_T_R10G10B10A2			_MK_ENUM_CONST(0x17)
+#define CDMA_D_DATAIN_FORMAT_0_PIXEL_FORMAT_T_A2Y10U10V10			_MK_ENUM_CONST(0x18)
+#define CDMA_D_DATAIN_FORMAT_0_PIXEL_FORMAT_T_V10U10Y10A2			_MK_ENUM_CONST(0x19)
+#define CDMA_D_DATAIN_FORMAT_0_PIXEL_FORMAT_T_A8Y8U8V8			_MK_ENUM_CONST(0x1a)
+#define CDMA_D_DATAIN_FORMAT_0_PIXEL_FORMAT_T_V8U8Y8A8			_MK_ENUM_CONST(0x1b)
+#define CDMA_D_DATAIN_FORMAT_0_PIXEL_FORMAT_T_Y8___U8V8_N444			_MK_ENUM_CONST(0x1c)
+#define CDMA_D_DATAIN_FORMAT_0_PIXEL_FORMAT_T_Y8___V8U8_N444			_MK_ENUM_CONST(0x1d)
+#define CDMA_D_DATAIN_FORMAT_0_PIXEL_FORMAT_T_Y10___U10V10_N444			_MK_ENUM_CONST(0x1e)
+#define CDMA_D_DATAIN_FORMAT_0_PIXEL_FORMAT_T_Y10___V10U10_N444			_MK_ENUM_CONST(0x1f)
+#define CDMA_D_DATAIN_FORMAT_0_PIXEL_FORMAT_T_Y12___U12V12_N444			_MK_ENUM_CONST(0x20)
+#define CDMA_D_DATAIN_FORMAT_0_PIXEL_FORMAT_T_Y12___V12U12_N444			_MK_ENUM_CONST(0x21)
+#define CDMA_D_DATAIN_FORMAT_0_PIXEL_FORMAT_T_Y16___U16V16_N444			_MK_ENUM_CONST(0x22)
+#define CDMA_D_DATAIN_FORMAT_0_PIXEL_FORMAT_T_Y16___V16U16_N444			_MK_ENUM_CONST(0x23)
+#define CDMA_D_DATAIN_FORMAT_0_PIXEL_MAPPING_SHIFT			_MK_SHIFT_CONST(16)
+#define CDMA_D_DATAIN_FORMAT_0_PIXEL_MAPPING_FIELD			_MK_FIELD_CONST(0x1, CDMA_D_DATAIN_FORMAT_0_PIXEL_MAPPING_SHIFT)
+#define CDMA_D_DATAIN_FORMAT_0_PIXEL_MAPPING_PITCH_LINEAR			_MK_ENUM_CONST(0x0)
+#define CDMA_D_DATAIN_FORMAT_0_PIXEL_MAPPING_RESERVED_LINEAR			_MK_ENUM_CONST(0x1)
+#define CDMA_D_DATAIN_FORMAT_0_PIXEL_SIGN_OVERRIDE_SHIFT			_MK_SHIFT_CONST(20)
+#define CDMA_D_DATAIN_FORMAT_0_PIXEL_SIGN_OVERRIDE_FIELD			_MK_FIELD_CONST(0x1, CDMA_D_DATAIN_FORMAT_0_PIXEL_SIGN_OVERRIDE_SHIFT)
+#define CDMA_D_DATAIN_FORMAT_0_PIXEL_SIGN_OVERRIDE_UNSIGNED_INT			_MK_ENUM_CONST(0x0)
+#define CDMA_D_DATAIN_FORMAT_0_PIXEL_SIGN_OVERRIDE_SIGNED_INT			_MK_ENUM_CONST(0x1)
+
+
+// Register CDMA_D_DATAIN_SIZE_0_0
+#define CDMA_D_DATAIN_SIZE_0_0			_MK_ADDR_CONST(0x301c)
+#define CDMA_D_DATAIN_SIZE_0_0_DATAIN_WIDTH_SHIFT			_MK_SHIFT_CONST(0)
+#define CDMA_D_DATAIN_SIZE_0_0_DATAIN_WIDTH_FIELD			_MK_FIELD_CONST(0x1fff, CDMA_D_DATAIN_SIZE_0_0_DATAIN_WIDTH_SHIFT)
+#define CDMA_D_DATAIN_SIZE_0_0_DATAIN_HEIGHT_SHIFT			_MK_SHIFT_CONST(16)
+#define CDMA_D_DATAIN_SIZE_0_0_DATAIN_HEIGHT_FIELD			_MK_FIELD_CONST(0x1fff, CDMA_D_DATAIN_SIZE_0_0_DATAIN_HEIGHT_SHIFT)
+
+
+// Register CDMA_D_DATAIN_SIZE_1_0
+#define CDMA_D_DATAIN_SIZE_1_0			_MK_ADDR_CONST(0x3020)
+#define CDMA_D_DATAIN_SIZE_1_0_DATAIN_CHANNEL_SHIFT			_MK_SHIFT_CONST(0)
+#define CDMA_D_DATAIN_SIZE_1_0_DATAIN_CHANNEL_FIELD			_MK_FIELD_CONST(0x1fff, CDMA_D_DATAIN_SIZE_1_0_DATAIN_CHANNEL_SHIFT)
+
+
+// Register CDMA_D_DATAIN_SIZE_EXT_0_0
+#define CDMA_D_DATAIN_SIZE_EXT_0_0			_MK_ADDR_CONST(0x3024)
+#define CDMA_D_DATAIN_SIZE_EXT_0_0_DATAIN_WIDTH_EXT_SHIFT			_MK_SHIFT_CONST(0)
+#define CDMA_D_DATAIN_SIZE_EXT_0_0_DATAIN_WIDTH_EXT_FIELD			_MK_FIELD_CONST(0x1fff, CDMA_D_DATAIN_SIZE_EXT_0_0_DATAIN_WIDTH_EXT_SHIFT)
+#define CDMA_D_DATAIN_SIZE_EXT_0_0_DATAIN_HEIGHT_EXT_SHIFT			_MK_SHIFT_CONST(16)
+#define CDMA_D_DATAIN_SIZE_EXT_0_0_DATAIN_HEIGHT_EXT_FIELD			_MK_FIELD_CONST(0x1fff, CDMA_D_DATAIN_SIZE_EXT_0_0_DATAIN_HEIGHT_EXT_SHIFT)
+
+
+// Register CDMA_D_PIXEL_OFFSET_0
+#define CDMA_D_PIXEL_OFFSET_0			_MK_ADDR_CONST(0x3028)
+#define CDMA_D_PIXEL_OFFSET_0_PIXEL_X_OFFSET_SHIFT			_MK_SHIFT_CONST(0)
+#define CDMA_D_PIXEL_OFFSET_0_PIXEL_X_OFFSET_FIELD			_MK_FIELD_CONST(0x1f, CDMA_D_PIXEL_OFFSET_0_PIXEL_X_OFFSET_SHIFT)
+#define CDMA_D_PIXEL_OFFSET_0_PIXEL_Y_OFFSET_SHIFT			_MK_SHIFT_CONST(16)
+#define CDMA_D_PIXEL_OFFSET_0_PIXEL_Y_OFFSET_FIELD			_MK_FIELD_CONST(0x7, CDMA_D_PIXEL_OFFSET_0_PIXEL_Y_OFFSET_SHIFT)
+
+
+// Register CDMA_D_DAIN_RAM_TYPE_0
+#define CDMA_D_DAIN_RAM_TYPE_0			_MK_ADDR_CONST(0x302c)
+#define CDMA_D_DAIN_RAM_TYPE_0_DATAIN_RAM_TYPE_SHIFT			_MK_SHIFT_CONST(0)
+#define CDMA_D_DAIN_RAM_TYPE_0_DATAIN_RAM_TYPE_FIELD			_MK_FIELD_CONST(0x1, CDMA_D_DAIN_RAM_TYPE_0_DATAIN_RAM_TYPE_SHIFT)
+#define CDMA_D_DAIN_RAM_TYPE_0_DATAIN_RAM_TYPE_CVIF			_MK_ENUM_CONST(0x0)
+#define CDMA_D_DAIN_RAM_TYPE_0_DATAIN_RAM_TYPE_MCIF			_MK_ENUM_CONST(0x1)
+
+
+// Register CDMA_D_DAIN_ADDR_HIGH_0_0
+#define CDMA_D_DAIN_ADDR_HIGH_0_0			_MK_ADDR_CONST(0x3030)
+#define CDMA_D_DAIN_ADDR_HIGH_0_0_DATAIN_ADDR_HIGH_0_SHIFT			_MK_SHIFT_CONST(0)
+#define CDMA_D_DAIN_ADDR_HIGH_0_0_DATAIN_ADDR_HIGH_0_FIELD			_MK_FIELD_CONST(0xffffffff, CDMA_D_DAIN_ADDR_HIGH_0_0_DATAIN_ADDR_HIGH_0_SHIFT)
+
+
+// Register CDMA_D_DAIN_ADDR_LOW_0_0
+#define CDMA_D_DAIN_ADDR_LOW_0_0			_MK_ADDR_CONST(0x3034)
+#define CDMA_D_DAIN_ADDR_LOW_0_0_DATAIN_ADDR_LOW_0_SHIFT			_MK_SHIFT_CONST(0)
+#define CDMA_D_DAIN_ADDR_LOW_0_0_DATAIN_ADDR_LOW_0_FIELD			_MK_FIELD_CONST(0xffffffff, CDMA_D_DAIN_ADDR_LOW_0_0_DATAIN_ADDR_LOW_0_SHIFT)
+
+
+// Register CDMA_D_DAIN_ADDR_HIGH_1_0
+#define CDMA_D_DAIN_ADDR_HIGH_1_0			_MK_ADDR_CONST(0x3038)
+#define CDMA_D_DAIN_ADDR_HIGH_1_0_DATAIN_ADDR_HIGH_1_SHIFT			_MK_SHIFT_CONST(0)
+#define CDMA_D_DAIN_ADDR_HIGH_1_0_DATAIN_ADDR_HIGH_1_FIELD			_MK_FIELD_CONST(0xffffffff, CDMA_D_DAIN_ADDR_HIGH_1_0_DATAIN_ADDR_HIGH_1_SHIFT)
+
+
+// Register CDMA_D_DAIN_ADDR_LOW_1_0
+#define CDMA_D_DAIN_ADDR_LOW_1_0			_MK_ADDR_CONST(0x303c)
+#define CDMA_D_DAIN_ADDR_LOW_1_0_DATAIN_ADDR_LOW_1_SHIFT			_MK_SHIFT_CONST(0)
+#define CDMA_D_DAIN_ADDR_LOW_1_0_DATAIN_ADDR_LOW_1_FIELD			_MK_FIELD_CONST(0xffffffff, CDMA_D_DAIN_ADDR_LOW_1_0_DATAIN_ADDR_LOW_1_SHIFT)
+
+
+// Register CDMA_D_LINE_STRIDE_0
+#define CDMA_D_LINE_STRIDE_0			_MK_ADDR_CONST(0x3040)
+#define CDMA_D_LINE_STRIDE_0_LINE_STRIDE_SHIFT			_MK_SHIFT_CONST(0)
+#define CDMA_D_LINE_STRIDE_0_LINE_STRIDE_FIELD			_MK_FIELD_CONST(0xffffffff, CDMA_D_LINE_STRIDE_0_LINE_STRIDE_SHIFT)
+
+
+// Register CDMA_D_LINE_UV_STRIDE_0
+#define CDMA_D_LINE_UV_STRIDE_0			_MK_ADDR_CONST(0x3044)
+#define CDMA_D_LINE_UV_STRIDE_0_UV_LINE_STRIDE_SHIFT			_MK_SHIFT_CONST(0)
+#define CDMA_D_LINE_UV_STRIDE_0_UV_LINE_STRIDE_FIELD			_MK_FIELD_CONST(0xffffffff, CDMA_D_LINE_UV_STRIDE_0_UV_LINE_STRIDE_SHIFT)
+
+
+// Register CDMA_D_SURF_STRIDE_0
+#define CDMA_D_SURF_STRIDE_0			_MK_ADDR_CONST(0x3048)
+#define CDMA_D_SURF_STRIDE_0_SURF_STRIDE_SHIFT			_MK_SHIFT_CONST(0)
+#define CDMA_D_SURF_STRIDE_0_SURF_STRIDE_FIELD			_MK_FIELD_CONST(0xffffffff, CDMA_D_SURF_STRIDE_0_SURF_STRIDE_SHIFT)
+
+
+// Register CDMA_D_DAIN_MAP_0
+#define CDMA_D_DAIN_MAP_0			_MK_ADDR_CONST(0x304c)
+#define CDMA_D_DAIN_MAP_0_LINE_PACKED_SHIFT			_MK_SHIFT_CONST(0)
+#define CDMA_D_DAIN_MAP_0_LINE_PACKED_FIELD			_MK_FIELD_CONST(0x1, CDMA_D_DAIN_MAP_0_LINE_PACKED_SHIFT)
+#define CDMA_D_DAIN_MAP_0_LINE_PACKED_FALSE			_MK_ENUM_CONST(0x0)
+#define CDMA_D_DAIN_MAP_0_LINE_PACKED_TRUE			_MK_ENUM_CONST(0x1)
+#define CDMA_D_DAIN_MAP_0_SURF_PACKED_SHIFT			_MK_SHIFT_CONST(16)
+#define CDMA_D_DAIN_MAP_0_SURF_PACKED_FIELD			_MK_FIELD_CONST(0x1, CDMA_D_DAIN_MAP_0_SURF_PACKED_SHIFT)
+#define CDMA_D_DAIN_MAP_0_SURF_PACKED_FALSE			_MK_ENUM_CONST(0x0)
+#define CDMA_D_DAIN_MAP_0_SURF_PACKED_TRUE			_MK_ENUM_CONST(0x1)
+
+
+// Register CDMA_D_RESERVED_X_CFG_0
+#define CDMA_D_RESERVED_X_CFG_0			_MK_ADDR_CONST(0x3050)
+#define CDMA_D_RESERVED_X_CFG_0_RSV_PER_LINE_SHIFT			_MK_SHIFT_CONST(0)
+#define CDMA_D_RESERVED_X_CFG_0_RSV_PER_LINE_FIELD			_MK_FIELD_CONST(0x3ff, CDMA_D_RESERVED_X_CFG_0_RSV_PER_LINE_SHIFT)
+#define CDMA_D_RESERVED_X_CFG_0_RSV_PER_UV_LINE_SHIFT			_MK_SHIFT_CONST(16)
+#define CDMA_D_RESERVED_X_CFG_0_RSV_PER_UV_LINE_FIELD			_MK_FIELD_CONST(0x3ff, CDMA_D_RESERVED_X_CFG_0_RSV_PER_UV_LINE_SHIFT)
+
+
+// Register CDMA_D_RESERVED_Y_CFG_0
+#define CDMA_D_RESERVED_Y_CFG_0			_MK_ADDR_CONST(0x3054)
+#define CDMA_D_RESERVED_Y_CFG_0_RSV_HEIGHT_SHIFT			_MK_SHIFT_CONST(0)
+#define CDMA_D_RESERVED_Y_CFG_0_RSV_HEIGHT_FIELD			_MK_FIELD_CONST(0x7, CDMA_D_RESERVED_Y_CFG_0_RSV_HEIGHT_SHIFT)
+#define CDMA_D_RESERVED_Y_CFG_0_RSV_Y_INDEX_SHIFT			_MK_SHIFT_CONST(16)
+#define CDMA_D_RESERVED_Y_CFG_0_RSV_Y_INDEX_FIELD			_MK_FIELD_CONST(0x1f, CDMA_D_RESERVED_Y_CFG_0_RSV_Y_INDEX_SHIFT)
+
+
+// Register CDMA_D_BATCH_NUMBER_0
+#define CDMA_D_BATCH_NUMBER_0			_MK_ADDR_CONST(0x3058)
+#define CDMA_D_BATCH_NUMBER_0_BATCHES_SHIFT			_MK_SHIFT_CONST(0)
+#define CDMA_D_BATCH_NUMBER_0_BATCHES_FIELD			_MK_FIELD_CONST(0x1f, CDMA_D_BATCH_NUMBER_0_BATCHES_SHIFT)
+
+
+// Register CDMA_D_BATCH_STRIDE_0
+#define CDMA_D_BATCH_STRIDE_0			_MK_ADDR_CONST(0x305c)
+#define CDMA_D_BATCH_STRIDE_0_BATCH_STRIDE_SHIFT			_MK_SHIFT_CONST(0)
+#define CDMA_D_BATCH_STRIDE_0_BATCH_STRIDE_FIELD			_MK_FIELD_CONST(0xffffffff, CDMA_D_BATCH_STRIDE_0_BATCH_STRIDE_SHIFT)
+
+
+// Register CDMA_D_ENTRY_PER_SLICE_0
+#define CDMA_D_ENTRY_PER_SLICE_0			_MK_ADDR_CONST(0x3060)
+#define CDMA_D_ENTRY_PER_SLICE_0_ENTRIES_SHIFT			_MK_SHIFT_CONST(0)
+#define CDMA_D_ENTRY_PER_SLICE_0_ENTRIES_FIELD			_MK_FIELD_CONST(0x3fff, CDMA_D_ENTRY_PER_SLICE_0_ENTRIES_SHIFT)
+
+
+// Register CDMA_D_FETCH_GRAIN_0
+#define CDMA_D_FETCH_GRAIN_0			_MK_ADDR_CONST(0x3064)
+#define CDMA_D_FETCH_GRAIN_0_GRAINS_SHIFT			_MK_SHIFT_CONST(0)
+#define CDMA_D_FETCH_GRAIN_0_GRAINS_FIELD			_MK_FIELD_CONST(0xfff, CDMA_D_FETCH_GRAIN_0_GRAINS_SHIFT)
+
+
+// Register CDMA_D_WEIGHT_FORMAT_0
+#define CDMA_D_WEIGHT_FORMAT_0			_MK_ADDR_CONST(0x3068)
+#define CDMA_D_WEIGHT_FORMAT_0_WEIGHT_FORMAT_SHIFT			_MK_SHIFT_CONST(0)
+#define CDMA_D_WEIGHT_FORMAT_0_WEIGHT_FORMAT_FIELD			_MK_FIELD_CONST(0x1, CDMA_D_WEIGHT_FORMAT_0_WEIGHT_FORMAT_SHIFT)
+#define CDMA_D_WEIGHT_FORMAT_0_WEIGHT_FORMAT_UNCOMPRESSED			_MK_ENUM_CONST(0x0)
+#define CDMA_D_WEIGHT_FORMAT_0_WEIGHT_FORMAT_COMPRESSED			_MK_ENUM_CONST(0x1)
+
+
+// Register CDMA_D_WEIGHT_SIZE_0_0
+#define CDMA_D_WEIGHT_SIZE_0_0			_MK_ADDR_CONST(0x306c)
+#define CDMA_D_WEIGHT_SIZE_0_0_BYTE_PER_KERNEL_SHIFT			_MK_SHIFT_CONST(0)
+#define CDMA_D_WEIGHT_SIZE_0_0_BYTE_PER_KERNEL_FIELD			_MK_FIELD_CONST(0x3ffff, CDMA_D_WEIGHT_SIZE_0_0_BYTE_PER_KERNEL_SHIFT)
+
+
+// Register CDMA_D_WEIGHT_SIZE_1_0
+#define CDMA_D_WEIGHT_SIZE_1_0			_MK_ADDR_CONST(0x3070)
+#define CDMA_D_WEIGHT_SIZE_1_0_WEIGHT_KERNEL_SHIFT			_MK_SHIFT_CONST(0)
+#define CDMA_D_WEIGHT_SIZE_1_0_WEIGHT_KERNEL_FIELD			_MK_FIELD_CONST(0x1fff, CDMA_D_WEIGHT_SIZE_1_0_WEIGHT_KERNEL_SHIFT)
+
+
+// Register CDMA_D_WEIGHT_RAM_TYPE_0
+#define CDMA_D_WEIGHT_RAM_TYPE_0			_MK_ADDR_CONST(0x3074)
+#define CDMA_D_WEIGHT_RAM_TYPE_0_WEIGHT_RAM_TYPE_SHIFT			_MK_SHIFT_CONST(0)
+#define CDMA_D_WEIGHT_RAM_TYPE_0_WEIGHT_RAM_TYPE_FIELD			_MK_FIELD_CONST(0x1, CDMA_D_WEIGHT_RAM_TYPE_0_WEIGHT_RAM_TYPE_SHIFT)
+#define CDMA_D_WEIGHT_RAM_TYPE_0_WEIGHT_RAM_TYPE_CVIF			_MK_ENUM_CONST(0x0)
+#define CDMA_D_WEIGHT_RAM_TYPE_0_WEIGHT_RAM_TYPE_MCIF			_MK_ENUM_CONST(0x1)
+
+
+// Register CDMA_D_WEIGHT_ADDR_HIGH_0
+#define CDMA_D_WEIGHT_ADDR_HIGH_0			_MK_ADDR_CONST(0x3078)
+#define CDMA_D_WEIGHT_ADDR_HIGH_0_WEIGHT_ADDR_HIGH_SHIFT			_MK_SHIFT_CONST(0)
+#define CDMA_D_WEIGHT_ADDR_HIGH_0_WEIGHT_ADDR_HIGH_FIELD			_MK_FIELD_CONST(0xffffffff, CDMA_D_WEIGHT_ADDR_HIGH_0_WEIGHT_ADDR_HIGH_SHIFT)
+
+
+// Register CDMA_D_WEIGHT_ADDR_LOW_0
+#define CDMA_D_WEIGHT_ADDR_LOW_0			_MK_ADDR_CONST(0x307c)
+#define CDMA_D_WEIGHT_ADDR_LOW_0_WEIGHT_ADDR_LOW_SHIFT			_MK_SHIFT_CONST(0)
+#define CDMA_D_WEIGHT_ADDR_LOW_0_WEIGHT_ADDR_LOW_FIELD			_MK_FIELD_CONST(0xffffffff, CDMA_D_WEIGHT_ADDR_LOW_0_WEIGHT_ADDR_LOW_SHIFT)
+
+
+// Register CDMA_D_WEIGHT_BYTES_0
+#define CDMA_D_WEIGHT_BYTES_0			_MK_ADDR_CONST(0x3080)
+#define CDMA_D_WEIGHT_BYTES_0_WEIGHT_BYTES_SHIFT			_MK_SHIFT_CONST(0)
+#define CDMA_D_WEIGHT_BYTES_0_WEIGHT_BYTES_FIELD			_MK_FIELD_CONST(0xffffffff, CDMA_D_WEIGHT_BYTES_0_WEIGHT_BYTES_SHIFT)
+
+
+// Register CDMA_D_WGS_ADDR_HIGH_0
+#define CDMA_D_WGS_ADDR_HIGH_0			_MK_ADDR_CONST(0x3084)
+#define CDMA_D_WGS_ADDR_HIGH_0_WGS_ADDR_HIGH_SHIFT			_MK_SHIFT_CONST(0)
+#define CDMA_D_WGS_ADDR_HIGH_0_WGS_ADDR_HIGH_FIELD			_MK_FIELD_CONST(0xffffffff, CDMA_D_WGS_ADDR_HIGH_0_WGS_ADDR_HIGH_SHIFT)
+
+
+// Register CDMA_D_WGS_ADDR_LOW_0
+#define CDMA_D_WGS_ADDR_LOW_0			_MK_ADDR_CONST(0x3088)
+#define CDMA_D_WGS_ADDR_LOW_0_WGS_ADDR_LOW_SHIFT			_MK_SHIFT_CONST(0)
+#define CDMA_D_WGS_ADDR_LOW_0_WGS_ADDR_LOW_FIELD			_MK_FIELD_CONST(0xffffffff, CDMA_D_WGS_ADDR_LOW_0_WGS_ADDR_LOW_SHIFT)
+
+
+// Register CDMA_D_WMB_ADDR_HIGH_0
+#define CDMA_D_WMB_ADDR_HIGH_0			_MK_ADDR_CONST(0x308c)
+#define CDMA_D_WMB_ADDR_HIGH_0_WMB_ADDR_HIGH_SHIFT			_MK_SHIFT_CONST(0)
+#define CDMA_D_WMB_ADDR_HIGH_0_WMB_ADDR_HIGH_FIELD			_MK_FIELD_CONST(0xffffffff, CDMA_D_WMB_ADDR_HIGH_0_WMB_ADDR_HIGH_SHIFT)
+
+
+// Register CDMA_D_WMB_ADDR_LOW_0
+#define CDMA_D_WMB_ADDR_LOW_0			_MK_ADDR_CONST(0x3090)
+#define CDMA_D_WMB_ADDR_LOW_0_WMB_ADDR_LOW_SHIFT			_MK_SHIFT_CONST(0)
+#define CDMA_D_WMB_ADDR_LOW_0_WMB_ADDR_LOW_FIELD			_MK_FIELD_CONST(0xffffffff, CDMA_D_WMB_ADDR_LOW_0_WMB_ADDR_LOW_SHIFT)
+
+
+// Register CDMA_D_WMB_BYTES_0
+#define CDMA_D_WMB_BYTES_0			_MK_ADDR_CONST(0x3094)
+#define CDMA_D_WMB_BYTES_0_WMB_BYTES_SHIFT			_MK_SHIFT_CONST(0)
+#define CDMA_D_WMB_BYTES_0_WMB_BYTES_FIELD			_MK_FIELD_CONST(0xfffffff, CDMA_D_WMB_BYTES_0_WMB_BYTES_SHIFT)
+
+
+// Register CDMA_D_MEAN_FORMAT_0
+#define CDMA_D_MEAN_FORMAT_0			_MK_ADDR_CONST(0x3098)
+#define CDMA_D_MEAN_FORMAT_0_MEAN_FORMAT_SHIFT			_MK_SHIFT_CONST(0)
+#define CDMA_D_MEAN_FORMAT_0_MEAN_FORMAT_FIELD			_MK_FIELD_CONST(0x1, CDMA_D_MEAN_FORMAT_0_MEAN_FORMAT_SHIFT)
+#define CDMA_D_MEAN_FORMAT_0_MEAN_FORMAT_DISABLE			_MK_ENUM_CONST(0x0)
+#define CDMA_D_MEAN_FORMAT_0_MEAN_FORMAT_ENABLE			_MK_ENUM_CONST(0x1)
+
+
+// Register CDMA_D_MEAN_GLOBAL_0_0
+#define CDMA_D_MEAN_GLOBAL_0_0			_MK_ADDR_CONST(0x309c)
+#define CDMA_D_MEAN_GLOBAL_0_0_MEAN_RY_SHIFT			_MK_SHIFT_CONST(0)
+#define CDMA_D_MEAN_GLOBAL_0_0_MEAN_RY_FIELD			_MK_FIELD_CONST(0xffff, CDMA_D_MEAN_GLOBAL_0_0_MEAN_RY_SHIFT)
+#define CDMA_D_MEAN_GLOBAL_0_0_MEAN_GU_SHIFT			_MK_SHIFT_CONST(16)
+#define CDMA_D_MEAN_GLOBAL_0_0_MEAN_GU_FIELD			_MK_FIELD_CONST(0xffff, CDMA_D_MEAN_GLOBAL_0_0_MEAN_GU_SHIFT)
+
+
+// Register CDMA_D_MEAN_GLOBAL_1_0
+#define CDMA_D_MEAN_GLOBAL_1_0			_MK_ADDR_CONST(0x30a0)
+#define CDMA_D_MEAN_GLOBAL_1_0_MEAN_BV_SHIFT			_MK_SHIFT_CONST(0)
+#define CDMA_D_MEAN_GLOBAL_1_0_MEAN_BV_FIELD			_MK_FIELD_CONST(0xffff, CDMA_D_MEAN_GLOBAL_1_0_MEAN_BV_SHIFT)
+#define CDMA_D_MEAN_GLOBAL_1_0_MEAN_AX_SHIFT			_MK_SHIFT_CONST(16)
+#define CDMA_D_MEAN_GLOBAL_1_0_MEAN_AX_FIELD			_MK_FIELD_CONST(0xffff, CDMA_D_MEAN_GLOBAL_1_0_MEAN_AX_SHIFT)
+
+
+// Register CDMA_D_CVT_CFG_0
+#define CDMA_D_CVT_CFG_0			_MK_ADDR_CONST(0x30a4)
+#define CDMA_D_CVT_CFG_0_CVT_EN_SHIFT			_MK_SHIFT_CONST(0)
+#define CDMA_D_CVT_CFG_0_CVT_EN_FIELD			_MK_FIELD_CONST(0x1, CDMA_D_CVT_CFG_0_CVT_EN_SHIFT)
+#define CDMA_D_CVT_CFG_0_CVT_EN_DISABLE			_MK_ENUM_CONST(0x0)
+#define CDMA_D_CVT_CFG_0_CVT_EN_ENABLE			_MK_ENUM_CONST(0x1)
+#define CDMA_D_CVT_CFG_0_CVT_TRUNCATE_SHIFT			_MK_SHIFT_CONST(4)
+#define CDMA_D_CVT_CFG_0_CVT_TRUNCATE_FIELD			_MK_FIELD_CONST(0x3f, CDMA_D_CVT_CFG_0_CVT_TRUNCATE_SHIFT)
+
+
+// Register CDMA_D_CVT_OFFSET_0
+#define CDMA_D_CVT_OFFSET_0			_MK_ADDR_CONST(0x30a8)
+#define CDMA_D_CVT_OFFSET_0_CVT_OFFSET_SHIFT			_MK_SHIFT_CONST(0)
+#define CDMA_D_CVT_OFFSET_0_CVT_OFFSET_FIELD			_MK_FIELD_CONST(0xffff, CDMA_D_CVT_OFFSET_0_CVT_OFFSET_SHIFT)
+
+
+// Register CDMA_D_CVT_SCALE_0
+#define CDMA_D_CVT_SCALE_0			_MK_ADDR_CONST(0x30ac)
+#define CDMA_D_CVT_SCALE_0_CVT_SCALE_SHIFT			_MK_SHIFT_CONST(0)
+#define CDMA_D_CVT_SCALE_0_CVT_SCALE_FIELD			_MK_FIELD_CONST(0xffff, CDMA_D_CVT_SCALE_0_CVT_SCALE_SHIFT)
+
+
+// Register CDMA_D_CONV_STRIDE_0
+#define CDMA_D_CONV_STRIDE_0			_MK_ADDR_CONST(0x30b0)
+#define CDMA_D_CONV_STRIDE_0_CONV_X_STRIDE_SHIFT			_MK_SHIFT_CONST(0)
+#define CDMA_D_CONV_STRIDE_0_CONV_X_STRIDE_FIELD			_MK_FIELD_CONST(0x7, CDMA_D_CONV_STRIDE_0_CONV_X_STRIDE_SHIFT)
+#define CDMA_D_CONV_STRIDE_0_CONV_Y_STRIDE_SHIFT			_MK_SHIFT_CONST(16)
+#define CDMA_D_CONV_STRIDE_0_CONV_Y_STRIDE_FIELD			_MK_FIELD_CONST(0x7, CDMA_D_CONV_STRIDE_0_CONV_Y_STRIDE_SHIFT)
+
+
+// Register CDMA_D_ZERO_PADDING_0
+#define CDMA_D_ZERO_PADDING_0			_MK_ADDR_CONST(0x30b4)
+#define CDMA_D_ZERO_PADDING_0_PAD_LEFT_SHIFT			_MK_SHIFT_CONST(0)
+#define CDMA_D_ZERO_PADDING_0_PAD_LEFT_FIELD			_MK_FIELD_CONST(0x1f, CDMA_D_ZERO_PADDING_0_PAD_LEFT_SHIFT)
+#define CDMA_D_ZERO_PADDING_0_PAD_RIGHT_SHIFT			_MK_SHIFT_CONST(8)
+#define CDMA_D_ZERO_PADDING_0_PAD_RIGHT_FIELD			_MK_FIELD_CONST(0x3f, CDMA_D_ZERO_PADDING_0_PAD_RIGHT_SHIFT)
+#define CDMA_D_ZERO_PADDING_0_PAD_TOP_SHIFT			_MK_SHIFT_CONST(16)
+#define CDMA_D_ZERO_PADDING_0_PAD_TOP_FIELD			_MK_FIELD_CONST(0x1f, CDMA_D_ZERO_PADDING_0_PAD_TOP_SHIFT)
+#define CDMA_D_ZERO_PADDING_0_PAD_BOTTOM_SHIFT			_MK_SHIFT_CONST(24)
+#define CDMA_D_ZERO_PADDING_0_PAD_BOTTOM_FIELD			_MK_FIELD_CONST(0x3f, CDMA_D_ZERO_PADDING_0_PAD_BOTTOM_SHIFT)
+
+
+// Register CDMA_D_ZERO_PADDING_VALUE_0
+#define CDMA_D_ZERO_PADDING_VALUE_0			_MK_ADDR_CONST(0x30b8)
+#define CDMA_D_ZERO_PADDING_VALUE_0_PAD_VALUE_SHIFT			_MK_SHIFT_CONST(0)
+#define CDMA_D_ZERO_PADDING_VALUE_0_PAD_VALUE_FIELD			_MK_FIELD_CONST(0xffff, CDMA_D_ZERO_PADDING_VALUE_0_PAD_VALUE_SHIFT)
+
+
+// Register CDMA_D_BANK_0
+#define CDMA_D_BANK_0			_MK_ADDR_CONST(0x30bc)
+#define CDMA_D_BANK_0_DATA_BANK_SHIFT			_MK_SHIFT_CONST(0)
+#define CDMA_D_BANK_0_DATA_BANK_FIELD			_MK_FIELD_CONST(0x1f, CDMA_D_BANK_0_DATA_BANK_SHIFT)
+#define CDMA_D_BANK_0_WEIGHT_BANK_SHIFT			_MK_SHIFT_CONST(16)
+#define CDMA_D_BANK_0_WEIGHT_BANK_FIELD			_MK_FIELD_CONST(0x1f, CDMA_D_BANK_0_WEIGHT_BANK_SHIFT)
+
+
+// Register CDMA_D_NAN_FLUSH_TO_ZERO_0
+#define CDMA_D_NAN_FLUSH_TO_ZERO_0			_MK_ADDR_CONST(0x30c0)
+#define CDMA_D_NAN_FLUSH_TO_ZERO_0_NAN_TO_ZERO_SHIFT			_MK_SHIFT_CONST(0)
+#define CDMA_D_NAN_FLUSH_TO_ZERO_0_NAN_TO_ZERO_FIELD			_MK_FIELD_CONST(0x1, CDMA_D_NAN_FLUSH_TO_ZERO_0_NAN_TO_ZERO_SHIFT)
+#define CDMA_D_NAN_FLUSH_TO_ZERO_0_NAN_TO_ZERO_DISABLE			_MK_ENUM_CONST(0x0)
+#define CDMA_D_NAN_FLUSH_TO_ZERO_0_NAN_TO_ZERO_ENABLE			_MK_ENUM_CONST(0x1)
+
+
+// Register CDMA_D_NAN_INPUT_DATA_NUM_0
+#define CDMA_D_NAN_INPUT_DATA_NUM_0			_MK_ADDR_CONST(0x30c4)
+#define CDMA_D_NAN_INPUT_DATA_NUM_0_NAN_DATA_NUM_SHIFT			_MK_SHIFT_CONST(0)
+#define CDMA_D_NAN_INPUT_DATA_NUM_0_NAN_DATA_NUM_FIELD			_MK_FIELD_CONST(0xffffffff, CDMA_D_NAN_INPUT_DATA_NUM_0_NAN_DATA_NUM_SHIFT)
+
+
+// Register CDMA_D_NAN_INPUT_WEIGHT_NUM_0
+#define CDMA_D_NAN_INPUT_WEIGHT_NUM_0			_MK_ADDR_CONST(0x30c8)
+#define CDMA_D_NAN_INPUT_WEIGHT_NUM_0_NAN_WEIGHT_NUM_SHIFT			_MK_SHIFT_CONST(0)
+#define CDMA_D_NAN_INPUT_WEIGHT_NUM_0_NAN_WEIGHT_NUM_FIELD			_MK_FIELD_CONST(0xffffffff, CDMA_D_NAN_INPUT_WEIGHT_NUM_0_NAN_WEIGHT_NUM_SHIFT)
+
+
+// Register CDMA_D_INF_INPUT_DATA_NUM_0
+#define CDMA_D_INF_INPUT_DATA_NUM_0			_MK_ADDR_CONST(0x30cc)
+#define CDMA_D_INF_INPUT_DATA_NUM_0_INF_DATA_NUM_SHIFT			_MK_SHIFT_CONST(0)
+#define CDMA_D_INF_INPUT_DATA_NUM_0_INF_DATA_NUM_FIELD			_MK_FIELD_CONST(0xffffffff, CDMA_D_INF_INPUT_DATA_NUM_0_INF_DATA_NUM_SHIFT)
+
+
+// Register CDMA_D_INF_INPUT_WEIGHT_NUM_0
+#define CDMA_D_INF_INPUT_WEIGHT_NUM_0			_MK_ADDR_CONST(0x30d0)
+#define CDMA_D_INF_INPUT_WEIGHT_NUM_0_INF_WEIGHT_NUM_SHIFT			_MK_SHIFT_CONST(0)
+#define CDMA_D_INF_INPUT_WEIGHT_NUM_0_INF_WEIGHT_NUM_FIELD			_MK_FIELD_CONST(0xffffffff, CDMA_D_INF_INPUT_WEIGHT_NUM_0_INF_WEIGHT_NUM_SHIFT)
+
+
+// Register CDMA_D_PERF_ENABLE_0
+#define CDMA_D_PERF_ENABLE_0			_MK_ADDR_CONST(0x30d4)
+#define CDMA_D_PERF_ENABLE_0_DMA_EN_SHIFT			_MK_SHIFT_CONST(0)
+#define CDMA_D_PERF_ENABLE_0_DMA_EN_FIELD			_MK_FIELD_CONST(0x1, CDMA_D_PERF_ENABLE_0_DMA_EN_SHIFT)
+
+
+// Register CDMA_D_PERF_DAT_READ_STALL_0
+#define CDMA_D_PERF_DAT_READ_STALL_0			_MK_ADDR_CONST(0x30d8)
+#define CDMA_D_PERF_DAT_READ_STALL_0_DAT_RD_STALL_SHIFT			_MK_SHIFT_CONST(0)
+#define CDMA_D_PERF_DAT_READ_STALL_0_DAT_RD_STALL_FIELD			_MK_FIELD_CONST(0xffffffff, CDMA_D_PERF_DAT_READ_STALL_0_DAT_RD_STALL_SHIFT)
+
+
+// Register CDMA_D_PERF_WT_READ_STALL_0
+#define CDMA_D_PERF_WT_READ_STALL_0			_MK_ADDR_CONST(0x30dc)
+#define CDMA_D_PERF_WT_READ_STALL_0_WT_RD_STALL_SHIFT			_MK_SHIFT_CONST(0)
+#define CDMA_D_PERF_WT_READ_STALL_0_WT_RD_STALL_FIELD			_MK_FIELD_CONST(0xffffffff, CDMA_D_PERF_WT_READ_STALL_0_WT_RD_STALL_SHIFT)
+
+
+// Register CDMA_D_PERF_DAT_READ_LATENCY_0
+#define CDMA_D_PERF_DAT_READ_LATENCY_0			_MK_ADDR_CONST(0x30e0)
+#define CDMA_D_PERF_DAT_READ_LATENCY_0_DAT_RD_LATENCY_SHIFT			_MK_SHIFT_CONST(0)
+#define CDMA_D_PERF_DAT_READ_LATENCY_0_DAT_RD_LATENCY_FIELD			_MK_FIELD_CONST(0xffffffff, CDMA_D_PERF_DAT_READ_LATENCY_0_DAT_RD_LATENCY_SHIFT)
+
+
+// Register CDMA_D_PERF_WT_READ_LATENCY_0
+#define CDMA_D_PERF_WT_READ_LATENCY_0			_MK_ADDR_CONST(0x30e4)
+#define CDMA_D_PERF_WT_READ_LATENCY_0_WT_RD_LATENCY_SHIFT			_MK_SHIFT_CONST(0)
+#define CDMA_D_PERF_WT_READ_LATENCY_0_WT_RD_LATENCY_FIELD			_MK_FIELD_CONST(0xffffffff, CDMA_D_PERF_WT_READ_LATENCY_0_WT_RD_LATENCY_SHIFT)
+
+
+// Register CDMA_D_CYA_0
+#define CDMA_D_CYA_0			_MK_ADDR_CONST(0x30e8)
+#define CDMA_D_CYA_0_CYA_SHIFT			_MK_SHIFT_CONST(0)
+#define CDMA_D_CYA_0_CYA_FIELD			_MK_FIELD_CONST(0xffffffff, CDMA_D_CYA_0_CYA_SHIFT)
+
+
+
+// To satisfy various compilers and platforms,
+// we let users control the types and syntax of certain constants, using macros.
+#ifndef _MK_SHIFT_CONST
+  #define _MK_SHIFT_CONST(_constant_) _constant_
+#endif
+#ifndef _MK_MASK_CONST
+  #define _MK_MASK_CONST(_constant_) _constant_
+#endif
+#ifndef _MK_ENUM_CONST
+  #define _MK_ENUM_CONST(_constant_) (_constant_ ## UL)
+#endif
+#ifndef _MK_ADDR_CONST
+  #define _MK_ADDR_CONST(_constant_) _constant_
+#endif
+#ifndef _MK_FIELD_CONST
+  #define _MK_FIELD_CONST(_mask_, _shift_) (_MK_MASK_CONST(_mask_) << _MK_SHIFT_CONST(_shift_))
+#endif
+
+
+// Register CSC_S_STATUS_0
+#define CSC_S_STATUS_0			_MK_ADDR_CONST(0x4000)
+#define CSC_S_STATUS_0_STATUS_0_SHIFT			_MK_SHIFT_CONST(0)
+#define CSC_S_STATUS_0_STATUS_0_FIELD			_MK_FIELD_CONST(0x3, CSC_S_STATUS_0_STATUS_0_SHIFT)
+#define CSC_S_STATUS_0_STATUS_0_IDLE			_MK_ENUM_CONST(0x0)
+#define CSC_S_STATUS_0_STATUS_0_RUNNING			_MK_ENUM_CONST(0x1)
+#define CSC_S_STATUS_0_STATUS_0_PENDING			_MK_ENUM_CONST(0x2)
+#define CSC_S_STATUS_0_STATUS_1_SHIFT			_MK_SHIFT_CONST(16)
+#define CSC_S_STATUS_0_STATUS_1_FIELD			_MK_FIELD_CONST(0x3, CSC_S_STATUS_0_STATUS_1_SHIFT)
+#define CSC_S_STATUS_0_STATUS_1_IDLE			_MK_ENUM_CONST(0x0)
+#define CSC_S_STATUS_0_STATUS_1_RUNNING			_MK_ENUM_CONST(0x1)
+#define CSC_S_STATUS_0_STATUS_1_PENDING			_MK_ENUM_CONST(0x2)
+
+
+// Register CSC_S_POINTER_0
+#define CSC_S_POINTER_0			_MK_ADDR_CONST(0x4004)
+#define CSC_S_POINTER_0_PRODUCER_SHIFT			_MK_SHIFT_CONST(0)
+#define CSC_S_POINTER_0_PRODUCER_FIELD			_MK_FIELD_CONST(0x1, CSC_S_POINTER_0_PRODUCER_SHIFT)
+#define CSC_S_POINTER_0_PRODUCER_GROUP_0			_MK_ENUM_CONST(0x0)
+#define CSC_S_POINTER_0_PRODUCER_GROUP_1			_MK_ENUM_CONST(0x1)
+#define CSC_S_POINTER_0_CONSUMER_SHIFT			_MK_SHIFT_CONST(16)
+#define CSC_S_POINTER_0_CONSUMER_FIELD			_MK_FIELD_CONST(0x1, CSC_S_POINTER_0_CONSUMER_SHIFT)
+#define CSC_S_POINTER_0_CONSUMER_GROUP_0			_MK_ENUM_CONST(0x0)
+#define CSC_S_POINTER_0_CONSUMER_GROUP_1			_MK_ENUM_CONST(0x1)
+
+
+// Register CSC_D_OP_ENABLE_0
+#define CSC_D_OP_ENABLE_0			_MK_ADDR_CONST(0x4008)
+#define CSC_D_OP_ENABLE_0_OP_EN_SHIFT			_MK_SHIFT_CONST(0)
+#define CSC_D_OP_ENABLE_0_OP_EN_FIELD			_MK_FIELD_CONST(0x1, CSC_D_OP_ENABLE_0_OP_EN_SHIFT)
+#define CSC_D_OP_ENABLE_0_OP_EN_DISABLE			_MK_ENUM_CONST(0x0)
+#define CSC_D_OP_ENABLE_0_OP_EN_ENABLE			_MK_ENUM_CONST(0x1)
+
+
+// Register CSC_D_MISC_CFG_0
+#define CSC_D_MISC_CFG_0			_MK_ADDR_CONST(0x400c)
+#define CSC_D_MISC_CFG_0_CONV_MODE_SHIFT			_MK_SHIFT_CONST(0)
+#define CSC_D_MISC_CFG_0_CONV_MODE_FIELD			_MK_FIELD_CONST(0x1, CSC_D_MISC_CFG_0_CONV_MODE_SHIFT)
+#define CSC_D_MISC_CFG_0_CONV_MODE_DIRECT			_MK_ENUM_CONST(0x0)
+#define CSC_D_MISC_CFG_0_CONV_MODE_WINOGRAD			_MK_ENUM_CONST(0x1)
+#define CSC_D_MISC_CFG_0_IN_PRECISION_SHIFT			_MK_SHIFT_CONST(8)
+#define CSC_D_MISC_CFG_0_IN_PRECISION_FIELD			_MK_FIELD_CONST(0x3, CSC_D_MISC_CFG_0_IN_PRECISION_SHIFT)
+#define CSC_D_MISC_CFG_0_IN_PRECISION_INT8			_MK_ENUM_CONST(0x0)
+#define CSC_D_MISC_CFG_0_IN_PRECISION_INT16			_MK_ENUM_CONST(0x1)
+#define CSC_D_MISC_CFG_0_IN_PRECISION_FP16			_MK_ENUM_CONST(0x2)
+#define CSC_D_MISC_CFG_0_PROC_PRECISION_SHIFT			_MK_SHIFT_CONST(12)
+#define CSC_D_MISC_CFG_0_PROC_PRECISION_FIELD			_MK_FIELD_CONST(0x3, CSC_D_MISC_CFG_0_PROC_PRECISION_SHIFT)
+#define CSC_D_MISC_CFG_0_PROC_PRECISION_INT8			_MK_ENUM_CONST(0x0)
+#define CSC_D_MISC_CFG_0_PROC_PRECISION_INT16			_MK_ENUM_CONST(0x1)
+#define CSC_D_MISC_CFG_0_PROC_PRECISION_FP16			_MK_ENUM_CONST(0x2)
+#define CSC_D_MISC_CFG_0_DATA_REUSE_SHIFT			_MK_SHIFT_CONST(16)
+#define CSC_D_MISC_CFG_0_DATA_REUSE_FIELD			_MK_FIELD_CONST(0x1, CSC_D_MISC_CFG_0_DATA_REUSE_SHIFT)
+#define CSC_D_MISC_CFG_0_DATA_REUSE_DISABLE			_MK_ENUM_CONST(0x0)
+#define CSC_D_MISC_CFG_0_DATA_REUSE_ENABLE			_MK_ENUM_CONST(0x1)
+#define CSC_D_MISC_CFG_0_WEIGHT_REUSE_SHIFT			_MK_SHIFT_CONST(20)
+#define CSC_D_MISC_CFG_0_WEIGHT_REUSE_FIELD			_MK_FIELD_CONST(0x1, CSC_D_MISC_CFG_0_WEIGHT_REUSE_SHIFT)
+#define CSC_D_MISC_CFG_0_WEIGHT_REUSE_DISABLE			_MK_ENUM_CONST(0x0)
+#define CSC_D_MISC_CFG_0_WEIGHT_REUSE_ENABLE			_MK_ENUM_CONST(0x1)
+#define CSC_D_MISC_CFG_0_SKIP_DATA_RLS_SHIFT			_MK_SHIFT_CONST(24)
+#define CSC_D_MISC_CFG_0_SKIP_DATA_RLS_FIELD			_MK_FIELD_CONST(0x1, CSC_D_MISC_CFG_0_SKIP_DATA_RLS_SHIFT)
+#define CSC_D_MISC_CFG_0_SKIP_DATA_RLS_DISABLE			_MK_ENUM_CONST(0x0)
+#define CSC_D_MISC_CFG_0_SKIP_DATA_RLS_ENABLE			_MK_ENUM_CONST(0x1)
+#define CSC_D_MISC_CFG_0_SKIP_WEIGHT_RLS_SHIFT			_MK_SHIFT_CONST(28)
+#define CSC_D_MISC_CFG_0_SKIP_WEIGHT_RLS_FIELD			_MK_FIELD_CONST(0x1, CSC_D_MISC_CFG_0_SKIP_WEIGHT_RLS_SHIFT)
+#define CSC_D_MISC_CFG_0_SKIP_WEIGHT_RLS_DISABLE			_MK_ENUM_CONST(0x0)
+#define CSC_D_MISC_CFG_0_SKIP_WEIGHT_RLS_ENABLE			_MK_ENUM_CONST(0x1)
+
+
+// Register CSC_D_DATAIN_FORMAT_0
+#define CSC_D_DATAIN_FORMAT_0			_MK_ADDR_CONST(0x4010)
+#define CSC_D_DATAIN_FORMAT_0_DATAIN_FORMAT_SHIFT			_MK_SHIFT_CONST(0)
+#define CSC_D_DATAIN_FORMAT_0_DATAIN_FORMAT_FIELD			_MK_FIELD_CONST(0x1, CSC_D_DATAIN_FORMAT_0_DATAIN_FORMAT_SHIFT)
+#define CSC_D_DATAIN_FORMAT_0_DATAIN_FORMAT_FEATURE			_MK_ENUM_CONST(0x0)
+#define CSC_D_DATAIN_FORMAT_0_DATAIN_FORMAT_PIXEL			_MK_ENUM_CONST(0x1)
+
+
+// Register CSC_D_DATAIN_SIZE_EXT_0_0
+#define CSC_D_DATAIN_SIZE_EXT_0_0			_MK_ADDR_CONST(0x4014)
+#define CSC_D_DATAIN_SIZE_EXT_0_0_DATAIN_WIDTH_EXT_SHIFT			_MK_SHIFT_CONST(0)
+#define CSC_D_DATAIN_SIZE_EXT_0_0_DATAIN_WIDTH_EXT_FIELD			_MK_FIELD_CONST(0x1fff, CSC_D_DATAIN_SIZE_EXT_0_0_DATAIN_WIDTH_EXT_SHIFT)
+#define CSC_D_DATAIN_SIZE_EXT_0_0_DATAIN_HEIGHT_EXT_SHIFT			_MK_SHIFT_CONST(16)
+#define CSC_D_DATAIN_SIZE_EXT_0_0_DATAIN_HEIGHT_EXT_FIELD			_MK_FIELD_CONST(0x1fff, CSC_D_DATAIN_SIZE_EXT_0_0_DATAIN_HEIGHT_EXT_SHIFT)
+
+
+// Register CSC_D_DATAIN_SIZE_EXT_1_0
+#define CSC_D_DATAIN_SIZE_EXT_1_0			_MK_ADDR_CONST(0x4018)
+#define CSC_D_DATAIN_SIZE_EXT_1_0_DATAIN_CHANNEL_EXT_SHIFT			_MK_SHIFT_CONST(0)
+#define CSC_D_DATAIN_SIZE_EXT_1_0_DATAIN_CHANNEL_EXT_FIELD			_MK_FIELD_CONST(0x1fff, CSC_D_DATAIN_SIZE_EXT_1_0_DATAIN_CHANNEL_EXT_SHIFT)
+
+
+// Register CSC_D_BATCH_NUMBER_0
+#define CSC_D_BATCH_NUMBER_0			_MK_ADDR_CONST(0x401c)
+#define CSC_D_BATCH_NUMBER_0_BATCHES_SHIFT			_MK_SHIFT_CONST(0)
+#define CSC_D_BATCH_NUMBER_0_BATCHES_FIELD			_MK_FIELD_CONST(0x1f, CSC_D_BATCH_NUMBER_0_BATCHES_SHIFT)
+
+
+// Register CSC_D_POST_Y_EXTENSION_0
+#define CSC_D_POST_Y_EXTENSION_0			_MK_ADDR_CONST(0x4020)
+#define CSC_D_POST_Y_EXTENSION_0_Y_EXTENSION_SHIFT			_MK_SHIFT_CONST(0)
+#define CSC_D_POST_Y_EXTENSION_0_Y_EXTENSION_FIELD			_MK_FIELD_CONST(0x3, CSC_D_POST_Y_EXTENSION_0_Y_EXTENSION_SHIFT)
+
+
+// Register CSC_D_ENTRY_PER_SLICE_0
+#define CSC_D_ENTRY_PER_SLICE_0			_MK_ADDR_CONST(0x4024)
+#define CSC_D_ENTRY_PER_SLICE_0_ENTRIES_SHIFT			_MK_SHIFT_CONST(0)
+#define CSC_D_ENTRY_PER_SLICE_0_ENTRIES_FIELD			_MK_FIELD_CONST(0x3fff, CSC_D_ENTRY_PER_SLICE_0_ENTRIES_SHIFT)
+
+
+// Register CSC_D_WEIGHT_FORMAT_0
+#define CSC_D_WEIGHT_FORMAT_0			_MK_ADDR_CONST(0x4028)
+#define CSC_D_WEIGHT_FORMAT_0_WEIGHT_FORMAT_SHIFT			_MK_SHIFT_CONST(0)
+#define CSC_D_WEIGHT_FORMAT_0_WEIGHT_FORMAT_FIELD			_MK_FIELD_CONST(0x1, CSC_D_WEIGHT_FORMAT_0_WEIGHT_FORMAT_SHIFT)
+#define CSC_D_WEIGHT_FORMAT_0_WEIGHT_FORMAT_UNCOMPRESSED			_MK_ENUM_CONST(0x0)
+#define CSC_D_WEIGHT_FORMAT_0_WEIGHT_FORMAT_COMPRESSED			_MK_ENUM_CONST(0x1)
+
+
+// Register CSC_D_WEIGHT_SIZE_EXT_0_0
+#define CSC_D_WEIGHT_SIZE_EXT_0_0			_MK_ADDR_CONST(0x402c)
+#define CSC_D_WEIGHT_SIZE_EXT_0_0_WEIGHT_WIDTH_EXT_SHIFT			_MK_SHIFT_CONST(0)
+#define CSC_D_WEIGHT_SIZE_EXT_0_0_WEIGHT_WIDTH_EXT_FIELD			_MK_FIELD_CONST(0x1f, CSC_D_WEIGHT_SIZE_EXT_0_0_WEIGHT_WIDTH_EXT_SHIFT)
+#define CSC_D_WEIGHT_SIZE_EXT_0_0_WEIGHT_HEIGHT_EXT_SHIFT			_MK_SHIFT_CONST(16)
+#define CSC_D_WEIGHT_SIZE_EXT_0_0_WEIGHT_HEIGHT_EXT_FIELD			_MK_FIELD_CONST(0x1f, CSC_D_WEIGHT_SIZE_EXT_0_0_WEIGHT_HEIGHT_EXT_SHIFT)
+
+
+// Register CSC_D_WEIGHT_SIZE_EXT_1_0
+#define CSC_D_WEIGHT_SIZE_EXT_1_0			_MK_ADDR_CONST(0x4030)
+#define CSC_D_WEIGHT_SIZE_EXT_1_0_WEIGHT_CHANNEL_EXT_SHIFT			_MK_SHIFT_CONST(0)
+#define CSC_D_WEIGHT_SIZE_EXT_1_0_WEIGHT_CHANNEL_EXT_FIELD			_MK_FIELD_CONST(0x1fff, CSC_D_WEIGHT_SIZE_EXT_1_0_WEIGHT_CHANNEL_EXT_SHIFT)
+#define CSC_D_WEIGHT_SIZE_EXT_1_0_WEIGHT_KERNEL_SHIFT			_MK_SHIFT_CONST(16)
+#define CSC_D_WEIGHT_SIZE_EXT_1_0_WEIGHT_KERNEL_FIELD			_MK_FIELD_CONST(0x1fff, CSC_D_WEIGHT_SIZE_EXT_1_0_WEIGHT_KERNEL_SHIFT)
+
+
+// Register CSC_D_WEIGHT_BYTES_0
+#define CSC_D_WEIGHT_BYTES_0			_MK_ADDR_CONST(0x4034)
+#define CSC_D_WEIGHT_BYTES_0_WEIGHT_BYTES_SHIFT			_MK_SHIFT_CONST(0)
+#define CSC_D_WEIGHT_BYTES_0_WEIGHT_BYTES_FIELD			_MK_FIELD_CONST(0xffffffff, CSC_D_WEIGHT_BYTES_0_WEIGHT_BYTES_SHIFT)
+
+
+// Register CSC_D_WMB_BYTES_0
+#define CSC_D_WMB_BYTES_0			_MK_ADDR_CONST(0x4038)
+#define CSC_D_WMB_BYTES_0_WMB_BYTES_SHIFT			_MK_SHIFT_CONST(0)
+#define CSC_D_WMB_BYTES_0_WMB_BYTES_FIELD			_MK_FIELD_CONST(0xfffffff, CSC_D_WMB_BYTES_0_WMB_BYTES_SHIFT)
+
+
+// Register CSC_D_DATAOUT_SIZE_0_0
+#define CSC_D_DATAOUT_SIZE_0_0			_MK_ADDR_CONST(0x403c)
+#define CSC_D_DATAOUT_SIZE_0_0_DATAOUT_WIDTH_SHIFT			_MK_SHIFT_CONST(0)
+#define CSC_D_DATAOUT_SIZE_0_0_DATAOUT_WIDTH_FIELD			_MK_FIELD_CONST(0x1fff, CSC_D_DATAOUT_SIZE_0_0_DATAOUT_WIDTH_SHIFT)
+#define CSC_D_DATAOUT_SIZE_0_0_DATAOUT_HEIGHT_SHIFT			_MK_SHIFT_CONST(16)
+#define CSC_D_DATAOUT_SIZE_0_0_DATAOUT_HEIGHT_FIELD			_MK_FIELD_CONST(0x1fff, CSC_D_DATAOUT_SIZE_0_0_DATAOUT_HEIGHT_SHIFT)
+
+
+// Register CSC_D_DATAOUT_SIZE_1_0
+#define CSC_D_DATAOUT_SIZE_1_0			_MK_ADDR_CONST(0x4040)
+#define CSC_D_DATAOUT_SIZE_1_0_DATAOUT_CHANNEL_SHIFT			_MK_SHIFT_CONST(0)
+#define CSC_D_DATAOUT_SIZE_1_0_DATAOUT_CHANNEL_FIELD			_MK_FIELD_CONST(0x1fff, CSC_D_DATAOUT_SIZE_1_0_DATAOUT_CHANNEL_SHIFT)
+
+
+// Register CSC_D_ATOMICS_0
+#define CSC_D_ATOMICS_0			_MK_ADDR_CONST(0x4044)
+#define CSC_D_ATOMICS_0_ATOMICS_SHIFT			_MK_SHIFT_CONST(0)
+#define CSC_D_ATOMICS_0_ATOMICS_FIELD			_MK_FIELD_CONST(0x1fffff, CSC_D_ATOMICS_0_ATOMICS_SHIFT)
+
+
+// Register CSC_D_RELEASE_0
+#define CSC_D_RELEASE_0			_MK_ADDR_CONST(0x4048)
+#define CSC_D_RELEASE_0_RLS_SLICES_SHIFT			_MK_SHIFT_CONST(0)
+#define CSC_D_RELEASE_0_RLS_SLICES_FIELD			_MK_FIELD_CONST(0xfff, CSC_D_RELEASE_0_RLS_SLICES_SHIFT)
+
+
+// Register CSC_D_CONV_STRIDE_EXT_0
+#define CSC_D_CONV_STRIDE_EXT_0			_MK_ADDR_CONST(0x404c)
+#define CSC_D_CONV_STRIDE_EXT_0_CONV_X_STRIDE_EXT_SHIFT			_MK_SHIFT_CONST(0)
+#define CSC_D_CONV_STRIDE_EXT_0_CONV_X_STRIDE_EXT_FIELD			_MK_FIELD_CONST(0x7, CSC_D_CONV_STRIDE_EXT_0_CONV_X_STRIDE_EXT_SHIFT)
+#define CSC_D_CONV_STRIDE_EXT_0_CONV_Y_STRIDE_EXT_SHIFT			_MK_SHIFT_CONST(16)
+#define CSC_D_CONV_STRIDE_EXT_0_CONV_Y_STRIDE_EXT_FIELD			_MK_FIELD_CONST(0x7, CSC_D_CONV_STRIDE_EXT_0_CONV_Y_STRIDE_EXT_SHIFT)
+
+
+// Register CSC_D_DILATION_EXT_0
+#define CSC_D_DILATION_EXT_0			_MK_ADDR_CONST(0x4050)
+#define CSC_D_DILATION_EXT_0_X_DILATION_EXT_SHIFT			_MK_SHIFT_CONST(0)
+#define CSC_D_DILATION_EXT_0_X_DILATION_EXT_FIELD			_MK_FIELD_CONST(0x1f, CSC_D_DILATION_EXT_0_X_DILATION_EXT_SHIFT)
+#define CSC_D_DILATION_EXT_0_Y_DILATION_EXT_SHIFT			_MK_SHIFT_CONST(16)
+#define CSC_D_DILATION_EXT_0_Y_DILATION_EXT_FIELD			_MK_FIELD_CONST(0x1f, CSC_D_DILATION_EXT_0_Y_DILATION_EXT_SHIFT)
+
+
+// Register CSC_D_ZERO_PADDING_0
+#define CSC_D_ZERO_PADDING_0			_MK_ADDR_CONST(0x4054)
+#define CSC_D_ZERO_PADDING_0_PAD_LEFT_SHIFT			_MK_SHIFT_CONST(0)
+#define CSC_D_ZERO_PADDING_0_PAD_LEFT_FIELD			_MK_FIELD_CONST(0x1f, CSC_D_ZERO_PADDING_0_PAD_LEFT_SHIFT)
+#define CSC_D_ZERO_PADDING_0_PAD_TOP_SHIFT			_MK_SHIFT_CONST(16)
+#define CSC_D_ZERO_PADDING_0_PAD_TOP_FIELD			_MK_FIELD_CONST(0x1f, CSC_D_ZERO_PADDING_0_PAD_TOP_SHIFT)
+
+
+// Register CSC_D_ZERO_PADDING_VALUE_0
+#define CSC_D_ZERO_PADDING_VALUE_0			_MK_ADDR_CONST(0x4058)
+#define CSC_D_ZERO_PADDING_VALUE_0_PAD_VALUE_SHIFT			_MK_SHIFT_CONST(0)
+#define CSC_D_ZERO_PADDING_VALUE_0_PAD_VALUE_FIELD			_MK_FIELD_CONST(0xffff, CSC_D_ZERO_PADDING_VALUE_0_PAD_VALUE_SHIFT)
+
+
+// Register CSC_D_BANK_0
+#define CSC_D_BANK_0			_MK_ADDR_CONST(0x405c)
+#define CSC_D_BANK_0_DATA_BANK_SHIFT			_MK_SHIFT_CONST(0)
+#define CSC_D_BANK_0_DATA_BANK_FIELD			_MK_FIELD_CONST(0x1f, CSC_D_BANK_0_DATA_BANK_SHIFT)
+#define CSC_D_BANK_0_WEIGHT_BANK_SHIFT			_MK_SHIFT_CONST(16)
+#define CSC_D_BANK_0_WEIGHT_BANK_FIELD			_MK_FIELD_CONST(0x1f, CSC_D_BANK_0_WEIGHT_BANK_SHIFT)
+
+
+// Register CSC_D_PRA_CFG_0
+#define CSC_D_PRA_CFG_0			_MK_ADDR_CONST(0x4060)
+#define CSC_D_PRA_CFG_0_PRA_TRUNCATE_SHIFT			_MK_SHIFT_CONST(0)
+#define CSC_D_PRA_CFG_0_PRA_TRUNCATE_FIELD			_MK_FIELD_CONST(0x3, CSC_D_PRA_CFG_0_PRA_TRUNCATE_SHIFT)
+
+
+// Register CSC_D_CYA_0
+#define CSC_D_CYA_0			_MK_ADDR_CONST(0x4064)
+#define CSC_D_CYA_0_CYA_SHIFT			_MK_SHIFT_CONST(0)
+#define CSC_D_CYA_0_CYA_FIELD			_MK_FIELD_CONST(0xffffffff, CSC_D_CYA_0_CYA_SHIFT)
+
+
+
+// To satisfy various compilers and platforms,
+// we let users control the types and syntax of certain constants, using macros.
+#ifndef _MK_SHIFT_CONST
+  #define _MK_SHIFT_CONST(_constant_) _constant_
+#endif
+#ifndef _MK_MASK_CONST
+  #define _MK_MASK_CONST(_constant_) _constant_
+#endif
+#ifndef _MK_ENUM_CONST
+  #define _MK_ENUM_CONST(_constant_) (_constant_ ## UL)
+#endif
+#ifndef _MK_ADDR_CONST
+  #define _MK_ADDR_CONST(_constant_) _constant_
+#endif
+#ifndef _MK_FIELD_CONST
+  #define _MK_FIELD_CONST(_mask_, _shift_) (_MK_MASK_CONST(_mask_) << _MK_SHIFT_CONST(_shift_))
+#endif
+
+
+// Register CMAC_A_S_STATUS_0
+#define CMAC_A_S_STATUS_0			_MK_ADDR_CONST(0x5000)
+#define CMAC_A_S_STATUS_0_STATUS_0_SHIFT			_MK_SHIFT_CONST(0)
+#define CMAC_A_S_STATUS_0_STATUS_0_FIELD			_MK_FIELD_CONST(0x3, CMAC_A_S_STATUS_0_STATUS_0_SHIFT)
+#define CMAC_A_S_STATUS_0_STATUS_0_IDLE			_MK_ENUM_CONST(0x0)
+#define CMAC_A_S_STATUS_0_STATUS_0_RUNNING			_MK_ENUM_CONST(0x1)
+#define CMAC_A_S_STATUS_0_STATUS_0_PENDING			_MK_ENUM_CONST(0x2)
+#define CMAC_A_S_STATUS_0_STATUS_1_SHIFT			_MK_SHIFT_CONST(16)
+#define CMAC_A_S_STATUS_0_STATUS_1_FIELD			_MK_FIELD_CONST(0x3, CMAC_A_S_STATUS_0_STATUS_1_SHIFT)
+#define CMAC_A_S_STATUS_0_STATUS_1_IDLE			_MK_ENUM_CONST(0x0)
+#define CMAC_A_S_STATUS_0_STATUS_1_RUNNING			_MK_ENUM_CONST(0x1)
+#define CMAC_A_S_STATUS_0_STATUS_1_PENDING			_MK_ENUM_CONST(0x2)
+
+
+// Register CMAC_A_S_POINTER_0
+#define CMAC_A_S_POINTER_0			_MK_ADDR_CONST(0x5004)
+#define CMAC_A_S_POINTER_0_PRODUCER_SHIFT			_MK_SHIFT_CONST(0)
+#define CMAC_A_S_POINTER_0_PRODUCER_FIELD			_MK_FIELD_CONST(0x1, CMAC_A_S_POINTER_0_PRODUCER_SHIFT)
+#define CMAC_A_S_POINTER_0_PRODUCER_GROUP_0			_MK_ENUM_CONST(0x0)
+#define CMAC_A_S_POINTER_0_PRODUCER_GROUP_1			_MK_ENUM_CONST(0x1)
+#define CMAC_A_S_POINTER_0_CONSUMER_SHIFT			_MK_SHIFT_CONST(16)
+#define CMAC_A_S_POINTER_0_CONSUMER_FIELD			_MK_FIELD_CONST(0x1, CMAC_A_S_POINTER_0_CONSUMER_SHIFT)
+#define CMAC_A_S_POINTER_0_CONSUMER_GROUP_0			_MK_ENUM_CONST(0x0)
+#define CMAC_A_S_POINTER_0_CONSUMER_GROUP_1			_MK_ENUM_CONST(0x1)
+
+
+// Register CMAC_A_D_OP_ENABLE_0
+#define CMAC_A_D_OP_ENABLE_0			_MK_ADDR_CONST(0x5008)
+#define CMAC_A_D_OP_ENABLE_0_OP_EN_SHIFT			_MK_SHIFT_CONST(0)
+#define CMAC_A_D_OP_ENABLE_0_OP_EN_FIELD			_MK_FIELD_CONST(0x1, CMAC_A_D_OP_ENABLE_0_OP_EN_SHIFT)
+#define CMAC_A_D_OP_ENABLE_0_OP_EN_DISABLE			_MK_ENUM_CONST(0x0)
+#define CMAC_A_D_OP_ENABLE_0_OP_EN_ENABLE			_MK_ENUM_CONST(0x1)
+
+
+// Register CMAC_A_D_MISC_CFG_0
+#define CMAC_A_D_MISC_CFG_0			_MK_ADDR_CONST(0x500c)
+#define CMAC_A_D_MISC_CFG_0_CONV_MODE_SHIFT			_MK_SHIFT_CONST(0)
+#define CMAC_A_D_MISC_CFG_0_CONV_MODE_FIELD			_MK_FIELD_CONST(0x1, CMAC_A_D_MISC_CFG_0_CONV_MODE_SHIFT)
+#define CMAC_A_D_MISC_CFG_0_CONV_MODE_DIRECT			_MK_ENUM_CONST(0x0)
+#define CMAC_A_D_MISC_CFG_0_CONV_MODE_WINOGRAD			_MK_ENUM_CONST(0x1)
+#define CMAC_A_D_MISC_CFG_0_PROC_PRECISION_SHIFT			_MK_SHIFT_CONST(12)
+#define CMAC_A_D_MISC_CFG_0_PROC_PRECISION_FIELD			_MK_FIELD_CONST(0x3, CMAC_A_D_MISC_CFG_0_PROC_PRECISION_SHIFT)
+#define CMAC_A_D_MISC_CFG_0_PROC_PRECISION_INT8			_MK_ENUM_CONST(0x0)
+#define CMAC_A_D_MISC_CFG_0_PROC_PRECISION_INT16			_MK_ENUM_CONST(0x1)
+#define CMAC_A_D_MISC_CFG_0_PROC_PRECISION_FP16			_MK_ENUM_CONST(0x2)
+
+
+
+// To satisfy various compilers and platforms,
+// we let users control the types and syntax of certain constants, using macros.
+#ifndef _MK_SHIFT_CONST
+  #define _MK_SHIFT_CONST(_constant_) _constant_
+#endif
+#ifndef _MK_MASK_CONST
+  #define _MK_MASK_CONST(_constant_) _constant_
+#endif
+#ifndef _MK_ENUM_CONST
+  #define _MK_ENUM_CONST(_constant_) (_constant_ ## UL)
+#endif
+#ifndef _MK_ADDR_CONST
+  #define _MK_ADDR_CONST(_constant_) _constant_
+#endif
+#ifndef _MK_FIELD_CONST
+  #define _MK_FIELD_CONST(_mask_, _shift_) (_MK_MASK_CONST(_mask_) << _MK_SHIFT_CONST(_shift_))
+#endif
+
+
+// Register CMAC_B_S_STATUS_0
+#define CMAC_B_S_STATUS_0			_MK_ADDR_CONST(0x6000)
+#define CMAC_B_S_STATUS_0_STATUS_0_SHIFT			_MK_SHIFT_CONST(0)
+#define CMAC_B_S_STATUS_0_STATUS_0_FIELD			_MK_FIELD_CONST(0x3, CMAC_B_S_STATUS_0_STATUS_0_SHIFT)
+#define CMAC_B_S_STATUS_0_STATUS_0_IDLE			_MK_ENUM_CONST(0x0)
+#define CMAC_B_S_STATUS_0_STATUS_0_RUNNING			_MK_ENUM_CONST(0x1)
+#define CMAC_B_S_STATUS_0_STATUS_0_PENDING			_MK_ENUM_CONST(0x2)
+#define CMAC_B_S_STATUS_0_STATUS_1_SHIFT			_MK_SHIFT_CONST(16)
+#define CMAC_B_S_STATUS_0_STATUS_1_FIELD			_MK_FIELD_CONST(0x3, CMAC_B_S_STATUS_0_STATUS_1_SHIFT)
+#define CMAC_B_S_STATUS_0_STATUS_1_IDLE			_MK_ENUM_CONST(0x0)
+#define CMAC_B_S_STATUS_0_STATUS_1_RUNNING			_MK_ENUM_CONST(0x1)
+#define CMAC_B_S_STATUS_0_STATUS_1_PENDING			_MK_ENUM_CONST(0x2)
+
+
+// Register CMAC_B_S_POINTER_0
+#define CMAC_B_S_POINTER_0			_MK_ADDR_CONST(0x6004)
+#define CMAC_B_S_POINTER_0_PRODUCER_SHIFT			_MK_SHIFT_CONST(0)
+#define CMAC_B_S_POINTER_0_PRODUCER_FIELD			_MK_FIELD_CONST(0x1, CMAC_B_S_POINTER_0_PRODUCER_SHIFT)
+#define CMAC_B_S_POINTER_0_PRODUCER_GROUP_0			_MK_ENUM_CONST(0x0)
+#define CMAC_B_S_POINTER_0_PRODUCER_GROUP_1			_MK_ENUM_CONST(0x1)
+#define CMAC_B_S_POINTER_0_CONSUMER_SHIFT			_MK_SHIFT_CONST(16)
+#define CMAC_B_S_POINTER_0_CONSUMER_FIELD			_MK_FIELD_CONST(0x1, CMAC_B_S_POINTER_0_CONSUMER_SHIFT)
+#define CMAC_B_S_POINTER_0_CONSUMER_GROUP_0			_MK_ENUM_CONST(0x0)
+#define CMAC_B_S_POINTER_0_CONSUMER_GROUP_1			_MK_ENUM_CONST(0x1)
+
+
+// Register CMAC_B_D_OP_ENABLE_0
+#define CMAC_B_D_OP_ENABLE_0			_MK_ADDR_CONST(0x6008)
+#define CMAC_B_D_OP_ENABLE_0_OP_EN_SHIFT			_MK_SHIFT_CONST(0)
+#define CMAC_B_D_OP_ENABLE_0_OP_EN_FIELD			_MK_FIELD_CONST(0x1, CMAC_B_D_OP_ENABLE_0_OP_EN_SHIFT)
+#define CMAC_B_D_OP_ENABLE_0_OP_EN_DISABLE			_MK_ENUM_CONST(0x0)
+#define CMAC_B_D_OP_ENABLE_0_OP_EN_ENABLE			_MK_ENUM_CONST(0x1)
+
+
+// Register CMAC_B_D_MISC_CFG_0
+#define CMAC_B_D_MISC_CFG_0			_MK_ADDR_CONST(0x600c)
+#define CMAC_B_D_MISC_CFG_0_CONV_MODE_SHIFT			_MK_SHIFT_CONST(0)
+#define CMAC_B_D_MISC_CFG_0_CONV_MODE_FIELD			_MK_FIELD_CONST(0x1, CMAC_B_D_MISC_CFG_0_CONV_MODE_SHIFT)
+#define CMAC_B_D_MISC_CFG_0_CONV_MODE_DIRECT			_MK_ENUM_CONST(0x0)
+#define CMAC_B_D_MISC_CFG_0_CONV_MODE_WINOGRAD			_MK_ENUM_CONST(0x1)
+#define CMAC_B_D_MISC_CFG_0_PROC_PRECISION_SHIFT			_MK_SHIFT_CONST(12)
+#define CMAC_B_D_MISC_CFG_0_PROC_PRECISION_FIELD			_MK_FIELD_CONST(0x3, CMAC_B_D_MISC_CFG_0_PROC_PRECISION_SHIFT)
+#define CMAC_B_D_MISC_CFG_0_PROC_PRECISION_INT8			_MK_ENUM_CONST(0x0)
+#define CMAC_B_D_MISC_CFG_0_PROC_PRECISION_INT16			_MK_ENUM_CONST(0x1)
+#define CMAC_B_D_MISC_CFG_0_PROC_PRECISION_FP16			_MK_ENUM_CONST(0x2)
+
+
+
+// To satisfy various compilers and platforms,
+// we let users control the types and syntax of certain constants, using macros.
+#ifndef _MK_SHIFT_CONST
+  #define _MK_SHIFT_CONST(_constant_) _constant_
+#endif
+#ifndef _MK_MASK_CONST
+  #define _MK_MASK_CONST(_constant_) _constant_
+#endif
+#ifndef _MK_ENUM_CONST
+  #define _MK_ENUM_CONST(_constant_) (_constant_ ## UL)
+#endif
+#ifndef _MK_ADDR_CONST
+  #define _MK_ADDR_CONST(_constant_) _constant_
+#endif
+#ifndef _MK_FIELD_CONST
+  #define _MK_FIELD_CONST(_mask_, _shift_) (_MK_MASK_CONST(_mask_) << _MK_SHIFT_CONST(_shift_))
+#endif
+
+
+// Register CACC_S_STATUS_0
+#define CACC_S_STATUS_0			_MK_ADDR_CONST(0x7000)
+#define CACC_S_STATUS_0_STATUS_0_SHIFT			_MK_SHIFT_CONST(0)
+#define CACC_S_STATUS_0_STATUS_0_FIELD			_MK_FIELD_CONST(0x3, CACC_S_STATUS_0_STATUS_0_SHIFT)
+#define CACC_S_STATUS_0_STATUS_0_IDLE			_MK_ENUM_CONST(0x0)
+#define CACC_S_STATUS_0_STATUS_0_RUNNING			_MK_ENUM_CONST(0x1)
+#define CACC_S_STATUS_0_STATUS_0_PENDING			_MK_ENUM_CONST(0x2)
+#define CACC_S_STATUS_0_STATUS_1_SHIFT			_MK_SHIFT_CONST(16)
+#define CACC_S_STATUS_0_STATUS_1_FIELD			_MK_FIELD_CONST(0x3, CACC_S_STATUS_0_STATUS_1_SHIFT)
+#define CACC_S_STATUS_0_STATUS_1_IDLE			_MK_ENUM_CONST(0x0)
+#define CACC_S_STATUS_0_STATUS_1_RUNNING			_MK_ENUM_CONST(0x1)
+#define CACC_S_STATUS_0_STATUS_1_PENDING			_MK_ENUM_CONST(0x2)
+
+
+// Register CACC_S_POINTER_0
+#define CACC_S_POINTER_0			_MK_ADDR_CONST(0x7004)
+#define CACC_S_POINTER_0_PRODUCER_SHIFT			_MK_SHIFT_CONST(0)
+#define CACC_S_POINTER_0_PRODUCER_FIELD			_MK_FIELD_CONST(0x1, CACC_S_POINTER_0_PRODUCER_SHIFT)
+#define CACC_S_POINTER_0_PRODUCER_GROUP_0			_MK_ENUM_CONST(0x0)
+#define CACC_S_POINTER_0_PRODUCER_GROUP_1			_MK_ENUM_CONST(0x1)
+#define CACC_S_POINTER_0_CONSUMER_SHIFT			_MK_SHIFT_CONST(16)
+#define CACC_S_POINTER_0_CONSUMER_FIELD			_MK_FIELD_CONST(0x1, CACC_S_POINTER_0_CONSUMER_SHIFT)
+#define CACC_S_POINTER_0_CONSUMER_GROUP_0			_MK_ENUM_CONST(0x0)
+#define CACC_S_POINTER_0_CONSUMER_GROUP_1			_MK_ENUM_CONST(0x1)
+
+
+// Register CACC_D_OP_ENABLE_0
+#define CACC_D_OP_ENABLE_0			_MK_ADDR_CONST(0x7008)
+#define CACC_D_OP_ENABLE_0_OP_EN_SHIFT			_MK_SHIFT_CONST(0)
+#define CACC_D_OP_ENABLE_0_OP_EN_FIELD			_MK_FIELD_CONST(0x1, CACC_D_OP_ENABLE_0_OP_EN_SHIFT)
+#define CACC_D_OP_ENABLE_0_OP_EN_DISABLE			_MK_ENUM_CONST(0x0)
+#define CACC_D_OP_ENABLE_0_OP_EN_ENABLE			_MK_ENUM_CONST(0x1)
+
+
+// Register CACC_D_MISC_CFG_0
+#define CACC_D_MISC_CFG_0			_MK_ADDR_CONST(0x700c)
+#define CACC_D_MISC_CFG_0_CONV_MODE_SHIFT			_MK_SHIFT_CONST(0)
+#define CACC_D_MISC_CFG_0_CONV_MODE_FIELD			_MK_FIELD_CONST(0x1, CACC_D_MISC_CFG_0_CONV_MODE_SHIFT)
+#define CACC_D_MISC_CFG_0_CONV_MODE_DIRECT			_MK_ENUM_CONST(0x0)
+#define CACC_D_MISC_CFG_0_CONV_MODE_WINOGRAD			_MK_ENUM_CONST(0x1)
+#define CACC_D_MISC_CFG_0_PROC_PRECISION_SHIFT			_MK_SHIFT_CONST(12)
+#define CACC_D_MISC_CFG_0_PROC_PRECISION_FIELD			_MK_FIELD_CONST(0x3, CACC_D_MISC_CFG_0_PROC_PRECISION_SHIFT)
+#define CACC_D_MISC_CFG_0_PROC_PRECISION_INT8			_MK_ENUM_CONST(0x0)
+#define CACC_D_MISC_CFG_0_PROC_PRECISION_INT16			_MK_ENUM_CONST(0x1)
+#define CACC_D_MISC_CFG_0_PROC_PRECISION_FP16			_MK_ENUM_CONST(0x2)
+
+
+// Register CACC_D_DATAOUT_SIZE_0_0
+#define CACC_D_DATAOUT_SIZE_0_0			_MK_ADDR_CONST(0x7010)
+#define CACC_D_DATAOUT_SIZE_0_0_DATAOUT_WIDTH_SHIFT			_MK_SHIFT_CONST(0)
+#define CACC_D_DATAOUT_SIZE_0_0_DATAOUT_WIDTH_FIELD			_MK_FIELD_CONST(0x1fff, CACC_D_DATAOUT_SIZE_0_0_DATAOUT_WIDTH_SHIFT)
+#define CACC_D_DATAOUT_SIZE_0_0_DATAOUT_HEIGHT_SHIFT			_MK_SHIFT_CONST(16)
+#define CACC_D_DATAOUT_SIZE_0_0_DATAOUT_HEIGHT_FIELD			_MK_FIELD_CONST(0x1fff, CACC_D_DATAOUT_SIZE_0_0_DATAOUT_HEIGHT_SHIFT)
+
+
+// Register CACC_D_DATAOUT_SIZE_1_0
+#define CACC_D_DATAOUT_SIZE_1_0			_MK_ADDR_CONST(0x7014)
+#define CACC_D_DATAOUT_SIZE_1_0_DATAOUT_CHANNEL_SHIFT			_MK_SHIFT_CONST(0)
+#define CACC_D_DATAOUT_SIZE_1_0_DATAOUT_CHANNEL_FIELD			_MK_FIELD_CONST(0x1fff, CACC_D_DATAOUT_SIZE_1_0_DATAOUT_CHANNEL_SHIFT)
+
+
+// Register CACC_D_DATAOUT_ADDR_0
+#define CACC_D_DATAOUT_ADDR_0			_MK_ADDR_CONST(0x7018)
+#define CACC_D_DATAOUT_ADDR_0_DATAOUT_ADDR_SHIFT			_MK_SHIFT_CONST(0)
+#define CACC_D_DATAOUT_ADDR_0_DATAOUT_ADDR_FIELD			_MK_FIELD_CONST(0xffffffff, CACC_D_DATAOUT_ADDR_0_DATAOUT_ADDR_SHIFT)
+
+
+// Register CACC_D_BATCH_NUMBER_0
+#define CACC_D_BATCH_NUMBER_0			_MK_ADDR_CONST(0x701c)
+#define CACC_D_BATCH_NUMBER_0_BATCHES_SHIFT			_MK_SHIFT_CONST(0)
+#define CACC_D_BATCH_NUMBER_0_BATCHES_FIELD			_MK_FIELD_CONST(0x1f, CACC_D_BATCH_NUMBER_0_BATCHES_SHIFT)
+
+
+// Register CACC_D_LINE_STRIDE_0
+#define CACC_D_LINE_STRIDE_0			_MK_ADDR_CONST(0x7020)
+#define CACC_D_LINE_STRIDE_0_LINE_STRIDE_SHIFT			_MK_SHIFT_CONST(0)
+#define CACC_D_LINE_STRIDE_0_LINE_STRIDE_FIELD			_MK_FIELD_CONST(0xffffff, CACC_D_LINE_STRIDE_0_LINE_STRIDE_SHIFT)
+
+
+// Register CACC_D_SURF_STRIDE_0
+#define CACC_D_SURF_STRIDE_0			_MK_ADDR_CONST(0x7024)
+#define CACC_D_SURF_STRIDE_0_SURF_STRIDE_SHIFT			_MK_SHIFT_CONST(0)
+#define CACC_D_SURF_STRIDE_0_SURF_STRIDE_FIELD			_MK_FIELD_CONST(0xffffff, CACC_D_SURF_STRIDE_0_SURF_STRIDE_SHIFT)
+
+
+// Register CACC_D_DATAOUT_MAP_0
+#define CACC_D_DATAOUT_MAP_0			_MK_ADDR_CONST(0x7028)
+#define CACC_D_DATAOUT_MAP_0_LINE_PACKED_SHIFT			_MK_SHIFT_CONST(0)
+#define CACC_D_DATAOUT_MAP_0_LINE_PACKED_FIELD			_MK_FIELD_CONST(0x1, CACC_D_DATAOUT_MAP_0_LINE_PACKED_SHIFT)
+#define CACC_D_DATAOUT_MAP_0_LINE_PACKED_FALSE			_MK_ENUM_CONST(0x0)
+#define CACC_D_DATAOUT_MAP_0_LINE_PACKED_TRUE			_MK_ENUM_CONST(0x1)
+#define CACC_D_DATAOUT_MAP_0_SURF_PACKED_SHIFT			_MK_SHIFT_CONST(16)
+#define CACC_D_DATAOUT_MAP_0_SURF_PACKED_FIELD			_MK_FIELD_CONST(0x1, CACC_D_DATAOUT_MAP_0_SURF_PACKED_SHIFT)
+#define CACC_D_DATAOUT_MAP_0_SURF_PACKED_FALSE			_MK_ENUM_CONST(0x0)
+#define CACC_D_DATAOUT_MAP_0_SURF_PACKED_TRUE			_MK_ENUM_CONST(0x1)
+
+
+// Register CACC_D_CLIP_CFG_0
+#define CACC_D_CLIP_CFG_0			_MK_ADDR_CONST(0x702c)
+#define CACC_D_CLIP_CFG_0_CLIP_TRUNCATE_SHIFT			_MK_SHIFT_CONST(0)
+#define CACC_D_CLIP_CFG_0_CLIP_TRUNCATE_FIELD			_MK_FIELD_CONST(0x1f, CACC_D_CLIP_CFG_0_CLIP_TRUNCATE_SHIFT)
+
+
+// Register CACC_D_OUT_SATURATION_0
+#define CACC_D_OUT_SATURATION_0			_MK_ADDR_CONST(0x7030)
+#define CACC_D_OUT_SATURATION_0_SAT_COUNT_SHIFT			_MK_SHIFT_CONST(0)
+#define CACC_D_OUT_SATURATION_0_SAT_COUNT_FIELD			_MK_FIELD_CONST(0xffffffff, CACC_D_OUT_SATURATION_0_SAT_COUNT_SHIFT)
+
+
+// Register CACC_D_CYA_0
+#define CACC_D_CYA_0			_MK_ADDR_CONST(0x7034)
+#define CACC_D_CYA_0_CYA_SHIFT			_MK_SHIFT_CONST(0)
+#define CACC_D_CYA_0_CYA_FIELD			_MK_FIELD_CONST(0xffffffff, CACC_D_CYA_0_CYA_SHIFT)
+
+
+
+// To satisfy various compilers and platforms,
+// we let users control the types and syntax of certain constants, using macros.
+#ifndef _MK_SHIFT_CONST
+  #define _MK_SHIFT_CONST(_constant_) _constant_
+#endif
+#ifndef _MK_MASK_CONST
+  #define _MK_MASK_CONST(_constant_) _constant_
+#endif
+#ifndef _MK_ENUM_CONST
+  #define _MK_ENUM_CONST(_constant_) (_constant_ ## UL)
+#endif
+#ifndef _MK_ADDR_CONST
+  #define _MK_ADDR_CONST(_constant_) _constant_
+#endif
+#ifndef _MK_FIELD_CONST
+  #define _MK_FIELD_CONST(_mask_, _shift_) (_MK_MASK_CONST(_mask_) << _MK_SHIFT_CONST(_shift_))
+#endif
+
+
+// Register SDP_RDMA_S_STATUS_0
+#define SDP_RDMA_S_STATUS_0			_MK_ADDR_CONST(0x8000)
+#define SDP_RDMA_S_STATUS_0_STATUS_0_SHIFT			_MK_SHIFT_CONST(0)
+#define SDP_RDMA_S_STATUS_0_STATUS_0_FIELD			_MK_FIELD_CONST(0x3, SDP_RDMA_S_STATUS_0_STATUS_0_SHIFT)
+#define SDP_RDMA_S_STATUS_0_STATUS_0_IDLE			_MK_ENUM_CONST(0x0)
+#define SDP_RDMA_S_STATUS_0_STATUS_0_RUNNING			_MK_ENUM_CONST(0x1)
+#define SDP_RDMA_S_STATUS_0_STATUS_0_PENDING			_MK_ENUM_CONST(0x2)
+#define SDP_RDMA_S_STATUS_0_STATUS_1_SHIFT			_MK_SHIFT_CONST(16)
+#define SDP_RDMA_S_STATUS_0_STATUS_1_FIELD			_MK_FIELD_CONST(0x3, SDP_RDMA_S_STATUS_0_STATUS_1_SHIFT)
+#define SDP_RDMA_S_STATUS_0_STATUS_1_IDLE			_MK_ENUM_CONST(0x0)
+#define SDP_RDMA_S_STATUS_0_STATUS_1_RUNNING			_MK_ENUM_CONST(0x1)
+#define SDP_RDMA_S_STATUS_0_STATUS_1_PENDING			_MK_ENUM_CONST(0x2)
+
+
+// Register SDP_RDMA_S_POINTER_0
+#define SDP_RDMA_S_POINTER_0			_MK_ADDR_CONST(0x8004)
+#define SDP_RDMA_S_POINTER_0_PRODUCER_SHIFT			_MK_SHIFT_CONST(0)
+#define SDP_RDMA_S_POINTER_0_PRODUCER_FIELD			_MK_FIELD_CONST(0x1, SDP_RDMA_S_POINTER_0_PRODUCER_SHIFT)
+#define SDP_RDMA_S_POINTER_0_PRODUCER_GROUP_0			_MK_ENUM_CONST(0x0)
+#define SDP_RDMA_S_POINTER_0_PRODUCER_GROUP_1			_MK_ENUM_CONST(0x1)
+#define SDP_RDMA_S_POINTER_0_CONSUMER_SHIFT			_MK_SHIFT_CONST(16)
+#define SDP_RDMA_S_POINTER_0_CONSUMER_FIELD			_MK_FIELD_CONST(0x1, SDP_RDMA_S_POINTER_0_CONSUMER_SHIFT)
+#define SDP_RDMA_S_POINTER_0_CONSUMER_GROUP_0			_MK_ENUM_CONST(0x0)
+#define SDP_RDMA_S_POINTER_0_CONSUMER_GROUP_1			_MK_ENUM_CONST(0x1)
+
+
+// Register SDP_RDMA_D_OP_ENABLE_0
+#define SDP_RDMA_D_OP_ENABLE_0			_MK_ADDR_CONST(0x8008)
+#define SDP_RDMA_D_OP_ENABLE_0_OP_EN_SHIFT			_MK_SHIFT_CONST(0)
+#define SDP_RDMA_D_OP_ENABLE_0_OP_EN_FIELD			_MK_FIELD_CONST(0x1, SDP_RDMA_D_OP_ENABLE_0_OP_EN_SHIFT)
+#define SDP_RDMA_D_OP_ENABLE_0_OP_EN_DISABLE			_MK_ENUM_CONST(0x0)
+#define SDP_RDMA_D_OP_ENABLE_0_OP_EN_ENABLE			_MK_ENUM_CONST(0x1)
+
+
+// Register SDP_RDMA_D_DATA_CUBE_WIDTH_0
+#define SDP_RDMA_D_DATA_CUBE_WIDTH_0			_MK_ADDR_CONST(0x800c)
+#define SDP_RDMA_D_DATA_CUBE_WIDTH_0_WIDTH_SHIFT			_MK_SHIFT_CONST(0)
+#define SDP_RDMA_D_DATA_CUBE_WIDTH_0_WIDTH_FIELD			_MK_FIELD_CONST(0x1fff, SDP_RDMA_D_DATA_CUBE_WIDTH_0_WIDTH_SHIFT)
+
+
+// Register SDP_RDMA_D_DATA_CUBE_HEIGHT_0
+#define SDP_RDMA_D_DATA_CUBE_HEIGHT_0			_MK_ADDR_CONST(0x8010)
+#define SDP_RDMA_D_DATA_CUBE_HEIGHT_0_HEIGHT_SHIFT			_MK_SHIFT_CONST(0)
+#define SDP_RDMA_D_DATA_CUBE_HEIGHT_0_HEIGHT_FIELD			_MK_FIELD_CONST(0x1fff, SDP_RDMA_D_DATA_CUBE_HEIGHT_0_HEIGHT_SHIFT)
+
+
+// Register SDP_RDMA_D_DATA_CUBE_CHANNEL_0
+#define SDP_RDMA_D_DATA_CUBE_CHANNEL_0			_MK_ADDR_CONST(0x8014)
+#define SDP_RDMA_D_DATA_CUBE_CHANNEL_0_CHANNEL_SHIFT			_MK_SHIFT_CONST(0)
+#define SDP_RDMA_D_DATA_CUBE_CHANNEL_0_CHANNEL_FIELD			_MK_FIELD_CONST(0x1fff, SDP_RDMA_D_DATA_CUBE_CHANNEL_0_CHANNEL_SHIFT)
+
+
+// Register SDP_RDMA_D_SRC_BASE_ADDR_LOW_0
+#define SDP_RDMA_D_SRC_BASE_ADDR_LOW_0			_MK_ADDR_CONST(0x8018)
+#define SDP_RDMA_D_SRC_BASE_ADDR_LOW_0_SRC_BASE_ADDR_LOW_SHIFT			_MK_SHIFT_CONST(0)
+#define SDP_RDMA_D_SRC_BASE_ADDR_LOW_0_SRC_BASE_ADDR_LOW_FIELD			_MK_FIELD_CONST(0xffffffff, SDP_RDMA_D_SRC_BASE_ADDR_LOW_0_SRC_BASE_ADDR_LOW_SHIFT)
+
+
+// Register SDP_RDMA_D_SRC_BASE_ADDR_HIGH_0
+#define SDP_RDMA_D_SRC_BASE_ADDR_HIGH_0			_MK_ADDR_CONST(0x801c)
+#define SDP_RDMA_D_SRC_BASE_ADDR_HIGH_0_SRC_BASE_ADDR_HIGH_SHIFT			_MK_SHIFT_CONST(0)
+#define SDP_RDMA_D_SRC_BASE_ADDR_HIGH_0_SRC_BASE_ADDR_HIGH_FIELD			_MK_FIELD_CONST(0xffffffff, SDP_RDMA_D_SRC_BASE_ADDR_HIGH_0_SRC_BASE_ADDR_HIGH_SHIFT)
+
+
+// Register SDP_RDMA_D_SRC_LINE_STRIDE_0
+#define SDP_RDMA_D_SRC_LINE_STRIDE_0			_MK_ADDR_CONST(0x8020)
+#define SDP_RDMA_D_SRC_LINE_STRIDE_0_SRC_LINE_STRIDE_SHIFT			_MK_SHIFT_CONST(0)
+#define SDP_RDMA_D_SRC_LINE_STRIDE_0_SRC_LINE_STRIDE_FIELD			_MK_FIELD_CONST(0xffffffff, SDP_RDMA_D_SRC_LINE_STRIDE_0_SRC_LINE_STRIDE_SHIFT)
+
+
+// Register SDP_RDMA_D_SRC_SURFACE_STRIDE_0
+#define SDP_RDMA_D_SRC_SURFACE_STRIDE_0			_MK_ADDR_CONST(0x8024)
+#define SDP_RDMA_D_SRC_SURFACE_STRIDE_0_SRC_SURFACE_STRIDE_SHIFT			_MK_SHIFT_CONST(0)
+#define SDP_RDMA_D_SRC_SURFACE_STRIDE_0_SRC_SURFACE_STRIDE_FIELD			_MK_FIELD_CONST(0xffffffff, SDP_RDMA_D_SRC_SURFACE_STRIDE_0_SRC_SURFACE_STRIDE_SHIFT)
+
+
+// Register SDP_RDMA_D_BRDMA_CFG_0
+#define SDP_RDMA_D_BRDMA_CFG_0			_MK_ADDR_CONST(0x8028)
+#define SDP_RDMA_D_BRDMA_CFG_0_BRDMA_DISABLE_SHIFT			_MK_SHIFT_CONST(0)
+#define SDP_RDMA_D_BRDMA_CFG_0_BRDMA_DISABLE_FIELD			_MK_FIELD_CONST(0x1, SDP_RDMA_D_BRDMA_CFG_0_BRDMA_DISABLE_SHIFT)
+#define SDP_RDMA_D_BRDMA_CFG_0_BRDMA_DISABLE_NO			_MK_ENUM_CONST(0x0)
+#define SDP_RDMA_D_BRDMA_CFG_0_BRDMA_DISABLE_YES			_MK_ENUM_CONST(0x1)
+#define SDP_RDMA_D_BRDMA_CFG_0_BRDMA_DATA_USE_SHIFT			_MK_SHIFT_CONST(1)
+#define SDP_RDMA_D_BRDMA_CFG_0_BRDMA_DATA_USE_FIELD			_MK_FIELD_CONST(0x3, SDP_RDMA_D_BRDMA_CFG_0_BRDMA_DATA_USE_SHIFT)
+#define SDP_RDMA_D_BRDMA_CFG_0_BRDMA_DATA_USE_MUL			_MK_ENUM_CONST(0x0)
+#define SDP_RDMA_D_BRDMA_CFG_0_BRDMA_DATA_USE_ALU			_MK_ENUM_CONST(0x1)
+#define SDP_RDMA_D_BRDMA_CFG_0_BRDMA_DATA_USE_BOTH			_MK_ENUM_CONST(0x2)
+#define SDP_RDMA_D_BRDMA_CFG_0_BRDMA_DATA_SIZE_SHIFT			_MK_SHIFT_CONST(3)
+#define SDP_RDMA_D_BRDMA_CFG_0_BRDMA_DATA_SIZE_FIELD			_MK_FIELD_CONST(0x1, SDP_RDMA_D_BRDMA_CFG_0_BRDMA_DATA_SIZE_SHIFT)
+#define SDP_RDMA_D_BRDMA_CFG_0_BRDMA_DATA_SIZE_ONE_BYTE			_MK_ENUM_CONST(0x0)
+#define SDP_RDMA_D_BRDMA_CFG_0_BRDMA_DATA_SIZE_TWO_BYTE			_MK_ENUM_CONST(0x1)
+#define SDP_RDMA_D_BRDMA_CFG_0_BRDMA_DATA_MODE_SHIFT			_MK_SHIFT_CONST(4)
+#define SDP_RDMA_D_BRDMA_CFG_0_BRDMA_DATA_MODE_FIELD			_MK_FIELD_CONST(0x1, SDP_RDMA_D_BRDMA_CFG_0_BRDMA_DATA_MODE_SHIFT)
+#define SDP_RDMA_D_BRDMA_CFG_0_BRDMA_DATA_MODE_PER_KERNEL			_MK_ENUM_CONST(0x0)
+#define SDP_RDMA_D_BRDMA_CFG_0_BRDMA_DATA_MODE_PER_ELEMENT			_MK_ENUM_CONST(0x1)
+#define SDP_RDMA_D_BRDMA_CFG_0_BRDMA_RAM_TYPE_SHIFT			_MK_SHIFT_CONST(5)
+#define SDP_RDMA_D_BRDMA_CFG_0_BRDMA_RAM_TYPE_FIELD			_MK_FIELD_CONST(0x1, SDP_RDMA_D_BRDMA_CFG_0_BRDMA_RAM_TYPE_SHIFT)
+#define SDP_RDMA_D_BRDMA_CFG_0_BRDMA_RAM_TYPE_CV			_MK_ENUM_CONST(0x0)
+#define SDP_RDMA_D_BRDMA_CFG_0_BRDMA_RAM_TYPE_MC			_MK_ENUM_CONST(0x1)
+
+
+// Register SDP_RDMA_D_BS_BASE_ADDR_LOW_0
+#define SDP_RDMA_D_BS_BASE_ADDR_LOW_0			_MK_ADDR_CONST(0x802c)
+#define SDP_RDMA_D_BS_BASE_ADDR_LOW_0_BS_BASE_ADDR_LOW_SHIFT			_MK_SHIFT_CONST(0)
+#define SDP_RDMA_D_BS_BASE_ADDR_LOW_0_BS_BASE_ADDR_LOW_FIELD			_MK_FIELD_CONST(0xffffffff, SDP_RDMA_D_BS_BASE_ADDR_LOW_0_BS_BASE_ADDR_LOW_SHIFT)
+
+
+// Register SDP_RDMA_D_BS_BASE_ADDR_HIGH_0
+#define SDP_RDMA_D_BS_BASE_ADDR_HIGH_0			_MK_ADDR_CONST(0x8030)
+#define SDP_RDMA_D_BS_BASE_ADDR_HIGH_0_BS_BASE_ADDR_HIGH_SHIFT			_MK_SHIFT_CONST(0)
+#define SDP_RDMA_D_BS_BASE_ADDR_HIGH_0_BS_BASE_ADDR_HIGH_FIELD			_MK_FIELD_CONST(0xffffffff, SDP_RDMA_D_BS_BASE_ADDR_HIGH_0_BS_BASE_ADDR_HIGH_SHIFT)
+
+
+// Register SDP_RDMA_D_BS_LINE_STRIDE_0
+#define SDP_RDMA_D_BS_LINE_STRIDE_0			_MK_ADDR_CONST(0x8034)
+#define SDP_RDMA_D_BS_LINE_STRIDE_0_BS_LINE_STRIDE_SHIFT			_MK_SHIFT_CONST(0)
+#define SDP_RDMA_D_BS_LINE_STRIDE_0_BS_LINE_STRIDE_FIELD			_MK_FIELD_CONST(0xffffffff, SDP_RDMA_D_BS_LINE_STRIDE_0_BS_LINE_STRIDE_SHIFT)
+
+
+// Register SDP_RDMA_D_BS_SURFACE_STRIDE_0
+#define SDP_RDMA_D_BS_SURFACE_STRIDE_0			_MK_ADDR_CONST(0x8038)
+#define SDP_RDMA_D_BS_SURFACE_STRIDE_0_BS_SURFACE_STRIDE_SHIFT			_MK_SHIFT_CONST(0)
+#define SDP_RDMA_D_BS_SURFACE_STRIDE_0_BS_SURFACE_STRIDE_FIELD			_MK_FIELD_CONST(0xffffffff, SDP_RDMA_D_BS_SURFACE_STRIDE_0_BS_SURFACE_STRIDE_SHIFT)
+
+
+// Register SDP_RDMA_D_BS_BATCH_STRIDE_0
+#define SDP_RDMA_D_BS_BATCH_STRIDE_0			_MK_ADDR_CONST(0x803c)
+#define SDP_RDMA_D_BS_BATCH_STRIDE_0_BS_BATCH_STRIDE_SHIFT			_MK_SHIFT_CONST(0)
+#define SDP_RDMA_D_BS_BATCH_STRIDE_0_BS_BATCH_STRIDE_FIELD			_MK_FIELD_CONST(0xffffffff, SDP_RDMA_D_BS_BATCH_STRIDE_0_BS_BATCH_STRIDE_SHIFT)
+
+
+// Register SDP_RDMA_D_NRDMA_CFG_0
+#define SDP_RDMA_D_NRDMA_CFG_0			_MK_ADDR_CONST(0x8040)
+#define SDP_RDMA_D_NRDMA_CFG_0_NRDMA_DISABLE_SHIFT			_MK_SHIFT_CONST(0)
+#define SDP_RDMA_D_NRDMA_CFG_0_NRDMA_DISABLE_FIELD			_MK_FIELD_CONST(0x1, SDP_RDMA_D_NRDMA_CFG_0_NRDMA_DISABLE_SHIFT)
+#define SDP_RDMA_D_NRDMA_CFG_0_NRDMA_DISABLE_NO			_MK_ENUM_CONST(0x0)
+#define SDP_RDMA_D_NRDMA_CFG_0_NRDMA_DISABLE_YES			_MK_ENUM_CONST(0x1)
+#define SDP_RDMA_D_NRDMA_CFG_0_NRDMA_DATA_USE_SHIFT			_MK_SHIFT_CONST(1)
+#define SDP_RDMA_D_NRDMA_CFG_0_NRDMA_DATA_USE_FIELD			_MK_FIELD_CONST(0x3, SDP_RDMA_D_NRDMA_CFG_0_NRDMA_DATA_USE_SHIFT)
+#define SDP_RDMA_D_NRDMA_CFG_0_NRDMA_DATA_USE_MUL			_MK_ENUM_CONST(0x0)
+#define SDP_RDMA_D_NRDMA_CFG_0_NRDMA_DATA_USE_ALU			_MK_ENUM_CONST(0x1)
+#define SDP_RDMA_D_NRDMA_CFG_0_NRDMA_DATA_USE_BOTH			_MK_ENUM_CONST(0x2)
+#define SDP_RDMA_D_NRDMA_CFG_0_NRDMA_DATA_SIZE_SHIFT			_MK_SHIFT_CONST(3)
+#define SDP_RDMA_D_NRDMA_CFG_0_NRDMA_DATA_SIZE_FIELD			_MK_FIELD_CONST(0x1, SDP_RDMA_D_NRDMA_CFG_0_NRDMA_DATA_SIZE_SHIFT)
+#define SDP_RDMA_D_NRDMA_CFG_0_NRDMA_DATA_SIZE_ONE_BYTE			_MK_ENUM_CONST(0x0)
+#define SDP_RDMA_D_NRDMA_CFG_0_NRDMA_DATA_SIZE_TWO_BYTE			_MK_ENUM_CONST(0x1)
+#define SDP_RDMA_D_NRDMA_CFG_0_NRDMA_DATA_MODE_SHIFT			_MK_SHIFT_CONST(4)
+#define SDP_RDMA_D_NRDMA_CFG_0_NRDMA_DATA_MODE_FIELD			_MK_FIELD_CONST(0x1, SDP_RDMA_D_NRDMA_CFG_0_NRDMA_DATA_MODE_SHIFT)
+#define SDP_RDMA_D_NRDMA_CFG_0_NRDMA_DATA_MODE_PER_KERNEL			_MK_ENUM_CONST(0x0)
+#define SDP_RDMA_D_NRDMA_CFG_0_NRDMA_DATA_MODE_PER_ELEMENT			_MK_ENUM_CONST(0x1)
+#define SDP_RDMA_D_NRDMA_CFG_0_NRDMA_RAM_TYPE_SHIFT			_MK_SHIFT_CONST(5)
+#define SDP_RDMA_D_NRDMA_CFG_0_NRDMA_RAM_TYPE_FIELD			_MK_FIELD_CONST(0x1, SDP_RDMA_D_NRDMA_CFG_0_NRDMA_RAM_TYPE_SHIFT)
+#define SDP_RDMA_D_NRDMA_CFG_0_NRDMA_RAM_TYPE_CV			_MK_ENUM_CONST(0x0)
+#define SDP_RDMA_D_NRDMA_CFG_0_NRDMA_RAM_TYPE_MC			_MK_ENUM_CONST(0x1)
+
+
+// Register SDP_RDMA_D_BN_BASE_ADDR_LOW_0
+#define SDP_RDMA_D_BN_BASE_ADDR_LOW_0			_MK_ADDR_CONST(0x8044)
+#define SDP_RDMA_D_BN_BASE_ADDR_LOW_0_BN_BASE_ADDR_LOW_SHIFT			_MK_SHIFT_CONST(0)
+#define SDP_RDMA_D_BN_BASE_ADDR_LOW_0_BN_BASE_ADDR_LOW_FIELD			_MK_FIELD_CONST(0xffffffff, SDP_RDMA_D_BN_BASE_ADDR_LOW_0_BN_BASE_ADDR_LOW_SHIFT)
+
+
+// Register SDP_RDMA_D_BN_BASE_ADDR_HIGH_0
+#define SDP_RDMA_D_BN_BASE_ADDR_HIGH_0			_MK_ADDR_CONST(0x8048)
+#define SDP_RDMA_D_BN_BASE_ADDR_HIGH_0_BN_BASE_ADDR_HIGH_SHIFT			_MK_SHIFT_CONST(0)
+#define SDP_RDMA_D_BN_BASE_ADDR_HIGH_0_BN_BASE_ADDR_HIGH_FIELD			_MK_FIELD_CONST(0xffffffff, SDP_RDMA_D_BN_BASE_ADDR_HIGH_0_BN_BASE_ADDR_HIGH_SHIFT)
+
+
+// Register SDP_RDMA_D_BN_LINE_STRIDE_0
+#define SDP_RDMA_D_BN_LINE_STRIDE_0			_MK_ADDR_CONST(0x804c)
+#define SDP_RDMA_D_BN_LINE_STRIDE_0_BN_LINE_STRIDE_SHIFT			_MK_SHIFT_CONST(0)
+#define SDP_RDMA_D_BN_LINE_STRIDE_0_BN_LINE_STRIDE_FIELD			_MK_FIELD_CONST(0xffffffff, SDP_RDMA_D_BN_LINE_STRIDE_0_BN_LINE_STRIDE_SHIFT)
+
+
+// Register SDP_RDMA_D_BN_SURFACE_STRIDE_0
+#define SDP_RDMA_D_BN_SURFACE_STRIDE_0			_MK_ADDR_CONST(0x8050)
+#define SDP_RDMA_D_BN_SURFACE_STRIDE_0_BN_SURFACE_STRIDE_SHIFT			_MK_SHIFT_CONST(0)
+#define SDP_RDMA_D_BN_SURFACE_STRIDE_0_BN_SURFACE_STRIDE_FIELD			_MK_FIELD_CONST(0xffffffff, SDP_RDMA_D_BN_SURFACE_STRIDE_0_BN_SURFACE_STRIDE_SHIFT)
+
+
+// Register SDP_RDMA_D_BN_BATCH_STRIDE_0
+#define SDP_RDMA_D_BN_BATCH_STRIDE_0			_MK_ADDR_CONST(0x8054)
+#define SDP_RDMA_D_BN_BATCH_STRIDE_0_BN_BATCH_STRIDE_SHIFT			_MK_SHIFT_CONST(0)
+#define SDP_RDMA_D_BN_BATCH_STRIDE_0_BN_BATCH_STRIDE_FIELD			_MK_FIELD_CONST(0xffffffff, SDP_RDMA_D_BN_BATCH_STRIDE_0_BN_BATCH_STRIDE_SHIFT)
+
+
+// Register SDP_RDMA_D_ERDMA_CFG_0
+#define SDP_RDMA_D_ERDMA_CFG_0			_MK_ADDR_CONST(0x8058)
+#define SDP_RDMA_D_ERDMA_CFG_0_ERDMA_DISABLE_SHIFT			_MK_SHIFT_CONST(0)
+#define SDP_RDMA_D_ERDMA_CFG_0_ERDMA_DISABLE_FIELD			_MK_FIELD_CONST(0x1, SDP_RDMA_D_ERDMA_CFG_0_ERDMA_DISABLE_SHIFT)
+#define SDP_RDMA_D_ERDMA_CFG_0_ERDMA_DISABLE_NO			_MK_ENUM_CONST(0x0)
+#define SDP_RDMA_D_ERDMA_CFG_0_ERDMA_DISABLE_YES			_MK_ENUM_CONST(0x1)
+#define SDP_RDMA_D_ERDMA_CFG_0_ERDMA_DATA_USE_SHIFT			_MK_SHIFT_CONST(1)
+#define SDP_RDMA_D_ERDMA_CFG_0_ERDMA_DATA_USE_FIELD			_MK_FIELD_CONST(0x3, SDP_RDMA_D_ERDMA_CFG_0_ERDMA_DATA_USE_SHIFT)
+#define SDP_RDMA_D_ERDMA_CFG_0_ERDMA_DATA_USE_MUL			_MK_ENUM_CONST(0x0)
+#define SDP_RDMA_D_ERDMA_CFG_0_ERDMA_DATA_USE_ALU			_MK_ENUM_CONST(0x1)
+#define SDP_RDMA_D_ERDMA_CFG_0_ERDMA_DATA_USE_BOTH			_MK_ENUM_CONST(0x2)
+#define SDP_RDMA_D_ERDMA_CFG_0_ERDMA_DATA_SIZE_SHIFT			_MK_SHIFT_CONST(3)
+#define SDP_RDMA_D_ERDMA_CFG_0_ERDMA_DATA_SIZE_FIELD			_MK_FIELD_CONST(0x1, SDP_RDMA_D_ERDMA_CFG_0_ERDMA_DATA_SIZE_SHIFT)
+#define SDP_RDMA_D_ERDMA_CFG_0_ERDMA_DATA_SIZE_ONE_BYTE			_MK_ENUM_CONST(0x0)
+#define SDP_RDMA_D_ERDMA_CFG_0_ERDMA_DATA_SIZE_TWO_BYTE			_MK_ENUM_CONST(0x1)
+#define SDP_RDMA_D_ERDMA_CFG_0_ERDMA_DATA_MODE_SHIFT			_MK_SHIFT_CONST(4)
+#define SDP_RDMA_D_ERDMA_CFG_0_ERDMA_DATA_MODE_FIELD			_MK_FIELD_CONST(0x1, SDP_RDMA_D_ERDMA_CFG_0_ERDMA_DATA_MODE_SHIFT)
+#define SDP_RDMA_D_ERDMA_CFG_0_ERDMA_DATA_MODE_PER_KERNEL			_MK_ENUM_CONST(0x0)
+#define SDP_RDMA_D_ERDMA_CFG_0_ERDMA_DATA_MODE_PER_ELEMENT			_MK_ENUM_CONST(0x1)
+#define SDP_RDMA_D_ERDMA_CFG_0_ERDMA_RAM_TYPE_SHIFT			_MK_SHIFT_CONST(5)
+#define SDP_RDMA_D_ERDMA_CFG_0_ERDMA_RAM_TYPE_FIELD			_MK_FIELD_CONST(0x1, SDP_RDMA_D_ERDMA_CFG_0_ERDMA_RAM_TYPE_SHIFT)
+#define SDP_RDMA_D_ERDMA_CFG_0_ERDMA_RAM_TYPE_CV			_MK_ENUM_CONST(0x0)
+#define SDP_RDMA_D_ERDMA_CFG_0_ERDMA_RAM_TYPE_MC			_MK_ENUM_CONST(0x1)
+
+
+// Register SDP_RDMA_D_EW_BASE_ADDR_LOW_0
+#define SDP_RDMA_D_EW_BASE_ADDR_LOW_0			_MK_ADDR_CONST(0x805c)
+#define SDP_RDMA_D_EW_BASE_ADDR_LOW_0_EW_BASE_ADDR_LOW_SHIFT			_MK_SHIFT_CONST(0)
+#define SDP_RDMA_D_EW_BASE_ADDR_LOW_0_EW_BASE_ADDR_LOW_FIELD			_MK_FIELD_CONST(0xffffffff, SDP_RDMA_D_EW_BASE_ADDR_LOW_0_EW_BASE_ADDR_LOW_SHIFT)
+
+
+// Register SDP_RDMA_D_EW_BASE_ADDR_HIGH_0
+#define SDP_RDMA_D_EW_BASE_ADDR_HIGH_0			_MK_ADDR_CONST(0x8060)
+#define SDP_RDMA_D_EW_BASE_ADDR_HIGH_0_EW_BASE_ADDR_HIGH_SHIFT			_MK_SHIFT_CONST(0)
+#define SDP_RDMA_D_EW_BASE_ADDR_HIGH_0_EW_BASE_ADDR_HIGH_FIELD			_MK_FIELD_CONST(0xffffffff, SDP_RDMA_D_EW_BASE_ADDR_HIGH_0_EW_BASE_ADDR_HIGH_SHIFT)
+
+
+// Register SDP_RDMA_D_EW_LINE_STRIDE_0
+#define SDP_RDMA_D_EW_LINE_STRIDE_0			_MK_ADDR_CONST(0x8064)
+#define SDP_RDMA_D_EW_LINE_STRIDE_0_EW_LINE_STRIDE_SHIFT			_MK_SHIFT_CONST(0)
+#define SDP_RDMA_D_EW_LINE_STRIDE_0_EW_LINE_STRIDE_FIELD			_MK_FIELD_CONST(0xffffffff, SDP_RDMA_D_EW_LINE_STRIDE_0_EW_LINE_STRIDE_SHIFT)
+
+
+// Register SDP_RDMA_D_EW_SURFACE_STRIDE_0
+#define SDP_RDMA_D_EW_SURFACE_STRIDE_0			_MK_ADDR_CONST(0x8068)
+#define SDP_RDMA_D_EW_SURFACE_STRIDE_0_EW_SURFACE_STRIDE_SHIFT			_MK_SHIFT_CONST(0)
+#define SDP_RDMA_D_EW_SURFACE_STRIDE_0_EW_SURFACE_STRIDE_FIELD			_MK_FIELD_CONST(0xffffffff, SDP_RDMA_D_EW_SURFACE_STRIDE_0_EW_SURFACE_STRIDE_SHIFT)
+
+
+// Register SDP_RDMA_D_EW_BATCH_STRIDE_0
+#define SDP_RDMA_D_EW_BATCH_STRIDE_0			_MK_ADDR_CONST(0x806c)
+#define SDP_RDMA_D_EW_BATCH_STRIDE_0_EW_BATCH_STRIDE_SHIFT			_MK_SHIFT_CONST(0)
+#define SDP_RDMA_D_EW_BATCH_STRIDE_0_EW_BATCH_STRIDE_FIELD			_MK_FIELD_CONST(0xffffffff, SDP_RDMA_D_EW_BATCH_STRIDE_0_EW_BATCH_STRIDE_SHIFT)
+
+
+// Register SDP_RDMA_D_FEATURE_MODE_CFG_0
+#define SDP_RDMA_D_FEATURE_MODE_CFG_0			_MK_ADDR_CONST(0x8070)
+#define SDP_RDMA_D_FEATURE_MODE_CFG_0_FLYING_MODE_SHIFT			_MK_SHIFT_CONST(0)
+#define SDP_RDMA_D_FEATURE_MODE_CFG_0_FLYING_MODE_FIELD			_MK_FIELD_CONST(0x1, SDP_RDMA_D_FEATURE_MODE_CFG_0_FLYING_MODE_SHIFT)
+#define SDP_RDMA_D_FEATURE_MODE_CFG_0_FLYING_MODE_OFF			_MK_ENUM_CONST(0x0)
+#define SDP_RDMA_D_FEATURE_MODE_CFG_0_FLYING_MODE_ON			_MK_ENUM_CONST(0x1)
+#define SDP_RDMA_D_FEATURE_MODE_CFG_0_WINOGRAD_SHIFT			_MK_SHIFT_CONST(1)
+#define SDP_RDMA_D_FEATURE_MODE_CFG_0_WINOGRAD_FIELD			_MK_FIELD_CONST(0x1, SDP_RDMA_D_FEATURE_MODE_CFG_0_WINOGRAD_SHIFT)
+#define SDP_RDMA_D_FEATURE_MODE_CFG_0_WINOGRAD_OFF			_MK_ENUM_CONST(0x0)
+#define SDP_RDMA_D_FEATURE_MODE_CFG_0_WINOGRAD_ON			_MK_ENUM_CONST(0x1)
+#define SDP_RDMA_D_FEATURE_MODE_CFG_0_IN_PRECISION_SHIFT			_MK_SHIFT_CONST(2)
+#define SDP_RDMA_D_FEATURE_MODE_CFG_0_IN_PRECISION_FIELD			_MK_FIELD_CONST(0x3, SDP_RDMA_D_FEATURE_MODE_CFG_0_IN_PRECISION_SHIFT)
+#define SDP_RDMA_D_FEATURE_MODE_CFG_0_IN_PRECISION_INT8			_MK_ENUM_CONST(0x0)
+#define SDP_RDMA_D_FEATURE_MODE_CFG_0_IN_PRECISION_INT16			_MK_ENUM_CONST(0x1)
+#define SDP_RDMA_D_FEATURE_MODE_CFG_0_IN_PRECISION_FP16			_MK_ENUM_CONST(0x2)
+#define SDP_RDMA_D_FEATURE_MODE_CFG_0_PROC_PRECISION_SHIFT			_MK_SHIFT_CONST(4)
+#define SDP_RDMA_D_FEATURE_MODE_CFG_0_PROC_PRECISION_FIELD			_MK_FIELD_CONST(0x3, SDP_RDMA_D_FEATURE_MODE_CFG_0_PROC_PRECISION_SHIFT)
+#define SDP_RDMA_D_FEATURE_MODE_CFG_0_PROC_PRECISION_INT8			_MK_ENUM_CONST(0x0)
+#define SDP_RDMA_D_FEATURE_MODE_CFG_0_PROC_PRECISION_INT16			_MK_ENUM_CONST(0x1)
+#define SDP_RDMA_D_FEATURE_MODE_CFG_0_PROC_PRECISION_FP16			_MK_ENUM_CONST(0x2)
+#define SDP_RDMA_D_FEATURE_MODE_CFG_0_OUT_PRECISION_SHIFT			_MK_SHIFT_CONST(6)
+#define SDP_RDMA_D_FEATURE_MODE_CFG_0_OUT_PRECISION_FIELD			_MK_FIELD_CONST(0x3, SDP_RDMA_D_FEATURE_MODE_CFG_0_OUT_PRECISION_SHIFT)
+#define SDP_RDMA_D_FEATURE_MODE_CFG_0_OUT_PRECISION_INT8			_MK_ENUM_CONST(0x0)
+#define SDP_RDMA_D_FEATURE_MODE_CFG_0_OUT_PRECISION_INT16			_MK_ENUM_CONST(0x1)
+#define SDP_RDMA_D_FEATURE_MODE_CFG_0_OUT_PRECISION_FP16			_MK_ENUM_CONST(0x2)
+#define SDP_RDMA_D_FEATURE_MODE_CFG_0_BATCH_NUMBER_SHIFT			_MK_SHIFT_CONST(8)
+#define SDP_RDMA_D_FEATURE_MODE_CFG_0_BATCH_NUMBER_FIELD			_MK_FIELD_CONST(0x1f, SDP_RDMA_D_FEATURE_MODE_CFG_0_BATCH_NUMBER_SHIFT)
+
+
+// Register SDP_RDMA_D_SRC_DMA_CFG_0
+#define SDP_RDMA_D_SRC_DMA_CFG_0			_MK_ADDR_CONST(0x8074)
+#define SDP_RDMA_D_SRC_DMA_CFG_0_SRC_RAM_TYPE_SHIFT			_MK_SHIFT_CONST(0)
+#define SDP_RDMA_D_SRC_DMA_CFG_0_SRC_RAM_TYPE_FIELD			_MK_FIELD_CONST(0x1, SDP_RDMA_D_SRC_DMA_CFG_0_SRC_RAM_TYPE_SHIFT)
+#define SDP_RDMA_D_SRC_DMA_CFG_0_SRC_RAM_TYPE_CV			_MK_ENUM_CONST(0x0)
+#define SDP_RDMA_D_SRC_DMA_CFG_0_SRC_RAM_TYPE_MC			_MK_ENUM_CONST(0x1)
+
+
+// Register SDP_RDMA_D_STATUS_NAN_INPUT_NUM_0
+#define SDP_RDMA_D_STATUS_NAN_INPUT_NUM_0			_MK_ADDR_CONST(0x8078)
+#define SDP_RDMA_D_STATUS_NAN_INPUT_NUM_0_STATUS_NAN_INPUT_NUM_SHIFT			_MK_SHIFT_CONST(0)
+#define SDP_RDMA_D_STATUS_NAN_INPUT_NUM_0_STATUS_NAN_INPUT_NUM_FIELD			_MK_FIELD_CONST(0xffffffff, SDP_RDMA_D_STATUS_NAN_INPUT_NUM_0_STATUS_NAN_INPUT_NUM_SHIFT)
+
+
+// Register SDP_RDMA_D_STATUS_INF_INPUT_NUM_0
+#define SDP_RDMA_D_STATUS_INF_INPUT_NUM_0			_MK_ADDR_CONST(0x807c)
+#define SDP_RDMA_D_STATUS_INF_INPUT_NUM_0_STATUS_INF_INPUT_NUM_SHIFT			_MK_SHIFT_CONST(0)
+#define SDP_RDMA_D_STATUS_INF_INPUT_NUM_0_STATUS_INF_INPUT_NUM_FIELD			_MK_FIELD_CONST(0xffffffff, SDP_RDMA_D_STATUS_INF_INPUT_NUM_0_STATUS_INF_INPUT_NUM_SHIFT)
+
+
+// Register SDP_RDMA_D_PERF_ENABLE_0
+#define SDP_RDMA_D_PERF_ENABLE_0			_MK_ADDR_CONST(0x8080)
+#define SDP_RDMA_D_PERF_ENABLE_0_PERF_DMA_EN_SHIFT			_MK_SHIFT_CONST(0)
+#define SDP_RDMA_D_PERF_ENABLE_0_PERF_DMA_EN_FIELD			_MK_FIELD_CONST(0x1, SDP_RDMA_D_PERF_ENABLE_0_PERF_DMA_EN_SHIFT)
+#define SDP_RDMA_D_PERF_ENABLE_0_PERF_DMA_EN_NO			_MK_ENUM_CONST(0x0)
+#define SDP_RDMA_D_PERF_ENABLE_0_PERF_DMA_EN_YES			_MK_ENUM_CONST(0x1)
+#define SDP_RDMA_D_PERF_ENABLE_0_PERF_NAN_INF_COUNT_EN_SHIFT			_MK_SHIFT_CONST(1)
+#define SDP_RDMA_D_PERF_ENABLE_0_PERF_NAN_INF_COUNT_EN_FIELD			_MK_FIELD_CONST(0x1, SDP_RDMA_D_PERF_ENABLE_0_PERF_NAN_INF_COUNT_EN_SHIFT)
+#define SDP_RDMA_D_PERF_ENABLE_0_PERF_NAN_INF_COUNT_EN_NO			_MK_ENUM_CONST(0x0)
+#define SDP_RDMA_D_PERF_ENABLE_0_PERF_NAN_INF_COUNT_EN_YES			_MK_ENUM_CONST(0x1)
+
+
+// Register SDP_RDMA_D_PERF_MRDMA_READ_STALL_0
+#define SDP_RDMA_D_PERF_MRDMA_READ_STALL_0			_MK_ADDR_CONST(0x8084)
+#define SDP_RDMA_D_PERF_MRDMA_READ_STALL_0_MRDMA_STALL_SHIFT			_MK_SHIFT_CONST(0)
+#define SDP_RDMA_D_PERF_MRDMA_READ_STALL_0_MRDMA_STALL_FIELD			_MK_FIELD_CONST(0xffffffff, SDP_RDMA_D_PERF_MRDMA_READ_STALL_0_MRDMA_STALL_SHIFT)
+
+
+// Register SDP_RDMA_D_PERF_BRDMA_READ_STALL_0
+#define SDP_RDMA_D_PERF_BRDMA_READ_STALL_0			_MK_ADDR_CONST(0x8088)
+#define SDP_RDMA_D_PERF_BRDMA_READ_STALL_0_BRDMA_STALL_SHIFT			_MK_SHIFT_CONST(0)
+#define SDP_RDMA_D_PERF_BRDMA_READ_STALL_0_BRDMA_STALL_FIELD			_MK_FIELD_CONST(0xffffffff, SDP_RDMA_D_PERF_BRDMA_READ_STALL_0_BRDMA_STALL_SHIFT)
+
+
+// Register SDP_RDMA_D_PERF_NRDMA_READ_STALL_0
+#define SDP_RDMA_D_PERF_NRDMA_READ_STALL_0			_MK_ADDR_CONST(0x808c)
+#define SDP_RDMA_D_PERF_NRDMA_READ_STALL_0_NRDMA_STALL_SHIFT			_MK_SHIFT_CONST(0)
+#define SDP_RDMA_D_PERF_NRDMA_READ_STALL_0_NRDMA_STALL_FIELD			_MK_FIELD_CONST(0xffffffff, SDP_RDMA_D_PERF_NRDMA_READ_STALL_0_NRDMA_STALL_SHIFT)
+
+
+// Register SDP_RDMA_D_PERF_ERDMA_READ_STALL_0
+#define SDP_RDMA_D_PERF_ERDMA_READ_STALL_0			_MK_ADDR_CONST(0x8090)
+#define SDP_RDMA_D_PERF_ERDMA_READ_STALL_0_ERDMA_STALL_SHIFT			_MK_SHIFT_CONST(0)
+#define SDP_RDMA_D_PERF_ERDMA_READ_STALL_0_ERDMA_STALL_FIELD			_MK_FIELD_CONST(0xffffffff, SDP_RDMA_D_PERF_ERDMA_READ_STALL_0_ERDMA_STALL_SHIFT)
+
+
+
+// To satisfy various compilers and platforms,
+// we let users control the types and syntax of certain constants, using macros.
+#ifndef _MK_SHIFT_CONST
+  #define _MK_SHIFT_CONST(_constant_) _constant_
+#endif
+#ifndef _MK_MASK_CONST
+  #define _MK_MASK_CONST(_constant_) _constant_
+#endif
+#ifndef _MK_ENUM_CONST
+  #define _MK_ENUM_CONST(_constant_) (_constant_ ## UL)
+#endif
+#ifndef _MK_ADDR_CONST
+  #define _MK_ADDR_CONST(_constant_) _constant_
+#endif
+#ifndef _MK_FIELD_CONST
+  #define _MK_FIELD_CONST(_mask_, _shift_) (_MK_MASK_CONST(_mask_) << _MK_SHIFT_CONST(_shift_))
+#endif
+
+
+// Register SDP_S_STATUS_0
+#define SDP_S_STATUS_0			_MK_ADDR_CONST(0x9000)
+#define SDP_S_STATUS_0_STATUS_0_SHIFT			_MK_SHIFT_CONST(0)
+#define SDP_S_STATUS_0_STATUS_0_FIELD			_MK_FIELD_CONST(0x3, SDP_S_STATUS_0_STATUS_0_SHIFT)
+#define SDP_S_STATUS_0_STATUS_0_IDLE			_MK_ENUM_CONST(0x0)
+#define SDP_S_STATUS_0_STATUS_0_RUNNING			_MK_ENUM_CONST(0x1)
+#define SDP_S_STATUS_0_STATUS_0_PENDING			_MK_ENUM_CONST(0x2)
+#define SDP_S_STATUS_0_STATUS_1_SHIFT			_MK_SHIFT_CONST(16)
+#define SDP_S_STATUS_0_STATUS_1_FIELD			_MK_FIELD_CONST(0x3, SDP_S_STATUS_0_STATUS_1_SHIFT)
+#define SDP_S_STATUS_0_STATUS_1_IDLE			_MK_ENUM_CONST(0x0)
+#define SDP_S_STATUS_0_STATUS_1_RUNNING			_MK_ENUM_CONST(0x1)
+#define SDP_S_STATUS_0_STATUS_1_PENDING			_MK_ENUM_CONST(0x2)
+
+
+// Register SDP_S_POINTER_0
+#define SDP_S_POINTER_0			_MK_ADDR_CONST(0x9004)
+#define SDP_S_POINTER_0_PRODUCER_SHIFT			_MK_SHIFT_CONST(0)
+#define SDP_S_POINTER_0_PRODUCER_FIELD			_MK_FIELD_CONST(0x1, SDP_S_POINTER_0_PRODUCER_SHIFT)
+#define SDP_S_POINTER_0_PRODUCER_GROUP_0			_MK_ENUM_CONST(0x0)
+#define SDP_S_POINTER_0_PRODUCER_GROUP_1			_MK_ENUM_CONST(0x1)
+#define SDP_S_POINTER_0_CONSUMER_SHIFT			_MK_SHIFT_CONST(16)
+#define SDP_S_POINTER_0_CONSUMER_FIELD			_MK_FIELD_CONST(0x1, SDP_S_POINTER_0_CONSUMER_SHIFT)
+#define SDP_S_POINTER_0_CONSUMER_GROUP_0			_MK_ENUM_CONST(0x0)
+#define SDP_S_POINTER_0_CONSUMER_GROUP_1			_MK_ENUM_CONST(0x1)
+
+
+// Register SDP_S_LUT_ACCESS_CFG_0
+#define SDP_S_LUT_ACCESS_CFG_0			_MK_ADDR_CONST(0x9008)
+#define SDP_S_LUT_ACCESS_CFG_0_LUT_ADDR_SHIFT			_MK_SHIFT_CONST(0)
+#define SDP_S_LUT_ACCESS_CFG_0_LUT_ADDR_FIELD			_MK_FIELD_CONST(0x3ff, SDP_S_LUT_ACCESS_CFG_0_LUT_ADDR_SHIFT)
+#define SDP_S_LUT_ACCESS_CFG_0_LUT_TABLE_ID_SHIFT			_MK_SHIFT_CONST(16)
+#define SDP_S_LUT_ACCESS_CFG_0_LUT_TABLE_ID_FIELD			_MK_FIELD_CONST(0x1, SDP_S_LUT_ACCESS_CFG_0_LUT_TABLE_ID_SHIFT)
+#define SDP_S_LUT_ACCESS_CFG_0_LUT_TABLE_ID_LE			_MK_ENUM_CONST(0x0)
+#define SDP_S_LUT_ACCESS_CFG_0_LUT_TABLE_ID_LO			_MK_ENUM_CONST(0x1)
+#define SDP_S_LUT_ACCESS_CFG_0_LUT_ACCESS_TYPE_SHIFT			_MK_SHIFT_CONST(17)
+#define SDP_S_LUT_ACCESS_CFG_0_LUT_ACCESS_TYPE_FIELD			_MK_FIELD_CONST(0x1, SDP_S_LUT_ACCESS_CFG_0_LUT_ACCESS_TYPE_SHIFT)
+#define SDP_S_LUT_ACCESS_CFG_0_LUT_ACCESS_TYPE_READ			_MK_ENUM_CONST(0x0)
+#define SDP_S_LUT_ACCESS_CFG_0_LUT_ACCESS_TYPE_WRITE			_MK_ENUM_CONST(0x1)
+
+
+// Register SDP_S_LUT_ACCESS_DATA_0
+#define SDP_S_LUT_ACCESS_DATA_0			_MK_ADDR_CONST(0x900c)
+#define SDP_S_LUT_ACCESS_DATA_0_LUT_DATA_SHIFT			_MK_SHIFT_CONST(0)
+#define SDP_S_LUT_ACCESS_DATA_0_LUT_DATA_FIELD			_MK_FIELD_CONST(0xffff, SDP_S_LUT_ACCESS_DATA_0_LUT_DATA_SHIFT)
+
+
+// Register SDP_S_LUT_CFG_0
+#define SDP_S_LUT_CFG_0			_MK_ADDR_CONST(0x9010)
+#define SDP_S_LUT_CFG_0_LUT_LE_FUNCTION_SHIFT			_MK_SHIFT_CONST(0)
+#define SDP_S_LUT_CFG_0_LUT_LE_FUNCTION_FIELD			_MK_FIELD_CONST(0x1, SDP_S_LUT_CFG_0_LUT_LE_FUNCTION_SHIFT)
+#define SDP_S_LUT_CFG_0_LUT_LE_FUNCTION_EXPONENT			_MK_ENUM_CONST(0x0)
+#define SDP_S_LUT_CFG_0_LUT_LE_FUNCTION_LINEAR			_MK_ENUM_CONST(0x1)
+#define SDP_S_LUT_CFG_0_LUT_UFLOW_PRIORITY_SHIFT			_MK_SHIFT_CONST(4)
+#define SDP_S_LUT_CFG_0_LUT_UFLOW_PRIORITY_FIELD			_MK_FIELD_CONST(0x1, SDP_S_LUT_CFG_0_LUT_UFLOW_PRIORITY_SHIFT)
+#define SDP_S_LUT_CFG_0_LUT_UFLOW_PRIORITY_LE			_MK_ENUM_CONST(0x0)
+#define SDP_S_LUT_CFG_0_LUT_UFLOW_PRIORITY_LO			_MK_ENUM_CONST(0x1)
+#define SDP_S_LUT_CFG_0_LUT_OFLOW_PRIORITY_SHIFT			_MK_SHIFT_CONST(5)
+#define SDP_S_LUT_CFG_0_LUT_OFLOW_PRIORITY_FIELD			_MK_FIELD_CONST(0x1, SDP_S_LUT_CFG_0_LUT_OFLOW_PRIORITY_SHIFT)
+#define SDP_S_LUT_CFG_0_LUT_OFLOW_PRIORITY_LE			_MK_ENUM_CONST(0x0)
+#define SDP_S_LUT_CFG_0_LUT_OFLOW_PRIORITY_LO			_MK_ENUM_CONST(0x1)
+#define SDP_S_LUT_CFG_0_LUT_HYBRID_PRIORITY_SHIFT			_MK_SHIFT_CONST(6)
+#define SDP_S_LUT_CFG_0_LUT_HYBRID_PRIORITY_FIELD			_MK_FIELD_CONST(0x1, SDP_S_LUT_CFG_0_LUT_HYBRID_PRIORITY_SHIFT)
+#define SDP_S_LUT_CFG_0_LUT_HYBRID_PRIORITY_LE			_MK_ENUM_CONST(0x0)
+#define SDP_S_LUT_CFG_0_LUT_HYBRID_PRIORITY_LO			_MK_ENUM_CONST(0x1)
+
+
+// Register SDP_S_LUT_INFO_0
+#define SDP_S_LUT_INFO_0			_MK_ADDR_CONST(0x9014)
+#define SDP_S_LUT_INFO_0_LUT_LE_INDEX_OFFSET_SHIFT			_MK_SHIFT_CONST(0)
+#define SDP_S_LUT_INFO_0_LUT_LE_INDEX_OFFSET_FIELD			_MK_FIELD_CONST(0xff, SDP_S_LUT_INFO_0_LUT_LE_INDEX_OFFSET_SHIFT)
+#define SDP_S_LUT_INFO_0_LUT_LE_INDEX_SELECT_SHIFT			_MK_SHIFT_CONST(8)
+#define SDP_S_LUT_INFO_0_LUT_LE_INDEX_SELECT_FIELD			_MK_FIELD_CONST(0xff, SDP_S_LUT_INFO_0_LUT_LE_INDEX_SELECT_SHIFT)
+#define SDP_S_LUT_INFO_0_LUT_LO_INDEX_SELECT_SHIFT			_MK_SHIFT_CONST(16)
+#define SDP_S_LUT_INFO_0_LUT_LO_INDEX_SELECT_FIELD			_MK_FIELD_CONST(0xff, SDP_S_LUT_INFO_0_LUT_LO_INDEX_SELECT_SHIFT)
+
+
+// Register SDP_S_LUT_LE_START_0
+#define SDP_S_LUT_LE_START_0			_MK_ADDR_CONST(0x9018)
+#define SDP_S_LUT_LE_START_0_LUT_LE_START_SHIFT			_MK_SHIFT_CONST(0)
+#define SDP_S_LUT_LE_START_0_LUT_LE_START_FIELD			_MK_FIELD_CONST(0xffffffff, SDP_S_LUT_LE_START_0_LUT_LE_START_SHIFT)
+
+
+// Register SDP_S_LUT_LE_END_0
+#define SDP_S_LUT_LE_END_0			_MK_ADDR_CONST(0x901c)
+#define SDP_S_LUT_LE_END_0_LUT_LE_END_SHIFT			_MK_SHIFT_CONST(0)
+#define SDP_S_LUT_LE_END_0_LUT_LE_END_FIELD			_MK_FIELD_CONST(0xffffffff, SDP_S_LUT_LE_END_0_LUT_LE_END_SHIFT)
+
+
+// Register SDP_S_LUT_LO_START_0
+#define SDP_S_LUT_LO_START_0			_MK_ADDR_CONST(0x9020)
+#define SDP_S_LUT_LO_START_0_LUT_LO_START_SHIFT			_MK_SHIFT_CONST(0)
+#define SDP_S_LUT_LO_START_0_LUT_LO_START_FIELD			_MK_FIELD_CONST(0xffffffff, SDP_S_LUT_LO_START_0_LUT_LO_START_SHIFT)
+
+
+// Register SDP_S_LUT_LO_END_0
+#define SDP_S_LUT_LO_END_0			_MK_ADDR_CONST(0x9024)
+#define SDP_S_LUT_LO_END_0_LUT_LO_END_SHIFT			_MK_SHIFT_CONST(0)
+#define SDP_S_LUT_LO_END_0_LUT_LO_END_FIELD			_MK_FIELD_CONST(0xffffffff, SDP_S_LUT_LO_END_0_LUT_LO_END_SHIFT)
+
+
+// Register SDP_S_LUT_LE_SLOPE_SCALE_0
+#define SDP_S_LUT_LE_SLOPE_SCALE_0			_MK_ADDR_CONST(0x9028)
+#define SDP_S_LUT_LE_SLOPE_SCALE_0_LUT_LE_SLOPE_UFLOW_SCALE_SHIFT			_MK_SHIFT_CONST(0)
+#define SDP_S_LUT_LE_SLOPE_SCALE_0_LUT_LE_SLOPE_UFLOW_SCALE_FIELD			_MK_FIELD_CONST(0xffff, SDP_S_LUT_LE_SLOPE_SCALE_0_LUT_LE_SLOPE_UFLOW_SCALE_SHIFT)
+#define SDP_S_LUT_LE_SLOPE_SCALE_0_LUT_LE_SLOPE_OFLOW_SCALE_SHIFT			_MK_SHIFT_CONST(16)
+#define SDP_S_LUT_LE_SLOPE_SCALE_0_LUT_LE_SLOPE_OFLOW_SCALE_FIELD			_MK_FIELD_CONST(0xffff, SDP_S_LUT_LE_SLOPE_SCALE_0_LUT_LE_SLOPE_OFLOW_SCALE_SHIFT)
+
+
+// Register SDP_S_LUT_LE_SLOPE_SHIFT_0
+#define SDP_S_LUT_LE_SLOPE_SHIFT_0			_MK_ADDR_CONST(0x902c)
+#define SDP_S_LUT_LE_SLOPE_SHIFT_0_LUT_LE_SLOPE_UFLOW_SHIFT_SHIFT			_MK_SHIFT_CONST(0)
+#define SDP_S_LUT_LE_SLOPE_SHIFT_0_LUT_LE_SLOPE_UFLOW_SHIFT_FIELD			_MK_FIELD_CONST(0x1f, SDP_S_LUT_LE_SLOPE_SHIFT_0_LUT_LE_SLOPE_UFLOW_SHIFT_SHIFT)
+#define SDP_S_LUT_LE_SLOPE_SHIFT_0_LUT_LE_SLOPE_OFLOW_SHIFT_SHIFT			_MK_SHIFT_CONST(5)
+#define SDP_S_LUT_LE_SLOPE_SHIFT_0_LUT_LE_SLOPE_OFLOW_SHIFT_FIELD			_MK_FIELD_CONST(0x1f, SDP_S_LUT_LE_SLOPE_SHIFT_0_LUT_LE_SLOPE_OFLOW_SHIFT_SHIFT)
+
+
+// Register SDP_S_LUT_LO_SLOPE_SCALE_0
+#define SDP_S_LUT_LO_SLOPE_SCALE_0			_MK_ADDR_CONST(0x9030)
+#define SDP_S_LUT_LO_SLOPE_SCALE_0_LUT_LO_SLOPE_UFLOW_SCALE_SHIFT			_MK_SHIFT_CONST(0)
+#define SDP_S_LUT_LO_SLOPE_SCALE_0_LUT_LO_SLOPE_UFLOW_SCALE_FIELD			_MK_FIELD_CONST(0xffff, SDP_S_LUT_LO_SLOPE_SCALE_0_LUT_LO_SLOPE_UFLOW_SCALE_SHIFT)
+#define SDP_S_LUT_LO_SLOPE_SCALE_0_LUT_LO_SLOPE_OFLOW_SCALE_SHIFT			_MK_SHIFT_CONST(16)
+#define SDP_S_LUT_LO_SLOPE_SCALE_0_LUT_LO_SLOPE_OFLOW_SCALE_FIELD			_MK_FIELD_CONST(0xffff, SDP_S_LUT_LO_SLOPE_SCALE_0_LUT_LO_SLOPE_OFLOW_SCALE_SHIFT)
+
+
+// Register SDP_S_LUT_LO_SLOPE_SHIFT_0
+#define SDP_S_LUT_LO_SLOPE_SHIFT_0			_MK_ADDR_CONST(0x9034)
+#define SDP_S_LUT_LO_SLOPE_SHIFT_0_LUT_LO_SLOPE_UFLOW_SHIFT_SHIFT			_MK_SHIFT_CONST(0)
+#define SDP_S_LUT_LO_SLOPE_SHIFT_0_LUT_LO_SLOPE_UFLOW_SHIFT_FIELD			_MK_FIELD_CONST(0x1f, SDP_S_LUT_LO_SLOPE_SHIFT_0_LUT_LO_SLOPE_UFLOW_SHIFT_SHIFT)
+#define SDP_S_LUT_LO_SLOPE_SHIFT_0_LUT_LO_SLOPE_OFLOW_SHIFT_SHIFT			_MK_SHIFT_CONST(5)
+#define SDP_S_LUT_LO_SLOPE_SHIFT_0_LUT_LO_SLOPE_OFLOW_SHIFT_FIELD			_MK_FIELD_CONST(0x1f, SDP_S_LUT_LO_SLOPE_SHIFT_0_LUT_LO_SLOPE_OFLOW_SHIFT_SHIFT)
+
+
+// Register SDP_D_OP_ENABLE_0
+#define SDP_D_OP_ENABLE_0			_MK_ADDR_CONST(0x9038)
+#define SDP_D_OP_ENABLE_0_OP_EN_SHIFT			_MK_SHIFT_CONST(0)
+#define SDP_D_OP_ENABLE_0_OP_EN_FIELD			_MK_FIELD_CONST(0x1, SDP_D_OP_ENABLE_0_OP_EN_SHIFT)
+#define SDP_D_OP_ENABLE_0_OP_EN_DISABLE			_MK_ENUM_CONST(0x0)
+#define SDP_D_OP_ENABLE_0_OP_EN_ENABLE			_MK_ENUM_CONST(0x1)
+
+
+// Register SDP_D_DATA_CUBE_WIDTH_0
+#define SDP_D_DATA_CUBE_WIDTH_0			_MK_ADDR_CONST(0x903c)
+#define SDP_D_DATA_CUBE_WIDTH_0_WIDTH_SHIFT			_MK_SHIFT_CONST(0)
+#define SDP_D_DATA_CUBE_WIDTH_0_WIDTH_FIELD			_MK_FIELD_CONST(0x1fff, SDP_D_DATA_CUBE_WIDTH_0_WIDTH_SHIFT)
+
+
+// Register SDP_D_DATA_CUBE_HEIGHT_0
+#define SDP_D_DATA_CUBE_HEIGHT_0			_MK_ADDR_CONST(0x9040)
+#define SDP_D_DATA_CUBE_HEIGHT_0_HEIGHT_SHIFT			_MK_SHIFT_CONST(0)
+#define SDP_D_DATA_CUBE_HEIGHT_0_HEIGHT_FIELD			_MK_FIELD_CONST(0x1fff, SDP_D_DATA_CUBE_HEIGHT_0_HEIGHT_SHIFT)
+
+
+// Register SDP_D_DATA_CUBE_CHANNEL_0
+#define SDP_D_DATA_CUBE_CHANNEL_0			_MK_ADDR_CONST(0x9044)
+#define SDP_D_DATA_CUBE_CHANNEL_0_CHANNEL_SHIFT			_MK_SHIFT_CONST(0)
+#define SDP_D_DATA_CUBE_CHANNEL_0_CHANNEL_FIELD			_MK_FIELD_CONST(0x1fff, SDP_D_DATA_CUBE_CHANNEL_0_CHANNEL_SHIFT)
+
+
+// Register SDP_D_DST_BASE_ADDR_LOW_0
+#define SDP_D_DST_BASE_ADDR_LOW_0			_MK_ADDR_CONST(0x9048)
+#define SDP_D_DST_BASE_ADDR_LOW_0_DST_BASE_ADDR_LOW_SHIFT			_MK_SHIFT_CONST(0)
+#define SDP_D_DST_BASE_ADDR_LOW_0_DST_BASE_ADDR_LOW_FIELD			_MK_FIELD_CONST(0xffffffff, SDP_D_DST_BASE_ADDR_LOW_0_DST_BASE_ADDR_LOW_SHIFT)
+
+
+// Register SDP_D_DST_BASE_ADDR_HIGH_0
+#define SDP_D_DST_BASE_ADDR_HIGH_0			_MK_ADDR_CONST(0x904c)
+#define SDP_D_DST_BASE_ADDR_HIGH_0_DST_BASE_ADDR_HIGH_SHIFT			_MK_SHIFT_CONST(0)
+#define SDP_D_DST_BASE_ADDR_HIGH_0_DST_BASE_ADDR_HIGH_FIELD			_MK_FIELD_CONST(0xffffffff, SDP_D_DST_BASE_ADDR_HIGH_0_DST_BASE_ADDR_HIGH_SHIFT)
+
+
+// Register SDP_D_DST_LINE_STRIDE_0
+#define SDP_D_DST_LINE_STRIDE_0			_MK_ADDR_CONST(0x9050)
+#define SDP_D_DST_LINE_STRIDE_0_DST_LINE_STRIDE_SHIFT			_MK_SHIFT_CONST(0)
+#define SDP_D_DST_LINE_STRIDE_0_DST_LINE_STRIDE_FIELD			_MK_FIELD_CONST(0xffffffff, SDP_D_DST_LINE_STRIDE_0_DST_LINE_STRIDE_SHIFT)
+
+
+// Register SDP_D_DST_SURFACE_STRIDE_0
+#define SDP_D_DST_SURFACE_STRIDE_0			_MK_ADDR_CONST(0x9054)
+#define SDP_D_DST_SURFACE_STRIDE_0_DST_SURFACE_STRIDE_SHIFT			_MK_SHIFT_CONST(0)
+#define SDP_D_DST_SURFACE_STRIDE_0_DST_SURFACE_STRIDE_FIELD			_MK_FIELD_CONST(0xffffffff, SDP_D_DST_SURFACE_STRIDE_0_DST_SURFACE_STRIDE_SHIFT)
+
+
+// Register SDP_D_DP_BS_CFG_0
+#define SDP_D_DP_BS_CFG_0			_MK_ADDR_CONST(0x9058)
+#define SDP_D_DP_BS_CFG_0_BS_BYPASS_SHIFT			_MK_SHIFT_CONST(0)
+#define SDP_D_DP_BS_CFG_0_BS_BYPASS_FIELD			_MK_FIELD_CONST(0x1, SDP_D_DP_BS_CFG_0_BS_BYPASS_SHIFT)
+#define SDP_D_DP_BS_CFG_0_BS_BYPASS_NO			_MK_ENUM_CONST(0x0)
+#define SDP_D_DP_BS_CFG_0_BS_BYPASS_YES			_MK_ENUM_CONST(0x1)
+#define SDP_D_DP_BS_CFG_0_BS_ALU_BYPASS_SHIFT			_MK_SHIFT_CONST(1)
+#define SDP_D_DP_BS_CFG_0_BS_ALU_BYPASS_FIELD			_MK_FIELD_CONST(0x1, SDP_D_DP_BS_CFG_0_BS_ALU_BYPASS_SHIFT)
+#define SDP_D_DP_BS_CFG_0_BS_ALU_BYPASS_NO			_MK_ENUM_CONST(0x0)
+#define SDP_D_DP_BS_CFG_0_BS_ALU_BYPASS_YES			_MK_ENUM_CONST(0x1)
+#define SDP_D_DP_BS_CFG_0_BS_ALU_ALGO_SHIFT			_MK_SHIFT_CONST(2)
+#define SDP_D_DP_BS_CFG_0_BS_ALU_ALGO_FIELD			_MK_FIELD_CONST(0x3, SDP_D_DP_BS_CFG_0_BS_ALU_ALGO_SHIFT)
+#define SDP_D_DP_BS_CFG_0_BS_ALU_ALGO_MAX			_MK_ENUM_CONST(0x0)
+#define SDP_D_DP_BS_CFG_0_BS_ALU_ALGO_MIN			_MK_ENUM_CONST(0x1)
+#define SDP_D_DP_BS_CFG_0_BS_ALU_ALGO_SUM			_MK_ENUM_CONST(0x2)
+#define SDP_D_DP_BS_CFG_0_BS_MUL_BYPASS_SHIFT			_MK_SHIFT_CONST(4)
+#define SDP_D_DP_BS_CFG_0_BS_MUL_BYPASS_FIELD			_MK_FIELD_CONST(0x1, SDP_D_DP_BS_CFG_0_BS_MUL_BYPASS_SHIFT)
+#define SDP_D_DP_BS_CFG_0_BS_MUL_BYPASS_NO			_MK_ENUM_CONST(0x0)
+#define SDP_D_DP_BS_CFG_0_BS_MUL_BYPASS_YES			_MK_ENUM_CONST(0x1)
+#define SDP_D_DP_BS_CFG_0_BS_MUL_PRELU_SHIFT			_MK_SHIFT_CONST(5)
+#define SDP_D_DP_BS_CFG_0_BS_MUL_PRELU_FIELD			_MK_FIELD_CONST(0x1, SDP_D_DP_BS_CFG_0_BS_MUL_PRELU_SHIFT)
+#define SDP_D_DP_BS_CFG_0_BS_MUL_PRELU_NO			_MK_ENUM_CONST(0x0)
+#define SDP_D_DP_BS_CFG_0_BS_MUL_PRELU_YES			_MK_ENUM_CONST(0x1)
+#define SDP_D_DP_BS_CFG_0_BS_RELU_BYPASS_SHIFT			_MK_SHIFT_CONST(6)
+#define SDP_D_DP_BS_CFG_0_BS_RELU_BYPASS_FIELD			_MK_FIELD_CONST(0x1, SDP_D_DP_BS_CFG_0_BS_RELU_BYPASS_SHIFT)
+#define SDP_D_DP_BS_CFG_0_BS_RELU_BYPASS_NO			_MK_ENUM_CONST(0x0)
+#define SDP_D_DP_BS_CFG_0_BS_RELU_BYPASS_YES			_MK_ENUM_CONST(0x1)
+
+
+// Register SDP_D_DP_BS_ALU_CFG_0
+#define SDP_D_DP_BS_ALU_CFG_0			_MK_ADDR_CONST(0x905c)
+#define SDP_D_DP_BS_ALU_CFG_0_BS_ALU_SRC_SHIFT			_MK_SHIFT_CONST(0)
+#define SDP_D_DP_BS_ALU_CFG_0_BS_ALU_SRC_FIELD			_MK_FIELD_CONST(0x1, SDP_D_DP_BS_ALU_CFG_0_BS_ALU_SRC_SHIFT)
+#define SDP_D_DP_BS_ALU_CFG_0_BS_ALU_SRC_REG			_MK_ENUM_CONST(0x0)
+#define SDP_D_DP_BS_ALU_CFG_0_BS_ALU_SRC_MEM			_MK_ENUM_CONST(0x1)
+#define SDP_D_DP_BS_ALU_CFG_0_BS_ALU_SHIFT_VALUE_SHIFT			_MK_SHIFT_CONST(8)
+#define SDP_D_DP_BS_ALU_CFG_0_BS_ALU_SHIFT_VALUE_FIELD			_MK_FIELD_CONST(0x3f, SDP_D_DP_BS_ALU_CFG_0_BS_ALU_SHIFT_VALUE_SHIFT)
+
+
+// Register SDP_D_DP_BS_ALU_SRC_VALUE_0
+#define SDP_D_DP_BS_ALU_SRC_VALUE_0			_MK_ADDR_CONST(0x9060)
+#define SDP_D_DP_BS_ALU_SRC_VALUE_0_BS_ALU_OPERAND_SHIFT			_MK_SHIFT_CONST(0)
+#define SDP_D_DP_BS_ALU_SRC_VALUE_0_BS_ALU_OPERAND_FIELD			_MK_FIELD_CONST(0xffff, SDP_D_DP_BS_ALU_SRC_VALUE_0_BS_ALU_OPERAND_SHIFT)
+
+
+// Register SDP_D_DP_BS_MUL_CFG_0
+#define SDP_D_DP_BS_MUL_CFG_0			_MK_ADDR_CONST(0x9064)
+#define SDP_D_DP_BS_MUL_CFG_0_BS_MUL_SRC_SHIFT			_MK_SHIFT_CONST(0)
+#define SDP_D_DP_BS_MUL_CFG_0_BS_MUL_SRC_FIELD			_MK_FIELD_CONST(0x1, SDP_D_DP_BS_MUL_CFG_0_BS_MUL_SRC_SHIFT)
+#define SDP_D_DP_BS_MUL_CFG_0_BS_MUL_SRC_REG			_MK_ENUM_CONST(0x0)
+#define SDP_D_DP_BS_MUL_CFG_0_BS_MUL_SRC_MEM			_MK_ENUM_CONST(0x1)
+#define SDP_D_DP_BS_MUL_CFG_0_BS_MUL_SHIFT_VALUE_SHIFT			_MK_SHIFT_CONST(8)
+#define SDP_D_DP_BS_MUL_CFG_0_BS_MUL_SHIFT_VALUE_FIELD			_MK_FIELD_CONST(0xff, SDP_D_DP_BS_MUL_CFG_0_BS_MUL_SHIFT_VALUE_SHIFT)
+
+
+// Register SDP_D_DP_BS_MUL_SRC_VALUE_0
+#define SDP_D_DP_BS_MUL_SRC_VALUE_0			_MK_ADDR_CONST(0x9068)
+#define SDP_D_DP_BS_MUL_SRC_VALUE_0_BS_MUL_OPERAND_SHIFT			_MK_SHIFT_CONST(0)
+#define SDP_D_DP_BS_MUL_SRC_VALUE_0_BS_MUL_OPERAND_FIELD			_MK_FIELD_CONST(0xffff, SDP_D_DP_BS_MUL_SRC_VALUE_0_BS_MUL_OPERAND_SHIFT)
+
+
+// Register SDP_D_DP_BN_CFG_0
+#define SDP_D_DP_BN_CFG_0			_MK_ADDR_CONST(0x906c)
+#define SDP_D_DP_BN_CFG_0_BN_BYPASS_SHIFT			_MK_SHIFT_CONST(0)
+#define SDP_D_DP_BN_CFG_0_BN_BYPASS_FIELD			_MK_FIELD_CONST(0x1, SDP_D_DP_BN_CFG_0_BN_BYPASS_SHIFT)
+#define SDP_D_DP_BN_CFG_0_BN_BYPASS_NO			_MK_ENUM_CONST(0x0)
+#define SDP_D_DP_BN_CFG_0_BN_BYPASS_YES			_MK_ENUM_CONST(0x1)
+#define SDP_D_DP_BN_CFG_0_BN_ALU_BYPASS_SHIFT			_MK_SHIFT_CONST(1)
+#define SDP_D_DP_BN_CFG_0_BN_ALU_BYPASS_FIELD			_MK_FIELD_CONST(0x1, SDP_D_DP_BN_CFG_0_BN_ALU_BYPASS_SHIFT)
+#define SDP_D_DP_BN_CFG_0_BN_ALU_BYPASS_NO			_MK_ENUM_CONST(0x0)
+#define SDP_D_DP_BN_CFG_0_BN_ALU_BYPASS_YES			_MK_ENUM_CONST(0x1)
+#define SDP_D_DP_BN_CFG_0_BN_ALU_ALGO_SHIFT			_MK_SHIFT_CONST(2)
+#define SDP_D_DP_BN_CFG_0_BN_ALU_ALGO_FIELD			_MK_FIELD_CONST(0x3, SDP_D_DP_BN_CFG_0_BN_ALU_ALGO_SHIFT)
+#define SDP_D_DP_BN_CFG_0_BN_ALU_ALGO_MAX			_MK_ENUM_CONST(0x0)
+#define SDP_D_DP_BN_CFG_0_BN_ALU_ALGO_MIN			_MK_ENUM_CONST(0x1)
+#define SDP_D_DP_BN_CFG_0_BN_ALU_ALGO_SUM			_MK_ENUM_CONST(0x2)
+#define SDP_D_DP_BN_CFG_0_BN_MUL_BYPASS_SHIFT			_MK_SHIFT_CONST(4)
+#define SDP_D_DP_BN_CFG_0_BN_MUL_BYPASS_FIELD			_MK_FIELD_CONST(0x1, SDP_D_DP_BN_CFG_0_BN_MUL_BYPASS_SHIFT)
+#define SDP_D_DP_BN_CFG_0_BN_MUL_BYPASS_NO			_MK_ENUM_CONST(0x0)
+#define SDP_D_DP_BN_CFG_0_BN_MUL_BYPASS_YES			_MK_ENUM_CONST(0x1)
+#define SDP_D_DP_BN_CFG_0_BN_MUL_PRELU_SHIFT			_MK_SHIFT_CONST(5)
+#define SDP_D_DP_BN_CFG_0_BN_MUL_PRELU_FIELD			_MK_FIELD_CONST(0x1, SDP_D_DP_BN_CFG_0_BN_MUL_PRELU_SHIFT)
+#define SDP_D_DP_BN_CFG_0_BN_MUL_PRELU_NO			_MK_ENUM_CONST(0x0)
+#define SDP_D_DP_BN_CFG_0_BN_MUL_PRELU_YES			_MK_ENUM_CONST(0x1)
+#define SDP_D_DP_BN_CFG_0_BN_RELU_BYPASS_SHIFT			_MK_SHIFT_CONST(6)
+#define SDP_D_DP_BN_CFG_0_BN_RELU_BYPASS_FIELD			_MK_FIELD_CONST(0x1, SDP_D_DP_BN_CFG_0_BN_RELU_BYPASS_SHIFT)
+#define SDP_D_DP_BN_CFG_0_BN_RELU_BYPASS_NO			_MK_ENUM_CONST(0x0)
+#define SDP_D_DP_BN_CFG_0_BN_RELU_BYPASS_YES			_MK_ENUM_CONST(0x1)
+
+
+// Register SDP_D_DP_BN_ALU_CFG_0
+#define SDP_D_DP_BN_ALU_CFG_0			_MK_ADDR_CONST(0x9070)
+#define SDP_D_DP_BN_ALU_CFG_0_BN_ALU_SRC_SHIFT			_MK_SHIFT_CONST(0)
+#define SDP_D_DP_BN_ALU_CFG_0_BN_ALU_SRC_FIELD			_MK_FIELD_CONST(0x1, SDP_D_DP_BN_ALU_CFG_0_BN_ALU_SRC_SHIFT)
+#define SDP_D_DP_BN_ALU_CFG_0_BN_ALU_SRC_REG			_MK_ENUM_CONST(0x0)
+#define SDP_D_DP_BN_ALU_CFG_0_BN_ALU_SRC_MEM			_MK_ENUM_CONST(0x1)
+#define SDP_D_DP_BN_ALU_CFG_0_BN_ALU_SHIFT_VALUE_SHIFT			_MK_SHIFT_CONST(8)
+#define SDP_D_DP_BN_ALU_CFG_0_BN_ALU_SHIFT_VALUE_FIELD			_MK_FIELD_CONST(0x3f, SDP_D_DP_BN_ALU_CFG_0_BN_ALU_SHIFT_VALUE_SHIFT)
+
+
+// Register SDP_D_DP_BN_ALU_SRC_VALUE_0
+#define SDP_D_DP_BN_ALU_SRC_VALUE_0			_MK_ADDR_CONST(0x9074)
+#define SDP_D_DP_BN_ALU_SRC_VALUE_0_BN_ALU_OPERAND_SHIFT			_MK_SHIFT_CONST(0)
+#define SDP_D_DP_BN_ALU_SRC_VALUE_0_BN_ALU_OPERAND_FIELD			_MK_FIELD_CONST(0xffff, SDP_D_DP_BN_ALU_SRC_VALUE_0_BN_ALU_OPERAND_SHIFT)
+
+
+// Register SDP_D_DP_BN_MUL_CFG_0
+#define SDP_D_DP_BN_MUL_CFG_0			_MK_ADDR_CONST(0x9078)
+#define SDP_D_DP_BN_MUL_CFG_0_BN_MUL_SRC_SHIFT			_MK_SHIFT_CONST(0)
+#define SDP_D_DP_BN_MUL_CFG_0_BN_MUL_SRC_FIELD			_MK_FIELD_CONST(0x1, SDP_D_DP_BN_MUL_CFG_0_BN_MUL_SRC_SHIFT)
+#define SDP_D_DP_BN_MUL_CFG_0_BN_MUL_SRC_REG			_MK_ENUM_CONST(0x0)
+#define SDP_D_DP_BN_MUL_CFG_0_BN_MUL_SRC_MEM			_MK_ENUM_CONST(0x1)
+#define SDP_D_DP_BN_MUL_CFG_0_BN_MUL_SHIFT_VALUE_SHIFT			_MK_SHIFT_CONST(8)
+#define SDP_D_DP_BN_MUL_CFG_0_BN_MUL_SHIFT_VALUE_FIELD			_MK_FIELD_CONST(0xff, SDP_D_DP_BN_MUL_CFG_0_BN_MUL_SHIFT_VALUE_SHIFT)
+
+
+// Register SDP_D_DP_BN_MUL_SRC_VALUE_0
+#define SDP_D_DP_BN_MUL_SRC_VALUE_0			_MK_ADDR_CONST(0x907c)
+#define SDP_D_DP_BN_MUL_SRC_VALUE_0_BN_MUL_OPERAND_SHIFT			_MK_SHIFT_CONST(0)
+#define SDP_D_DP_BN_MUL_SRC_VALUE_0_BN_MUL_OPERAND_FIELD			_MK_FIELD_CONST(0xffff, SDP_D_DP_BN_MUL_SRC_VALUE_0_BN_MUL_OPERAND_SHIFT)
+
+
+// Register SDP_D_DP_EW_CFG_0
+#define SDP_D_DP_EW_CFG_0			_MK_ADDR_CONST(0x9080)
+#define SDP_D_DP_EW_CFG_0_EW_BYPASS_SHIFT			_MK_SHIFT_CONST(0)
+#define SDP_D_DP_EW_CFG_0_EW_BYPASS_FIELD			_MK_FIELD_CONST(0x1, SDP_D_DP_EW_CFG_0_EW_BYPASS_SHIFT)
+#define SDP_D_DP_EW_CFG_0_EW_BYPASS_NO			_MK_ENUM_CONST(0x0)
+#define SDP_D_DP_EW_CFG_0_EW_BYPASS_YES			_MK_ENUM_CONST(0x1)
+#define SDP_D_DP_EW_CFG_0_EW_ALU_BYPASS_SHIFT			_MK_SHIFT_CONST(1)
+#define SDP_D_DP_EW_CFG_0_EW_ALU_BYPASS_FIELD			_MK_FIELD_CONST(0x1, SDP_D_DP_EW_CFG_0_EW_ALU_BYPASS_SHIFT)
+#define SDP_D_DP_EW_CFG_0_EW_ALU_BYPASS_NO			_MK_ENUM_CONST(0x0)
+#define SDP_D_DP_EW_CFG_0_EW_ALU_BYPASS_YES			_MK_ENUM_CONST(0x1)
+#define SDP_D_DP_EW_CFG_0_EW_ALU_ALGO_SHIFT			_MK_SHIFT_CONST(2)
+#define SDP_D_DP_EW_CFG_0_EW_ALU_ALGO_FIELD			_MK_FIELD_CONST(0x3, SDP_D_DP_EW_CFG_0_EW_ALU_ALGO_SHIFT)
+#define SDP_D_DP_EW_CFG_0_EW_ALU_ALGO_MAX			_MK_ENUM_CONST(0x0)
+#define SDP_D_DP_EW_CFG_0_EW_ALU_ALGO_MIN			_MK_ENUM_CONST(0x1)
+#define SDP_D_DP_EW_CFG_0_EW_ALU_ALGO_SUM			_MK_ENUM_CONST(0x2)
+#define SDP_D_DP_EW_CFG_0_EW_ALU_ALGO_EQL			_MK_ENUM_CONST(0x3)
+#define SDP_D_DP_EW_CFG_0_EW_MUL_BYPASS_SHIFT			_MK_SHIFT_CONST(4)
+#define SDP_D_DP_EW_CFG_0_EW_MUL_BYPASS_FIELD			_MK_FIELD_CONST(0x1, SDP_D_DP_EW_CFG_0_EW_MUL_BYPASS_SHIFT)
+#define SDP_D_DP_EW_CFG_0_EW_MUL_BYPASS_NO			_MK_ENUM_CONST(0x0)
+#define SDP_D_DP_EW_CFG_0_EW_MUL_BYPASS_YES			_MK_ENUM_CONST(0x1)
+#define SDP_D_DP_EW_CFG_0_EW_MUL_PRELU_SHIFT			_MK_SHIFT_CONST(5)
+#define SDP_D_DP_EW_CFG_0_EW_MUL_PRELU_FIELD			_MK_FIELD_CONST(0x1, SDP_D_DP_EW_CFG_0_EW_MUL_PRELU_SHIFT)
+#define SDP_D_DP_EW_CFG_0_EW_MUL_PRELU_NO			_MK_ENUM_CONST(0x0)
+#define SDP_D_DP_EW_CFG_0_EW_MUL_PRELU_YES			_MK_ENUM_CONST(0x1)
+#define SDP_D_DP_EW_CFG_0_EW_LUT_BYPASS_SHIFT			_MK_SHIFT_CONST(6)
+#define SDP_D_DP_EW_CFG_0_EW_LUT_BYPASS_FIELD			_MK_FIELD_CONST(0x1, SDP_D_DP_EW_CFG_0_EW_LUT_BYPASS_SHIFT)
+#define SDP_D_DP_EW_CFG_0_EW_LUT_BYPASS_NO			_MK_ENUM_CONST(0x0)
+#define SDP_D_DP_EW_CFG_0_EW_LUT_BYPASS_YES			_MK_ENUM_CONST(0x1)
+
+
+// Register SDP_D_DP_EW_ALU_CFG_0
+#define SDP_D_DP_EW_ALU_CFG_0			_MK_ADDR_CONST(0x9084)
+#define SDP_D_DP_EW_ALU_CFG_0_EW_ALU_SRC_SHIFT			_MK_SHIFT_CONST(0)
+#define SDP_D_DP_EW_ALU_CFG_0_EW_ALU_SRC_FIELD			_MK_FIELD_CONST(0x1, SDP_D_DP_EW_ALU_CFG_0_EW_ALU_SRC_SHIFT)
+#define SDP_D_DP_EW_ALU_CFG_0_EW_ALU_SRC_REG			_MK_ENUM_CONST(0x0)
+#define SDP_D_DP_EW_ALU_CFG_0_EW_ALU_SRC_MEM			_MK_ENUM_CONST(0x1)
+#define SDP_D_DP_EW_ALU_CFG_0_EW_ALU_CVT_BYPASS_SHIFT			_MK_SHIFT_CONST(1)
+#define SDP_D_DP_EW_ALU_CFG_0_EW_ALU_CVT_BYPASS_FIELD			_MK_FIELD_CONST(0x1, SDP_D_DP_EW_ALU_CFG_0_EW_ALU_CVT_BYPASS_SHIFT)
+#define SDP_D_DP_EW_ALU_CFG_0_EW_ALU_CVT_BYPASS_NO			_MK_ENUM_CONST(0x0)
+#define SDP_D_DP_EW_ALU_CFG_0_EW_ALU_CVT_BYPASS_YES			_MK_ENUM_CONST(0x1)
+
+
+// Register SDP_D_DP_EW_ALU_SRC_VALUE_0
+#define SDP_D_DP_EW_ALU_SRC_VALUE_0			_MK_ADDR_CONST(0x9088)
+#define SDP_D_DP_EW_ALU_SRC_VALUE_0_EW_ALU_OPERAND_SHIFT			_MK_SHIFT_CONST(0)
+#define SDP_D_DP_EW_ALU_SRC_VALUE_0_EW_ALU_OPERAND_FIELD			_MK_FIELD_CONST(0xffffffff, SDP_D_DP_EW_ALU_SRC_VALUE_0_EW_ALU_OPERAND_SHIFT)
+
+
+// Register SDP_D_DP_EW_ALU_CVT_OFFSET_VALUE_0
+#define SDP_D_DP_EW_ALU_CVT_OFFSET_VALUE_0			_MK_ADDR_CONST(0x908c)
+#define SDP_D_DP_EW_ALU_CVT_OFFSET_VALUE_0_EW_ALU_CVT_OFFSET_SHIFT			_MK_SHIFT_CONST(0)
+#define SDP_D_DP_EW_ALU_CVT_OFFSET_VALUE_0_EW_ALU_CVT_OFFSET_FIELD			_MK_FIELD_CONST(0xffffffff, SDP_D_DP_EW_ALU_CVT_OFFSET_VALUE_0_EW_ALU_CVT_OFFSET_SHIFT)
+
+
+// Register SDP_D_DP_EW_ALU_CVT_SCALE_VALUE_0
+#define SDP_D_DP_EW_ALU_CVT_SCALE_VALUE_0			_MK_ADDR_CONST(0x9090)
+#define SDP_D_DP_EW_ALU_CVT_SCALE_VALUE_0_EW_ALU_CVT_SCALE_SHIFT			_MK_SHIFT_CONST(0)
+#define SDP_D_DP_EW_ALU_CVT_SCALE_VALUE_0_EW_ALU_CVT_SCALE_FIELD			_MK_FIELD_CONST(0xffff, SDP_D_DP_EW_ALU_CVT_SCALE_VALUE_0_EW_ALU_CVT_SCALE_SHIFT)
+
+
+// Register SDP_D_DP_EW_ALU_CVT_TRUNCATE_VALUE_0
+#define SDP_D_DP_EW_ALU_CVT_TRUNCATE_VALUE_0			_MK_ADDR_CONST(0x9094)
+#define SDP_D_DP_EW_ALU_CVT_TRUNCATE_VALUE_0_EW_ALU_CVT_TRUNCATE_SHIFT			_MK_SHIFT_CONST(0)
+#define SDP_D_DP_EW_ALU_CVT_TRUNCATE_VALUE_0_EW_ALU_CVT_TRUNCATE_FIELD			_MK_FIELD_CONST(0x3f, SDP_D_DP_EW_ALU_CVT_TRUNCATE_VALUE_0_EW_ALU_CVT_TRUNCATE_SHIFT)
+
+
+// Register SDP_D_DP_EW_MUL_CFG_0
+#define SDP_D_DP_EW_MUL_CFG_0			_MK_ADDR_CONST(0x9098)
+#define SDP_D_DP_EW_MUL_CFG_0_EW_MUL_SRC_SHIFT			_MK_SHIFT_CONST(0)
+#define SDP_D_DP_EW_MUL_CFG_0_EW_MUL_SRC_FIELD			_MK_FIELD_CONST(0x1, SDP_D_DP_EW_MUL_CFG_0_EW_MUL_SRC_SHIFT)
+#define SDP_D_DP_EW_MUL_CFG_0_EW_MUL_SRC_REG			_MK_ENUM_CONST(0x0)
+#define SDP_D_DP_EW_MUL_CFG_0_EW_MUL_SRC_MEM			_MK_ENUM_CONST(0x1)
+#define SDP_D_DP_EW_MUL_CFG_0_EW_MUL_CVT_BYPASS_SHIFT			_MK_SHIFT_CONST(1)
+#define SDP_D_DP_EW_MUL_CFG_0_EW_MUL_CVT_BYPASS_FIELD			_MK_FIELD_CONST(0x1, SDP_D_DP_EW_MUL_CFG_0_EW_MUL_CVT_BYPASS_SHIFT)
+#define SDP_D_DP_EW_MUL_CFG_0_EW_MUL_CVT_BYPASS_NO			_MK_ENUM_CONST(0x0)
+#define SDP_D_DP_EW_MUL_CFG_0_EW_MUL_CVT_BYPASS_YES			_MK_ENUM_CONST(0x1)
+
+
+// Register SDP_D_DP_EW_MUL_SRC_VALUE_0
+#define SDP_D_DP_EW_MUL_SRC_VALUE_0			_MK_ADDR_CONST(0x909c)
+#define SDP_D_DP_EW_MUL_SRC_VALUE_0_EW_MUL_OPERAND_SHIFT			_MK_SHIFT_CONST(0)
+#define SDP_D_DP_EW_MUL_SRC_VALUE_0_EW_MUL_OPERAND_FIELD			_MK_FIELD_CONST(0xffffffff, SDP_D_DP_EW_MUL_SRC_VALUE_0_EW_MUL_OPERAND_SHIFT)
+
+
+// Register SDP_D_DP_EW_MUL_CVT_OFFSET_VALUE_0
+#define SDP_D_DP_EW_MUL_CVT_OFFSET_VALUE_0			_MK_ADDR_CONST(0x90a0)
+#define SDP_D_DP_EW_MUL_CVT_OFFSET_VALUE_0_EW_MUL_CVT_OFFSET_SHIFT			_MK_SHIFT_CONST(0)
+#define SDP_D_DP_EW_MUL_CVT_OFFSET_VALUE_0_EW_MUL_CVT_OFFSET_FIELD			_MK_FIELD_CONST(0xffffffff, SDP_D_DP_EW_MUL_CVT_OFFSET_VALUE_0_EW_MUL_CVT_OFFSET_SHIFT)
+
+
+// Register SDP_D_DP_EW_MUL_CVT_SCALE_VALUE_0
+#define SDP_D_DP_EW_MUL_CVT_SCALE_VALUE_0			_MK_ADDR_CONST(0x90a4)
+#define SDP_D_DP_EW_MUL_CVT_SCALE_VALUE_0_EW_MUL_CVT_SCALE_SHIFT			_MK_SHIFT_CONST(0)
+#define SDP_D_DP_EW_MUL_CVT_SCALE_VALUE_0_EW_MUL_CVT_SCALE_FIELD			_MK_FIELD_CONST(0xffff, SDP_D_DP_EW_MUL_CVT_SCALE_VALUE_0_EW_MUL_CVT_SCALE_SHIFT)
+
+
+// Register SDP_D_DP_EW_MUL_CVT_TRUNCATE_VALUE_0
+#define SDP_D_DP_EW_MUL_CVT_TRUNCATE_VALUE_0			_MK_ADDR_CONST(0x90a8)
+#define SDP_D_DP_EW_MUL_CVT_TRUNCATE_VALUE_0_EW_MUL_CVT_TRUNCATE_SHIFT			_MK_SHIFT_CONST(0)
+#define SDP_D_DP_EW_MUL_CVT_TRUNCATE_VALUE_0_EW_MUL_CVT_TRUNCATE_FIELD			_MK_FIELD_CONST(0x3f, SDP_D_DP_EW_MUL_CVT_TRUNCATE_VALUE_0_EW_MUL_CVT_TRUNCATE_SHIFT)
+
+
+// Register SDP_D_DP_EW_TRUNCATE_VALUE_0
+#define SDP_D_DP_EW_TRUNCATE_VALUE_0			_MK_ADDR_CONST(0x90ac)
+#define SDP_D_DP_EW_TRUNCATE_VALUE_0_EW_TRUNCATE_SHIFT			_MK_SHIFT_CONST(0)
+#define SDP_D_DP_EW_TRUNCATE_VALUE_0_EW_TRUNCATE_FIELD			_MK_FIELD_CONST(0x3ff, SDP_D_DP_EW_TRUNCATE_VALUE_0_EW_TRUNCATE_SHIFT)
+
+
+// Register SDP_D_FEATURE_MODE_CFG_0
+#define SDP_D_FEATURE_MODE_CFG_0			_MK_ADDR_CONST(0x90b0)
+#define SDP_D_FEATURE_MODE_CFG_0_FLYING_MODE_SHIFT			_MK_SHIFT_CONST(0)
+#define SDP_D_FEATURE_MODE_CFG_0_FLYING_MODE_FIELD			_MK_FIELD_CONST(0x1, SDP_D_FEATURE_MODE_CFG_0_FLYING_MODE_SHIFT)
+#define SDP_D_FEATURE_MODE_CFG_0_FLYING_MODE_OFF			_MK_ENUM_CONST(0x0)
+#define SDP_D_FEATURE_MODE_CFG_0_FLYING_MODE_ON			_MK_ENUM_CONST(0x1)
+#define SDP_D_FEATURE_MODE_CFG_0_OUTPUT_DST_SHIFT			_MK_SHIFT_CONST(1)
+#define SDP_D_FEATURE_MODE_CFG_0_OUTPUT_DST_FIELD			_MK_FIELD_CONST(0x1, SDP_D_FEATURE_MODE_CFG_0_OUTPUT_DST_SHIFT)
+#define SDP_D_FEATURE_MODE_CFG_0_OUTPUT_DST_MEM			_MK_ENUM_CONST(0x0)
+#define SDP_D_FEATURE_MODE_CFG_0_OUTPUT_DST_PDP			_MK_ENUM_CONST(0x1)
+#define SDP_D_FEATURE_MODE_CFG_0_WINOGRAD_SHIFT			_MK_SHIFT_CONST(2)
+#define SDP_D_FEATURE_MODE_CFG_0_WINOGRAD_FIELD			_MK_FIELD_CONST(0x1, SDP_D_FEATURE_MODE_CFG_0_WINOGRAD_SHIFT)
+#define SDP_D_FEATURE_MODE_CFG_0_WINOGRAD_OFF			_MK_ENUM_CONST(0x0)
+#define SDP_D_FEATURE_MODE_CFG_0_WINOGRAD_ON			_MK_ENUM_CONST(0x1)
+#define SDP_D_FEATURE_MODE_CFG_0_NAN_TO_ZERO_SHIFT			_MK_SHIFT_CONST(3)
+#define SDP_D_FEATURE_MODE_CFG_0_NAN_TO_ZERO_FIELD			_MK_FIELD_CONST(0x1, SDP_D_FEATURE_MODE_CFG_0_NAN_TO_ZERO_SHIFT)
+#define SDP_D_FEATURE_MODE_CFG_0_NAN_TO_ZERO_DISABLE			_MK_ENUM_CONST(0x0)
+#define SDP_D_FEATURE_MODE_CFG_0_NAN_TO_ZERO_ENABLE			_MK_ENUM_CONST(0x1)
+#define SDP_D_FEATURE_MODE_CFG_0_BATCH_NUMBER_SHIFT			_MK_SHIFT_CONST(8)
+#define SDP_D_FEATURE_MODE_CFG_0_BATCH_NUMBER_FIELD			_MK_FIELD_CONST(0x1f, SDP_D_FEATURE_MODE_CFG_0_BATCH_NUMBER_SHIFT)
+
+
+// Register SDP_D_DST_DMA_CFG_0
+#define SDP_D_DST_DMA_CFG_0			_MK_ADDR_CONST(0x90b4)
+#define SDP_D_DST_DMA_CFG_0_DST_RAM_TYPE_SHIFT			_MK_SHIFT_CONST(0)
+#define SDP_D_DST_DMA_CFG_0_DST_RAM_TYPE_FIELD			_MK_FIELD_CONST(0x1, SDP_D_DST_DMA_CFG_0_DST_RAM_TYPE_SHIFT)
+#define SDP_D_DST_DMA_CFG_0_DST_RAM_TYPE_CV			_MK_ENUM_CONST(0x0)
+#define SDP_D_DST_DMA_CFG_0_DST_RAM_TYPE_MC			_MK_ENUM_CONST(0x1)
+
+
+// Register SDP_D_DST_BATCH_STRIDE_0
+#define SDP_D_DST_BATCH_STRIDE_0			_MK_ADDR_CONST(0x90b8)
+#define SDP_D_DST_BATCH_STRIDE_0_DST_BATCH_STRIDE_SHIFT			_MK_SHIFT_CONST(0)
+#define SDP_D_DST_BATCH_STRIDE_0_DST_BATCH_STRIDE_FIELD			_MK_FIELD_CONST(0xffffffff, SDP_D_DST_BATCH_STRIDE_0_DST_BATCH_STRIDE_SHIFT)
+
+
+// Register SDP_D_DATA_FORMAT_0
+#define SDP_D_DATA_FORMAT_0			_MK_ADDR_CONST(0x90bc)
+#define SDP_D_DATA_FORMAT_0_PROC_PRECISION_SHIFT			_MK_SHIFT_CONST(0)
+#define SDP_D_DATA_FORMAT_0_PROC_PRECISION_FIELD			_MK_FIELD_CONST(0x3, SDP_D_DATA_FORMAT_0_PROC_PRECISION_SHIFT)
+#define SDP_D_DATA_FORMAT_0_PROC_PRECISION_INT8			_MK_ENUM_CONST(0x0)
+#define SDP_D_DATA_FORMAT_0_PROC_PRECISION_INT16			_MK_ENUM_CONST(0x1)
+#define SDP_D_DATA_FORMAT_0_PROC_PRECISION_FP16			_MK_ENUM_CONST(0x2)
+#define SDP_D_DATA_FORMAT_0_OUT_PRECISION_SHIFT			_MK_SHIFT_CONST(2)
+#define SDP_D_DATA_FORMAT_0_OUT_PRECISION_FIELD			_MK_FIELD_CONST(0x3, SDP_D_DATA_FORMAT_0_OUT_PRECISION_SHIFT)
+#define SDP_D_DATA_FORMAT_0_OUT_PRECISION_INT8			_MK_ENUM_CONST(0x0)
+#define SDP_D_DATA_FORMAT_0_OUT_PRECISION_INT16			_MK_ENUM_CONST(0x1)
+#define SDP_D_DATA_FORMAT_0_OUT_PRECISION_FP16			_MK_ENUM_CONST(0x2)
+
+
+// Register SDP_D_CVT_OFFSET_0
+#define SDP_D_CVT_OFFSET_0			_MK_ADDR_CONST(0x90c0)
+#define SDP_D_CVT_OFFSET_0_CVT_OFFSET_SHIFT			_MK_SHIFT_CONST(0)
+#define SDP_D_CVT_OFFSET_0_CVT_OFFSET_FIELD			_MK_FIELD_CONST(0xffffffff, SDP_D_CVT_OFFSET_0_CVT_OFFSET_SHIFT)
+
+
+// Register SDP_D_CVT_SCALE_0
+#define SDP_D_CVT_SCALE_0			_MK_ADDR_CONST(0x90c4)
+#define SDP_D_CVT_SCALE_0_CVT_SCALE_SHIFT			_MK_SHIFT_CONST(0)
+#define SDP_D_CVT_SCALE_0_CVT_SCALE_FIELD			_MK_FIELD_CONST(0xffff, SDP_D_CVT_SCALE_0_CVT_SCALE_SHIFT)
+
+
+// Register SDP_D_CVT_SHIFT_0
+#define SDP_D_CVT_SHIFT_0			_MK_ADDR_CONST(0x90c8)
+#define SDP_D_CVT_SHIFT_0_CVT_SHIFT_SHIFT			_MK_SHIFT_CONST(0)
+#define SDP_D_CVT_SHIFT_0_CVT_SHIFT_FIELD			_MK_FIELD_CONST(0x3f, SDP_D_CVT_SHIFT_0_CVT_SHIFT_SHIFT)
+
+
+// Register SDP_D_STATUS_0
+#define SDP_D_STATUS_0			_MK_ADDR_CONST(0x90cc)
+#define SDP_D_STATUS_0_STATUS_UNEQUAL_SHIFT			_MK_SHIFT_CONST(0)
+#define SDP_D_STATUS_0_STATUS_UNEQUAL_FIELD			_MK_FIELD_CONST(0x1, SDP_D_STATUS_0_STATUS_UNEQUAL_SHIFT)
+
+
+// Register SDP_D_STATUS_NAN_INPUT_NUM_0
+#define SDP_D_STATUS_NAN_INPUT_NUM_0			_MK_ADDR_CONST(0x90d0)
+#define SDP_D_STATUS_NAN_INPUT_NUM_0_STATUS_NAN_INPUT_NUM_SHIFT			_MK_SHIFT_CONST(0)
+#define SDP_D_STATUS_NAN_INPUT_NUM_0_STATUS_NAN_INPUT_NUM_FIELD			_MK_FIELD_CONST(0xffffffff, SDP_D_STATUS_NAN_INPUT_NUM_0_STATUS_NAN_INPUT_NUM_SHIFT)
+
+
+// Register SDP_D_STATUS_INF_INPUT_NUM_0
+#define SDP_D_STATUS_INF_INPUT_NUM_0			_MK_ADDR_CONST(0x90d4)
+#define SDP_D_STATUS_INF_INPUT_NUM_0_STATUS_INF_INPUT_NUM_SHIFT			_MK_SHIFT_CONST(0)
+#define SDP_D_STATUS_INF_INPUT_NUM_0_STATUS_INF_INPUT_NUM_FIELD			_MK_FIELD_CONST(0xffffffff, SDP_D_STATUS_INF_INPUT_NUM_0_STATUS_INF_INPUT_NUM_SHIFT)
+
+
+// Register SDP_D_STATUS_NAN_OUTPUT_NUM_0
+#define SDP_D_STATUS_NAN_OUTPUT_NUM_0			_MK_ADDR_CONST(0x90d8)
+#define SDP_D_STATUS_NAN_OUTPUT_NUM_0_STATUS_NAN_OUTPUT_NUM_SHIFT			_MK_SHIFT_CONST(0)
+#define SDP_D_STATUS_NAN_OUTPUT_NUM_0_STATUS_NAN_OUTPUT_NUM_FIELD			_MK_FIELD_CONST(0xffffffff, SDP_D_STATUS_NAN_OUTPUT_NUM_0_STATUS_NAN_OUTPUT_NUM_SHIFT)
+
+
+// Register SDP_D_PERF_ENABLE_0
+#define SDP_D_PERF_ENABLE_0			_MK_ADDR_CONST(0x90dc)
+#define SDP_D_PERF_ENABLE_0_PERF_DMA_EN_SHIFT			_MK_SHIFT_CONST(0)
+#define SDP_D_PERF_ENABLE_0_PERF_DMA_EN_FIELD			_MK_FIELD_CONST(0x1, SDP_D_PERF_ENABLE_0_PERF_DMA_EN_SHIFT)
+#define SDP_D_PERF_ENABLE_0_PERF_DMA_EN_NO			_MK_ENUM_CONST(0x0)
+#define SDP_D_PERF_ENABLE_0_PERF_DMA_EN_YES			_MK_ENUM_CONST(0x1)
+#define SDP_D_PERF_ENABLE_0_PERF_LUT_EN_SHIFT			_MK_SHIFT_CONST(1)
+#define SDP_D_PERF_ENABLE_0_PERF_LUT_EN_FIELD			_MK_FIELD_CONST(0x1, SDP_D_PERF_ENABLE_0_PERF_LUT_EN_SHIFT)
+#define SDP_D_PERF_ENABLE_0_PERF_LUT_EN_NO			_MK_ENUM_CONST(0x0)
+#define SDP_D_PERF_ENABLE_0_PERF_LUT_EN_YES			_MK_ENUM_CONST(0x1)
+#define SDP_D_PERF_ENABLE_0_PERF_SAT_EN_SHIFT			_MK_SHIFT_CONST(2)
+#define SDP_D_PERF_ENABLE_0_PERF_SAT_EN_FIELD			_MK_FIELD_CONST(0x1, SDP_D_PERF_ENABLE_0_PERF_SAT_EN_SHIFT)
+#define SDP_D_PERF_ENABLE_0_PERF_SAT_EN_NO			_MK_ENUM_CONST(0x0)
+#define SDP_D_PERF_ENABLE_0_PERF_SAT_EN_YES			_MK_ENUM_CONST(0x1)
+#define SDP_D_PERF_ENABLE_0_PERF_NAN_INF_COUNT_EN_SHIFT			_MK_SHIFT_CONST(3)
+#define SDP_D_PERF_ENABLE_0_PERF_NAN_INF_COUNT_EN_FIELD			_MK_FIELD_CONST(0x1, SDP_D_PERF_ENABLE_0_PERF_NAN_INF_COUNT_EN_SHIFT)
+#define SDP_D_PERF_ENABLE_0_PERF_NAN_INF_COUNT_EN_NO			_MK_ENUM_CONST(0x0)
+#define SDP_D_PERF_ENABLE_0_PERF_NAN_INF_COUNT_EN_YES			_MK_ENUM_CONST(0x1)
+
+
+// Register SDP_D_PERF_WDMA_WRITE_STALL_0
+#define SDP_D_PERF_WDMA_WRITE_STALL_0			_MK_ADDR_CONST(0x90e0)
+#define SDP_D_PERF_WDMA_WRITE_STALL_0_WDMA_STALL_SHIFT			_MK_SHIFT_CONST(0)
+#define SDP_D_PERF_WDMA_WRITE_STALL_0_WDMA_STALL_FIELD			_MK_FIELD_CONST(0xffffffff, SDP_D_PERF_WDMA_WRITE_STALL_0_WDMA_STALL_SHIFT)
+
+
+// Register SDP_D_PERF_LUT_UFLOW_0
+#define SDP_D_PERF_LUT_UFLOW_0			_MK_ADDR_CONST(0x90e4)
+#define SDP_D_PERF_LUT_UFLOW_0_LUT_UFLOW_SHIFT			_MK_SHIFT_CONST(0)
+#define SDP_D_PERF_LUT_UFLOW_0_LUT_UFLOW_FIELD			_MK_FIELD_CONST(0xffffffff, SDP_D_PERF_LUT_UFLOW_0_LUT_UFLOW_SHIFT)
+
+
+// Register SDP_D_PERF_LUT_OFLOW_0
+#define SDP_D_PERF_LUT_OFLOW_0			_MK_ADDR_CONST(0x90e8)
+#define SDP_D_PERF_LUT_OFLOW_0_LUT_OFLOW_SHIFT			_MK_SHIFT_CONST(0)
+#define SDP_D_PERF_LUT_OFLOW_0_LUT_OFLOW_FIELD			_MK_FIELD_CONST(0xffffffff, SDP_D_PERF_LUT_OFLOW_0_LUT_OFLOW_SHIFT)
+
+
+// Register SDP_D_PERF_OUT_SATURATION_0
+#define SDP_D_PERF_OUT_SATURATION_0			_MK_ADDR_CONST(0x90ec)
+#define SDP_D_PERF_OUT_SATURATION_0_OUT_SATURATION_SHIFT			_MK_SHIFT_CONST(0)
+#define SDP_D_PERF_OUT_SATURATION_0_OUT_SATURATION_FIELD			_MK_FIELD_CONST(0xffffffff, SDP_D_PERF_OUT_SATURATION_0_OUT_SATURATION_SHIFT)
+
+
+// Register SDP_D_PERF_LUT_HYBRID_0
+#define SDP_D_PERF_LUT_HYBRID_0			_MK_ADDR_CONST(0x90f0)
+#define SDP_D_PERF_LUT_HYBRID_0_LUT_HYBRID_SHIFT			_MK_SHIFT_CONST(0)
+#define SDP_D_PERF_LUT_HYBRID_0_LUT_HYBRID_FIELD			_MK_FIELD_CONST(0xffffffff, SDP_D_PERF_LUT_HYBRID_0_LUT_HYBRID_SHIFT)
+
+
+// Register SDP_D_PERF_LUT_LE_HIT_0
+#define SDP_D_PERF_LUT_LE_HIT_0			_MK_ADDR_CONST(0x90f4)
+#define SDP_D_PERF_LUT_LE_HIT_0_LUT_LE_HIT_SHIFT			_MK_SHIFT_CONST(0)
+#define SDP_D_PERF_LUT_LE_HIT_0_LUT_LE_HIT_FIELD			_MK_FIELD_CONST(0xffffffff, SDP_D_PERF_LUT_LE_HIT_0_LUT_LE_HIT_SHIFT)
+
+
+// Register SDP_D_PERF_LUT_LO_HIT_0
+#define SDP_D_PERF_LUT_LO_HIT_0			_MK_ADDR_CONST(0x90f8)
+#define SDP_D_PERF_LUT_LO_HIT_0_LUT_LO_HIT_SHIFT			_MK_SHIFT_CONST(0)
+#define SDP_D_PERF_LUT_LO_HIT_0_LUT_LO_HIT_FIELD			_MK_FIELD_CONST(0xffffffff, SDP_D_PERF_LUT_LO_HIT_0_LUT_LO_HIT_SHIFT)
+
+
+
+// To satisfy various compilers and platforms,
+// we let users control the types and syntax of certain constants, using macros.
+#ifndef _MK_SHIFT_CONST
+  #define _MK_SHIFT_CONST(_constant_) _constant_
+#endif
+#ifndef _MK_MASK_CONST
+  #define _MK_MASK_CONST(_constant_) _constant_
+#endif
+#ifndef _MK_ENUM_CONST
+  #define _MK_ENUM_CONST(_constant_) (_constant_ ## UL)
+#endif
+#ifndef _MK_ADDR_CONST
+  #define _MK_ADDR_CONST(_constant_) _constant_
+#endif
+#ifndef _MK_FIELD_CONST
+  #define _MK_FIELD_CONST(_mask_, _shift_) (_MK_MASK_CONST(_mask_) << _MK_SHIFT_CONST(_shift_))
+#endif
+
+
+// Register PDP_RDMA_S_STATUS_0
+#define PDP_RDMA_S_STATUS_0			_MK_ADDR_CONST(0xa000)
+#define PDP_RDMA_S_STATUS_0_STATUS_0_SHIFT			_MK_SHIFT_CONST(0)
+#define PDP_RDMA_S_STATUS_0_STATUS_0_FIELD			_MK_FIELD_CONST(0x3, PDP_RDMA_S_STATUS_0_STATUS_0_SHIFT)
+#define PDP_RDMA_S_STATUS_0_STATUS_0_IDLE			_MK_ENUM_CONST(0x0)
+#define PDP_RDMA_S_STATUS_0_STATUS_0_RUNNING			_MK_ENUM_CONST(0x1)
+#define PDP_RDMA_S_STATUS_0_STATUS_0_PENDING			_MK_ENUM_CONST(0x2)
+#define PDP_RDMA_S_STATUS_0_STATUS_1_SHIFT			_MK_SHIFT_CONST(16)
+#define PDP_RDMA_S_STATUS_0_STATUS_1_FIELD			_MK_FIELD_CONST(0x3, PDP_RDMA_S_STATUS_0_STATUS_1_SHIFT)
+#define PDP_RDMA_S_STATUS_0_STATUS_1_IDLE			_MK_ENUM_CONST(0x0)
+#define PDP_RDMA_S_STATUS_0_STATUS_1_RUNNING			_MK_ENUM_CONST(0x1)
+#define PDP_RDMA_S_STATUS_0_STATUS_1_PENDING			_MK_ENUM_CONST(0x2)
+
+
+// Register PDP_RDMA_S_POINTER_0
+#define PDP_RDMA_S_POINTER_0			_MK_ADDR_CONST(0xa004)
+#define PDP_RDMA_S_POINTER_0_PRODUCER_SHIFT			_MK_SHIFT_CONST(0)
+#define PDP_RDMA_S_POINTER_0_PRODUCER_FIELD			_MK_FIELD_CONST(0x1, PDP_RDMA_S_POINTER_0_PRODUCER_SHIFT)
+#define PDP_RDMA_S_POINTER_0_PRODUCER_GROUP_0			_MK_ENUM_CONST(0x0)
+#define PDP_RDMA_S_POINTER_0_PRODUCER_GROUP_1			_MK_ENUM_CONST(0x1)
+#define PDP_RDMA_S_POINTER_0_CONSUMER_SHIFT			_MK_SHIFT_CONST(16)
+#define PDP_RDMA_S_POINTER_0_CONSUMER_FIELD			_MK_FIELD_CONST(0x1, PDP_RDMA_S_POINTER_0_CONSUMER_SHIFT)
+#define PDP_RDMA_S_POINTER_0_CONSUMER_GROUP_0			_MK_ENUM_CONST(0x0)
+#define PDP_RDMA_S_POINTER_0_CONSUMER_GROUP_1			_MK_ENUM_CONST(0x1)
+
+
+// Register PDP_RDMA_D_OP_ENABLE_0
+#define PDP_RDMA_D_OP_ENABLE_0			_MK_ADDR_CONST(0xa008)
+#define PDP_RDMA_D_OP_ENABLE_0_OP_EN_SHIFT			_MK_SHIFT_CONST(0)
+#define PDP_RDMA_D_OP_ENABLE_0_OP_EN_FIELD			_MK_FIELD_CONST(0x1, PDP_RDMA_D_OP_ENABLE_0_OP_EN_SHIFT)
+#define PDP_RDMA_D_OP_ENABLE_0_OP_EN_DISABLE			_MK_ENUM_CONST(0x0)
+#define PDP_RDMA_D_OP_ENABLE_0_OP_EN_ENABLE			_MK_ENUM_CONST(0x1)
+
+
+// Register PDP_RDMA_D_DATA_CUBE_IN_WIDTH_0
+#define PDP_RDMA_D_DATA_CUBE_IN_WIDTH_0			_MK_ADDR_CONST(0xa00c)
+#define PDP_RDMA_D_DATA_CUBE_IN_WIDTH_0_CUBE_IN_WIDTH_SHIFT			_MK_SHIFT_CONST(0)
+#define PDP_RDMA_D_DATA_CUBE_IN_WIDTH_0_CUBE_IN_WIDTH_FIELD			_MK_FIELD_CONST(0x1fff, PDP_RDMA_D_DATA_CUBE_IN_WIDTH_0_CUBE_IN_WIDTH_SHIFT)
+
+
+// Register PDP_RDMA_D_DATA_CUBE_IN_HEIGHT_0
+#define PDP_RDMA_D_DATA_CUBE_IN_HEIGHT_0			_MK_ADDR_CONST(0xa010)
+#define PDP_RDMA_D_DATA_CUBE_IN_HEIGHT_0_CUBE_IN_HEIGHT_SHIFT			_MK_SHIFT_CONST(0)
+#define PDP_RDMA_D_DATA_CUBE_IN_HEIGHT_0_CUBE_IN_HEIGHT_FIELD			_MK_FIELD_CONST(0x1fff, PDP_RDMA_D_DATA_CUBE_IN_HEIGHT_0_CUBE_IN_HEIGHT_SHIFT)
+
+
+// Register PDP_RDMA_D_DATA_CUBE_IN_CHANNEL_0
+#define PDP_RDMA_D_DATA_CUBE_IN_CHANNEL_0			_MK_ADDR_CONST(0xa014)
+#define PDP_RDMA_D_DATA_CUBE_IN_CHANNEL_0_CUBE_IN_CHANNEL_SHIFT			_MK_SHIFT_CONST(0)
+#define PDP_RDMA_D_DATA_CUBE_IN_CHANNEL_0_CUBE_IN_CHANNEL_FIELD			_MK_FIELD_CONST(0x1fff, PDP_RDMA_D_DATA_CUBE_IN_CHANNEL_0_CUBE_IN_CHANNEL_SHIFT)
+
+
+// Register PDP_RDMA_D_FLYING_MODE_0
+#define PDP_RDMA_D_FLYING_MODE_0			_MK_ADDR_CONST(0xa018)
+#define PDP_RDMA_D_FLYING_MODE_0_FLYING_MODE_SHIFT			_MK_SHIFT_CONST(0)
+#define PDP_RDMA_D_FLYING_MODE_0_FLYING_MODE_FIELD			_MK_FIELD_CONST(0x1, PDP_RDMA_D_FLYING_MODE_0_FLYING_MODE_SHIFT)
+#define PDP_RDMA_D_FLYING_MODE_0_FLYING_MODE_ON_FLYING			_MK_ENUM_CONST(0x0)
+#define PDP_RDMA_D_FLYING_MODE_0_FLYING_MODE_OFF_FLYING			_MK_ENUM_CONST(0x1)
+
+
+// Register PDP_RDMA_D_SRC_BASE_ADDR_LOW_0
+#define PDP_RDMA_D_SRC_BASE_ADDR_LOW_0			_MK_ADDR_CONST(0xa01c)
+#define PDP_RDMA_D_SRC_BASE_ADDR_LOW_0_SRC_BASE_ADDR_LOW_SHIFT			_MK_SHIFT_CONST(0)
+#define PDP_RDMA_D_SRC_BASE_ADDR_LOW_0_SRC_BASE_ADDR_LOW_FIELD			_MK_FIELD_CONST(0xffffffff, PDP_RDMA_D_SRC_BASE_ADDR_LOW_0_SRC_BASE_ADDR_LOW_SHIFT)
+
+
+// Register PDP_RDMA_D_SRC_BASE_ADDR_HIGH_0
+#define PDP_RDMA_D_SRC_BASE_ADDR_HIGH_0			_MK_ADDR_CONST(0xa020)
+#define PDP_RDMA_D_SRC_BASE_ADDR_HIGH_0_SRC_BASE_ADDR_HIGH_SHIFT			_MK_SHIFT_CONST(0)
+#define PDP_RDMA_D_SRC_BASE_ADDR_HIGH_0_SRC_BASE_ADDR_HIGH_FIELD			_MK_FIELD_CONST(0xffffffff, PDP_RDMA_D_SRC_BASE_ADDR_HIGH_0_SRC_BASE_ADDR_HIGH_SHIFT)
+
+
+// Register PDP_RDMA_D_SRC_LINE_STRIDE_0
+#define PDP_RDMA_D_SRC_LINE_STRIDE_0			_MK_ADDR_CONST(0xa024)
+#define PDP_RDMA_D_SRC_LINE_STRIDE_0_SRC_LINE_STRIDE_SHIFT			_MK_SHIFT_CONST(0)
+#define PDP_RDMA_D_SRC_LINE_STRIDE_0_SRC_LINE_STRIDE_FIELD			_MK_FIELD_CONST(0xffffffff, PDP_RDMA_D_SRC_LINE_STRIDE_0_SRC_LINE_STRIDE_SHIFT)
+
+
+// Register PDP_RDMA_D_SRC_SURFACE_STRIDE_0
+#define PDP_RDMA_D_SRC_SURFACE_STRIDE_0			_MK_ADDR_CONST(0xa028)
+#define PDP_RDMA_D_SRC_SURFACE_STRIDE_0_SRC_SURFACE_STRIDE_SHIFT			_MK_SHIFT_CONST(0)
+#define PDP_RDMA_D_SRC_SURFACE_STRIDE_0_SRC_SURFACE_STRIDE_FIELD			_MK_FIELD_CONST(0xffffffff, PDP_RDMA_D_SRC_SURFACE_STRIDE_0_SRC_SURFACE_STRIDE_SHIFT)
+
+
+// Register PDP_RDMA_D_SRC_RAM_CFG_0
+#define PDP_RDMA_D_SRC_RAM_CFG_0			_MK_ADDR_CONST(0xa02c)
+#define PDP_RDMA_D_SRC_RAM_CFG_0_SRC_RAM_TYPE_SHIFT			_MK_SHIFT_CONST(0)
+#define PDP_RDMA_D_SRC_RAM_CFG_0_SRC_RAM_TYPE_FIELD			_MK_FIELD_CONST(0x1, PDP_RDMA_D_SRC_RAM_CFG_0_SRC_RAM_TYPE_SHIFT)
+#define PDP_RDMA_D_SRC_RAM_CFG_0_SRC_RAM_TYPE_CV			_MK_ENUM_CONST(0x0)
+#define PDP_RDMA_D_SRC_RAM_CFG_0_SRC_RAM_TYPE_MC			_MK_ENUM_CONST(0x1)
+
+
+// Register PDP_RDMA_D_DATA_FORMAT_0
+#define PDP_RDMA_D_DATA_FORMAT_0			_MK_ADDR_CONST(0xa030)
+#define PDP_RDMA_D_DATA_FORMAT_0_INPUT_DATA_SHIFT			_MK_SHIFT_CONST(0)
+#define PDP_RDMA_D_DATA_FORMAT_0_INPUT_DATA_FIELD			_MK_FIELD_CONST(0x3, PDP_RDMA_D_DATA_FORMAT_0_INPUT_DATA_SHIFT)
+#define PDP_RDMA_D_DATA_FORMAT_0_INPUT_DATA_INT8			_MK_ENUM_CONST(0x0)
+#define PDP_RDMA_D_DATA_FORMAT_0_INPUT_DATA_INT16			_MK_ENUM_CONST(0x1)
+#define PDP_RDMA_D_DATA_FORMAT_0_INPUT_DATA_FP16			_MK_ENUM_CONST(0x2)
+
+
+// Register PDP_RDMA_D_OPERATION_MODE_CFG_0
+#define PDP_RDMA_D_OPERATION_MODE_CFG_0			_MK_ADDR_CONST(0xa034)
+#define PDP_RDMA_D_OPERATION_MODE_CFG_0_SPLIT_NUM_SHIFT			_MK_SHIFT_CONST(0)
+#define PDP_RDMA_D_OPERATION_MODE_CFG_0_SPLIT_NUM_FIELD			_MK_FIELD_CONST(0xff, PDP_RDMA_D_OPERATION_MODE_CFG_0_SPLIT_NUM_SHIFT)
+
+
+// Register PDP_RDMA_D_POOLING_KERNEL_CFG_0
+#define PDP_RDMA_D_POOLING_KERNEL_CFG_0			_MK_ADDR_CONST(0xa038)
+#define PDP_RDMA_D_POOLING_KERNEL_CFG_0_KERNEL_WIDTH_SHIFT			_MK_SHIFT_CONST(0)
+#define PDP_RDMA_D_POOLING_KERNEL_CFG_0_KERNEL_WIDTH_FIELD			_MK_FIELD_CONST(0xf, PDP_RDMA_D_POOLING_KERNEL_CFG_0_KERNEL_WIDTH_SHIFT)
+#define PDP_RDMA_D_POOLING_KERNEL_CFG_0_KERNEL_WIDTH_KERNEL_WIDTH_1			_MK_ENUM_CONST(0x0)
+#define PDP_RDMA_D_POOLING_KERNEL_CFG_0_KERNEL_WIDTH_KERNEL_WIDTH_2			_MK_ENUM_CONST(0x1)
+#define PDP_RDMA_D_POOLING_KERNEL_CFG_0_KERNEL_WIDTH_KERNEL_WIDTH_3			_MK_ENUM_CONST(0x2)
+#define PDP_RDMA_D_POOLING_KERNEL_CFG_0_KERNEL_WIDTH_KERNEL_WIDTH_4			_MK_ENUM_CONST(0x3)
+#define PDP_RDMA_D_POOLING_KERNEL_CFG_0_KERNEL_WIDTH_KERNEL_WIDTH_5			_MK_ENUM_CONST(0x4)
+#define PDP_RDMA_D_POOLING_KERNEL_CFG_0_KERNEL_WIDTH_KERNEL_WIDTH_6			_MK_ENUM_CONST(0x5)
+#define PDP_RDMA_D_POOLING_KERNEL_CFG_0_KERNEL_WIDTH_KERNEL_WIDTH_7			_MK_ENUM_CONST(0x6)
+#define PDP_RDMA_D_POOLING_KERNEL_CFG_0_KERNEL_WIDTH_KERNEL_WIDTH_8			_MK_ENUM_CONST(0x7)
+#define PDP_RDMA_D_POOLING_KERNEL_CFG_0_KERNEL_STRIDE_WIDTH_SHIFT			_MK_SHIFT_CONST(4)
+#define PDP_RDMA_D_POOLING_KERNEL_CFG_0_KERNEL_STRIDE_WIDTH_FIELD			_MK_FIELD_CONST(0xf, PDP_RDMA_D_POOLING_KERNEL_CFG_0_KERNEL_STRIDE_WIDTH_SHIFT)
+
+
+// Register PDP_RDMA_D_POOLING_PADDING_CFG_0
+#define PDP_RDMA_D_POOLING_PADDING_CFG_0			_MK_ADDR_CONST(0xa03c)
+#define PDP_RDMA_D_POOLING_PADDING_CFG_0_PAD_WIDTH_SHIFT			_MK_SHIFT_CONST(0)
+#define PDP_RDMA_D_POOLING_PADDING_CFG_0_PAD_WIDTH_FIELD			_MK_FIELD_CONST(0xf, PDP_RDMA_D_POOLING_PADDING_CFG_0_PAD_WIDTH_SHIFT)
+
+
+// Register PDP_RDMA_D_PARTIAL_WIDTH_IN_0
+#define PDP_RDMA_D_PARTIAL_WIDTH_IN_0			_MK_ADDR_CONST(0xa040)
+#define PDP_RDMA_D_PARTIAL_WIDTH_IN_0_PARTIAL_WIDTH_IN_FIRST_SHIFT			_MK_SHIFT_CONST(0)
+#define PDP_RDMA_D_PARTIAL_WIDTH_IN_0_PARTIAL_WIDTH_IN_FIRST_FIELD			_MK_FIELD_CONST(0x3ff, PDP_RDMA_D_PARTIAL_WIDTH_IN_0_PARTIAL_WIDTH_IN_FIRST_SHIFT)
+#define PDP_RDMA_D_PARTIAL_WIDTH_IN_0_PARTIAL_WIDTH_IN_LAST_SHIFT			_MK_SHIFT_CONST(10)
+#define PDP_RDMA_D_PARTIAL_WIDTH_IN_0_PARTIAL_WIDTH_IN_LAST_FIELD			_MK_FIELD_CONST(0x3ff, PDP_RDMA_D_PARTIAL_WIDTH_IN_0_PARTIAL_WIDTH_IN_LAST_SHIFT)
+#define PDP_RDMA_D_PARTIAL_WIDTH_IN_0_PARTIAL_WIDTH_IN_MID_SHIFT			_MK_SHIFT_CONST(20)
+#define PDP_RDMA_D_PARTIAL_WIDTH_IN_0_PARTIAL_WIDTH_IN_MID_FIELD			_MK_FIELD_CONST(0x3ff, PDP_RDMA_D_PARTIAL_WIDTH_IN_0_PARTIAL_WIDTH_IN_MID_SHIFT)
+
+
+// Register PDP_RDMA_D_PERF_ENABLE_0
+#define PDP_RDMA_D_PERF_ENABLE_0			_MK_ADDR_CONST(0xa044)
+#define PDP_RDMA_D_PERF_ENABLE_0_DMA_EN_SHIFT			_MK_SHIFT_CONST(0)
+#define PDP_RDMA_D_PERF_ENABLE_0_DMA_EN_FIELD			_MK_FIELD_CONST(0x1, PDP_RDMA_D_PERF_ENABLE_0_DMA_EN_SHIFT)
+#define PDP_RDMA_D_PERF_ENABLE_0_DMA_EN_DISABLE			_MK_ENUM_CONST(0x0)
+#define PDP_RDMA_D_PERF_ENABLE_0_DMA_EN_ENABLE			_MK_ENUM_CONST(0x1)
+
+
+// Register PDP_RDMA_D_PERF_READ_STALL_0
+#define PDP_RDMA_D_PERF_READ_STALL_0			_MK_ADDR_CONST(0xa048)
+#define PDP_RDMA_D_PERF_READ_STALL_0_PERF_READ_STALL_SHIFT			_MK_SHIFT_CONST(0)
+#define PDP_RDMA_D_PERF_READ_STALL_0_PERF_READ_STALL_FIELD			_MK_FIELD_CONST(0xffffffff, PDP_RDMA_D_PERF_READ_STALL_0_PERF_READ_STALL_SHIFT)
+
+
+// Register PDP_RDMA_D_CYA_0
+#define PDP_RDMA_D_CYA_0			_MK_ADDR_CONST(0xa04c)
+#define PDP_RDMA_D_CYA_0_CYA_SHIFT			_MK_SHIFT_CONST(0)
+#define PDP_RDMA_D_CYA_0_CYA_FIELD			_MK_FIELD_CONST(0xffffffff, PDP_RDMA_D_CYA_0_CYA_SHIFT)
+
+
+
+// To satisfy various compilers and platforms,
+// we let users control the types and syntax of certain constants, using macros.
+#ifndef _MK_SHIFT_CONST
+  #define _MK_SHIFT_CONST(_constant_) _constant_
+#endif
+#ifndef _MK_MASK_CONST
+  #define _MK_MASK_CONST(_constant_) _constant_
+#endif
+#ifndef _MK_ENUM_CONST
+  #define _MK_ENUM_CONST(_constant_) (_constant_ ## UL)
+#endif
+#ifndef _MK_ADDR_CONST
+  #define _MK_ADDR_CONST(_constant_) _constant_
+#endif
+#ifndef _MK_FIELD_CONST
+  #define _MK_FIELD_CONST(_mask_, _shift_) (_MK_MASK_CONST(_mask_) << _MK_SHIFT_CONST(_shift_))
+#endif
+
+
+// Register PDP_S_STATUS_0
+#define PDP_S_STATUS_0			_MK_ADDR_CONST(0xb000)
+#define PDP_S_STATUS_0_STATUS_0_SHIFT			_MK_SHIFT_CONST(0)
+#define PDP_S_STATUS_0_STATUS_0_FIELD			_MK_FIELD_CONST(0x3, PDP_S_STATUS_0_STATUS_0_SHIFT)
+#define PDP_S_STATUS_0_STATUS_0_IDLE			_MK_ENUM_CONST(0x0)
+#define PDP_S_STATUS_0_STATUS_0_RUNNING			_MK_ENUM_CONST(0x1)
+#define PDP_S_STATUS_0_STATUS_0_PENDING			_MK_ENUM_CONST(0x2)
+#define PDP_S_STATUS_0_STATUS_1_SHIFT			_MK_SHIFT_CONST(16)
+#define PDP_S_STATUS_0_STATUS_1_FIELD			_MK_FIELD_CONST(0x3, PDP_S_STATUS_0_STATUS_1_SHIFT)
+#define PDP_S_STATUS_0_STATUS_1_IDLE			_MK_ENUM_CONST(0x0)
+#define PDP_S_STATUS_0_STATUS_1_RUNNING			_MK_ENUM_CONST(0x1)
+#define PDP_S_STATUS_0_STATUS_1_PENDING			_MK_ENUM_CONST(0x2)
+
+
+// Register PDP_S_POINTER_0
+#define PDP_S_POINTER_0			_MK_ADDR_CONST(0xb004)
+#define PDP_S_POINTER_0_PRODUCER_SHIFT			_MK_SHIFT_CONST(0)
+#define PDP_S_POINTER_0_PRODUCER_FIELD			_MK_FIELD_CONST(0x1, PDP_S_POINTER_0_PRODUCER_SHIFT)
+#define PDP_S_POINTER_0_PRODUCER_GROUP_0			_MK_ENUM_CONST(0x0)
+#define PDP_S_POINTER_0_PRODUCER_GROUP_1			_MK_ENUM_CONST(0x1)
+#define PDP_S_POINTER_0_CONSUMER_SHIFT			_MK_SHIFT_CONST(16)
+#define PDP_S_POINTER_0_CONSUMER_FIELD			_MK_FIELD_CONST(0x1, PDP_S_POINTER_0_CONSUMER_SHIFT)
+#define PDP_S_POINTER_0_CONSUMER_GROUP_0			_MK_ENUM_CONST(0x0)
+#define PDP_S_POINTER_0_CONSUMER_GROUP_1			_MK_ENUM_CONST(0x1)
+
+
+// Register PDP_D_OP_ENABLE_0
+#define PDP_D_OP_ENABLE_0			_MK_ADDR_CONST(0xb008)
+#define PDP_D_OP_ENABLE_0_OP_EN_SHIFT			_MK_SHIFT_CONST(0)
+#define PDP_D_OP_ENABLE_0_OP_EN_FIELD			_MK_FIELD_CONST(0x1, PDP_D_OP_ENABLE_0_OP_EN_SHIFT)
+#define PDP_D_OP_ENABLE_0_OP_EN_DISABLE			_MK_ENUM_CONST(0x0)
+#define PDP_D_OP_ENABLE_0_OP_EN_ENABLE			_MK_ENUM_CONST(0x1)
+
+
+// Register PDP_D_DATA_CUBE_IN_WIDTH_0
+#define PDP_D_DATA_CUBE_IN_WIDTH_0			_MK_ADDR_CONST(0xb00c)
+#define PDP_D_DATA_CUBE_IN_WIDTH_0_CUBE_IN_WIDTH_SHIFT			_MK_SHIFT_CONST(0)
+#define PDP_D_DATA_CUBE_IN_WIDTH_0_CUBE_IN_WIDTH_FIELD			_MK_FIELD_CONST(0x1fff, PDP_D_DATA_CUBE_IN_WIDTH_0_CUBE_IN_WIDTH_SHIFT)
+
+
+// Register PDP_D_DATA_CUBE_IN_HEIGHT_0
+#define PDP_D_DATA_CUBE_IN_HEIGHT_0			_MK_ADDR_CONST(0xb010)
+#define PDP_D_DATA_CUBE_IN_HEIGHT_0_CUBE_IN_HEIGHT_SHIFT			_MK_SHIFT_CONST(0)
+#define PDP_D_DATA_CUBE_IN_HEIGHT_0_CUBE_IN_HEIGHT_FIELD			_MK_FIELD_CONST(0x1fff, PDP_D_DATA_CUBE_IN_HEIGHT_0_CUBE_IN_HEIGHT_SHIFT)
+
+
+// Register PDP_D_DATA_CUBE_IN_CHANNEL_0
+#define PDP_D_DATA_CUBE_IN_CHANNEL_0			_MK_ADDR_CONST(0xb014)
+#define PDP_D_DATA_CUBE_IN_CHANNEL_0_CUBE_IN_CHANNEL_SHIFT			_MK_SHIFT_CONST(0)
+#define PDP_D_DATA_CUBE_IN_CHANNEL_0_CUBE_IN_CHANNEL_FIELD			_MK_FIELD_CONST(0x1fff, PDP_D_DATA_CUBE_IN_CHANNEL_0_CUBE_IN_CHANNEL_SHIFT)
+
+
+// Register PDP_D_DATA_CUBE_OUT_WIDTH_0
+#define PDP_D_DATA_CUBE_OUT_WIDTH_0			_MK_ADDR_CONST(0xb018)
+#define PDP_D_DATA_CUBE_OUT_WIDTH_0_CUBE_OUT_WIDTH_SHIFT			_MK_SHIFT_CONST(0)
+#define PDP_D_DATA_CUBE_OUT_WIDTH_0_CUBE_OUT_WIDTH_FIELD			_MK_FIELD_CONST(0x1fff, PDP_D_DATA_CUBE_OUT_WIDTH_0_CUBE_OUT_WIDTH_SHIFT)
+
+
+// Register PDP_D_DATA_CUBE_OUT_HEIGHT_0
+#define PDP_D_DATA_CUBE_OUT_HEIGHT_0			_MK_ADDR_CONST(0xb01c)
+#define PDP_D_DATA_CUBE_OUT_HEIGHT_0_CUBE_OUT_HEIGHT_SHIFT			_MK_SHIFT_CONST(0)
+#define PDP_D_DATA_CUBE_OUT_HEIGHT_0_CUBE_OUT_HEIGHT_FIELD			_MK_FIELD_CONST(0x1fff, PDP_D_DATA_CUBE_OUT_HEIGHT_0_CUBE_OUT_HEIGHT_SHIFT)
+
+
+// Register PDP_D_DATA_CUBE_OUT_CHANNEL_0
+#define PDP_D_DATA_CUBE_OUT_CHANNEL_0			_MK_ADDR_CONST(0xb020)
+#define PDP_D_DATA_CUBE_OUT_CHANNEL_0_CUBE_OUT_CHANNEL_SHIFT			_MK_SHIFT_CONST(0)
+#define PDP_D_DATA_CUBE_OUT_CHANNEL_0_CUBE_OUT_CHANNEL_FIELD			_MK_FIELD_CONST(0x1fff, PDP_D_DATA_CUBE_OUT_CHANNEL_0_CUBE_OUT_CHANNEL_SHIFT)
+
+
+// Register PDP_D_OPERATION_MODE_CFG_0
+#define PDP_D_OPERATION_MODE_CFG_0			_MK_ADDR_CONST(0xb024)
+#define PDP_D_OPERATION_MODE_CFG_0_POOLING_METHOD_SHIFT			_MK_SHIFT_CONST(0)
+#define PDP_D_OPERATION_MODE_CFG_0_POOLING_METHOD_FIELD			_MK_FIELD_CONST(0x3, PDP_D_OPERATION_MODE_CFG_0_POOLING_METHOD_SHIFT)
+#define PDP_D_OPERATION_MODE_CFG_0_POOLING_METHOD_POOLING_METHOD_AVERAGE			_MK_ENUM_CONST(0x0)
+#define PDP_D_OPERATION_MODE_CFG_0_POOLING_METHOD_POOLING_METHOD_MAX			_MK_ENUM_CONST(0x1)
+#define PDP_D_OPERATION_MODE_CFG_0_POOLING_METHOD_POOLING_METHOD_MIN			_MK_ENUM_CONST(0x2)
+#define PDP_D_OPERATION_MODE_CFG_0_FLYING_MODE_SHIFT			_MK_SHIFT_CONST(4)
+#define PDP_D_OPERATION_MODE_CFG_0_FLYING_MODE_FIELD			_MK_FIELD_CONST(0x1, PDP_D_OPERATION_MODE_CFG_0_FLYING_MODE_SHIFT)
+#define PDP_D_OPERATION_MODE_CFG_0_FLYING_MODE_ON_FLYING			_MK_ENUM_CONST(0x0)
+#define PDP_D_OPERATION_MODE_CFG_0_FLYING_MODE_OFF_FLYING			_MK_ENUM_CONST(0x1)
+#define PDP_D_OPERATION_MODE_CFG_0_SPLIT_NUM_SHIFT			_MK_SHIFT_CONST(8)
+#define PDP_D_OPERATION_MODE_CFG_0_SPLIT_NUM_FIELD			_MK_FIELD_CONST(0xff, PDP_D_OPERATION_MODE_CFG_0_SPLIT_NUM_SHIFT)
+
+
+// Register PDP_D_NAN_FLUSH_TO_ZERO_0
+#define PDP_D_NAN_FLUSH_TO_ZERO_0			_MK_ADDR_CONST(0xb028)
+#define PDP_D_NAN_FLUSH_TO_ZERO_0_NAN_TO_ZERO_SHIFT			_MK_SHIFT_CONST(0)
+#define PDP_D_NAN_FLUSH_TO_ZERO_0_NAN_TO_ZERO_FIELD			_MK_FIELD_CONST(0x1, PDP_D_NAN_FLUSH_TO_ZERO_0_NAN_TO_ZERO_SHIFT)
+#define PDP_D_NAN_FLUSH_TO_ZERO_0_NAN_TO_ZERO_DISABLE			_MK_ENUM_CONST(0x0)
+#define PDP_D_NAN_FLUSH_TO_ZERO_0_NAN_TO_ZERO_ENABLE			_MK_ENUM_CONST(0x1)
+
+
+// Register PDP_D_PARTIAL_WIDTH_IN_0
+#define PDP_D_PARTIAL_WIDTH_IN_0			_MK_ADDR_CONST(0xb02c)
+#define PDP_D_PARTIAL_WIDTH_IN_0_PARTIAL_WIDTH_IN_FIRST_SHIFT			_MK_SHIFT_CONST(0)
+#define PDP_D_PARTIAL_WIDTH_IN_0_PARTIAL_WIDTH_IN_FIRST_FIELD			_MK_FIELD_CONST(0x3ff, PDP_D_PARTIAL_WIDTH_IN_0_PARTIAL_WIDTH_IN_FIRST_SHIFT)
+#define PDP_D_PARTIAL_WIDTH_IN_0_PARTIAL_WIDTH_IN_LAST_SHIFT			_MK_SHIFT_CONST(10)
+#define PDP_D_PARTIAL_WIDTH_IN_0_PARTIAL_WIDTH_IN_LAST_FIELD			_MK_FIELD_CONST(0x3ff, PDP_D_PARTIAL_WIDTH_IN_0_PARTIAL_WIDTH_IN_LAST_SHIFT)
+#define PDP_D_PARTIAL_WIDTH_IN_0_PARTIAL_WIDTH_IN_MID_SHIFT			_MK_SHIFT_CONST(20)
+#define PDP_D_PARTIAL_WIDTH_IN_0_PARTIAL_WIDTH_IN_MID_FIELD			_MK_FIELD_CONST(0x3ff, PDP_D_PARTIAL_WIDTH_IN_0_PARTIAL_WIDTH_IN_MID_SHIFT)
+
+
+// Register PDP_D_PARTIAL_WIDTH_OUT_0
+#define PDP_D_PARTIAL_WIDTH_OUT_0			_MK_ADDR_CONST(0xb030)
+#define PDP_D_PARTIAL_WIDTH_OUT_0_PARTIAL_WIDTH_OUT_FIRST_SHIFT			_MK_SHIFT_CONST(0)
+#define PDP_D_PARTIAL_WIDTH_OUT_0_PARTIAL_WIDTH_OUT_FIRST_FIELD			_MK_FIELD_CONST(0x3ff, PDP_D_PARTIAL_WIDTH_OUT_0_PARTIAL_WIDTH_OUT_FIRST_SHIFT)
+#define PDP_D_PARTIAL_WIDTH_OUT_0_PARTIAL_WIDTH_OUT_LAST_SHIFT			_MK_SHIFT_CONST(10)
+#define PDP_D_PARTIAL_WIDTH_OUT_0_PARTIAL_WIDTH_OUT_LAST_FIELD			_MK_FIELD_CONST(0x3ff, PDP_D_PARTIAL_WIDTH_OUT_0_PARTIAL_WIDTH_OUT_LAST_SHIFT)
+#define PDP_D_PARTIAL_WIDTH_OUT_0_PARTIAL_WIDTH_OUT_MID_SHIFT			_MK_SHIFT_CONST(20)
+#define PDP_D_PARTIAL_WIDTH_OUT_0_PARTIAL_WIDTH_OUT_MID_FIELD			_MK_FIELD_CONST(0x3ff, PDP_D_PARTIAL_WIDTH_OUT_0_PARTIAL_WIDTH_OUT_MID_SHIFT)
+
+
+// Register PDP_D_POOLING_KERNEL_CFG_0
+#define PDP_D_POOLING_KERNEL_CFG_0			_MK_ADDR_CONST(0xb034)
+#define PDP_D_POOLING_KERNEL_CFG_0_KERNEL_WIDTH_SHIFT			_MK_SHIFT_CONST(0)
+#define PDP_D_POOLING_KERNEL_CFG_0_KERNEL_WIDTH_FIELD			_MK_FIELD_CONST(0xf, PDP_D_POOLING_KERNEL_CFG_0_KERNEL_WIDTH_SHIFT)
+#define PDP_D_POOLING_KERNEL_CFG_0_KERNEL_WIDTH_KERNEL_WIDTH_1			_MK_ENUM_CONST(0x0)
+#define PDP_D_POOLING_KERNEL_CFG_0_KERNEL_WIDTH_KERNEL_WIDTH_2			_MK_ENUM_CONST(0x1)
+#define PDP_D_POOLING_KERNEL_CFG_0_KERNEL_WIDTH_KERNEL_WIDTH_3			_MK_ENUM_CONST(0x2)
+#define PDP_D_POOLING_KERNEL_CFG_0_KERNEL_WIDTH_KERNEL_WIDTH_4			_MK_ENUM_CONST(0x3)
+#define PDP_D_POOLING_KERNEL_CFG_0_KERNEL_WIDTH_KERNEL_WIDTH_5			_MK_ENUM_CONST(0x4)
+#define PDP_D_POOLING_KERNEL_CFG_0_KERNEL_WIDTH_KERNEL_WIDTH_6			_MK_ENUM_CONST(0x5)
+#define PDP_D_POOLING_KERNEL_CFG_0_KERNEL_WIDTH_KERNEL_WIDTH_7			_MK_ENUM_CONST(0x6)
+#define PDP_D_POOLING_KERNEL_CFG_0_KERNEL_WIDTH_KERNEL_WIDTH_8			_MK_ENUM_CONST(0x7)
+#define PDP_D_POOLING_KERNEL_CFG_0_KERNEL_HEIGHT_SHIFT			_MK_SHIFT_CONST(8)
+#define PDP_D_POOLING_KERNEL_CFG_0_KERNEL_HEIGHT_FIELD			_MK_FIELD_CONST(0xf, PDP_D_POOLING_KERNEL_CFG_0_KERNEL_HEIGHT_SHIFT)
+#define PDP_D_POOLING_KERNEL_CFG_0_KERNEL_HEIGHT_KERNEL_HEIGHT_1			_MK_ENUM_CONST(0x0)
+#define PDP_D_POOLING_KERNEL_CFG_0_KERNEL_HEIGHT_KERNEL_HEIGHT_2			_MK_ENUM_CONST(0x1)
+#define PDP_D_POOLING_KERNEL_CFG_0_KERNEL_HEIGHT_KERNEL_HEIGHT_3			_MK_ENUM_CONST(0x2)
+#define PDP_D_POOLING_KERNEL_CFG_0_KERNEL_HEIGHT_KERNEL_HEIGHT_4			_MK_ENUM_CONST(0x3)
+#define PDP_D_POOLING_KERNEL_CFG_0_KERNEL_HEIGHT_KERNEL_HEIGHT_5			_MK_ENUM_CONST(0x4)
+#define PDP_D_POOLING_KERNEL_CFG_0_KERNEL_HEIGHT_KERNEL_HEIGHT_6			_MK_ENUM_CONST(0x5)
+#define PDP_D_POOLING_KERNEL_CFG_0_KERNEL_HEIGHT_KERNEL_HEIGHT_7			_MK_ENUM_CONST(0x6)
+#define PDP_D_POOLING_KERNEL_CFG_0_KERNEL_HEIGHT_KERNEL_HEIGHT_8			_MK_ENUM_CONST(0x7)
+#define PDP_D_POOLING_KERNEL_CFG_0_KERNEL_STRIDE_WIDTH_SHIFT			_MK_SHIFT_CONST(16)
+#define PDP_D_POOLING_KERNEL_CFG_0_KERNEL_STRIDE_WIDTH_FIELD			_MK_FIELD_CONST(0xf, PDP_D_POOLING_KERNEL_CFG_0_KERNEL_STRIDE_WIDTH_SHIFT)
+#define PDP_D_POOLING_KERNEL_CFG_0_KERNEL_STRIDE_HEIGHT_SHIFT			_MK_SHIFT_CONST(20)
+#define PDP_D_POOLING_KERNEL_CFG_0_KERNEL_STRIDE_HEIGHT_FIELD			_MK_FIELD_CONST(0xf, PDP_D_POOLING_KERNEL_CFG_0_KERNEL_STRIDE_HEIGHT_SHIFT)
+
+
+// Register PDP_D_RECIP_KERNEL_WIDTH_0
+#define PDP_D_RECIP_KERNEL_WIDTH_0			_MK_ADDR_CONST(0xb038)
+#define PDP_D_RECIP_KERNEL_WIDTH_0_RECIP_KERNEL_WIDTH_SHIFT			_MK_SHIFT_CONST(0)
+#define PDP_D_RECIP_KERNEL_WIDTH_0_RECIP_KERNEL_WIDTH_FIELD			_MK_FIELD_CONST(0x1ffff, PDP_D_RECIP_KERNEL_WIDTH_0_RECIP_KERNEL_WIDTH_SHIFT)
+
+
+// Register PDP_D_RECIP_KERNEL_HEIGHT_0
+#define PDP_D_RECIP_KERNEL_HEIGHT_0			_MK_ADDR_CONST(0xb03c)
+#define PDP_D_RECIP_KERNEL_HEIGHT_0_RECIP_KERNEL_HEIGHT_SHIFT			_MK_SHIFT_CONST(0)
+#define PDP_D_RECIP_KERNEL_HEIGHT_0_RECIP_KERNEL_HEIGHT_FIELD			_MK_FIELD_CONST(0x1ffff, PDP_D_RECIP_KERNEL_HEIGHT_0_RECIP_KERNEL_HEIGHT_SHIFT)
+
+
+// Register PDP_D_POOLING_PADDING_CFG_0
+#define PDP_D_POOLING_PADDING_CFG_0			_MK_ADDR_CONST(0xb040)
+#define PDP_D_POOLING_PADDING_CFG_0_PAD_LEFT_SHIFT			_MK_SHIFT_CONST(0)
+#define PDP_D_POOLING_PADDING_CFG_0_PAD_LEFT_FIELD			_MK_FIELD_CONST(0x7, PDP_D_POOLING_PADDING_CFG_0_PAD_LEFT_SHIFT)
+#define PDP_D_POOLING_PADDING_CFG_0_PAD_TOP_SHIFT			_MK_SHIFT_CONST(4)
+#define PDP_D_POOLING_PADDING_CFG_0_PAD_TOP_FIELD			_MK_FIELD_CONST(0x7, PDP_D_POOLING_PADDING_CFG_0_PAD_TOP_SHIFT)
+#define PDP_D_POOLING_PADDING_CFG_0_PAD_RIGHT_SHIFT			_MK_SHIFT_CONST(8)
+#define PDP_D_POOLING_PADDING_CFG_0_PAD_RIGHT_FIELD			_MK_FIELD_CONST(0x7, PDP_D_POOLING_PADDING_CFG_0_PAD_RIGHT_SHIFT)
+#define PDP_D_POOLING_PADDING_CFG_0_PAD_BOTTOM_SHIFT			_MK_SHIFT_CONST(12)
+#define PDP_D_POOLING_PADDING_CFG_0_PAD_BOTTOM_FIELD			_MK_FIELD_CONST(0x7, PDP_D_POOLING_PADDING_CFG_0_PAD_BOTTOM_SHIFT)
+
+
+// Register PDP_D_POOLING_PADDING_VALUE_1_CFG_0
+#define PDP_D_POOLING_PADDING_VALUE_1_CFG_0			_MK_ADDR_CONST(0xb044)
+#define PDP_D_POOLING_PADDING_VALUE_1_CFG_0_PAD_VALUE_1X_SHIFT			_MK_SHIFT_CONST(0)
+#define PDP_D_POOLING_PADDING_VALUE_1_CFG_0_PAD_VALUE_1X_FIELD			_MK_FIELD_CONST(0x7ffff, PDP_D_POOLING_PADDING_VALUE_1_CFG_0_PAD_VALUE_1X_SHIFT)
+
+
+// Register PDP_D_POOLING_PADDING_VALUE_2_CFG_0
+#define PDP_D_POOLING_PADDING_VALUE_2_CFG_0			_MK_ADDR_CONST(0xb048)
+#define PDP_D_POOLING_PADDING_VALUE_2_CFG_0_PAD_VALUE_2X_SHIFT			_MK_SHIFT_CONST(0)
+#define PDP_D_POOLING_PADDING_VALUE_2_CFG_0_PAD_VALUE_2X_FIELD			_MK_FIELD_CONST(0x7ffff, PDP_D_POOLING_PADDING_VALUE_2_CFG_0_PAD_VALUE_2X_SHIFT)
+
+
+// Register PDP_D_POOLING_PADDING_VALUE_3_CFG_0
+#define PDP_D_POOLING_PADDING_VALUE_3_CFG_0			_MK_ADDR_CONST(0xb04c)
+#define PDP_D_POOLING_PADDING_VALUE_3_CFG_0_PAD_VALUE_3X_SHIFT			_MK_SHIFT_CONST(0)
+#define PDP_D_POOLING_PADDING_VALUE_3_CFG_0_PAD_VALUE_3X_FIELD			_MK_FIELD_CONST(0x7ffff, PDP_D_POOLING_PADDING_VALUE_3_CFG_0_PAD_VALUE_3X_SHIFT)
+
+
+// Register PDP_D_POOLING_PADDING_VALUE_4_CFG_0
+#define PDP_D_POOLING_PADDING_VALUE_4_CFG_0			_MK_ADDR_CONST(0xb050)
+#define PDP_D_POOLING_PADDING_VALUE_4_CFG_0_PAD_VALUE_4X_SHIFT			_MK_SHIFT_CONST(0)
+#define PDP_D_POOLING_PADDING_VALUE_4_CFG_0_PAD_VALUE_4X_FIELD			_MK_FIELD_CONST(0x7ffff, PDP_D_POOLING_PADDING_VALUE_4_CFG_0_PAD_VALUE_4X_SHIFT)
+
+
+// Register PDP_D_POOLING_PADDING_VALUE_5_CFG_0
+#define PDP_D_POOLING_PADDING_VALUE_5_CFG_0			_MK_ADDR_CONST(0xb054)
+#define PDP_D_POOLING_PADDING_VALUE_5_CFG_0_PAD_VALUE_5X_SHIFT			_MK_SHIFT_CONST(0)
+#define PDP_D_POOLING_PADDING_VALUE_5_CFG_0_PAD_VALUE_5X_FIELD			_MK_FIELD_CONST(0x7ffff, PDP_D_POOLING_PADDING_VALUE_5_CFG_0_PAD_VALUE_5X_SHIFT)
+
+
+// Register PDP_D_POOLING_PADDING_VALUE_6_CFG_0
+#define PDP_D_POOLING_PADDING_VALUE_6_CFG_0			_MK_ADDR_CONST(0xb058)
+#define PDP_D_POOLING_PADDING_VALUE_6_CFG_0_PAD_VALUE_6X_SHIFT			_MK_SHIFT_CONST(0)
+#define PDP_D_POOLING_PADDING_VALUE_6_CFG_0_PAD_VALUE_6X_FIELD			_MK_FIELD_CONST(0x7ffff, PDP_D_POOLING_PADDING_VALUE_6_CFG_0_PAD_VALUE_6X_SHIFT)
+
+
+// Register PDP_D_POOLING_PADDING_VALUE_7_CFG_0
+#define PDP_D_POOLING_PADDING_VALUE_7_CFG_0			_MK_ADDR_CONST(0xb05c)
+#define PDP_D_POOLING_PADDING_VALUE_7_CFG_0_PAD_VALUE_7X_SHIFT			_MK_SHIFT_CONST(0)
+#define PDP_D_POOLING_PADDING_VALUE_7_CFG_0_PAD_VALUE_7X_FIELD			_MK_FIELD_CONST(0x7ffff, PDP_D_POOLING_PADDING_VALUE_7_CFG_0_PAD_VALUE_7X_SHIFT)
+
+
+// Register PDP_D_SRC_BASE_ADDR_LOW_0
+#define PDP_D_SRC_BASE_ADDR_LOW_0			_MK_ADDR_CONST(0xb060)
+#define PDP_D_SRC_BASE_ADDR_LOW_0_SRC_BASE_ADDR_LOW_SHIFT			_MK_SHIFT_CONST(0)
+#define PDP_D_SRC_BASE_ADDR_LOW_0_SRC_BASE_ADDR_LOW_FIELD			_MK_FIELD_CONST(0xffffffff, PDP_D_SRC_BASE_ADDR_LOW_0_SRC_BASE_ADDR_LOW_SHIFT)
+
+
+// Register PDP_D_SRC_BASE_ADDR_HIGH_0
+#define PDP_D_SRC_BASE_ADDR_HIGH_0			_MK_ADDR_CONST(0xb064)
+#define PDP_D_SRC_BASE_ADDR_HIGH_0_SRC_BASE_ADDR_HIGH_SHIFT			_MK_SHIFT_CONST(0)
+#define PDP_D_SRC_BASE_ADDR_HIGH_0_SRC_BASE_ADDR_HIGH_FIELD			_MK_FIELD_CONST(0xffffffff, PDP_D_SRC_BASE_ADDR_HIGH_0_SRC_BASE_ADDR_HIGH_SHIFT)
+
+
+// Register PDP_D_SRC_LINE_STRIDE_0
+#define PDP_D_SRC_LINE_STRIDE_0			_MK_ADDR_CONST(0xb068)
+#define PDP_D_SRC_LINE_STRIDE_0_SRC_LINE_STRIDE_SHIFT			_MK_SHIFT_CONST(0)
+#define PDP_D_SRC_LINE_STRIDE_0_SRC_LINE_STRIDE_FIELD			_MK_FIELD_CONST(0xffffffff, PDP_D_SRC_LINE_STRIDE_0_SRC_LINE_STRIDE_SHIFT)
+
+
+// Register PDP_D_SRC_SURFACE_STRIDE_0
+#define PDP_D_SRC_SURFACE_STRIDE_0			_MK_ADDR_CONST(0xb06c)
+#define PDP_D_SRC_SURFACE_STRIDE_0_SRC_SURFACE_STRIDE_SHIFT			_MK_SHIFT_CONST(0)
+#define PDP_D_SRC_SURFACE_STRIDE_0_SRC_SURFACE_STRIDE_FIELD			_MK_FIELD_CONST(0xffffffff, PDP_D_SRC_SURFACE_STRIDE_0_SRC_SURFACE_STRIDE_SHIFT)
+
+
+// Register PDP_D_DST_BASE_ADDR_LOW_0
+#define PDP_D_DST_BASE_ADDR_LOW_0			_MK_ADDR_CONST(0xb070)
+#define PDP_D_DST_BASE_ADDR_LOW_0_DST_BASE_ADDR_LOW_SHIFT			_MK_SHIFT_CONST(0)
+#define PDP_D_DST_BASE_ADDR_LOW_0_DST_BASE_ADDR_LOW_FIELD			_MK_FIELD_CONST(0xffffffff, PDP_D_DST_BASE_ADDR_LOW_0_DST_BASE_ADDR_LOW_SHIFT)
+
+
+// Register PDP_D_DST_BASE_ADDR_HIGH_0
+#define PDP_D_DST_BASE_ADDR_HIGH_0			_MK_ADDR_CONST(0xb074)
+#define PDP_D_DST_BASE_ADDR_HIGH_0_DST_BASE_ADDR_HIGH_SHIFT			_MK_SHIFT_CONST(0)
+#define PDP_D_DST_BASE_ADDR_HIGH_0_DST_BASE_ADDR_HIGH_FIELD			_MK_FIELD_CONST(0xffffffff, PDP_D_DST_BASE_ADDR_HIGH_0_DST_BASE_ADDR_HIGH_SHIFT)
+
+
+// Register PDP_D_DST_LINE_STRIDE_0
+#define PDP_D_DST_LINE_STRIDE_0			_MK_ADDR_CONST(0xb078)
+#define PDP_D_DST_LINE_STRIDE_0_DST_LINE_STRIDE_SHIFT			_MK_SHIFT_CONST(0)
+#define PDP_D_DST_LINE_STRIDE_0_DST_LINE_STRIDE_FIELD			_MK_FIELD_CONST(0xffffffff, PDP_D_DST_LINE_STRIDE_0_DST_LINE_STRIDE_SHIFT)
+
+
+// Register PDP_D_DST_SURFACE_STRIDE_0
+#define PDP_D_DST_SURFACE_STRIDE_0			_MK_ADDR_CONST(0xb07c)
+#define PDP_D_DST_SURFACE_STRIDE_0_DST_SURFACE_STRIDE_SHIFT			_MK_SHIFT_CONST(0)
+#define PDP_D_DST_SURFACE_STRIDE_0_DST_SURFACE_STRIDE_FIELD			_MK_FIELD_CONST(0xffffffff, PDP_D_DST_SURFACE_STRIDE_0_DST_SURFACE_STRIDE_SHIFT)
+
+
+// Register PDP_D_DST_RAM_CFG_0
+#define PDP_D_DST_RAM_CFG_0			_MK_ADDR_CONST(0xb080)
+#define PDP_D_DST_RAM_CFG_0_DST_RAM_TYPE_SHIFT			_MK_SHIFT_CONST(0)
+#define PDP_D_DST_RAM_CFG_0_DST_RAM_TYPE_FIELD			_MK_FIELD_CONST(0x1, PDP_D_DST_RAM_CFG_0_DST_RAM_TYPE_SHIFT)
+#define PDP_D_DST_RAM_CFG_0_DST_RAM_TYPE_CV			_MK_ENUM_CONST(0x0)
+#define PDP_D_DST_RAM_CFG_0_DST_RAM_TYPE_MC			_MK_ENUM_CONST(0x1)
+
+
+// Register PDP_D_DATA_FORMAT_0
+#define PDP_D_DATA_FORMAT_0			_MK_ADDR_CONST(0xb084)
+#define PDP_D_DATA_FORMAT_0_INPUT_DATA_SHIFT			_MK_SHIFT_CONST(0)
+#define PDP_D_DATA_FORMAT_0_INPUT_DATA_FIELD			_MK_FIELD_CONST(0x3, PDP_D_DATA_FORMAT_0_INPUT_DATA_SHIFT)
+#define PDP_D_DATA_FORMAT_0_INPUT_DATA_INT8			_MK_ENUM_CONST(0x0)
+#define PDP_D_DATA_FORMAT_0_INPUT_DATA_INT16			_MK_ENUM_CONST(0x1)
+#define PDP_D_DATA_FORMAT_0_INPUT_DATA_FP16			_MK_ENUM_CONST(0x2)
+
+
+// Register PDP_D_INF_INPUT_NUM_0
+#define PDP_D_INF_INPUT_NUM_0			_MK_ADDR_CONST(0xb088)
+#define PDP_D_INF_INPUT_NUM_0_INF_INPUT_NUM_SHIFT			_MK_SHIFT_CONST(0)
+#define PDP_D_INF_INPUT_NUM_0_INF_INPUT_NUM_FIELD			_MK_FIELD_CONST(0xffffffff, PDP_D_INF_INPUT_NUM_0_INF_INPUT_NUM_SHIFT)
+
+
+// Register PDP_D_NAN_INPUT_NUM_0
+#define PDP_D_NAN_INPUT_NUM_0			_MK_ADDR_CONST(0xb08c)
+#define PDP_D_NAN_INPUT_NUM_0_NAN_INPUT_NUM_SHIFT			_MK_SHIFT_CONST(0)
+#define PDP_D_NAN_INPUT_NUM_0_NAN_INPUT_NUM_FIELD			_MK_FIELD_CONST(0xffffffff, PDP_D_NAN_INPUT_NUM_0_NAN_INPUT_NUM_SHIFT)
+
+
+// Register PDP_D_NAN_OUTPUT_NUM_0
+#define PDP_D_NAN_OUTPUT_NUM_0			_MK_ADDR_CONST(0xb090)
+#define PDP_D_NAN_OUTPUT_NUM_0_NAN_OUTPUT_NUM_SHIFT			_MK_SHIFT_CONST(0)
+#define PDP_D_NAN_OUTPUT_NUM_0_NAN_OUTPUT_NUM_FIELD			_MK_FIELD_CONST(0xffffffff, PDP_D_NAN_OUTPUT_NUM_0_NAN_OUTPUT_NUM_SHIFT)
+
+
+// Register PDP_D_PERF_ENABLE_0
+#define PDP_D_PERF_ENABLE_0			_MK_ADDR_CONST(0xb094)
+#define PDP_D_PERF_ENABLE_0_DMA_EN_SHIFT			_MK_SHIFT_CONST(0)
+#define PDP_D_PERF_ENABLE_0_DMA_EN_FIELD			_MK_FIELD_CONST(0x1, PDP_D_PERF_ENABLE_0_DMA_EN_SHIFT)
+#define PDP_D_PERF_ENABLE_0_DMA_EN_DISABLE			_MK_ENUM_CONST(0x0)
+#define PDP_D_PERF_ENABLE_0_DMA_EN_ENABLE			_MK_ENUM_CONST(0x1)
+
+
+// Register PDP_D_PERF_WRITE_STALL_0
+#define PDP_D_PERF_WRITE_STALL_0			_MK_ADDR_CONST(0xb098)
+#define PDP_D_PERF_WRITE_STALL_0_PERF_WRITE_STALL_SHIFT			_MK_SHIFT_CONST(0)
+#define PDP_D_PERF_WRITE_STALL_0_PERF_WRITE_STALL_FIELD			_MK_FIELD_CONST(0xffffffff, PDP_D_PERF_WRITE_STALL_0_PERF_WRITE_STALL_SHIFT)
+
+
+// Register PDP_D_CYA_0
+#define PDP_D_CYA_0			_MK_ADDR_CONST(0xb09c)
+#define PDP_D_CYA_0_CYA_SHIFT			_MK_SHIFT_CONST(0)
+#define PDP_D_CYA_0_CYA_FIELD			_MK_FIELD_CONST(0xffffffff, PDP_D_CYA_0_CYA_SHIFT)
+
+
+
+// To satisfy various compilers and platforms,
+// we let users control the types and syntax of certain constants, using macros.
+#ifndef _MK_SHIFT_CONST
+  #define _MK_SHIFT_CONST(_constant_) _constant_
+#endif
+#ifndef _MK_MASK_CONST
+  #define _MK_MASK_CONST(_constant_) _constant_
+#endif
+#ifndef _MK_ENUM_CONST
+  #define _MK_ENUM_CONST(_constant_) (_constant_ ## UL)
+#endif
+#ifndef _MK_ADDR_CONST
+  #define _MK_ADDR_CONST(_constant_) _constant_
+#endif
+#ifndef _MK_FIELD_CONST
+  #define _MK_FIELD_CONST(_mask_, _shift_) (_MK_MASK_CONST(_mask_) << _MK_SHIFT_CONST(_shift_))
+#endif
+
+
+// Register CDP_RDMA_S_STATUS_0
+#define CDP_RDMA_S_STATUS_0			_MK_ADDR_CONST(0xc000)
+#define CDP_RDMA_S_STATUS_0_STATUS_0_SHIFT			_MK_SHIFT_CONST(0)
+#define CDP_RDMA_S_STATUS_0_STATUS_0_FIELD			_MK_FIELD_CONST(0x3, CDP_RDMA_S_STATUS_0_STATUS_0_SHIFT)
+#define CDP_RDMA_S_STATUS_0_STATUS_0_IDLE			_MK_ENUM_CONST(0x0)
+#define CDP_RDMA_S_STATUS_0_STATUS_0_RUNNING			_MK_ENUM_CONST(0x1)
+#define CDP_RDMA_S_STATUS_0_STATUS_0_PENDING			_MK_ENUM_CONST(0x2)
+#define CDP_RDMA_S_STATUS_0_STATUS_1_SHIFT			_MK_SHIFT_CONST(16)
+#define CDP_RDMA_S_STATUS_0_STATUS_1_FIELD			_MK_FIELD_CONST(0x3, CDP_RDMA_S_STATUS_0_STATUS_1_SHIFT)
+#define CDP_RDMA_S_STATUS_0_STATUS_1_IDLE			_MK_ENUM_CONST(0x0)
+#define CDP_RDMA_S_STATUS_0_STATUS_1_RUNNING			_MK_ENUM_CONST(0x1)
+#define CDP_RDMA_S_STATUS_0_STATUS_1_PENDING			_MK_ENUM_CONST(0x2)
+
+
+// Register CDP_RDMA_S_POINTER_0
+#define CDP_RDMA_S_POINTER_0			_MK_ADDR_CONST(0xc004)
+#define CDP_RDMA_S_POINTER_0_PRODUCER_SHIFT			_MK_SHIFT_CONST(0)
+#define CDP_RDMA_S_POINTER_0_PRODUCER_FIELD			_MK_FIELD_CONST(0x1, CDP_RDMA_S_POINTER_0_PRODUCER_SHIFT)
+#define CDP_RDMA_S_POINTER_0_PRODUCER_GROUP_0			_MK_ENUM_CONST(0x0)
+#define CDP_RDMA_S_POINTER_0_PRODUCER_GROUP_1			_MK_ENUM_CONST(0x1)
+#define CDP_RDMA_S_POINTER_0_CONSUMER_SHIFT			_MK_SHIFT_CONST(16)
+#define CDP_RDMA_S_POINTER_0_CONSUMER_FIELD			_MK_FIELD_CONST(0x1, CDP_RDMA_S_POINTER_0_CONSUMER_SHIFT)
+#define CDP_RDMA_S_POINTER_0_CONSUMER_GROUP_0			_MK_ENUM_CONST(0x0)
+#define CDP_RDMA_S_POINTER_0_CONSUMER_GROUP_1			_MK_ENUM_CONST(0x1)
+
+
+// Register CDP_RDMA_D_OP_ENABLE_0
+#define CDP_RDMA_D_OP_ENABLE_0			_MK_ADDR_CONST(0xc008)
+#define CDP_RDMA_D_OP_ENABLE_0_OP_EN_SHIFT			_MK_SHIFT_CONST(0)
+#define CDP_RDMA_D_OP_ENABLE_0_OP_EN_FIELD			_MK_FIELD_CONST(0x1, CDP_RDMA_D_OP_ENABLE_0_OP_EN_SHIFT)
+#define CDP_RDMA_D_OP_ENABLE_0_OP_EN_DISABLE			_MK_ENUM_CONST(0x0)
+#define CDP_RDMA_D_OP_ENABLE_0_OP_EN_ENABLE			_MK_ENUM_CONST(0x1)
+
+
+// Register CDP_RDMA_D_DATA_CUBE_WIDTH_0
+#define CDP_RDMA_D_DATA_CUBE_WIDTH_0			_MK_ADDR_CONST(0xc00c)
+#define CDP_RDMA_D_DATA_CUBE_WIDTH_0_WIDTH_SHIFT			_MK_SHIFT_CONST(0)
+#define CDP_RDMA_D_DATA_CUBE_WIDTH_0_WIDTH_FIELD			_MK_FIELD_CONST(0x1fff, CDP_RDMA_D_DATA_CUBE_WIDTH_0_WIDTH_SHIFT)
+
+
+// Register CDP_RDMA_D_DATA_CUBE_HEIGHT_0
+#define CDP_RDMA_D_DATA_CUBE_HEIGHT_0			_MK_ADDR_CONST(0xc010)
+#define CDP_RDMA_D_DATA_CUBE_HEIGHT_0_HEIGHT_SHIFT			_MK_SHIFT_CONST(0)
+#define CDP_RDMA_D_DATA_CUBE_HEIGHT_0_HEIGHT_FIELD			_MK_FIELD_CONST(0x1fff, CDP_RDMA_D_DATA_CUBE_HEIGHT_0_HEIGHT_SHIFT)
+
+
+// Register CDP_RDMA_D_DATA_CUBE_CHANNEL_0
+#define CDP_RDMA_D_DATA_CUBE_CHANNEL_0			_MK_ADDR_CONST(0xc014)
+#define CDP_RDMA_D_DATA_CUBE_CHANNEL_0_CHANNEL_SHIFT			_MK_SHIFT_CONST(0)
+#define CDP_RDMA_D_DATA_CUBE_CHANNEL_0_CHANNEL_FIELD			_MK_FIELD_CONST(0x1fff, CDP_RDMA_D_DATA_CUBE_CHANNEL_0_CHANNEL_SHIFT)
+
+
+// Register CDP_RDMA_D_SRC_BASE_ADDR_LOW_0
+#define CDP_RDMA_D_SRC_BASE_ADDR_LOW_0			_MK_ADDR_CONST(0xc018)
+#define CDP_RDMA_D_SRC_BASE_ADDR_LOW_0_SRC_BASE_ADDR_LOW_SHIFT			_MK_SHIFT_CONST(0)
+#define CDP_RDMA_D_SRC_BASE_ADDR_LOW_0_SRC_BASE_ADDR_LOW_FIELD			_MK_FIELD_CONST(0xffffffff, CDP_RDMA_D_SRC_BASE_ADDR_LOW_0_SRC_BASE_ADDR_LOW_SHIFT)
+
+
+// Register CDP_RDMA_D_SRC_BASE_ADDR_HIGH_0
+#define CDP_RDMA_D_SRC_BASE_ADDR_HIGH_0			_MK_ADDR_CONST(0xc01c)
+#define CDP_RDMA_D_SRC_BASE_ADDR_HIGH_0_SRC_BASE_ADDR_HIGH_SHIFT			_MK_SHIFT_CONST(0)
+#define CDP_RDMA_D_SRC_BASE_ADDR_HIGH_0_SRC_BASE_ADDR_HIGH_FIELD			_MK_FIELD_CONST(0xffffffff, CDP_RDMA_D_SRC_BASE_ADDR_HIGH_0_SRC_BASE_ADDR_HIGH_SHIFT)
+
+
+// Register CDP_RDMA_D_SRC_LINE_STRIDE_0
+#define CDP_RDMA_D_SRC_LINE_STRIDE_0			_MK_ADDR_CONST(0xc020)
+#define CDP_RDMA_D_SRC_LINE_STRIDE_0_SRC_LINE_STRIDE_SHIFT			_MK_SHIFT_CONST(0)
+#define CDP_RDMA_D_SRC_LINE_STRIDE_0_SRC_LINE_STRIDE_FIELD			_MK_FIELD_CONST(0xffffffff, CDP_RDMA_D_SRC_LINE_STRIDE_0_SRC_LINE_STRIDE_SHIFT)
+
+
+// Register CDP_RDMA_D_SRC_SURFACE_STRIDE_0
+#define CDP_RDMA_D_SRC_SURFACE_STRIDE_0			_MK_ADDR_CONST(0xc024)
+#define CDP_RDMA_D_SRC_SURFACE_STRIDE_0_SRC_SURFACE_STRIDE_SHIFT			_MK_SHIFT_CONST(0)
+#define CDP_RDMA_D_SRC_SURFACE_STRIDE_0_SRC_SURFACE_STRIDE_FIELD			_MK_FIELD_CONST(0xffffffff, CDP_RDMA_D_SRC_SURFACE_STRIDE_0_SRC_SURFACE_STRIDE_SHIFT)
+
+
+// Register CDP_RDMA_D_SRC_DMA_CFG_0
+#define CDP_RDMA_D_SRC_DMA_CFG_0			_MK_ADDR_CONST(0xc028)
+#define CDP_RDMA_D_SRC_DMA_CFG_0_SRC_RAM_TYPE_SHIFT			_MK_SHIFT_CONST(0)
+#define CDP_RDMA_D_SRC_DMA_CFG_0_SRC_RAM_TYPE_FIELD			_MK_FIELD_CONST(0x1, CDP_RDMA_D_SRC_DMA_CFG_0_SRC_RAM_TYPE_SHIFT)
+#define CDP_RDMA_D_SRC_DMA_CFG_0_SRC_RAM_TYPE_CV			_MK_ENUM_CONST(0x0)
+#define CDP_RDMA_D_SRC_DMA_CFG_0_SRC_RAM_TYPE_MC			_MK_ENUM_CONST(0x1)
+
+
+// Register CDP_RDMA_D_SRC_COMPRESSION_EN_0
+#define CDP_RDMA_D_SRC_COMPRESSION_EN_0			_MK_ADDR_CONST(0xc02c)
+#define CDP_RDMA_D_SRC_COMPRESSION_EN_0_SRC_COMPRESSION_EN_SHIFT			_MK_SHIFT_CONST(0)
+#define CDP_RDMA_D_SRC_COMPRESSION_EN_0_SRC_COMPRESSION_EN_FIELD			_MK_FIELD_CONST(0x1, CDP_RDMA_D_SRC_COMPRESSION_EN_0_SRC_COMPRESSION_EN_SHIFT)
+#define CDP_RDMA_D_SRC_COMPRESSION_EN_0_SRC_COMPRESSION_EN_DISABLE			_MK_ENUM_CONST(0x0)
+#define CDP_RDMA_D_SRC_COMPRESSION_EN_0_SRC_COMPRESSION_EN_ENABLE			_MK_ENUM_CONST(0x1)
+
+
+// Register CDP_RDMA_D_OPERATION_MODE_0
+#define CDP_RDMA_D_OPERATION_MODE_0			_MK_ADDR_CONST(0xc030)
+#define CDP_RDMA_D_OPERATION_MODE_0_OPERATION_MODE_SHIFT			_MK_SHIFT_CONST(0)
+#define CDP_RDMA_D_OPERATION_MODE_0_OPERATION_MODE_FIELD			_MK_FIELD_CONST(0x3, CDP_RDMA_D_OPERATION_MODE_0_OPERATION_MODE_SHIFT)
+#define CDP_RDMA_D_OPERATION_MODE_0_OPERATION_MODE_READPHILE			_MK_ENUM_CONST(0x0)
+#define CDP_RDMA_D_OPERATION_MODE_0_OPERATION_MODE_WRITEPHILE			_MK_ENUM_CONST(0x1)
+#define CDP_RDMA_D_OPERATION_MODE_0_OPERATION_MODE_ORDINARY			_MK_ENUM_CONST(0x2)
+
+
+// Register CDP_RDMA_D_DATA_FORMAT_0
+#define CDP_RDMA_D_DATA_FORMAT_0			_MK_ADDR_CONST(0xc034)
+#define CDP_RDMA_D_DATA_FORMAT_0_INPUT_DATA_SHIFT			_MK_SHIFT_CONST(0)
+#define CDP_RDMA_D_DATA_FORMAT_0_INPUT_DATA_FIELD			_MK_FIELD_CONST(0x3, CDP_RDMA_D_DATA_FORMAT_0_INPUT_DATA_SHIFT)
+#define CDP_RDMA_D_DATA_FORMAT_0_INPUT_DATA_INT8			_MK_ENUM_CONST(0x0)
+#define CDP_RDMA_D_DATA_FORMAT_0_INPUT_DATA_INT16			_MK_ENUM_CONST(0x1)
+#define CDP_RDMA_D_DATA_FORMAT_0_INPUT_DATA_FP16			_MK_ENUM_CONST(0x2)
+
+
+// Register CDP_RDMA_D_PERF_ENABLE_0
+#define CDP_RDMA_D_PERF_ENABLE_0			_MK_ADDR_CONST(0xc038)
+#define CDP_RDMA_D_PERF_ENABLE_0_DMA_EN_SHIFT			_MK_SHIFT_CONST(0)
+#define CDP_RDMA_D_PERF_ENABLE_0_DMA_EN_FIELD			_MK_FIELD_CONST(0x1, CDP_RDMA_D_PERF_ENABLE_0_DMA_EN_SHIFT)
+#define CDP_RDMA_D_PERF_ENABLE_0_DMA_EN_DISABLE			_MK_ENUM_CONST(0x0)
+#define CDP_RDMA_D_PERF_ENABLE_0_DMA_EN_ENABLE			_MK_ENUM_CONST(0x1)
+
+
+// Register CDP_RDMA_D_PERF_READ_STALL_0
+#define CDP_RDMA_D_PERF_READ_STALL_0			_MK_ADDR_CONST(0xc03c)
+#define CDP_RDMA_D_PERF_READ_STALL_0_PERF_READ_STALL_SHIFT			_MK_SHIFT_CONST(0)
+#define CDP_RDMA_D_PERF_READ_STALL_0_PERF_READ_STALL_FIELD			_MK_FIELD_CONST(0xffffffff, CDP_RDMA_D_PERF_READ_STALL_0_PERF_READ_STALL_SHIFT)
+
+
+// Register CDP_RDMA_D_CYA_0
+#define CDP_RDMA_D_CYA_0			_MK_ADDR_CONST(0xc040)
+#define CDP_RDMA_D_CYA_0_CYA_SHIFT			_MK_SHIFT_CONST(0)
+#define CDP_RDMA_D_CYA_0_CYA_FIELD			_MK_FIELD_CONST(0xffffffff, CDP_RDMA_D_CYA_0_CYA_SHIFT)
+
+
+
+// To satisfy various compilers and platforms,
+// we let users control the types and syntax of certain constants, using macros.
+#ifndef _MK_SHIFT_CONST
+  #define _MK_SHIFT_CONST(_constant_) _constant_
+#endif
+#ifndef _MK_MASK_CONST
+  #define _MK_MASK_CONST(_constant_) _constant_
+#endif
+#ifndef _MK_ENUM_CONST
+  #define _MK_ENUM_CONST(_constant_) (_constant_ ## UL)
+#endif
+#ifndef _MK_ADDR_CONST
+  #define _MK_ADDR_CONST(_constant_) _constant_
+#endif
+#ifndef _MK_FIELD_CONST
+  #define _MK_FIELD_CONST(_mask_, _shift_) (_MK_MASK_CONST(_mask_) << _MK_SHIFT_CONST(_shift_))
+#endif
+
+
+// Register CDP_S_STATUS_0
+#define CDP_S_STATUS_0			_MK_ADDR_CONST(0xd000)
+#define CDP_S_STATUS_0_STATUS_0_SHIFT			_MK_SHIFT_CONST(0)
+#define CDP_S_STATUS_0_STATUS_0_FIELD			_MK_FIELD_CONST(0x3, CDP_S_STATUS_0_STATUS_0_SHIFT)
+#define CDP_S_STATUS_0_STATUS_0_IDLE			_MK_ENUM_CONST(0x0)
+#define CDP_S_STATUS_0_STATUS_0_RUNNING			_MK_ENUM_CONST(0x1)
+#define CDP_S_STATUS_0_STATUS_0_PENDING			_MK_ENUM_CONST(0x2)
+#define CDP_S_STATUS_0_STATUS_1_SHIFT			_MK_SHIFT_CONST(16)
+#define CDP_S_STATUS_0_STATUS_1_FIELD			_MK_FIELD_CONST(0x3, CDP_S_STATUS_0_STATUS_1_SHIFT)
+#define CDP_S_STATUS_0_STATUS_1_IDLE			_MK_ENUM_CONST(0x0)
+#define CDP_S_STATUS_0_STATUS_1_RUNNING			_MK_ENUM_CONST(0x1)
+#define CDP_S_STATUS_0_STATUS_1_PENDING			_MK_ENUM_CONST(0x2)
+
+
+// Register CDP_S_POINTER_0
+#define CDP_S_POINTER_0			_MK_ADDR_CONST(0xd004)
+#define CDP_S_POINTER_0_PRODUCER_SHIFT			_MK_SHIFT_CONST(0)
+#define CDP_S_POINTER_0_PRODUCER_FIELD			_MK_FIELD_CONST(0x1, CDP_S_POINTER_0_PRODUCER_SHIFT)
+#define CDP_S_POINTER_0_PRODUCER_GROUP_0			_MK_ENUM_CONST(0x0)
+#define CDP_S_POINTER_0_PRODUCER_GROUP_1			_MK_ENUM_CONST(0x1)
+#define CDP_S_POINTER_0_CONSUMER_SHIFT			_MK_SHIFT_CONST(16)
+#define CDP_S_POINTER_0_CONSUMER_FIELD			_MK_FIELD_CONST(0x1, CDP_S_POINTER_0_CONSUMER_SHIFT)
+#define CDP_S_POINTER_0_CONSUMER_GROUP_0			_MK_ENUM_CONST(0x0)
+#define CDP_S_POINTER_0_CONSUMER_GROUP_1			_MK_ENUM_CONST(0x1)
+
+
+// Register CDP_S_LUT_ACCESS_CFG_0
+#define CDP_S_LUT_ACCESS_CFG_0			_MK_ADDR_CONST(0xd008)
+#define CDP_S_LUT_ACCESS_CFG_0_LUT_ADDR_SHIFT			_MK_SHIFT_CONST(0)
+#define CDP_S_LUT_ACCESS_CFG_0_LUT_ADDR_FIELD			_MK_FIELD_CONST(0x3ff, CDP_S_LUT_ACCESS_CFG_0_LUT_ADDR_SHIFT)
+#define CDP_S_LUT_ACCESS_CFG_0_LUT_TABLE_ID_SHIFT			_MK_SHIFT_CONST(16)
+#define CDP_S_LUT_ACCESS_CFG_0_LUT_TABLE_ID_FIELD			_MK_FIELD_CONST(0x1, CDP_S_LUT_ACCESS_CFG_0_LUT_TABLE_ID_SHIFT)
+#define CDP_S_LUT_ACCESS_CFG_0_LUT_TABLE_ID_LE			_MK_ENUM_CONST(0x0)
+#define CDP_S_LUT_ACCESS_CFG_0_LUT_TABLE_ID_LO			_MK_ENUM_CONST(0x1)
+#define CDP_S_LUT_ACCESS_CFG_0_LUT_ACCESS_TYPE_SHIFT			_MK_SHIFT_CONST(17)
+#define CDP_S_LUT_ACCESS_CFG_0_LUT_ACCESS_TYPE_FIELD			_MK_FIELD_CONST(0x1, CDP_S_LUT_ACCESS_CFG_0_LUT_ACCESS_TYPE_SHIFT)
+#define CDP_S_LUT_ACCESS_CFG_0_LUT_ACCESS_TYPE_READ			_MK_ENUM_CONST(0x0)
+#define CDP_S_LUT_ACCESS_CFG_0_LUT_ACCESS_TYPE_WRITE			_MK_ENUM_CONST(0x1)
+
+
+// Register CDP_S_LUT_ACCESS_DATA_0
+#define CDP_S_LUT_ACCESS_DATA_0			_MK_ADDR_CONST(0xd00c)
+#define CDP_S_LUT_ACCESS_DATA_0_LUT_DATA_SHIFT			_MK_SHIFT_CONST(0)
+#define CDP_S_LUT_ACCESS_DATA_0_LUT_DATA_FIELD			_MK_FIELD_CONST(0xffff, CDP_S_LUT_ACCESS_DATA_0_LUT_DATA_SHIFT)
+
+
+// Register CDP_S_LUT_CFG_0
+#define CDP_S_LUT_CFG_0			_MK_ADDR_CONST(0xd010)
+#define CDP_S_LUT_CFG_0_LUT_LE_FUNCTION_SHIFT			_MK_SHIFT_CONST(0)
+#define CDP_S_LUT_CFG_0_LUT_LE_FUNCTION_FIELD			_MK_FIELD_CONST(0x1, CDP_S_LUT_CFG_0_LUT_LE_FUNCTION_SHIFT)
+#define CDP_S_LUT_CFG_0_LUT_LE_FUNCTION_EXPONENT			_MK_ENUM_CONST(0x0)
+#define CDP_S_LUT_CFG_0_LUT_LE_FUNCTION_LINEAR			_MK_ENUM_CONST(0x1)
+#define CDP_S_LUT_CFG_0_LUT_UFLOW_PRIORITY_SHIFT			_MK_SHIFT_CONST(4)
+#define CDP_S_LUT_CFG_0_LUT_UFLOW_PRIORITY_FIELD			_MK_FIELD_CONST(0x1, CDP_S_LUT_CFG_0_LUT_UFLOW_PRIORITY_SHIFT)
+#define CDP_S_LUT_CFG_0_LUT_UFLOW_PRIORITY_LE			_MK_ENUM_CONST(0x0)
+#define CDP_S_LUT_CFG_0_LUT_UFLOW_PRIORITY_LO			_MK_ENUM_CONST(0x1)
+#define CDP_S_LUT_CFG_0_LUT_OFLOW_PRIORITY_SHIFT			_MK_SHIFT_CONST(5)
+#define CDP_S_LUT_CFG_0_LUT_OFLOW_PRIORITY_FIELD			_MK_FIELD_CONST(0x1, CDP_S_LUT_CFG_0_LUT_OFLOW_PRIORITY_SHIFT)
+#define CDP_S_LUT_CFG_0_LUT_OFLOW_PRIORITY_LE			_MK_ENUM_CONST(0x0)
+#define CDP_S_LUT_CFG_0_LUT_OFLOW_PRIORITY_LO			_MK_ENUM_CONST(0x1)
+#define CDP_S_LUT_CFG_0_LUT_HYBRID_PRIORITY_SHIFT			_MK_SHIFT_CONST(6)
+#define CDP_S_LUT_CFG_0_LUT_HYBRID_PRIORITY_FIELD			_MK_FIELD_CONST(0x1, CDP_S_LUT_CFG_0_LUT_HYBRID_PRIORITY_SHIFT)
+#define CDP_S_LUT_CFG_0_LUT_HYBRID_PRIORITY_LE			_MK_ENUM_CONST(0x0)
+#define CDP_S_LUT_CFG_0_LUT_HYBRID_PRIORITY_LO			_MK_ENUM_CONST(0x1)
+
+
+// Register CDP_S_LUT_INFO_0
+#define CDP_S_LUT_INFO_0			_MK_ADDR_CONST(0xd014)
+#define CDP_S_LUT_INFO_0_LUT_LE_INDEX_OFFSET_SHIFT			_MK_SHIFT_CONST(0)
+#define CDP_S_LUT_INFO_0_LUT_LE_INDEX_OFFSET_FIELD			_MK_FIELD_CONST(0xff, CDP_S_LUT_INFO_0_LUT_LE_INDEX_OFFSET_SHIFT)
+#define CDP_S_LUT_INFO_0_LUT_LE_INDEX_SELECT_SHIFT			_MK_SHIFT_CONST(8)
+#define CDP_S_LUT_INFO_0_LUT_LE_INDEX_SELECT_FIELD			_MK_FIELD_CONST(0xff, CDP_S_LUT_INFO_0_LUT_LE_INDEX_SELECT_SHIFT)
+#define CDP_S_LUT_INFO_0_LUT_LO_INDEX_SELECT_SHIFT			_MK_SHIFT_CONST(16)
+#define CDP_S_LUT_INFO_0_LUT_LO_INDEX_SELECT_FIELD			_MK_FIELD_CONST(0xff, CDP_S_LUT_INFO_0_LUT_LO_INDEX_SELECT_SHIFT)
+
+
+// Register CDP_S_LUT_LE_START_LOW_0
+#define CDP_S_LUT_LE_START_LOW_0			_MK_ADDR_CONST(0xd018)
+#define CDP_S_LUT_LE_START_LOW_0_LUT_LE_START_LOW_SHIFT			_MK_SHIFT_CONST(0)
+#define CDP_S_LUT_LE_START_LOW_0_LUT_LE_START_LOW_FIELD			_MK_FIELD_CONST(0xffffffff, CDP_S_LUT_LE_START_LOW_0_LUT_LE_START_LOW_SHIFT)
+
+
+// Register CDP_S_LUT_LE_START_HIGH_0
+#define CDP_S_LUT_LE_START_HIGH_0			_MK_ADDR_CONST(0xd01c)
+#define CDP_S_LUT_LE_START_HIGH_0_LUT_LE_START_HIGH_SHIFT			_MK_SHIFT_CONST(0)
+#define CDP_S_LUT_LE_START_HIGH_0_LUT_LE_START_HIGH_FIELD			_MK_FIELD_CONST(0x3f, CDP_S_LUT_LE_START_HIGH_0_LUT_LE_START_HIGH_SHIFT)
+
+
+// Register CDP_S_LUT_LE_END_LOW_0
+#define CDP_S_LUT_LE_END_LOW_0			_MK_ADDR_CONST(0xd020)
+#define CDP_S_LUT_LE_END_LOW_0_LUT_LE_END_LOW_SHIFT			_MK_SHIFT_CONST(0)
+#define CDP_S_LUT_LE_END_LOW_0_LUT_LE_END_LOW_FIELD			_MK_FIELD_CONST(0xffffffff, CDP_S_LUT_LE_END_LOW_0_LUT_LE_END_LOW_SHIFT)
+
+
+// Register CDP_S_LUT_LE_END_HIGH_0
+#define CDP_S_LUT_LE_END_HIGH_0			_MK_ADDR_CONST(0xd024)
+#define CDP_S_LUT_LE_END_HIGH_0_LUT_LE_END_HIGH_SHIFT			_MK_SHIFT_CONST(0)
+#define CDP_S_LUT_LE_END_HIGH_0_LUT_LE_END_HIGH_FIELD			_MK_FIELD_CONST(0x3f, CDP_S_LUT_LE_END_HIGH_0_LUT_LE_END_HIGH_SHIFT)
+
+
+// Register CDP_S_LUT_LO_START_LOW_0
+#define CDP_S_LUT_LO_START_LOW_0			_MK_ADDR_CONST(0xd028)
+#define CDP_S_LUT_LO_START_LOW_0_LUT_LO_START_LOW_SHIFT			_MK_SHIFT_CONST(0)
+#define CDP_S_LUT_LO_START_LOW_0_LUT_LO_START_LOW_FIELD			_MK_FIELD_CONST(0xffffffff, CDP_S_LUT_LO_START_LOW_0_LUT_LO_START_LOW_SHIFT)
+
+
+// Register CDP_S_LUT_LO_START_HIGH_0
+#define CDP_S_LUT_LO_START_HIGH_0			_MK_ADDR_CONST(0xd02c)
+#define CDP_S_LUT_LO_START_HIGH_0_LUT_LO_START_HIGH_SHIFT			_MK_SHIFT_CONST(0)
+#define CDP_S_LUT_LO_START_HIGH_0_LUT_LO_START_HIGH_FIELD			_MK_FIELD_CONST(0x3f, CDP_S_LUT_LO_START_HIGH_0_LUT_LO_START_HIGH_SHIFT)
+
+
+// Register CDP_S_LUT_LO_END_LOW_0
+#define CDP_S_LUT_LO_END_LOW_0			_MK_ADDR_CONST(0xd030)
+#define CDP_S_LUT_LO_END_LOW_0_LUT_LO_END_LOW_SHIFT			_MK_SHIFT_CONST(0)
+#define CDP_S_LUT_LO_END_LOW_0_LUT_LO_END_LOW_FIELD			_MK_FIELD_CONST(0xffffffff, CDP_S_LUT_LO_END_LOW_0_LUT_LO_END_LOW_SHIFT)
+
+
+// Register CDP_S_LUT_LO_END_HIGH_0
+#define CDP_S_LUT_LO_END_HIGH_0			_MK_ADDR_CONST(0xd034)
+#define CDP_S_LUT_LO_END_HIGH_0_LUT_LO_END_HIGH_SHIFT			_MK_SHIFT_CONST(0)
+#define CDP_S_LUT_LO_END_HIGH_0_LUT_LO_END_HIGH_FIELD			_MK_FIELD_CONST(0x3f, CDP_S_LUT_LO_END_HIGH_0_LUT_LO_END_HIGH_SHIFT)
+
+
+// Register CDP_S_LUT_LE_SLOPE_SCALE_0
+#define CDP_S_LUT_LE_SLOPE_SCALE_0			_MK_ADDR_CONST(0xd038)
+#define CDP_S_LUT_LE_SLOPE_SCALE_0_LUT_LE_SLOPE_UFLOW_SCALE_SHIFT			_MK_SHIFT_CONST(0)
+#define CDP_S_LUT_LE_SLOPE_SCALE_0_LUT_LE_SLOPE_UFLOW_SCALE_FIELD			_MK_FIELD_CONST(0xffff, CDP_S_LUT_LE_SLOPE_SCALE_0_LUT_LE_SLOPE_UFLOW_SCALE_SHIFT)
+#define CDP_S_LUT_LE_SLOPE_SCALE_0_LUT_LE_SLOPE_OFLOW_SCALE_SHIFT			_MK_SHIFT_CONST(16)
+#define CDP_S_LUT_LE_SLOPE_SCALE_0_LUT_LE_SLOPE_OFLOW_SCALE_FIELD			_MK_FIELD_CONST(0xffff, CDP_S_LUT_LE_SLOPE_SCALE_0_LUT_LE_SLOPE_OFLOW_SCALE_SHIFT)
+
+
+// Register CDP_S_LUT_LE_SLOPE_SHIFT_0
+#define CDP_S_LUT_LE_SLOPE_SHIFT_0			_MK_ADDR_CONST(0xd03c)
+#define CDP_S_LUT_LE_SLOPE_SHIFT_0_LUT_LE_SLOPE_UFLOW_SHIFT_SHIFT			_MK_SHIFT_CONST(0)
+#define CDP_S_LUT_LE_SLOPE_SHIFT_0_LUT_LE_SLOPE_UFLOW_SHIFT_FIELD			_MK_FIELD_CONST(0x1f, CDP_S_LUT_LE_SLOPE_SHIFT_0_LUT_LE_SLOPE_UFLOW_SHIFT_SHIFT)
+#define CDP_S_LUT_LE_SLOPE_SHIFT_0_LUT_LE_SLOPE_OFLOW_SHIFT_SHIFT			_MK_SHIFT_CONST(5)
+#define CDP_S_LUT_LE_SLOPE_SHIFT_0_LUT_LE_SLOPE_OFLOW_SHIFT_FIELD			_MK_FIELD_CONST(0x1f, CDP_S_LUT_LE_SLOPE_SHIFT_0_LUT_LE_SLOPE_OFLOW_SHIFT_SHIFT)
+
+
+// Register CDP_S_LUT_LO_SLOPE_SCALE_0
+#define CDP_S_LUT_LO_SLOPE_SCALE_0			_MK_ADDR_CONST(0xd040)
+#define CDP_S_LUT_LO_SLOPE_SCALE_0_LUT_LO_SLOPE_UFLOW_SCALE_SHIFT			_MK_SHIFT_CONST(0)
+#define CDP_S_LUT_LO_SLOPE_SCALE_0_LUT_LO_SLOPE_UFLOW_SCALE_FIELD			_MK_FIELD_CONST(0xffff, CDP_S_LUT_LO_SLOPE_SCALE_0_LUT_LO_SLOPE_UFLOW_SCALE_SHIFT)
+#define CDP_S_LUT_LO_SLOPE_SCALE_0_LUT_LO_SLOPE_OFLOW_SCALE_SHIFT			_MK_SHIFT_CONST(16)
+#define CDP_S_LUT_LO_SLOPE_SCALE_0_LUT_LO_SLOPE_OFLOW_SCALE_FIELD			_MK_FIELD_CONST(0xffff, CDP_S_LUT_LO_SLOPE_SCALE_0_LUT_LO_SLOPE_OFLOW_SCALE_SHIFT)
+
+
+// Register CDP_S_LUT_LO_SLOPE_SHIFT_0
+#define CDP_S_LUT_LO_SLOPE_SHIFT_0			_MK_ADDR_CONST(0xd044)
+#define CDP_S_LUT_LO_SLOPE_SHIFT_0_LUT_LO_SLOPE_UFLOW_SHIFT_SHIFT			_MK_SHIFT_CONST(0)
+#define CDP_S_LUT_LO_SLOPE_SHIFT_0_LUT_LO_SLOPE_UFLOW_SHIFT_FIELD			_MK_FIELD_CONST(0x1f, CDP_S_LUT_LO_SLOPE_SHIFT_0_LUT_LO_SLOPE_UFLOW_SHIFT_SHIFT)
+#define CDP_S_LUT_LO_SLOPE_SHIFT_0_LUT_LO_SLOPE_OFLOW_SHIFT_SHIFT			_MK_SHIFT_CONST(5)
+#define CDP_S_LUT_LO_SLOPE_SHIFT_0_LUT_LO_SLOPE_OFLOW_SHIFT_FIELD			_MK_FIELD_CONST(0x1f, CDP_S_LUT_LO_SLOPE_SHIFT_0_LUT_LO_SLOPE_OFLOW_SHIFT_SHIFT)
+
+
+// Register CDP_D_OP_ENABLE_0
+#define CDP_D_OP_ENABLE_0			_MK_ADDR_CONST(0xd048)
+#define CDP_D_OP_ENABLE_0_OP_EN_SHIFT			_MK_SHIFT_CONST(0)
+#define CDP_D_OP_ENABLE_0_OP_EN_FIELD			_MK_FIELD_CONST(0x1, CDP_D_OP_ENABLE_0_OP_EN_SHIFT)
+#define CDP_D_OP_ENABLE_0_OP_EN_DISABLE			_MK_ENUM_CONST(0x0)
+#define CDP_D_OP_ENABLE_0_OP_EN_ENABLE			_MK_ENUM_CONST(0x1)
+
+
+// Register CDP_D_FUNC_BYPASS_0
+#define CDP_D_FUNC_BYPASS_0			_MK_ADDR_CONST(0xd04c)
+#define CDP_D_FUNC_BYPASS_0_SQSUM_BYPASS_SHIFT			_MK_SHIFT_CONST(0)
+#define CDP_D_FUNC_BYPASS_0_SQSUM_BYPASS_FIELD			_MK_FIELD_CONST(0x1, CDP_D_FUNC_BYPASS_0_SQSUM_BYPASS_SHIFT)
+#define CDP_D_FUNC_BYPASS_0_SQSUM_BYPASS_DISABLE			_MK_ENUM_CONST(0x0)
+#define CDP_D_FUNC_BYPASS_0_SQSUM_BYPASS_ENABLE			_MK_ENUM_CONST(0x1)
+#define CDP_D_FUNC_BYPASS_0_MUL_BYPASS_SHIFT			_MK_SHIFT_CONST(1)
+#define CDP_D_FUNC_BYPASS_0_MUL_BYPASS_FIELD			_MK_FIELD_CONST(0x1, CDP_D_FUNC_BYPASS_0_MUL_BYPASS_SHIFT)
+#define CDP_D_FUNC_BYPASS_0_MUL_BYPASS_DISABLE			_MK_ENUM_CONST(0x0)
+#define CDP_D_FUNC_BYPASS_0_MUL_BYPASS_ENABLE			_MK_ENUM_CONST(0x1)
+
+
+// Register CDP_D_DST_BASE_ADDR_LOW_0
+#define CDP_D_DST_BASE_ADDR_LOW_0			_MK_ADDR_CONST(0xd050)
+#define CDP_D_DST_BASE_ADDR_LOW_0_DST_BASE_ADDR_LOW_SHIFT			_MK_SHIFT_CONST(0)
+#define CDP_D_DST_BASE_ADDR_LOW_0_DST_BASE_ADDR_LOW_FIELD			_MK_FIELD_CONST(0xffffffff, CDP_D_DST_BASE_ADDR_LOW_0_DST_BASE_ADDR_LOW_SHIFT)
+
+
+// Register CDP_D_DST_BASE_ADDR_HIGH_0
+#define CDP_D_DST_BASE_ADDR_HIGH_0			_MK_ADDR_CONST(0xd054)
+#define CDP_D_DST_BASE_ADDR_HIGH_0_DST_BASE_ADDR_HIGH_SHIFT			_MK_SHIFT_CONST(0)
+#define CDP_D_DST_BASE_ADDR_HIGH_0_DST_BASE_ADDR_HIGH_FIELD			_MK_FIELD_CONST(0xffffffff, CDP_D_DST_BASE_ADDR_HIGH_0_DST_BASE_ADDR_HIGH_SHIFT)
+
+
+// Register CDP_D_DST_LINE_STRIDE_0
+#define CDP_D_DST_LINE_STRIDE_0			_MK_ADDR_CONST(0xd058)
+#define CDP_D_DST_LINE_STRIDE_0_DST_LINE_STRIDE_SHIFT			_MK_SHIFT_CONST(0)
+#define CDP_D_DST_LINE_STRIDE_0_DST_LINE_STRIDE_FIELD			_MK_FIELD_CONST(0xffffffff, CDP_D_DST_LINE_STRIDE_0_DST_LINE_STRIDE_SHIFT)
+
+
+// Register CDP_D_DST_SURFACE_STRIDE_0
+#define CDP_D_DST_SURFACE_STRIDE_0			_MK_ADDR_CONST(0xd05c)
+#define CDP_D_DST_SURFACE_STRIDE_0_DST_SURFACE_STRIDE_SHIFT			_MK_SHIFT_CONST(0)
+#define CDP_D_DST_SURFACE_STRIDE_0_DST_SURFACE_STRIDE_FIELD			_MK_FIELD_CONST(0xffffffff, CDP_D_DST_SURFACE_STRIDE_0_DST_SURFACE_STRIDE_SHIFT)
+
+
+// Register CDP_D_DST_DMA_CFG_0
+#define CDP_D_DST_DMA_CFG_0			_MK_ADDR_CONST(0xd060)
+#define CDP_D_DST_DMA_CFG_0_DST_RAM_TYPE_SHIFT			_MK_SHIFT_CONST(0)
+#define CDP_D_DST_DMA_CFG_0_DST_RAM_TYPE_FIELD			_MK_FIELD_CONST(0x1, CDP_D_DST_DMA_CFG_0_DST_RAM_TYPE_SHIFT)
+#define CDP_D_DST_DMA_CFG_0_DST_RAM_TYPE_CV			_MK_ENUM_CONST(0x0)
+#define CDP_D_DST_DMA_CFG_0_DST_RAM_TYPE_MC			_MK_ENUM_CONST(0x1)
+
+
+// Register CDP_D_DST_COMPRESSION_EN_0
+#define CDP_D_DST_COMPRESSION_EN_0			_MK_ADDR_CONST(0xd064)
+#define CDP_D_DST_COMPRESSION_EN_0_DST_COMPRESSION_EN_SHIFT			_MK_SHIFT_CONST(0)
+#define CDP_D_DST_COMPRESSION_EN_0_DST_COMPRESSION_EN_FIELD			_MK_FIELD_CONST(0x1, CDP_D_DST_COMPRESSION_EN_0_DST_COMPRESSION_EN_SHIFT)
+#define CDP_D_DST_COMPRESSION_EN_0_DST_COMPRESSION_EN_DISABLE			_MK_ENUM_CONST(0x0)
+#define CDP_D_DST_COMPRESSION_EN_0_DST_COMPRESSION_EN_ENABLE			_MK_ENUM_CONST(0x1)
+
+
+// Register CDP_D_DATA_FORMAT_0
+#define CDP_D_DATA_FORMAT_0			_MK_ADDR_CONST(0xd068)
+#define CDP_D_DATA_FORMAT_0_INPUT_DATA_TYPE_SHIFT			_MK_SHIFT_CONST(0)
+#define CDP_D_DATA_FORMAT_0_INPUT_DATA_TYPE_FIELD			_MK_FIELD_CONST(0x3, CDP_D_DATA_FORMAT_0_INPUT_DATA_TYPE_SHIFT)
+#define CDP_D_DATA_FORMAT_0_INPUT_DATA_TYPE_INT8			_MK_ENUM_CONST(0x0)
+#define CDP_D_DATA_FORMAT_0_INPUT_DATA_TYPE_INT16			_MK_ENUM_CONST(0x1)
+#define CDP_D_DATA_FORMAT_0_INPUT_DATA_TYPE_FP16			_MK_ENUM_CONST(0x2)
+
+
+// Register CDP_D_NAN_FLUSH_TO_ZERO_0
+#define CDP_D_NAN_FLUSH_TO_ZERO_0			_MK_ADDR_CONST(0xd06c)
+#define CDP_D_NAN_FLUSH_TO_ZERO_0_NAN_TO_ZERO_SHIFT			_MK_SHIFT_CONST(0)
+#define CDP_D_NAN_FLUSH_TO_ZERO_0_NAN_TO_ZERO_FIELD			_MK_FIELD_CONST(0x1, CDP_D_NAN_FLUSH_TO_ZERO_0_NAN_TO_ZERO_SHIFT)
+#define CDP_D_NAN_FLUSH_TO_ZERO_0_NAN_TO_ZERO_DISABLE			_MK_ENUM_CONST(0x0)
+#define CDP_D_NAN_FLUSH_TO_ZERO_0_NAN_TO_ZERO_ENABLE			_MK_ENUM_CONST(0x1)
+
+
+// Register CDP_D_LRN_CFG_0
+#define CDP_D_LRN_CFG_0			_MK_ADDR_CONST(0xd070)
+#define CDP_D_LRN_CFG_0_NORMALZ_LEN_SHIFT			_MK_SHIFT_CONST(0)
+#define CDP_D_LRN_CFG_0_NORMALZ_LEN_FIELD			_MK_FIELD_CONST(0x3, CDP_D_LRN_CFG_0_NORMALZ_LEN_SHIFT)
+#define CDP_D_LRN_CFG_0_NORMALZ_LEN_LEN3			_MK_ENUM_CONST(0x0)
+#define CDP_D_LRN_CFG_0_NORMALZ_LEN_LEN5			_MK_ENUM_CONST(0x1)
+#define CDP_D_LRN_CFG_0_NORMALZ_LEN_LEN7			_MK_ENUM_CONST(0x2)
+#define CDP_D_LRN_CFG_0_NORMALZ_LEN_LEN9			_MK_ENUM_CONST(0x3)
+
+
+// Register CDP_D_DATIN_OFFSET_0
+#define CDP_D_DATIN_OFFSET_0			_MK_ADDR_CONST(0xd074)
+#define CDP_D_DATIN_OFFSET_0_DATIN_OFFSET_SHIFT			_MK_SHIFT_CONST(0)
+#define CDP_D_DATIN_OFFSET_0_DATIN_OFFSET_FIELD			_MK_FIELD_CONST(0xffff, CDP_D_DATIN_OFFSET_0_DATIN_OFFSET_SHIFT)
+
+
+// Register CDP_D_DATIN_SCALE_0
+#define CDP_D_DATIN_SCALE_0			_MK_ADDR_CONST(0xd078)
+#define CDP_D_DATIN_SCALE_0_DATIN_SCALE_SHIFT			_MK_SHIFT_CONST(0)
+#define CDP_D_DATIN_SCALE_0_DATIN_SCALE_FIELD			_MK_FIELD_CONST(0xffff, CDP_D_DATIN_SCALE_0_DATIN_SCALE_SHIFT)
+
+
+// Register CDP_D_DATIN_SHIFTER_0
+#define CDP_D_DATIN_SHIFTER_0			_MK_ADDR_CONST(0xd07c)
+#define CDP_D_DATIN_SHIFTER_0_DATIN_SHIFTER_SHIFT			_MK_SHIFT_CONST(0)
+#define CDP_D_DATIN_SHIFTER_0_DATIN_SHIFTER_FIELD			_MK_FIELD_CONST(0x1f, CDP_D_DATIN_SHIFTER_0_DATIN_SHIFTER_SHIFT)
+
+
+// Register CDP_D_DATOUT_OFFSET_0
+#define CDP_D_DATOUT_OFFSET_0			_MK_ADDR_CONST(0xd080)
+#define CDP_D_DATOUT_OFFSET_0_DATOUT_OFFSET_SHIFT			_MK_SHIFT_CONST(0)
+#define CDP_D_DATOUT_OFFSET_0_DATOUT_OFFSET_FIELD			_MK_FIELD_CONST(0xffffffff, CDP_D_DATOUT_OFFSET_0_DATOUT_OFFSET_SHIFT)
+
+
+// Register CDP_D_DATOUT_SCALE_0
+#define CDP_D_DATOUT_SCALE_0			_MK_ADDR_CONST(0xd084)
+#define CDP_D_DATOUT_SCALE_0_DATOUT_SCALE_SHIFT			_MK_SHIFT_CONST(0)
+#define CDP_D_DATOUT_SCALE_0_DATOUT_SCALE_FIELD			_MK_FIELD_CONST(0xffff, CDP_D_DATOUT_SCALE_0_DATOUT_SCALE_SHIFT)
+
+
+// Register CDP_D_DATOUT_SHIFTER_0
+#define CDP_D_DATOUT_SHIFTER_0			_MK_ADDR_CONST(0xd088)
+#define CDP_D_DATOUT_SHIFTER_0_DATOUT_SHIFTER_SHIFT			_MK_SHIFT_CONST(0)
+#define CDP_D_DATOUT_SHIFTER_0_DATOUT_SHIFTER_FIELD			_MK_FIELD_CONST(0x3f, CDP_D_DATOUT_SHIFTER_0_DATOUT_SHIFTER_SHIFT)
+
+
+// Register CDP_D_NAN_INPUT_NUM_0
+#define CDP_D_NAN_INPUT_NUM_0			_MK_ADDR_CONST(0xd08c)
+#define CDP_D_NAN_INPUT_NUM_0_NAN_INPUT_NUM_SHIFT			_MK_SHIFT_CONST(0)
+#define CDP_D_NAN_INPUT_NUM_0_NAN_INPUT_NUM_FIELD			_MK_FIELD_CONST(0xffffffff, CDP_D_NAN_INPUT_NUM_0_NAN_INPUT_NUM_SHIFT)
+
+
+// Register CDP_D_INF_INPUT_NUM_0
+#define CDP_D_INF_INPUT_NUM_0			_MK_ADDR_CONST(0xd090)
+#define CDP_D_INF_INPUT_NUM_0_INF_INPUT_NUM_SHIFT			_MK_SHIFT_CONST(0)
+#define CDP_D_INF_INPUT_NUM_0_INF_INPUT_NUM_FIELD			_MK_FIELD_CONST(0xffffffff, CDP_D_INF_INPUT_NUM_0_INF_INPUT_NUM_SHIFT)
+
+
+// Register CDP_D_NAN_OUTPUT_NUM_0
+#define CDP_D_NAN_OUTPUT_NUM_0			_MK_ADDR_CONST(0xd094)
+#define CDP_D_NAN_OUTPUT_NUM_0_NAN_OUTPUT_NUM_SHIFT			_MK_SHIFT_CONST(0)
+#define CDP_D_NAN_OUTPUT_NUM_0_NAN_OUTPUT_NUM_FIELD			_MK_FIELD_CONST(0xffffffff, CDP_D_NAN_OUTPUT_NUM_0_NAN_OUTPUT_NUM_SHIFT)
+
+
+// Register CDP_D_OUT_SATURATION_0
+#define CDP_D_OUT_SATURATION_0			_MK_ADDR_CONST(0xd098)
+#define CDP_D_OUT_SATURATION_0_OUT_SATURATION_SHIFT			_MK_SHIFT_CONST(0)
+#define CDP_D_OUT_SATURATION_0_OUT_SATURATION_FIELD			_MK_FIELD_CONST(0xffffffff, CDP_D_OUT_SATURATION_0_OUT_SATURATION_SHIFT)
+
+
+// Register CDP_D_PERF_ENABLE_0
+#define CDP_D_PERF_ENABLE_0			_MK_ADDR_CONST(0xd09c)
+#define CDP_D_PERF_ENABLE_0_DMA_EN_SHIFT			_MK_SHIFT_CONST(0)
+#define CDP_D_PERF_ENABLE_0_DMA_EN_FIELD			_MK_FIELD_CONST(0x1, CDP_D_PERF_ENABLE_0_DMA_EN_SHIFT)
+#define CDP_D_PERF_ENABLE_0_DMA_EN_DISABLE			_MK_ENUM_CONST(0x0)
+#define CDP_D_PERF_ENABLE_0_DMA_EN_ENABLE			_MK_ENUM_CONST(0x1)
+#define CDP_D_PERF_ENABLE_0_LUT_EN_SHIFT			_MK_SHIFT_CONST(1)
+#define CDP_D_PERF_ENABLE_0_LUT_EN_FIELD			_MK_FIELD_CONST(0x1, CDP_D_PERF_ENABLE_0_LUT_EN_SHIFT)
+#define CDP_D_PERF_ENABLE_0_LUT_EN_DISABLE			_MK_ENUM_CONST(0x0)
+#define CDP_D_PERF_ENABLE_0_LUT_EN_ENABLE			_MK_ENUM_CONST(0x1)
+
+
+// Register CDP_D_PERF_WRITE_STALL_0
+#define CDP_D_PERF_WRITE_STALL_0			_MK_ADDR_CONST(0xd0a0)
+#define CDP_D_PERF_WRITE_STALL_0_PERF_WRITE_STALL_SHIFT			_MK_SHIFT_CONST(0)
+#define CDP_D_PERF_WRITE_STALL_0_PERF_WRITE_STALL_FIELD			_MK_FIELD_CONST(0xffffffff, CDP_D_PERF_WRITE_STALL_0_PERF_WRITE_STALL_SHIFT)
+
+
+// Register CDP_D_PERF_LUT_UFLOW_0
+#define CDP_D_PERF_LUT_UFLOW_0			_MK_ADDR_CONST(0xd0a4)
+#define CDP_D_PERF_LUT_UFLOW_0_PERF_LUT_UFLOW_SHIFT			_MK_SHIFT_CONST(0)
+#define CDP_D_PERF_LUT_UFLOW_0_PERF_LUT_UFLOW_FIELD			_MK_FIELD_CONST(0xffffffff, CDP_D_PERF_LUT_UFLOW_0_PERF_LUT_UFLOW_SHIFT)
+
+
+// Register CDP_D_PERF_LUT_OFLOW_0
+#define CDP_D_PERF_LUT_OFLOW_0			_MK_ADDR_CONST(0xd0a8)
+#define CDP_D_PERF_LUT_OFLOW_0_PERF_LUT_OFLOW_SHIFT			_MK_SHIFT_CONST(0)
+#define CDP_D_PERF_LUT_OFLOW_0_PERF_LUT_OFLOW_FIELD			_MK_FIELD_CONST(0xffffffff, CDP_D_PERF_LUT_OFLOW_0_PERF_LUT_OFLOW_SHIFT)
+
+
+// Register CDP_D_PERF_LUT_HYBRID_0
+#define CDP_D_PERF_LUT_HYBRID_0			_MK_ADDR_CONST(0xd0ac)
+#define CDP_D_PERF_LUT_HYBRID_0_PERF_LUT_HYBRID_SHIFT			_MK_SHIFT_CONST(0)
+#define CDP_D_PERF_LUT_HYBRID_0_PERF_LUT_HYBRID_FIELD			_MK_FIELD_CONST(0xffffffff, CDP_D_PERF_LUT_HYBRID_0_PERF_LUT_HYBRID_SHIFT)
+
+
+// Register CDP_D_PERF_LUT_LE_HIT_0
+#define CDP_D_PERF_LUT_LE_HIT_0			_MK_ADDR_CONST(0xd0b0)
+#define CDP_D_PERF_LUT_LE_HIT_0_PERF_LUT_LE_HIT_SHIFT			_MK_SHIFT_CONST(0)
+#define CDP_D_PERF_LUT_LE_HIT_0_PERF_LUT_LE_HIT_FIELD			_MK_FIELD_CONST(0xffffffff, CDP_D_PERF_LUT_LE_HIT_0_PERF_LUT_LE_HIT_SHIFT)
+
+
+// Register CDP_D_PERF_LUT_LO_HIT_0
+#define CDP_D_PERF_LUT_LO_HIT_0			_MK_ADDR_CONST(0xd0b4)
+#define CDP_D_PERF_LUT_LO_HIT_0_PERF_LUT_LO_HIT_SHIFT			_MK_SHIFT_CONST(0)
+#define CDP_D_PERF_LUT_LO_HIT_0_PERF_LUT_LO_HIT_FIELD			_MK_FIELD_CONST(0xffffffff, CDP_D_PERF_LUT_LO_HIT_0_PERF_LUT_LO_HIT_SHIFT)
+
+
+// Register CDP_D_CYA_0
+#define CDP_D_CYA_0			_MK_ADDR_CONST(0xd0b8)
+#define CDP_D_CYA_0_CYA_SHIFT			_MK_SHIFT_CONST(0)
+#define CDP_D_CYA_0_CYA_FIELD			_MK_FIELD_CONST(0xffffffff, CDP_D_CYA_0_CYA_SHIFT)
+
+
+
+// To satisfy various compilers and platforms,
+// we let users control the types and syntax of certain constants, using macros.
+#ifndef _MK_SHIFT_CONST
+  #define _MK_SHIFT_CONST(_constant_) _constant_
+#endif
+#ifndef _MK_MASK_CONST
+  #define _MK_MASK_CONST(_constant_) _constant_
+#endif
+#ifndef _MK_ENUM_CONST
+  #define _MK_ENUM_CONST(_constant_) (_constant_ ## UL)
+#endif
+#ifndef _MK_ADDR_CONST
+  #define _MK_ADDR_CONST(_constant_) _constant_
+#endif
+#ifndef _MK_FIELD_CONST
+  #define _MK_FIELD_CONST(_mask_, _shift_) (_MK_MASK_CONST(_mask_) << _MK_SHIFT_CONST(_shift_))
+#endif
+
+
+// Register NVDLA_GEC_FEATURE_0
+#define NVDLA_GEC_FEATURE_0			_MK_ADDR_CONST(0xe000)
+#define NVDLA_GEC_FEATURE_0_NUM_ERR_SLICES_SHIFT			_MK_SHIFT_CONST(0)
+#define NVDLA_GEC_FEATURE_0_NUM_ERR_SLICES_FIELD			_MK_FIELD_CONST(0x3f, NVDLA_GEC_FEATURE_0_NUM_ERR_SLICES_SHIFT)
+#define NVDLA_GEC_FEATURE_0_NUM_ERR_SHIFT			_MK_SHIFT_CONST(16)
+#define NVDLA_GEC_FEATURE_0_NUM_ERR_FIELD			_MK_FIELD_CONST(0xffff, NVDLA_GEC_FEATURE_0_NUM_ERR_SHIFT)
+
+
+// Register NVDLA_GEC_SWRESET_0
+#define NVDLA_GEC_SWRESET_0			_MK_ADDR_CONST(0xe004)
+#define NVDLA_GEC_SWRESET_0_SWRST_SHIFT			_MK_SHIFT_CONST(0)
+#define NVDLA_GEC_SWRESET_0_SWRST_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_SWRESET_0_SWRST_SHIFT)
+
+
+// Register NVDLA_GEC_MISSIONERR_TYPE_0
+#define NVDLA_GEC_MISSIONERR_TYPE_0			_MK_ADDR_CONST(0xe008)
+#define NVDLA_GEC_MISSIONERR_TYPE_0_CODE_SHIFT			_MK_SHIFT_CONST(0)
+#define NVDLA_GEC_MISSIONERR_TYPE_0_CODE_FIELD			_MK_FIELD_CONST(0x3f, NVDLA_GEC_MISSIONERR_TYPE_0_CODE_SHIFT)
+
+
+// Register NVDLA_GEC_CURRENT_COUNTER_VALUE_0
+#define NVDLA_GEC_CURRENT_COUNTER_VALUE_0			_MK_ADDR_CONST(0xe00c)
+#define NVDLA_GEC_CURRENT_COUNTER_VALUE_0_VALUE_SHIFT			_MK_SHIFT_CONST(0)
+#define NVDLA_GEC_CURRENT_COUNTER_VALUE_0_VALUE_FIELD			_MK_FIELD_CONST(0x1ff, NVDLA_GEC_CURRENT_COUNTER_VALUE_0_VALUE_SHIFT)
+
+
+// Register NVDLA_GEC_MISSIONERR_INDEX_0
+#define NVDLA_GEC_MISSIONERR_INDEX_0			_MK_ADDR_CONST(0xe014)
+#define NVDLA_GEC_MISSIONERR_INDEX_0_IDX_SHIFT			_MK_SHIFT_CONST(0)
+#define NVDLA_GEC_MISSIONERR_INDEX_0_IDX_FIELD			_MK_FIELD_CONST(0x7f, NVDLA_GEC_MISSIONERR_INDEX_0_IDX_SHIFT)
+
+
+// Register NVDLA_GEC_CORRECTABLE_THRESHOLD_0
+#define NVDLA_GEC_CORRECTABLE_THRESHOLD_0			_MK_ADDR_CONST(0xe018)
+#define NVDLA_GEC_CORRECTABLE_THRESHOLD_0_COUNT_SHIFT			_MK_SHIFT_CONST(0)
+#define NVDLA_GEC_CORRECTABLE_THRESHOLD_0_COUNT_FIELD			_MK_FIELD_CONST(0xff, NVDLA_GEC_CORRECTABLE_THRESHOLD_0_COUNT_SHIFT)
+
+
+// Register NVDLA_GEC_MISSIONERR_INJECT_UNLOCK_0
+#define NVDLA_GEC_MISSIONERR_INJECT_UNLOCK_0			_MK_ADDR_CONST(0xe01c)
+#define NVDLA_GEC_MISSIONERR_INJECT_UNLOCK_0_VALUE_SHIFT			_MK_SHIFT_CONST(0)
+#define NVDLA_GEC_MISSIONERR_INJECT_UNLOCK_0_VALUE_FIELD			_MK_FIELD_CONST(0xff, NVDLA_GEC_MISSIONERR_INJECT_UNLOCK_0_VALUE_SHIFT)
+#define NVDLA_GEC_MISSIONERR_INJECT_UNLOCK_0_VALUE_LOCK			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_MISSIONERR_INJECT_UNLOCK_0_VALUE_UNLOCK			_MK_ENUM_CONST(0xe1)
+
+
+// Register NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0			_MK_ADDR_CONST(0xe030)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR0_SHIFT			_MK_SHIFT_CONST(0)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR0_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR0_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR0_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR0_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR1_SHIFT			_MK_SHIFT_CONST(1)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR1_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR1_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR1_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR1_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR2_SHIFT			_MK_SHIFT_CONST(2)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR2_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR2_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR2_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR2_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR3_SHIFT			_MK_SHIFT_CONST(3)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR3_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR3_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR3_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR3_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR4_SHIFT			_MK_SHIFT_CONST(4)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR4_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR4_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR4_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR4_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR5_SHIFT			_MK_SHIFT_CONST(5)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR5_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR5_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR5_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR5_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR6_SHIFT			_MK_SHIFT_CONST(6)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR6_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR6_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR6_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR6_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR7_SHIFT			_MK_SHIFT_CONST(7)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR7_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR7_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR7_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR7_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR8_SHIFT			_MK_SHIFT_CONST(8)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR8_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR8_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR8_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR8_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR9_SHIFT			_MK_SHIFT_CONST(9)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR9_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR9_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR9_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR9_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR10_SHIFT			_MK_SHIFT_CONST(10)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR10_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR10_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR10_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR10_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR11_SHIFT			_MK_SHIFT_CONST(11)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR11_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR11_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR11_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR11_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR12_SHIFT			_MK_SHIFT_CONST(12)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR12_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR12_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR12_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR12_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR13_SHIFT			_MK_SHIFT_CONST(13)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR13_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR13_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR13_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR13_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR14_SHIFT			_MK_SHIFT_CONST(14)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR14_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR14_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR14_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR14_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR15_SHIFT			_MK_SHIFT_CONST(15)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR15_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR15_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR15_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR15_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR16_SHIFT			_MK_SHIFT_CONST(16)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR16_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR16_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR16_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR16_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR17_SHIFT			_MK_SHIFT_CONST(17)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR17_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR17_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR17_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR17_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR18_SHIFT			_MK_SHIFT_CONST(18)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR18_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR18_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR18_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR18_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR19_SHIFT			_MK_SHIFT_CONST(19)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR19_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR19_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR19_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR19_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR20_SHIFT			_MK_SHIFT_CONST(20)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR20_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR20_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR20_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR20_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR21_SHIFT			_MK_SHIFT_CONST(21)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR21_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR21_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR21_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR21_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR22_SHIFT			_MK_SHIFT_CONST(22)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR22_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR22_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR22_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR22_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR23_SHIFT			_MK_SHIFT_CONST(23)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR23_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR23_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR23_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR23_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR24_SHIFT			_MK_SHIFT_CONST(24)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR24_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR24_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR24_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR24_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR25_SHIFT			_MK_SHIFT_CONST(25)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR25_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR25_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR25_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR25_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR26_SHIFT			_MK_SHIFT_CONST(26)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR26_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR26_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR26_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR26_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR27_SHIFT			_MK_SHIFT_CONST(27)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR27_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR27_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR27_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR27_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR28_SHIFT			_MK_SHIFT_CONST(28)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR28_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR28_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR28_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR28_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR29_SHIFT			_MK_SHIFT_CONST(29)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR29_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR29_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR29_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR29_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR30_SHIFT			_MK_SHIFT_CONST(30)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR30_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR30_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR30_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR30_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR31_SHIFT			_MK_SHIFT_CONST(31)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR31_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR31_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR31_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR31_ENABLE			_MK_ENUM_CONST(0x1)
+
+
+// Register NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0			_MK_ADDR_CONST(0xe034)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR0_SHIFT			_MK_SHIFT_CONST(0)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR0_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR0_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR0_NOFORCE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR0_FORCE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR1_SHIFT			_MK_SHIFT_CONST(1)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR1_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR1_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR1_NOFORCE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR1_FORCE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR2_SHIFT			_MK_SHIFT_CONST(2)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR2_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR2_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR2_NOFORCE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR2_FORCE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR3_SHIFT			_MK_SHIFT_CONST(3)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR3_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR3_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR3_NOFORCE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR3_FORCE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR4_SHIFT			_MK_SHIFT_CONST(4)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR4_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR4_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR4_NOFORCE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR4_FORCE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR5_SHIFT			_MK_SHIFT_CONST(5)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR5_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR5_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR5_NOFORCE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR5_FORCE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR6_SHIFT			_MK_SHIFT_CONST(6)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR6_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR6_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR6_NOFORCE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR6_FORCE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR7_SHIFT			_MK_SHIFT_CONST(7)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR7_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR7_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR7_NOFORCE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR7_FORCE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR8_SHIFT			_MK_SHIFT_CONST(8)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR8_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR8_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR8_NOFORCE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR8_FORCE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR9_SHIFT			_MK_SHIFT_CONST(9)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR9_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR9_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR9_NOFORCE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR9_FORCE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR10_SHIFT			_MK_SHIFT_CONST(10)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR10_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR10_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR10_NOFORCE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR10_FORCE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR11_SHIFT			_MK_SHIFT_CONST(11)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR11_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR11_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR11_NOFORCE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR11_FORCE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR12_SHIFT			_MK_SHIFT_CONST(12)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR12_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR12_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR12_NOFORCE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR12_FORCE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR13_SHIFT			_MK_SHIFT_CONST(13)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR13_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR13_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR13_NOFORCE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR13_FORCE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR14_SHIFT			_MK_SHIFT_CONST(14)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR14_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR14_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR14_NOFORCE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR14_FORCE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR15_SHIFT			_MK_SHIFT_CONST(15)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR15_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR15_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR15_NOFORCE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR15_FORCE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR16_SHIFT			_MK_SHIFT_CONST(16)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR16_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR16_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR16_NOFORCE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR16_FORCE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR17_SHIFT			_MK_SHIFT_CONST(17)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR17_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR17_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR17_NOFORCE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR17_FORCE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR18_SHIFT			_MK_SHIFT_CONST(18)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR18_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR18_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR18_NOFORCE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR18_FORCE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR19_SHIFT			_MK_SHIFT_CONST(19)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR19_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR19_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR19_NOFORCE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR19_FORCE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR20_SHIFT			_MK_SHIFT_CONST(20)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR20_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR20_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR20_NOFORCE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR20_FORCE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR21_SHIFT			_MK_SHIFT_CONST(21)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR21_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR21_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR21_NOFORCE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR21_FORCE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR22_SHIFT			_MK_SHIFT_CONST(22)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR22_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR22_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR22_NOFORCE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR22_FORCE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR23_SHIFT			_MK_SHIFT_CONST(23)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR23_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR23_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR23_NOFORCE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR23_FORCE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR24_SHIFT			_MK_SHIFT_CONST(24)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR24_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR24_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR24_NOFORCE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR24_FORCE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR25_SHIFT			_MK_SHIFT_CONST(25)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR25_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR25_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR25_NOFORCE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR25_FORCE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR26_SHIFT			_MK_SHIFT_CONST(26)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR26_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR26_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR26_NOFORCE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR26_FORCE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR27_SHIFT			_MK_SHIFT_CONST(27)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR27_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR27_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR27_NOFORCE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR27_FORCE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR28_SHIFT			_MK_SHIFT_CONST(28)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR28_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR28_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR28_NOFORCE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR28_FORCE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR29_SHIFT			_MK_SHIFT_CONST(29)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR29_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR29_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR29_NOFORCE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR29_FORCE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR30_SHIFT			_MK_SHIFT_CONST(30)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR30_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR30_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR30_NOFORCE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR30_FORCE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR31_SHIFT			_MK_SHIFT_CONST(31)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR31_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR31_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR31_NOFORCE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR31_FORCE			_MK_ENUM_CONST(0x1)
+
+
+// Register NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0			_MK_ADDR_CONST(0xe038)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR0_SHIFT			_MK_SHIFT_CONST(0)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR0_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR0_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR1_SHIFT			_MK_SHIFT_CONST(1)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR1_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR1_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR2_SHIFT			_MK_SHIFT_CONST(2)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR2_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR2_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR3_SHIFT			_MK_SHIFT_CONST(3)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR3_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR3_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR4_SHIFT			_MK_SHIFT_CONST(4)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR4_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR4_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR5_SHIFT			_MK_SHIFT_CONST(5)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR5_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR5_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR6_SHIFT			_MK_SHIFT_CONST(6)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR6_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR6_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR7_SHIFT			_MK_SHIFT_CONST(7)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR7_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR7_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR8_SHIFT			_MK_SHIFT_CONST(8)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR8_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR8_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR9_SHIFT			_MK_SHIFT_CONST(9)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR9_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR9_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR10_SHIFT			_MK_SHIFT_CONST(10)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR10_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR10_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR11_SHIFT			_MK_SHIFT_CONST(11)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR11_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR11_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR12_SHIFT			_MK_SHIFT_CONST(12)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR12_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR12_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR13_SHIFT			_MK_SHIFT_CONST(13)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR13_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR13_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR14_SHIFT			_MK_SHIFT_CONST(14)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR14_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR14_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR15_SHIFT			_MK_SHIFT_CONST(15)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR15_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR15_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR16_SHIFT			_MK_SHIFT_CONST(16)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR16_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR16_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR17_SHIFT			_MK_SHIFT_CONST(17)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR17_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR17_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR18_SHIFT			_MK_SHIFT_CONST(18)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR18_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR18_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR19_SHIFT			_MK_SHIFT_CONST(19)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR19_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR19_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR20_SHIFT			_MK_SHIFT_CONST(20)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR20_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR20_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR21_SHIFT			_MK_SHIFT_CONST(21)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR21_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR21_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR22_SHIFT			_MK_SHIFT_CONST(22)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR22_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR22_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR23_SHIFT			_MK_SHIFT_CONST(23)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR23_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR23_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR24_SHIFT			_MK_SHIFT_CONST(24)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR24_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR24_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR25_SHIFT			_MK_SHIFT_CONST(25)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR25_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR25_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR26_SHIFT			_MK_SHIFT_CONST(26)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR26_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR26_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR27_SHIFT			_MK_SHIFT_CONST(27)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR27_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR27_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR28_SHIFT			_MK_SHIFT_CONST(28)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR28_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR28_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR29_SHIFT			_MK_SHIFT_CONST(29)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR29_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR29_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR30_SHIFT			_MK_SHIFT_CONST(30)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR30_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR30_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR31_SHIFT			_MK_SHIFT_CONST(31)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR31_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR31_SHIFT)
+
+
+// Register NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0			_MK_ADDR_CONST(0xe03c)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR0_SHIFT			_MK_SHIFT_CONST(0)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR0_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR0_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR0_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR0_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR1_SHIFT			_MK_SHIFT_CONST(1)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR1_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR1_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR1_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR1_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR2_SHIFT			_MK_SHIFT_CONST(2)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR2_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR2_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR2_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR2_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR3_SHIFT			_MK_SHIFT_CONST(3)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR3_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR3_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR3_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR3_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR4_SHIFT			_MK_SHIFT_CONST(4)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR4_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR4_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR4_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR4_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR5_SHIFT			_MK_SHIFT_CONST(5)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR5_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR5_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR5_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR5_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR6_SHIFT			_MK_SHIFT_CONST(6)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR6_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR6_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR6_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR6_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR7_SHIFT			_MK_SHIFT_CONST(7)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR7_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR7_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR7_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR7_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR8_SHIFT			_MK_SHIFT_CONST(8)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR8_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR8_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR8_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR8_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR15_SHIFT			_MK_SHIFT_CONST(15)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR15_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR15_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR15_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR15_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR16_SHIFT			_MK_SHIFT_CONST(16)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR16_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR16_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR16_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR16_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR17_SHIFT			_MK_SHIFT_CONST(17)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR17_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR17_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR17_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR17_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR18_SHIFT			_MK_SHIFT_CONST(18)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR18_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR18_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR18_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR18_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR19_SHIFT			_MK_SHIFT_CONST(19)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR19_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR19_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR19_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR19_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR20_SHIFT			_MK_SHIFT_CONST(20)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR20_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR20_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR20_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR20_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR21_SHIFT			_MK_SHIFT_CONST(21)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR21_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR21_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR21_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR21_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR22_SHIFT			_MK_SHIFT_CONST(22)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR22_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR22_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR22_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR22_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR23_SHIFT			_MK_SHIFT_CONST(23)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR23_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR23_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR23_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR23_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR24_SHIFT			_MK_SHIFT_CONST(24)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR24_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR24_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR24_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR24_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR25_SHIFT			_MK_SHIFT_CONST(25)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR25_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR25_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR25_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR25_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR26_SHIFT			_MK_SHIFT_CONST(26)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR26_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR26_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR26_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR26_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR27_SHIFT			_MK_SHIFT_CONST(27)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR27_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR27_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR27_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR27_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR28_SHIFT			_MK_SHIFT_CONST(28)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR28_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR28_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR28_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR28_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR29_SHIFT			_MK_SHIFT_CONST(29)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR29_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR29_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR29_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR29_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR30_SHIFT			_MK_SHIFT_CONST(30)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR30_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR30_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR30_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR30_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR31_SHIFT			_MK_SHIFT_CONST(31)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR31_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR31_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR31_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR31_ENABLE			_MK_ENUM_CONST(0x1)
+
+
+// Register NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0			_MK_ADDR_CONST(0xe040)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR0_SHIFT			_MK_SHIFT_CONST(0)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR0_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR0_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR0_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR0_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR1_SHIFT			_MK_SHIFT_CONST(1)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR1_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR1_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR1_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR1_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR2_SHIFT			_MK_SHIFT_CONST(2)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR2_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR2_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR2_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR2_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR3_SHIFT			_MK_SHIFT_CONST(3)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR3_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR3_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR3_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR3_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR4_SHIFT			_MK_SHIFT_CONST(4)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR4_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR4_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR4_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR4_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR5_SHIFT			_MK_SHIFT_CONST(5)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR5_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR5_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR5_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR5_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR6_SHIFT			_MK_SHIFT_CONST(6)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR6_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR6_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR6_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR6_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR7_SHIFT			_MK_SHIFT_CONST(7)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR7_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR7_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR7_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR7_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR8_SHIFT			_MK_SHIFT_CONST(8)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR8_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR8_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR8_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR8_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR9_SHIFT			_MK_SHIFT_CONST(9)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR9_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR9_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR9_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR9_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR10_SHIFT			_MK_SHIFT_CONST(10)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR10_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR10_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR10_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR10_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR11_SHIFT			_MK_SHIFT_CONST(11)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR11_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR11_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR11_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR11_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR12_SHIFT			_MK_SHIFT_CONST(12)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR12_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR12_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR12_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR12_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR13_SHIFT			_MK_SHIFT_CONST(13)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR13_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR13_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR13_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR13_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR14_SHIFT			_MK_SHIFT_CONST(14)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR14_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR14_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR14_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR14_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR15_SHIFT			_MK_SHIFT_CONST(15)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR15_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR15_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR15_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR15_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR16_SHIFT			_MK_SHIFT_CONST(16)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR16_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR16_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR16_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR16_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR17_SHIFT			_MK_SHIFT_CONST(17)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR17_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR17_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR17_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR17_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR18_SHIFT			_MK_SHIFT_CONST(18)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR18_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR18_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR18_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR18_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR19_SHIFT			_MK_SHIFT_CONST(19)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR19_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR19_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR19_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR19_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR20_SHIFT			_MK_SHIFT_CONST(20)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR20_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR20_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR20_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR20_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR21_SHIFT			_MK_SHIFT_CONST(21)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR21_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR21_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR21_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR21_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR22_SHIFT			_MK_SHIFT_CONST(22)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR22_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR22_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR22_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR22_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR23_SHIFT			_MK_SHIFT_CONST(23)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR23_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR23_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR23_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR23_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR24_SHIFT			_MK_SHIFT_CONST(24)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR24_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR24_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR24_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR24_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR25_SHIFT			_MK_SHIFT_CONST(25)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR25_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR25_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR25_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR25_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR26_SHIFT			_MK_SHIFT_CONST(26)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR26_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR26_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR26_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR26_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR27_SHIFT			_MK_SHIFT_CONST(27)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR27_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR27_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR27_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR27_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR28_SHIFT			_MK_SHIFT_CONST(28)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR28_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR28_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR28_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR28_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR29_SHIFT			_MK_SHIFT_CONST(29)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR29_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR29_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR29_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR29_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR30_SHIFT			_MK_SHIFT_CONST(30)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR30_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR30_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR30_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR30_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR31_SHIFT			_MK_SHIFT_CONST(31)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR31_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR31_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR31_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR31_ENABLE			_MK_ENUM_CONST(0x1)
+
+
+// Register NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0			_MK_ADDR_CONST(0xe044)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR0_SHIFT			_MK_SHIFT_CONST(0)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR0_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR0_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR0_NOFORCE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR0_FORCE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR1_SHIFT			_MK_SHIFT_CONST(1)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR1_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR1_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR1_NOFORCE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR1_FORCE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR2_SHIFT			_MK_SHIFT_CONST(2)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR2_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR2_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR2_NOFORCE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR2_FORCE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR3_SHIFT			_MK_SHIFT_CONST(3)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR3_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR3_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR3_NOFORCE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR3_FORCE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR4_SHIFT			_MK_SHIFT_CONST(4)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR4_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR4_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR4_NOFORCE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR4_FORCE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR5_SHIFT			_MK_SHIFT_CONST(5)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR5_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR5_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR5_NOFORCE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR5_FORCE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR6_SHIFT			_MK_SHIFT_CONST(6)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR6_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR6_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR6_NOFORCE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR6_FORCE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR7_SHIFT			_MK_SHIFT_CONST(7)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR7_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR7_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR7_NOFORCE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR7_FORCE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR8_SHIFT			_MK_SHIFT_CONST(8)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR8_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR8_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR8_NOFORCE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR8_FORCE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR9_SHIFT			_MK_SHIFT_CONST(9)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR9_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR9_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR9_NOFORCE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR9_FORCE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR10_SHIFT			_MK_SHIFT_CONST(10)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR10_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR10_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR10_NOFORCE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR10_FORCE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR11_SHIFT			_MK_SHIFT_CONST(11)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR11_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR11_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR11_NOFORCE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR11_FORCE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR12_SHIFT			_MK_SHIFT_CONST(12)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR12_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR12_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR12_NOFORCE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR12_FORCE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR13_SHIFT			_MK_SHIFT_CONST(13)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR13_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR13_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR13_NOFORCE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR13_FORCE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR14_SHIFT			_MK_SHIFT_CONST(14)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR14_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR14_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR14_NOFORCE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR14_FORCE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR15_SHIFT			_MK_SHIFT_CONST(15)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR15_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR15_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR15_NOFORCE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR15_FORCE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR16_SHIFT			_MK_SHIFT_CONST(16)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR16_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR16_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR16_NOFORCE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR16_FORCE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR17_SHIFT			_MK_SHIFT_CONST(17)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR17_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR17_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR17_NOFORCE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR17_FORCE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR18_SHIFT			_MK_SHIFT_CONST(18)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR18_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR18_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR18_NOFORCE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR18_FORCE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR19_SHIFT			_MK_SHIFT_CONST(19)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR19_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR19_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR19_NOFORCE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR19_FORCE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR20_SHIFT			_MK_SHIFT_CONST(20)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR20_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR20_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR20_NOFORCE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR20_FORCE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR21_SHIFT			_MK_SHIFT_CONST(21)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR21_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR21_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR21_NOFORCE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR21_FORCE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR22_SHIFT			_MK_SHIFT_CONST(22)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR22_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR22_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR22_NOFORCE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR22_FORCE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR23_SHIFT			_MK_SHIFT_CONST(23)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR23_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR23_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR23_NOFORCE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR23_FORCE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR24_SHIFT			_MK_SHIFT_CONST(24)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR24_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR24_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR24_NOFORCE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR24_FORCE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR25_SHIFT			_MK_SHIFT_CONST(25)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR25_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR25_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR25_NOFORCE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR25_FORCE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR26_SHIFT			_MK_SHIFT_CONST(26)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR26_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR26_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR26_NOFORCE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR26_FORCE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR27_SHIFT			_MK_SHIFT_CONST(27)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR27_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR27_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR27_NOFORCE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR27_FORCE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR28_SHIFT			_MK_SHIFT_CONST(28)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR28_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR28_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR28_NOFORCE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR28_FORCE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR29_SHIFT			_MK_SHIFT_CONST(29)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR29_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR29_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR29_NOFORCE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR29_FORCE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR30_SHIFT			_MK_SHIFT_CONST(30)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR30_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR30_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR30_NOFORCE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR30_FORCE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR31_SHIFT			_MK_SHIFT_CONST(31)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR31_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR31_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR31_NOFORCE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR31_FORCE			_MK_ENUM_CONST(0x1)
+
+
+// Register NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0			_MK_ADDR_CONST(0xe048)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR0_SHIFT			_MK_SHIFT_CONST(0)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR0_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR0_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR1_SHIFT			_MK_SHIFT_CONST(1)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR1_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR1_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR2_SHIFT			_MK_SHIFT_CONST(2)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR2_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR2_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR3_SHIFT			_MK_SHIFT_CONST(3)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR3_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR3_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR4_SHIFT			_MK_SHIFT_CONST(4)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR4_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR4_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR5_SHIFT			_MK_SHIFT_CONST(5)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR5_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR5_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR6_SHIFT			_MK_SHIFT_CONST(6)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR6_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR6_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR7_SHIFT			_MK_SHIFT_CONST(7)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR7_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR7_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR8_SHIFT			_MK_SHIFT_CONST(8)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR8_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR8_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR9_SHIFT			_MK_SHIFT_CONST(9)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR9_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR9_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR10_SHIFT			_MK_SHIFT_CONST(10)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR10_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR10_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR11_SHIFT			_MK_SHIFT_CONST(11)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR11_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR11_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR12_SHIFT			_MK_SHIFT_CONST(12)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR12_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR12_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR13_SHIFT			_MK_SHIFT_CONST(13)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR13_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR13_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR14_SHIFT			_MK_SHIFT_CONST(14)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR14_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR14_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR15_SHIFT			_MK_SHIFT_CONST(15)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR15_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR15_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR16_SHIFT			_MK_SHIFT_CONST(16)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR16_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR16_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR17_SHIFT			_MK_SHIFT_CONST(17)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR17_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR17_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR18_SHIFT			_MK_SHIFT_CONST(18)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR18_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR18_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR19_SHIFT			_MK_SHIFT_CONST(19)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR19_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR19_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR20_SHIFT			_MK_SHIFT_CONST(20)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR20_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR20_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR21_SHIFT			_MK_SHIFT_CONST(21)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR21_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR21_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR22_SHIFT			_MK_SHIFT_CONST(22)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR22_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR22_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR23_SHIFT			_MK_SHIFT_CONST(23)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR23_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR23_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR24_SHIFT			_MK_SHIFT_CONST(24)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR24_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR24_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR25_SHIFT			_MK_SHIFT_CONST(25)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR25_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR25_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR26_SHIFT			_MK_SHIFT_CONST(26)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR26_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR26_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR27_SHIFT			_MK_SHIFT_CONST(27)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR27_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR27_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR28_SHIFT			_MK_SHIFT_CONST(28)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR28_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR28_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR29_SHIFT			_MK_SHIFT_CONST(29)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR29_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR29_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR30_SHIFT			_MK_SHIFT_CONST(30)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR30_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR30_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR31_SHIFT			_MK_SHIFT_CONST(31)
+#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR31_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR31_SHIFT)
+
+
+// Register NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0
+#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0			_MK_ADDR_CONST(0xe050)
+#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR0_SHIFT			_MK_SHIFT_CONST(0)
+#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR0_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR0_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR0_NORELOAD			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR0_RELOAD			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR1_SHIFT			_MK_SHIFT_CONST(1)
+#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR1_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR1_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR1_NORELOAD			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR1_RELOAD			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR2_SHIFT			_MK_SHIFT_CONST(2)
+#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR2_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR2_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR2_NORELOAD			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR2_RELOAD			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR3_SHIFT			_MK_SHIFT_CONST(3)
+#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR3_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR3_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR3_NORELOAD			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR3_RELOAD			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR4_SHIFT			_MK_SHIFT_CONST(4)
+#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR4_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR4_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR4_NORELOAD			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR4_RELOAD			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR5_SHIFT			_MK_SHIFT_CONST(5)
+#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR5_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR5_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR5_NORELOAD			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR5_RELOAD			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR6_SHIFT			_MK_SHIFT_CONST(6)
+#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR6_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR6_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR6_NORELOAD			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR6_RELOAD			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR7_SHIFT			_MK_SHIFT_CONST(7)
+#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR7_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR7_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR7_NORELOAD			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR7_RELOAD			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR8_SHIFT			_MK_SHIFT_CONST(8)
+#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR8_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR8_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR8_NORELOAD			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR8_RELOAD			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR9_SHIFT			_MK_SHIFT_CONST(9)
+#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR9_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR9_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR9_NORELOAD			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR9_RELOAD			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR10_SHIFT			_MK_SHIFT_CONST(10)
+#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR10_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR10_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR10_NORELOAD			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR10_RELOAD			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR11_SHIFT			_MK_SHIFT_CONST(11)
+#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR11_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR11_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR11_NORELOAD			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR11_RELOAD			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR12_SHIFT			_MK_SHIFT_CONST(12)
+#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR12_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR12_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR12_NORELOAD			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR12_RELOAD			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR13_SHIFT			_MK_SHIFT_CONST(13)
+#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR13_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR13_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR13_NORELOAD			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR13_RELOAD			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR14_SHIFT			_MK_SHIFT_CONST(14)
+#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR14_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR14_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR14_NORELOAD			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR14_RELOAD			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR15_SHIFT			_MK_SHIFT_CONST(15)
+#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR15_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR15_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR15_NORELOAD			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR15_RELOAD			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR16_SHIFT			_MK_SHIFT_CONST(16)
+#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR16_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR16_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR16_NORELOAD			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR16_RELOAD			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR17_SHIFT			_MK_SHIFT_CONST(17)
+#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR17_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR17_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR17_NORELOAD			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR17_RELOAD			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR18_SHIFT			_MK_SHIFT_CONST(18)
+#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR18_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR18_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR18_NORELOAD			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR18_RELOAD			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR19_SHIFT			_MK_SHIFT_CONST(19)
+#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR19_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR19_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR19_NORELOAD			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR19_RELOAD			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR20_SHIFT			_MK_SHIFT_CONST(20)
+#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR20_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR20_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR20_NORELOAD			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR20_RELOAD			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR21_SHIFT			_MK_SHIFT_CONST(21)
+#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR21_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR21_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR21_NORELOAD			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR21_RELOAD			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR22_SHIFT			_MK_SHIFT_CONST(22)
+#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR22_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR22_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR22_NORELOAD			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR22_RELOAD			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR23_SHIFT			_MK_SHIFT_CONST(23)
+#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR23_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR23_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR23_NORELOAD			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR23_RELOAD			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR24_SHIFT			_MK_SHIFT_CONST(24)
+#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR24_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR24_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR24_NORELOAD			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR24_RELOAD			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR25_SHIFT			_MK_SHIFT_CONST(25)
+#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR25_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR25_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR25_NORELOAD			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR25_RELOAD			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR26_SHIFT			_MK_SHIFT_CONST(26)
+#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR26_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR26_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR26_NORELOAD			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR26_RELOAD			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR27_SHIFT			_MK_SHIFT_CONST(27)
+#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR27_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR27_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR27_NORELOAD			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR27_RELOAD			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR28_SHIFT			_MK_SHIFT_CONST(28)
+#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR28_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR28_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR28_NORELOAD			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR28_RELOAD			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR29_SHIFT			_MK_SHIFT_CONST(29)
+#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR29_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR29_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR29_NORELOAD			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR29_RELOAD			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR30_SHIFT			_MK_SHIFT_CONST(30)
+#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR30_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR30_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR30_NORELOAD			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR30_RELOAD			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR31_SHIFT			_MK_SHIFT_CONST(31)
+#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR31_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR31_SHIFT)
+#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR31_NORELOAD			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR31_RELOAD			_MK_ENUM_CONST(0x1)
+
+
+// Register NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0			_MK_ADDR_CONST(0xe060)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR32_SHIFT			_MK_SHIFT_CONST(0)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR32_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR32_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR32_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR32_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR33_SHIFT			_MK_SHIFT_CONST(1)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR33_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR33_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR33_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR33_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR34_SHIFT			_MK_SHIFT_CONST(2)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR34_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR34_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR34_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR34_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR35_SHIFT			_MK_SHIFT_CONST(3)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR35_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR35_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR35_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR35_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR36_SHIFT			_MK_SHIFT_CONST(4)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR36_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR36_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR36_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR36_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR37_SHIFT			_MK_SHIFT_CONST(5)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR37_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR37_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR37_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR37_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR38_SHIFT			_MK_SHIFT_CONST(6)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR38_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR38_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR38_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR38_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR39_SHIFT			_MK_SHIFT_CONST(7)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR39_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR39_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR39_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR39_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR40_SHIFT			_MK_SHIFT_CONST(8)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR40_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR40_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR40_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR40_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR41_SHIFT			_MK_SHIFT_CONST(9)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR41_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR41_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR41_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR41_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR42_SHIFT			_MK_SHIFT_CONST(10)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR42_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR42_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR42_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR42_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR43_SHIFT			_MK_SHIFT_CONST(11)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR43_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR43_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR43_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR43_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR44_SHIFT			_MK_SHIFT_CONST(12)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR44_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR44_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR44_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR44_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR45_SHIFT			_MK_SHIFT_CONST(13)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR45_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR45_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR45_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR45_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR46_SHIFT			_MK_SHIFT_CONST(14)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR46_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR46_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR46_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR46_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR47_SHIFT			_MK_SHIFT_CONST(15)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR47_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR47_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR47_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR47_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR48_SHIFT			_MK_SHIFT_CONST(16)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR48_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR48_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR48_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR48_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR49_SHIFT			_MK_SHIFT_CONST(17)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR49_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR49_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR49_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR49_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR50_SHIFT			_MK_SHIFT_CONST(18)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR50_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR50_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR50_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR50_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR51_SHIFT			_MK_SHIFT_CONST(19)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR51_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR51_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR51_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR51_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR52_SHIFT			_MK_SHIFT_CONST(20)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR52_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR52_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR52_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR52_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR53_SHIFT			_MK_SHIFT_CONST(21)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR53_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR53_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR53_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR53_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR54_SHIFT			_MK_SHIFT_CONST(22)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR54_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR54_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR54_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR54_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR55_SHIFT			_MK_SHIFT_CONST(23)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR55_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR55_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR55_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR55_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR56_SHIFT			_MK_SHIFT_CONST(24)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR56_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR56_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR56_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR56_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR57_SHIFT			_MK_SHIFT_CONST(25)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR57_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR57_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR57_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR57_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR58_SHIFT			_MK_SHIFT_CONST(26)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR58_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR58_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR58_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR58_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR59_SHIFT			_MK_SHIFT_CONST(27)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR59_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR59_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR59_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR59_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR60_SHIFT			_MK_SHIFT_CONST(28)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR60_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR60_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR60_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR60_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR61_SHIFT			_MK_SHIFT_CONST(29)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR61_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR61_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR61_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR61_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR62_SHIFT			_MK_SHIFT_CONST(30)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR62_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR62_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR62_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR62_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR63_SHIFT			_MK_SHIFT_CONST(31)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR63_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR63_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR63_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR63_ENABLE			_MK_ENUM_CONST(0x1)
+
+
+// Register NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0			_MK_ADDR_CONST(0xe064)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR32_SHIFT			_MK_SHIFT_CONST(0)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR32_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR32_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR32_NOFORCE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR32_FORCE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR33_SHIFT			_MK_SHIFT_CONST(1)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR33_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR33_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR33_NOFORCE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR33_FORCE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR34_SHIFT			_MK_SHIFT_CONST(2)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR34_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR34_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR34_NOFORCE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR34_FORCE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR35_SHIFT			_MK_SHIFT_CONST(3)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR35_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR35_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR35_NOFORCE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR35_FORCE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR36_SHIFT			_MK_SHIFT_CONST(4)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR36_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR36_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR36_NOFORCE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR36_FORCE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR37_SHIFT			_MK_SHIFT_CONST(5)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR37_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR37_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR37_NOFORCE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR37_FORCE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR38_SHIFT			_MK_SHIFT_CONST(6)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR38_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR38_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR38_NOFORCE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR38_FORCE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR39_SHIFT			_MK_SHIFT_CONST(7)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR39_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR39_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR39_NOFORCE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR39_FORCE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR40_SHIFT			_MK_SHIFT_CONST(8)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR40_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR40_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR40_NOFORCE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR40_FORCE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR41_SHIFT			_MK_SHIFT_CONST(9)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR41_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR41_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR41_NOFORCE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR41_FORCE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR42_SHIFT			_MK_SHIFT_CONST(10)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR42_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR42_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR42_NOFORCE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR42_FORCE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR43_SHIFT			_MK_SHIFT_CONST(11)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR43_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR43_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR43_NOFORCE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR43_FORCE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR44_SHIFT			_MK_SHIFT_CONST(12)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR44_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR44_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR44_NOFORCE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR44_FORCE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR45_SHIFT			_MK_SHIFT_CONST(13)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR45_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR45_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR45_NOFORCE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR45_FORCE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR46_SHIFT			_MK_SHIFT_CONST(14)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR46_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR46_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR46_NOFORCE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR46_FORCE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR47_SHIFT			_MK_SHIFT_CONST(15)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR47_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR47_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR47_NOFORCE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR47_FORCE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR48_SHIFT			_MK_SHIFT_CONST(16)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR48_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR48_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR48_NOFORCE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR48_FORCE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR49_SHIFT			_MK_SHIFT_CONST(17)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR49_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR49_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR49_NOFORCE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR49_FORCE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR50_SHIFT			_MK_SHIFT_CONST(18)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR50_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR50_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR50_NOFORCE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR50_FORCE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR51_SHIFT			_MK_SHIFT_CONST(19)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR51_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR51_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR51_NOFORCE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR51_FORCE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR52_SHIFT			_MK_SHIFT_CONST(20)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR52_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR52_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR52_NOFORCE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR52_FORCE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR53_SHIFT			_MK_SHIFT_CONST(21)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR53_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR53_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR53_NOFORCE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR53_FORCE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR54_SHIFT			_MK_SHIFT_CONST(22)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR54_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR54_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR54_NOFORCE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR54_FORCE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR55_SHIFT			_MK_SHIFT_CONST(23)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR55_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR55_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR55_NOFORCE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR55_FORCE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR56_SHIFT			_MK_SHIFT_CONST(24)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR56_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR56_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR56_NOFORCE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR56_FORCE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR57_SHIFT			_MK_SHIFT_CONST(25)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR57_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR57_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR57_NOFORCE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR57_FORCE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR58_SHIFT			_MK_SHIFT_CONST(26)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR58_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR58_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR58_NOFORCE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR58_FORCE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR59_SHIFT			_MK_SHIFT_CONST(27)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR59_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR59_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR59_NOFORCE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR59_FORCE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR60_SHIFT			_MK_SHIFT_CONST(28)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR60_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR60_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR60_NOFORCE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR60_FORCE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR61_SHIFT			_MK_SHIFT_CONST(29)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR61_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR61_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR61_NOFORCE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR61_FORCE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR62_SHIFT			_MK_SHIFT_CONST(30)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR62_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR62_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR62_NOFORCE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR62_FORCE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR63_SHIFT			_MK_SHIFT_CONST(31)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR63_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR63_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR63_NOFORCE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR63_FORCE			_MK_ENUM_CONST(0x1)
+
+
+// Register NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0			_MK_ADDR_CONST(0xe068)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR32_SHIFT			_MK_SHIFT_CONST(0)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR32_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR32_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR33_SHIFT			_MK_SHIFT_CONST(1)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR33_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR33_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR34_SHIFT			_MK_SHIFT_CONST(2)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR34_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR34_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR35_SHIFT			_MK_SHIFT_CONST(3)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR35_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR35_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR36_SHIFT			_MK_SHIFT_CONST(4)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR36_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR36_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR37_SHIFT			_MK_SHIFT_CONST(5)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR37_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR37_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR38_SHIFT			_MK_SHIFT_CONST(6)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR38_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR38_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR39_SHIFT			_MK_SHIFT_CONST(7)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR39_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR39_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR40_SHIFT			_MK_SHIFT_CONST(8)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR40_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR40_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR41_SHIFT			_MK_SHIFT_CONST(9)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR41_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR41_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR42_SHIFT			_MK_SHIFT_CONST(10)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR42_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR42_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR43_SHIFT			_MK_SHIFT_CONST(11)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR43_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR43_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR44_SHIFT			_MK_SHIFT_CONST(12)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR44_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR44_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR45_SHIFT			_MK_SHIFT_CONST(13)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR45_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR45_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR46_SHIFT			_MK_SHIFT_CONST(14)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR46_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR46_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR47_SHIFT			_MK_SHIFT_CONST(15)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR47_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR47_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR48_SHIFT			_MK_SHIFT_CONST(16)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR48_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR48_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR49_SHIFT			_MK_SHIFT_CONST(17)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR49_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR49_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR50_SHIFT			_MK_SHIFT_CONST(18)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR50_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR50_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR51_SHIFT			_MK_SHIFT_CONST(19)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR51_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR51_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR52_SHIFT			_MK_SHIFT_CONST(20)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR52_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR52_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR53_SHIFT			_MK_SHIFT_CONST(21)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR53_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR53_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR54_SHIFT			_MK_SHIFT_CONST(22)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR54_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR54_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR55_SHIFT			_MK_SHIFT_CONST(23)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR55_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR55_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR56_SHIFT			_MK_SHIFT_CONST(24)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR56_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR56_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR57_SHIFT			_MK_SHIFT_CONST(25)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR57_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR57_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR58_SHIFT			_MK_SHIFT_CONST(26)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR58_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR58_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR59_SHIFT			_MK_SHIFT_CONST(27)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR59_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR59_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR60_SHIFT			_MK_SHIFT_CONST(28)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR60_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR60_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR61_SHIFT			_MK_SHIFT_CONST(29)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR61_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR61_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR62_SHIFT			_MK_SHIFT_CONST(30)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR62_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR62_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR63_SHIFT			_MK_SHIFT_CONST(31)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR63_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR63_SHIFT)
+
+
+// Register NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0			_MK_ADDR_CONST(0xe06c)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR32_SHIFT			_MK_SHIFT_CONST(0)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR32_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR32_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR32_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR32_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR33_SHIFT			_MK_SHIFT_CONST(1)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR33_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR33_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR33_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR33_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR34_SHIFT			_MK_SHIFT_CONST(2)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR34_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR34_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR34_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR34_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR35_SHIFT			_MK_SHIFT_CONST(3)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR35_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR35_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR35_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR35_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR36_SHIFT			_MK_SHIFT_CONST(4)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR36_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR36_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR36_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR36_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR37_SHIFT			_MK_SHIFT_CONST(5)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR37_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR37_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR37_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR37_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR38_SHIFT			_MK_SHIFT_CONST(6)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR38_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR38_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR38_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR38_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR39_SHIFT			_MK_SHIFT_CONST(7)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR39_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR39_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR39_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR39_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR40_SHIFT			_MK_SHIFT_CONST(8)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR40_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR40_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR40_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR40_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR41_SHIFT			_MK_SHIFT_CONST(9)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR41_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR41_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR41_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR41_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR42_SHIFT			_MK_SHIFT_CONST(10)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR42_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR42_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR42_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR42_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR43_SHIFT			_MK_SHIFT_CONST(11)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR43_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR43_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR43_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR43_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR44_SHIFT			_MK_SHIFT_CONST(12)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR44_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR44_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR44_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR44_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR45_SHIFT			_MK_SHIFT_CONST(13)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR45_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR45_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR45_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR45_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR46_SHIFT			_MK_SHIFT_CONST(14)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR46_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR46_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR46_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR46_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR47_SHIFT			_MK_SHIFT_CONST(15)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR47_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR47_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR47_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR47_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR48_SHIFT			_MK_SHIFT_CONST(16)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR48_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR48_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR48_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR48_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR49_SHIFT			_MK_SHIFT_CONST(17)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR49_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR49_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR49_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR49_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR50_SHIFT			_MK_SHIFT_CONST(18)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR50_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR50_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR50_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR50_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR51_SHIFT			_MK_SHIFT_CONST(19)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR51_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR51_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR51_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR51_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR52_SHIFT			_MK_SHIFT_CONST(20)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR52_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR52_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR52_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR52_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR53_SHIFT			_MK_SHIFT_CONST(21)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR53_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR53_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR53_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR53_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR54_SHIFT			_MK_SHIFT_CONST(22)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR54_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR54_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR54_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR54_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR55_SHIFT			_MK_SHIFT_CONST(23)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR55_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR55_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR55_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR55_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR56_SHIFT			_MK_SHIFT_CONST(24)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR56_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR56_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR56_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR56_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR57_SHIFT			_MK_SHIFT_CONST(25)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR57_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR57_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR57_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR57_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR58_SHIFT			_MK_SHIFT_CONST(26)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR58_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR58_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR58_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR58_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR59_SHIFT			_MK_SHIFT_CONST(27)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR59_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR59_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR59_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR59_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR60_SHIFT			_MK_SHIFT_CONST(28)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR60_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR60_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR60_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR60_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR61_SHIFT			_MK_SHIFT_CONST(29)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR61_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR61_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR61_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR61_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR62_SHIFT			_MK_SHIFT_CONST(30)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR62_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR62_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR62_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR62_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR63_SHIFT			_MK_SHIFT_CONST(31)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR63_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR63_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR63_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR63_ENABLE			_MK_ENUM_CONST(0x1)
+
+
+// Register NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0			_MK_ADDR_CONST(0xe070)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR32_SHIFT			_MK_SHIFT_CONST(0)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR32_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR32_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR32_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR32_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR33_SHIFT			_MK_SHIFT_CONST(1)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR33_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR33_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR33_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR33_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR34_SHIFT			_MK_SHIFT_CONST(2)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR34_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR34_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR34_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR34_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR35_SHIFT			_MK_SHIFT_CONST(3)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR35_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR35_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR35_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR35_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR36_SHIFT			_MK_SHIFT_CONST(4)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR36_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR36_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR36_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR36_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR37_SHIFT			_MK_SHIFT_CONST(5)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR37_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR37_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR37_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR37_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR38_SHIFT			_MK_SHIFT_CONST(6)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR38_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR38_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR38_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR38_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR39_SHIFT			_MK_SHIFT_CONST(7)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR39_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR39_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR39_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR39_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR40_SHIFT			_MK_SHIFT_CONST(8)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR40_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR40_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR40_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR40_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR41_SHIFT			_MK_SHIFT_CONST(9)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR41_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR41_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR41_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR41_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR42_SHIFT			_MK_SHIFT_CONST(10)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR42_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR42_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR42_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR42_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR43_SHIFT			_MK_SHIFT_CONST(11)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR43_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR43_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR43_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR43_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR44_SHIFT			_MK_SHIFT_CONST(12)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR44_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR44_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR44_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR44_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR45_SHIFT			_MK_SHIFT_CONST(13)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR45_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR45_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR45_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR45_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR46_SHIFT			_MK_SHIFT_CONST(14)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR46_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR46_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR46_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR46_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR47_SHIFT			_MK_SHIFT_CONST(15)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR47_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR47_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR47_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR47_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR48_SHIFT			_MK_SHIFT_CONST(16)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR48_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR48_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR48_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR48_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR49_SHIFT			_MK_SHIFT_CONST(17)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR49_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR49_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR49_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR49_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR50_SHIFT			_MK_SHIFT_CONST(18)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR50_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR50_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR50_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR50_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR51_SHIFT			_MK_SHIFT_CONST(19)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR51_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR51_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR51_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR51_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR52_SHIFT			_MK_SHIFT_CONST(20)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR52_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR52_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR52_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR52_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR53_SHIFT			_MK_SHIFT_CONST(21)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR53_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR53_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR53_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR53_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR54_SHIFT			_MK_SHIFT_CONST(22)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR54_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR54_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR54_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR54_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR55_SHIFT			_MK_SHIFT_CONST(23)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR55_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR55_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR55_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR55_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR56_SHIFT			_MK_SHIFT_CONST(24)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR56_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR56_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR56_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR56_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR57_SHIFT			_MK_SHIFT_CONST(25)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR57_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR57_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR57_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR57_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR58_SHIFT			_MK_SHIFT_CONST(26)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR58_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR58_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR58_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR58_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR59_SHIFT			_MK_SHIFT_CONST(27)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR59_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR59_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR59_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR59_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR60_SHIFT			_MK_SHIFT_CONST(28)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR60_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR60_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR60_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR60_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR61_SHIFT			_MK_SHIFT_CONST(29)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR61_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR61_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR61_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR61_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR62_SHIFT			_MK_SHIFT_CONST(30)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR62_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR62_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR62_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR62_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR63_SHIFT			_MK_SHIFT_CONST(31)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR63_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR63_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR63_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR63_ENABLE			_MK_ENUM_CONST(0x1)
+
+
+// Register NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0			_MK_ADDR_CONST(0xe074)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR32_SHIFT			_MK_SHIFT_CONST(0)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR32_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR32_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR32_NOFORCE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR32_FORCE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR33_SHIFT			_MK_SHIFT_CONST(1)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR33_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR33_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR33_NOFORCE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR33_FORCE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR34_SHIFT			_MK_SHIFT_CONST(2)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR34_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR34_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR34_NOFORCE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR34_FORCE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR35_SHIFT			_MK_SHIFT_CONST(3)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR35_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR35_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR35_NOFORCE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR35_FORCE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR36_SHIFT			_MK_SHIFT_CONST(4)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR36_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR36_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR36_NOFORCE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR36_FORCE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR37_SHIFT			_MK_SHIFT_CONST(5)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR37_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR37_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR37_NOFORCE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR37_FORCE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR38_SHIFT			_MK_SHIFT_CONST(6)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR38_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR38_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR38_NOFORCE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR38_FORCE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR39_SHIFT			_MK_SHIFT_CONST(7)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR39_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR39_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR39_NOFORCE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR39_FORCE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR40_SHIFT			_MK_SHIFT_CONST(8)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR40_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR40_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR40_NOFORCE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR40_FORCE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR41_SHIFT			_MK_SHIFT_CONST(9)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR41_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR41_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR41_NOFORCE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR41_FORCE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR42_SHIFT			_MK_SHIFT_CONST(10)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR42_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR42_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR42_NOFORCE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR42_FORCE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR43_SHIFT			_MK_SHIFT_CONST(11)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR43_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR43_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR43_NOFORCE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR43_FORCE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR44_SHIFT			_MK_SHIFT_CONST(12)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR44_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR44_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR44_NOFORCE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR44_FORCE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR45_SHIFT			_MK_SHIFT_CONST(13)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR45_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR45_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR45_NOFORCE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR45_FORCE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR46_SHIFT			_MK_SHIFT_CONST(14)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR46_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR46_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR46_NOFORCE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR46_FORCE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR47_SHIFT			_MK_SHIFT_CONST(15)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR47_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR47_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR47_NOFORCE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR47_FORCE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR48_SHIFT			_MK_SHIFT_CONST(16)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR48_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR48_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR48_NOFORCE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR48_FORCE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR49_SHIFT			_MK_SHIFT_CONST(17)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR49_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR49_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR49_NOFORCE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR49_FORCE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR50_SHIFT			_MK_SHIFT_CONST(18)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR50_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR50_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR50_NOFORCE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR50_FORCE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR51_SHIFT			_MK_SHIFT_CONST(19)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR51_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR51_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR51_NOFORCE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR51_FORCE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR52_SHIFT			_MK_SHIFT_CONST(20)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR52_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR52_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR52_NOFORCE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR52_FORCE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR53_SHIFT			_MK_SHIFT_CONST(21)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR53_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR53_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR53_NOFORCE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR53_FORCE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR54_SHIFT			_MK_SHIFT_CONST(22)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR54_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR54_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR54_NOFORCE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR54_FORCE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR55_SHIFT			_MK_SHIFT_CONST(23)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR55_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR55_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR55_NOFORCE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR55_FORCE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR56_SHIFT			_MK_SHIFT_CONST(24)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR56_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR56_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR56_NOFORCE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR56_FORCE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR57_SHIFT			_MK_SHIFT_CONST(25)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR57_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR57_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR57_NOFORCE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR57_FORCE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR58_SHIFT			_MK_SHIFT_CONST(26)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR58_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR58_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR58_NOFORCE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR58_FORCE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR59_SHIFT			_MK_SHIFT_CONST(27)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR59_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR59_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR59_NOFORCE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR59_FORCE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR60_SHIFT			_MK_SHIFT_CONST(28)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR60_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR60_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR60_NOFORCE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR60_FORCE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR61_SHIFT			_MK_SHIFT_CONST(29)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR61_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR61_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR61_NOFORCE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR61_FORCE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR62_SHIFT			_MK_SHIFT_CONST(30)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR62_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR62_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR62_NOFORCE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR62_FORCE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR63_SHIFT			_MK_SHIFT_CONST(31)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR63_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR63_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR63_NOFORCE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR63_FORCE			_MK_ENUM_CONST(0x1)
+
+
+// Register NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0			_MK_ADDR_CONST(0xe078)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR32_SHIFT			_MK_SHIFT_CONST(0)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR32_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR32_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR33_SHIFT			_MK_SHIFT_CONST(1)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR33_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR33_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR34_SHIFT			_MK_SHIFT_CONST(2)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR34_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR34_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR35_SHIFT			_MK_SHIFT_CONST(3)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR35_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR35_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR36_SHIFT			_MK_SHIFT_CONST(4)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR36_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR36_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR37_SHIFT			_MK_SHIFT_CONST(5)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR37_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR37_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR38_SHIFT			_MK_SHIFT_CONST(6)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR38_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR38_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR39_SHIFT			_MK_SHIFT_CONST(7)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR39_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR39_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR40_SHIFT			_MK_SHIFT_CONST(8)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR40_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR40_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR41_SHIFT			_MK_SHIFT_CONST(9)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR41_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR41_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR42_SHIFT			_MK_SHIFT_CONST(10)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR42_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR42_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR43_SHIFT			_MK_SHIFT_CONST(11)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR43_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR43_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR44_SHIFT			_MK_SHIFT_CONST(12)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR44_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR44_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR45_SHIFT			_MK_SHIFT_CONST(13)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR45_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR45_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR46_SHIFT			_MK_SHIFT_CONST(14)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR46_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR46_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR47_SHIFT			_MK_SHIFT_CONST(15)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR47_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR47_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR48_SHIFT			_MK_SHIFT_CONST(16)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR48_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR48_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR49_SHIFT			_MK_SHIFT_CONST(17)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR49_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR49_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR50_SHIFT			_MK_SHIFT_CONST(18)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR50_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR50_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR51_SHIFT			_MK_SHIFT_CONST(19)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR51_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR51_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR52_SHIFT			_MK_SHIFT_CONST(20)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR52_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR52_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR53_SHIFT			_MK_SHIFT_CONST(21)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR53_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR53_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR54_SHIFT			_MK_SHIFT_CONST(22)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR54_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR54_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR55_SHIFT			_MK_SHIFT_CONST(23)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR55_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR55_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR56_SHIFT			_MK_SHIFT_CONST(24)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR56_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR56_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR57_SHIFT			_MK_SHIFT_CONST(25)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR57_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR57_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR58_SHIFT			_MK_SHIFT_CONST(26)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR58_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR58_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR59_SHIFT			_MK_SHIFT_CONST(27)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR59_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR59_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR60_SHIFT			_MK_SHIFT_CONST(28)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR60_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR60_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR61_SHIFT			_MK_SHIFT_CONST(29)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR61_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR61_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR62_SHIFT			_MK_SHIFT_CONST(30)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR62_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR62_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR63_SHIFT			_MK_SHIFT_CONST(31)
+#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR63_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR63_SHIFT)
+
+
+// Register NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0
+#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0			_MK_ADDR_CONST(0xe080)
+#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR32_SHIFT			_MK_SHIFT_CONST(0)
+#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR32_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR32_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR32_NORELOAD			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR32_RELOAD			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR33_SHIFT			_MK_SHIFT_CONST(1)
+#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR33_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR33_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR33_NORELOAD			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR33_RELOAD			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR34_SHIFT			_MK_SHIFT_CONST(2)
+#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR34_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR34_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR34_NORELOAD			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR34_RELOAD			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR35_SHIFT			_MK_SHIFT_CONST(3)
+#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR35_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR35_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR35_NORELOAD			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR35_RELOAD			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR36_SHIFT			_MK_SHIFT_CONST(4)
+#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR36_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR36_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR36_NORELOAD			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR36_RELOAD			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR37_SHIFT			_MK_SHIFT_CONST(5)
+#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR37_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR37_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR37_NORELOAD			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR37_RELOAD			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR38_SHIFT			_MK_SHIFT_CONST(6)
+#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR38_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR38_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR38_NORELOAD			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR38_RELOAD			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR39_SHIFT			_MK_SHIFT_CONST(7)
+#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR39_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR39_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR39_NORELOAD			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR39_RELOAD			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR40_SHIFT			_MK_SHIFT_CONST(8)
+#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR40_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR40_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR40_NORELOAD			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR40_RELOAD			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR41_SHIFT			_MK_SHIFT_CONST(9)
+#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR41_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR41_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR41_NORELOAD			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR41_RELOAD			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR42_SHIFT			_MK_SHIFT_CONST(10)
+#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR42_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR42_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR42_NORELOAD			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR42_RELOAD			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR43_SHIFT			_MK_SHIFT_CONST(11)
+#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR43_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR43_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR43_NORELOAD			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR43_RELOAD			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR44_SHIFT			_MK_SHIFT_CONST(12)
+#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR44_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR44_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR44_NORELOAD			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR44_RELOAD			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR45_SHIFT			_MK_SHIFT_CONST(13)
+#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR45_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR45_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR45_NORELOAD			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR45_RELOAD			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR46_SHIFT			_MK_SHIFT_CONST(14)
+#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR46_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR46_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR46_NORELOAD			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR46_RELOAD			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR47_SHIFT			_MK_SHIFT_CONST(15)
+#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR47_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR47_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR47_NORELOAD			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR47_RELOAD			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR48_SHIFT			_MK_SHIFT_CONST(16)
+#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR48_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR48_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR48_NORELOAD			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR48_RELOAD			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR49_SHIFT			_MK_SHIFT_CONST(17)
+#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR49_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR49_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR49_NORELOAD			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR49_RELOAD			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR50_SHIFT			_MK_SHIFT_CONST(18)
+#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR50_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR50_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR50_NORELOAD			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR50_RELOAD			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR51_SHIFT			_MK_SHIFT_CONST(19)
+#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR51_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR51_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR51_NORELOAD			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR51_RELOAD			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR52_SHIFT			_MK_SHIFT_CONST(20)
+#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR52_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR52_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR52_NORELOAD			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR52_RELOAD			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR53_SHIFT			_MK_SHIFT_CONST(21)
+#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR53_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR53_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR53_NORELOAD			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR53_RELOAD			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR54_SHIFT			_MK_SHIFT_CONST(22)
+#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR54_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR54_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR54_NORELOAD			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR54_RELOAD			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR55_SHIFT			_MK_SHIFT_CONST(23)
+#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR55_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR55_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR55_NORELOAD			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR55_RELOAD			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR56_SHIFT			_MK_SHIFT_CONST(24)
+#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR56_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR56_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR56_NORELOAD			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR56_RELOAD			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR57_SHIFT			_MK_SHIFT_CONST(25)
+#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR57_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR57_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR57_NORELOAD			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR57_RELOAD			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR58_SHIFT			_MK_SHIFT_CONST(26)
+#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR58_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR58_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR58_NORELOAD			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR58_RELOAD			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR59_SHIFT			_MK_SHIFT_CONST(27)
+#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR59_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR59_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR59_NORELOAD			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR59_RELOAD			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR60_SHIFT			_MK_SHIFT_CONST(28)
+#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR60_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR60_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR60_NORELOAD			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR60_RELOAD			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR61_SHIFT			_MK_SHIFT_CONST(29)
+#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR61_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR61_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR61_NORELOAD			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR61_RELOAD			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR62_SHIFT			_MK_SHIFT_CONST(30)
+#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR62_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR62_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR62_NORELOAD			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR62_RELOAD			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR63_SHIFT			_MK_SHIFT_CONST(31)
+#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR63_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR63_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR63_NORELOAD			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR63_RELOAD			_MK_ENUM_CONST(0x1)
+
+
+// Register NVDLA_GEC_ERRSLICE1_MISSIONERR_ECC_CORRECTION_DIS_0
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ECC_CORRECTION_DIS_0			_MK_ADDR_CONST(0xe084)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ECC_CORRECTION_DIS_0_ERR63_SHIFT			_MK_SHIFT_CONST(31)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ECC_CORRECTION_DIS_0_ERR63_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_ECC_CORRECTION_DIS_0_ERR63_SHIFT)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ECC_CORRECTION_DIS_0_ERR63_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ECC_CORRECTION_DIS_0_ERR63_ENABLE			_MK_ENUM_CONST(0x1)
+
+
+// Register NVDLA_GEC_ERRSLICE2_MISSIONERR_ENABLE_0
+#define NVDLA_GEC_ERRSLICE2_MISSIONERR_ENABLE_0			_MK_ADDR_CONST(0xe090)
+#define NVDLA_GEC_ERRSLICE2_MISSIONERR_ENABLE_0_ERR64_SHIFT			_MK_SHIFT_CONST(0)
+#define NVDLA_GEC_ERRSLICE2_MISSIONERR_ENABLE_0_ERR64_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE2_MISSIONERR_ENABLE_0_ERR64_SHIFT)
+#define NVDLA_GEC_ERRSLICE2_MISSIONERR_ENABLE_0_ERR64_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE2_MISSIONERR_ENABLE_0_ERR64_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE2_MISSIONERR_ENABLE_0_ERR65_SHIFT			_MK_SHIFT_CONST(1)
+#define NVDLA_GEC_ERRSLICE2_MISSIONERR_ENABLE_0_ERR65_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE2_MISSIONERR_ENABLE_0_ERR65_SHIFT)
+#define NVDLA_GEC_ERRSLICE2_MISSIONERR_ENABLE_0_ERR65_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE2_MISSIONERR_ENABLE_0_ERR65_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE2_MISSIONERR_ENABLE_0_ERR66_SHIFT			_MK_SHIFT_CONST(2)
+#define NVDLA_GEC_ERRSLICE2_MISSIONERR_ENABLE_0_ERR66_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE2_MISSIONERR_ENABLE_0_ERR66_SHIFT)
+#define NVDLA_GEC_ERRSLICE2_MISSIONERR_ENABLE_0_ERR66_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE2_MISSIONERR_ENABLE_0_ERR66_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE2_MISSIONERR_ENABLE_0_ERR67_SHIFT			_MK_SHIFT_CONST(3)
+#define NVDLA_GEC_ERRSLICE2_MISSIONERR_ENABLE_0_ERR67_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE2_MISSIONERR_ENABLE_0_ERR67_SHIFT)
+#define NVDLA_GEC_ERRSLICE2_MISSIONERR_ENABLE_0_ERR67_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE2_MISSIONERR_ENABLE_0_ERR67_ENABLE			_MK_ENUM_CONST(0x1)
+
+
+// Register NVDLA_GEC_ERRSLICE2_MISSIONERR_FORCE_0
+#define NVDLA_GEC_ERRSLICE2_MISSIONERR_FORCE_0			_MK_ADDR_CONST(0xe094)
+#define NVDLA_GEC_ERRSLICE2_MISSIONERR_FORCE_0_ERR64_SHIFT			_MK_SHIFT_CONST(0)
+#define NVDLA_GEC_ERRSLICE2_MISSIONERR_FORCE_0_ERR64_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE2_MISSIONERR_FORCE_0_ERR64_SHIFT)
+#define NVDLA_GEC_ERRSLICE2_MISSIONERR_FORCE_0_ERR64_NOFORCE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE2_MISSIONERR_FORCE_0_ERR64_FORCE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE2_MISSIONERR_FORCE_0_ERR65_SHIFT			_MK_SHIFT_CONST(1)
+#define NVDLA_GEC_ERRSLICE2_MISSIONERR_FORCE_0_ERR65_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE2_MISSIONERR_FORCE_0_ERR65_SHIFT)
+#define NVDLA_GEC_ERRSLICE2_MISSIONERR_FORCE_0_ERR65_NOFORCE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE2_MISSIONERR_FORCE_0_ERR65_FORCE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE2_MISSIONERR_FORCE_0_ERR66_SHIFT			_MK_SHIFT_CONST(2)
+#define NVDLA_GEC_ERRSLICE2_MISSIONERR_FORCE_0_ERR66_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE2_MISSIONERR_FORCE_0_ERR66_SHIFT)
+#define NVDLA_GEC_ERRSLICE2_MISSIONERR_FORCE_0_ERR66_NOFORCE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE2_MISSIONERR_FORCE_0_ERR66_FORCE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE2_MISSIONERR_FORCE_0_ERR67_SHIFT			_MK_SHIFT_CONST(3)
+#define NVDLA_GEC_ERRSLICE2_MISSIONERR_FORCE_0_ERR67_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE2_MISSIONERR_FORCE_0_ERR67_SHIFT)
+#define NVDLA_GEC_ERRSLICE2_MISSIONERR_FORCE_0_ERR67_NOFORCE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE2_MISSIONERR_FORCE_0_ERR67_FORCE			_MK_ENUM_CONST(0x1)
+
+
+// Register NVDLA_GEC_ERRSLICE2_MISSIONERR_STATUS_0
+#define NVDLA_GEC_ERRSLICE2_MISSIONERR_STATUS_0			_MK_ADDR_CONST(0xe098)
+#define NVDLA_GEC_ERRSLICE2_MISSIONERR_STATUS_0_ERR64_SHIFT			_MK_SHIFT_CONST(0)
+#define NVDLA_GEC_ERRSLICE2_MISSIONERR_STATUS_0_ERR64_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE2_MISSIONERR_STATUS_0_ERR64_SHIFT)
+#define NVDLA_GEC_ERRSLICE2_MISSIONERR_STATUS_0_ERR65_SHIFT			_MK_SHIFT_CONST(1)
+#define NVDLA_GEC_ERRSLICE2_MISSIONERR_STATUS_0_ERR65_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE2_MISSIONERR_STATUS_0_ERR65_SHIFT)
+#define NVDLA_GEC_ERRSLICE2_MISSIONERR_STATUS_0_ERR66_SHIFT			_MK_SHIFT_CONST(2)
+#define NVDLA_GEC_ERRSLICE2_MISSIONERR_STATUS_0_ERR66_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE2_MISSIONERR_STATUS_0_ERR66_SHIFT)
+#define NVDLA_GEC_ERRSLICE2_MISSIONERR_STATUS_0_ERR67_SHIFT			_MK_SHIFT_CONST(3)
+#define NVDLA_GEC_ERRSLICE2_MISSIONERR_STATUS_0_ERR67_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE2_MISSIONERR_STATUS_0_ERR67_SHIFT)
+
+
+// Register NVDLA_GEC_ERRSLICE2_MISSIONERR_INJECT_0
+#define NVDLA_GEC_ERRSLICE2_MISSIONERR_INJECT_0			_MK_ADDR_CONST(0xe09c)
+#define NVDLA_GEC_ERRSLICE2_MISSIONERR_INJECT_0_ERR64_SHIFT			_MK_SHIFT_CONST(0)
+#define NVDLA_GEC_ERRSLICE2_MISSIONERR_INJECT_0_ERR64_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE2_MISSIONERR_INJECT_0_ERR64_SHIFT)
+#define NVDLA_GEC_ERRSLICE2_MISSIONERR_INJECT_0_ERR64_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE2_MISSIONERR_INJECT_0_ERR64_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE2_MISSIONERR_INJECT_0_ERR65_SHIFT			_MK_SHIFT_CONST(1)
+#define NVDLA_GEC_ERRSLICE2_MISSIONERR_INJECT_0_ERR65_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE2_MISSIONERR_INJECT_0_ERR65_SHIFT)
+#define NVDLA_GEC_ERRSLICE2_MISSIONERR_INJECT_0_ERR65_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE2_MISSIONERR_INJECT_0_ERR65_ENABLE			_MK_ENUM_CONST(0x1)
+
+
+// Register NVDLA_GEC_ERRSLICE2_LATENTERR_ENABLE_0
+#define NVDLA_GEC_ERRSLICE2_LATENTERR_ENABLE_0			_MK_ADDR_CONST(0xe0a0)
+#define NVDLA_GEC_ERRSLICE2_LATENTERR_ENABLE_0_ERR64_SHIFT			_MK_SHIFT_CONST(0)
+#define NVDLA_GEC_ERRSLICE2_LATENTERR_ENABLE_0_ERR64_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE2_LATENTERR_ENABLE_0_ERR64_SHIFT)
+#define NVDLA_GEC_ERRSLICE2_LATENTERR_ENABLE_0_ERR64_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE2_LATENTERR_ENABLE_0_ERR64_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE2_LATENTERR_ENABLE_0_ERR65_SHIFT			_MK_SHIFT_CONST(1)
+#define NVDLA_GEC_ERRSLICE2_LATENTERR_ENABLE_0_ERR65_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE2_LATENTERR_ENABLE_0_ERR65_SHIFT)
+#define NVDLA_GEC_ERRSLICE2_LATENTERR_ENABLE_0_ERR65_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE2_LATENTERR_ENABLE_0_ERR65_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE2_LATENTERR_ENABLE_0_ERR66_SHIFT			_MK_SHIFT_CONST(2)
+#define NVDLA_GEC_ERRSLICE2_LATENTERR_ENABLE_0_ERR66_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE2_LATENTERR_ENABLE_0_ERR66_SHIFT)
+#define NVDLA_GEC_ERRSLICE2_LATENTERR_ENABLE_0_ERR66_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE2_LATENTERR_ENABLE_0_ERR66_ENABLE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE2_LATENTERR_ENABLE_0_ERR67_SHIFT			_MK_SHIFT_CONST(3)
+#define NVDLA_GEC_ERRSLICE2_LATENTERR_ENABLE_0_ERR67_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE2_LATENTERR_ENABLE_0_ERR67_SHIFT)
+#define NVDLA_GEC_ERRSLICE2_LATENTERR_ENABLE_0_ERR67_DISABLE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE2_LATENTERR_ENABLE_0_ERR67_ENABLE			_MK_ENUM_CONST(0x1)
+
+
+// Register NVDLA_GEC_ERRSLICE2_LATENTERR_FORCE_0
+#define NVDLA_GEC_ERRSLICE2_LATENTERR_FORCE_0			_MK_ADDR_CONST(0xe0a4)
+#define NVDLA_GEC_ERRSLICE2_LATENTERR_FORCE_0_ERR64_SHIFT			_MK_SHIFT_CONST(0)
+#define NVDLA_GEC_ERRSLICE2_LATENTERR_FORCE_0_ERR64_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE2_LATENTERR_FORCE_0_ERR64_SHIFT)
+#define NVDLA_GEC_ERRSLICE2_LATENTERR_FORCE_0_ERR64_NOFORCE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE2_LATENTERR_FORCE_0_ERR64_FORCE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE2_LATENTERR_FORCE_0_ERR65_SHIFT			_MK_SHIFT_CONST(1)
+#define NVDLA_GEC_ERRSLICE2_LATENTERR_FORCE_0_ERR65_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE2_LATENTERR_FORCE_0_ERR65_SHIFT)
+#define NVDLA_GEC_ERRSLICE2_LATENTERR_FORCE_0_ERR65_NOFORCE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE2_LATENTERR_FORCE_0_ERR65_FORCE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE2_LATENTERR_FORCE_0_ERR66_SHIFT			_MK_SHIFT_CONST(2)
+#define NVDLA_GEC_ERRSLICE2_LATENTERR_FORCE_0_ERR66_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE2_LATENTERR_FORCE_0_ERR66_SHIFT)
+#define NVDLA_GEC_ERRSLICE2_LATENTERR_FORCE_0_ERR66_NOFORCE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE2_LATENTERR_FORCE_0_ERR66_FORCE			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE2_LATENTERR_FORCE_0_ERR67_SHIFT			_MK_SHIFT_CONST(3)
+#define NVDLA_GEC_ERRSLICE2_LATENTERR_FORCE_0_ERR67_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE2_LATENTERR_FORCE_0_ERR67_SHIFT)
+#define NVDLA_GEC_ERRSLICE2_LATENTERR_FORCE_0_ERR67_NOFORCE			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE2_LATENTERR_FORCE_0_ERR67_FORCE			_MK_ENUM_CONST(0x1)
+
+
+// Register NVDLA_GEC_ERRSLICE2_LATENTERR_STATUS_0
+#define NVDLA_GEC_ERRSLICE2_LATENTERR_STATUS_0			_MK_ADDR_CONST(0xe0a8)
+#define NVDLA_GEC_ERRSLICE2_LATENTERR_STATUS_0_ERR64_SHIFT			_MK_SHIFT_CONST(0)
+#define NVDLA_GEC_ERRSLICE2_LATENTERR_STATUS_0_ERR64_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE2_LATENTERR_STATUS_0_ERR64_SHIFT)
+#define NVDLA_GEC_ERRSLICE2_LATENTERR_STATUS_0_ERR65_SHIFT			_MK_SHIFT_CONST(1)
+#define NVDLA_GEC_ERRSLICE2_LATENTERR_STATUS_0_ERR65_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE2_LATENTERR_STATUS_0_ERR65_SHIFT)
+#define NVDLA_GEC_ERRSLICE2_LATENTERR_STATUS_0_ERR66_SHIFT			_MK_SHIFT_CONST(2)
+#define NVDLA_GEC_ERRSLICE2_LATENTERR_STATUS_0_ERR66_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE2_LATENTERR_STATUS_0_ERR66_SHIFT)
+#define NVDLA_GEC_ERRSLICE2_LATENTERR_STATUS_0_ERR67_SHIFT			_MK_SHIFT_CONST(3)
+#define NVDLA_GEC_ERRSLICE2_LATENTERR_STATUS_0_ERR67_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE2_LATENTERR_STATUS_0_ERR67_SHIFT)
+
+
+// Register NVDLA_GEC_ERRSLICE2_COUNTER_RELOAD_0
+#define NVDLA_GEC_ERRSLICE2_COUNTER_RELOAD_0			_MK_ADDR_CONST(0xe0b0)
+#define NVDLA_GEC_ERRSLICE2_COUNTER_RELOAD_0_ERR64_SHIFT			_MK_SHIFT_CONST(0)
+#define NVDLA_GEC_ERRSLICE2_COUNTER_RELOAD_0_ERR64_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE2_COUNTER_RELOAD_0_ERR64_SHIFT)
+#define NVDLA_GEC_ERRSLICE2_COUNTER_RELOAD_0_ERR64_NORELOAD			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE2_COUNTER_RELOAD_0_ERR64_RELOAD			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE2_COUNTER_RELOAD_0_ERR65_SHIFT			_MK_SHIFT_CONST(1)
+#define NVDLA_GEC_ERRSLICE2_COUNTER_RELOAD_0_ERR65_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE2_COUNTER_RELOAD_0_ERR65_SHIFT)
+#define NVDLA_GEC_ERRSLICE2_COUNTER_RELOAD_0_ERR65_NORELOAD			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE2_COUNTER_RELOAD_0_ERR65_RELOAD			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE2_COUNTER_RELOAD_0_ERR66_SHIFT			_MK_SHIFT_CONST(2)
+#define NVDLA_GEC_ERRSLICE2_COUNTER_RELOAD_0_ERR66_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE2_COUNTER_RELOAD_0_ERR66_SHIFT)
+#define NVDLA_GEC_ERRSLICE2_COUNTER_RELOAD_0_ERR66_NORELOAD			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE2_COUNTER_RELOAD_0_ERR66_RELOAD			_MK_ENUM_CONST(0x1)
+#define NVDLA_GEC_ERRSLICE2_COUNTER_RELOAD_0_ERR67_SHIFT			_MK_SHIFT_CONST(3)
+#define NVDLA_GEC_ERRSLICE2_COUNTER_RELOAD_0_ERR67_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE2_COUNTER_RELOAD_0_ERR67_SHIFT)
+#define NVDLA_GEC_ERRSLICE2_COUNTER_RELOAD_0_ERR67_NORELOAD			_MK_ENUM_CONST(0x0)
+#define NVDLA_GEC_ERRSLICE2_COUNTER_RELOAD_0_ERR67_RELOAD			_MK_ENUM_CONST(0x1)
+
+
+
+// To satisfy various compilers and platforms,
+// we let users control the types and syntax of certain constants, using macros.
+#ifndef _MK_SHIFT_CONST
+  #define _MK_SHIFT_CONST(_constant_) _constant_
+#endif
+#ifndef _MK_MASK_CONST
+  #define _MK_MASK_CONST(_constant_) _constant_
+#endif
+#ifndef _MK_ENUM_CONST
+  #define _MK_ENUM_CONST(_constant_) (_constant_ ## UL)
+#endif
+#ifndef _MK_ADDR_CONST
+  #define _MK_ADDR_CONST(_constant_) _constant_
+#endif
+#ifndef _MK_FIELD_CONST
+  #define _MK_FIELD_CONST(_mask_, _shift_) (_MK_MASK_CONST(_mask_) << _MK_SHIFT_CONST(_shift_))
+#endif
+
+
+// Register NVDLA_CVIF_CFG_RD_WEIGHT_0_0
+#define NVDLA_CVIF_CFG_RD_WEIGHT_0_0			_MK_ADDR_CONST(0xf000)
+#define NVDLA_CVIF_CFG_RD_WEIGHT_0_0_RD_WEIGHT_BDMA_SHIFT			_MK_SHIFT_CONST(0)
+#define NVDLA_CVIF_CFG_RD_WEIGHT_0_0_RD_WEIGHT_BDMA_FIELD			_MK_FIELD_CONST(0xff, NVDLA_CVIF_CFG_RD_WEIGHT_0_0_RD_WEIGHT_BDMA_SHIFT)
+#define NVDLA_CVIF_CFG_RD_WEIGHT_0_0_RD_WEIGHT_SDP_SHIFT			_MK_SHIFT_CONST(8)
+#define NVDLA_CVIF_CFG_RD_WEIGHT_0_0_RD_WEIGHT_SDP_FIELD			_MK_FIELD_CONST(0xff, NVDLA_CVIF_CFG_RD_WEIGHT_0_0_RD_WEIGHT_SDP_SHIFT)
+#define NVDLA_CVIF_CFG_RD_WEIGHT_0_0_RD_WEIGHT_PDP_SHIFT			_MK_SHIFT_CONST(16)
+#define NVDLA_CVIF_CFG_RD_WEIGHT_0_0_RD_WEIGHT_PDP_FIELD			_MK_FIELD_CONST(0xff, NVDLA_CVIF_CFG_RD_WEIGHT_0_0_RD_WEIGHT_PDP_SHIFT)
+#define NVDLA_CVIF_CFG_RD_WEIGHT_0_0_RD_WEIGHT_CDP_SHIFT			_MK_SHIFT_CONST(24)
+#define NVDLA_CVIF_CFG_RD_WEIGHT_0_0_RD_WEIGHT_CDP_FIELD			_MK_FIELD_CONST(0xff, NVDLA_CVIF_CFG_RD_WEIGHT_0_0_RD_WEIGHT_CDP_SHIFT)
+
+
+// Register NVDLA_CVIF_CFG_RD_WEIGHT_1_0
+#define NVDLA_CVIF_CFG_RD_WEIGHT_1_0			_MK_ADDR_CONST(0xf004)
+#define NVDLA_CVIF_CFG_RD_WEIGHT_1_0_RD_WEIGHT_SDP_B_SHIFT			_MK_SHIFT_CONST(0)
+#define NVDLA_CVIF_CFG_RD_WEIGHT_1_0_RD_WEIGHT_SDP_B_FIELD			_MK_FIELD_CONST(0xff, NVDLA_CVIF_CFG_RD_WEIGHT_1_0_RD_WEIGHT_SDP_B_SHIFT)
+#define NVDLA_CVIF_CFG_RD_WEIGHT_1_0_RD_WEIGHT_SDP_N_SHIFT			_MK_SHIFT_CONST(8)
+#define NVDLA_CVIF_CFG_RD_WEIGHT_1_0_RD_WEIGHT_SDP_N_FIELD			_MK_FIELD_CONST(0xff, NVDLA_CVIF_CFG_RD_WEIGHT_1_0_RD_WEIGHT_SDP_N_SHIFT)
+#define NVDLA_CVIF_CFG_RD_WEIGHT_1_0_RD_WEIGHT_SDP_E_SHIFT			_MK_SHIFT_CONST(16)
+#define NVDLA_CVIF_CFG_RD_WEIGHT_1_0_RD_WEIGHT_SDP_E_FIELD			_MK_FIELD_CONST(0xff, NVDLA_CVIF_CFG_RD_WEIGHT_1_0_RD_WEIGHT_SDP_E_SHIFT)
+#define NVDLA_CVIF_CFG_RD_WEIGHT_1_0_RD_WEIGHT_CDMA_DAT_SHIFT			_MK_SHIFT_CONST(24)
+#define NVDLA_CVIF_CFG_RD_WEIGHT_1_0_RD_WEIGHT_CDMA_DAT_FIELD			_MK_FIELD_CONST(0xff, NVDLA_CVIF_CFG_RD_WEIGHT_1_0_RD_WEIGHT_CDMA_DAT_SHIFT)
+
+
+// Register NVDLA_CVIF_CFG_RD_WEIGHT_2_0
+#define NVDLA_CVIF_CFG_RD_WEIGHT_2_0			_MK_ADDR_CONST(0xf008)
+#define NVDLA_CVIF_CFG_RD_WEIGHT_2_0_RD_WEIGHT_CDMA_WT_SHIFT			_MK_SHIFT_CONST(0)
+#define NVDLA_CVIF_CFG_RD_WEIGHT_2_0_RD_WEIGHT_CDMA_WT_FIELD			_MK_FIELD_CONST(0xff, NVDLA_CVIF_CFG_RD_WEIGHT_2_0_RD_WEIGHT_CDMA_WT_SHIFT)
+#define NVDLA_CVIF_CFG_RD_WEIGHT_2_0_RD_WEIGHT_RBK_SHIFT			_MK_SHIFT_CONST(8)
+#define NVDLA_CVIF_CFG_RD_WEIGHT_2_0_RD_WEIGHT_RBK_FIELD			_MK_FIELD_CONST(0xff, NVDLA_CVIF_CFG_RD_WEIGHT_2_0_RD_WEIGHT_RBK_SHIFT)
+#define NVDLA_CVIF_CFG_RD_WEIGHT_2_0_RD_WEIGHT_RSV_1_SHIFT			_MK_SHIFT_CONST(16)
+#define NVDLA_CVIF_CFG_RD_WEIGHT_2_0_RD_WEIGHT_RSV_1_FIELD			_MK_FIELD_CONST(0xff, NVDLA_CVIF_CFG_RD_WEIGHT_2_0_RD_WEIGHT_RSV_1_SHIFT)
+#define NVDLA_CVIF_CFG_RD_WEIGHT_2_0_RD_WEIGHT_RSV_0_SHIFT			_MK_SHIFT_CONST(24)
+#define NVDLA_CVIF_CFG_RD_WEIGHT_2_0_RD_WEIGHT_RSV_0_FIELD			_MK_FIELD_CONST(0xff, NVDLA_CVIF_CFG_RD_WEIGHT_2_0_RD_WEIGHT_RSV_0_SHIFT)
+
+
+// Register NVDLA_CVIF_CFG_WR_WEIGHT_0_0
+#define NVDLA_CVIF_CFG_WR_WEIGHT_0_0			_MK_ADDR_CONST(0xf00c)
+#define NVDLA_CVIF_CFG_WR_WEIGHT_0_0_WR_WEIGHT_BDMA_SHIFT			_MK_SHIFT_CONST(0)
+#define NVDLA_CVIF_CFG_WR_WEIGHT_0_0_WR_WEIGHT_BDMA_FIELD			_MK_FIELD_CONST(0xff, NVDLA_CVIF_CFG_WR_WEIGHT_0_0_WR_WEIGHT_BDMA_SHIFT)
+#define NVDLA_CVIF_CFG_WR_WEIGHT_0_0_WR_WEIGHT_SDP_SHIFT			_MK_SHIFT_CONST(8)
+#define NVDLA_CVIF_CFG_WR_WEIGHT_0_0_WR_WEIGHT_SDP_FIELD			_MK_FIELD_CONST(0xff, NVDLA_CVIF_CFG_WR_WEIGHT_0_0_WR_WEIGHT_SDP_SHIFT)
+#define NVDLA_CVIF_CFG_WR_WEIGHT_0_0_WR_WEIGHT_PDP_SHIFT			_MK_SHIFT_CONST(16)
+#define NVDLA_CVIF_CFG_WR_WEIGHT_0_0_WR_WEIGHT_PDP_FIELD			_MK_FIELD_CONST(0xff, NVDLA_CVIF_CFG_WR_WEIGHT_0_0_WR_WEIGHT_PDP_SHIFT)
+#define NVDLA_CVIF_CFG_WR_WEIGHT_0_0_WR_WEIGHT_CDP_SHIFT			_MK_SHIFT_CONST(24)
+#define NVDLA_CVIF_CFG_WR_WEIGHT_0_0_WR_WEIGHT_CDP_FIELD			_MK_FIELD_CONST(0xff, NVDLA_CVIF_CFG_WR_WEIGHT_0_0_WR_WEIGHT_CDP_SHIFT)
+
+
+// Register NVDLA_CVIF_CFG_WR_WEIGHT_1_0
+#define NVDLA_CVIF_CFG_WR_WEIGHT_1_0			_MK_ADDR_CONST(0xf010)
+#define NVDLA_CVIF_CFG_WR_WEIGHT_1_0_WR_WEIGHT_RBK_SHIFT			_MK_SHIFT_CONST(0)
+#define NVDLA_CVIF_CFG_WR_WEIGHT_1_0_WR_WEIGHT_RBK_FIELD			_MK_FIELD_CONST(0xff, NVDLA_CVIF_CFG_WR_WEIGHT_1_0_WR_WEIGHT_RBK_SHIFT)
+#define NVDLA_CVIF_CFG_WR_WEIGHT_1_0_WR_WEIGHT_RSV_2_SHIFT			_MK_SHIFT_CONST(8)
+#define NVDLA_CVIF_CFG_WR_WEIGHT_1_0_WR_WEIGHT_RSV_2_FIELD			_MK_FIELD_CONST(0xff, NVDLA_CVIF_CFG_WR_WEIGHT_1_0_WR_WEIGHT_RSV_2_SHIFT)
+#define NVDLA_CVIF_CFG_WR_WEIGHT_1_0_WR_WEIGHT_RSV_1_SHIFT			_MK_SHIFT_CONST(16)
+#define NVDLA_CVIF_CFG_WR_WEIGHT_1_0_WR_WEIGHT_RSV_1_FIELD			_MK_FIELD_CONST(0xff, NVDLA_CVIF_CFG_WR_WEIGHT_1_0_WR_WEIGHT_RSV_1_SHIFT)
+#define NVDLA_CVIF_CFG_WR_WEIGHT_1_0_WR_WEIGHT_RSV_0_SHIFT			_MK_SHIFT_CONST(24)
+#define NVDLA_CVIF_CFG_WR_WEIGHT_1_0_WR_WEIGHT_RSV_0_FIELD			_MK_FIELD_CONST(0xff, NVDLA_CVIF_CFG_WR_WEIGHT_1_0_WR_WEIGHT_RSV_0_SHIFT)
+
+
+// Register NVDLA_CVIF_CFG_OUTSTANDING_CNT_0
+#define NVDLA_CVIF_CFG_OUTSTANDING_CNT_0			_MK_ADDR_CONST(0xf014)
+#define NVDLA_CVIF_CFG_OUTSTANDING_CNT_0_RD_OS_CNT_SHIFT			_MK_SHIFT_CONST(0)
+#define NVDLA_CVIF_CFG_OUTSTANDING_CNT_0_RD_OS_CNT_FIELD			_MK_FIELD_CONST(0xff, NVDLA_CVIF_CFG_OUTSTANDING_CNT_0_RD_OS_CNT_SHIFT)
+#define NVDLA_CVIF_CFG_OUTSTANDING_CNT_0_WR_OS_CNT_SHIFT			_MK_SHIFT_CONST(8)
+#define NVDLA_CVIF_CFG_OUTSTANDING_CNT_0_WR_OS_CNT_FIELD			_MK_FIELD_CONST(0xff, NVDLA_CVIF_CFG_OUTSTANDING_CNT_0_WR_OS_CNT_SHIFT)
+
+
+// Register NVDLA_CVIF_STATUS_0
+#define NVDLA_CVIF_STATUS_0			_MK_ADDR_CONST(0xf018)
+#define NVDLA_CVIF_STATUS_0_IDLE_SHIFT			_MK_SHIFT_CONST(8)
+#define NVDLA_CVIF_STATUS_0_IDLE_FIELD			_MK_FIELD_CONST(0x1, NVDLA_CVIF_STATUS_0_IDLE_SHIFT)
+#define NVDLA_CVIF_STATUS_0_IDLE_NO			_MK_ENUM_CONST(0x0)
+#define NVDLA_CVIF_STATUS_0_IDLE_YES			_MK_ENUM_CONST(0x1)
+
+
+
+// To satisfy various compilers and platforms,
+// we let users control the types and syntax of certain constants, using macros.
+#ifndef _MK_SHIFT_CONST
+  #define _MK_SHIFT_CONST(_constant_) _constant_
+#endif
+#ifndef _MK_MASK_CONST
+  #define _MK_MASK_CONST(_constant_) _constant_
+#endif
+#ifndef _MK_ENUM_CONST
+  #define _MK_ENUM_CONST(_constant_) (_constant_ ## UL)
+#endif
+#ifndef _MK_ADDR_CONST
+  #define _MK_ADDR_CONST(_constant_) _constant_
+#endif
+#ifndef _MK_FIELD_CONST
+  #define _MK_FIELD_CONST(_mask_, _shift_) (_MK_MASK_CONST(_mask_) << _MK_SHIFT_CONST(_shift_))
+#endif
+
+
+// Register BDMA_CFG_SRC_ADDR_LOW_0
+#define BDMA_CFG_SRC_ADDR_LOW_0			_MK_ADDR_CONST(0x10000)
+#define BDMA_CFG_SRC_ADDR_LOW_0_V32_SHIFT			_MK_SHIFT_CONST(5)
+#define BDMA_CFG_SRC_ADDR_LOW_0_V32_FIELD			_MK_FIELD_CONST(0x7ffffff, BDMA_CFG_SRC_ADDR_LOW_0_V32_SHIFT)
+
+
+// Register BDMA_CFG_SRC_ADDR_HIGH_0
+#define BDMA_CFG_SRC_ADDR_HIGH_0			_MK_ADDR_CONST(0x10004)
+#define BDMA_CFG_SRC_ADDR_HIGH_0_V8_SHIFT			_MK_SHIFT_CONST(0)
+#define BDMA_CFG_SRC_ADDR_HIGH_0_V8_FIELD			_MK_FIELD_CONST(0xffffffff, BDMA_CFG_SRC_ADDR_HIGH_0_V8_SHIFT)
+
+
+// Register BDMA_CFG_DST_ADDR_LOW_0
+#define BDMA_CFG_DST_ADDR_LOW_0			_MK_ADDR_CONST(0x10008)
+#define BDMA_CFG_DST_ADDR_LOW_0_V32_SHIFT			_MK_SHIFT_CONST(5)
+#define BDMA_CFG_DST_ADDR_LOW_0_V32_FIELD			_MK_FIELD_CONST(0x7ffffff, BDMA_CFG_DST_ADDR_LOW_0_V32_SHIFT)
+
+
+// Register BDMA_CFG_DST_ADDR_HIGH_0
+#define BDMA_CFG_DST_ADDR_HIGH_0			_MK_ADDR_CONST(0x1000c)
+#define BDMA_CFG_DST_ADDR_HIGH_0_V8_SHIFT			_MK_SHIFT_CONST(0)
+#define BDMA_CFG_DST_ADDR_HIGH_0_V8_FIELD			_MK_FIELD_CONST(0xffffffff, BDMA_CFG_DST_ADDR_HIGH_0_V8_SHIFT)
+
+
+// Register BDMA_CFG_LINE_0
+#define BDMA_CFG_LINE_0			_MK_ADDR_CONST(0x10010)
+#define BDMA_CFG_LINE_0_SIZE_SHIFT			_MK_SHIFT_CONST(0)
+#define BDMA_CFG_LINE_0_SIZE_FIELD			_MK_FIELD_CONST(0x1fff, BDMA_CFG_LINE_0_SIZE_SHIFT)
+
+
+// Register BDMA_CFG_CMD_0
+#define BDMA_CFG_CMD_0			_MK_ADDR_CONST(0x10014)
+#define BDMA_CFG_CMD_0_SRC_RAM_TYPE_SHIFT			_MK_SHIFT_CONST(0)
+#define BDMA_CFG_CMD_0_SRC_RAM_TYPE_FIELD			_MK_FIELD_CONST(0x1, BDMA_CFG_CMD_0_SRC_RAM_TYPE_SHIFT)
+#define BDMA_CFG_CMD_0_SRC_RAM_TYPE_CVSRAM			_MK_ENUM_CONST(0x0)
+#define BDMA_CFG_CMD_0_SRC_RAM_TYPE_MC			_MK_ENUM_CONST(0x1)
+#define BDMA_CFG_CMD_0_DST_RAM_TYPE_SHIFT			_MK_SHIFT_CONST(1)
+#define BDMA_CFG_CMD_0_DST_RAM_TYPE_FIELD			_MK_FIELD_CONST(0x1, BDMA_CFG_CMD_0_DST_RAM_TYPE_SHIFT)
+#define BDMA_CFG_CMD_0_DST_RAM_TYPE_CVSRAM			_MK_ENUM_CONST(0x0)
+#define BDMA_CFG_CMD_0_DST_RAM_TYPE_MC			_MK_ENUM_CONST(0x1)
+
+
+// Register BDMA_CFG_LINE_REPEAT_0
+#define BDMA_CFG_LINE_REPEAT_0			_MK_ADDR_CONST(0x10018)
+#define BDMA_CFG_LINE_REPEAT_0_NUMBER_SHIFT			_MK_SHIFT_CONST(0)
+#define BDMA_CFG_LINE_REPEAT_0_NUMBER_FIELD			_MK_FIELD_CONST(0xffffff, BDMA_CFG_LINE_REPEAT_0_NUMBER_SHIFT)
+
+
+// Register BDMA_CFG_SRC_LINE_0
+#define BDMA_CFG_SRC_LINE_0			_MK_ADDR_CONST(0x1001c)
+#define BDMA_CFG_SRC_LINE_0_STRIDE_SHIFT			_MK_SHIFT_CONST(5)
+#define BDMA_CFG_SRC_LINE_0_STRIDE_FIELD			_MK_FIELD_CONST(0x7ffffff, BDMA_CFG_SRC_LINE_0_STRIDE_SHIFT)
+
+
+// Register BDMA_CFG_DST_LINE_0
+#define BDMA_CFG_DST_LINE_0			_MK_ADDR_CONST(0x10020)
+#define BDMA_CFG_DST_LINE_0_STRIDE_SHIFT			_MK_SHIFT_CONST(5)
+#define BDMA_CFG_DST_LINE_0_STRIDE_FIELD			_MK_FIELD_CONST(0x7ffffff, BDMA_CFG_DST_LINE_0_STRIDE_SHIFT)
+
+
+// Register BDMA_CFG_SURF_REPEAT_0
+#define BDMA_CFG_SURF_REPEAT_0			_MK_ADDR_CONST(0x10024)
+#define BDMA_CFG_SURF_REPEAT_0_NUMBER_SHIFT			_MK_SHIFT_CONST(0)
+#define BDMA_CFG_SURF_REPEAT_0_NUMBER_FIELD			_MK_FIELD_CONST(0xffffff, BDMA_CFG_SURF_REPEAT_0_NUMBER_SHIFT)
+
+
+// Register BDMA_CFG_SRC_SURF_0
+#define BDMA_CFG_SRC_SURF_0			_MK_ADDR_CONST(0x10028)
+#define BDMA_CFG_SRC_SURF_0_STRIDE_SHIFT			_MK_SHIFT_CONST(5)
+#define BDMA_CFG_SRC_SURF_0_STRIDE_FIELD			_MK_FIELD_CONST(0x7ffffff, BDMA_CFG_SRC_SURF_0_STRIDE_SHIFT)
+
+
+// Register BDMA_CFG_DST_SURF_0
+#define BDMA_CFG_DST_SURF_0			_MK_ADDR_CONST(0x1002c)
+#define BDMA_CFG_DST_SURF_0_STRIDE_SHIFT			_MK_SHIFT_CONST(5)
+#define BDMA_CFG_DST_SURF_0_STRIDE_FIELD			_MK_FIELD_CONST(0x7ffffff, BDMA_CFG_DST_SURF_0_STRIDE_SHIFT)
+
+
+// Register BDMA_CFG_OP_0
+#define BDMA_CFG_OP_0			_MK_ADDR_CONST(0x10030)
+#define BDMA_CFG_OP_0_EN_SHIFT			_MK_SHIFT_CONST(0)
+#define BDMA_CFG_OP_0_EN_FIELD			_MK_FIELD_CONST(0x1, BDMA_CFG_OP_0_EN_SHIFT)
+#define BDMA_CFG_OP_0_EN_DISABLE			_MK_ENUM_CONST(0x0)
+#define BDMA_CFG_OP_0_EN_ENABLE			_MK_ENUM_CONST(0x1)
+
+
+// Register BDMA_CFG_LAUNCH0_0
+#define BDMA_CFG_LAUNCH0_0			_MK_ADDR_CONST(0x10034)
+#define BDMA_CFG_LAUNCH0_0_GRP0_LAUNCH_SHIFT			_MK_SHIFT_CONST(0)
+#define BDMA_CFG_LAUNCH0_0_GRP0_LAUNCH_FIELD			_MK_FIELD_CONST(0x1, BDMA_CFG_LAUNCH0_0_GRP0_LAUNCH_SHIFT)
+#define BDMA_CFG_LAUNCH0_0_GRP0_LAUNCH_NO			_MK_ENUM_CONST(0x0)
+#define BDMA_CFG_LAUNCH0_0_GRP0_LAUNCH_YES			_MK_ENUM_CONST(0x1)
+
+
+// Register BDMA_CFG_LAUNCH1_0
+#define BDMA_CFG_LAUNCH1_0			_MK_ADDR_CONST(0x10038)
+#define BDMA_CFG_LAUNCH1_0_GRP1_LAUNCH_SHIFT			_MK_SHIFT_CONST(0)
+#define BDMA_CFG_LAUNCH1_0_GRP1_LAUNCH_FIELD			_MK_FIELD_CONST(0x1, BDMA_CFG_LAUNCH1_0_GRP1_LAUNCH_SHIFT)
+#define BDMA_CFG_LAUNCH1_0_GRP1_LAUNCH_NO			_MK_ENUM_CONST(0x0)
+#define BDMA_CFG_LAUNCH1_0_GRP1_LAUNCH_YES			_MK_ENUM_CONST(0x1)
+
+
+// Register BDMA_CFG_STATUS_0
+#define BDMA_CFG_STATUS_0			_MK_ADDR_CONST(0x1003c)
+#define BDMA_CFG_STATUS_0_STALL_COUNT_EN_SHIFT			_MK_SHIFT_CONST(0)
+#define BDMA_CFG_STATUS_0_STALL_COUNT_EN_FIELD			_MK_FIELD_CONST(0x1, BDMA_CFG_STATUS_0_STALL_COUNT_EN_SHIFT)
+#define BDMA_CFG_STATUS_0_STALL_COUNT_EN_NO			_MK_ENUM_CONST(0x0)
+#define BDMA_CFG_STATUS_0_STALL_COUNT_EN_YES			_MK_ENUM_CONST(0x1)
+
+
+// Register BDMA_STATUS_0
+#define BDMA_STATUS_0			_MK_ADDR_CONST(0x10040)
+#define BDMA_STATUS_0_FREE_SLOT_SHIFT			_MK_SHIFT_CONST(0)
+#define BDMA_STATUS_0_FREE_SLOT_FIELD			_MK_FIELD_CONST(0xff, BDMA_STATUS_0_FREE_SLOT_SHIFT)
+#define BDMA_STATUS_0_IDLE_SHIFT			_MK_SHIFT_CONST(8)
+#define BDMA_STATUS_0_IDLE_FIELD			_MK_FIELD_CONST(0x1, BDMA_STATUS_0_IDLE_SHIFT)
+#define BDMA_STATUS_0_IDLE_NO			_MK_ENUM_CONST(0x0)
+#define BDMA_STATUS_0_IDLE_YES			_MK_ENUM_CONST(0x1)
+#define BDMA_STATUS_0_GRP0_BUSY_SHIFT			_MK_SHIFT_CONST(9)
+#define BDMA_STATUS_0_GRP0_BUSY_FIELD			_MK_FIELD_CONST(0x1, BDMA_STATUS_0_GRP0_BUSY_SHIFT)
+#define BDMA_STATUS_0_GRP0_BUSY_NO			_MK_ENUM_CONST(0x0)
+#define BDMA_STATUS_0_GRP0_BUSY_YES			_MK_ENUM_CONST(0x1)
+#define BDMA_STATUS_0_GRP1_BUSY_SHIFT			_MK_SHIFT_CONST(10)
+#define BDMA_STATUS_0_GRP1_BUSY_FIELD			_MK_FIELD_CONST(0x1, BDMA_STATUS_0_GRP1_BUSY_SHIFT)
+#define BDMA_STATUS_0_GRP1_BUSY_NO			_MK_ENUM_CONST(0x0)
+#define BDMA_STATUS_0_GRP1_BUSY_YES			_MK_ENUM_CONST(0x1)
+
+
+// Register BDMA_STATUS_GRP0_READ_STALL_0
+#define BDMA_STATUS_GRP0_READ_STALL_0			_MK_ADDR_CONST(0x10044)
+#define BDMA_STATUS_GRP0_READ_STALL_0_COUNT_SHIFT			_MK_SHIFT_CONST(0)
+#define BDMA_STATUS_GRP0_READ_STALL_0_COUNT_FIELD			_MK_FIELD_CONST(0xffffffff, BDMA_STATUS_GRP0_READ_STALL_0_COUNT_SHIFT)
+
+
+// Register BDMA_STATUS_GRP0_WRITE_STALL_0
+#define BDMA_STATUS_GRP0_WRITE_STALL_0			_MK_ADDR_CONST(0x10048)
+#define BDMA_STATUS_GRP0_WRITE_STALL_0_COUNT_SHIFT			_MK_SHIFT_CONST(0)
+#define BDMA_STATUS_GRP0_WRITE_STALL_0_COUNT_FIELD			_MK_FIELD_CONST(0xffffffff, BDMA_STATUS_GRP0_WRITE_STALL_0_COUNT_SHIFT)
+
+
+// Register BDMA_STATUS_GRP1_READ_STALL_0
+#define BDMA_STATUS_GRP1_READ_STALL_0			_MK_ADDR_CONST(0x1004c)
+#define BDMA_STATUS_GRP1_READ_STALL_0_COUNT_SHIFT			_MK_SHIFT_CONST(0)
+#define BDMA_STATUS_GRP1_READ_STALL_0_COUNT_FIELD			_MK_FIELD_CONST(0xffffffff, BDMA_STATUS_GRP1_READ_STALL_0_COUNT_SHIFT)
+
+
+// Register BDMA_STATUS_GRP1_WRITE_STALL_0
+#define BDMA_STATUS_GRP1_WRITE_STALL_0			_MK_ADDR_CONST(0x10050)
+#define BDMA_STATUS_GRP1_WRITE_STALL_0_COUNT_SHIFT			_MK_SHIFT_CONST(0)
+#define BDMA_STATUS_GRP1_WRITE_STALL_0_COUNT_FIELD			_MK_FIELD_CONST(0xffffffff, BDMA_STATUS_GRP1_WRITE_STALL_0_COUNT_SHIFT)
+
+
+
+// To satisfy various compilers and platforms,
+// we let users control the types and syntax of certain constants, using macros.
+#ifndef _MK_SHIFT_CONST
+  #define _MK_SHIFT_CONST(_constant_) _constant_
+#endif
+#ifndef _MK_MASK_CONST
+  #define _MK_MASK_CONST(_constant_) _constant_
+#endif
+#ifndef _MK_ENUM_CONST
+  #define _MK_ENUM_CONST(_constant_) (_constant_ ## UL)
+#endif
+#ifndef _MK_ADDR_CONST
+  #define _MK_ADDR_CONST(_constant_) _constant_
+#endif
+#ifndef _MK_FIELD_CONST
+  #define _MK_FIELD_CONST(_mask_, _shift_) (_MK_MASK_CONST(_mask_) << _MK_SHIFT_CONST(_shift_))
+#endif
+
+
+// Register RBK_S_STATUS_0
+#define RBK_S_STATUS_0			_MK_ADDR_CONST(0x11000)
+#define RBK_S_STATUS_0_STATUS_0_SHIFT			_MK_SHIFT_CONST(0)
+#define RBK_S_STATUS_0_STATUS_0_FIELD			_MK_FIELD_CONST(0x3, RBK_S_STATUS_0_STATUS_0_SHIFT)
+#define RBK_S_STATUS_0_STATUS_0_IDLE			_MK_ENUM_CONST(0x0)
+#define RBK_S_STATUS_0_STATUS_0_RUNNING			_MK_ENUM_CONST(0x1)
+#define RBK_S_STATUS_0_STATUS_0_PENDING			_MK_ENUM_CONST(0x2)
+#define RBK_S_STATUS_0_STATUS_1_SHIFT			_MK_SHIFT_CONST(16)
+#define RBK_S_STATUS_0_STATUS_1_FIELD			_MK_FIELD_CONST(0x3, RBK_S_STATUS_0_STATUS_1_SHIFT)
+#define RBK_S_STATUS_0_STATUS_1_IDLE			_MK_ENUM_CONST(0x0)
+#define RBK_S_STATUS_0_STATUS_1_RUNNING			_MK_ENUM_CONST(0x1)
+#define RBK_S_STATUS_0_STATUS_1_PENDING			_MK_ENUM_CONST(0x2)
+
+
+// Register RBK_S_POINTER_0
+#define RBK_S_POINTER_0			_MK_ADDR_CONST(0x11004)
+#define RBK_S_POINTER_0_PRODUCER_SHIFT			_MK_SHIFT_CONST(0)
+#define RBK_S_POINTER_0_PRODUCER_FIELD			_MK_FIELD_CONST(0x1, RBK_S_POINTER_0_PRODUCER_SHIFT)
+#define RBK_S_POINTER_0_PRODUCER_GROUP_0			_MK_ENUM_CONST(0x0)
+#define RBK_S_POINTER_0_PRODUCER_GROUP_1			_MK_ENUM_CONST(0x1)
+#define RBK_S_POINTER_0_CONSUMER_SHIFT			_MK_SHIFT_CONST(16)
+#define RBK_S_POINTER_0_CONSUMER_FIELD			_MK_FIELD_CONST(0x1, RBK_S_POINTER_0_CONSUMER_SHIFT)
+#define RBK_S_POINTER_0_CONSUMER_GROUP_0			_MK_ENUM_CONST(0x0)
+#define RBK_S_POINTER_0_CONSUMER_GROUP_1			_MK_ENUM_CONST(0x1)
+
+
+// Register RBK_D_OP_ENABLE_0
+#define RBK_D_OP_ENABLE_0			_MK_ADDR_CONST(0x11008)
+#define RBK_D_OP_ENABLE_0_OP_EN_SHIFT			_MK_SHIFT_CONST(0)
+#define RBK_D_OP_ENABLE_0_OP_EN_FIELD			_MK_FIELD_CONST(0x1, RBK_D_OP_ENABLE_0_OP_EN_SHIFT)
+#define RBK_D_OP_ENABLE_0_OP_EN_DISABLE			_MK_ENUM_CONST(0x0)
+#define RBK_D_OP_ENABLE_0_OP_EN_ENABLE			_MK_ENUM_CONST(0x1)
+
+
+// Register RBK_D_MISC_CFG_0
+#define RBK_D_MISC_CFG_0			_MK_ADDR_CONST(0x1100c)
+#define RBK_D_MISC_CFG_0_RUBIK_MODE_SHIFT			_MK_SHIFT_CONST(0)
+#define RBK_D_MISC_CFG_0_RUBIK_MODE_FIELD			_MK_FIELD_CONST(0x3, RBK_D_MISC_CFG_0_RUBIK_MODE_SHIFT)
+#define RBK_D_MISC_CFG_0_RUBIK_MODE_CONTRACT			_MK_ENUM_CONST(0x0)
+#define RBK_D_MISC_CFG_0_RUBIK_MODE_SPLIT			_MK_ENUM_CONST(0x1)
+#define RBK_D_MISC_CFG_0_RUBIK_MODE_MERGE			_MK_ENUM_CONST(0x2)
+#define RBK_D_MISC_CFG_0_IN_PRECISION_SHIFT			_MK_SHIFT_CONST(8)
+#define RBK_D_MISC_CFG_0_IN_PRECISION_FIELD			_MK_FIELD_CONST(0x3, RBK_D_MISC_CFG_0_IN_PRECISION_SHIFT)
+#define RBK_D_MISC_CFG_0_IN_PRECISION_INT8			_MK_ENUM_CONST(0x0)
+#define RBK_D_MISC_CFG_0_IN_PRECISION_INT16			_MK_ENUM_CONST(0x1)
+#define RBK_D_MISC_CFG_0_IN_PRECISION_FP16			_MK_ENUM_CONST(0x2)
+
+
+// Register RBK_D_DAIN_RAM_TYPE_0
+#define RBK_D_DAIN_RAM_TYPE_0			_MK_ADDR_CONST(0x11010)
+#define RBK_D_DAIN_RAM_TYPE_0_DATAIN_RAM_TYPE_SHIFT			_MK_SHIFT_CONST(0)
+#define RBK_D_DAIN_RAM_TYPE_0_DATAIN_RAM_TYPE_FIELD			_MK_FIELD_CONST(0x1, RBK_D_DAIN_RAM_TYPE_0_DATAIN_RAM_TYPE_SHIFT)
+#define RBK_D_DAIN_RAM_TYPE_0_DATAIN_RAM_TYPE_CVIF			_MK_ENUM_CONST(0x0)
+#define RBK_D_DAIN_RAM_TYPE_0_DATAIN_RAM_TYPE_MCIF			_MK_ENUM_CONST(0x1)
+
+
+// Register RBK_D_DATAIN_SIZE_0_0
+#define RBK_D_DATAIN_SIZE_0_0			_MK_ADDR_CONST(0x11014)
+#define RBK_D_DATAIN_SIZE_0_0_DATAIN_WIDTH_SHIFT			_MK_SHIFT_CONST(0)
+#define RBK_D_DATAIN_SIZE_0_0_DATAIN_WIDTH_FIELD			_MK_FIELD_CONST(0x1fff, RBK_D_DATAIN_SIZE_0_0_DATAIN_WIDTH_SHIFT)
+#define RBK_D_DATAIN_SIZE_0_0_DATAIN_HEIGHT_SHIFT			_MK_SHIFT_CONST(16)
+#define RBK_D_DATAIN_SIZE_0_0_DATAIN_HEIGHT_FIELD			_MK_FIELD_CONST(0x1fff, RBK_D_DATAIN_SIZE_0_0_DATAIN_HEIGHT_SHIFT)
+
+
+// Register RBK_D_DATAIN_SIZE_1_0
+#define RBK_D_DATAIN_SIZE_1_0			_MK_ADDR_CONST(0x11018)
+#define RBK_D_DATAIN_SIZE_1_0_DATAIN_CHANNEL_SHIFT			_MK_SHIFT_CONST(0)
+#define RBK_D_DATAIN_SIZE_1_0_DATAIN_CHANNEL_FIELD			_MK_FIELD_CONST(0x1fff, RBK_D_DATAIN_SIZE_1_0_DATAIN_CHANNEL_SHIFT)
+
+
+// Register RBK_D_DAIN_ADDR_HIGH_0
+#define RBK_D_DAIN_ADDR_HIGH_0			_MK_ADDR_CONST(0x1101c)
+#define RBK_D_DAIN_ADDR_HIGH_0_DAIN_ADDR_HIGH_SHIFT			_MK_SHIFT_CONST(0)
+#define RBK_D_DAIN_ADDR_HIGH_0_DAIN_ADDR_HIGH_FIELD			_MK_FIELD_CONST(0xffffffff, RBK_D_DAIN_ADDR_HIGH_0_DAIN_ADDR_HIGH_SHIFT)
+
+
+// Register RBK_D_DAIN_ADDR_LOW_0
+#define RBK_D_DAIN_ADDR_LOW_0			_MK_ADDR_CONST(0x11020)
+#define RBK_D_DAIN_ADDR_LOW_0_DAIN_ADDR_LOW_SHIFT			_MK_SHIFT_CONST(5)
+#define RBK_D_DAIN_ADDR_LOW_0_DAIN_ADDR_LOW_FIELD			_MK_FIELD_CONST(0x7ffffff, RBK_D_DAIN_ADDR_LOW_0_DAIN_ADDR_LOW_SHIFT)
+
+
+// Register RBK_D_DAIN_LINE_STRIDE_0
+#define RBK_D_DAIN_LINE_STRIDE_0			_MK_ADDR_CONST(0x11024)
+#define RBK_D_DAIN_LINE_STRIDE_0_DAIN_LINE_STRIDE_SHIFT			_MK_SHIFT_CONST(5)
+#define RBK_D_DAIN_LINE_STRIDE_0_DAIN_LINE_STRIDE_FIELD			_MK_FIELD_CONST(0x7ffffff, RBK_D_DAIN_LINE_STRIDE_0_DAIN_LINE_STRIDE_SHIFT)
+
+
+// Register RBK_D_DAIN_SURF_STRIDE_0
+#define RBK_D_DAIN_SURF_STRIDE_0			_MK_ADDR_CONST(0x11028)
+#define RBK_D_DAIN_SURF_STRIDE_0_DAIN_SURF_STRIDE_SHIFT			_MK_SHIFT_CONST(5)
+#define RBK_D_DAIN_SURF_STRIDE_0_DAIN_SURF_STRIDE_FIELD			_MK_FIELD_CONST(0x7ffffff, RBK_D_DAIN_SURF_STRIDE_0_DAIN_SURF_STRIDE_SHIFT)
+
+
+// Register RBK_D_DAIN_PLANAR_STRIDE_0
+#define RBK_D_DAIN_PLANAR_STRIDE_0			_MK_ADDR_CONST(0x1102c)
+#define RBK_D_DAIN_PLANAR_STRIDE_0_DAIN_PLANAR_STRIDE_SHIFT			_MK_SHIFT_CONST(5)
+#define RBK_D_DAIN_PLANAR_STRIDE_0_DAIN_PLANAR_STRIDE_FIELD			_MK_FIELD_CONST(0x7ffffff, RBK_D_DAIN_PLANAR_STRIDE_0_DAIN_PLANAR_STRIDE_SHIFT)
+
+
+// Register RBK_D_DAOUT_RAM_TYPE_0
+#define RBK_D_DAOUT_RAM_TYPE_0			_MK_ADDR_CONST(0x11030)
+#define RBK_D_DAOUT_RAM_TYPE_0_DATAOUT_RAM_TYPE_SHIFT			_MK_SHIFT_CONST(0)
+#define RBK_D_DAOUT_RAM_TYPE_0_DATAOUT_RAM_TYPE_FIELD			_MK_FIELD_CONST(0x1, RBK_D_DAOUT_RAM_TYPE_0_DATAOUT_RAM_TYPE_SHIFT)
+#define RBK_D_DAOUT_RAM_TYPE_0_DATAOUT_RAM_TYPE_CVIF			_MK_ENUM_CONST(0x0)
+#define RBK_D_DAOUT_RAM_TYPE_0_DATAOUT_RAM_TYPE_MCIF			_MK_ENUM_CONST(0x1)
+
+
+// Register RBK_D_DATAOUT_SIZE_1_0
+#define RBK_D_DATAOUT_SIZE_1_0			_MK_ADDR_CONST(0x11034)
+#define RBK_D_DATAOUT_SIZE_1_0_DATAOUT_CHANNEL_SHIFT			_MK_SHIFT_CONST(0)
+#define RBK_D_DATAOUT_SIZE_1_0_DATAOUT_CHANNEL_FIELD			_MK_FIELD_CONST(0x1fff, RBK_D_DATAOUT_SIZE_1_0_DATAOUT_CHANNEL_SHIFT)
+
+
+// Register RBK_D_DAOUT_ADDR_HIGH_0
+#define RBK_D_DAOUT_ADDR_HIGH_0			_MK_ADDR_CONST(0x11038)
+#define RBK_D_DAOUT_ADDR_HIGH_0_DAOUT_ADDR_HIGH_SHIFT			_MK_SHIFT_CONST(0)
+#define RBK_D_DAOUT_ADDR_HIGH_0_DAOUT_ADDR_HIGH_FIELD			_MK_FIELD_CONST(0xffffffff, RBK_D_DAOUT_ADDR_HIGH_0_DAOUT_ADDR_HIGH_SHIFT)
+
+
+// Register RBK_D_DAOUT_ADDR_LOW_0
+#define RBK_D_DAOUT_ADDR_LOW_0			_MK_ADDR_CONST(0x1103c)
+#define RBK_D_DAOUT_ADDR_LOW_0_DAOUT_ADDR_LOW_SHIFT			_MK_SHIFT_CONST(5)
+#define RBK_D_DAOUT_ADDR_LOW_0_DAOUT_ADDR_LOW_FIELD			_MK_FIELD_CONST(0x7ffffff, RBK_D_DAOUT_ADDR_LOW_0_DAOUT_ADDR_LOW_SHIFT)
+
+
+// Register RBK_D_DAOUT_LINE_STRIDE_0
+#define RBK_D_DAOUT_LINE_STRIDE_0			_MK_ADDR_CONST(0x11040)
+#define RBK_D_DAOUT_LINE_STRIDE_0_DAOUT_LINE_STRIDE_SHIFT			_MK_SHIFT_CONST(5)
+#define RBK_D_DAOUT_LINE_STRIDE_0_DAOUT_LINE_STRIDE_FIELD			_MK_FIELD_CONST(0x7ffffff, RBK_D_DAOUT_LINE_STRIDE_0_DAOUT_LINE_STRIDE_SHIFT)
+
+
+// Register RBK_D_CONTRACT_STRIDE_0_0
+#define RBK_D_CONTRACT_STRIDE_0_0			_MK_ADDR_CONST(0x11044)
+#define RBK_D_CONTRACT_STRIDE_0_0_CONTRACT_STRIDE_0_SHIFT			_MK_SHIFT_CONST(5)
+#define RBK_D_CONTRACT_STRIDE_0_0_CONTRACT_STRIDE_0_FIELD			_MK_FIELD_CONST(0x7ffffff, RBK_D_CONTRACT_STRIDE_0_0_CONTRACT_STRIDE_0_SHIFT)
+
+
+// Register RBK_D_CONTRACT_STRIDE_1_0
+#define RBK_D_CONTRACT_STRIDE_1_0			_MK_ADDR_CONST(0x11048)
+#define RBK_D_CONTRACT_STRIDE_1_0_CONTRACT_STRIDE_1_SHIFT			_MK_SHIFT_CONST(5)
+#define RBK_D_CONTRACT_STRIDE_1_0_CONTRACT_STRIDE_1_FIELD			_MK_FIELD_CONST(0x7ffffff, RBK_D_CONTRACT_STRIDE_1_0_CONTRACT_STRIDE_1_SHIFT)
+
+
+// Register RBK_D_DAOUT_SURF_STRIDE_0
+#define RBK_D_DAOUT_SURF_STRIDE_0			_MK_ADDR_CONST(0x1104c)
+#define RBK_D_DAOUT_SURF_STRIDE_0_DAOUT_SURF_STRIDE_SHIFT			_MK_SHIFT_CONST(5)
+#define RBK_D_DAOUT_SURF_STRIDE_0_DAOUT_SURF_STRIDE_FIELD			_MK_FIELD_CONST(0x7ffffff, RBK_D_DAOUT_SURF_STRIDE_0_DAOUT_SURF_STRIDE_SHIFT)
+
+
+// Register RBK_D_DAOUT_PLANAR_STRIDE_0
+#define RBK_D_DAOUT_PLANAR_STRIDE_0			_MK_ADDR_CONST(0x11050)
+#define RBK_D_DAOUT_PLANAR_STRIDE_0_DAOUT_PLANAR_STRIDE_SHIFT			_MK_SHIFT_CONST(5)
+#define RBK_D_DAOUT_PLANAR_STRIDE_0_DAOUT_PLANAR_STRIDE_FIELD			_MK_FIELD_CONST(0x7ffffff, RBK_D_DAOUT_PLANAR_STRIDE_0_DAOUT_PLANAR_STRIDE_SHIFT)
+
+
+// Register RBK_D_DECONV_STRIDE_0
+#define RBK_D_DECONV_STRIDE_0			_MK_ADDR_CONST(0x11054)
+#define RBK_D_DECONV_STRIDE_0_DECONV_X_STRIDE_SHIFT			_MK_SHIFT_CONST(0)
+#define RBK_D_DECONV_STRIDE_0_DECONV_X_STRIDE_FIELD			_MK_FIELD_CONST(0x1f, RBK_D_DECONV_STRIDE_0_DECONV_X_STRIDE_SHIFT)
+#define RBK_D_DECONV_STRIDE_0_DECONV_Y_STRIDE_SHIFT			_MK_SHIFT_CONST(16)
+#define RBK_D_DECONV_STRIDE_0_DECONV_Y_STRIDE_FIELD			_MK_FIELD_CONST(0x1f, RBK_D_DECONV_STRIDE_0_DECONV_Y_STRIDE_SHIFT)
+
+
+// Register RBK_D_PERF_ENABLE_0
+#define RBK_D_PERF_ENABLE_0			_MK_ADDR_CONST(0x11058)
+#define RBK_D_PERF_ENABLE_0_PERF_EN_SHIFT			_MK_SHIFT_CONST(0)
+#define RBK_D_PERF_ENABLE_0_PERF_EN_FIELD			_MK_FIELD_CONST(0x1, RBK_D_PERF_ENABLE_0_PERF_EN_SHIFT)
+
+
+// Register RBK_D_PERF_READ_STALL_0
+#define RBK_D_PERF_READ_STALL_0			_MK_ADDR_CONST(0x1105c)
+#define RBK_D_PERF_READ_STALL_0_RD_STALL_CNT_SHIFT			_MK_SHIFT_CONST(0)
+#define RBK_D_PERF_READ_STALL_0_RD_STALL_CNT_FIELD			_MK_FIELD_CONST(0xffffffff, RBK_D_PERF_READ_STALL_0_RD_STALL_CNT_SHIFT)
+
+
+// Register RBK_D_PERF_WRITE_STALL_0
+#define RBK_D_PERF_WRITE_STALL_0			_MK_ADDR_CONST(0x11060)
+#define RBK_D_PERF_WRITE_STALL_0_WR_STALL_CNT_SHIFT			_MK_SHIFT_CONST(0)
+#define RBK_D_PERF_WRITE_STALL_0_WR_STALL_CNT_FIELD			_MK_FIELD_CONST(0xffffffff, RBK_D_PERF_WRITE_STALL_0_WR_STALL_CNT_SHIFT)
+
+
+
+// To satisfy various compilers and platforms,
+// we let users control the types and syntax of certain constants, using macros.
+#ifndef _MK_SHIFT_CONST
+  #define _MK_SHIFT_CONST(_constant_) _constant_
+#endif
+#ifndef _MK_MASK_CONST
+  #define _MK_MASK_CONST(_constant_) _constant_
+#endif
+#ifndef _MK_ENUM_CONST
+  #define _MK_ENUM_CONST(_constant_) (_constant_ ## UL)
+#endif
+#ifndef _MK_ADDR_CONST
+  #define _MK_ADDR_CONST(_constant_) _constant_
+#endif
+#ifndef _MK_FIELD_CONST
+  #define _MK_FIELD_CONST(_mask_, _shift_) (_MK_MASK_CONST(_mask_) << _MK_SHIFT_CONST(_shift_))
+#endif
+
+
+
+//
+// ADDRESS SPACES
+//
+
+#define BASE_ADDRESS_NVDLA_CFGROM	0x0
+#define BASE_ADDRESS_NVDLA_GLB	0x1000
+#define BASE_ADDRESS_NVDLA_MCIF	0x2000
+#define BASE_ADDRESS_NVDLA_CDMA	0x3000
+#define BASE_ADDRESS_NVDLA_CSC	0x4000
+#define BASE_ADDRESS_NVDLA_CMAC_A	0x5000
+#define BASE_ADDRESS_NVDLA_CMAC_B	0x6000
+#define BASE_ADDRESS_NVDLA_CACC	0x7000
+#define BASE_ADDRESS_NVDLA_SDP_RDMA	0x8000
+#define BASE_ADDRESS_NVDLA_SDP	0x9000
+#define BASE_ADDRESS_NVDLA_PDP_RDMA	0xa000
+#define BASE_ADDRESS_NVDLA_PDP	0xb000
+#define BASE_ADDRESS_NVDLA_CDP_RDMA	0xc000
+#define BASE_ADDRESS_NVDLA_CDP	0xd000
+#define BASE_ADDRESS_NVDLA_GEC	0xe000
+#define BASE_ADDRESS_NVDLA_CVIF	0xf000
+#define BASE_ADDRESS_NVDLA_BDMA	0x10000
+#define BASE_ADDRESS_NVDLA_RBK	0x11000
+
+#endif
diff --git a/drivers/gpu/drm/nvdla/nvdla_rubik.c b/drivers/gpu/drm/nvdla/nvdla_rubik.c
new file mode 100644
index 000000000000..3bfb3b0cb786
--- /dev/null
+++ b/drivers/gpu/drm/nvdla/nvdla_rubik.c
@@ -0,0 +1,217 @@
+// SPDX-License-Identifier: BSD-3-Clause OR GPL-2.0
+/*
+ * Copyright (C) 2017-2018 NVIDIA CORPORATION
+ * Copyright (C) 2022 Cai Huoqing
+ */
+
+#include "nvdla_common.h"
+#include "nvdla_drm.h"
+#include "nvdla_reg.h"
+#include "nvdla_engine.h"
+
+static uint8_t map_rubik_mode[] = {
+	FIELD_ENUM(RBK_D_MISC_CFG_0, RUBIK_MODE, CONTRACT),
+	FIELD_ENUM(RBK_D_MISC_CFG_0, RUBIK_MODE, SPLIT),
+	FIELD_ENUM(RBK_D_MISC_CFG_0, RUBIK_MODE, MERGE),
+};
+
+static uint8_t  map_ram_type[] = {
+	FIELD_ENUM(RBK_D_DAIN_RAM_TYPE_0, DATAIN_RAM_TYPE, MCIF),
+	FIELD_ENUM(RBK_D_DAIN_RAM_TYPE_0, DATAIN_RAM_TYPE, CVIF),
+};
+
+static uint8_t  map_precision[] = {
+	FIELD_ENUM(RBK_D_MISC_CFG_0, IN_PRECISION, INT8),
+	FIELD_ENUM(RBK_D_MISC_CFG_0, IN_PRECISION, INT16),
+	FIELD_ENUM(RBK_D_MISC_CFG_0, IN_PRECISION, FP16),
+};
+
+static uint8_t map_bpe[] = {
+	BPE_PRECISION_INT8,
+	BPE_PRECISION_INT16,
+	BPE_PRECISION_FP16,
+};
+
+void
+dla_rubik_set_producer(struct dla_engine *engine, int32_t group_id, int32_t __unused)
+{
+	uint32_t reg;
+
+	/**
+	 * set producer pointer for all sub-modules
+	 */
+	reg = group_id << SHIFT(RBK_S_POINTER_0, PRODUCER);
+	rubik_reg_write(engine, S_POINTER, reg);
+}
+
+int
+dla_rubik_enable(struct dla_engine *engine, struct dla_processor_group *group)
+{
+	uint32_t reg;
+
+	/**
+	 * enable all sub-modules
+	 */
+	reg = FIELD_ENUM(RBK_D_OP_ENABLE_0, OP_EN, ENABLE);
+	rubik_reg_write(engine, D_OP_ENABLE, reg);
+
+	return 0;
+}
+
+void
+dla_rubik_rdma_check(struct dla_processor_group *group)
+{
+	group->is_rdma_needed = 0;
+}
+
+static int32_t
+processor_rubik_program(struct dla_engine *engine, struct dla_processor_group *group)
+{
+	int32_t ret = 0;
+	uint32_t reg, high, low;
+	uint64_t input_address = 0;
+	uint64_t output_address = 0;
+	struct dla_rubik_op_desc *rubik_op;
+	struct dla_rubik_surface_desc *rubik_surface;
+
+	rubik_op = &group->operation_desc->rubik_op;
+	rubik_surface = &group->surface_desc->rubik_surface;
+
+	/* Argument check */
+	ASSERT_GOTO((rubik_surface->src_data.type != DLA_MEM_HW),
+		ret, -EINVAL, exit);
+	ASSERT_GOTO((rubik_surface->dst_data.type != DLA_MEM_HW),
+		ret, -EINVAL, exit);
+
+	/* get the addresses from task descriptor */
+	ret = dla_read_input_address(engine, &rubik_surface->src_data,
+						&input_address,
+						group->op_desc->index,
+						group->roi_index,
+						1);
+	if (ret)
+		goto exit;
+
+	dla_get_dma_cube_address(engine->driver_context,
+				engine->task->task_data,
+				rubik_surface->dst_data.address,
+				rubik_surface->dst_data.offset,
+				(void *)&output_address,
+				DESTINATION_DMA);
+
+	/* config rubik */
+	reg = (((uint32_t)map_rubik_mode[rubik_op->mode]) <<
+			SHIFT(RBK_D_MISC_CFG_0, RUBIK_MODE)) |
+			(((uint32_t)map_precision[rubik_op->precision]) <<
+			SHIFT(RBK_D_MISC_CFG_0, IN_PRECISION));
+	rubik_reg_write(engine, D_MISC_CFG, reg);
+	reg = (((uint32_t)map_ram_type[rubik_surface->src_data.type]) <<
+			SHIFT(RBK_D_DAIN_RAM_TYPE_0, DATAIN_RAM_TYPE));
+	rubik_reg_write(engine, D_DAIN_RAM_TYPE, reg);
+	reg =  ((rubik_surface->src_data.width-1) <<
+			SHIFT(RBK_D_DATAIN_SIZE_0_0, DATAIN_WIDTH)) |
+			((rubik_surface->src_data.height-1) <<
+			SHIFT(RBK_D_DATAIN_SIZE_0_0, DATAIN_HEIGHT));
+	rubik_reg_write(engine, D_DATAIN_SIZE_0, reg);
+	reg =  ((rubik_surface->src_data.channel-1) <<
+			SHIFT(RBK_D_DATAIN_SIZE_1_0, DATAIN_CHANNEL));
+	rubik_reg_write(engine, D_DATAIN_SIZE_1, reg);
+
+	high = upper_32_bits(input_address);
+	low = lower_32_bits(input_address);
+	rubik_reg_write(engine, D_DAIN_ADDR_LOW, low);
+	rubik_reg_write(engine, D_DAIN_ADDR_HIGH, high);
+	if (rubik_op->mode == RUBIK_MODE_MERGE) {
+		ASSERT_GOTO((rubik_surface->src_data.plane_stride != 0),
+			ret, -EINVAL, exit);
+		ASSERT_GOTO(((rubik_surface->src_data.plane_stride&0x1F) == 0),
+			ret, -EINVAL, exit);
+		rubik_reg_write(engine, D_DAIN_PLANAR_STRIDE,
+			rubik_surface->src_data.plane_stride);
+	} else {
+		rubik_reg_write(engine, D_DAIN_SURF_STRIDE,
+			rubik_surface->src_data.surf_stride);
+	}
+	rubik_reg_write(engine, D_DAIN_LINE_STRIDE,
+				rubik_surface->src_data.line_stride);
+
+	reg = (((uint32_t)map_ram_type[rubik_surface->dst_data.type]) <<
+			SHIFT(RBK_D_DAOUT_RAM_TYPE_0, DATAOUT_RAM_TYPE));
+	rubik_reg_write(engine, D_DAOUT_RAM_TYPE, reg);
+	reg =  ((rubik_surface->dst_data.channel-1) <<
+			SHIFT(RBK_D_DATAOUT_SIZE_1_0, DATAOUT_CHANNEL));
+	rubik_reg_write(engine, D_DATAOUT_SIZE_1, reg);
+
+	high = upper_32_bits(output_address);
+	low = lower_32_bits(output_address);
+	rubik_reg_write(engine, D_DAOUT_ADDR_LOW, low);
+	rubik_reg_write(engine, D_DAOUT_ADDR_HIGH, high);
+
+	rubik_reg_write(engine, D_DAOUT_LINE_STRIDE,
+			rubik_surface->dst_data.line_stride);
+	if (rubik_op->mode != RUBIK_MODE_SPLIT) {
+		rubik_reg_write(engine, D_DAOUT_SURF_STRIDE,
+				rubik_surface->dst_data.surf_stride);
+		if (rubik_op->mode == RUBIK_MODE_CONTRACT) {
+			reg = ((rubik_surface->dst_data.channel *
+				map_bpe[rubik_op->precision] + 31) >> 5) *
+				rubik_surface->src_data.surf_stride;
+			rubik_reg_write(engine, D_CONTRACT_STRIDE_0, reg);
+
+			reg = rubik_op->stride_y *
+				rubik_surface->dst_data.line_stride;
+			rubik_reg_write(engine, D_CONTRACT_STRIDE_1, reg);
+
+			reg = (((uint32_t)(rubik_op->stride_x-1)) <<
+			SHIFT(RBK_D_DECONV_STRIDE_0, DECONV_X_STRIDE)) |
+				(((uint32_t)(rubik_op->stride_y-1)) <<
+			SHIFT(RBK_D_DECONV_STRIDE_0, DECONV_Y_STRIDE));
+			rubik_reg_write(engine, D_DECONV_STRIDE, reg);
+		}
+	} else {
+		rubik_reg_write(engine, D_DAOUT_PLANAR_STRIDE,
+				rubik_surface->dst_data.plane_stride);
+	}
+
+exit:
+	return ret;
+}
+
+int
+dla_rubik_is_ready(struct dla_processor *processor,
+			     struct dla_processor_group *group)
+{
+	return 1;
+}
+
+void
+dla_rubik_dump_config(struct dla_processor_group *group)
+{
+	struct dla_rubik_op_desc *rubik_op;
+	struct dla_rubik_surface_desc *rubik_surface;
+
+	rubik_surface = &group->surface_desc->rubik_surface;
+	rubik_op = &group->operation_desc->rubik_op;
+}
+
+int
+dla_rubik_program(struct dla_engine *engine, struct dla_processor_group *group)
+{
+	int32_t ret = 0;
+
+	if (!engine->config_data->rubik_enable) {
+		pr_err("RUBIK is not supported for this configuration\n");
+		ret = -EINVAL;
+		goto exit;
+	}
+
+	dla_enable_intr(engine, MASK(GLB_S_INTR_MASK_0, RUBIK_DONE_MASK1) |
+			MASK(GLB_S_INTR_MASK_0, RUBIK_DONE_MASK0));
+
+	ret = processor_rubik_program(engine, group);
+	if (ret)
+		goto exit;
+
+exit:
+	return ret;
+}
diff --git a/drivers/gpu/drm/nvdla/nvdla_sched.h b/drivers/gpu/drm/nvdla/nvdla_sched.h
new file mode 100644
index 000000000000..d3a198127006
--- /dev/null
+++ b/drivers/gpu/drm/nvdla/nvdla_sched.h
@@ -0,0 +1,52 @@
+/* SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause */
+/*
+ * Copyright (C) 2017-2018 NVIDIA CORPORATION.
+ * Copyright (C) 2022 Cai Huoqing
+ */
+
+#ifndef __NVDLA_SCHED_H_
+#define __NVDLA_SCHED_H_
+
+struct dla_task {
+	/* platform specific data to communicate with portability layer */
+	void *task_data;
+	/* task state */
+	uint32_t state;
+	/* Task base address */
+	uint64_t base;
+	/* start address of a list of dla_operation_container */
+	uint64_t operation_desc_addr;
+	/* start address of a list of dla_surface_container */
+	uint64_t surface_desc_addr;
+	/* start address of a list of dla_common_op_desc */
+	uint64_t dependency_graph_addr;
+	/* start address of a list of dla_lut_param */
+	uint64_t lut_data_addr;
+	/*
+	 * start address of a list of dla_roi_desc,
+	 * the first one is dla_roi_array_desc
+	 * valid when network.dynamic_roi is true
+	 */
+	uint64_t roi_array_addr;
+	/* start address of a list of dla_surface_container */
+	uint64_t surface_addr;
+	/* start address of a list of dla_stat_container */
+	uint64_t stat_data_addr;
+} __packed __aligned(256);
+
+/**
+ * @brief			Configuration parameters supported by the engine
+ *
+ * atom_size			Memory smallest access size
+ * bdma_enable			Defines whether bdma is supported
+ * rubik_enable			Defines whether rubik is supported
+ * weight_compress_support	Defines whether weight data compression is supported
+ */
+struct dla_config {
+	uint32_t atom_size;
+	bool bdma_enable;
+	bool rubik_enable;
+	bool weight_compress_support;
+};
+
+#endif
diff --git a/drivers/gpu/drm/nvdla/nvdla_scheduler.c b/drivers/gpu/drm/nvdla/nvdla_scheduler.c
new file mode 100644
index 000000000000..b814077478c6
--- /dev/null
+++ b/drivers/gpu/drm/nvdla/nvdla_scheduler.c
@@ -0,0 +1,1005 @@
+// SPDX-License-Identifier: BSD-3-Clause OR GPL-2.0
+/*
+ * Copyright (C) 2017-2018 NVIDIA CORPORATION
+ * Copyright (C) 2022 Cai Huoqing
+ */
+
+#include "nvdla_common.h"
+#include "nvdla_drm.h"
+#include "nvdla_reg.h"
+#include "nvdla_engine.h"
+
+#define MAX_NUM_ADDRESSES	256
+
+static uint64_t roi_array_length __aligned(8);
+static struct dla_network_desc network;
+
+static int
+dla_update_consumers(struct dla_engine *engine,
+					 struct dla_processor_group *group,
+					 struct dla_common_op_desc *op, uint8_t event);
+
+static int32_t
+dla_read_address_list(struct dla_engine *engine)
+{
+	return 0;
+}
+
+int32_t
+dla_read_lut(struct dla_engine *engine, int16_t index, void *dst)
+{
+	int32_t ret = 0;
+	uint64_t src_addr;
+
+	if (index == -1) {
+		ret = -EINVAL;
+		goto exit;
+	}
+
+	src_addr = engine->task->lut_data_addr;
+
+	ret = dla_data_read(engine->driver_context,
+			engine->task->task_data,
+			src_addr, (void *)dst,
+			sizeof(struct dla_lut_param),
+			(sizeof(struct dla_lut_param) * (uint64_t)index));
+
+exit:
+	return ret;
+}
+
+static int
+dla_op_enabled(struct dla_engine *engine, struct dla_processor_group *group)
+{
+	int32_t ret;
+	struct dla_common_op_desc *op_desc;
+
+	op_desc = group->op_desc;
+
+	group->active = 1;
+
+	/* update dependency graph for this task */
+	ret = dla_update_consumers(engine, group, op_desc, DLA_EVENT_OP_ENABLED);
+
+	return ret;
+}
+
+static int
+dla_op_programmed(struct dla_engine *engine, struct dla_processor *processor,
+		  struct dla_processor_group *group,
+		  uint8_t rdma_id)
+{
+	int32_t ret;
+	struct dla_common_op_desc *op_desc;
+
+	op_desc = group->op_desc;
+
+	group->pending = 0;
+
+	/* update dependency graph for this task */
+	ret = dla_update_consumers(engine, group, op_desc, DLA_EVENT_OP_PROGRAMMED);
+
+	return ret;
+}
+
+static int32_t
+dla_read_config(struct dla_engine *engine, struct dla_task *task,
+				struct dla_processor *processor,
+				struct dla_processor_group *group)
+{
+	int32_t ret;
+	uint64_t base;
+	int16_t index;
+	uint8_t roi_index;
+
+	roi_index = group->roi_index;
+	index = group->op_desc->index;
+
+	base = (sizeof(union dla_operation_container) *
+			(uint64_t)engine->network->num_operations *
+			(uint64_t)roi_index);
+	base = base + (sizeof(union dla_operation_container) *
+			(uint64_t)index);
+
+	ret = dla_data_read(engine->driver_context, task->task_data,
+				task->operation_desc_addr,
+				(void *)group->operation_desc,
+				sizeof(union dla_operation_container),
+				base);
+	if (ret)
+		goto exit;
+
+	base = (sizeof(union dla_surface_container) *
+			(uint64_t)engine->network->num_operations *
+			(uint64_t)roi_index);
+
+	base = base + (sizeof(union dla_surface_container) *
+			(uint64_t)index);
+
+	ret = dla_data_read(engine->driver_context, task->task_data,
+				task->surface_desc_addr,
+				(void *)group->surface_desc,
+				sizeof(union dla_surface_container), base);
+	if (ret)
+		goto exit;
+
+	processor->dump_config(group);
+
+exit:
+	return ret;
+}
+
+static void
+dla_reset_group(struct dla_engine *engine, struct dla_processor_group *group)
+{
+	int32_t i;
+
+	for (i = 0; i < DLA_OP_NUM; i++) {
+		dla_put_op_desc(engine, group->consumers[i]);
+		group->consumers[i] = NULL;
+	}
+
+	dla_put_op_desc(engine, group->fused_parent);
+	group->fused_parent = NULL;
+
+	dla_put_op_desc(engine, group->op_desc);
+	group->op_desc = NULL;
+}
+
+static int
+dla_prepare_operation(struct dla_engine *engine,
+					  struct dla_processor *processor,
+					  struct dla_common_op_desc *op_desc,
+					  uint8_t roi_index, uint32_t *group_number)
+{
+	int32_t ret = 0;
+	uint8_t group_id;
+	uint8_t rdma_id;
+	struct dla_processor_group *group;
+
+	/*
+	 * If not already programmed then find out if
+	 * processor is free and which group is free
+	 */
+	ret = utils_get_free_group(engine, processor, &group_id, &rdma_id);
+	if (ret) {
+		pr_debug("processor:%s register groups are busy\n",
+			processor->name);
+		goto exit;
+	} else {
+		pr_info("processor:%s group:%d, rdma_group:%d available\n",
+				processor->name, group_id, rdma_id);
+	}
+	*group_number = group_id;
+	group = &processor->groups[group_id];
+
+	/*
+	 * update operation descriptor
+	 */
+	group->op_desc = op_desc;
+	dla_get_refcount(op_desc);
+	group->id = group_id;
+	group->roi_index = roi_index;
+	group->rdma_id = rdma_id;
+
+	ret = dla_read_config(engine, engine->task, processor, group);
+	if (ret)
+		goto exit;
+
+	group->pending = 1;
+
+	processor->group_status |= (1 << group->id);
+
+	processor->rdma_check(group);
+	if (group->is_rdma_needed) {
+		group->rdma_id = rdma_id;
+		processor->rdma_status |= (1 << rdma_id);
+	}
+
+	processor->tail_op = op_desc;
+exit:
+	return ret;
+}
+
+static int
+dla_program_operation(struct dla_engine *engine,
+					  struct dla_processor *processor,
+					  struct dla_processor_group *group)
+{
+	int32_t i;
+	int32_t ret = 0;
+	struct dla_common_op_desc *op_desc;
+
+	pr_info("Program %s operation index %d ROI %d Group[%d]\n",
+					processor->name,
+					group->op_desc->index,
+					group->roi_index,
+					group->id);
+
+	group->programming = 1;
+
+	op_desc = group->op_desc;
+
+	processor->set_producer(engine, group->id, group->rdma_id);
+
+	ret = processor->program(engine, group);
+	if (ret)
+		goto exit;
+
+	/**
+	 * Pre-fetch consumers
+	 */
+	for (i = 0; i < DLA_OP_NUM; i++) {
+		group->consumers[i] = dla_get_op_desc(engine, engine->task,
+					op_desc->consumers[i].index, i,
+					group->roi_index);
+	}
+
+	group->fused_parent = dla_get_op_desc(engine, engine->task,
+					op_desc->fused_parent.index,
+					op_desc->op_type - 1,
+					group->roi_index);
+
+	if (group->fused_parent != NULL) {
+		if (group->fused_parent->op_type != (op_desc->op_type - 1)) {
+			ret = -EINVAL;
+			goto exit;
+		}
+	}
+
+	ret = dla_op_programmed(engine, processor, group, group->rdma_id);
+	if (!ret)
+		goto exit;
+
+exit:
+	group->programming = 0;
+	return ret;
+}
+
+static int
+dla_enable_operation(struct dla_engine *engine,
+					 struct dla_processor *processor,
+					 struct dla_common_op_desc *op_desc)
+{
+	int32_t ret = 0;
+	int32_t group_id;
+	struct dla_processor_group *group;
+
+	/**
+	 * If some operation has reported error then skip
+	 * enabling next operations
+	 */
+	if (engine->status)
+		goto exit;
+
+	/**
+	 * Find out if operation is already programmed
+	 */
+	group_id = 0;
+	group = &processor->groups[group_id];
+	if ((processor->group_status & (1 << group_id)) &&
+			group->op_desc->index == op_desc->index &&
+			group->roi_index == op_desc->roi_index &&
+			!group->pending)
+		goto enable_op;
+
+	group_id = 1;
+	group = &processor->groups[group_id];
+	if ((processor->group_status & (1 << group_id)) &&
+			group->op_desc->index == op_desc->index &&
+			group->roi_index == op_desc->roi_index &&
+			!group->pending)
+		goto enable_op;
+
+	/**
+	 * Operation is not programmed yet, ignore
+	 */
+	pr_debug("exit %s without actual enable due to processor "
+				"hasn't been programmed\n", __func__);
+	goto exit;
+
+enable_op:
+	/**
+	 * If this event is triggered as part of programming same
+	 * group then skip enable, it will get enabled after programming
+	 * is complete
+	 */
+	if (group->programming)
+		goto exit;
+
+	if (group->active) {
+		pr_debug("Processor:%s already enabled on group:%d\n",
+			processor->name, group_id);
+		goto exit;
+	}
+
+	pr_info("Enable %s operation index %d ROI %d\n",
+					processor->name,
+					group->op_desc->index,
+					group->roi_index);
+
+	processor->set_producer(engine, group->id, group->rdma_id);
+
+	ret = processor->enable(engine, group);
+	if (ret)
+		goto exit;
+
+	ret = dla_op_enabled(engine, group);
+exit:
+	return ret;
+}
+
+static int
+dla_submit_operation(struct dla_engine *engine,
+					 struct dla_processor *processor,
+					 struct dla_common_op_desc *op_desc,
+					 uint8_t roi_index)
+{
+	int32_t err;
+	uint32_t group_id = 0;
+
+	pr_info("Prepare %s operation index %d ROI %d dep_count %d\n",
+			processor->name, op_desc->index, roi_index,
+			op_desc->dependency_count);
+	err = dla_prepare_operation(engine, processor, op_desc, roi_index, &group_id);
+	if (err)
+		goto exit;
+
+	if (!processor->is_ready(processor, &processor->groups[group_id]))
+		goto exit;
+
+	err = dla_program_operation(engine, processor, &processor->groups[group_id]);
+	if (err)
+		goto exit;
+
+	if (op_desc->dependency_count == 0)
+		err = dla_enable_operation(engine, processor, op_desc);
+
+exit:
+	return err;
+}
+
+/**
+ * Dequeue next operation of same type from list of operations
+ */
+static int32_t
+dla_dequeue_operation(struct dla_engine *engine,
+					  struct dla_processor *processor)
+{
+	int32_t ret = 0;
+	int16_t index;
+	struct dla_common_op_desc *consumer;
+
+	if (engine->status) {
+		pr_debug("Skip dequeue op as engine has reported error\n");
+		goto exit;
+	}
+
+	/**
+	 * If we are done processing all ROIs for current op then
+	 * load next op of same type otherwise reload same op for
+	 * next ROI.
+	 */
+	if (processor->roi_index == (engine->network->num_rois - 1)) {
+		index = processor->tail_op->consumers[processor->op_type].index;
+		if (-1 == index) {
+			/**
+			 * It means we are done processing
+			 * all ops of this type
+			 */
+			pr_debug("exit %s as there's no further operation\n",
+				processor->name);
+			goto exit;
+		}
+		processor->roi_index = 0;
+	} else {
+		processor->roi_index++;
+		index = processor->tail_op->index;
+	}
+
+	pr_debug("Dequeue op from %s processor, index=%d ROI=%d\n",
+			processor->name, index, processor->roi_index);
+
+	/**
+	 * Get operation descriptor
+	 */
+	consumer = dla_get_op_desc(engine, engine->task, index,
+				processor->op_type, processor->roi_index);
+	if (consumer == NULL) {
+		ret = -ENOMEM;
+		pr_err("Failed to allocate op_desc");
+		goto exit;
+	}
+
+	ret = dla_submit_operation(engine, processor, consumer, processor->roi_index);
+	dla_put_op_desc(engine, consumer);
+
+exit:
+	return ret;
+}
+
+static int
+dla_update_dependency(struct dla_engine *engine,
+					  struct dla_consumer *consumer,
+					  struct dla_common_op_desc *op_desc,
+					  uint8_t event, uint8_t roi_index)
+{
+	int32_t ret = 0;
+	struct dla_processor *processor;
+
+	if (consumer->index == -1)
+		goto exit;
+
+	/* Update dependency only if event matches */
+	if (event != consumer->event)
+		goto exit;
+
+	/**
+	 * If consumer index is valid but op desc is NULL means
+	 * op desc for consumer was not pre-fetched
+	 */
+	if (op_desc == NULL) {
+		ret = -EINVAL;
+		pr_err("Operation descriptor is NULL, consumer index %d",
+				consumer->index);
+		goto exit;
+	}
+
+	pr_debug("Update dependency operation index %d ROI %d DEP_COUNT=%d\n",
+					op_desc->index, op_desc->roi_index,
+					op_desc->dependency_count);
+	op_desc->dependency_count--;
+
+	if (op_desc->dependency_count == 0) {
+		processor = &engine->processors[op_desc->op_type];
+		pr_debug("enable %s in %s as depdency are resolved\n",
+			processor->name, __func__);
+
+		ret = dla_enable_operation(engine, processor, op_desc);
+		if (ret)
+			goto exit;
+	}
+exit:
+	return ret;
+}
+
+static int
+dla_update_consumers(struct dla_engine *engine,
+					 struct dla_processor_group *group,
+					 struct dla_common_op_desc *op,
+					 uint8_t event)
+{
+	int32_t i;
+	int32_t ret = 0;
+
+	if (engine->status) {
+		pr_debug("Skip update as engine has reported error\n");
+		goto exit;
+	}
+
+	for (i = 0; i < DLA_OP_NUM; i++) {
+		ret = dla_update_dependency(engine, &op->consumers[i],
+						group->consumers[i],
+						event, group->roi_index);
+		if (ret) {
+			pr_err("Failed to update dependency for consumer %d, ROI %d",
+				   i, group->roi_index);
+			goto exit;
+		}
+	}
+
+	ret = dla_update_dependency(engine, &op->fused_parent,
+					group->fused_parent,
+					event, group->roi_index);
+	if (ret) {
+		pr_err("Failed to update dependency for "
+			"fused parent, ROI %d", group->roi_index);
+		goto exit;
+	}
+
+exit:
+	return ret;
+}
+
+/**
+ * Handle operation completion notification
+ */
+int
+dla_op_completion(struct dla_engine *engine,
+				  struct dla_processor *processor,
+				  struct dla_processor_group *group)
+{
+	int32_t ret;
+	struct dla_task *task;
+	struct dla_common_op_desc *op_desc;
+	struct dla_processor_group *next_group;
+
+	pr_info("Completed %s operation index %d ROI %d\n",
+			processor->name, group->op_desc->index,
+			group->roi_index);
+
+	task = engine->task;
+
+	/**
+	 * Mark OP as done only when all ROIs are done for that
+	 * operation
+	 */
+	if (group->roi_index == (engine->network->num_rois - 1))
+		engine->num_proc_hwl++;
+
+	op_desc = group->op_desc;
+
+	/**
+	 * Get an extra reference count to keep op descriptor
+	 * in cache until this operation completes
+	 */
+	dla_get_refcount(op_desc);
+
+	processor->group_status &= ~(1 << group->id);
+	if (group->is_rdma_needed) {
+		group->is_rdma_needed = 0;
+		processor->rdma_status &= ~(1 << group->rdma_id);
+		group->rdma_id = 0;
+	}
+	group->active = 0;
+	group->lut_index = -1;
+	processor->last_group = group->id;
+
+	/**
+	 * Switch consumer pointer to next group
+	 */
+	processor->consumer_ptr = !group->id;
+
+	/**
+	 * update dependency graph for this task
+	 * TODO: Add proper error handling
+	 */
+	ret = dla_update_consumers(engine, group, op_desc, DLA_EVENT_OP_COMPLETED);
+	if (ret)
+		goto exit;
+
+	pr_info("%d HWLs done, totally %d layers\n",
+				engine->num_proc_hwl,
+				engine->network->num_operations);
+
+	/* free operation descriptor from cache */
+	dla_reset_group(engine, group);
+
+	/* if not hwl pending, means network completed */
+	if (engine->network->num_operations == engine->num_proc_hwl) {
+		dla_put_op_desc(engine, op_desc);
+		goto exit;
+	}
+
+	next_group = &processor->groups[!group->id];
+	if (next_group->pending && !engine->status) {
+		/**
+		 * Next group must be ready here for programming,
+		 * if not means it is an error
+		 */
+		if (!processor->is_ready(processor, next_group))
+			goto dequeue_op;
+
+		ret = dla_program_operation(engine, processor, next_group);
+		if (ret)
+			goto exit;
+
+		if (next_group->op_desc->dependency_count != 0)
+			goto dequeue_op;
+
+		ret = dla_enable_operation(engine, processor,
+					   next_group->op_desc);
+		if (ret)
+			goto exit;
+	}
+
+dequeue_op:
+	/* dequeue operation from this processor */
+	ret = dla_dequeue_operation(engine, processor);
+
+exit:
+	dla_put_op_desc(engine, op_desc);
+	pr_debug("Exit:%s processor %s group%u status=%d\n",
+				__func__, processor->name,
+				group->id, ret);
+
+	return ret;
+}
+
+/**
+ * Read network configuration from DRAM, network descriptor address
+ * is always first in the address list. Network configuration contains
+ * offset in address list for addresses of other lists used to
+ * execute network
+ *
+ * @engine: Engine instance
+ * @return: 0 for success
+ */
+static int
+dla_read_network_config(struct dla_engine *engine)
+{
+	int32_t ret;
+	uint64_t network_addr;
+	struct dla_task *task = engine->task;
+
+	/**
+	 * Read address list from DRAM to DMEM
+	 */
+	ret = dla_read_address_list(engine);
+	if (ret) {
+		pr_err("Failed to read address list");
+		goto exit;
+	}
+
+	/**
+	 * Read network descriptor address from address list. It is always
+	 * at index 0.
+	 */
+	ret = dla_get_dma_address(engine->driver_context, task->task_data,
+							  0, (void *)&network_addr,
+							  DESTINATION_PROCESSOR);
+	if (ret) {
+		pr_err("Failed to read network desc address");
+		goto exit;
+	}
+
+	/**
+	 * Read network descriptor, it has information for a network
+	 * such as all address indexes.
+	 */
+	ret = dla_data_read(engine->driver_context, task->task_data,
+						network_addr, (void *)&network,
+						sizeof(struct dla_network_desc), 0);
+	if (ret) {
+		pr_err("Failed to read network descriptor");
+		goto exit;
+	}
+
+	if (network.num_operations == 0)
+		goto exit;
+
+	/**
+	 * Read operation descriptor list address from address list
+	 */
+	ret = dla_get_dma_address(engine->driver_context, task->task_data,
+							  network.operation_desc_index,
+							  (void *)&task->operation_desc_addr,
+							  DESTINATION_PROCESSOR);
+	if (ret) {
+		pr_err("Failed to read operation desc list address");
+		goto exit;
+	}
+
+	/**
+	 * Read surface descriptor list address from address list
+	 */
+	ret = dla_get_dma_address(engine->driver_context, task->task_data,
+							  network.surface_desc_index,
+							  (void *)&task->surface_desc_addr,
+							  DESTINATION_PROCESSOR);
+	if (ret) {
+		pr_err("Failed to read surface desc list address");
+		goto exit;
+	}
+
+	/**
+	 * Read dependency graph address from address list
+	 */
+	ret = dla_get_dma_address(engine->driver_context, task->task_data,
+							  network.dependency_graph_index,
+							  (void *)&task->dependency_graph_addr,
+							  DESTINATION_PROCESSOR);
+	if (ret) {
+		pr_err("Failed to ready dependency graph address");
+		goto exit;
+	}
+
+	/**
+	 * Read LUT data list address from address list
+	 */
+	if (network.num_luts) {
+		ret = dla_get_dma_address(engine->driver_context,
+								  task->task_data,
+								  network.lut_data_index,
+								  (void *)&task->lut_data_addr,
+								  DESTINATION_PROCESSOR);
+		if (ret) {
+			pr_err("Failed to read LUT list address");
+			goto exit;
+		}
+	}
+
+	/**
+	 * Read address for ROI information
+	 */
+	if (network.dynamic_roi) {
+		/**
+		 * Read ROI array address from address list
+		 */
+		ret = dla_get_dma_address(engine->driver_context,
+								  task->task_data,
+								  network.roi_array_index,
+								  (void *)&task->roi_array_addr,
+								  DESTINATION_PROCESSOR);
+		if (ret) {
+			pr_err("Failed to read ROI array address");
+			goto exit;
+		}
+
+		ret = dla_data_read(engine->driver_context, task->task_data,
+							task->roi_array_addr,
+							(void *)&roi_array_length,
+							sizeof(uint64_t), 0);
+		if (ret) {
+			pr_err("Failed to read ROI array length");
+			goto exit;
+		}
+
+		/**
+		 * Number of ROIs detected can't be greater than maximum number
+		 * ROIs this network can process
+		 */
+		if (roi_array_length > network.num_rois) {
+			pr_err("Invalid number of ROIs detected");
+			ret = -EINVAL;
+			goto exit;
+		}
+
+		network.num_rois = roi_array_length;
+
+		/**
+		 * Read surface address from address list
+		 */
+		ret = dla_get_dma_address(engine->driver_context,
+								  task->task_data,
+								  network.surface_index,
+								  (void *)&task->surface_addr,
+								  DESTINATION_DMA);
+		if (ret) {
+			pr_err("Failed to read surface address");
+			goto exit;
+		}
+	}
+
+exit:
+	return ret;
+}
+
+static int
+dla_initiate_processors(struct dla_engine *engine)
+{
+	int32_t i;
+	int32_t ret = 0;
+	int16_t index;
+	struct dla_processor *processor;
+	struct dla_common_op_desc *consumer;
+	struct dla_network_desc *nw;
+
+	if (!engine) {
+		ret = -EINVAL;
+		goto exit;
+	}
+
+	nw = engine->network;
+
+	/* Validate operation heads before initiating processors */
+	for (i = 0; i < DLA_OP_NUM; i++) {
+		if (nw->op_head[i] >= nw->num_operations) {
+			ret = -EINVAL;
+			pr_err("Invalid op_head %d for op %d",
+						nw->op_head[i], i);
+			goto exit;
+		}
+	}
+
+	for (i = 0; i < DLA_OP_NUM; i++) {
+		index = nw->op_head[i];
+
+		/* If there is no op for this type then continue */
+		if (-1 == index)
+			continue;
+
+		consumer = dla_get_op_desc(engine, engine->task, index, i, 0);
+		/*
+		 * if consumer is NULL, it means either data copy error
+		 * or cache insufficient - we should fix it
+		 **/
+		if (consumer == NULL) {
+			pr_err("Failed to allocate memory for op_head[%d]=%d",
+							i, index);
+			ret = -ENOMEM;
+			goto exit;
+		}
+
+		processor = &engine->processors[consumer->op_type];
+
+		ret = dla_submit_operation(engine, processor, consumer, 0);
+		dla_put_op_desc(engine, consumer);
+		if (ret && ret != -EBUSY) {
+			pr_err("Failed to submit %s op from index %u\n",
+						processor->name, index);
+			goto exit;
+		}
+
+		ret = dla_dequeue_operation(engine, processor);
+		if (ret) {
+			pr_err("Failed to dequeue op for %s processor",
+							processor->name);
+			goto exit;
+		}
+	}
+exit:
+	return ret;
+}
+
+static int
+dla_handle_events(struct dla_engine *engine, struct dla_processor *processor)
+{
+	int32_t j;
+	int32_t ret = 0;
+	uint8_t group_id;
+	struct dla_processor_group *group;
+
+	pr_debug("Enter:%s, processor:%s\n", __func__, processor->name);
+
+	group_id = !processor->last_group;
+
+	for (j = 0; j < DLA_NUM_GROUPS; j++) {
+		group = &processor->groups[group_id];
+
+		if ((1 << DLA_EVENT_CDMA_WT_DONE) & group->events) {
+			pr_info("Handle cdma weight done event, processor %s group %u\n",
+					processor->name, group->id);
+
+			ret = dla_update_consumers(engine, group, group->op_desc,
+									   DLA_EVENT_CDMA_WT_DONE);
+			if (ret)
+				goto exit;
+		}
+
+		if ((1 << DLA_EVENT_CDMA_DT_DONE) & group->events) {
+			pr_info("Handle cdma data done event, processor %s group %u\n",
+					processor->name, group->id);
+
+			ret = dla_update_consumers(engine, group,
+									   group->op_desc,
+									   DLA_EVENT_CDMA_DT_DONE);
+			if (ret)
+				goto exit;
+		}
+
+		/**
+		 * Handle complete after all other events
+		 */
+		if ((1 << DLA_EVENT_OP_COMPLETED) & group->events) {
+			pr_info("Handle op complete event, processor %s group %u\n",
+					processor->name, group->id);
+
+			ret = dla_op_completion(engine, processor, group);
+			if (ret)
+				goto exit;
+		}
+
+		/**
+		 * Clear all events
+		 */
+		group->events = 0;
+		group_id = !group_id;
+	}
+exit:
+	return ret;
+}
+
+int
+dla_process_events(struct dla_engine *engine, uint32_t *task_complete)
+{
+	int32_t i;
+	int32_t ret = 0;
+
+	for (i = 0; i < DLA_OP_NUM; i++) {
+		struct dla_processor *processor;
+
+		processor = &engine->processors[i];
+		ret = dla_handle_events(engine, processor);
+		/**
+		 * Incase engine status is non-zero, then don't
+		 * update the engine status. We should keep its
+		 * status for later cleaning of engine.
+		 */
+		if (!engine->status)
+			engine->status = ret;
+	}
+
+	if (engine->network->num_operations == engine->num_proc_hwl)
+		*task_complete = 1;
+
+	return ret;
+}
+
+/**
+ * Execute task selected by task scheduler
+ *
+ * 1. Read network configuration for the task
+ * 2. Initiate processors with head of list for same op
+ * 3. Start processing events received
+ */
+int
+dla_execute_task(struct dla_engine *engine_context, void *task_data, void *config_data)
+{
+	int32_t ret;
+	struct dla_engine *engine = engine_context;
+
+	if (engine == NULL) {
+		pr_err("engine is NULL\n");
+		ret = -EINVAL;
+		goto complete;
+	}
+
+	if (engine->task == NULL) {
+		pr_err("task is NULL\n");
+		ret = -EINVAL;
+		goto complete;
+	}
+
+	if (engine->task->task_data != NULL) {
+		/* We have on the fly tasks running */
+		pr_warn("Already some task in progress");
+		ret = -EBUSY;
+		goto complete;
+	}
+
+	engine->task->task_data = task_data;
+	engine->config_data = config_data;
+	engine->network = &network;
+	engine->num_proc_hwl = 0;
+
+	ret = dla_read_network_config(engine);
+	if (ret)
+		goto complete;
+
+	/* If no operations in a task means nothing to do, NULL task */
+	if (engine->network->num_operations == 0)
+		goto complete;
+
+	ret = dla_initiate_processors(engine);
+	engine->status = ret;
+
+complete:
+	return ret;
+}
+
+void
+dla_clear_task(struct dla_engine *engine_context)
+{
+	int32_t i, j;
+	struct dla_engine *engine = engine_context;
+
+	for (i = 0; i < DLA_OP_NUM; i++) {
+		struct dla_processor *processor = &engine->processors[i];
+
+		processor->roi_index = 0;
+		processor->group_status = 0;
+		processor->rdma_status = 0;
+
+		processor->tail_op = NULL;
+
+		for (j = 0; j < DLA_NUM_GROUPS; j++) {
+			struct dla_processor_group *group =
+						&processor->groups[j];
+
+			group->rdma_id = group->id;
+			group->active = 0;
+			group->events = 0;
+			group->roi_index = 0;
+			group->is_rdma_needed = 0;
+			group->lut_index = -1;
+		}
+	}
+
+	engine->task->task_data = NULL;
+	engine->network = NULL;
+	engine->num_proc_hwl = 0;
+	engine->status = 0;
+
+	pr_info("reset engine done\n");
+}
diff --git a/drivers/gpu/drm/nvdla/nvdla_sdp.c b/drivers/gpu/drm/nvdla/nvdla_sdp.c
new file mode 100644
index 000000000000..655ec7195ee9
--- /dev/null
+++ b/drivers/gpu/drm/nvdla/nvdla_sdp.c
@@ -0,0 +1,728 @@
+// SPDX-License-Identifier: BSD-3-Clause OR GPL-2.0
+/*
+ * Copyright (C) 2017-2018 NVIDIA CORPORATION
+ * Copyright (C) 2022 Cai Huoqing
+ */
+
+#include "nvdla_drm.h"
+#include "nvdla_reg.h"
+#include "nvdla_common.h"
+#include "nvdla_engine.h"
+
+static const uint8_t map_ena[] = {
+	FIELD_ENUM(SDP_RDMA_D_BRDMA_CFG_0, BRDMA_DISABLE, YES),
+	FIELD_ENUM(SDP_RDMA_D_BRDMA_CFG_0, BRDMA_DISABLE, NO),
+};
+
+static const uint8_t map_prelu[] = {
+	FIELD_ENUM(SDP_D_DP_BS_CFG_0, BS_MUL_PRELU, NO),
+	FIELD_ENUM(SDP_D_DP_BS_CFG_0, BS_MUL_PRELU, YES),
+};
+
+static const uint8_t map_bypass[] = {
+	FIELD_ENUM(SDP_D_DP_BS_CFG_0, BS_BYPASS, YES),
+	FIELD_ENUM(SDP_D_DP_BS_CFG_0, BS_BYPASS, NO),
+};
+
+static const uint8_t map_alu_op[] = {
+	FIELD_ENUM(SDP_D_DP_EW_CFG_0, EW_ALU_ALGO, MAX),
+	FIELD_ENUM(SDP_D_DP_EW_CFG_0, EW_ALU_ALGO, MIN),
+	FIELD_ENUM(SDP_D_DP_EW_CFG_0, EW_ALU_ALGO, SUM),
+	FIELD_ENUM(SDP_D_DP_EW_CFG_0, EW_ALU_ALGO, EQL),
+};
+
+static const uint8_t map_alu_src[] = {
+	FIELD_ENUM(SDP_D_DP_BS_ALU_CFG_0, BS_ALU_SRC, MEM),
+	FIELD_ENUM(SDP_D_DP_BS_ALU_CFG_0, BS_ALU_SRC, REG),
+};
+
+static const uint8_t map_fly[] = {
+	FIELD_ENUM(SDP_D_FEATURE_MODE_CFG_0, FLYING_MODE, OFF),
+	FIELD_ENUM(SDP_D_FEATURE_MODE_CFG_0, FLYING_MODE, ON),
+};
+
+static const uint8_t map_dst[] = {
+	FIELD_ENUM(SDP_D_FEATURE_MODE_CFG_0, OUTPUT_DST, MEM),
+	FIELD_ENUM(SDP_D_FEATURE_MODE_CFG_0, OUTPUT_DST, PDP),
+};
+
+
+static const uint8_t map_wg[] = {
+	FIELD_ENUM(SDP_D_FEATURE_MODE_CFG_0, WINOGRAD, OFF),
+	FIELD_ENUM(SDP_D_FEATURE_MODE_CFG_0, WINOGRAD, ON),
+};
+
+static const uint8_t map_precision[] = {
+	FIELD_ENUM(SDP_RDMA_D_FEATURE_MODE_CFG_0, IN_PRECISION, INT8),
+	FIELD_ENUM(SDP_RDMA_D_FEATURE_MODE_CFG_0, IN_PRECISION, INT16),
+	FIELD_ENUM(SDP_RDMA_D_FEATURE_MODE_CFG_0, IN_PRECISION, FP16),
+};
+
+static const uint32_t map_proc_precision[3][3] = {
+	{
+		FIELD_ENUM(SDP_RDMA_D_FEATURE_MODE_CFG_0, IN_PRECISION, INT8),
+		FIELD_ENUM(SDP_RDMA_D_FEATURE_MODE_CFG_0, IN_PRECISION, INT8),
+		FIELD_ENUM(SDP_RDMA_D_FEATURE_MODE_CFG_0, IN_PRECISION, FP16),
+	},
+	{
+		FIELD_ENUM(SDP_RDMA_D_FEATURE_MODE_CFG_0, IN_PRECISION, INT8),
+		FIELD_ENUM(SDP_RDMA_D_FEATURE_MODE_CFG_0, IN_PRECISION, INT16),
+		FIELD_ENUM(SDP_RDMA_D_FEATURE_MODE_CFG_0, IN_PRECISION, FP16),
+	},
+	{
+		FIELD_ENUM(SDP_RDMA_D_FEATURE_MODE_CFG_0, IN_PRECISION, INT8),
+		FIELD_ENUM(SDP_RDMA_D_FEATURE_MODE_CFG_0, IN_PRECISION, INT16),
+		FIELD_ENUM(SDP_RDMA_D_FEATURE_MODE_CFG_0, IN_PRECISION, FP16),
+	},
+};
+
+static const uint8_t map_op_type[] = {
+	FIELD_ENUM(SDP_RDMA_D_BRDMA_CFG_0, BRDMA_DATA_USE, MUL),
+	FIELD_ENUM(SDP_RDMA_D_BRDMA_CFG_0, BRDMA_DATA_USE, MUL),
+	FIELD_ENUM(SDP_RDMA_D_BRDMA_CFG_0, BRDMA_DATA_USE, ALU),
+	FIELD_ENUM(SDP_RDMA_D_BRDMA_CFG_0, BRDMA_DATA_USE, BOTH),
+};
+
+static const uint8_t map_element_size[] = {
+	FIELD_ENUM(SDP_RDMA_D_BRDMA_CFG_0, BRDMA_DATA_SIZE, ONE_BYTE),
+	FIELD_ENUM(SDP_RDMA_D_BRDMA_CFG_0, BRDMA_DATA_SIZE, TWO_BYTE),
+	FIELD_ENUM(SDP_RDMA_D_BRDMA_CFG_0, BRDMA_DATA_SIZE, TWO_BYTE),
+};
+
+static const uint8_t map_op_mode[] = {
+	FIELD_ENUM(SDP_RDMA_D_BRDMA_CFG_0, BRDMA_DATA_MODE, PER_ELEMENT),
+	FIELD_ENUM(SDP_RDMA_D_BRDMA_CFG_0, BRDMA_DATA_MODE, PER_KERNEL),
+	FIELD_ENUM(SDP_RDMA_D_BRDMA_CFG_0, BRDMA_DATA_MODE, PER_ELEMENT),
+};
+
+static const uint8_t map_ram_type[] = {
+	FIELD_ENUM(SDP_RDMA_D_BRDMA_CFG_0, BRDMA_RAM_TYPE, MC),
+	FIELD_ENUM(SDP_RDMA_D_BRDMA_CFG_0, BRDMA_RAM_TYPE, CV),
+};
+
+static const uint8_t map_perf_dma[] = {
+	FIELD_ENUM(SDP_D_PERF_ENABLE_0, PERF_DMA_EN, NO),
+	FIELD_ENUM(SDP_D_PERF_ENABLE_0, PERF_DMA_EN, YES),
+};
+
+static const uint8_t map_perf_lut[] = {
+	FIELD_ENUM(SDP_D_PERF_ENABLE_0, PERF_LUT_EN, NO),
+	FIELD_ENUM(SDP_D_PERF_ENABLE_0, PERF_LUT_EN, YES),
+};
+
+static const uint8_t map_perf_sat[] = {
+	FIELD_ENUM(SDP_D_PERF_ENABLE_0, PERF_SAT_EN, NO),
+	FIELD_ENUM(SDP_D_PERF_ENABLE_0, PERF_SAT_EN, YES),
+};
+
+static const uint8_t map_perf_nan_inf[] = {
+	FIELD_ENUM(SDP_D_PERF_ENABLE_0, PERF_NAN_INF_COUNT_EN, NO),
+	FIELD_ENUM(SDP_D_PERF_ENABLE_0, PERF_NAN_INF_COUNT_EN, YES),
+};
+
+void
+dla_sdp_set_producer(struct dla_engine *engine, int32_t group_id, int32_t rdma_group_id)
+{
+	uint32_t reg;
+
+	/**
+	 * set producer pointer for all sub-modules
+	 */
+	reg = group_id << SHIFT(SDP_S_POINTER_0, PRODUCER);
+	sdp_reg_write(engine, S_POINTER, reg);
+	reg = rdma_group_id << SHIFT(SDP_RDMA_S_POINTER_0, PRODUCER);
+	sdp_rdma_reg_write(engine, S_POINTER, reg);
+}
+
+int
+dla_sdp_enable(struct dla_engine *engine, struct dla_processor_group *group)
+{
+	uint32_t reg;
+
+	/**
+	 * enable all sub-modules
+	 */
+	if (group->is_rdma_needed) {
+		reg = FIELD_ENUM(SDP_RDMA_D_OP_ENABLE_0, OP_EN, ENABLE);
+		sdp_rdma_reg_write(engine, D_OP_ENABLE, reg);
+	}
+	reg = FIELD_ENUM(SDP_D_OP_ENABLE_0, OP_EN, ENABLE);
+	sdp_reg_write(engine, D_OP_ENABLE, reg);
+
+	return 0;
+}
+
+void
+dla_sdp_rdma_check(struct dla_processor_group *group)
+{
+	uint8_t x1_rdma_ena;
+	uint8_t x2_rdma_ena;
+	uint8_t y_rdma_ena;
+	uint8_t fly;
+	struct dla_sdp_op_desc *sdp_op;
+	struct dla_sdp_surface_desc *sdp_surface;
+
+	sdp_op = &group->operation_desc->sdp_op;
+	sdp_surface = &group->surface_desc->sdp_surface;
+
+	x1_rdma_ena = sdp_op->x1_op.enable;
+	x2_rdma_ena = sdp_op->x2_op.enable;
+	y_rdma_ena  = sdp_op->y_op.enable;
+
+	x1_rdma_ena &= (sdp_op->x1_op.mode != SDP_OP_PER_LAYER);
+	x2_rdma_ena &= (sdp_op->x2_op.mode != SDP_OP_PER_LAYER);
+	y_rdma_ena &= (sdp_op->y_op.mode != SDP_OP_PER_LAYER);
+
+	fly = sdp_surface->src_data.type == DLA_MEM_HW;
+
+	group->is_rdma_needed = (!fly) || (x1_rdma_ena ||
+					x2_rdma_ena || y_rdma_ena);
+}
+
+static int32_t
+processor_sdp_program(struct dla_engine *engine, struct dla_processor_group *group)
+{
+	int32_t ret = 0;
+	uint64_t src_addr = -1, x1_addr = -1, x2_addr = -1;
+	uint64_t  y_addr = -1, dst_addr = -1;
+	uint32_t reg, high, low;
+	uint8_t fly;
+	uint32_t atom_size;
+	struct dla_sdp_op *x1_op;
+	struct dla_sdp_op *x2_op;
+	struct dla_sdp_op *y_op;
+	uint8_t x1_rdma_ena;
+	uint8_t x2_rdma_ena;
+	uint8_t y_rdma_ena;
+	uint8_t out_dma_ena;
+	struct dla_lut_param lut;
+	struct dla_sdp_op_desc *sdp_op;
+	struct dla_sdp_surface_desc *sdp_surface;
+
+	atom_size = engine->config_data->atom_size;
+
+	sdp_op = &group->operation_desc->sdp_op;
+	sdp_surface = &group->surface_desc->sdp_surface;
+
+	fly = sdp_surface->src_data.type == DLA_MEM_HW;
+	out_dma_ena = sdp_surface->dst_data.type != DLA_MEM_HW;
+	x1_op = &sdp_op->x1_op;
+	x2_op = &sdp_op->x2_op;
+	y_op = &sdp_op->y_op;
+	x1_rdma_ena = x1_op->enable && x1_op->type != SDP_OP_NONE;
+	x2_rdma_ena = x2_op->enable && x2_op->type != SDP_OP_NONE;
+	y_rdma_ena  = y_op->enable && y_op->type != SDP_OP_NONE;
+
+	/* load address */
+	if (!fly) {
+		ret = dla_read_input_address(engine, &sdp_surface->src_data,
+						&src_addr,
+						group->op_desc->index,
+						group->roi_index,
+					    1);
+		if (ret)
+			goto exit;
+	}
+
+	if (out_dma_ena) {
+		dla_get_dma_cube_address(engine->driver_context,
+					engine->task->task_data,
+					sdp_surface->dst_data.address,
+					sdp_surface->dst_data.offset,
+					(void *)&dst_addr,
+					DESTINATION_DMA);
+	}
+
+	if (sdp_op->lut_index >= 0) {
+		group->lut_index = sdp_op->lut_index;
+		dla_read_lut(engine, sdp_op->lut_index, (void *)&lut);
+	}
+
+
+	x1_rdma_ena &= (x1_op->mode != SDP_OP_PER_LAYER);
+	x2_rdma_ena &= (x2_op->mode != SDP_OP_PER_LAYER);
+	y_rdma_ena &= (y_op->mode != SDP_OP_PER_LAYER);
+
+	if (x1_rdma_ena) {
+		dla_get_dma_cube_address(engine->driver_context,
+					engine->task->task_data,
+					sdp_surface->x1_data.address,
+					sdp_surface->x1_data.offset,
+					(void *)&x1_addr,
+					DESTINATION_DMA);
+	}
+	if (x2_rdma_ena) {
+		dla_get_dma_cube_address(engine->driver_context,
+					engine->task->task_data,
+					sdp_surface->x2_data.address,
+					sdp_surface->x2_data.offset,
+					(void *)&x2_addr,
+					DESTINATION_DMA);
+	}
+	if (y_rdma_ena) {
+		dla_get_dma_cube_address(engine->driver_context,
+					engine->task->task_data,
+					sdp_surface->y_data.address,
+					sdp_surface->y_data.offset,
+					(void *)&y_addr,
+					DESTINATION_DMA);
+	}
+
+	reg = (map_fly[0] << SHIFT(SDP_RDMA_D_FEATURE_MODE_CFG_0, FLYING_MODE));
+	sdp_rdma_reg_write(engine, D_FEATURE_MODE_CFG, reg);
+
+	reg = (map_ena[1] << SHIFT(SDP_RDMA_D_BRDMA_CFG_0, BRDMA_DISABLE));
+	sdp_rdma_reg_write(engine, D_BRDMA_CFG, reg);
+	reg = (map_ena[1] << SHIFT(SDP_RDMA_D_NRDMA_CFG_0, NRDMA_DISABLE));
+	sdp_rdma_reg_write(engine, D_NRDMA_CFG, reg);
+	reg = (map_ena[1] << SHIFT(SDP_RDMA_D_ERDMA_CFG_0, ERDMA_DISABLE));
+	sdp_rdma_reg_write(engine, D_ERDMA_CFG, reg);
+
+	reg = (map_fly[fly] <<
+			SHIFT(SDP_RDMA_D_FEATURE_MODE_CFG_0, FLYING_MODE)) |
+	(map_wg[sdp_op->conv_mode == CONV_MODE_WINOGRAD] <<
+			SHIFT(SDP_RDMA_D_FEATURE_MODE_CFG_0, WINOGRAD)) |
+	(map_precision[sdp_op->src_precision] <<
+			SHIFT(SDP_RDMA_D_FEATURE_MODE_CFG_0, IN_PRECISION)) |
+	(map_precision[sdp_op->dst_precision] <<
+			SHIFT(SDP_RDMA_D_FEATURE_MODE_CFG_0, OUT_PRECISION)) |
+	(map_proc_precision[sdp_op->dst_precision][sdp_op->src_precision] <<
+			SHIFT(SDP_RDMA_D_FEATURE_MODE_CFG_0, PROC_PRECISION)) |
+	((sdp_op->batch_num-1) <<
+			SHIFT(SDP_RDMA_D_FEATURE_MODE_CFG_0, BATCH_NUMBER));
+	sdp_rdma_reg_write(engine, D_FEATURE_MODE_CFG, reg);
+
+	if (group->is_rdma_needed) {
+
+		sdp_rdma_reg_write(engine, D_DATA_CUBE_WIDTH,
+					sdp_surface->src_data.width - 1);
+		sdp_rdma_reg_write(engine, D_DATA_CUBE_HEIGHT,
+					sdp_surface->src_data.height - 1);
+		sdp_rdma_reg_write(engine, D_DATA_CUBE_CHANNEL,
+					sdp_surface->src_data.channel - 1);
+
+		/* config SDP source info */
+		if (!fly) {
+			/**
+			 * if not on-the-fly, we have to config
+			 * the source cube info
+			 */
+			high = upper_32_bits(src_addr);
+			low = lower_32_bits(src_addr);
+			sdp_rdma_reg_write(engine, D_SRC_BASE_ADDR_LOW, low);
+			sdp_rdma_reg_write(engine, D_SRC_BASE_ADDR_HIGH, high);
+			sdp_rdma_reg_write(engine, D_SRC_LINE_STRIDE,
+					sdp_surface->src_data.line_stride);
+			sdp_rdma_reg_write(engine, D_SRC_SURFACE_STRIDE,
+					sdp_surface->src_data.surf_stride);
+			sdp_rdma_reg_write(engine, D_SRC_DMA_CFG,
+				map_ram_type[sdp_surface->src_data.type]);
+		}
+
+		/* config x1 source info */
+		reg = (map_ena[x1_rdma_ena] <<
+				SHIFT(SDP_RDMA_D_BRDMA_CFG_0,
+				BRDMA_DISABLE)) |
+			(map_op_type[x1_op->type] <<
+				SHIFT(SDP_RDMA_D_BRDMA_CFG_0,
+				BRDMA_DATA_USE)) |
+			(map_element_size[x1_op->precision] <<
+				SHIFT(SDP_RDMA_D_BRDMA_CFG_0,
+				BRDMA_DATA_SIZE)) |
+			(map_op_mode[x1_op->mode] <<
+				SHIFT(SDP_RDMA_D_BRDMA_CFG_0,
+				BRDMA_DATA_MODE)) |
+			(map_ram_type[sdp_surface->x1_data.type] <<
+				SHIFT(SDP_RDMA_D_BRDMA_CFG_0,
+				BRDMA_RAM_TYPE));
+		sdp_rdma_reg_write(engine, D_BRDMA_CFG, reg);
+
+		if (x1_rdma_ena) {
+			high = upper_32_bits(x1_addr);
+			low = lower_32_bits(x1_addr);
+			sdp_rdma_reg_write(engine, D_BS_BASE_ADDR_LOW,
+					low);
+			sdp_rdma_reg_write(engine, D_BS_BASE_ADDR_HIGH,
+					high);
+			sdp_rdma_reg_write(engine, D_BS_LINE_STRIDE,
+					sdp_surface->x1_data.line_stride);
+			sdp_rdma_reg_write(engine, D_BS_SURFACE_STRIDE,
+					sdp_surface->x1_data.surf_stride);
+		}
+
+		/* config x2 source info */
+		reg = (map_ena[x2_rdma_ena] <<
+					SHIFT(SDP_RDMA_D_NRDMA_CFG_0,
+					NRDMA_DISABLE)) |
+			(map_op_type[x2_op->type] <<
+					SHIFT(SDP_RDMA_D_NRDMA_CFG_0,
+					NRDMA_DATA_USE)) |
+			(map_element_size[x2_op->precision] <<
+					SHIFT(SDP_RDMA_D_NRDMA_CFG_0,
+					NRDMA_DATA_SIZE)) |
+			(map_op_mode[x2_op->mode] <<
+					SHIFT(SDP_RDMA_D_NRDMA_CFG_0,
+					NRDMA_DATA_MODE)) |
+			(map_ram_type[sdp_surface->x2_data.type] <<
+					SHIFT(SDP_RDMA_D_NRDMA_CFG_0,
+					NRDMA_RAM_TYPE));
+
+		sdp_rdma_reg_write(engine, D_NRDMA_CFG, reg);
+
+		if (x2_rdma_ena) {
+			high = upper_32_bits(x2_addr);
+			low = lower_32_bits(x2_addr);
+			sdp_rdma_reg_write(engine, D_BN_BASE_ADDR_LOW,
+					low);
+			sdp_rdma_reg_write(engine, D_BN_BASE_ADDR_HIGH,
+					high);
+			sdp_rdma_reg_write(engine, D_BN_LINE_STRIDE,
+					sdp_surface->x2_data.line_stride);
+			sdp_rdma_reg_write(engine, D_BN_SURFACE_STRIDE,
+					sdp_surface->x2_data.surf_stride);
+		}
+
+		/* config y source info */
+		reg = (map_ena[y_rdma_ena] <<
+				SHIFT(SDP_RDMA_D_ERDMA_CFG_0,
+				ERDMA_DISABLE)) |
+			(map_op_type[y_op->type] <<
+				SHIFT(SDP_RDMA_D_ERDMA_CFG_0,
+				ERDMA_DATA_USE)) |
+			(map_element_size[y_op->precision] <<
+				SHIFT(SDP_RDMA_D_ERDMA_CFG_0,
+				ERDMA_DATA_SIZE)) |
+			(map_op_mode[y_op->mode] <<
+				SHIFT(SDP_RDMA_D_ERDMA_CFG_0,
+				ERDMA_DATA_MODE)) |
+			(map_ram_type[sdp_surface->y_data.type] <<
+				SHIFT(SDP_RDMA_D_ERDMA_CFG_0,
+				ERDMA_RAM_TYPE));
+
+		sdp_rdma_reg_write(engine, D_ERDMA_CFG, reg);
+		if (y_rdma_ena) {
+			high = upper_32_bits(y_addr);
+			low = lower_32_bits(y_addr);
+			sdp_rdma_reg_write(engine, D_EW_BASE_ADDR_LOW,
+					low);
+			sdp_rdma_reg_write(engine, D_EW_BASE_ADDR_HIGH,
+					high);
+			sdp_rdma_reg_write(engine, D_EW_LINE_STRIDE,
+					sdp_surface->y_data.line_stride);
+			sdp_rdma_reg_write(engine, D_EW_SURFACE_STRIDE,
+					sdp_surface->y_data.surf_stride);
+		}
+	}
+
+	if (sdp_op->lut_index >= 0)
+		update_lut(engine, SDP_S_LUT_ACCESS_CFG_0, &lut,
+					sdp_op->src_precision);
+
+	sdp_reg_write(engine, D_DATA_CUBE_WIDTH, sdp_surface->src_data.width - 1);
+	sdp_reg_write(engine, D_DATA_CUBE_HEIGHT, sdp_surface->src_data.height - 1);
+	sdp_reg_write(engine, D_DATA_CUBE_CHANNEL, sdp_surface->src_data.channel - 1);
+
+	if (out_dma_ena) {
+		high = upper_32_bits(dst_addr);
+		low = lower_32_bits(dst_addr);
+		sdp_reg_write(engine, D_DST_BASE_ADDR_HIGH,
+				high);
+		sdp_reg_write(engine, D_DST_BASE_ADDR_LOW,
+				low);
+		sdp_reg_write(engine, D_DST_LINE_STRIDE,
+				sdp_surface->dst_data.line_stride);
+		sdp_reg_write(engine, D_DST_SURFACE_STRIDE,
+				sdp_surface->dst_data.surf_stride);
+	}
+
+	/* Config BS module */
+	reg = (map_bypass[x1_op->enable] <<
+			SHIFT(SDP_D_DP_BS_CFG_0,
+			BS_BYPASS)) |
+		(map_bypass[x1_op->type != SDP_OP_MUL &&
+				x1_op->type != SDP_OP_NONE] <<
+			SHIFT(SDP_D_DP_BS_CFG_0,
+			BS_ALU_BYPASS)) |
+		(map_alu_op[x1_op->alu_type] <<
+			SHIFT(SDP_D_DP_BS_CFG_0,
+			BS_ALU_ALGO)) |
+		(map_bypass[x1_op->type != SDP_OP_ADD &&
+			x1_op->type != SDP_OP_NONE] <<
+			SHIFT(SDP_D_DP_BS_CFG_0,
+			BS_MUL_BYPASS)) |
+		(map_prelu[x1_op->act == ACTIVATION_PRELU]
+			<< SHIFT(SDP_D_DP_BS_CFG_0,
+			BS_MUL_PRELU)) |
+		(map_bypass[x1_op->act == ACTIVATION_RELU] <<
+			SHIFT(SDP_D_DP_BS_CFG_0,
+			BS_RELU_BYPASS));
+	sdp_reg_write(engine, D_DP_BS_CFG, reg);
+
+	if (x1_op->enable) {
+		if (x1_op->type == SDP_OP_ADD ||
+				x1_op->type == SDP_OP_BOTH) {
+			reg = (map_alu_src[x1_op->mode == SDP_OP_PER_LAYER] <<
+					SHIFT(SDP_D_DP_BS_ALU_CFG_0,
+					BS_ALU_SRC)) |
+				(x1_op->shift_value <<
+					SHIFT(SDP_D_DP_BS_ALU_CFG_0,
+					BS_ALU_SHIFT_VALUE));
+			sdp_reg_write(engine, D_DP_BS_ALU_CFG, reg);
+		}
+
+		if (x1_op->mode == SDP_OP_PER_LAYER) {
+			sdp_reg_write(engine, D_DP_BS_ALU_SRC_VALUE,
+					x1_op->alu_operand);
+			sdp_reg_write(engine, D_DP_BS_MUL_SRC_VALUE,
+					x1_op->mul_operand);
+		}
+
+		/**
+		 * MUL truncate will take effect no matter
+		 * MUL is bypassed or not
+		 */
+		reg = (map_alu_src[x1_op->mode == SDP_OP_PER_LAYER] <<
+			SHIFT(SDP_D_DP_BS_MUL_CFG_0,
+			BS_MUL_SRC)) |
+		(x1_op->truncate <<
+			SHIFT(SDP_D_DP_BS_MUL_CFG_0,
+			BS_MUL_SHIFT_VALUE));
+		sdp_reg_write(engine, D_DP_BS_MUL_CFG, reg);
+	}
+
+	/* Config BN module */
+	reg = (map_bypass[x2_op->enable] <<
+			SHIFT(SDP_D_DP_BN_CFG_0,
+			BN_BYPASS)) |
+		(map_bypass[x2_op->type != SDP_OP_MUL &&
+			x2_op->type != SDP_OP_NONE] <<
+			SHIFT(SDP_D_DP_BN_CFG_0,
+			BN_ALU_BYPASS)) |
+		(map_alu_op[x2_op->alu_type] <<
+			SHIFT(SDP_D_DP_BN_CFG_0,
+			BN_ALU_ALGO)) |
+		(map_bypass[x2_op->type != SDP_OP_ADD &&
+			x2_op->type != SDP_OP_NONE] <<
+			SHIFT(SDP_D_DP_BN_CFG_0,
+			BN_MUL_BYPASS)) |
+		(map_prelu[x2_op->act == ACTIVATION_PRELU]
+			<< SHIFT(SDP_D_DP_BN_CFG_0,
+			BN_MUL_PRELU)) |
+		(map_bypass[x2_op->act == ACTIVATION_RELU]
+			<< SHIFT(SDP_D_DP_BN_CFG_0,
+			BN_RELU_BYPASS));
+	sdp_reg_write(engine, D_DP_BN_CFG, reg);
+
+	if (x2_op->enable) {
+		if (x2_op->type == SDP_OP_ADD ||
+			x2_op->type == SDP_OP_BOTH) {
+			reg = (map_alu_src[x2_op->mode == SDP_OP_PER_LAYER] <<
+					SHIFT(SDP_D_DP_BN_ALU_CFG_0,
+					BN_ALU_SRC)) |
+				(x2_op->shift_value <<
+					SHIFT(SDP_D_DP_BN_ALU_CFG_0,
+					BN_ALU_SHIFT_VALUE));
+			sdp_reg_write(engine, D_DP_BN_ALU_CFG, reg);
+		}
+
+		if (x2_op->mode == SDP_OP_PER_LAYER) {
+			sdp_reg_write(engine, D_DP_BN_ALU_SRC_VALUE,
+					x2_op->alu_operand);
+			sdp_reg_write(engine, D_DP_BN_MUL_SRC_VALUE,
+					x2_op->mul_operand);
+		}
+
+		reg = (map_alu_src[x2_op->mode == SDP_OP_PER_LAYER] <<
+				SHIFT(SDP_D_DP_BN_MUL_CFG_0,
+				BN_MUL_SRC)) |
+			(x2_op->truncate <<
+				SHIFT(SDP_D_DP_BN_MUL_CFG_0,
+				BN_MUL_SHIFT_VALUE));
+		sdp_reg_write(engine, D_DP_BN_MUL_CFG, reg);
+	}
+
+	/* Config EW module */
+	reg = (map_bypass[y_op->enable] <<
+			SHIFT(SDP_D_DP_EW_CFG_0,
+			EW_BYPASS)) |
+		(map_bypass[y_op->type != SDP_OP_MUL &&
+			y_op->type != SDP_OP_NONE] <<
+			SHIFT(SDP_D_DP_EW_CFG_0,
+			EW_ALU_BYPASS)) |
+		(map_alu_op[y_op->alu_type] <<
+			SHIFT(SDP_D_DP_EW_CFG_0,
+			EW_ALU_ALGO)) |
+		(map_bypass[y_op->type != SDP_OP_ADD &&
+			y_op->type != SDP_OP_NONE] <<
+			SHIFT(SDP_D_DP_EW_CFG_0,
+			EW_MUL_BYPASS)) |
+		((map_prelu[y_op->act == ACTIVATION_PRELU]) <<
+			SHIFT(SDP_D_DP_EW_CFG_0,
+			EW_MUL_PRELU)) |
+		(map_bypass[y_op->act == ACTIVATION_LUT] <<
+			SHIFT(SDP_D_DP_EW_CFG_0,
+			EW_LUT_BYPASS));
+	sdp_reg_write(engine, D_DP_EW_CFG, reg);
+
+	if (y_op->enable) {
+		if (y_op->type == SDP_OP_ADD || y_op->type == SDP_OP_BOTH) {
+			reg = (map_alu_src[y_op->mode == SDP_OP_PER_LAYER] <<
+					SHIFT(SDP_D_DP_EW_ALU_CFG_0,
+					EW_ALU_SRC)) |
+				(map_bypass[y_op->cvt.alu_cvt.enable] <<
+					SHIFT(SDP_D_DP_EW_ALU_CFG_0,
+					EW_ALU_CVT_BYPASS));
+			sdp_reg_write(engine, D_DP_EW_ALU_CFG, reg);
+
+			if (y_op->mode == SDP_OP_PER_LAYER) {
+				sdp_reg_write(engine, D_DP_EW_ALU_SRC_VALUE,
+						y_op->alu_operand);
+			} else {
+				sdp_reg_write(engine, D_DP_EW_ALU_CVT_OFFSET_VALUE,
+						y_op->cvt.alu_cvt.offset);
+				sdp_reg_write(engine, D_DP_EW_ALU_CVT_SCALE_VALUE,
+						y_op->cvt.alu_cvt.scale);
+				sdp_reg_write(engine, D_DP_EW_ALU_CVT_TRUNCATE_VALUE,
+						y_op->cvt.alu_cvt.truncate);
+			}
+		}
+
+		if (y_op->type == SDP_OP_MUL || y_op->type == SDP_OP_BOTH) {
+			reg = (map_alu_src[y_op->mode == SDP_OP_PER_LAYER] <<
+					SHIFT(SDP_D_DP_EW_MUL_CFG_0,
+					EW_MUL_SRC)) |
+				(map_bypass[y_op->cvt.mul_cvt.enable] <<
+					SHIFT(SDP_D_DP_EW_MUL_CFG_0,
+					EW_MUL_CVT_BYPASS));
+			sdp_reg_write(engine, D_DP_EW_MUL_CFG, reg);
+
+			if (y_op->mode == SDP_OP_PER_LAYER) {
+				sdp_reg_write(engine, D_DP_EW_MUL_SRC_VALUE,
+						y_op->mul_operand);
+			} else {
+				sdp_reg_write(engine, D_DP_EW_MUL_CVT_OFFSET_VALUE,
+						y_op->cvt.mul_cvt.offset);
+				sdp_reg_write(engine, D_DP_EW_MUL_CVT_SCALE_VALUE,
+						y_op->cvt.mul_cvt.scale);
+				sdp_reg_write(engine, D_DP_EW_MUL_CVT_TRUNCATE_VALUE,
+						y_op->cvt.mul_cvt.truncate);
+			}
+		}
+
+		sdp_reg_write(engine, D_DP_EW_TRUNCATE_VALUE, y_op->truncate);
+	}
+
+	reg = (map_fly[sdp_surface->src_data.type == DLA_MEM_HW] <<
+			SHIFT(SDP_D_FEATURE_MODE_CFG_0,
+			FLYING_MODE)) |
+		(map_dst[sdp_surface->dst_data.type == DLA_MEM_HW] <<
+			SHIFT(SDP_D_FEATURE_MODE_CFG_0,
+			OUTPUT_DST)) |
+		(map_wg[sdp_op->conv_mode == CONV_MODE_WINOGRAD] <<
+			SHIFT(SDP_D_FEATURE_MODE_CFG_0,
+			WINOGRAD)) |
+		((sdp_op->batch_num - 1) <<
+			SHIFT(SDP_D_FEATURE_MODE_CFG_0,
+			BATCH_NUMBER));
+	sdp_reg_write(engine, D_FEATURE_MODE_CFG, reg);
+	sdp_reg_write(engine, D_DST_DMA_CFG,
+			map_ram_type[sdp_surface->dst_data.type]);
+	if (sdp_op->batch_num > 1)
+		sdp_reg_write(engine, D_DST_BATCH_STRIDE, sdp_op->batch_stride);
+
+	reg =
+	(map_proc_precision[sdp_op->dst_precision][sdp_op->src_precision] <<
+			SHIFT(SDP_D_DATA_FORMAT_0,
+			PROC_PRECISION)) |
+		(map_precision[sdp_op->dst_precision] <<
+			SHIFT(SDP_D_DATA_FORMAT_0,
+			OUT_PRECISION));
+	sdp_reg_write(engine, D_DATA_FORMAT, reg);
+	sdp_reg_write(engine, D_CVT_OFFSET, sdp_op->out_cvt.offset);
+	sdp_reg_write(engine, D_CVT_SCALE, sdp_op->out_cvt.scale);
+	sdp_reg_write(engine, D_CVT_SHIFT, sdp_op->out_cvt.truncate);
+
+exit:
+	return ret;
+}
+
+int
+dla_sdp_is_ready(struct dla_processor *processor,
+			   struct dla_processor_group *group)
+{
+	struct dla_processor_group *next_group;
+	struct dla_sdp_op_desc *sdp_op;
+
+	sdp_op = &group->operation_desc->sdp_op;
+	next_group = &processor->groups[!group->id];
+
+	/**
+	 * Single LUT is shared between two SDP groups, need to make
+	 * sure that usage does not conflict. Also, LUT write
+	 * access is locked when SDP sub-engine is active, so delay
+	 * writing LUT when another group is active.
+	 */
+
+	/**
+	 * if no LUT required for current group then it can be programmed
+	 * without further checks
+	 */
+	if (sdp_op->lut_index == -1)
+		return 1;
+
+	/**
+	 * if same LUT is used for both groups then it can be programmed
+	 * without more checks. Even if another group is active and LUT
+	 * is locked, it would have been programmed by another group.
+	 */
+	if (next_group->lut_index == sdp_op->lut_index)
+		return 1;
+
+	/**
+	 * if LUT index of another group is not -1 means some LUT is programmed,
+	 * then do not program current LUT as we already know current LUT is not
+	 * -1 and neither same as another group.
+	 */
+	if (next_group->lut_index != -1)
+		return 0;
+
+	/**
+	 * if current group needs LUT different than another group and that
+	 * group is not active then program it.
+	 */
+	if (!next_group->active)
+		return 1;
+
+	/**
+	 * if control is here it means current group is using LUT different than
+	 * another group and that group is active. Wait for another group to
+	 * become idle.
+	 */
+	return 0;
+}
+
+void
+dla_sdp_dump_config(struct dla_processor_group *group)
+{
+	struct dla_sdp_op_desc *sdp_op;
+	struct dla_sdp_surface_desc *sdp_surface;
+
+	sdp_surface = &group->surface_desc->sdp_surface;
+	sdp_op = &group->operation_desc->sdp_op;
+}
+
+int
+dla_sdp_program(struct dla_engine *engine, struct dla_processor_group *group)
+{
+	int32_t ret;
+
+	dla_enable_intr(engine, MASK(GLB_S_INTR_MASK_0, SDP_DONE_MASK1) |
+			MASK(GLB_S_INTR_MASK_0, SDP_DONE_MASK0));
+
+	ret = processor_sdp_program(engine, group);
+	if (ret)
+		goto exit;
+
+exit:
+	return ret;
+}
-- 
2.25.1


From mboxrd@z Thu Jan  1 00:00:00 1970
Return-Path: <linux-kernel-owner@kernel.org>
X-Spam-Checker-Version: SpamAssassin 3.4.0 (2014-02-07) on
	aws-us-west-2-korg-lkml-1.web.codeaurora.org
Received: from vger.kernel.org (vger.kernel.org [23.128.96.18])
	by smtp.lore.kernel.org (Postfix) with ESMTP id A6339C43217
	for <linux-kernel@archiver.kernel.org>; Tue, 19 Apr 2022 14:36:07 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1353473AbiDSOis (ORCPT
        <rfc822;linux-kernel@archiver.kernel.org>);
        Tue, 19 Apr 2022 10:38:48 -0400
Received: from lindbergh.monkeyblade.net ([23.128.96.19]:55604 "EHLO
        lindbergh.monkeyblade.net" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1353415AbiDSOim (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Tue, 19 Apr 2022 10:38:42 -0400
Received: from out1.migadu.com (out1.migadu.com [91.121.223.63])
        by lindbergh.monkeyblade.net (Postfix) with ESMTPS id 75B2A1FCEE;
        Tue, 19 Apr 2022 07:35:59 -0700 (PDT)
Date:   Tue, 19 Apr 2022 22:35:29 +0800
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=linux.dev; s=key1;
        t=1650378957;
        h=from:from:reply-to:subject:subject:date:date:message-id:message-id:
         to:to:cc:cc:mime-version:mime-version:content-type:content-type:
         content-transfer-encoding:content-transfer-encoding:
         in-reply-to:in-reply-to:references:references;
        bh=QawvvwMKEl52ui8qtXQSbeAZjXUbrb0qfB23spQfQ5o=;
        b=V2i84UtxHjyIILi/gKDecMrXxZHmNluIocH16r4VPQD6u4LEOHLM+hQg3Pt5MaSbts9s1F
        pIy1R8GpScNNC3spVtoSLh6JAQcD3kjT7l23TKEbJhDrTtWtr9vSsO1w/8ujxPTvCe0HN4
        KmQ5TaCHq+fTgMKN7hS57OFf0e/ApZk=
X-Report-Abuse: Please report any abuse attempt to abuse@migadu.com and include these headers.
From:   Cai Huoqing <cai.huoqing@linux.dev>
To:     Christian =?utf-8?B?S8O2bmln?= <christian.koenig@amd.com>
Cc:     Maarten Lankhorst <maarten.lankhorst@linux.intel.com>,
        Maxime Ripard <mripard@kernel.org>,
        Thomas Zimmermann <tzimmermann@suse.de>,
        David Airlie <airlied@linux.ie>,
        Daniel Vetter <daniel@ffwll.ch>,
        Sumit Semwal <sumit.semwal@linaro.org>,
        linux-kernel@vger.kernel.org, dri-devel@lists.freedesktop.org,
        linux-media@vger.kernel.org, linaro-mm-sig@lists.linaro.org
Subject: Re: [PATCH 2/2] drm/nvdla: Add driver support for NVDLA
Message-ID: <20220419143529.GA44323@chq-T47>
References: <20220419135908.39606-1-cai.huoqing@linux.dev>
 <20220419135908.39606-3-cai.huoqing@linux.dev>
 <20bac605-97e6-e5cd-c4e4-83a8121645d8@amd.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=utf-8
Content-Disposition: inline
Content-Transfer-Encoding: 8bit
In-Reply-To: <20bac605-97e6-e5cd-c4e4-83a8121645d8@amd.com>
X-Migadu-Flow: FLOW_OUT
X-Migadu-Auth-User: linux.dev
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On 19 4月 22 16:07:44, Christian König wrote:
> Am 19.04.22 um 15:59 schrieb Cai Huoqing:
> > The NVIDIA Deep Learning Accelerator (NVDLA) is an open source IP
> > which is integrated into NVIDIA Jetson AGX Xavier,
> > so add driver support for this accelerator.
> > 
> > Signed-off-by: Cai Huoqing <cai.huoqing@linux.dev>
> > 
> 
> Well doesn't looks so bad on first glance (regarding coding style etc..)
> 
> But am I blind or isn't there any UAPI for the driver? I mean adding a DRM
> driver without any change to include/uapi/drm is really odd.
thanks for your reply, I will rename nvdla_ioctl.h which is UAPI headfile,
then put it to include/uapi/drm.

thanks,
Cai
> 
> Regards,
> Christian.

From mboxrd@z Thu Jan  1 00:00:00 1970
Return-Path: <linux-kernel-owner@kernel.org>
X-Spam-Checker-Version: SpamAssassin 3.4.0 (2014-02-07) on
	aws-us-west-2-korg-lkml-1.web.codeaurora.org
Received: from vger.kernel.org (vger.kernel.org [23.128.96.18])
	by smtp.lore.kernel.org (Postfix) with ESMTP id 27D42C433FE
	for <linux-kernel@archiver.kernel.org>; Wed, 20 Apr 2022 07:54:24 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1355264AbiDTH5H (ORCPT
        <rfc822;linux-kernel@archiver.kernel.org>);
        Wed, 20 Apr 2022 03:57:07 -0400
Received: from lindbergh.monkeyblade.net ([23.128.96.19]:52342 "EHLO
        lindbergh.monkeyblade.net" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1348806AbiDTH5B (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Wed, 20 Apr 2022 03:57:01 -0400
Received: from mga02.intel.com (mga02.intel.com [134.134.136.20])
        by lindbergh.monkeyblade.net (Postfix) with ESMTPS id CA3C63C490;
        Wed, 20 Apr 2022 00:54:15 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple;
  d=intel.com; i=@intel.com; q=dns/txt; s=Intel;
  t=1650441255; x=1681977255;
  h=date:from:to:cc:subject:message-id:references:
   mime-version:in-reply-to;
  bh=/cXH9mhL+Kc+JfnZMdiLurkemiqzhu8RI4LasdVuTxk=;
  b=V/kxdcz+grfL340Lm8b3vZO3CaqCUEOQe4H8M7zCoN2j+IS1CvvgMDku
   jg9MrN8X6ZGqMMYlwgGcxay7v2qOWoSpeYguzMpTEiBrE1lS7DkEYaId3
   Sc11LElfZxzMH7UjhSJpUorQ1VEKZ2svp0GPgVHJfab8kdBDp98ij7bAT
   z3XvgEvFEu9P5XJbtn3fEKjWP3udXqEBfsrb5/21PGpwvcFBtSOBelVI2
   PVQ/hVcXQ1J4I6CGxfrfbjfPRBY4GuIdPfwzLcunH7bUdOTM7Rps3iazL
   J6j9dVyQIF3xPoy81GrK00VFZsgGq2VbVahLETciRPf6V+uc4MRtGCwef
   w==;
X-IronPort-AV: E=McAfee;i="6400,9594,10322"; a="251274579"
X-IronPort-AV: E=Sophos;i="5.90,275,1643702400"; 
   d="scan'208";a="251274579"
Received: from fmsmga006.fm.intel.com ([10.253.24.20])
  by orsmga101.jf.intel.com with ESMTP/TLS/ECDHE-RSA-AES256-GCM-SHA384; 20 Apr 2022 00:54:15 -0700
X-ExtLoop1: 1
X-IronPort-AV: E=Sophos;i="5.90,275,1643702400"; 
   d="scan'208";a="804962470"
Received: from lkp-server01.sh.intel.com (HELO 3abc53900bec) ([10.239.97.150])
  by fmsmga006.fm.intel.com with ESMTP; 20 Apr 2022 00:54:12 -0700
Received: from kbuild by 3abc53900bec with local (Exim 4.95)
        (envelope-from <lkp@intel.com>)
        id 1nh5AB-0006jg-9D;
        Wed, 20 Apr 2022 07:54:11 +0000
Date:   Wed, 20 Apr 2022 15:53:13 +0800
From:   kernel test robot <lkp@intel.com>
To:     Cai Huoqing <cai.huoqing@linux.dev>
Cc:     kbuild-all@lists.01.org,
        Maarten Lankhorst <maarten.lankhorst@linux.intel.com>,
        Maxime Ripard <mripard@kernel.org>,
        Thomas Zimmermann <tzimmermann@suse.de>,
        David Airlie <airlied@linux.ie>,
        Daniel Vetter <daniel@ffwll.ch>,
        Sumit Semwal <sumit.semwal@linaro.org>,
        Christian =?iso-8859-1?Q?K=F6nig?= <christian.koenig@amd.com>,
        linux-kernel@vger.kernel.org, dri-devel@lists.freedesktop.org,
        linux-media@vger.kernel.org, linaro-mm-sig@lists.linaro.org
Subject: Re: [PATCH 2/2] drm/nvdla: Add driver support for NVDLA
Message-ID: <202204201512.pp20MXT5-lkp@intel.com>
References: <20220419135908.39606-3-cai.huoqing@linux.dev>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <20220419135908.39606-3-cai.huoqing@linux.dev>
User-Agent: Mutt/1.10.1 (2018-07-13)
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

Hi Cai,

I love your patch! Yet something to improve:

[auto build test ERROR on drm/drm-next]
[also build test ERROR on drm-intel/for-linux-next drm-tip/drm-tip linus/master v5.18-rc3]
[If your patch is applied to the wrong git tree, kindly drop us a note.
And when submitting patch, we suggest to use '--base' as documented in
https://git-scm.com/docs/git-format-patch]

url:    https://github.com/intel-lab-lkp/linux/commits/Cai-Huoqing/drm-nvdla-Add-driver-support-for-NVDLA/20220419-220255
base:   git://anongit.freedesktop.org/drm/drm drm-next
config: h8300-randconfig-r014-20220420 (https://download.01.org/0day-ci/archive/20220420/202204201512.pp20MXT5-lkp@intel.com/config)
compiler: h8300-linux-gcc (GCC) 11.2.0
reproduce (this is a W=1 build):
        wget https://raw.githubusercontent.com/intel/lkp-tests/master/sbin/make.cross -O ~/bin/make.cross
        chmod +x ~/bin/make.cross
        # https://github.com/intel-lab-lkp/linux/commit/7539e5487eb7d0c6f13c03bba596e51a2238106d
        git remote add linux-review https://github.com/intel-lab-lkp/linux
        git fetch --no-tags linux-review Cai-Huoqing/drm-nvdla-Add-driver-support-for-NVDLA/20220419-220255
        git checkout 7539e5487eb7d0c6f13c03bba596e51a2238106d
        # save the config file
        mkdir build_dir && cp config build_dir/.config
        COMPILER_INSTALL_PATH=$HOME/0day COMPILER=gcc-11.2.0 make.cross W=1 O=build_dir ARCH=h8300 SHELL=/bin/bash drivers/gpu/

If you fix the issue, kindly add following tag as appropriate
Reported-by: kernel test robot <lkp@intel.com>

All error/warnings (new ones prefixed by >>):

>> make[5]: *** No rule to make target 'drivers/gpu/drm/nvdla/nvdla_engine_data.o', needed by 'drivers/gpu/drm/nvdla/built-in.a'.
>> make[5]: *** No rule to make target 'drivers/gpu/drm/nvdla/nvdla_engine_debug.o', needed by 'drivers/gpu/drm/nvdla/built-in.a'.
   make[5]: Target '__build' not remade because of errors.
--
>> drivers/gpu/drm/nvdla/nvdla_drm.c:45:9: warning: no previous prototype for 'dla_get_time_us' [-Wmissing-prototypes]
      45 | int64_t dla_get_time_us(void)
         |         ^~~~~~~~~~~~~~~
   drivers/gpu/drm/nvdla/nvdla_drm.c: In function 'nvdla_engine_isr':
>> drivers/gpu/drm/nvdla/nvdla_drm.c:75:18: warning: variable 'mask' set but not used [-Wunused-but-set-variable]
      75 |         uint32_t mask;
         |                  ^~~~
--
   drivers/gpu/drm/nvdla/nvdla_gem.c: In function 'nvdla_fill_task_desc':
>> drivers/gpu/drm/nvdla/nvdla_gem.c:39:17: warning: cast to pointer from integer of different size [-Wint-to-pointer-cast]
      39 |                 (void __user *)local_task->address_list,
         |                 ^
--
   drivers/gpu/drm/nvdla/nvdla_scheduler.c: In function 'dla_op_completion':
>> drivers/gpu/drm/nvdla/nvdla_scheduler.c:513:26: warning: variable 'task' set but not used [-Wunused-but-set-variable]
     513 |         struct dla_task *task;
         |                          ^~~~
--
>> drivers/gpu/drm/nvdla/nvdla_scheduler.c:363: warning: This comment starts with '/**', but isn't a kernel-doc comment. Refer Documentation/doc-guide/kernel-doc.rst
    * Dequeue next operation of same type from list of operations
   drivers/gpu/drm/nvdla/nvdla_scheduler.c:505: warning: This comment starts with '/**', but isn't a kernel-doc comment. Refer Documentation/doc-guide/kernel-doc.rst
    * Handle operation completion notification
   drivers/gpu/drm/nvdla/nvdla_scheduler.c:610: warning: This comment starts with '/**', but isn't a kernel-doc comment. Refer Documentation/doc-guide/kernel-doc.rst
    * Read network configuration from DRAM, network descriptor address
   drivers/gpu/drm/nvdla/nvdla_scheduler.c:920: warning: This comment starts with '/**', but isn't a kernel-doc comment. Refer Documentation/doc-guide/kernel-doc.rst
    * Execute task selected by task scheduler
--
   drivers/gpu/drm/nvdla/nvdla_bdma.c: In function 'dla_bdma_dump_config':
>> drivers/gpu/drm/nvdla/nvdla_bdma.c:157:39: warning: variable 'bdma_surface' set but not used [-Wunused-but-set-variable]
     157 |         struct dla_bdma_surface_desc *bdma_surface;
         |                                       ^~~~~~~~~~~~
>> drivers/gpu/drm/nvdla/nvdla_bdma.c:156:34: warning: variable 'bdma_op' set but not used [-Wunused-but-set-variable]
     156 |         struct dla_bdma_op_desc *bdma_op;
         |                                  ^~~~~~~
--
   drivers/gpu/drm/nvdla/nvdla_conv.c: In function 'dla_conv_dump_config':
>> drivers/gpu/drm/nvdla/nvdla_conv.c:666:39: warning: variable 'conv_surface' set but not used [-Wunused-but-set-variable]
     666 |         struct dla_conv_surface_desc *conv_surface;
         |                                       ^~~~~~~~~~~~
>> drivers/gpu/drm/nvdla/nvdla_conv.c:665:34: warning: variable 'conv_op' set but not used [-Wunused-but-set-variable]
     665 |         struct dla_conv_op_desc *conv_op;
         |                                  ^~~~~~~
--
>> drivers/gpu/drm/nvdla/nvdla_engine.c:67: warning: This comment starts with '/**', but isn't a kernel-doc comment. Refer Documentation/doc-guide/kernel-doc.rst
    * Get DMA data cube address
   drivers/gpu/drm/nvdla/nvdla_engine.c:88: warning: This comment starts with '/**', but isn't a kernel-doc comment. Refer Documentation/doc-guide/kernel-doc.rst
    * Read input buffer address
--
>> drivers/gpu/drm/nvdla/nvdla_bdma.c:56: warning: This comment starts with '/**', but isn't a kernel-doc comment. Refer Documentation/doc-guide/kernel-doc.rst
    * Program BDMA slot for transfer
--
   drivers/gpu/drm/nvdla/nvdla_sdp.c: In function 'processor_sdp_program':
>> drivers/gpu/drm/nvdla/nvdla_sdp.c:190:18: warning: variable 'atom_size' set but not used [-Wunused-but-set-variable]
     190 |         uint32_t atom_size;
         |                  ^~~~~~~~~
   drivers/gpu/drm/nvdla/nvdla_sdp.c: In function 'dla_sdp_dump_config':
>> drivers/gpu/drm/nvdla/nvdla_sdp.c:708:38: warning: variable 'sdp_surface' set but not used [-Wunused-but-set-variable]
     708 |         struct dla_sdp_surface_desc *sdp_surface;
         |                                      ^~~~~~~~~~~
>> drivers/gpu/drm/nvdla/nvdla_sdp.c:707:33: warning: variable 'sdp_op' set but not used [-Wunused-but-set-variable]
     707 |         struct dla_sdp_op_desc *sdp_op;
         |                                 ^~~~~~
   At top level:
   drivers/gpu/drm/nvdla/nvdla_sdp.c:118:22: warning: 'map_perf_nan_inf' defined but not used [-Wunused-const-variable=]
     118 | static const uint8_t map_perf_nan_inf[] = {
         |                      ^~~~~~~~~~~~~~~~
   drivers/gpu/drm/nvdla/nvdla_sdp.c:113:22: warning: 'map_perf_sat' defined but not used [-Wunused-const-variable=]
     113 | static const uint8_t map_perf_sat[] = {
         |                      ^~~~~~~~~~~~
   drivers/gpu/drm/nvdla/nvdla_sdp.c:108:22: warning: 'map_perf_lut' defined but not used [-Wunused-const-variable=]
     108 | static const uint8_t map_perf_lut[] = {
         |                      ^~~~~~~~~~~~
   drivers/gpu/drm/nvdla/nvdla_sdp.c:103:22: warning: 'map_perf_dma' defined but not used [-Wunused-const-variable=]
     103 | static const uint8_t map_perf_dma[] = {
         |                      ^~~~~~~~~~~~
--
   drivers/gpu/drm/nvdla/nvdla_cdp.c: In function 'dla_cdp_dump_config':
>> drivers/gpu/drm/nvdla/nvdla_cdp.c:280:38: warning: variable 'cdp_surface' set but not used [-Wunused-but-set-variable]
     280 |         struct dla_cdp_surface_desc *cdp_surface;
         |                                      ^~~~~~~~~~~
>> drivers/gpu/drm/nvdla/nvdla_cdp.c:279:33: warning: variable 'cdp_op' set but not used [-Wunused-but-set-variable]
     279 |         struct dla_cdp_op_desc *cdp_op;
         |                                 ^~~~~~
   At top level:
   drivers/gpu/drm/nvdla/nvdla_cdp.c:28:22: warning: 'map_perf_lut' defined but not used [-Wunused-const-variable=]
      28 | static const uint8_t map_perf_lut[] = {
         |                      ^~~~~~~~~~~~
   drivers/gpu/drm/nvdla/nvdla_cdp.c:23:22: warning: 'map_perf_dma' defined but not used [-Wunused-const-variable=]
      23 | static const uint8_t map_perf_dma[] = {
         |                      ^~~~~~~~~~~~
..


vim +/dla_get_time_us +45 drivers/gpu/drm/nvdla/nvdla_drm.c

    44	
  > 45	int64_t dla_get_time_us(void)
    46	{
    47		return ktime_get_ns() / NSEC_PER_USEC;
    48	}
    49	
    50	void dla_reg_write(void *driver_context, uint32_t addr, uint32_t reg)
    51	{
    52		struct nvdla_device *nvdla_dev =
    53				(struct nvdla_device *)driver_context;
    54	
    55		if (!nvdla_dev)
    56			return;
    57	
    58		writel(reg, nvdla_dev->base + addr);
    59	}
    60	
    61	uint32_t dla_reg_read(void *driver_context, uint32_t addr)
    62	{
    63		struct nvdla_device *nvdla_dev =
    64				(struct nvdla_device *)driver_context;
    65	
    66		if (!nvdla_dev)
    67			return 0;
    68	
    69		return readl(nvdla_dev->base + addr);
    70	}
    71	
    72	static irqreturn_t nvdla_engine_isr(int32_t irq, void *data)
    73	{
    74		unsigned long flags;
  > 75		uint32_t mask;
    76		uint32_t reg;
    77		struct dla_processor *processor = NULL;
    78		struct dla_processor_group *group;
    79		struct dla_engine *engine;
    80		struct nvdla_device *nvdla_dev = (struct nvdla_device *)data;
    81	
    82		if (!nvdla_dev)
    83			return IRQ_NONE;
    84	
    85		engine = nvdla_dev->engine_context;
    86		spin_lock_irqsave(&nvdla_dev->nvdla_lock, flags);
    87	
    88		mask = glb_reg_read(engine, S_INTR_MASK);
    89		reg = glb_reg_read(engine, S_INTR_STATUS);
    90	
    91		if (reg & MASK(GLB_S_INTR_STATUS_0, CACC_DONE_STATUS0)) {
    92			processor = &engine->processors[DLA_OP_CONV];
    93			group = &processor->groups[0];
    94			group->events |= (1 << DLA_EVENT_OP_COMPLETED);
    95		}
    96		if (reg & MASK(GLB_S_INTR_STATUS_0, CACC_DONE_STATUS1)) {
    97			processor = &engine->processors[DLA_OP_CONV];
    98			group = &processor->groups[1];
    99			group->events |= (1 << DLA_EVENT_OP_COMPLETED);
   100		}
   101		if (reg & MASK(GLB_S_INTR_STATUS_0, SDP_DONE_STATUS0)) {
   102			processor = &engine->processors[DLA_OP_SDP];
   103			group = &processor->groups[0];
   104			group->events |= (1 << DLA_EVENT_OP_COMPLETED);
   105		}
   106		if (reg & MASK(GLB_S_INTR_STATUS_0, SDP_DONE_STATUS1)) {
   107			processor = &engine->processors[DLA_OP_SDP];
   108			group = &processor->groups[1];
   109			group->events |= (1 << DLA_EVENT_OP_COMPLETED);
   110		}
   111		if (reg & MASK(GLB_S_INTR_STATUS_0, CDP_DONE_STATUS0)) {
   112			processor = &engine->processors[DLA_OP_CDP];
   113			group = &processor->groups[0];
   114			group->events |= (1 << DLA_EVENT_OP_COMPLETED);
   115		}
   116		if (reg & MASK(GLB_S_INTR_STATUS_0, CDP_DONE_STATUS1)) {
   117			processor = &engine->processors[DLA_OP_CDP];
   118			group = &processor->groups[1];
   119			group->events |= (1 << DLA_EVENT_OP_COMPLETED);
   120		}
   121		if (reg & MASK(GLB_S_INTR_STATUS_0, RUBIK_DONE_STATUS0)) {
   122			processor = &engine->processors[DLA_OP_RUBIK];
   123			group = &processor->groups[0];
   124			group->events |= (1 << DLA_EVENT_OP_COMPLETED);
   125		}
   126		if (reg & MASK(GLB_S_INTR_STATUS_0, RUBIK_DONE_STATUS1)) {
   127			processor = &engine->processors[DLA_OP_RUBIK];
   128			group = &processor->groups[1];
   129			group->events |= (1 << DLA_EVENT_OP_COMPLETED);
   130		}
   131		if (reg & MASK(GLB_S_INTR_STATUS_0, PDP_DONE_STATUS0)) {
   132			processor = &engine->processors[DLA_OP_PDP];
   133			group = &processor->groups[0];
   134			group->events |= (1 << DLA_EVENT_OP_COMPLETED);
   135		}
   136		if (reg & MASK(GLB_S_INTR_STATUS_0, PDP_DONE_STATUS1)) {
   137			processor = &engine->processors[DLA_OP_PDP];
   138			group = &processor->groups[1];
   139			group->events |= (1 << DLA_EVENT_OP_COMPLETED);
   140		}
   141		if (reg & MASK(GLB_S_INTR_STATUS_0, BDMA_DONE_STATUS0)) {
   142			processor = &engine->processors[DLA_OP_BDMA];
   143			group = &processor->groups[0];
   144			group->events |= (1 << DLA_EVENT_OP_COMPLETED);
   145		}
   146		if (reg & MASK(GLB_S_INTR_STATUS_0, BDMA_DONE_STATUS1)) {
   147			processor = &engine->processors[DLA_OP_BDMA];
   148			group = &processor->groups[1];
   149			group->events |= (1 << DLA_EVENT_OP_COMPLETED);
   150		}
   151		if (reg & MASK(GLB_S_INTR_STATUS_0, CDMA_DAT_DONE_STATUS0)) {
   152			processor = &engine->processors[DLA_OP_CONV];
   153			group = &processor->groups[0];
   154			group->events |= (1 << DLA_EVENT_CDMA_DT_DONE);
   155		}
   156		if (reg & MASK(GLB_S_INTR_STATUS_0, CDMA_DAT_DONE_STATUS1)) {
   157			processor = &engine->processors[DLA_OP_CONV];
   158			group = &processor->groups[1];
   159			group->events |= (1 << DLA_EVENT_CDMA_DT_DONE);
   160		}
   161		if (reg & MASK(GLB_S_INTR_STATUS_0, CDMA_WT_DONE_STATUS0)) {
   162			processor = &engine->processors[DLA_OP_CONV];
   163			group = &processor->groups[0];
   164			group->events |= (1 << DLA_EVENT_CDMA_WT_DONE);
   165		}
   166		if (reg & MASK(GLB_S_INTR_STATUS_0, CDMA_WT_DONE_STATUS1)) {
   167			processor = &engine->processors[DLA_OP_CONV];
   168			group = &processor->groups[1];
   169			group->events |= (1 << DLA_EVENT_CDMA_WT_DONE);
   170		}
   171	
   172		glb_reg_write(engine, S_INTR_STATUS, reg);
   173		mask = glb_reg_read(engine, S_INTR_MASK);
   174		reg = glb_reg_read(engine, S_INTR_STATUS);
   175	
   176		complete(&nvdla_dev->event_notifier);
   177		spin_unlock_irqrestore(&nvdla_dev->nvdla_lock, flags);
   178	
   179		return IRQ_HANDLED;
   180	}
   181	

-- 
0-DAY CI Kernel Test Service
https://01.org/lkp

From mboxrd@z Thu Jan  1 00:00:00 1970
Return-Path: <linux-kernel-owner@kernel.org>
X-Spam-Checker-Version: SpamAssassin 3.4.0 (2014-02-07) on
	aws-us-west-2-korg-lkml-1.web.codeaurora.org
Received: from vger.kernel.org (vger.kernel.org [23.128.96.18])
	by smtp.lore.kernel.org (Postfix) with ESMTP id E051AC433FE
	for <linux-kernel@archiver.kernel.org>; Wed, 20 Apr 2022 09:58:36 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1377422AbiDTKBS (ORCPT
        <rfc822;linux-kernel@archiver.kernel.org>);
        Wed, 20 Apr 2022 06:01:18 -0400
Received: from lindbergh.monkeyblade.net ([23.128.96.19]:60932 "EHLO
        lindbergh.monkeyblade.net" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1377392AbiDTKBF (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Wed, 20 Apr 2022 06:01:05 -0400
Received: from mga04.intel.com (mga04.intel.com [192.55.52.120])
        by lindbergh.monkeyblade.net (Postfix) with ESMTPS id 4BB283BFB0;
        Wed, 20 Apr 2022 02:58:20 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple;
  d=intel.com; i=@intel.com; q=dns/txt; s=Intel;
  t=1650448700; x=1681984700;
  h=date:from:to:cc:subject:message-id:references:
   mime-version:in-reply-to;
  bh=trrHFL7bIpVdCRcSGzbp0komwu6+rthAc9Zo3KrMj/o=;
  b=gPESC9sYS3wxXfnN8l1ZBVG8l87LX1ZAEK4H2e0jC8DmtgDyJ/uGE27q
   M0v5/6hxVE+Jas+s7Ymmv4Ub5Edc3s19hhRgom2b4tsIkoCEN+7SjkfHn
   DmIAI3/5Nigl4bjmOMBMNoDAB/SvML3cahGogMvikSOyWYr/odtECiIK1
   5dZ2iXCYHGM5/SuuKfXBL5wmY2vS/U9mELmC8Yp3H+jcoRNGTtGphl2gG
   iD20ia/2wSywSNebzHSIYGWyFz9eLGwl/7Kl31jUSkbhIFXPz9ynA+Mpn
   Dly0fsxE5PXxcNcWzNvAvcNItzjX0Ir4UZziOheaOrXRc9NScrYAycm9Q
   w==;
X-IronPort-AV: E=McAfee;i="6400,9594,10322"; a="262846702"
X-IronPort-AV: E=Sophos;i="5.90,275,1643702400"; 
   d="scan'208";a="262846702"
Received: from fmsmga007.fm.intel.com ([10.253.24.52])
  by fmsmga104.fm.intel.com with ESMTP/TLS/ECDHE-RSA-AES256-GCM-SHA384; 20 Apr 2022 02:58:20 -0700
X-ExtLoop1: 1
X-IronPort-AV: E=Sophos;i="5.90,275,1643702400"; 
   d="scan'208";a="562049243"
Received: from lkp-server01.sh.intel.com (HELO 3abc53900bec) ([10.239.97.150])
  by fmsmga007.fm.intel.com with ESMTP; 20 Apr 2022 02:58:17 -0700
Received: from kbuild by 3abc53900bec with local (Exim 4.95)
        (envelope-from <lkp@intel.com>)
        id 1nh76G-0006qx-IU;
        Wed, 20 Apr 2022 09:58:16 +0000
Date:   Wed, 20 Apr 2022 17:57:43 +0800
From:   kernel test robot <lkp@intel.com>
To:     Cai Huoqing <cai.huoqing@linux.dev>
Cc:     kbuild-all@lists.01.org,
        Maarten Lankhorst <maarten.lankhorst@linux.intel.com>,
        Maxime Ripard <mripard@kernel.org>,
        Thomas Zimmermann <tzimmermann@suse.de>,
        David Airlie <airlied@linux.ie>,
        Daniel Vetter <daniel@ffwll.ch>,
        Sumit Semwal <sumit.semwal@linaro.org>,
        Christian =?iso-8859-1?Q?K=F6nig?= <christian.koenig@amd.com>,
        linux-kernel@vger.kernel.org, dri-devel@lists.freedesktop.org,
        linux-media@vger.kernel.org, linaro-mm-sig@lists.linaro.org
Subject: Re: [PATCH 2/2] drm/nvdla: Add driver support for NVDLA
Message-ID: <202204201710.5Gcg1PUu-lkp@intel.com>
References: <20220419135908.39606-3-cai.huoqing@linux.dev>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <20220419135908.39606-3-cai.huoqing@linux.dev>
User-Agent: Mutt/1.10.1 (2018-07-13)
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

Hi Cai,

I love your patch! Yet something to improve:

[auto build test ERROR on drm/drm-next]
[also build test ERROR on drm-intel/for-linux-next drm-tip/drm-tip linus/master v5.18-rc3 next-20220419]
[If your patch is applied to the wrong git tree, kindly drop us a note.
And when submitting patch, we suggest to use '--base' as documented in
https://git-scm.com/docs/git-format-patch]

url:    https://github.com/intel-lab-lkp/linux/commits/Cai-Huoqing/drm-nvdla-Add-driver-support-for-NVDLA/20220419-220255
base:   git://anongit.freedesktop.org/drm/drm drm-next
config: m68k-allmodconfig (https://download.01.org/0day-ci/archive/20220420/202204201710.5Gcg1PUu-lkp@intel.com/config)
compiler: m68k-linux-gcc (GCC) 11.2.0
reproduce (this is a W=1 build):
        wget https://raw.githubusercontent.com/intel/lkp-tests/master/sbin/make.cross -O ~/bin/make.cross
        chmod +x ~/bin/make.cross
        # https://github.com/intel-lab-lkp/linux/commit/7539e5487eb7d0c6f13c03bba596e51a2238106d
        git remote add linux-review https://github.com/intel-lab-lkp/linux
        git fetch --no-tags linux-review Cai-Huoqing/drm-nvdla-Add-driver-support-for-NVDLA/20220419-220255
        git checkout 7539e5487eb7d0c6f13c03bba596e51a2238106d
        # save the config file
        mkdir build_dir && cp config build_dir/.config
        COMPILER_INSTALL_PATH=$HOME/0day COMPILER=gcc-11.2.0 make.cross W=1 O=build_dir ARCH=m68k SHELL=/bin/bash drivers/gpu/

If you fix the issue, kindly add following tag as appropriate
Reported-by: kernel test robot <lkp@intel.com>

All errors (new ones prefixed by >>):

>> make[5]: *** No rule to make target 'drivers/gpu/drm/nvdla/nvdla_engine_data.o', needed by 'drivers/gpu/drm/nvdla/nvdla-drm.o'.
>> make[5]: *** No rule to make target 'drivers/gpu/drm/nvdla/nvdla_engine_debug.o', needed by 'drivers/gpu/drm/nvdla/nvdla-drm.o'.
   make[5]: Target '__build' not remade because of errors.

-- 
0-DAY CI Kernel Test Service
https://01.org/lkp

From mboxrd@z Thu Jan  1 00:00:00 1970
Return-Path: <linux-kernel-owner@kernel.org>
X-Spam-Checker-Version: SpamAssassin 3.4.0 (2014-02-07) on
	aws-us-west-2-korg-lkml-1.web.codeaurora.org
Received: from vger.kernel.org (vger.kernel.org [23.128.96.18])
	by smtp.lore.kernel.org (Postfix) with ESMTP id 0EC7AC433EF
	for <linux-kernel@archiver.kernel.org>; Thu, 21 Apr 2022 08:30:36 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1386676AbiDUIdW (ORCPT
        <rfc822;linux-kernel@archiver.kernel.org>);
        Thu, 21 Apr 2022 04:33:22 -0400
Received: from lindbergh.monkeyblade.net ([23.128.96.19]:47096 "EHLO
        lindbergh.monkeyblade.net" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1386661AbiDUIdR (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Thu, 21 Apr 2022 04:33:17 -0400
Received: from smtp-out1.suse.de (smtp-out1.suse.de [195.135.220.28])
        by lindbergh.monkeyblade.net (Postfix) with ESMTPS id 5327C13CC6;
        Thu, 21 Apr 2022 01:30:27 -0700 (PDT)
Received: from imap2.suse-dmz.suse.de (imap2.suse-dmz.suse.de [192.168.254.74])
        (using TLSv1.3 with cipher TLS_AES_256_GCM_SHA384 (256/256 bits)
         key-exchange X25519 server-signature ECDSA (P-521) server-digest SHA512)
        (No client certificate requested)
        by smtp-out1.suse.de (Postfix) with ESMTPS id EE06621115;
        Thu, 21 Apr 2022 08:30:25 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=suse.de; s=susede2_rsa;
        t=1650529825; h=from:from:reply-to:date:date:message-id:message-id:to:to:cc:cc:
         mime-version:mime-version:content-type:content-type:
         in-reply-to:in-reply-to:references:references;
        bh=Xlmbm8LpaibRLrd6TfWo85Bfv3gGjQqthjQLvxH79Y4=;
        b=1uIFsLScyZ4RJAile6OiTBfiVrunZpWpPgvs9GQNn8V5khKnaZjp2CMIO3wKjM8yP2aSKU
        nlXF64pGFIRfk3NyhJLDNxVzGWRS/vFfWxqs67y3ibdJFONxhOZVF6guD6YqYagw2YjFUh
        JcGH85fHAKeKEyM21GW9IhNez+8piR0=
DKIM-Signature: v=1; a=ed25519-sha256; c=relaxed/relaxed; d=suse.de;
        s=susede2_ed25519; t=1650529825;
        h=from:from:reply-to:date:date:message-id:message-id:to:to:cc:cc:
         mime-version:mime-version:content-type:content-type:
         in-reply-to:in-reply-to:references:references;
        bh=Xlmbm8LpaibRLrd6TfWo85Bfv3gGjQqthjQLvxH79Y4=;
        b=Aq5KHuhgrE1Tz/XlDSCn4PcOJSh2ZmFr/p4rDNayON+GXWRSguArjHkkvLrJ4zTpddthrW
        SY9Z0jTar5jT+YAg==
Received: from imap2.suse-dmz.suse.de (imap2.suse-dmz.suse.de [192.168.254.74])
        (using TLSv1.3 with cipher TLS_AES_256_GCM_SHA384 (256/256 bits)
         key-exchange X25519 server-signature ECDSA (P-521) server-digest SHA512)
        (No client certificate requested)
        by imap2.suse-dmz.suse.de (Postfix) with ESMTPS id AA1BD13446;
        Thu, 21 Apr 2022 08:30:25 +0000 (UTC)
Received: from dovecot-director2.suse.de ([192.168.254.65])
        by imap2.suse-dmz.suse.de with ESMTPSA
        id +O2ZKCEWYWJfKgAAMHmgww
        (envelope-from <tzimmermann@suse.de>); Thu, 21 Apr 2022 08:30:25 +0000
Message-ID: <2aeee5a2-b5a5-348e-ccf7-04f49e1119da@suse.de>
Date:   Thu, 21 Apr 2022 10:30:25 +0200
MIME-Version: 1.0
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:91.0) Gecko/20100101
 Thunderbird/91.7.0
From:   Thomas Zimmermann <tzimmermann@suse.de>
Subject: Re: [PATCH 2/2] drm/nvdla: Add driver support for NVDLA
To:     Cai Huoqing <cai.huoqing@linux.dev>
Cc:     Maarten Lankhorst <maarten.lankhorst@linux.intel.com>,
        Maxime Ripard <mripard@kernel.org>,
        David Airlie <airlied@linux.ie>,
        Daniel Vetter <daniel@ffwll.ch>,
        Sumit Semwal <sumit.semwal@linaro.org>,
        =?UTF-8?Q?Christian_K=c3=b6nig?= <christian.koenig@amd.com>,
        linux-kernel@vger.kernel.org, dri-devel@lists.freedesktop.org,
        linux-media@vger.kernel.org, linaro-mm-sig@lists.linaro.org
References: <20220419135908.39606-1-cai.huoqing@linux.dev>
 <20220419135908.39606-3-cai.huoqing@linux.dev>
Content-Language: en-US
In-Reply-To: <20220419135908.39606-3-cai.huoqing@linux.dev>
Content-Type: multipart/signed; micalg=pgp-sha256;
 protocol="application/pgp-signature";
 boundary="------------FoLe0iC4P4R0ttfxKUrmqTpq"
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

This is an OpenPGP/MIME signed message (RFC 4880 and 3156)
--------------FoLe0iC4P4R0ttfxKUrmqTpq
Content-Type: multipart/mixed; boundary="------------DkYIbK1v6bqi1PxCfNnf2XXq";
 protected-headers="v1"
From: Thomas Zimmermann <tzimmermann@suse.de>
To: Cai Huoqing <cai.huoqing@linux.dev>
Cc: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>,
 Maxime Ripard <mripard@kernel.org>, David Airlie <airlied@linux.ie>,
 Daniel Vetter <daniel@ffwll.ch>, Sumit Semwal <sumit.semwal@linaro.org>,
 =?UTF-8?Q?Christian_K=c3=b6nig?= <christian.koenig@amd.com>,
 linux-kernel@vger.kernel.org, dri-devel@lists.freedesktop.org,
 linux-media@vger.kernel.org, linaro-mm-sig@lists.linaro.org
Message-ID: <2aeee5a2-b5a5-348e-ccf7-04f49e1119da@suse.de>
Subject: Re: [PATCH 2/2] drm/nvdla: Add driver support for NVDLA
References: <20220419135908.39606-1-cai.huoqing@linux.dev>
 <20220419135908.39606-3-cai.huoqing@linux.dev>
In-Reply-To: <20220419135908.39606-3-cai.huoqing@linux.dev>

--------------DkYIbK1v6bqi1PxCfNnf2XXq
Content-Type: text/plain; charset=UTF-8; format=flowed
Content-Transfer-Encoding: base64

KFJlc2VuZGluZywgYXMgc29tZSBNTHMgZGlkbid0IGxpa2UgdGhlIHNpemUgb2YgdGhlIG9y
aWduaW5hbCBtYWlsLikNCg0KSGksDQoNCnRoYW5rcyBmb3IgeW91ciBzdWJtaXNzaW9uLiBT
b21lIGdlbmVyYWwgY29tbWVudHM6DQoNCiAgICogc29tZSBmdW5jdGlvbnMgYXJlIHByZWZp
eGVkIHdpdGggZGxhXywgb3RoZXJzIHVzZSBudmRsYV8uIEl0IHNlZW1zIA0KYXJiaXRyYXJ5
IHRvIG1lLiBQbGVhc2UgdXNlIG52ZGxhXyBjb25zaXN0ZW50bHkgdGhyb3VnaG91dCB0aGUg
c291cmNlIGNvZGUuDQoNCiAgICogRm9yIHJlcG9ydGluZyBlcnJvcnMsIHBsZWFzZSB1c2Ug
ZHJtX2VycigpLCBkcm1fd2FybigpLCBldGMuIEkgDQpzdWdnZXN0IHRvIHJlYXJyYW5nZSB0
aGUgZXJyb3IgbWVzc2FnZXMgdG8gbm90IGJlIGxvY2F0ZWQgaW4gdGhlIA0KaW5uZXJtb3N0
IGZ1bmN0aW9ucy4NCg0KICAgKiBDb3VsZCB5b3UgcGxlYXNlIHNwbGl0IHRoaXMgcGF0Y2gg
aW50byBzbWFsbGVyIHBpZWNlcz8gSXQgY3VycmVudGx5IA0KaGl0cyBzaXplIGxpbWl0cyBv
ZiBzb21lIG1haWxpbmcgbGlzdHMuIE1heWJlIGFkZCB0aGUgcmVnaXN0ZXIgY29uc3RhbnRz
IA0Kc2VwYXJhdGVseS4NCg0KUGxlYXNlIGZpbmQgbW9yZSByZXZpZXcgY29tbWVudHMgYmVs
b3cuIEl0J3Mgbm90IGEgZnVsbCByZXZpZXcsIGJ1dCBhdCANCmxlYXN0IHNvbWV0aGluZyB0
byBzdGFydCB3aXRoLg0KDQpCZXN0IHJlZ2FyZHMNClRob21hcw0KDQpBbSAxOS4wNC4yMiB1
bSAxNTo1OSBzY2hyaWViIENhaSBIdW9xaW5nOg0KPiBUaGUgTlZJRElBIERlZXAgTGVhcm5p
bmcgQWNjZWxlcmF0b3IgKE5WRExBKSBpcyBhbiBvcGVuIHNvdXJjZSBJUA0KPiB3aGljaCBp
cyBpbnRlZ3JhdGVkIGludG8gTlZJRElBIEpldHNvbiBBR1ggWGF2aWVyLA0KPiBzbyBhZGQg
ZHJpdmVyIHN1cHBvcnQgZm9yIHRoaXMgYWNjZWxlcmF0b3IuDQo+IA0KPiBTaWduZWQtb2Zm
LWJ5OiBDYWkgSHVvcWluZyA8Y2FpLmh1b3FpbmdAbGludXguZGV2Pg0KPiAtLS0NCj4gICBk
cml2ZXJzL2dwdS9kcm0vS2NvbmZpZyAgICAgICAgICAgICAgICAgfCAgICAyICsNCj4gICBk
cml2ZXJzL2dwdS9kcm0vTWFrZWZpbGUgICAgICAgICAgICAgICAgfCAgICAxICsNCj4gICBk
cml2ZXJzL2dwdS9kcm0vbnZkbGEvS2NvbmZpZyAgICAgICAgICAgfCAgICA4ICsNCj4gICBk
cml2ZXJzL2dwdS9kcm0vbnZkbGEvTWFrZWZpbGUgICAgICAgICAgfCAgIDE5ICsNCj4gICBk
cml2ZXJzL2dwdS9kcm0vbnZkbGEvbnZkbGFfYmRtYS5jICAgICAgfCAgMjAwICsNCj4gICBk
cml2ZXJzL2dwdS9kcm0vbnZkbGEvbnZkbGFfY2FjaGUuYyAgICAgfCAgMjE1ICsNCj4gICBk
cml2ZXJzL2dwdS9kcm0vbnZkbGEvbnZkbGFfY2RwLmMgICAgICAgfCAgMzAwICsrDQo+ICAg
ZHJpdmVycy9ncHUvZHJtL252ZGxhL252ZGxhX2NvbW1vbi5jICAgIHwgIDI5NSArKw0KPiAg
IGRyaXZlcnMvZ3B1L2RybS9udmRsYS9udmRsYV9jb21tb24uaCAgICB8ICA4MzUgKysrDQo+
ICAgZHJpdmVycy9ncHUvZHJtL252ZGxhL252ZGxhX2NvbnYuYyAgICAgIHwgIDY4MyArKysN
Cj4gICBkcml2ZXJzL2dwdS9kcm0vbnZkbGEvbnZkbGFfZHJtLmMgICAgICAgfCAgNjk1ICsr
Kw0KPiAgIGRyaXZlcnMvZ3B1L2RybS9udmRsYS9udmRsYV9kcm0uaCAgICAgICB8ICAxMjcg
Kw0KPiAgIGRyaXZlcnMvZ3B1L2RybS9udmRsYS9udmRsYV9lbmdpbmUuYyAgICB8ICAyMzMg
Kw0KPiAgIGRyaXZlcnMvZ3B1L2RybS9udmRsYS9udmRsYV9lbmdpbmUuaCAgICB8ICAyNzIg
Kw0KPiAgIGRyaXZlcnMvZ3B1L2RybS9udmRsYS9udmRsYV9nZW0uYyAgICAgICB8ICAzOTMg
KysNCj4gICBkcml2ZXJzL2dwdS9kcm0vbnZkbGEvbnZkbGFfaW9jdGwuaCAgICAgfCAgIDk5
ICsNCj4gICBkcml2ZXJzL2dwdS9kcm0vbnZkbGEvbnZkbGFfcGRwLmMgICAgICAgfCAgNDQ2
ICsrDQo+ICAgZHJpdmVycy9ncHUvZHJtL252ZGxhL252ZGxhX3JlZy5oICAgICAgIHwgNjQx
MSArKysrKysrKysrKysrKysrKysrKysrKw0KPiAgIGRyaXZlcnMvZ3B1L2RybS9udmRsYS9u
dmRsYV9ydWJpay5jICAgICB8ICAyMTcgKw0KPiAgIGRyaXZlcnMvZ3B1L2RybS9udmRsYS9u
dmRsYV9zY2hlZC5oICAgICB8ICAgNTIgKw0KPiAgIGRyaXZlcnMvZ3B1L2RybS9udmRsYS9u
dmRsYV9zY2hlZHVsZXIuYyB8IDEwMDUgKysrKw0KPiAgIGRyaXZlcnMvZ3B1L2RybS9udmRs
YS9udmRsYV9zZHAuYyAgICAgICB8ICA3MjggKysrDQo+ICAgMjIgZmlsZXMgY2hhbmdlZCwg
MTMyMzYgaW5zZXJ0aW9ucygrKQ0KPiAgIGNyZWF0ZSBtb2RlIDEwMDY0NCBkcml2ZXJzL2dw
dS9kcm0vbnZkbGEvS2NvbmZpZw0KPiAgIGNyZWF0ZSBtb2RlIDEwMDY0NCBkcml2ZXJzL2dw
dS9kcm0vbnZkbGEvTWFrZWZpbGUNCj4gICBjcmVhdGUgbW9kZSAxMDA2NDQgZHJpdmVycy9n
cHUvZHJtL252ZGxhL252ZGxhX2JkbWEuYw0KPiAgIGNyZWF0ZSBtb2RlIDEwMDY0NCBkcml2
ZXJzL2dwdS9kcm0vbnZkbGEvbnZkbGFfY2FjaGUuYw0KPiAgIGNyZWF0ZSBtb2RlIDEwMDY0
NCBkcml2ZXJzL2dwdS9kcm0vbnZkbGEvbnZkbGFfY2RwLmMNCj4gICBjcmVhdGUgbW9kZSAx
MDA2NDQgZHJpdmVycy9ncHUvZHJtL252ZGxhL252ZGxhX2NvbW1vbi5jDQo+ICAgY3JlYXRl
IG1vZGUgMTAwNjQ0IGRyaXZlcnMvZ3B1L2RybS9udmRsYS9udmRsYV9jb21tb24uaA0KPiAg
IGNyZWF0ZSBtb2RlIDEwMDY0NCBkcml2ZXJzL2dwdS9kcm0vbnZkbGEvbnZkbGFfY29udi5j
DQo+ICAgY3JlYXRlIG1vZGUgMTAwNjQ0IGRyaXZlcnMvZ3B1L2RybS9udmRsYS9udmRsYV9k
cm0uYw0KPiAgIGNyZWF0ZSBtb2RlIDEwMDY0NCBkcml2ZXJzL2dwdS9kcm0vbnZkbGEvbnZk
bGFfZHJtLmgNCj4gICBjcmVhdGUgbW9kZSAxMDA2NDQgZHJpdmVycy9ncHUvZHJtL252ZGxh
L252ZGxhX2VuZ2luZS5jDQo+ICAgY3JlYXRlIG1vZGUgMTAwNjQ0IGRyaXZlcnMvZ3B1L2Ry
bS9udmRsYS9udmRsYV9lbmdpbmUuaA0KPiAgIGNyZWF0ZSBtb2RlIDEwMDY0NCBkcml2ZXJz
L2dwdS9kcm0vbnZkbGEvbnZkbGFfZ2VtLmMNCj4gICBjcmVhdGUgbW9kZSAxMDA2NDQgZHJp
dmVycy9ncHUvZHJtL252ZGxhL252ZGxhX2lvY3RsLmgNCj4gICBjcmVhdGUgbW9kZSAxMDA2
NDQgZHJpdmVycy9ncHUvZHJtL252ZGxhL252ZGxhX3BkcC5jDQo+ICAgY3JlYXRlIG1vZGUg
MTAwNjQ0IGRyaXZlcnMvZ3B1L2RybS9udmRsYS9udmRsYV9yZWcuaA0KPiAgIGNyZWF0ZSBt
b2RlIDEwMDY0NCBkcml2ZXJzL2dwdS9kcm0vbnZkbGEvbnZkbGFfcnViaWsuYw0KPiAgIGNy
ZWF0ZSBtb2RlIDEwMDY0NCBkcml2ZXJzL2dwdS9kcm0vbnZkbGEvbnZkbGFfc2NoZWQuaA0K
PiAgIGNyZWF0ZSBtb2RlIDEwMDY0NCBkcml2ZXJzL2dwdS9kcm0vbnZkbGEvbnZkbGFfc2No
ZWR1bGVyLmMNCj4gICBjcmVhdGUgbW9kZSAxMDA2NDQgZHJpdmVycy9ncHUvZHJtL252ZGxh
L252ZGxhX3NkcC5jDQo+IA0KPiBkaWZmIC0tZ2l0IGEvZHJpdmVycy9ncHUvZHJtL0tjb25m
aWcgYi9kcml2ZXJzL2dwdS9kcm0vS2NvbmZpZw0KPiBpbmRleCA1MTMzYzNmMDI4YWIuLmE1
NWNmZjM3NGFiZCAxMDA2NDQNCj4gLS0tIGEvZHJpdmVycy9ncHUvZHJtL0tjb25maWcNCj4g
KysrIGIvZHJpdmVycy9ncHUvZHJtL0tjb25maWcNCj4gQEAgLTQwOSw2ICs0MDksOCBAQCBz
b3VyY2UgImRyaXZlcnMvZ3B1L2RybS9zb2xvbW9uL0tjb25maWciDQo+ICAgDQo+ICAgc291
cmNlICJkcml2ZXJzL2dwdS9kcm0vc3ByZC9LY29uZmlnIg0KPiAgIA0KPiArc291cmNlICJk
cml2ZXJzL2dwdS9kcm0vbnZkbGEvS2NvbmZpZyINCj4gKw0KPiAgIGNvbmZpZyBEUk1fSFlQ
RVJWDQo+ICAgCXRyaXN0YXRlICJEUk0gU3VwcG9ydCBmb3IgSHlwZXItViBzeW50aGV0aWMg
dmlkZW8gZGV2aWNlIg0KPiAgIAlkZXBlbmRzIG9uIERSTSAmJiBQQ0kgJiYgTU1VICYmIEhZ
UEVSVg0KPiBkaWZmIC0tZ2l0IGEvZHJpdmVycy9ncHUvZHJtL01ha2VmaWxlIGIvZHJpdmVy
cy9ncHUvZHJtL01ha2VmaWxlDQo+IGluZGV4IGMyZWY1ZjlmY2U1NC4uOGZhMzUzN2YzMDhh
IDEwMDY0NA0KPiAtLS0gYS9kcml2ZXJzL2dwdS9kcm0vTWFrZWZpbGUNCj4gKysrIGIvZHJp
dmVycy9ncHUvZHJtL01ha2VmaWxlDQo+IEBAIC0xMzQsMyArMTM0LDQgQEAgb2JqLXkJCQkr
PSBndWQvDQo+ICAgb2JqLSQoQ09ORklHX0RSTV9IWVBFUlYpICs9IGh5cGVydi8NCj4gICBv
YmoteQkJCSs9IHNvbG9tb24vDQo+ICAgb2JqLSQoQ09ORklHX0RSTV9TUFJEKSArPSBzcHJk
Lw0KPiArb2JqLSQoQ09ORklHX0RSTV9OVkRMQSkgKz0gbnZkbGEvDQo+IGRpZmYgLS1naXQg
YS9kcml2ZXJzL2dwdS9kcm0vbnZkbGEvS2NvbmZpZyBiL2RyaXZlcnMvZ3B1L2RybS9udmRs
YS9LY29uZmlnDQo+IG5ldyBmaWxlIG1vZGUgMTAwNjQ0DQo+IGluZGV4IDAwMDAwMDAwMDAw
MC4uMTFjMDRmNWRhODc3DQo+IC0tLSAvZGV2L251bGwNCj4gKysrIGIvZHJpdmVycy9ncHUv
ZHJtL252ZGxhL0tjb25maWcNCj4gQEAgLTAsMCArMSw4IEBADQo+ICsjIFNQRFgtTGljZW5z
ZS1JZGVudGlmaWVyOiBHUEwtMi4wLW9ubHkNCj4gK2NvbmZpZyBEUk1fTlZETEENCj4gKwl0
cmlzdGF0ZSAiTlZETEEgRFJNIg0KPiArCWRlcGVuZHMgb24gRFJNDQo+ICsJc2VsZWN0IERS
TV9HRU1fQ01BX0hFTFBFUg0KPiArCWhlbHANCj4gKwkgIENob29zZSB0aGlzIG9wdGlvbiBm
b3Igb3Blbi1zb3VyY2UgTlZJRElBIERMQSBzdXBwb3J0Lg0KPiArCSAgSWYgTSBpcyBzZWxl
Y3RlZCB0aGUgbW9kdWxlIHdpbGwgYmUgY2FsbGVkIG52ZGxhLWRybS4NCj4gZGlmZiAtLWdp
dCBhL2RyaXZlcnMvZ3B1L2RybS9udmRsYS9NYWtlZmlsZSBiL2RyaXZlcnMvZ3B1L2RybS9u
dmRsYS9NYWtlZmlsZQ0KPiBuZXcgZmlsZSBtb2RlIDEwMDY0NA0KPiBpbmRleCAwMDAwMDAw
MDAwMDAuLjc0ZjM3ZDI1OGY4ZA0KPiAtLS0gL2Rldi9udWxsDQo+ICsrKyBiL2RyaXZlcnMv
Z3B1L2RybS9udmRsYS9NYWtlZmlsZQ0KPiBAQCAtMCwwICsxLDE5IEBADQo+ICsNCj4gKyMg
U1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEdQTC0yLjANCj4gK252ZGxhLWRybS15IDo9IFwN
Cj4gKwludmRsYV9kcm0ubyBcDQo+ICsJbnZkbGFfZ2VtLm8gXA0KPiArCW52ZGxhX3NjaGVk
dWxlci5vIFwNCj4gKwludmRsYV9lbmdpbmUubyBcDQo+ICsJbnZkbGFfYmRtYS5vIFwNCj4g
KwludmRsYV9jb252Lm8gXA0KPiArCW52ZGxhX3NkcC5vIFwNCj4gKwludmRsYV9jZHAubyBc
DQo+ICsJbnZkbGFfcGRwLm8gXA0KPiArCW52ZGxhX3J1YmlrLm8gXA0KPiArCW52ZGxhX2Nh
Y2hlLm8gXA0KPiArCW52ZGxhX2NvbW1vbi5vIFwNCj4gKwludmRsYV9lbmdpbmVfZGF0YS5v
IFwNCj4gKwludmRsYV9lbmdpbmVfZGVidWcubyBcDQoNCkZpbGUgbmFtZXMgc2hvdWxkIGJl
IHNvcnRlZCBhbHBoYWJldGljYWxseSBoZXJlLg0KDQo+ICsNCj4gK29iai0kKENPTkZJR19E
Uk1fTlZETEEpICs9IG52ZGxhLWRybS5vDQo+IGRpZmYgLS1naXQgYS9kcml2ZXJzL2dwdS9k
cm0vbnZkbGEvbnZkbGFfYmRtYS5jIGIvZHJpdmVycy9ncHUvZHJtL252ZGxhL252ZGxhX2Jk
bWEuYw0KPiBuZXcgZmlsZSBtb2RlIDEwMDY0NA0KPiBpbmRleCAwMDAwMDAwMDAwMDAuLjIy
NTYxM2YyN2FjZg0KPiAtLS0gL2Rldi9udWxsDQp9DQoNCg0KPiBkaWZmIC0tZ2l0IGEvZHJp
dmVycy9ncHUvZHJtL252ZGxhL252ZGxhX2RybS5jIGIvZHJpdmVycy9ncHUvZHJtL252ZGxh
L252ZGxhX2RybS5jDQo+IG5ldyBmaWxlIG1vZGUgMTAwNjQ0DQo+IGluZGV4IDAwMDAwMDAw
MDAwMC4uOTIxN2VlZTFkZTNiDQo+IC0tLSAvZGV2L251bGwNCj4gKysrIGIvZHJpdmVycy9n
cHUvZHJtL252ZGxhL252ZGxhX2RybS5jDQo+IEBAIC0wLDAgKzEsNjk1IEBADQo+ICsvLyBT
UERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQlNELTMtQ2xhdXNlIE9SIEdQTC0yLjANCj4gKy8q
DQo+ICsgKiBDb3B5cmlnaHQgKEMpIDIwMTctMjAxOCBOVklESUEgQ09SUE9SQVRJT04NCj4g
KyAqIENvcHlyaWdodCAoQykgMjAyMiBDYWkgSHVvcWluZw0KPiArICovDQo+ICsNCj4gKyNp
bmNsdWRlIDxsaW51eC9kbWEtYnVmLmg+DQo+ICsjaW5jbHVkZSA8bGludXgvZG1hLW1hcHBp
bmcuaD4NCj4gKyNpbmNsdWRlIDxsaW51eC9mcy5oPg0KPiArI2luY2x1ZGUgPGxpbnV4L2lu
dGVycnVwdC5oPg0KPiArI2luY2x1ZGUgPGxpbnV4L2lycS5oPg0KPiArI2luY2x1ZGUgPGxp
bnV4L2lycWRvbWFpbi5oPg0KPiArI2luY2x1ZGUgPGxpbnV4L21vZHVsZS5oPg0KPiArI2lu
Y2x1ZGUgPGxpbnV4L29mLmg+DQo+ICsjaW5jbHVkZSA8bGludXgvb2ZfZGV2aWNlLmg+DQo+
ICsjaW5jbHVkZSA8bGludXgvb2ZfaXJxLmg+DQo+ICsjaW5jbHVkZSA8bGludXgvb2ZfcGxh
dGZvcm0uaD4NCj4gKyNpbmNsdWRlIDxsaW51eC9wbGF0Zm9ybV9kZXZpY2UuaD4NCj4gKyNp
bmNsdWRlIDxsaW51eC9wcmludGsuaD4NCj4gKyNpbmNsdWRlIDxsaW51eC9zbGFiLmg+DQo+
ICsjaW5jbHVkZSA8bGludXgvc3BpbmxvY2suaD4NCj4gKyNpbmNsdWRlIDxsaW51eC90aW1l
Lmg+DQo+ICsjaW5jbHVkZSA8bGludXgvdWFjY2Vzcy5oPg0KPiArI2luY2x1ZGUgPGxpbnV4
L3R5cGVzLmg+DQo+ICsNCj4gKyNpbmNsdWRlICJudmRsYV9kcm0uaCINCj4gKyNpbmNsdWRl
ICJudmRsYV9pb2N0bC5oIg0KPiArI2luY2x1ZGUgIm52ZGxhX2VuZ2luZS5oIg0KPiArDQo+
ICtzdGF0aWMgc3RydWN0IG52ZGxhX2NvbmZpZyBudmRsYV9jb25maWdfb3NfaW5pdGlhbCA9
IHsNCj4gKwkuYXRvbV9zaXplID0gMzIsDQo+ICsJLmJkbWFfZW5hYmxlID0gdHJ1ZSwNCj4g
KwkucnViaWtfZW5hYmxlID0gdHJ1ZSwNCj4gKwkud2VpZ2h0X2NvbXByZXNzX3N1cHBvcnQg
PSB0cnVlLA0KPiArfTsNCj4gKw0KPiArc3RhdGljIHN0cnVjdCBudmRsYV9jb25maWcgbnZk
bGFfY29uZmlnX3NtYWxsID0gew0KPiArCS8vLmF0b21fc2l6ZSA9IDgsDQo+ICsJLmF0b21f
c2l6ZSA9IDMyLCAgLy8gbnZfbGFyZ2UgY29uZmlnDQo+ICsJLmJkbWFfZW5hYmxlID0gZmFs
c2UsDQo+ICsJLnJ1YmlrX2VuYWJsZSA9IGZhbHNlLA0KPiArCS53ZWlnaHRfY29tcHJlc3Nf
c3VwcG9ydCA9IGZhbHNlLA0KPiArfTsNCj4gKw0KPiAraW50NjRfdCBkbGFfZ2V0X3RpbWVf
dXModm9pZCkNCj4gK3sNCj4gKwlyZXR1cm4ga3RpbWVfZ2V0X25zKCkgLyBOU0VDX1BFUl9V
U0VDOw0KPiArfQ0KPiArDQo+ICt2b2lkIGRsYV9yZWdfd3JpdGUodm9pZCAqZHJpdmVyX2Nv
bnRleHQsIHVpbnQzMl90IGFkZHIsIHVpbnQzMl90IHJlZykNCj4gK3sNCj4gKwlzdHJ1Y3Qg
bnZkbGFfZGV2aWNlICpudmRsYV9kZXYgPQ0KPiArCQkJKHN0cnVjdCBudmRsYV9kZXZpY2Ug
Kilkcml2ZXJfY29udGV4dDsNCj4gKw0KPiArCWlmICghbnZkbGFfZGV2KQ0KPiArCQlyZXR1
cm47DQo+ICsNCj4gKwl3cml0ZWwocmVnLCBudmRsYV9kZXYtPmJhc2UgKyBhZGRyKTsNCj4g
K30NCj4gKw0KPiArdWludDMyX3QgZGxhX3JlZ19yZWFkKHZvaWQgKmRyaXZlcl9jb250ZXh0
LCB1aW50MzJfdCBhZGRyKQ0KPiArew0KPiArCXN0cnVjdCBudmRsYV9kZXZpY2UgKm52ZGxh
X2RldiA9DQo+ICsJCQkoc3RydWN0IG52ZGxhX2RldmljZSAqKWRyaXZlcl9jb250ZXh0Ow0K
PiArDQo+ICsJaWYgKCFudmRsYV9kZXYpDQo+ICsJCXJldHVybiAwOw0KPiArDQo+ICsJcmV0
dXJuIHJlYWRsKG52ZGxhX2Rldi0+YmFzZSArIGFkZHIpOw0KPiArfQ0KPiArDQo+ICtzdGF0
aWMgaXJxcmV0dXJuX3QgbnZkbGFfZW5naW5lX2lzcihpbnQzMl90IGlycSwgdm9pZCAqZGF0
YSkNCj4gK3sNCj4gKwl1bnNpZ25lZCBsb25nIGZsYWdzOw0KPiArCXVpbnQzMl90IG1hc2s7
DQo+ICsJdWludDMyX3QgcmVnOw0KPiArCXN0cnVjdCBkbGFfcHJvY2Vzc29yICpwcm9jZXNz
b3IgPSBOVUxMOw0KPiArCXN0cnVjdCBkbGFfcHJvY2Vzc29yX2dyb3VwICpncm91cDsNCj4g
KwlzdHJ1Y3QgZGxhX2VuZ2luZSAqZW5naW5lOw0KPiArCXN0cnVjdCBudmRsYV9kZXZpY2Ug
Km52ZGxhX2RldiA9IChzdHJ1Y3QgbnZkbGFfZGV2aWNlICopZGF0YTsNCj4gKw0KPiArCWlm
ICghbnZkbGFfZGV2KQ0KPiArCQlyZXR1cm4gSVJRX05PTkU7DQo+ICsNCj4gKwllbmdpbmUg
PSBudmRsYV9kZXYtPmVuZ2luZV9jb250ZXh0Ow0KPiArCXNwaW5fbG9ja19pcnFzYXZlKCZu
dmRsYV9kZXYtPm52ZGxhX2xvY2ssIGZsYWdzKTsNCj4gKw0KPiArCW1hc2sgPSBnbGJfcmVn
X3JlYWQoZW5naW5lLCBTX0lOVFJfTUFTSyk7DQo+ICsJcmVnID0gZ2xiX3JlZ19yZWFkKGVu
Z2luZSwgU19JTlRSX1NUQVRVUyk7DQo+ICsNCj4gKwlpZiAocmVnICYgTUFTSyhHTEJfU19J
TlRSX1NUQVRVU18wLCBDQUNDX0RPTkVfU1RBVFVTMCkpIHsNCj4gKwkJcHJvY2Vzc29yID0g
JmVuZ2luZS0+cHJvY2Vzc29yc1tETEFfT1BfQ09OVl07DQo+ICsJCWdyb3VwID0gJnByb2Nl
c3Nvci0+Z3JvdXBzWzBdOw0KPiArCQlncm91cC0+ZXZlbnRzIHw9ICgxIDw8IERMQV9FVkVO
VF9PUF9DT01QTEVURUQpOw0KPiArCX0NCj4gKwlpZiAocmVnICYgTUFTSyhHTEJfU19JTlRS
X1NUQVRVU18wLCBDQUNDX0RPTkVfU1RBVFVTMSkpIHsNCj4gKwkJcHJvY2Vzc29yID0gJmVu
Z2luZS0+cHJvY2Vzc29yc1tETEFfT1BfQ09OVl07DQo+ICsJCWdyb3VwID0gJnByb2Nlc3Nv
ci0+Z3JvdXBzWzFdOw0KPiArCQlncm91cC0+ZXZlbnRzIHw9ICgxIDw8IERMQV9FVkVOVF9P
UF9DT01QTEVURUQpOw0KPiArCX0NCj4gKwlpZiAocmVnICYgTUFTSyhHTEJfU19JTlRSX1NU
QVRVU18wLCBTRFBfRE9ORV9TVEFUVVMwKSkgew0KPiArCQlwcm9jZXNzb3IgPSAmZW5naW5l
LT5wcm9jZXNzb3JzW0RMQV9PUF9TRFBdOw0KPiArCQlncm91cCA9ICZwcm9jZXNzb3ItPmdy
b3Vwc1swXTsNCj4gKwkJZ3JvdXAtPmV2ZW50cyB8PSAoMSA8PCBETEFfRVZFTlRfT1BfQ09N
UExFVEVEKTsNCj4gKwl9DQo+ICsJaWYgKHJlZyAmIE1BU0soR0xCX1NfSU5UUl9TVEFUVVNf
MCwgU0RQX0RPTkVfU1RBVFVTMSkpIHsNCj4gKwkJcHJvY2Vzc29yID0gJmVuZ2luZS0+cHJv
Y2Vzc29yc1tETEFfT1BfU0RQXTsNCj4gKwkJZ3JvdXAgPSAmcHJvY2Vzc29yLT5ncm91cHNb
MV07DQo+ICsJCWdyb3VwLT5ldmVudHMgfD0gKDEgPDwgRExBX0VWRU5UX09QX0NPTVBMRVRF
RCk7DQo+ICsJfQ0KPiArCWlmIChyZWcgJiBNQVNLKEdMQl9TX0lOVFJfU1RBVFVTXzAsIENE
UF9ET05FX1NUQVRVUzApKSB7DQo+ICsJCXByb2Nlc3NvciA9ICZlbmdpbmUtPnByb2Nlc3Nv
cnNbRExBX09QX0NEUF07DQo+ICsJCWdyb3VwID0gJnByb2Nlc3Nvci0+Z3JvdXBzWzBdOw0K
PiArCQlncm91cC0+ZXZlbnRzIHw9ICgxIDw8IERMQV9FVkVOVF9PUF9DT01QTEVURUQpOw0K
PiArCX0NCj4gKwlpZiAocmVnICYgTUFTSyhHTEJfU19JTlRSX1NUQVRVU18wLCBDRFBfRE9O
RV9TVEFUVVMxKSkgew0KPiArCQlwcm9jZXNzb3IgPSAmZW5naW5lLT5wcm9jZXNzb3JzW0RM
QV9PUF9DRFBdOw0KPiArCQlncm91cCA9ICZwcm9jZXNzb3ItPmdyb3Vwc1sxXTsNCj4gKwkJ
Z3JvdXAtPmV2ZW50cyB8PSAoMSA8PCBETEFfRVZFTlRfT1BfQ09NUExFVEVEKTsNCj4gKwl9
DQo+ICsJaWYgKHJlZyAmIE1BU0soR0xCX1NfSU5UUl9TVEFUVVNfMCwgUlVCSUtfRE9ORV9T
VEFUVVMwKSkgew0KPiArCQlwcm9jZXNzb3IgPSAmZW5naW5lLT5wcm9jZXNzb3JzW0RMQV9P
UF9SVUJJS107DQo+ICsJCWdyb3VwID0gJnByb2Nlc3Nvci0+Z3JvdXBzWzBdOw0KPiArCQln
cm91cC0+ZXZlbnRzIHw9ICgxIDw8IERMQV9FVkVOVF9PUF9DT01QTEVURUQpOw0KPiArCX0N
Cj4gKwlpZiAocmVnICYgTUFTSyhHTEJfU19JTlRSX1NUQVRVU18wLCBSVUJJS19ET05FX1NU
QVRVUzEpKSB7DQo+ICsJCXByb2Nlc3NvciA9ICZlbmdpbmUtPnByb2Nlc3NvcnNbRExBX09Q
X1JVQklLXTsNCj4gKwkJZ3JvdXAgPSAmcHJvY2Vzc29yLT5ncm91cHNbMV07DQo+ICsJCWdy
b3VwLT5ldmVudHMgfD0gKDEgPDwgRExBX0VWRU5UX09QX0NPTVBMRVRFRCk7DQo+ICsJfQ0K
PiArCWlmIChyZWcgJiBNQVNLKEdMQl9TX0lOVFJfU1RBVFVTXzAsIFBEUF9ET05FX1NUQVRV
UzApKSB7DQo+ICsJCXByb2Nlc3NvciA9ICZlbmdpbmUtPnByb2Nlc3NvcnNbRExBX09QX1BE
UF07DQo+ICsJCWdyb3VwID0gJnByb2Nlc3Nvci0+Z3JvdXBzWzBdOw0KPiArCQlncm91cC0+
ZXZlbnRzIHw9ICgxIDw8IERMQV9FVkVOVF9PUF9DT01QTEVURUQpOw0KPiArCX0NCj4gKwlp
ZiAocmVnICYgTUFTSyhHTEJfU19JTlRSX1NUQVRVU18wLCBQRFBfRE9ORV9TVEFUVVMxKSkg
ew0KPiArCQlwcm9jZXNzb3IgPSAmZW5naW5lLT5wcm9jZXNzb3JzW0RMQV9PUF9QRFBdOw0K
PiArCQlncm91cCA9ICZwcm9jZXNzb3ItPmdyb3Vwc1sxXTsNCj4gKwkJZ3JvdXAtPmV2ZW50
cyB8PSAoMSA8PCBETEFfRVZFTlRfT1BfQ09NUExFVEVEKTsNCj4gKwl9DQo+ICsJaWYgKHJl
ZyAmIE1BU0soR0xCX1NfSU5UUl9TVEFUVVNfMCwgQkRNQV9ET05FX1NUQVRVUzApKSB7DQo+
ICsJCXByb2Nlc3NvciA9ICZlbmdpbmUtPnByb2Nlc3NvcnNbRExBX09QX0JETUFdOw0KPiAr
CQlncm91cCA9ICZwcm9jZXNzb3ItPmdyb3Vwc1swXTsNCj4gKwkJZ3JvdXAtPmV2ZW50cyB8
PSAoMSA8PCBETEFfRVZFTlRfT1BfQ09NUExFVEVEKTsNCj4gKwl9DQo+ICsJaWYgKHJlZyAm
IE1BU0soR0xCX1NfSU5UUl9TVEFUVVNfMCwgQkRNQV9ET05FX1NUQVRVUzEpKSB7DQo+ICsJ
CXByb2Nlc3NvciA9ICZlbmdpbmUtPnByb2Nlc3NvcnNbRExBX09QX0JETUFdOw0KPiArCQln
cm91cCA9ICZwcm9jZXNzb3ItPmdyb3Vwc1sxXTsNCj4gKwkJZ3JvdXAtPmV2ZW50cyB8PSAo
MSA8PCBETEFfRVZFTlRfT1BfQ09NUExFVEVEKTsNCj4gKwl9DQo+ICsJaWYgKHJlZyAmIE1B
U0soR0xCX1NfSU5UUl9TVEFUVVNfMCwgQ0RNQV9EQVRfRE9ORV9TVEFUVVMwKSkgew0KPiAr
CQlwcm9jZXNzb3IgPSAmZW5naW5lLT5wcm9jZXNzb3JzW0RMQV9PUF9DT05WXTsNCj4gKwkJ
Z3JvdXAgPSAmcHJvY2Vzc29yLT5ncm91cHNbMF07DQo+ICsJCWdyb3VwLT5ldmVudHMgfD0g
KDEgPDwgRExBX0VWRU5UX0NETUFfRFRfRE9ORSk7DQo+ICsJfQ0KPiArCWlmIChyZWcgJiBN
QVNLKEdMQl9TX0lOVFJfU1RBVFVTXzAsIENETUFfREFUX0RPTkVfU1RBVFVTMSkpIHsNCj4g
KwkJcHJvY2Vzc29yID0gJmVuZ2luZS0+cHJvY2Vzc29yc1tETEFfT1BfQ09OVl07DQo+ICsJ
CWdyb3VwID0gJnByb2Nlc3Nvci0+Z3JvdXBzWzFdOw0KPiArCQlncm91cC0+ZXZlbnRzIHw9
ICgxIDw8IERMQV9FVkVOVF9DRE1BX0RUX0RPTkUpOw0KPiArCX0NCj4gKwlpZiAocmVnICYg
TUFTSyhHTEJfU19JTlRSX1NUQVRVU18wLCBDRE1BX1dUX0RPTkVfU1RBVFVTMCkpIHsNCj4g
KwkJcHJvY2Vzc29yID0gJmVuZ2luZS0+cHJvY2Vzc29yc1tETEFfT1BfQ09OVl07DQo+ICsJ
CWdyb3VwID0gJnByb2Nlc3Nvci0+Z3JvdXBzWzBdOw0KPiArCQlncm91cC0+ZXZlbnRzIHw9
ICgxIDw8IERMQV9FVkVOVF9DRE1BX1dUX0RPTkUpOw0KPiArCX0NCj4gKwlpZiAocmVnICYg
TUFTSyhHTEJfU19JTlRSX1NUQVRVU18wLCBDRE1BX1dUX0RPTkVfU1RBVFVTMSkpIHsNCj4g
KwkJcHJvY2Vzc29yID0gJmVuZ2luZS0+cHJvY2Vzc29yc1tETEFfT1BfQ09OVl07DQo+ICsJ
CWdyb3VwID0gJnByb2Nlc3Nvci0+Z3JvdXBzWzFdOw0KPiArCQlncm91cC0+ZXZlbnRzIHw9
ICgxIDw8IERMQV9FVkVOVF9DRE1BX1dUX0RPTkUpOw0KPiArCX0NCj4gKw0KPiArCWdsYl9y
ZWdfd3JpdGUoZW5naW5lLCBTX0lOVFJfU1RBVFVTLCByZWcpOw0KPiArCW1hc2sgPSBnbGJf
cmVnX3JlYWQoZW5naW5lLCBTX0lOVFJfTUFTSyk7DQo+ICsJcmVnID0gZ2xiX3JlZ19yZWFk
KGVuZ2luZSwgU19JTlRSX1NUQVRVUyk7DQo+ICsNCj4gKwljb21wbGV0ZSgmbnZkbGFfZGV2
LT5ldmVudF9ub3RpZmllcik7DQo+ICsJc3Bpbl91bmxvY2tfaXJxcmVzdG9yZSgmbnZkbGFf
ZGV2LT5udmRsYV9sb2NrLCBmbGFncyk7DQo+ICsNCj4gKwlyZXR1cm4gSVJRX0hBTkRMRUQ7
DQo+ICt9DQo+ICsNCj4gK3N0YXRpYyBpbnQzMl90IGRsYV9yZWFkX2RtYV9hZGRyZXNzKHZv
aWQgKmRyaXZlcl9jb250ZXh0LCB2b2lkICp0YXNrX2RhdGEsDQo+ICsJCQkJCQlpbnQxNl90
IGluZGV4LCB2b2lkICpkc3QpDQo+ICt7DQo+ICsJaW50MzJfdCByZXQgPSAwOw0KPiArCXN0
cnVjdCBudmRsYV9tZW1faGFuZGxlICpoYW5kbGVzOw0KPiArCWRtYV9hZGRyX3QgKnBoeXNf
YWRkciA9IChkbWFfYWRkcl90ICopKGRzdCk7DQo+ICsJc3RydWN0IG52ZGxhX2RldmljZSAq
bnZkbGFfZGV2ID0NCj4gKwkJCShzdHJ1Y3QgbnZkbGFfZGV2aWNlICopZHJpdmVyX2NvbnRl
eHQ7DQo+ICsJc3RydWN0IG52ZGxhX3Rhc2sgKnRhc2sgPSAoc3RydWN0IG52ZGxhX3Rhc2sg
Kil0YXNrX2RhdGE7DQo+ICsNCj4gKwlpZiAoaW5kZXggPT0gLTEgfHwgaW5kZXggPiB0YXNr
LT5udW1fYWRkcmVzc2VzKQ0KPiArCQlyZXR1cm4gLUVJTlZBTDsNCj4gKw0KPiArCWhhbmRs
ZXMgPSAoc3RydWN0IG52ZGxhX21lbV9oYW5kbGUgKil0YXNrLT5hZGRyZXNzX2xpc3Q7DQo+
ICsJcmV0ID0gbnZkbGFfZ2VtX2RtYV9hZGRyKG52ZGxhX2Rldi0+ZHJtLCB0YXNrLT5maWxl
LA0KPiArCQkJCQloYW5kbGVzW2luZGV4XS5oYW5kbGUsDQo+ICsJCQkJCXBoeXNfYWRkcik7
DQo+ICsNCj4gKwkvKiBBZGQgb2Zmc2V0IHRvIElPVkEgYWRkcmVzcyAqLw0KPiArCSpwaHlz
X2FkZHIgPSAqcGh5c19hZGRyICsgaGFuZGxlc1tpbmRleF0ub2Zmc2V0Ow0KPiArDQo+ICsJ
cmV0dXJuIHJldDsNCj4gK30NCj4gKw0KPiArc3RhdGljIGludDMyX3QgZGxhX3JlYWRfY3B1
X2FkZHJlc3Modm9pZCAqZHJpdmVyX2NvbnRleHQsIHZvaWQgKnRhc2tfZGF0YSwNCj4gKwkJ
CQkJCWludDE2X3QgaW5kZXgsIHZvaWQgKmRzdCkNCj4gK3sNCj4gKwl1aW50NjRfdCAqdGVt
cCA9ICh1aW50NjRfdCAqKWRzdDsNCj4gKwlzdHJ1Y3QgbnZkbGFfdGFzayAqdGFzayA9IChz
dHJ1Y3QgbnZkbGFfdGFzayAqKXRhc2tfZGF0YTsNCj4gKw0KPiArCWlmIChpbmRleCA9PSAt
MSB8fCBpbmRleCA+IHRhc2stPm51bV9hZGRyZXNzZXMpDQo+ICsJCXJldHVybiAtRUlOVkFM
Ow0KPiArDQo+ICsJKnRlbXAgPSAodWludDY0X3QpaW5kZXg7DQo+ICsJcmV0dXJuIDA7DQo+
ICt9DQo+ICsNCj4gK2ludDMyX3QgZGxhX2dldF9kbWFfYWRkcmVzcyh2b2lkICpkcml2ZXJf
Y29udGV4dCwgdm9pZCAqdGFza19kYXRhLA0KPiArCQkJCQlpbnQxNl90IGluZGV4LCB2b2lk
ICpkc3RfcHRyLA0KPiArCQkJCQl1aW50MzJfdCBkZXN0aW5hdGlvbikNCj4gK3sNCj4gKwlp
bnQzMl90IHJldCA9IDA7DQo+ICsNCj4gKwlpZiAoZGVzdGluYXRpb24gPT0gREVTVElOQVRJ
T05fUFJPQ0VTU09SKSB7DQo+ICsJCXJldCA9IGRsYV9yZWFkX2NwdV9hZGRyZXNzKGRyaXZl
cl9jb250ZXh0LCB0YXNrX2RhdGEsDQo+ICsJCQkJCQlpbmRleCwgZHN0X3B0cik7DQo+ICsJ
fSBlbHNlIGlmIChkZXN0aW5hdGlvbiA9PSBERVNUSU5BVElPTl9ETUEpIHsNCj4gKwkJcmV0
ID0gZGxhX3JlYWRfZG1hX2FkZHJlc3MoZHJpdmVyX2NvbnRleHQsIHRhc2tfZGF0YSwNCj4g
KwkJCQkJCWluZGV4LCBkc3RfcHRyKTsNCj4gKwl9IGVsc2Ugew0KPiArCQlyZXQgPSAtRUlO
VkFMOw0KPiArCX0NCj4gKw0KPiArCXJldHVybiByZXQ7DQo+ICt9DQo+ICsNCj4gK2ludDMy
X3QgZGxhX2RhdGFfd3JpdGUodm9pZCAqZHJpdmVyX2NvbnRleHQsIHZvaWQgKnRhc2tfZGF0
YSwNCj4gKwkJCQl2b2lkICpzcmMsIHVpbnQ2NF90IGRzdCwNCj4gKwkJCQl1aW50MzJfdCBz
aXplLCB1aW50NjRfdCBvZmZzZXQpDQo+ICt7DQo+ICsJaW50MzJfdCByZXQ7DQo+ICsJdm9p
ZCAqcHRyID0gTlVMTDsNCj4gKwlzdHJ1Y3QgZG1hX2J1ZiAqYnVmOw0KPiArCXN0cnVjdCBp
b3N5c19tYXAgbWFwOw0KPiArCXN0cnVjdCBudmRsYV9tZW1faGFuZGxlICpoYW5kbGVzOw0K
PiArCXN0cnVjdCBudmRsYV90YXNrICp0YXNrID0gKHN0cnVjdCBudmRsYV90YXNrICopdGFz
a19kYXRhOw0KPiArDQo+ICsJaGFuZGxlcyA9IHRhc2stPmFkZHJlc3NfbGlzdDsNCj4gKwli
dWYgPSBkbWFfYnVmX2dldChoYW5kbGVzW2RzdF0uaGFuZGxlKTsNCj4gKwlpZiAoSVNfRVJS
KGJ1ZikpIHsNCj4gKwkJcHJfZXJyKCIlczogRmFpbGVkIGdldCBkbWFfYnVmIGZvciBoYW5k
bGU9JWRcbiIsIF9fZnVuY19fLA0KPiArCQkJCQkJaGFuZGxlc1tkc3RdLmhhbmRsZSk7DQo+
ICsJCXJldHVybiAtRUZBVUxUOw0KPiArCX0NCj4gKw0KPiArCXJldCA9IGRtYV9idWZfYmVn
aW5fY3B1X2FjY2VzcyhidWYsIERNQV9CSURJUkVDVElPTkFMKTsNCj4gKwlpZiAocmV0KQ0K
PiArCQlnb3RvIHB1dF9kbWFfYnVmOw0KPiArDQo+ICsJcmV0ID0gZG1hX2J1Zl92bWFwKGJ1
ZiwgJm1hcCk7DQo+ICsJcHRyID0gcmV0ID8gTlVMTCA6IG1hcC52YWRkcjsNCg0KTmV2ZXIg
ZXh0cmFjdCB0aGUgcG9pbnRlcidzIGFkZHJlc3Mgd2l0aG91dCBnb29kIHJlYXNvbi4gWW91
IGRvbid0IGtub3cgDQppZiB0aGlzIHBvaW50cyB0byBhIGxvY2F0aW9uIGluIEkvTyBtZW1v
cnkuDQoNCj4gKwlpZiAoIXB0cikgew0KDQpTaW1wbHkgdGVzdCBmb3IgcmV0IGhlcmUuDQoN
Cj4gKwkJcHJfZXJyKCIlczogRmFpbGVkIHRvIHZtYXAgZG1hX2J1ZiBmb3IgaGFuZGxlPSVk
XG4iLCBfX2Z1bmNfXywNCj4gKwkJCQkJCWhhbmRsZXNbZHN0XS5oYW5kbGUpOw0KPiArCQly
ZXQgPSAtRU5PTUVNOw0KDQpZb3UgYWxyZWFkeSBnb3QgYW4gZXJybm8gY29kZS4gRG9uJ3Qg
b3ZlcnJpZGUgaXQuDQoNCj4gKwkJZ290byBlbmRfY3B1X2FjY2VzczsNCj4gKwl9DQo+ICsN
Cj4gKw0KPiArCW1lbWNweSgodm9pZCAqKSgodWludDhfdCAqKXB0ciArIG9mZnNldCksIHNy
Yywgc2l6ZSk7DQoNClVzZSBpb3N5c19tYXBfbWVtY3B5X3RvKCkgaGVyZS4gIEl0IGRvZXMg
dGhlIHJpZ2h0IHRoaW5nDQoNCj4gKw0KPiArCWRtYV9idWZfdnVubWFwKGJ1ZiwgcHRyKTsN
Cg0KWW91IGhhdmUgdG8gcGFzcyBtYXAgYXMgdGhlIHNlY29uZCBhcmd1bWVudC4NCg0KPiAr
DQo+ICtlbmRfY3B1X2FjY2VzczoNCj4gKwlkbWFfYnVmX2VuZF9jcHVfYWNjZXNzKGJ1Ziwg
RE1BX0JJRElSRUNUSU9OQUwpOw0KPiArDQo+ICtwdXRfZG1hX2J1ZjoNCj4gKwlkbWFfYnVm
X3B1dChidWYpOw0KPiArDQo+ICsJcmV0dXJuIHJldDsNCj4gK30NCj4gKw0KPiAraW50MzJf
dCBkbGFfZGF0YV9yZWFkKHZvaWQgKmRyaXZlcl9jb250ZXh0LCB2b2lkICp0YXNrX2RhdGEs
DQo+ICsJCQkJdWludDY0X3Qgc3JjLCB2b2lkICpkc3QsDQo+ICsJCQkJdWludDMyX3Qgc2l6
ZSwgdWludDY0X3Qgb2Zmc2V0KQ0KPiArew0KPiArCWludDMyX3QgcmV0Ow0KPiArCXZvaWQg
KnB0ciA9IE5VTEw7DQo+ICsJc3RydWN0IGRtYV9idWYgKmJ1ZjsNCj4gKwlzdHJ1Y3QgaW9z
eXNfbWFwIG1hcDsNCj4gKwlzdHJ1Y3QgbnZkbGFfbWVtX2hhbmRsZSAqaGFuZGxlczsNCj4g
KwlzdHJ1Y3QgbnZkbGFfdGFzayAqdGFzayA9IChzdHJ1Y3QgbnZkbGFfdGFzayAqKXRhc2tf
ZGF0YTsNCj4gKw0KPiArCWhhbmRsZXMgPSB0YXNrLT5hZGRyZXNzX2xpc3Q7DQo+ICsNCj4g
KwlidWYgPSBkbWFfYnVmX2dldChoYW5kbGVzW3NyY10uaGFuZGxlKTsNCj4gKwlpZiAoSVNf
RVJSKGJ1ZikpIHsNCj4gKwkJcHJfZXJyKCIlczogRmFpbGVkIGdldCBkbWFfYnVmIGZvciBo
YW5kbGU9JWRcbiIsIF9fZnVuY19fLA0KPiArCQkJCQkJaGFuZGxlc1tzcmNdLmhhbmRsZSk7
DQo+ICsJCXJldHVybiAtRUZBVUxUOw0KPiArCX0NCj4gKw0KPiArCXJldCA9IGRtYV9idWZf
YmVnaW5fY3B1X2FjY2VzcyhidWYsIERNQV9CSURJUkVDVElPTkFMKTsNCj4gKwlpZiAocmV0
KQ0KPiArCQlnb3RvIHB1dF9kbWFfYnVmOw0KPiArDQo+ICsJcmV0ID0gZG1hX2J1Zl92bWFw
KGJ1ZiwgJm1hcCk7DQo+ICsJcHRyID0gcmV0ID8gTlVMTCA6IG1hcC52YWRkcjsNCj4gKwlp
ZiAoIXB0cikgew0KPiArCQlwcl9lcnIoIiVzOiBGYWlsZWQgdG8gdm1hcCBkbWFfYnVmIGZv
ciBoYW5kbGU9JWRcbiIsIF9fZnVuY19fLA0KPiArCQkJCQkJaGFuZGxlc1tzcmNdLmhhbmRs
ZSk7DQo+ICsJCXJldCA9IC1FTk9NRU07DQo+ICsJCWdvdG8gZW5kX2NwdV9hY2Nlc3M7DQo+
ICsJfQ0KDQpBbGwgdGhlIHNhbWUgcHJvYmxlbXMgYXMgaW4gZGxhX2RhdGFfd3JpdGUoKS4N
Cg0KPiArDQo+ICsJbWVtY3B5KGRzdCwgKHZvaWQgKikoKCh1aW50OF90ICopcHRyKSArIG9m
ZnNldCksIHNpemUpOw0KDQpVc2UgaW9zeXNfbWFwX21lbWNweV9mcm9tKCkgaGVyZS4NCg0K
PiArDQo+ICsJZG1hX2J1Zl92dW5tYXAoYnVmLCBwdHIpOw0KDQonbWFwJyBpbnN0ZWFkIG9m
ICdwdHInDQoNCj4gKw0KPiArZW5kX2NwdV9hY2Nlc3M6DQo+ICsJZG1hX2J1Zl9lbmRfY3B1
X2FjY2VzcyhidWYsIERNQV9CSURJUkVDVElPTkFMKTsNCj4gKw0KPiArcHV0X2RtYV9idWY6
DQo+ICsJZG1hX2J1Zl9wdXQoYnVmKTsNCj4gKw0KPiArCXJldHVybiByZXQ7DQo+ICt9DQo+
ICsNCg0KPiArDQo+ICtzdGF0aWMgaW50MzJfdCBudmRsYV9zdWJtaXQoc3RydWN0IGRybV9k
ZXZpY2UgKmRybSwgdm9pZCAqYXJnLA0KPiArCQkJCQlzdHJ1Y3QgZHJtX2ZpbGUgKmZpbGUp
DQo+ICt7DQo+ICsJaW50MzJfdCBlcnIgPSAwOw0KPiArCXN0cnVjdCBudmRsYV90YXNrICp0
YXNrOw0KPiArCXN0cnVjdCBudmRsYV9pb2N0bF9zdWJtaXRfdGFzayBsb2NhbF90YXNrOw0K
PiArCXN0cnVjdCBudmRsYV9pb2N0bF9zdWJtaXRfdGFzayBfX3VzZXIgKnVzZXJfdGFzazsN
Cj4gKwlzdHJ1Y3QgbnZkbGFfZGV2aWNlICpudmRsYV9kZXYgPSBkZXZfZ2V0X2RydmRhdGEo
ZHJtLT5kZXYpOw0KPiArCXN0cnVjdCBudmRsYV9zdWJtaXRfYXJncyAqYXJncyA9DQo+ICsJ
CQkoc3RydWN0IG52ZGxhX3N1Ym1pdF9hcmdzICopYXJnOw0KPiArDQo+ICsJdXNlcl90YXNr
ID0gKHN0cnVjdCBudmRsYV9pb2N0bF9zdWJtaXRfdGFzayBfX3VzZXIgKikNCj4gKwkJCSh1
aW50cHRyX3QpYXJncy0+dGFza3M7DQo+ICsJaWYgKCF1c2VyX3Rhc2spDQo+ICsJCXJldHVy
biAtRUlOVkFMOw0KPiArDQo+ICsJLyogSU9DVEwgY29weSBkZXNjcmlwdG9ycyAqLw0KPiAr
CWlmIChjb3B5X2Zyb21fdXNlcigmbG9jYWxfdGFzaywgKHZvaWQgX191c2VyICopdXNlcl90
YXNrLA0KPiArCQkJKHNpemVvZigqdXNlcl90YXNrKSkpKQ0KPiArCQlyZXR1cm4gLUVGQVVM
VDsNCj4gKw0KPiArCXRhc2sgPSBremFsbG9jKHNpemVvZigqdGFzayksIEdGUF9LRVJORUwp
Ow0KPiArCWlmICh0YXNrID09IE5VTEwpDQo+ICsJCXJldHVybiAtRUZBVUxUOw0KPiArDQo+
ICsJbnZkbGFfZGV2LT50YXNrID0gdGFzazsNCj4gKwlrcmVmX2luaXQoJnRhc2stPnJlZik7
DQo+ICsJdGFzay0+bnZkbGFfZGV2ID0gbnZkbGFfZGV2Ow0KPiArCXRhc2stPmZpbGUgPSBm
aWxlOw0KPiArDQo+ICsJLyogdXBkYXRlIHRhc2sgZGVzYyBmaWVsZHMgKi8NCj4gKwllcnIg
PSBudmRsYV9maWxsX3Rhc2tfZGVzYygmbG9jYWxfdGFzaywgdGFzayk7DQo+ICsJaWYgKGVy
cikNCj4gKwkJZ290byBmcmVlX3Rhc2tfZGVzYzsNCj4gKw0KPiArCWVyciA9IG52ZGxhX3Rh
c2tfc3VibWl0KG52ZGxhX2RldiwgdGFzayk7DQo+ICsNCj4gKwlrZnJlZSh0YXNrLT5hZGRy
ZXNzX2xpc3QpOw0KPiArDQo+ICtmcmVlX3Rhc2tfZGVzYzoNCj4gKwlrZnJlZSh0YXNrKTsN
Cj4gKwlyZXR1cm4gZXJyOw0KPiArfQ0KPiArDQo+ICtzdGF0aWMgaW50MzJfdCBudmRsYV9n
ZW1fYWxsb2Moc3RydWN0IG52ZGxhX2dlbV9vYmplY3QgKm5vYmopDQo+ICt7DQo+ICsJc3Ry
dWN0IGRybV9nZW1fb2JqZWN0ICpkb2JqID0gJm5vYmotPm9iamVjdDsNCj4gKwlzdHJ1Y3Qg
ZHJtX2RldmljZSAqZHJtID0gZG9iai0+ZGV2Ow0KPiArDQo+ICsJbm9iai0+ZG1hX2F0dHJz
ID0gRE1BX0FUVFJfV1JJVEVfQ09NQklORTsNCj4gKw0KPiArCW5vYmotPmt2YWRkciA9IGRt
YV9hbGxvY19hdHRycyhkcm0tPmRldiwgZG9iai0+c2l6ZSwgJm5vYmotPmRtYV9hZGRyLA0K
PiArCQkJCQkJR0ZQX0tFUk5FTCwgbm9iai0+ZG1hX2F0dHJzKTsNCj4gKw0KDQpTdG9yZSBh
biBpb3N5cy1tYXAgYWRkcmVzcyBpbiBub2JqIGFuZCBpbml0aWFsaXplIGl0IHdpdGggDQpp
b3N5c19tYXBfc2V0X3ZhZGRyKCk7IG9yIGlvc3lzX21hcF9zZXRfdmFkZHJfaW9tZW0oKSBp
ZiB5b3UncmUgd29ya2luZyANCndpdGggSS9PIG1lbW9yeS4NCg0KPiArCWlmICghbm9iai0+
a3ZhZGRyKQ0KPiArCQlyZXR1cm4gLUVOT01FTTsNCj4gKw0KPiArCXJldHVybiAwOw0KPiAr
fQ0KPiArDQo+ICtzdGF0aWMgdm9pZCBudmRsYV9nZW1fZnJlZShzdHJ1Y3QgbnZkbGFfZ2Vt
X29iamVjdCAqbm9iaikNCj4gK3sNCj4gKwlzdHJ1Y3QgZHJtX2dlbV9vYmplY3QgKmRvYmog
PSAmbm9iai0+b2JqZWN0Ow0KPiArCXN0cnVjdCBkcm1fZGV2aWNlICpkcm0gPSBkb2JqLT5k
ZXY7DQo+ICsNCj4gKwlkbWFfZnJlZV9hdHRycyhkcm0tPmRldiwgZG9iai0+c2l6ZSwgbm9i
ai0+a3ZhZGRyLCBub2JqLT5kbWFfYWRkciwNCj4gKwkJCQlub2JqLT5kbWFfYXR0cnMpOw0K
PiArfQ0KPiArDQo+ICtzdGF0aWMgdm9pZCBudmRsYV9nZW1fZnJlZV9vYmplY3Qoc3RydWN0
IGRybV9nZW1fb2JqZWN0ICpkb2JqKQ0KPiArew0KPiArCXN0cnVjdCBudmRsYV9nZW1fb2Jq
ZWN0ICpub2JqOw0KPiArDQo+ICsJZHJtX2dlbV9mcmVlX21tYXBfb2Zmc2V0KGRvYmopOw0K
PiArDQo+ICsJbm9iaiA9IHRvX252ZGxhX29iaihkb2JqKTsNCj4gKw0KPiArCW52ZGxhX2dl
bV9mcmVlKG5vYmopOw0KPiArDQo+ICsJa2ZyZWUobm9iaik7DQo+ICt9DQo+ICsNCj4gK3N0
YXRpYyBzdHJ1Y3QgbnZkbGFfZ2VtX29iamVjdCAqDQo+ICtudmRsYV9nZW1fY3JlYXRlX29i
amVjdChzdHJ1Y3QgZHJtX2RldmljZSAqZHJtLCB1aW50MzJfdCBzaXplKQ0KPiArew0KPiAr
CWludDMyX3QgcmV0Ow0KPiArCXN0cnVjdCBkcm1fZ2VtX29iamVjdCAqZG9iajsNCj4gKwlz
dHJ1Y3QgbnZkbGFfZ2VtX29iamVjdCAqbm9iajsNCj4gKw0KPiArCXNpemUgPSByb3VuZF91
cChzaXplLCBQQUdFX1NJWkUpOw0KPiArDQo+ICsJbm9iaiA9IGt6YWxsb2Moc2l6ZW9mKCpu
b2JqKSwgR0ZQX0tFUk5FTCk7DQo+ICsJaWYgKCFub2JqKQ0KPiArCQlyZXR1cm4gRVJSX1BU
UigtRU5PTUVNKTsNCj4gKw0KPiArCWRvYmogPSAmbm9iai0+b2JqZWN0Ow0KPiArDQo+ICsJ
ZHJtX2dlbV9wcml2YXRlX29iamVjdF9pbml0KGRybSwgZG9iaiwgc2l6ZSk7DQo+ICsNCj4g
KwlyZXQgPSBudmRsYV9nZW1fYWxsb2Mobm9iaik7DQo+ICsJaWYgKHJldCkNCj4gKwkJZ290
byBmcmVlX252ZGxhX29iajsNCj4gKw0KPiArCXJldHVybiBub2JqOw0KPiArDQo+ICtmcmVl
X252ZGxhX29iajoNCj4gKwlrZnJlZShub2JqKTsNCj4gKwlyZXR1cm4gRVJSX1BUUihyZXQp
Ow0KPiArfQ0KPiArDQo+ICtzdGF0aWMgc3RydWN0IHNnX3RhYmxlKg0KPiArbnZkbGFfZHJt
X2dlbV9wcmltZV9nZXRfc2dfdGFibGUoc3RydWN0IGRybV9nZW1fb2JqZWN0ICpkb2JqKQ0K
PiArew0KPiArCWludDMyX3QgcmV0Ow0KPiArCXN0cnVjdCBzZ190YWJsZSAqc2d0Ow0KPiAr
CXN0cnVjdCBkcm1fZGV2aWNlICpkcm0gPSBkb2JqLT5kZXY7DQo+ICsJc3RydWN0IG52ZGxh
X2dlbV9vYmplY3QgKm5vYmogPSB0b19udmRsYV9vYmooZG9iaik7DQo+ICsNCj4gKwlzZ3Qg
PSBremFsbG9jKHNpemVvZigqc2d0KSwgR0ZQX0tFUk5FTCk7DQo+ICsJaWYgKCFzZ3QpDQo+
ICsJCXJldHVybiBFUlJfUFRSKC1FTk9NRU0pOw0KPiArDQo+ICsJcmV0ID0gZG1hX2dldF9z
Z3RhYmxlX2F0dHJzKGRybS0+ZGV2LCBzZ3QsIG5vYmotPmt2YWRkciwNCj4gKwkJCQkgICAg
bm9iai0+ZG1hX2FkZHIsIGRvYmotPnNpemUsDQo+ICsJCQkJICAgIG5vYmotPmRtYV9hdHRy
cyk7DQo+ICsJaWYgKHJldCkgew0KPiArCQlEUk1fRVJST1IoImZhaWxlZCB0byBhbGxvY2F0
ZSBzZ3QsICVkXG4iLCByZXQpOw0KPiArCQlrZnJlZShzZ3QpOw0KPiArCQlyZXR1cm4gRVJS
X1BUUihyZXQpOw0KPiArCX0NCj4gKw0KPiArCXJldHVybiBzZ3Q7DQo+ICt9DQo+ICsNCj4g
K3N0YXRpYyBpbnQgbnZkbGFfZHJtX2dlbV9wcmltZV92bWFwKHN0cnVjdCBkcm1fZ2VtX29i
amVjdCAqb2JqLCBzdHJ1Y3QgaW9zeXNfbWFwICptYXApDQo+ICt7DQo+ICsJc3RydWN0IG52
ZGxhX2dlbV9vYmplY3QgKm5vYmogPSB0b19udmRsYV9vYmoob2JqKTsNCj4gKw0KPiArCW1h
cC0+dmFkZHIgPSBub2JqLT5rdmFkZHI7DQoNCkluc3RlYWQgb2Yga3ZhZGRyLCBzdG9yZSB0
aGUgcG9pbnRlciBhcyBzdHJ1Y3QgaW9zeXNfbWFwLiBUaGVuIHNpbXBseSANCmNvcHkgaXQg
aGVyZSwgYXMgaW4NCg0KICAgICptYXAgPSBub2JqLT5tYXA7DQoNCj4gKw0KPiArCXJldHVy
biAwOw0KPiArfQ0KPiArDQo+ICtzdGF0aWMgdm9pZCBudmRsYV9kcm1fZ2VtX3ByaW1lX3Z1
bm1hcChzdHJ1Y3QgZHJtX2dlbV9vYmplY3QgKm9iaiwgc3RydWN0IGlvc3lzX21hcCAqbWFw
KQ0KPiArew0KPiArCS8qIE5vdGhpbmcgdG8gZG8gKi8NCj4gK30NCj4gKw0KPiArc3RhdGlj
IGludDMyX3QgbnZkbGFfZHJtX2dlbV9vYmplY3RfbW1hcChzdHJ1Y3QgZHJtX2dlbV9vYmpl
Y3QgKmRvYmosDQo+ICsJCQkJCXN0cnVjdCB2bV9hcmVhX3N0cnVjdCAqdm1hKQ0KPiArew0K
PiArCWludDMyX3QgcmV0Ow0KPiArCXN0cnVjdCBudmRsYV9nZW1fb2JqZWN0ICpub2JqID0g
dG9fbnZkbGFfb2JqKGRvYmopOw0KPiArCXN0cnVjdCBkcm1fZGV2aWNlICpkcm0gPSBkb2Jq
LT5kZXY7DQo+ICsNCj4gKwl2bWEtPnZtX2ZsYWdzICY9IH5WTV9QRk5NQVA7DQo+ICsJdm1h
LT52bV9wZ29mZiA9IDA7DQoNCkl0J3MgY2xlYW5lciB0byBkbyB0aGlzIGFzDQoNCiAgICB2
bWEtPnZtX3Bnb2ZmIC09IGRybV92bWFfbm9kZV9zdGFydCgmb2JqLT52bWFfbm9kZSkNCg0K
PiArDQo+ICsJcmV0ID0gZG1hX21tYXBfYXR0cnMoZHJtLT5kZXYsIHZtYSwgbm9iai0+a3Zh
ZGRyLCBub2JqLT5kbWFfYWRkciwNCj4gKwkJCSAgICAgZG9iai0+c2l6ZSwgbm9iai0+ZG1h
X2F0dHJzKTsNCj4gKwlpZiAocmV0KQ0KPiArCQlkcm1fZ2VtX3ZtX2Nsb3NlKHZtYSk7DQo+
ICsNCj4gKwlyZXR1cm4gcmV0Ow0KPiArfQ0KPiArDQo+ICtzdGF0aWMgY29uc3Qgc3RydWN0
IGRybV9nZW1fb2JqZWN0X2Z1bmNzIG52ZGxhX2dlbV9vYmplY3RfZnVuY3MgPSB7DQo+ICsJ
LmZyZWUgPSBudmRsYV9nZW1fZnJlZV9vYmplY3QsDQo+ICsJLmdldF9zZ190YWJsZSA9IG52
ZGxhX2RybV9nZW1fcHJpbWVfZ2V0X3NnX3RhYmxlLA0KPiArCS52bWFwID0gbnZkbGFfZHJt
X2dlbV9wcmltZV92bWFwLA0KPiArCS52dW5tYXAgPSBudmRsYV9kcm1fZ2VtX3ByaW1lX3Z1
bm1hcCwNCj4gKwkubW1hcCA9IG52ZGxhX2RybV9nZW1fb2JqZWN0X21tYXAsDQo+ICt9Ow0K
PiArDQo+ICtzdGF0aWMgc3RydWN0IG52ZGxhX2dlbV9vYmplY3QqDQo+ICtudmRsYV9nZW1f
Y3JlYXRlX3dpdGhfaGFuZGxlKHN0cnVjdCBkcm1fZmlsZSAqZmlsZV9wcml2LA0KPiArCQkJ
CQkJCSBzdHJ1Y3QgZHJtX2RldmljZSAqZHJtLCB1aW50MzJfdCBzaXplLA0KPiArCQkJCQkJ
CSB1aW50MzJfdCAqaGFuZGxlKQ0KPiArew0KPiArCWludDMyX3QgcmV0Ow0KPiArCXN0cnVj
dCBkcm1fZ2VtX29iamVjdCAqZG9iajsNCj4gKwlzdHJ1Y3QgbnZkbGFfZ2VtX29iamVjdCAq
bm9iajsNCj4gKw0KPiArCW5vYmogPSBudmRsYV9nZW1fY3JlYXRlX29iamVjdChkcm0sIHNp
emUpOw0KPiArCWlmIChJU19FUlIobm9iaikpDQo+ICsJCXJldHVybiBFUlJfQ0FTVChub2Jq
KTsNCj4gKw0KPiArCWRvYmogPSAmbm9iai0+b2JqZWN0Ow0KPiArCWRvYmotPmZ1bmNzID0g
Jm52ZGxhX2dlbV9vYmplY3RfZnVuY3M7DQo+ICsJcmV0ID0gZHJtX2dlbV9oYW5kbGVfY3Jl
YXRlKGZpbGVfcHJpdiwgZG9iaiwgaGFuZGxlKTsNCj4gKwlpZiAocmV0KQ0KPiArCQlnb3Rv
IGZyZWVfZHJtX29iamVjdDsNCj4gKw0KPiArCWRybV9nZW1fb2JqZWN0X3B1dChkb2JqKTsN
Cj4gKw0KPiArCXJldHVybiBub2JqOw0KPiArDQo+ICtmcmVlX2RybV9vYmplY3Q6DQo+ICsJ
bnZkbGFfZ2VtX2ZyZWVfb2JqZWN0KGRvYmopOw0KPiArDQo+ICsJcmV0dXJuIEVSUl9QVFIo
cmV0KTsNCj4gK30NCj4gKw0KPiArc3RhdGljIGludDMyX3QgbnZkbGFfZ2VtX2NyZWF0ZShz
dHJ1Y3QgZHJtX2RldmljZSAqZHJtLCB2b2lkICpkYXRhLA0KPiArCQkJCQkJCQlzdHJ1Y3Qg
ZHJtX2ZpbGUgKmZpbGUpDQo+ICt7DQo+ICsJc3RydWN0IG52ZGxhX2dlbV9vYmplY3QgKm5v
Ymo7DQo+ICsJc3RydWN0IG52ZGxhX2dlbV9jcmVhdGVfYXJncyAqYXJncyA9IGRhdGE7DQo+
ICsNCj4gKwlub2JqID0gbnZkbGFfZ2VtX2NyZWF0ZV93aXRoX2hhbmRsZShmaWxlLCBkcm0s
IGFyZ3MtPnNpemUsDQo+ICsJCQkJCSAmYXJncy0+aGFuZGxlKTsNCj4gKwlpZiAoSVNfRVJS
KG5vYmopKQ0KPiArCQlyZXR1cm4gUFRSX0VSUihub2JqKTsNCj4gKw0KPiArCXJldHVybiAw
Ow0KPiArfQ0KPiArDQo+ICtzdGF0aWMgaW50MzJfdCBudmRsYV9kcm1fZ2VtX21tYXBfYnVm
KHN0cnVjdCBkcm1fZ2VtX29iamVjdCAqb2JqLA0KPiArCQkJCQkJCQkJICBzdHJ1Y3Qgdm1f
YXJlYV9zdHJ1Y3QgKnZtYSkNCj4gK3sNCj4gKwlpbnQzMl90IHJldDsNCj4gKw0KPiArCXJl
dCA9IGRybV9nZW1fbW1hcF9vYmoob2JqLCBvYmotPnNpemUsIHZtYSk7DQo+ICsJaWYgKHJl
dCkNCj4gKwkJcmV0dXJuIHJldDsNCj4gKw0KPiArCXJldHVybiBudmRsYV9kcm1fZ2VtX29i
amVjdF9tbWFwKG9iaiwgdm1hKTsNCj4gK30NCj4gKw0KPiArc3RhdGljIGludDMyX3QgbnZk
bGFfZHJtX2dlbV9tbWFwKHN0cnVjdCBmaWxlICpmaWxwLCBzdHJ1Y3Qgdm1fYXJlYV9zdHJ1
Y3QgKnZtYSkNCj4gK3sNCj4gKwlpbnQzMl90IHJldDsNCj4gKwlzdHJ1Y3QgZHJtX2dlbV9v
YmplY3QgKm9iajsNCj4gKw0KPiArCXJldCA9IGRybV9nZW1fbW1hcChmaWxwLCB2bWEpOw0K
PiArCWlmIChyZXQpDQo+ICsJCXJldHVybiByZXQ7DQo+ICsNCj4gKwlvYmogPSB2bWEtPnZt
X3ByaXZhdGVfZGF0YTsNCj4gKw0KPiArCXJldHVybiBudmRsYV9kcm1fZ2VtX29iamVjdF9t
bWFwKG9iaiwgdm1hKTsNCg0KSSBkb24ndCB1bmRlcnN0YW5kIHRoZXNlIHR3byBsaW5lcy4g
VGhpcyBpcyBwYXJ0IG9mIHdoYXQgZHJtX2dlbV9tbWFwKCkgDQpkb2VzLiBJdCBzaG91bGRu
J3QgYmUgbmVjZXNzYXJ5IGhlcmUuDQoNCj4gK30NCj4gKw0KPiAraW50MzJfdCBudmRsYV9n
ZW1fZG1hX2FkZHIoc3RydWN0IGRybV9kZXZpY2UgKmRldiwgc3RydWN0IGRybV9maWxlICpm
aWxlLA0KPiArCQkJCQkJICAgdWludDMyX3QgZmQsIGRtYV9hZGRyX3QgKmFkZHIpDQo+ICt7
DQo+ICsJaW50MzJfdCByZXQ7DQo+ICsJdWludDMyX3QgaGFuZGxlOw0KPiArCXN0cnVjdCBu
dmRsYV9nZW1fb2JqZWN0ICpub2JqOw0KPiArCXN0cnVjdCBkcm1fZ2VtX29iamVjdCAqZG9i
ajsNCj4gKw0KPiArCXJldCA9IGRybV9nZW1fcHJpbWVfZmRfdG9faGFuZGxlKGRldiwgZmls
ZSwgZmQsICZoYW5kbGUpOw0KPiArCWlmIChyZXQpDQo+ICsJCXJldHVybiByZXQ7DQo+ICsN
Cj4gKwlkb2JqID0gZHJtX2dlbV9vYmplY3RfbG9va3VwKGZpbGUsIGhhbmRsZSk7DQo+ICsJ
aWYgKCFkb2JqKQ0KPiArCQlyZXR1cm4gLUVJTlZBTDsNCj4gKw0KPiArCW5vYmogPSB0b19u
dmRsYV9vYmooZG9iaik7DQo+ICsNCj4gKwkqYWRkciA9IG5vYmotPmRtYV9hZGRyOw0KPiAr
DQo+ICsJZHJtX2dlbV9vYmplY3RfcHV0KGRvYmopOw0KPiArDQo+ICsJcmV0dXJuIDA7DQo+
ICt9DQo+ICsNCj4gK3N0YXRpYyBpbnQzMl90IG52ZGxhX2dlbV9tYXBfb2Zmc2V0KHN0cnVj
dCBkcm1fZGV2aWNlICpkcm0sIHZvaWQgKmRhdGEsDQo+ICsJCQkJCQkJCQlzdHJ1Y3QgZHJt
X2ZpbGUgKmZpbGUpDQo+ICt7DQo+ICsJc3RydWN0IG52ZGxhX2dlbV9tYXBfb2Zmc2V0X2Fy
Z3MgKmFyZ3MgPSBkYXRhOw0KPiArDQo+ICsJcmV0dXJuIGRybV9nZW1fZHVtYl9tYXBfb2Zm
c2V0KGZpbGUsIGRybSwgYXJncy0+aGFuZGxlLA0KPiArCQkJCQkJCQkgICAmYXJncy0+b2Zm
c2V0KTsNCj4gK30NCj4gKw0KPiArc3RhdGljIGNvbnN0IHN0cnVjdCBmaWxlX29wZXJhdGlv
bnMgbnZkbGFfZHJtX2ZvcHMgPSB7DQo+ICsJLm93bmVyID0gVEhJU19NT0RVTEUsDQo+ICsJ
Lm9wZW4gPSBkcm1fb3BlbiwNCj4gKwkucmVsZWFzZSA9IGRybV9yZWxlYXNlLA0KPiArCS51
bmxvY2tlZF9pb2N0bCA9IGRybV9pb2N0bCwNCj4gKwkubW1hcCA9IG52ZGxhX2RybV9nZW1f
bW1hcCwNCg0KSXQgc2hvdWxkIGJlIGZpbmUgdG8gdXNlIGRybV9nZW1fbW1hcCBoZXJlLiBU
aGVuIHlvdSBzaG91bGQgdXNlIA0KREVGSU5FX0RSTV9HRU1fRk9QUygpIHRvIGRlZmluZSBu
dmRsYV9kcm1fZm9wcy4NCg0KPiArCS5wb2xsID0gZHJtX3BvbGwsDQo+ICsJLnJlYWQgPSBk
cm1fcmVhZCwNCj4gKyNpZmRlZiBDT05GSUdfQ09NUEFUDQo+ICsJLmNvbXBhdF9pb2N0bCA9
IGRybV9jb21wYXRfaW9jdGwsDQo+ICsjZW5kaWYNCj4gKwkubGxzZWVrID0gbm9vcF9sbHNl
ZWssDQo+ICt9Ow0KPiArDQo+ICtzdGF0aWMgY29uc3Qgc3RydWN0IGRybV9pb2N0bF9kZXNj
IG52ZGxhX2RybV9pb2N0bHNbXSA9IHsNCj4gKwlEUk1fSU9DVExfREVGX0RSVihOVkRMQV9T
VUJNSVQsIG52ZGxhX3N1Ym1pdCwgRFJNX1JFTkRFUl9BTExPVyksDQo+ICsJRFJNX0lPQ1RM
X0RFRl9EUlYoTlZETEFfR0VNX0NSRUFURSwgbnZkbGFfZ2VtX2NyZWF0ZSwgRFJNX1JFTkRF
Ul9BTExPVyksDQo+ICsJRFJNX0lPQ1RMX0RFRl9EUlYoTlZETEFfR0VNX01NQVAsIG52ZGxh
X2dlbV9tYXBfb2Zmc2V0LCBEUk1fUkVOREVSX0FMTE9XKSwNCj4gKwkvKiB1c2UgRFJNX0lP
Q1RMX01PREVfREVTVFJPWV9EVU1CIHRvIGRlc3RvcnkgKi8NCj4gK307DQo+ICsNCj4gK3N0
YXRpYyBzdHJ1Y3QgZHJtX2RyaXZlciBudmRsYV9kcm1fZHJpdmVyID0gew0KPiArCS5kcml2
ZXJfZmVhdHVyZXMgPSBEUklWRVJfR0VNIHwgRFJJVkVSX1JFTkRFUiwNCj4gKw0KPiArCS5p
b2N0bHMgPSBudmRsYV9kcm1faW9jdGxzLA0KPiArCS5udW1faW9jdGxzID0gQVJSQVlfU0la
RShudmRsYV9kcm1faW9jdGxzKSwNCj4gKwkuZm9wcyA9ICZudmRsYV9kcm1fZm9wcywNCj4g
KwkuZ2VtX3ByaW1lX21tYXAJCT0gbnZkbGFfZHJtX2dlbV9tbWFwX2J1ZiwNCg0KVXNlIGRy
bV9nZW1fcHJpbWVfbW1hcCgpIGhlcmUuDQoNClNvbWUgY29udGV4dDogdGhlIHNpdHVhdGlv
biB3aXRoIHRoZXNlIG1tYXAgZnVuY3Rpb25zIGhhcyBiZWVuIGNvbmZ1c2luZyANCmFuZCBp
bmNvbnNpc3RlbnQgYW1vbmcgRFJNIGRyaXZlcnMuIEJ1dCB3ZSBjbGVhbmVkIGl0IHVwIHNv
IHRoYXQgeW91IA0Kb25seSBoYXZlIHRvIHByb3ZpZGUgYSBtaW5pbWFsIGltcGxlbWVudGF0
aW9uIG9mIHN0cnVjdCANCmRybV9nZW1fb2JqZWN0X2Z1bmNzLm1tYXAuICBBbGwgb3RoZXIg
bW1hcCBjYWxsYmFja3MgY2FuIHRoZW4gYmUgZmlsbGVkIA0Kd2l0aCBzdGFuZGFyZCBEUk0g
aGVscGVycy4NCg0KPiArDQo+ICsJLm5hbWUgPSAibnZkbGEiLA0KPiArCS5kZXNjID0gIk5W
RExBIGRyaXZlciIsDQo+ICsJLmRhdGUgPSAiMjAxNzEwMTciLA0KPiArCS5tYWpvciA9IDAs
DQo+ICsJLm1pbm9yID0gMCwNCj4gKwkucGF0Y2hsZXZlbCA9IDAsDQo+ICt9Ow0KPiArDQo+
ICtpbnQzMl90IG52ZGxhX2RybV9wcm9iZShzdHJ1Y3QgbnZkbGFfZGV2aWNlICpudmRsYV9k
ZXYpDQo+ICt7DQo+ICsJaW50MzJfdCBlcnI7DQo+ICsJc3RydWN0IGRybV9kZXZpY2UgKmRy
bTsNCj4gKwlzdHJ1Y3QgZHJtX2RyaXZlciAqZHJpdmVyID0gJm52ZGxhX2RybV9kcml2ZXI7
DQo+ICsNCj4gKwlkcm0gPSBkcm1fZGV2X2FsbG9jKGRyaXZlciwgJm52ZGxhX2Rldi0+cGRl
di0+ZGV2KTsNCj4gKwlpZiAoSVNfRVJSKGRybSkpDQo+ICsJCXJldHVybiBQVFJfRVJSKGRy
bSk7DQo+ICsNCj4gKwludmRsYV9kZXYtPmRybSA9IGRybTsNCj4gKw0KPiArCWVyciA9IGRy
bV9kZXZfcmVnaXN0ZXIoZHJtLCAwKTsNCj4gKwlpZiAoZXJyIDwgMCkNCj4gKwkJZ290byB1
bnJlZjsNCj4gKw0KPiArCXJldHVybiAwOw0KPiArDQo+ICt1bnJlZjoNCj4gKwlkcm1fZGV2
X3B1dChkcm0pOw0KPiArCXJldHVybiBlcnI7DQo+ICt9DQo+ICsNCj4gK3ZvaWQgbnZkbGFf
ZHJtX3JlbW92ZShzdHJ1Y3QgbnZkbGFfZGV2aWNlICpudmRsYV9kZXYpDQo+ICt7DQo+ICsJ
ZHJtX2Rldl91bnJlZ2lzdGVyKG52ZGxhX2Rldi0+ZHJtKTsNCj4gKwlkcm1fZGV2X3B1dChu
dmRsYV9kZXYtPmRybSk7DQo+ICt9DQoNCi0tIA0KVGhvbWFzIFppbW1lcm1hbm4NCkdyYXBo
aWNzIERyaXZlciBEZXZlbG9wZXINClNVU0UgU29mdHdhcmUgU29sdXRpb25zIEdlcm1hbnkg
R21iSA0KTWF4ZmVsZHN0ci4gNSwgOTA0MDkgTsO8cm5iZXJnLCBHZXJtYW55DQooSFJCIDM2
ODA5LCBBRyBOw7xybmJlcmcpDQpHZXNjaMOkZnRzZsO8aHJlcjogSXZvIFRvdGV2DQo=

--------------DkYIbK1v6bqi1PxCfNnf2XXq--

--------------FoLe0iC4P4R0ttfxKUrmqTpq
Content-Type: application/pgp-signature; name="OpenPGP_signature.asc"
Content-Description: OpenPGP digital signature
Content-Disposition: attachment; filename="OpenPGP_signature"

-----BEGIN PGP SIGNATURE-----

wsF5BAABCAAjFiEExndm/fpuMUdwYFFolh/E3EQov+AFAmJhFiEFAwAAAAAACgkQlh/E3EQov+Bj
+BAAxFHVTsSj73OU2JtRbG58sjYYq7QLouFfjOgm2dzRCUY4ch7rhNbQ0CatQJpSmTsaIKEodsKV
xn1yC2C+JXzCuIYZ0QrEgsQNEKgZuKKf8LzM2EKSQjQGBZat4zygzF1zqY1uRRG8wleHP8qp0ugK
yVx5iLJG5ZsEfej+QGgnjPIkSlLPFwJx4PCr1MMIF2WGtXxkVpsmXBaklhDgoyAqlhkKzFEyPh8u
9mWoPNPKSWWHF8MI+eUU/5MUZLbIuCeUnJ9XEPlzl08rt8qfKq/ZUPxaOEY9WD+RHS657h6qlHMY
g3h/vr3hbcfd8+iG0r4hSOnmFXWXlsSwsjqgZ9pI+2foFjhwdkJEZcwmF9BPXgJCaYWQkXdkttUM
E+pAYB9v/9GhuubNZg/4Uapxq7CegzxpvcQgpgbjhOICgCrBclvEWYpf+Pk51Y/V4GvwjyupYxfz
mycqkwB24l+CvjsHvezaNnrhywDVx/JBHhtedD6VLS2NFxOgQBE9ZPzo/gK+BmCXr9gjWiZAtVtT
dGdYvXzjSpwUvnDYEFOZNVstIjZTy3NmdXHaiJrVKIuUDuzGyJmBC/NjZZFY5VucrdqYGRwYQLbX
3Cyyk/QrQXWwZAcRKjwA4tzBQvloxJvrWoLlCcxLlBqlPhhnMgCnLn2OfUEGAfbC0Hp8Mn86Bn/P
J3Y=
=ekcT
-----END PGP SIGNATURE-----

--------------FoLe0iC4P4R0ttfxKUrmqTpq--

From mboxrd@z Thu Jan  1 00:00:00 1970
Return-Path: <linux-kernel-owner@kernel.org>
X-Spam-Checker-Version: SpamAssassin 3.4.0 (2014-02-07) on
	aws-us-west-2-korg-lkml-1.web.codeaurora.org
Received: from vger.kernel.org (vger.kernel.org [23.128.96.18])
	by smtp.lore.kernel.org (Postfix) with ESMTP id A8B7EC433F5
	for <linux-kernel@archiver.kernel.org>; Thu, 21 Apr 2022 08:34:43 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1386760AbiDUIh1 (ORCPT
        <rfc822;linux-kernel@archiver.kernel.org>);
        Thu, 21 Apr 2022 04:37:27 -0400
Received: from lindbergh.monkeyblade.net ([23.128.96.19]:49922 "EHLO
        lindbergh.monkeyblade.net" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1386696AbiDUIhU (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Thu, 21 Apr 2022 04:37:20 -0400
Received: from NAM11-BN8-obe.outbound.protection.outlook.com (mail-bn8nam11on2082.outbound.protection.outlook.com [40.107.236.82])
        by lindbergh.monkeyblade.net (Postfix) with ESMTPS id 97EE01C128;
        Thu, 21 Apr 2022 01:34:30 -0700 (PDT)
ARC-Seal: i=1; a=rsa-sha256; s=arcselector9901; d=microsoft.com; cv=none;
 b=SkTg8SkUNFDm2sv/msmPxbETD9320NOALaQJG3tSOdTWvt5EuXD0F9PCdxJVaTc1NtTxzo2ctJm2SYM52hjYd9oseTWoXnO18YYpxTEHYIxc/xJeNbyTx3rzayQMucVQryzEuq7NRs8Ym+J6DbTfU0dv3gXbB6C1AMPOEwOdOIKzYa45nOT/xllDVP+dXmcQPA+D4rcQiwrWs44dibaSgVaj47WSYVt1RDW+q6LAxqfad4oGhwQMXWjv4DrsyhQVCSxQqXj457KnlDHRD29nSxdLSv2LLJhUsIxvPByjq4IxMgRd4ctph/ez4xcNuL+1SzelrIL3a7HXRPNXwT7jgw==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=microsoft.com;
 s=arcselector9901;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-AntiSpam-MessageData-ChunkCount:X-MS-Exchange-AntiSpam-MessageData-0:X-MS-Exchange-AntiSpam-MessageData-1;
 bh=45LSie8imRkKKWFN/jyK6rB29JrCJZkt6R/NbzmUMr8=;
 b=h87i3b3lZCM7rkQE8AyfdUiVixVgbr/BIkA1SYmAsF6XM/iKw1r3R3s20dh9r4zE13v4PY/aCFblr98RHXOOs36p1UEMVBnCJYUaTpluOywYcXWGpWyWNkr2UKh8YeNcaEfVrqw+Z6oDTZDft0mYpIqgjJ//uUVlXyBWC2V+v1IU1l9qchMZwjMhubzm79Yc0k9yvQC2PonjIgJAibsEqOf1WSRlNU47fo355417zJuDLTWlPKO3YS3M4oXz0z+2OITo4r9z+m5fdiS5d1mSq+qjInjyAFswt+rOXG5EIZHlmrzD/Lw9mu766JYBEsWInU54WRgBhgzNalodHcQjdQ==
ARC-Authentication-Results: i=1; mx.microsoft.com 1; spf=pass
 smtp.mailfrom=amd.com; dmarc=pass action=none header.from=amd.com; dkim=pass
 header.d=amd.com; arc=none
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=amd.com; s=selector1;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=45LSie8imRkKKWFN/jyK6rB29JrCJZkt6R/NbzmUMr8=;
 b=ZpFKIfQCc4wmZApb03gHGaoTTnt8Q+mD001bjcxJc8pLqNoDmvSQ/YKNvP7qhr034XzEwf1X/79LAQoqFWJXq42bd1SJLO56K5byGuFXxEex34UuYrTlP7DHpRvFL9m61gxk+oLd5cYnBkShkY/XDSIQmM2AbRNcbawUypm0xHE=
Authentication-Results: dkim=none (message not signed)
 header.d=none;dmarc=none action=none header.from=amd.com;
Received: from BN8PR12MB3587.namprd12.prod.outlook.com (2603:10b6:408:43::13)
 by DM4PR12MB6135.namprd12.prod.outlook.com (2603:10b6:8:ac::5) with Microsoft
 SMTP Server (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id
 15.20.5164.20; Thu, 21 Apr 2022 08:34:26 +0000
Received: from BN8PR12MB3587.namprd12.prod.outlook.com
 ([fe80::a5fb:7137:5e64:cf8]) by BN8PR12MB3587.namprd12.prod.outlook.com
 ([fe80::a5fb:7137:5e64:cf8%5]) with mapi id 15.20.5164.026; Thu, 21 Apr 2022
 08:34:26 +0000
Message-ID: <b34fa2a5-58b4-6270-2d19-2ad591e3e250@amd.com>
Date:   Thu, 21 Apr 2022 10:34:20 +0200
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:91.0) Gecko/20100101
 Thunderbird/91.7.0
Subject: Re: [PATCH 2/2] drm/nvdla: Add driver support for NVDLA
Content-Language: en-US
To:     Thomas Zimmermann <tzimmermann@suse.de>,
        Cai Huoqing <cai.huoqing@linux.dev>
Cc:     Maarten Lankhorst <maarten.lankhorst@linux.intel.com>,
        Maxime Ripard <mripard@kernel.org>,
        David Airlie <airlied@linux.ie>,
        Daniel Vetter <daniel@ffwll.ch>,
        Sumit Semwal <sumit.semwal@linaro.org>,
        linux-kernel@vger.kernel.org, dri-devel@lists.freedesktop.org,
        linux-media@vger.kernel.org, linaro-mm-sig@lists.linaro.org
References: <20220419135908.39606-1-cai.huoqing@linux.dev>
 <20220419135908.39606-3-cai.huoqing@linux.dev>
 <2aeee5a2-b5a5-348e-ccf7-04f49e1119da@suse.de>
From:   =?UTF-8?Q?Christian_K=c3=b6nig?= <christian.koenig@amd.com>
In-Reply-To: <2aeee5a2-b5a5-348e-ccf7-04f49e1119da@suse.de>
Content-Type: text/plain; charset=UTF-8; format=flowed
Content-Transfer-Encoding: 8bit
X-ClientProxiedBy: AM5PR04CA0031.eurprd04.prod.outlook.com
 (2603:10a6:206:1::44) To BN8PR12MB3587.namprd12.prod.outlook.com
 (2603:10b6:408:43::13)
MIME-Version: 1.0
X-MS-PublicTrafficType: Email
X-MS-Office365-Filtering-Correlation-Id: 02ddc887-ce5e-4103-5700-08da2371beb4
X-MS-TrafficTypeDiagnostic: DM4PR12MB6135:EE_
X-Microsoft-Antispam-PRVS: <DM4PR12MB6135F7D135DA0C2E3F46ED7C83F49@DM4PR12MB6135.namprd12.prod.outlook.com>
X-MS-Exchange-SenderADCheck: 1
X-MS-Exchange-AntiSpam-Relay: 0
X-Microsoft-Antispam: BCL:0;
X-Microsoft-Antispam-Message-Info: W3YH6kb3yfb0+Z7jg3I+s3enVz9pg3XFGoeZRDGz3KP5ll9rdlR1T/fBo8DuzBMTfmZ24qnBqE0/sMexhgLbB6HbMhG10uMFGCTcxR9/EI/g7QuLiqBXdtgK4xQP/StapfTDcCYyiAahmkzq8V+Xu1o3Q0zkKabRq/AS5u0PGwMQpvaaUXDxXjXK/XGqFTpHxqxMWTHTzHMydmlic4FBbYVqGrIiivfavocfbTg8Ae0aU91PYCKVt280qEGZPWqtg2r64mw/e+WoGe/pasvusCWdhb1fFPZ06SoxoRTZhXHSJIXPGeODdCLHPLXUYE178PqOVpZ4/4OkYNiOAgdu6C6eJqZG0UYVRId8VxUOnOcUoxCM+ZihyegCCp3kiRrBkraK7HWID0ZosB5yEIGgNGE1Xyk3VWhm3TMiP2Sp6MkUZjcLa3t6zdnC3l7JSgCHC/bD6FlQq9mVrqAmsUHm03llKsKp8qC5QA9Lim8Jsd8G/ZJtuuUJDxkE82pgtqiXwnHw1D7E/X78zwxKWFcDps9PyG8sjAl41UpwxTnxDPrW+eo2y5f00aJ0L/U7He+FZPoOthYt92fiv+JsN47Qkw7D8zjuadbvQmOay4YFcULkeZwai7C63Pm4D0bn5izIApEC3Al5mP2fgAw+K14kUGNowr6ANHG+NTnn0KVGQJ6j/auUKYqtbLZ6qlj/iH8m0QsDiZF/Du8c2ELhsSutUtT/xKZAhVtgfXmfYxaqnXE=
X-Forefront-Antispam-Report: CIP:255.255.255.255;CTRY:;LANG:en;SCL:1;SRV:;IPV:NLI;SFV:NSPM;H:BN8PR12MB3587.namprd12.prod.outlook.com;PTR:;CAT:NONE;SFS:(13230001)(4636009)(366004)(6512007)(66556008)(66476007)(2616005)(54906003)(66946007)(36756003)(8676002)(31686004)(110136005)(4326008)(186003)(316002)(6506007)(86362001)(6486002)(31696002)(38100700002)(83380400001)(8936002)(5660300002)(6666004)(2906002)(508600001)(7416002)(43740500002)(45980500001);DIR:OUT;SFP:1101;
X-MS-Exchange-AntiSpam-MessageData-ChunkCount: 2
X-MS-Exchange-AntiSpam-MessageData-0: =?utf-8?B?YXliWWV2WFNNaFVKVUdWUStTWjFLOFFIRnRYTG96MS9UVTQwc2xNRGZBa3Nh?=
 =?utf-8?B?N3ppaDhFRDQ0WGVseGhaVmNPa3k4R0VGYlUraFJyOG5Xdk5qajgrcVhnR3JF?=
 =?utf-8?B?VTd3VkxycUh1TXY5R3pTWFRUcWFIZFJMKzcxNDhVSzV2VVhjYjRZdVc5OHJh?=
 =?utf-8?B?Rmw4eVhjMk1XYzVkWXpDT3JFYllvR1J3d09HNlRaUEkyZWdVQnp1SWgzN2c4?=
 =?utf-8?B?MTJITXhCQkczc3BoclJ5QzZWeTl3TW51RXJNTVZNQTB3K1ZlOFl2Wi9aMWda?=
 =?utf-8?B?ZGlNbklPekZwOG5yajlrY1BwRkFBYUxvY2Q1QmhmQ1VLRlBFb2E0L3ovSHlk?=
 =?utf-8?B?TVdPZERMbmxYRC9LTVp2RXd0K0UvOW9GeVU0eEZ4Wk40SXdEM2JUOU52QzM4?=
 =?utf-8?B?andnQnlQOUNhWXQxc1pVRXV0NnRPbUx5Q1NQQ2dabzZqUUZsVlRXUkppa1dy?=
 =?utf-8?B?dTFqdGt1cHc5OE1lNDQ0OEI4Y01mbjR1YmllNEVGUlk1YVFpT1h2VjlZK0d4?=
 =?utf-8?B?MEVzMXpyQnhPZ0hwbXowSGVHaEwwWTFVb0VUVThyckpvQWNXRE1oaFhoRE01?=
 =?utf-8?B?USt1cXFYbjNZSUlWb2tOb1lUOGplalBMYVJHTEthSTJtODFzYmxCMjhIaFRo?=
 =?utf-8?B?MXFGMXRNalJRZk5maEgwWmRncStGbEg3K2l4Zi83UXlBNDJwdUNmaFhLRGdN?=
 =?utf-8?B?TThUQjI0eHBkM2FVeHNkZEUzZlJvYXc3WmthWjk2ZWQ0dDV2Y1picVBGSXJj?=
 =?utf-8?B?b2JydFpOZTFxSXVxeDZqTVBMNlpOZUoyTXRjMnpJdGYrU21EQTVNV2NoVXZJ?=
 =?utf-8?B?RmNCQ3F5WVo1MHlSbzhmSzNCdjFhR2dGYlVCN1pzc0tHemlEV2tOLzhJaHd4?=
 =?utf-8?B?SExoK2E5RFZnblZyTGE1QlM2UFJ3SEs4SDUvNllDazROUVBUcW43azRVTWgz?=
 =?utf-8?B?a005OTllMk9NUVRNcktkcmNyUzlsMitzQk9zdEFMY0hwdjc0TmZDcm5qdk1Z?=
 =?utf-8?B?TmNEYWJIeVBzOWhqaTdMai9tSGgrTXB1SGx1ay9aN05KczhicEp5TnN3OFVz?=
 =?utf-8?B?b0lsR1NwbUVRT3JxNWVwRTRyQUhKYjM1dXpnejVHSlQ0a2JwZ0lNR09jTjZS?=
 =?utf-8?B?R0FJNDBaTDh1WXhBemZSemNuajFXZklwZkhiakI5SXM4bzE4emptSjh6LzVJ?=
 =?utf-8?B?aTFBc0JRZTRVU1BGMSt1VlRPY043ZEgwcEpyN2ZnUkxzRkZJcWVOeGFCM3cw?=
 =?utf-8?B?cjRZdzJwLy96T3kvNGZZYkpNN09EU2M0K2lSNGpjdWtTNDZpQ1dFRGZOSEFL?=
 =?utf-8?B?UjNUMW1pMkRrdDl5cVBzQW5nVFVMNWxMQ2p4QXliNVZNS1RWTUd0V3Z1OEw2?=
 =?utf-8?B?TXJIWFc4bDM3L2hlMHFoWFlrNTVwTkJCRUJGMVV2NjJVNzJFV3JLY1E3U3Qy?=
 =?utf-8?B?LzJIUmRpUC9CMm91OFp5Y3RTUUJ0K3FGUDZ0cE5yZFVXc0ZOeTl1Nk1EbG0v?=
 =?utf-8?B?Y2NoQmFvenYyQUkwbVVldFhrLzFHOGJVRXJ5YlRzbU1YSzA0em41RnprQkxN?=
 =?utf-8?B?STJIamFZcGJyUzc1aG9Ia1ZyaXpGZndxTWlSazdjRzR6STFMUTVCTUd5RERG?=
 =?utf-8?B?OVZWVWhqTkNkTTVTV2c5SXh2NlRUbnVFeFVpUVVjSUh1VmhKUU9WZ05XVkdW?=
 =?utf-8?B?ZWZQb21WblFpWGJvRW5QVVFiZlpIY0V3TThlNno4VGpKTHBhZFpTenRiWGtK?=
 =?utf-8?B?M3VPcUl6OW1tb2ptM3NYUEtnTktyTVdIbG9SN2Rpc3d4S3pScTMwT2t5WWU2?=
 =?utf-8?B?Ym5pQ3lJRWpld1EzdkRsL2ZBN1o3c0JXblhzc3hoSGFQWFdmOGdKbFNsVjFa?=
 =?utf-8?B?MUIzQStVOVJyamxrdW1EMmIyWjdFL3dhS1ZSSW9YSTRuUExjcStWMGpYTG51?=
 =?utf-8?B?ZVUvNElZc2RNMnE0SVhac1pLdDB4SExsZzl2MldnRWJLempEdXVqNHFKNExR?=
 =?utf-8?B?SkJJTFQwVGYvSVgyNDZxaS9zNzJpUUtQQXl6NFpDRWprTWI3YUVzaGl6SWNx?=
 =?utf-8?B?UnNHeFRNNjU0Vkl2NmhveDJRRS8ybEdrZWpIVVZEV3pMaUkrSkd1aFZjRjdI?=
 =?utf-8?B?dlJKVG5HWkJxazNIanZCbmNHbUJZTkJnTm5ZNWtMU2Y2akJLcElFK2VQMWN2?=
 =?utf-8?B?VHorbFdxUnlCTVNKNkkrZ1p4QlgxSFc5U2RWZnBPVEhhRGtDaWducitzY2Q2?=
 =?utf-8?B?WFp6K0oyczU0SnFJNFdhd3c1YkhDWjJpM2tFWVVheEI0ZUpGYXhGNjFld0ZF?=
 =?utf-8?B?RlJJNCtleEY1MStiaTF6eVUrdUFQV2YrN0lPUFRvNWVVSzdKNENwUTk2cjdL?=
 =?utf-8?Q?nQ2d9QdWOMIokpgo6Y9tAWRBa0pvo8XZP3gjiExF/7oIR?=
X-MS-Exchange-AntiSpam-MessageData-1: rQR51j23UW932Q==
X-OriginatorOrg: amd.com
X-MS-Exchange-CrossTenant-Network-Message-Id: 02ddc887-ce5e-4103-5700-08da2371beb4
X-MS-Exchange-CrossTenant-AuthSource: BN8PR12MB3587.namprd12.prod.outlook.com
X-MS-Exchange-CrossTenant-AuthAs: Internal
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 21 Apr 2022 08:34:26.5831
 (UTC)
X-MS-Exchange-CrossTenant-FromEntityHeader: Hosted
X-MS-Exchange-CrossTenant-Id: 3dd8961f-e488-4e60-8e11-a82d994e183d
X-MS-Exchange-CrossTenant-MailboxType: HOSTED
X-MS-Exchange-CrossTenant-UserPrincipalName: 2OQncNVYniHhQlvyMN1LOjCDptY/Z8Lnew8hhOkk0N5xDzx2WV7r8fuhQyf3RBuS
X-MS-Exchange-Transport-CrossTenantHeadersStamped: DM4PR12MB6135
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

Am 21.04.22 um 10:30 schrieb Thomas Zimmermann:
> (Resending, as some MLs didn't like the size of the origninal mail.)
>
> Hi,
>
> thanks for your submission. Some general comments:
>
>   * some functions are prefixed with dla_, others use nvdla_. It seems 
> arbitrary to me. Please use nvdla_ consistently throughout the source 
> code.
>
>   * For reporting errors, please use drm_err(), drm_warn(), etc. I 
> suggest to rearrange the error messages to not be located in the 
> innermost functions.

If you plan to have multiple instances of the driver loaded at the same 
time, using drm_dev_err(), drm_dev_warn() etc.. would be even better.

BTW: I'm still absolutely not keen to enforcing drm_* log functions. So 
if you prefer to stick with pr_err() and dev_err() we could discuss that 
once more.

Regards,
Christian.

>
>   * Could you please split this patch into smaller pieces? It 
> currently hits size limits of some mailing lists. Maybe add the 
> register constants separately.
>
> Please find more review comments below. It's not a full review, but at 
> least something to start with.
>
> Best regards
> Thomas


From mboxrd@z Thu Jan  1 00:00:00 1970
Return-Path: <linux-kernel-owner@kernel.org>
X-Spam-Checker-Version: SpamAssassin 3.4.0 (2014-02-07) on
	aws-us-west-2-korg-lkml-1.web.codeaurora.org
Received: from vger.kernel.org (vger.kernel.org [23.128.96.18])
	by smtp.lore.kernel.org (Postfix) with ESMTP id 575A1C433F5
	for <linux-kernel@archiver.kernel.org>; Thu, 21 Apr 2022 08:57:40 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1387046AbiDUJA1 (ORCPT
        <rfc822;linux-kernel@archiver.kernel.org>);
        Thu, 21 Apr 2022 05:00:27 -0400
Received: from lindbergh.monkeyblade.net ([23.128.96.19]:38784 "EHLO
        lindbergh.monkeyblade.net" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S240936AbiDUJAR (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Thu, 21 Apr 2022 05:00:17 -0400
Received: from smtp-out1.suse.de (smtp-out1.suse.de [195.135.220.28])
        by lindbergh.monkeyblade.net (Postfix) with ESMTPS id 41C3820F63;
        Thu, 21 Apr 2022 01:57:29 -0700 (PDT)
Received: from imap2.suse-dmz.suse.de (imap2.suse-dmz.suse.de [192.168.254.74])
        (using TLSv1.3 with cipher TLS_AES_256_GCM_SHA384 (256/256 bits)
         key-exchange X25519 server-signature ECDSA (P-521) server-digest SHA512)
        (No client certificate requested)
        by smtp-out1.suse.de (Postfix) with ESMTPS id E0FDD21115;
        Thu, 21 Apr 2022 08:57:27 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=suse.de; s=susede2_rsa;
        t=1650531447; h=from:from:reply-to:date:date:message-id:message-id:to:to:cc:cc:
         mime-version:mime-version:content-type:content-type:
         in-reply-to:in-reply-to:references:references;
        bh=DQMRNyatEv4p5zjM9nOpXv5bZbFECSBRChsvwSeN8TY=;
        b=KC387zdqv9GlxNilFfiJ5WGcPRWh+SqtFGuRBcJCykmwIX4r9SmlkPirVNPmzMK9McxUsQ
        EmBW6J/lKZK8JTwZ5tex9lWdUlynNKSC98oPDWeUukIkR4Phs/17hUdS759/iIsdiqH532
        cMZGMHdAfnIBNsJQ8bN62U5lK//dAPs=
DKIM-Signature: v=1; a=ed25519-sha256; c=relaxed/relaxed; d=suse.de;
        s=susede2_ed25519; t=1650531447;
        h=from:from:reply-to:date:date:message-id:message-id:to:to:cc:cc:
         mime-version:mime-version:content-type:content-type:
         in-reply-to:in-reply-to:references:references;
        bh=DQMRNyatEv4p5zjM9nOpXv5bZbFECSBRChsvwSeN8TY=;
        b=tWqnZ9HCUUWa5pUrAySTs91wkXeoT9bfCM31bQLCVMcFGcPpwLrZPm/9hqiASuf9KONPsh
        oW4EdK5+Bjo+pPDg==
Received: from imap2.suse-dmz.suse.de (imap2.suse-dmz.suse.de [192.168.254.74])
        (using TLSv1.3 with cipher TLS_AES_256_GCM_SHA384 (256/256 bits)
         key-exchange X25519 server-signature ECDSA (P-521) server-digest SHA512)
        (No client certificate requested)
        by imap2.suse-dmz.suse.de (Postfix) with ESMTPS id AC07713446;
        Thu, 21 Apr 2022 08:57:27 +0000 (UTC)
Received: from dovecot-director2.suse.de ([192.168.254.65])
        by imap2.suse-dmz.suse.de with ESMTPSA
        id ycvaKHccYWJLNwAAMHmgww
        (envelope-from <tzimmermann@suse.de>); Thu, 21 Apr 2022 08:57:27 +0000
Message-ID: <408884e9-f462-b0e4-9ddc-88111d13c84d@suse.de>
Date:   Thu, 21 Apr 2022 10:57:27 +0200
MIME-Version: 1.0
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:91.0) Gecko/20100101
 Thunderbird/91.7.0
Subject: Re: [PATCH 2/2] drm/nvdla: Add driver support for NVDLA
Content-Language: en-US
To:     =?UTF-8?Q?Christian_K=c3=b6nig?= <christian.koenig@amd.com>,
        Cai Huoqing <cai.huoqing@linux.dev>
Cc:     Maarten Lankhorst <maarten.lankhorst@linux.intel.com>,
        Maxime Ripard <mripard@kernel.org>,
        David Airlie <airlied@linux.ie>,
        Daniel Vetter <daniel@ffwll.ch>,
        Sumit Semwal <sumit.semwal@linaro.org>,
        linux-kernel@vger.kernel.org, dri-devel@lists.freedesktop.org,
        linux-media@vger.kernel.org, linaro-mm-sig@lists.linaro.org
References: <20220419135908.39606-1-cai.huoqing@linux.dev>
 <20220419135908.39606-3-cai.huoqing@linux.dev>
 <2aeee5a2-b5a5-348e-ccf7-04f49e1119da@suse.de>
 <b34fa2a5-58b4-6270-2d19-2ad591e3e250@amd.com>
From:   Thomas Zimmermann <tzimmermann@suse.de>
In-Reply-To: <b34fa2a5-58b4-6270-2d19-2ad591e3e250@amd.com>
Content-Type: multipart/signed; micalg=pgp-sha256;
 protocol="application/pgp-signature";
 boundary="------------7VdpEByIe2aE28cDYy6CuHaZ"
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

This is an OpenPGP/MIME signed message (RFC 4880 and 3156)
--------------7VdpEByIe2aE28cDYy6CuHaZ
Content-Type: multipart/mixed; boundary="------------XPvcyx2WwfroujAdNHDrBaAE";
 protected-headers="v1"
From: Thomas Zimmermann <tzimmermann@suse.de>
To: =?UTF-8?Q?Christian_K=c3=b6nig?= <christian.koenig@amd.com>,
 Cai Huoqing <cai.huoqing@linux.dev>
Cc: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>,
 Maxime Ripard <mripard@kernel.org>, David Airlie <airlied@linux.ie>,
 Daniel Vetter <daniel@ffwll.ch>, Sumit Semwal <sumit.semwal@linaro.org>,
 linux-kernel@vger.kernel.org, dri-devel@lists.freedesktop.org,
 linux-media@vger.kernel.org, linaro-mm-sig@lists.linaro.org
Message-ID: <408884e9-f462-b0e4-9ddc-88111d13c84d@suse.de>
Subject: Re: [PATCH 2/2] drm/nvdla: Add driver support for NVDLA
References: <20220419135908.39606-1-cai.huoqing@linux.dev>
 <20220419135908.39606-3-cai.huoqing@linux.dev>
 <2aeee5a2-b5a5-348e-ccf7-04f49e1119da@suse.de>
 <b34fa2a5-58b4-6270-2d19-2ad591e3e250@amd.com>
In-Reply-To: <b34fa2a5-58b4-6270-2d19-2ad591e3e250@amd.com>

--------------XPvcyx2WwfroujAdNHDrBaAE
Content-Type: text/plain; charset=UTF-8; format=flowed
Content-Transfer-Encoding: base64

SGkNCg0KQW0gMjEuMDQuMjIgdW0gMTA6MzQgc2NocmllYiBDaHJpc3RpYW4gS8O2bmlnOg0K
PiBBbSAyMS4wNC4yMiB1bSAxMDozMCBzY2hyaWViIFRob21hcyBaaW1tZXJtYW5uOg0KPj4g
KFJlc2VuZGluZywgYXMgc29tZSBNTHMgZGlkbid0IGxpa2UgdGhlIHNpemUgb2YgdGhlIG9y
aWduaW5hbCBtYWlsLikNCj4+DQo+PiBIaSwNCj4+DQo+PiB0aGFua3MgZm9yIHlvdXIgc3Vi
bWlzc2lvbi4gU29tZSBnZW5lcmFsIGNvbW1lbnRzOg0KPj4NCj4+IMKgICogc29tZSBmdW5j
dGlvbnMgYXJlIHByZWZpeGVkIHdpdGggZGxhXywgb3RoZXJzIHVzZSBudmRsYV8uIEl0IHNl
ZW1zIA0KPj4gYXJiaXRyYXJ5IHRvIG1lLiBQbGVhc2UgdXNlIG52ZGxhXyBjb25zaXN0ZW50
bHkgdGhyb3VnaG91dCB0aGUgc291cmNlIA0KPj4gY29kZS4NCj4+DQo+PiDCoCAqIEZvciBy
ZXBvcnRpbmcgZXJyb3JzLCBwbGVhc2UgdXNlIGRybV9lcnIoKSwgZHJtX3dhcm4oKSwgZXRj
LiBJIA0KPj4gc3VnZ2VzdCB0byByZWFycmFuZ2UgdGhlIGVycm9yIG1lc3NhZ2VzIHRvIG5v
dCBiZSBsb2NhdGVkIGluIHRoZSANCj4+IGlubmVybW9zdCBmdW5jdGlvbnMuDQo+IA0KPiBJ
ZiB5b3UgcGxhbiB0byBoYXZlIG11bHRpcGxlIGluc3RhbmNlcyBvZiB0aGUgZHJpdmVyIGxv
YWRlZCBhdCB0aGUgc2FtZSANCj4gdGltZSwgdXNpbmcgZHJtX2Rldl9lcnIoKSwgZHJtX2Rl
dl93YXJuKCkgZXRjLi4gd291bGQgYmUgZXZlbiBiZXR0ZXIuDQoNCkkgdGhpbmsgdGhhdCdz
IHdoYXQgSSBtZWFuLiBUaGFua3MgZm9yIHBvaW50aW5nIHRoaXMgb3V0Lg0KDQpCZXN0IHJl
Z2FyZHMNClRob21hcw0KDQo+IA0KPiBCVFc6IEknbSBzdGlsbCBhYnNvbHV0ZWx5IG5vdCBr
ZWVuIHRvIGVuZm9yY2luZyBkcm1fKiBsb2cgZnVuY3Rpb25zLiBTbyANCj4gaWYgeW91IHBy
ZWZlciB0byBzdGljayB3aXRoIHByX2VycigpIGFuZCBkZXZfZXJyKCkgd2UgY291bGQgZGlz
Y3VzcyB0aGF0IA0KPiBvbmNlIG1vcmUuDQo+IA0KPiBSZWdhcmRzLA0KPiBDaHJpc3RpYW4u
DQo+IA0KPj4NCj4+IMKgICogQ291bGQgeW91IHBsZWFzZSBzcGxpdCB0aGlzIHBhdGNoIGlu
dG8gc21hbGxlciBwaWVjZXM/IEl0IA0KPj4gY3VycmVudGx5IGhpdHMgc2l6ZSBsaW1pdHMg
b2Ygc29tZSBtYWlsaW5nIGxpc3RzLiBNYXliZSBhZGQgdGhlIA0KPj4gcmVnaXN0ZXIgY29u
c3RhbnRzIHNlcGFyYXRlbHkuDQo+Pg0KPj4gUGxlYXNlIGZpbmQgbW9yZSByZXZpZXcgY29t
bWVudHMgYmVsb3cuIEl0J3Mgbm90IGEgZnVsbCByZXZpZXcsIGJ1dCBhdCANCj4+IGxlYXN0
IHNvbWV0aGluZyB0byBzdGFydCB3aXRoLg0KPj4NCj4+IEJlc3QgcmVnYXJkcw0KPj4gVGhv
bWFzDQo+IA0KDQotLSANClRob21hcyBaaW1tZXJtYW5uDQpHcmFwaGljcyBEcml2ZXIgRGV2
ZWxvcGVyDQpTVVNFIFNvZnR3YXJlIFNvbHV0aW9ucyBHZXJtYW55IEdtYkgNCk1heGZlbGRz
dHIuIDUsIDkwNDA5IE7DvHJuYmVyZywgR2VybWFueQ0KKEhSQiAzNjgwOSwgQUcgTsO8cm5i
ZXJnKQ0KR2VzY2jDpGZ0c2bDvGhyZXI6IEl2byBUb3Rldg0K

--------------XPvcyx2WwfroujAdNHDrBaAE--

--------------7VdpEByIe2aE28cDYy6CuHaZ
Content-Type: application/pgp-signature; name="OpenPGP_signature.asc"
Content-Description: OpenPGP digital signature
Content-Disposition: attachment; filename="OpenPGP_signature"

-----BEGIN PGP SIGNATURE-----

wsF5BAABCAAjFiEExndm/fpuMUdwYFFolh/E3EQov+AFAmJhHHcFAwAAAAAACgkQlh/E3EQov+B0
mRAAiRGFh/gAJekCs+VxLcmXZNglTHZJ2AWjklMzvQxZCbI9//kfToODwIAGhE9sO7f+Kf6tJd+G
BovBHr0HEsf1cLz0AhPg/DL+d3TZV2tS+jHBFdIt9Qm5LChTA4ARQRGQ3ESt2wnYkVZgJVip7qLH
xj0kXLNXDnGbKFFZlZm5b0Lc3yj4ZFAKrULw5yH6oHPlmJI+10pQz3NPBr6QSHhC4fmmZF9oSdVc
SIrthIYg3A5fJ4hOI9L6DU0vmSL1pPhM4ptmp0FB7cLQ/nGQu9aCn/xgMZAn1zA3HguQ+lvE+4TO
rTNivNVLLZn/KcpKQDEt0NF62uqBREM6eivNQAb05BIb0WP9ikjPieXYmNBzY7OdpQ+Dx/E05Cbj
OQ/niafHZm01OJWOEhRu2V6ZwbqIE5KegC0sqYnIXnOE6snDYUsvEPtAm4gxGgM0jpEdVHMk1JHW
6TNP89f/lxV4poaF1vDPhELPxQXSGLKhY36vwvSIM/Bk28pA+sqZAhneO2JMqEG+UZClWPN0M3g0
CE4kt5+UPb0iSlePtPnIM+vkwtmNWcGbj4OkCFEtfsgThxnK7+ojrTcfjiProKrId7ftvybD77O4
lCw5z5c2qzwHLpQT+3vjRTvBWWTNC3aYcFS2fyFfDRGiMFbsVRtWUkflyrRtWlruz+g+rbWeAtNt
4xM=
=XF9H
-----END PGP SIGNATURE-----

--------------7VdpEByIe2aE28cDYy6CuHaZ--

From mboxrd@z Thu Jan  1 00:00:00 1970
Return-Path: <linux-kernel-owner@kernel.org>
X-Spam-Checker-Version: SpamAssassin 3.4.0 (2014-02-07) on
	aws-us-west-2-korg-lkml-1.web.codeaurora.org
Received: from vger.kernel.org (vger.kernel.org [23.128.96.18])
	by smtp.lore.kernel.org (Postfix) with ESMTP id EAB98C433F5
	for <linux-kernel@archiver.kernel.org>; Thu, 21 Apr 2022 09:07:08 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1387275AbiDUJJ4 (ORCPT
        <rfc822;linux-kernel@archiver.kernel.org>);
        Thu, 21 Apr 2022 05:09:56 -0400
Received: from lindbergh.monkeyblade.net ([23.128.96.19]:45308 "EHLO
        lindbergh.monkeyblade.net" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1387266AbiDUJJw (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Thu, 21 Apr 2022 05:09:52 -0400
Received: from smtp-out1.suse.de (smtp-out1.suse.de [195.135.220.28])
        by lindbergh.monkeyblade.net (Postfix) with ESMTPS id 34F8A13F80;
        Thu, 21 Apr 2022 02:07:03 -0700 (PDT)
Received: from imap2.suse-dmz.suse.de (imap2.suse-dmz.suse.de [192.168.254.74])
        (using TLSv1.3 with cipher TLS_AES_256_GCM_SHA384 (256/256 bits)
         key-exchange X25519 server-signature ECDSA (P-521) server-digest SHA512)
        (No client certificate requested)
        by smtp-out1.suse.de (Postfix) with ESMTPS id CBC07210DC;
        Thu, 21 Apr 2022 09:07:01 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=suse.de; s=susede2_rsa;
        t=1650532021; h=from:from:reply-to:date:date:message-id:message-id:to:to:cc:cc:
         mime-version:mime-version:content-type:content-type:
         in-reply-to:in-reply-to:references:references;
        bh=OS/VR6GfiJTG1H0XoC9LyXhebkbunusT7zHO9RtN9+I=;
        b=rLh0CVu1uCteslNToqZszYYDKk+ShASvH6rvGUUHGR7Id2C4xyuOcX/Fy/5489qC3I10HZ
        4gqZkWcAXoLgqZx6lG9inHgidJAZZLbLz33QdOJxA8SpzQGh+JCsuTP3Lc9W+2B4CpIkqn
        vxntCvTajZ+AB0BwKheP46IPwCpqU0M=
DKIM-Signature: v=1; a=ed25519-sha256; c=relaxed/relaxed; d=suse.de;
        s=susede2_ed25519; t=1650532021;
        h=from:from:reply-to:date:date:message-id:message-id:to:to:cc:cc:
         mime-version:mime-version:content-type:content-type:
         in-reply-to:in-reply-to:references:references;
        bh=OS/VR6GfiJTG1H0XoC9LyXhebkbunusT7zHO9RtN9+I=;
        b=WSTVJK4hXe0Ok1qNJO3hGZ2dZ6AeFTe85w9kOm21TMs6SJJEQvY1kDqDgvdRrgu6Dqnlxz
        PCcC6LYmCCQfJOBg==
Received: from imap2.suse-dmz.suse.de (imap2.suse-dmz.suse.de [192.168.254.74])
        (using TLSv1.3 with cipher TLS_AES_256_GCM_SHA384 (256/256 bits)
         key-exchange X25519 server-signature ECDSA (P-521) server-digest SHA512)
        (No client certificate requested)
        by imap2.suse-dmz.suse.de (Postfix) with ESMTPS id 93E6113446;
        Thu, 21 Apr 2022 09:07:01 +0000 (UTC)
Received: from dovecot-director2.suse.de ([192.168.254.65])
        by imap2.suse-dmz.suse.de with ESMTPSA
        id JNIfI7UeYWKFOwAAMHmgww
        (envelope-from <tzimmermann@suse.de>); Thu, 21 Apr 2022 09:07:01 +0000
Message-ID: <ab2d7181-b125-e6fc-fc48-427c0d94ade9@suse.de>
Date:   Thu, 21 Apr 2022 11:07:01 +0200
MIME-Version: 1.0
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:91.0) Gecko/20100101
 Thunderbird/91.7.0
Subject: Re: [PATCH 2/2] drm/nvdla: Add driver support for NVDLA
Content-Language: en-US
To:     =?UTF-8?Q?Christian_K=c3=b6nig?= <christian.koenig@amd.com>,
        Cai Huoqing <cai.huoqing@linux.dev>
Cc:     Maarten Lankhorst <maarten.lankhorst@linux.intel.com>,
        Maxime Ripard <mripard@kernel.org>,
        David Airlie <airlied@linux.ie>,
        Daniel Vetter <daniel@ffwll.ch>,
        Sumit Semwal <sumit.semwal@linaro.org>,
        linux-kernel@vger.kernel.org, dri-devel@lists.freedesktop.org,
        linux-media@vger.kernel.org, linaro-mm-sig@lists.linaro.org
References: <20220419135908.39606-1-cai.huoqing@linux.dev>
 <20220419135908.39606-3-cai.huoqing@linux.dev>
 <2aeee5a2-b5a5-348e-ccf7-04f49e1119da@suse.de>
 <b34fa2a5-58b4-6270-2d19-2ad591e3e250@amd.com>
From:   Thomas Zimmermann <tzimmermann@suse.de>
In-Reply-To: <b34fa2a5-58b4-6270-2d19-2ad591e3e250@amd.com>
Content-Type: multipart/signed; micalg=pgp-sha256;
 protocol="application/pgp-signature";
 boundary="------------N2T6yIUS8Dcm4LrvKJgazcgZ"
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

This is an OpenPGP/MIME signed message (RFC 4880 and 3156)
--------------N2T6yIUS8Dcm4LrvKJgazcgZ
Content-Type: multipart/mixed; boundary="------------MW6Apu97NdqqZiSyxMK7yKiV";
 protected-headers="v1"
From: Thomas Zimmermann <tzimmermann@suse.de>
To: =?UTF-8?Q?Christian_K=c3=b6nig?= <christian.koenig@amd.com>,
 Cai Huoqing <cai.huoqing@linux.dev>
Cc: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>,
 Maxime Ripard <mripard@kernel.org>, David Airlie <airlied@linux.ie>,
 Daniel Vetter <daniel@ffwll.ch>, Sumit Semwal <sumit.semwal@linaro.org>,
 linux-kernel@vger.kernel.org, dri-devel@lists.freedesktop.org,
 linux-media@vger.kernel.org, linaro-mm-sig@lists.linaro.org
Message-ID: <ab2d7181-b125-e6fc-fc48-427c0d94ade9@suse.de>
Subject: Re: [PATCH 2/2] drm/nvdla: Add driver support for NVDLA
References: <20220419135908.39606-1-cai.huoqing@linux.dev>
 <20220419135908.39606-3-cai.huoqing@linux.dev>
 <2aeee5a2-b5a5-348e-ccf7-04f49e1119da@suse.de>
 <b34fa2a5-58b4-6270-2d19-2ad591e3e250@amd.com>
In-Reply-To: <b34fa2a5-58b4-6270-2d19-2ad591e3e250@amd.com>

--------------MW6Apu97NdqqZiSyxMK7yKiV
Content-Type: text/plain; charset=UTF-8; format=flowed
Content-Transfer-Encoding: base64

DQoNCkFtIDIxLjA0LjIyIHVtIDEwOjM0IHNjaHJpZWIgQ2hyaXN0aWFuIEvDtm5pZzoNCj4g
QW0gMjEuMDQuMjIgdW0gMTA6MzAgc2NocmllYiBUaG9tYXMgWmltbWVybWFubjoNCj4+IChS
ZXNlbmRpbmcsIGFzIHNvbWUgTUxzIGRpZG4ndCBsaWtlIHRoZSBzaXplIG9mIHRoZSBvcmln
bmluYWwgbWFpbC4pDQo+Pg0KPj4gSGksDQo+Pg0KPj4gdGhhbmtzIGZvciB5b3VyIHN1Ym1p
c3Npb24uIFNvbWUgZ2VuZXJhbCBjb21tZW50czoNCj4+DQo+PiDCoCAqIHNvbWUgZnVuY3Rp
b25zIGFyZSBwcmVmaXhlZCB3aXRoIGRsYV8sIG90aGVycyB1c2UgbnZkbGFfLiBJdCBzZWVt
cyANCj4+IGFyYml0cmFyeSB0byBtZS4gUGxlYXNlIHVzZSBudmRsYV8gY29uc2lzdGVudGx5
IHRocm91Z2hvdXQgdGhlIHNvdXJjZSANCj4+IGNvZGUuDQo+Pg0KPj4gwqAgKiBGb3IgcmVw
b3J0aW5nIGVycm9ycywgcGxlYXNlIHVzZSBkcm1fZXJyKCksIGRybV93YXJuKCksIGV0Yy4g
SSANCj4+IHN1Z2dlc3QgdG8gcmVhcnJhbmdlIHRoZSBlcnJvciBtZXNzYWdlcyB0byBub3Qg
YmUgbG9jYXRlZCBpbiB0aGUgDQo+PiBpbm5lcm1vc3QgZnVuY3Rpb25zLg0KPiANCj4gSWYg
eW91IHBsYW4gdG8gaGF2ZSBtdWx0aXBsZSBpbnN0YW5jZXMgb2YgdGhlIGRyaXZlciBsb2Fk
ZWQgYXQgdGhlIHNhbWUgDQo+IHRpbWUsIHVzaW5nIGRybV9kZXZfZXJyKCksIGRybV9kZXZf
d2FybigpIGV0Yy4uIHdvdWxkIGJlIGV2ZW4gYmV0dGVyLg0KPiANCj4gQlRXOiBJJ20gc3Rp
bGwgYWJzb2x1dGVseSBub3Qga2VlbiB0byBlbmZvcmNpbmcgZHJtXyogbG9nIGZ1bmN0aW9u
cy4gU28gDQo+IGlmIHlvdSBwcmVmZXIgdG8gc3RpY2sgd2l0aCBwcl9lcnIoKSBhbmQgZGV2
X2VycigpIHdlIGNvdWxkIGRpc2N1c3MgdGhhdCANCj4gb25jZSBtb3JlLg0KDQpJIG9mdGVu
IGRvICdkbWVzZyB8IGdyZXAgZHJtJyB0byBxdWlja2x5IGxvb2sgZm9yIGVycm9ycy4gTm90
IHVzaW5nIGRybSANCmxvZ2dpbmcgaGVscGVycyBtYWtlcyB0aGlzIGxlc3MgdXNlZnVsLg0K
DQpCZXN0IHJlZ2FyZHMNClRob21hcw0KDQo+IA0KPiBSZWdhcmRzLA0KPiBDaHJpc3RpYW4u
DQo+IA0KPj4NCj4+IMKgICogQ291bGQgeW91IHBsZWFzZSBzcGxpdCB0aGlzIHBhdGNoIGlu
dG8gc21hbGxlciBwaWVjZXM/IEl0IA0KPj4gY3VycmVudGx5IGhpdHMgc2l6ZSBsaW1pdHMg
b2Ygc29tZSBtYWlsaW5nIGxpc3RzLiBNYXliZSBhZGQgdGhlIA0KPj4gcmVnaXN0ZXIgY29u
c3RhbnRzIHNlcGFyYXRlbHkuDQo+Pg0KPj4gUGxlYXNlIGZpbmQgbW9yZSByZXZpZXcgY29t
bWVudHMgYmVsb3cuIEl0J3Mgbm90IGEgZnVsbCByZXZpZXcsIGJ1dCBhdCANCj4+IGxlYXN0
IHNvbWV0aGluZyB0byBzdGFydCB3aXRoLg0KPj4NCj4+IEJlc3QgcmVnYXJkcw0KPj4gVGhv
bWFzDQo+IA0KDQotLSANClRob21hcyBaaW1tZXJtYW5uDQpHcmFwaGljcyBEcml2ZXIgRGV2
ZWxvcGVyDQpTVVNFIFNvZnR3YXJlIFNvbHV0aW9ucyBHZXJtYW55IEdtYkgNCk1heGZlbGRz
dHIuIDUsIDkwNDA5IE7DvHJuYmVyZywgR2VybWFueQ0KKEhSQiAzNjgwOSwgQUcgTsO8cm5i
ZXJnKQ0KR2VzY2jDpGZ0c2bDvGhyZXI6IEl2byBUb3Rldg0K

--------------MW6Apu97NdqqZiSyxMK7yKiV--

--------------N2T6yIUS8Dcm4LrvKJgazcgZ
Content-Type: application/pgp-signature; name="OpenPGP_signature.asc"
Content-Description: OpenPGP digital signature
Content-Disposition: attachment; filename="OpenPGP_signature"

-----BEGIN PGP SIGNATURE-----

wsF5BAABCAAjFiEExndm/fpuMUdwYFFolh/E3EQov+AFAmJhHrUFAwAAAAAACgkQlh/E3EQov+A9
EA/+M1CDH5IqOym52dk60W3n2FvRPzLvtn0OR5TOR8WauG2VLkPvFiZnPBKSXdGaQOzGiO0sO13/
OZTb+AWD7o3o1ZMHYxUVO4XC//41efhqkB5NIa2nKV9hePmLRLdjeqDHUSPjXVoafD/vrn++gCaV
hbaLk+wmWQb6GFoBde1p8n+vcqg5YNNLRs8gftSWq4dmTUD7XnCfQ2KOuIlmBynJ9RNd9NOrRTBz
O1FxSwSQ38pT1D4dtpytjqm3txc0mS5VbYMZvp9laams/rsDEcCCmk8evCX3nq4HGCFUOHYA35w0
xHws+GTN9ImvKKbApdhyvYYKSmqQRcEfGPHxDQsvn2yyKE/aVjyPeDgz589XbaH9RfvfHL8NumUy
s4Hia6oW1xf+pR8z1NLy1t/Bl0xn5iydAPhm/9VFfD7MqTokiwhZaFriMcpp5l9r5EUGlW2gxpzR
HeSibmwWzbdh4/YB3Xv8MZhVXbURU/YHw+XwHIXyJsMjQnPP43QCvtxtrhrnOSTSYMDFlCPsbFM8
f8B+tQdjTbON9Cev0dA07I5dKIkRWKWuh3N04C+THNTAL8zesnWDq8Sz2zeVJYSO4UXoM+s51CLX
CYwwnFpnYq+ayYetpSIkbDy2gT5yfm6kqJgpXFH+GWCofwWn7f5y9BGXD/dx/DNAq6nHH3QelsPi
kUM=
=jsEe
-----END PGP SIGNATURE-----

--------------N2T6yIUS8Dcm4LrvKJgazcgZ--

From mboxrd@z Thu Jan  1 00:00:00 1970
Return-Path: <linux-kernel-owner@kernel.org>
X-Spam-Checker-Version: SpamAssassin 3.4.0 (2014-02-07) on
	aws-us-west-2-korg-lkml-1.web.codeaurora.org
Received: from vger.kernel.org (vger.kernel.org [23.128.96.18])
	by smtp.lore.kernel.org (Postfix) with ESMTP id AF349C433F5
	for <linux-kernel@archiver.kernel.org>; Thu, 21 Apr 2022 09:13:23 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1387411AbiDUJQK (ORCPT
        <rfc822;linux-kernel@archiver.kernel.org>);
        Thu, 21 Apr 2022 05:16:10 -0400
Received: from lindbergh.monkeyblade.net ([23.128.96.19]:52084 "EHLO
        lindbergh.monkeyblade.net" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1351267AbiDUJQJ (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Thu, 21 Apr 2022 05:16:09 -0400
Received: from smtp-out2.suse.de (smtp-out2.suse.de [195.135.220.29])
        by lindbergh.monkeyblade.net (Postfix) with ESMTPS id 892D7245A8;
        Thu, 21 Apr 2022 02:13:20 -0700 (PDT)
Received: from imap2.suse-dmz.suse.de (imap2.suse-dmz.suse.de [192.168.254.74])
        (using TLSv1.3 with cipher TLS_AES_256_GCM_SHA384 (256/256 bits)
         key-exchange X25519 server-signature ECDSA (P-521) server-digest SHA512)
        (No client certificate requested)
        by smtp-out2.suse.de (Postfix) with ESMTPS id 3C88C1F753;
        Thu, 21 Apr 2022 09:13:19 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=suse.de; s=susede2_rsa;
        t=1650532399; h=from:from:reply-to:date:date:message-id:message-id:to:to:cc:cc:
         mime-version:mime-version:content-type:content-type:
         in-reply-to:in-reply-to:references:references;
        bh=3HAfPGJ8FGW+PIQe19iW2k1VoU2XisqwLSHRwJUfxQw=;
        b=VrHESd1gFH6ddp4+PdS53IFB2GUri2YmtgnBtEh05mWni5l8NVdovhs1WDGRBoQlXwWcoN
        goliUpTYV0GxD/H1cGFftI6YjUUJKWNLAot7Jx1oSx/B8Jx2/EsTnLp++pwkT7QwnHsoXh
        QQaMEtVc7TxHHQgkjL9ncoNrZtHs170=
DKIM-Signature: v=1; a=ed25519-sha256; c=relaxed/relaxed; d=suse.de;
        s=susede2_ed25519; t=1650532399;
        h=from:from:reply-to:date:date:message-id:message-id:to:to:cc:cc:
         mime-version:mime-version:content-type:content-type:
         in-reply-to:in-reply-to:references:references;
        bh=3HAfPGJ8FGW+PIQe19iW2k1VoU2XisqwLSHRwJUfxQw=;
        b=IOAdiIk7idHZEJN8wB5+9GmKgL2SgAvaJuiGmWLNcykw0mjOtqjNYlV6LrnL7HCJt9KUUn
        xriDel3JZkjAbpCA==
Received: from imap2.suse-dmz.suse.de (imap2.suse-dmz.suse.de [192.168.254.74])
        (using TLSv1.3 with cipher TLS_AES_256_GCM_SHA384 (256/256 bits)
         key-exchange X25519 server-signature ECDSA (P-521) server-digest SHA512)
        (No client certificate requested)
        by imap2.suse-dmz.suse.de (Postfix) with ESMTPS id 0290613446;
        Thu, 21 Apr 2022 09:13:18 +0000 (UTC)
Received: from dovecot-director2.suse.de ([192.168.254.65])
        by imap2.suse-dmz.suse.de with ESMTPSA
        id 9cMrOy4gYWIyPgAAMHmgww
        (envelope-from <tzimmermann@suse.de>); Thu, 21 Apr 2022 09:13:18 +0000
Message-ID: <dec16771-03da-2c49-ae53-9cb49d64c761@suse.de>
Date:   Thu, 21 Apr 2022 11:13:18 +0200
MIME-Version: 1.0
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:91.0) Gecko/20100101
 Thunderbird/91.7.0
Subject: Re: [PATCH 2/2] drm/nvdla: Add driver support for NVDLA
Content-Language: en-US
To:     =?UTF-8?Q?Christian_K=c3=b6nig?= <christian.koenig@amd.com>,
        Cai Huoqing <cai.huoqing@linux.dev>
Cc:     Maarten Lankhorst <maarten.lankhorst@linux.intel.com>,
        Maxime Ripard <mripard@kernel.org>,
        David Airlie <airlied@linux.ie>,
        Daniel Vetter <daniel@ffwll.ch>,
        Sumit Semwal <sumit.semwal@linaro.org>,
        linux-kernel@vger.kernel.org, dri-devel@lists.freedesktop.org,
        linux-media@vger.kernel.org, linaro-mm-sig@lists.linaro.org
References: <20220419135908.39606-1-cai.huoqing@linux.dev>
 <20220419135908.39606-3-cai.huoqing@linux.dev>
 <2aeee5a2-b5a5-348e-ccf7-04f49e1119da@suse.de>
 <b34fa2a5-58b4-6270-2d19-2ad591e3e250@amd.com>
From:   Thomas Zimmermann <tzimmermann@suse.de>
In-Reply-To: <b34fa2a5-58b4-6270-2d19-2ad591e3e250@amd.com>
Content-Type: multipart/signed; micalg=pgp-sha256;
 protocol="application/pgp-signature";
 boundary="------------em5EsxMlkAyKG1ppeutUVrsD"
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

This is an OpenPGP/MIME signed message (RFC 4880 and 3156)
--------------em5EsxMlkAyKG1ppeutUVrsD
Content-Type: multipart/mixed; boundary="------------2Q0oj1gwr0coM6wk00Pm9YF0";
 protected-headers="v1"
From: Thomas Zimmermann <tzimmermann@suse.de>
To: =?UTF-8?Q?Christian_K=c3=b6nig?= <christian.koenig@amd.com>,
 Cai Huoqing <cai.huoqing@linux.dev>
Cc: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>,
 Maxime Ripard <mripard@kernel.org>, David Airlie <airlied@linux.ie>,
 Daniel Vetter <daniel@ffwll.ch>, Sumit Semwal <sumit.semwal@linaro.org>,
 linux-kernel@vger.kernel.org, dri-devel@lists.freedesktop.org,
 linux-media@vger.kernel.org, linaro-mm-sig@lists.linaro.org
Message-ID: <dec16771-03da-2c49-ae53-9cb49d64c761@suse.de>
Subject: Re: [PATCH 2/2] drm/nvdla: Add driver support for NVDLA
References: <20220419135908.39606-1-cai.huoqing@linux.dev>
 <20220419135908.39606-3-cai.huoqing@linux.dev>
 <2aeee5a2-b5a5-348e-ccf7-04f49e1119da@suse.de>
 <b34fa2a5-58b4-6270-2d19-2ad591e3e250@amd.com>
In-Reply-To: <b34fa2a5-58b4-6270-2d19-2ad591e3e250@amd.com>

--------------2Q0oj1gwr0coM6wk00Pm9YF0
Content-Type: text/plain; charset=UTF-8; format=flowed
Content-Transfer-Encoding: base64

SGkNCg0KQW0gMjEuMDQuMjIgdW0gMTA6MzQgc2NocmllYiBDaHJpc3RpYW4gS8O2bmlnOg0K
PiBBbSAyMS4wNC4yMiB1bSAxMDozMCBzY2hyaWViIFRob21hcyBaaW1tZXJtYW5uOg0KPj4g
KFJlc2VuZGluZywgYXMgc29tZSBNTHMgZGlkbid0IGxpa2UgdGhlIHNpemUgb2YgdGhlIG9y
aWduaW5hbCBtYWlsLikNCj4+DQo+PiBIaSwNCj4+DQo+PiB0aGFua3MgZm9yIHlvdXIgc3Vi
bWlzc2lvbi4gU29tZSBnZW5lcmFsIGNvbW1lbnRzOg0KPj4NCj4+IMKgICogc29tZSBmdW5j
dGlvbnMgYXJlIHByZWZpeGVkIHdpdGggZGxhXywgb3RoZXJzIHVzZSBudmRsYV8uIEl0IHNl
ZW1zIA0KPj4gYXJiaXRyYXJ5IHRvIG1lLiBQbGVhc2UgdXNlIG52ZGxhXyBjb25zaXN0ZW50
bHkgdGhyb3VnaG91dCB0aGUgc291cmNlIA0KPj4gY29kZS4NCj4+DQo+PiDCoCAqIEZvciBy
ZXBvcnRpbmcgZXJyb3JzLCBwbGVhc2UgdXNlIGRybV9lcnIoKSwgZHJtX3dhcm4oKSwgZXRj
LiBJIA0KPj4gc3VnZ2VzdCB0byByZWFycmFuZ2UgdGhlIGVycm9yIG1lc3NhZ2VzIHRvIG5v
dCBiZSBsb2NhdGVkIGluIHRoZSANCj4+IGlubmVybW9zdCBmdW5jdGlvbnMuDQo+IA0KPiBJ
ZiB5b3UgcGxhbiB0byBoYXZlIG11bHRpcGxlIGluc3RhbmNlcyBvZiB0aGUgZHJpdmVyIGxv
YWRlZCBhdCB0aGUgc2FtZSANCj4gdGltZSwgdXNpbmcgZHJtX2Rldl9lcnIoKSwgZHJtX2Rl
dl93YXJuKCkgZXRjLi4gd291bGQgYmUgZXZlbiBiZXR0ZXIuDQoNCkkgdGhvdWdodCB0aGF0
IHRoZXNlIGZ1bmN0aW9ucyBleGlzdCwgYnV0IGxvb2tpbmcgZm9yIHRoZW0gbm93IEkgY2Fu
bm90IA0KZmluZCB0aGVtLiBUaGUgbWFjcm9zIERSTV9ERVZfRVJSKCksIGV0YyBhcmUgZGVw
cmVjYXRlZC4NCg0KPiANCj4gQlRXOiBJJ20gc3RpbGwgYWJzb2x1dGVseSBub3Qga2VlbiB0
byBlbmZvcmNpbmcgZHJtXyogbG9nIGZ1bmN0aW9ucy4gU28gDQo+IGlmIHlvdSBwcmVmZXIg
dG8gc3RpY2sgd2l0aCBwcl9lcnIoKSBhbmQgZGV2X2VycigpIHdlIGNvdWxkIGRpc2N1c3Mg
dGhhdCANCj4gb25jZSBtb3JlLg0KPiANCj4gUmVnYXJkcywNCj4gQ2hyaXN0aWFuLg0KPiAN
Cj4+DQo+PiDCoCAqIENvdWxkIHlvdSBwbGVhc2Ugc3BsaXQgdGhpcyBwYXRjaCBpbnRvIHNt
YWxsZXIgcGllY2VzPyBJdCANCj4+IGN1cnJlbnRseSBoaXRzIHNpemUgbGltaXRzIG9mIHNv
bWUgbWFpbGluZyBsaXN0cy4gTWF5YmUgYWRkIHRoZSANCj4+IHJlZ2lzdGVyIGNvbnN0YW50
cyBzZXBhcmF0ZWx5Lg0KPj4NCj4+IFBsZWFzZSBmaW5kIG1vcmUgcmV2aWV3IGNvbW1lbnRz
IGJlbG93LiBJdCdzIG5vdCBhIGZ1bGwgcmV2aWV3LCBidXQgYXQgDQo+PiBsZWFzdCBzb21l
dGhpbmcgdG8gc3RhcnQgd2l0aC4NCj4+DQo+PiBCZXN0IHJlZ2FyZHMNCj4+IFRob21hcw0K
PiANCg0KLS0gDQpUaG9tYXMgWmltbWVybWFubg0KR3JhcGhpY3MgRHJpdmVyIERldmVsb3Bl
cg0KU1VTRSBTb2Z0d2FyZSBTb2x1dGlvbnMgR2VybWFueSBHbWJIDQpNYXhmZWxkc3RyLiA1
LCA5MDQwOSBOw7xybmJlcmcsIEdlcm1hbnkNCihIUkIgMzY4MDksIEFHIE7DvHJuYmVyZykN
Ckdlc2Now6RmdHNmw7xocmVyOiBJdm8gVG90ZXYNCg==

--------------2Q0oj1gwr0coM6wk00Pm9YF0--

--------------em5EsxMlkAyKG1ppeutUVrsD
Content-Type: application/pgp-signature; name="OpenPGP_signature.asc"
Content-Description: OpenPGP digital signature
Content-Disposition: attachment; filename="OpenPGP_signature"

-----BEGIN PGP SIGNATURE-----

wsF5BAABCAAjFiEExndm/fpuMUdwYFFolh/E3EQov+AFAmJhIC4FAwAAAAAACgkQlh/E3EQov+Dr
6Q/+PSFd8QFsLqjfmSsjy/518keTcjlAeHgL0M3HiDB7W4rEYKTwcWRqcSSddOgVJXI42aVvnL8z
lCeQoB7FR0e/hOscAuBoOJa3WiKe9bBuB5f+r+OQITe0NGQiQd4twjDrwDtiSJMOQMN83YzkXMBN
Q4uZfUIMU5/0H/wLV+jc6bLhCe3lfnXl/aReisOoRZLNqJwC9xL3uG4V1nKOIsZM+z2VI37lqCs0
rHSO9MWGB7mlk8CklJt+ArRRgaRkXREkHSMbR/mQHEA1MyTC8HlKb1uLJamclMgiYJhysttqSduv
7xPR3aSCe3TFJDImvK5sgAM/8rAlt/CoeumusjA51Ukhaj6MkukQoPRBLT/in7HqiPvKR5tUrjgD
jgvICOSzmocQ8MCnQ4cH6Dofs6wMEwGyxnA5fZ7/ZmtfeN9hHe9nm+CM+x+vIdG8A2SLbFUy1+S2
OtZOVjfKt7znDOciEbzeozU5SyqLCINPKbTJwqwCn/k3vsDF1dVNB21jyU4RCXhpMMnPBjmgw6d1
UyV/2pcnQEFoZy8quF3gvNEDlZZ9xyIL0KyO88ZcNUtJj9U3TOc/N5Lj9vHFtfvttcB6M/+XAyV9
LLU6DUEX2e5SsT8aLsLSaUlE8Ew1DYAQPuqAwGx6foH6tnIqZB8yCdA7CgzEXSi5TLaDIogoaYR0
Fww=
=Xvmf
-----END PGP SIGNATURE-----

--------------em5EsxMlkAyKG1ppeutUVrsD--

From mboxrd@z Thu Jan  1 00:00:00 1970
Return-Path: <linux-kernel-owner@kernel.org>
X-Spam-Checker-Version: SpamAssassin 3.4.0 (2014-02-07) on
	aws-us-west-2-korg-lkml-1.web.codeaurora.org
Received: from vger.kernel.org (vger.kernel.org [23.128.96.18])
	by smtp.lore.kernel.org (Postfix) with ESMTP id C22D8C433EF
	for <linux-kernel@archiver.kernel.org>; Thu, 21 Apr 2022 09:23:38 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1387598AbiDUJ0Z (ORCPT
        <rfc822;linux-kernel@archiver.kernel.org>);
        Thu, 21 Apr 2022 05:26:25 -0400
Received: from lindbergh.monkeyblade.net ([23.128.96.19]:36298 "EHLO
        lindbergh.monkeyblade.net" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1387575AbiDUJ0S (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Thu, 21 Apr 2022 05:26:18 -0400
Received: from NAM12-MW2-obe.outbound.protection.outlook.com (mail-mw2nam12on2055.outbound.protection.outlook.com [40.107.244.55])
        by lindbergh.monkeyblade.net (Postfix) with ESMTPS id C773E27145;
        Thu, 21 Apr 2022 02:23:28 -0700 (PDT)
ARC-Seal: i=1; a=rsa-sha256; s=arcselector9901; d=microsoft.com; cv=none;
 b=LIy/29iP1I6kt48Ltnhyv8Sdgo/APG1+0lXRkxaN1XiUCPDrOe2GVGMsOF3d+QJ3y12pXsDVSWMsevfSlMxHEfYc5A8Eg/V0xxvTELamckDDUE/9YnL2aaAiRUqeTomjP9wc8JUi5ES9RFJzFAaAOMziOQMwp9QXeMxBAgIvoLWKr0Wg4lQOA7GqVN9RAq+X3GBQ2EfJ+IHBnpRcgpNHqzjKzkypKSs/GKI0BOf0UFebiL1E4hgc/prt0eFlVY1lGndVXTtwNCNVtJrOl0wsIv0FuEHIuSnfX2UdT05hRDsX8tsgHoCyoojRgC50tCivN8oTKD4tTdrt+CwAdcMNOw==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=microsoft.com;
 s=arcselector9901;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-AntiSpam-MessageData-ChunkCount:X-MS-Exchange-AntiSpam-MessageData-0:X-MS-Exchange-AntiSpam-MessageData-1;
 bh=ZIjIFsfSafEhhw8zzz1vK3cjZ69gqrJhzuUXgc8y6dU=;
 b=nvWvCyT6hNExHxj0Q4C1rpj47OTcWwv6TWveKrZidUQ4Jfqdb5yB2ffWYy322VwELTepSxG3iky2UlVxtktPe8NMlutHQAjGfMV093zZbxJRr4uath5hQwKh3NJbEti+3Rz1cLY48w9jxkeKOkWNmd1uLW0Q/z1ymA7p6R6XKdCyMaxmzQLAp1MbCFubIZPpvB3Z7ZwTLeADVHXPHqLOCjkvNbarJ+GLZJJstaYSAlJ1IzX6gqYa3SMa3H7FrKIbWOJM0copix1Gec8c7ooLVSXfWGe/3+gkpc4yBFejvS66HRZ8h2CPPEqfjdW1QGfutDN1PJPSd5FxN+jwI9YUtw==
ARC-Authentication-Results: i=1; mx.microsoft.com 1; spf=pass
 smtp.mailfrom=amd.com; dmarc=pass action=none header.from=amd.com; dkim=pass
 header.d=amd.com; arc=none
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=amd.com; s=selector1;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=ZIjIFsfSafEhhw8zzz1vK3cjZ69gqrJhzuUXgc8y6dU=;
 b=VTXDpnkoY3rnrLam8YYfOUw649OZ0A4f+kwecGx7bZCJC65PR2fgkahiUPovjrGDLWEwgyQc1XFl8Rk2CaOhOsOap+L/dSaDqegNkcrnmyGUA/v7+0+98LmES03lp9xUV49gID2hKk+r+PdYlFr024ZfH/rYoW2aMXeSf0z9k6g=
Authentication-Results: dkim=none (message not signed)
 header.d=none;dmarc=none action=none header.from=amd.com;
Received: from BN8PR12MB3587.namprd12.prod.outlook.com (2603:10b6:408:43::13)
 by BL1PR12MB5272.namprd12.prod.outlook.com (2603:10b6:208:319::18) with
 Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.5186.14; Thu, 21 Apr
 2022 09:23:26 +0000
Received: from BN8PR12MB3587.namprd12.prod.outlook.com
 ([fe80::a5fb:7137:5e64:cf8]) by BN8PR12MB3587.namprd12.prod.outlook.com
 ([fe80::a5fb:7137:5e64:cf8%5]) with mapi id 15.20.5164.026; Thu, 21 Apr 2022
 09:23:26 +0000
Message-ID: <476cdf4b-7b65-c056-abf0-110f442e1cc1@amd.com>
Date:   Thu, 21 Apr 2022 11:23:20 +0200
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:91.0) Gecko/20100101
 Thunderbird/91.7.0
Subject: Re: [PATCH 2/2] drm/nvdla: Add driver support for NVDLA
Content-Language: en-US
To:     Thomas Zimmermann <tzimmermann@suse.de>,
        Cai Huoqing <cai.huoqing@linux.dev>
Cc:     Maarten Lankhorst <maarten.lankhorst@linux.intel.com>,
        Maxime Ripard <mripard@kernel.org>,
        David Airlie <airlied@linux.ie>,
        Daniel Vetter <daniel@ffwll.ch>,
        Sumit Semwal <sumit.semwal@linaro.org>,
        linux-kernel@vger.kernel.org, dri-devel@lists.freedesktop.org,
        linux-media@vger.kernel.org, linaro-mm-sig@lists.linaro.org
References: <20220419135908.39606-1-cai.huoqing@linux.dev>
 <20220419135908.39606-3-cai.huoqing@linux.dev>
 <2aeee5a2-b5a5-348e-ccf7-04f49e1119da@suse.de>
 <b34fa2a5-58b4-6270-2d19-2ad591e3e250@amd.com>
 <dec16771-03da-2c49-ae53-9cb49d64c761@suse.de>
From:   =?UTF-8?Q?Christian_K=c3=b6nig?= <christian.koenig@amd.com>
In-Reply-To: <dec16771-03da-2c49-ae53-9cb49d64c761@suse.de>
Content-Type: text/plain; charset=UTF-8; format=flowed
Content-Transfer-Encoding: 8bit
X-ClientProxiedBy: AM6P191CA0108.EURP191.PROD.OUTLOOK.COM
 (2603:10a6:209:8a::49) To BN8PR12MB3587.namprd12.prod.outlook.com
 (2603:10b6:408:43::13)
MIME-Version: 1.0
X-MS-PublicTrafficType: Email
X-MS-Office365-Filtering-Correlation-Id: 0b5646a9-fe70-4030-898a-08da2378970a
X-MS-TrafficTypeDiagnostic: BL1PR12MB5272:EE_
X-Microsoft-Antispam-PRVS: <BL1PR12MB52726D8D59730FE6D152383D83F49@BL1PR12MB5272.namprd12.prod.outlook.com>
X-MS-Exchange-SenderADCheck: 1
X-MS-Exchange-AntiSpam-Relay: 0
X-Microsoft-Antispam: BCL:0;
X-Microsoft-Antispam-Message-Info: VE0TDjrtT+4lOYkij6mlXFPXvsVqngXsW/kPZoePVk0PH2HbTE1Xbs5KJJksvYK+NAbKVc7YGKxM4y+s9V9yoLifbHHvfN0k7aSJ7ntkijd9kpCyNV9VnKQYgrTefrdn8Wo2+aLeDuqsiM/sigh8jjHXht1cg0kGJA0VSF/oOnm5yv8tpnEosxyd+C2Lq6ZefXQun9p9hIv2CA3ykW3IQJnP4Uc0G7nlX8gS5I174AgAf9UGSdJe2eF6psDrN1aFmoMGH14SaAcK8B+x0kETkrKM+fdX/UG/ijNzb4/6h8ZINGKl5znhccHoA5VDJqTfUu8igYXp3tKq+BJ9uI4zW1ZpikEFLO7lNUbgbnIyAAQaVhddbdra49TAgwm/PUlnA+vxjQmlTGSl6AUcBGwryMtL0XWx6jb2x1IOJZqkd/G/LZS6VNQNseqL1Qevwap0JEUJokfF4uwt2YOb/NwJ8pyvnBdRv0ZQpesRErDDNSelmJUNIdA1X1aOFmHXTdnqLIyRE9FqqNO0iMuabN4Yqih12H+lGaDpqH3T7TahkeVovMWEu1CtxnPAZZ9v/tJmOcPHygRxwbEJALfzdq53UsurWJHAvq/O1p+Owm6KbdNjQh485KGHULcIlM4JajIHU8ifAbt2+kxNeDZ25DzIrXrg6YR/R/rCKvjsg1Hq3qT5A7BHeDHhkkWKZVejxaaXxi0WJQPZvrCi5qivgoyFgE2mX91rLlze0sJqdkeTRKg=
X-Forefront-Antispam-Report: CIP:255.255.255.255;CTRY:;LANG:en;SCL:1;SRV:;IPV:NLI;SFV:NSPM;H:BN8PR12MB3587.namprd12.prod.outlook.com;PTR:;CAT:NONE;SFS:(13230001)(4636009)(366004)(2616005)(4326008)(8676002)(186003)(36756003)(2906002)(83380400001)(31686004)(6512007)(6506007)(5660300002)(86362001)(6666004)(8936002)(31696002)(7416002)(6486002)(508600001)(38100700002)(66476007)(66946007)(66556008)(110136005)(54906003)(316002)(45980500001)(43740500002);DIR:OUT;SFP:1101;
X-MS-Exchange-AntiSpam-MessageData-ChunkCount: 2
X-MS-Exchange-AntiSpam-MessageData-0: =?utf-8?B?K2NNNTZiMC9RdWhkdmJkWTNRSXZMZGczNHh6WWxBa0Y5cmcvMXJaVW9qSW01?=
 =?utf-8?B?WXg4SUpmVTRmRmtDcSs3bEQrcjVoMVcycGFpejd3Z01PUGVZbnpZbzA2N2p5?=
 =?utf-8?B?NVo3MVZBN1U2M0NaWWpDQXk0TkdMTGIxYU1lTHJKZ1lMZVZiQ0I2ZTdsbTFF?=
 =?utf-8?B?dlB4TXZBRUY2SEVtajhCdThybnFiNldhbUZ0NHJHZGZUbGhxcE5uYlZLdmdo?=
 =?utf-8?B?Nk5hUmlGeUlTaFdDYVNVbDNjS0tmRTFvQTRDaENpODJzRW1kT3V2VjVGRDFl?=
 =?utf-8?B?RWhmN0h2bE14TGJJOC9venlhZk9mZTB4N3o2Nks4Y2dpWFhDMDRrS0Rzd1FN?=
 =?utf-8?B?cUxqYUtkbTRBSkxOZGU2SzI5NVN4ckorckxpT1FqSmVzMXBKRnY2VWpNdkxM?=
 =?utf-8?B?TDlEY0x1VThCdjR4L0lOdW1Fc0htZzhBNk1tc0hyR3BkcWV4Q2FwMzRUME9n?=
 =?utf-8?B?MVFkM1ZPSVJXSHJwVjgwTlNlRVdXZ0dYQXdDbXBGVC81b3hvSUpCa05ES0pH?=
 =?utf-8?B?eVA2K1Rjb0duODVuT1d1RkF0cU1QMTcwUjAvRXNXdHRITWhnY2tHYkYzN3dn?=
 =?utf-8?B?Q2lnM21zOEM2ZjdCbUhiTXVwOHNrMkY4MklyT01JN0ZNVElBOFMrWEpoTldy?=
 =?utf-8?B?cStmd3ZidGJPQjk4dkI1c0s3eHBZaGs4Ym9KbWNoT1JmY0NlY09Vam5URUFj?=
 =?utf-8?B?UExkc3Y3dTkwTnVHNndGZ2kwRXo0UUtySmlRZXlCQzhWUklMeDNXdURhU3BD?=
 =?utf-8?B?WDNJVUJ4ZlBFNFExc2cyUEtVeTAzcUtHcWpQK292bDhjaEhwSGxSY3lQc0JK?=
 =?utf-8?B?Vy9LSkVERk5TWTFuaHl3aXBpL0NkaGJ3RHBWV1hrczFsRU4vNm1kN3RzR3ZU?=
 =?utf-8?B?b0ZrNHhrSHlqUjQydUYzcjloRlVDcFRsSXRhNDJmSWZBZDM0Wm1lK3dSbFl0?=
 =?utf-8?B?dnFiVzlDWlFXYVpzOUlkR2tGQmdheWc3QWxQTisrdExBNUNralg4Nk1ZVEFF?=
 =?utf-8?B?RXNRV2t4bUxtbGdHbW9WZUsrTGdGamkzOVJZUFJaZ0RIMmVLZmpFdm1FWFBF?=
 =?utf-8?B?NG9MV2VnZzA0TDRvS3hSMU1qVlJpRUNoa0huOCtDcFVPN1FYSkVhWmg4dVQ5?=
 =?utf-8?B?NDcwZUxnK3Y0VnRaTzRaSFl5QVhyVnBSbEVubDIwOGVIWjBiNXpMcjR5Z3Ji?=
 =?utf-8?B?VEVDeVhaYlFRVDlXSHFiWVN6NnplSUM0N1B1c2dRc0k5SkFDZTE2bHFkTm54?=
 =?utf-8?B?QTE2N1RWdm1YRkxDRi94MU1YMjdKZTU1cWtjYVlPWURvby8xVXhMcmdkTjVM?=
 =?utf-8?B?cm44UGN4ckJueXFIUHJ6QzZoUkVXT29wd1dtSmlFdGFQaXhDSXZoU25GdzF3?=
 =?utf-8?B?TFlCSTdHTFFyQUtEMjJLUWc2RmZycHBzVGI4OGV4Y1VPbWM1OGZoaVVLMHJC?=
 =?utf-8?B?UFduVCs5dDFHc3ZJSkFnWFZ3QVErcDFMekdDU2NrZUUwNUQwUzVaVzNLK0Rt?=
 =?utf-8?B?bEFpcGRDRnFDQzh3a0kxMnVFdEU3OEJnK0NudjJmanpOYnUvOG12cVdhR21G?=
 =?utf-8?B?OWFyMThzL2NYZFB6RXFFZVpJS0t3dCtzaXVQQ0JCL1Q2c0tLdnZIYUp4Wndq?=
 =?utf-8?B?TEUzMVR3UWhhTFRpYld4ZW8wME4yK2x2K09UcnJPcFFpK2kydkVqamw2SFFk?=
 =?utf-8?B?U0NhZW8rMHpySy9XR1JFeTNUQVcxbHp3bUJGeldUKzZiSkxLeCtZcjUyTmtW?=
 =?utf-8?B?ZVNEVTJ3MjArZEUzYm9ZaXBnb2xhRFI0TXg2ZGJ6bWMvNGZSOUNyS1J5MWZQ?=
 =?utf-8?B?MVAvNDFJNGJhL2Y5SDhtQTlXd25nQmMrbE9pVUNaaXEvN01HYW5TZ3UxcEcw?=
 =?utf-8?B?YjBqWTZpMWdGMGJ1eFBuV0hJSUFNTFV5OEUvZG44bS9SczVmSFA5aDlVayt1?=
 =?utf-8?B?RGh0SkxxM05FOUFaT2QyQlFablVnQW56K0FUeThLN1BocUNmZ2craC9CR3gy?=
 =?utf-8?B?QzB4eVM2Z0QvV0pZdWd5U0RGdDNiUHlWTE1TVVYxWG5INEMzU2ZPSzk3blVo?=
 =?utf-8?B?SkNNTmRMa0dKVW9jdVZGSHJnYWNDTExMT3RManZSVG8yYTVCZzJZdkhWVSt3?=
 =?utf-8?B?eFhvMVRLZ1FLRk5zcDVXazgydzNxNVVIZFpPc1Mra3Q3cEFSVUlrejBaY2JY?=
 =?utf-8?B?YkpKR2pEMndUblo0S0szSGZTaHUvMFlSU2MrR2RFcmlKQnNYMzh2aUFLY01s?=
 =?utf-8?B?MTlGNnkxWmdaeVpJN3Bac21sU0VjeGZiNldvUEJkOUNxNDZvZ0tOK2JIZElU?=
 =?utf-8?B?SEtBNC80MkdxU1VMNnlkRE5WM0p6T0pXRWx4ODhJYmdmbzZKYkFlaHlZNlBN?=
 =?utf-8?Q?Ewjvn6pIEMNWTPx0C+mF8z5E1eSeIM/AJmeKr+0QBONqn?=
X-MS-Exchange-AntiSpam-MessageData-1: 4EHarfSHLHPawQ==
X-OriginatorOrg: amd.com
X-MS-Exchange-CrossTenant-Network-Message-Id: 0b5646a9-fe70-4030-898a-08da2378970a
X-MS-Exchange-CrossTenant-AuthSource: BN8PR12MB3587.namprd12.prod.outlook.com
X-MS-Exchange-CrossTenant-AuthAs: Internal
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 21 Apr 2022 09:23:26.6100
 (UTC)
X-MS-Exchange-CrossTenant-FromEntityHeader: Hosted
X-MS-Exchange-CrossTenant-Id: 3dd8961f-e488-4e60-8e11-a82d994e183d
X-MS-Exchange-CrossTenant-MailboxType: HOSTED
X-MS-Exchange-CrossTenant-UserPrincipalName: xPyfy1aW5vfQAlw9Ja1VRJ9BdiVPxY5BN6uqMaNjV8HssiYg4jRHdTTb15YKoysN
X-MS-Exchange-Transport-CrossTenantHeadersStamped: BL1PR12MB5272
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

Am 21.04.22 um 11:13 schrieb Thomas Zimmermann:
> Hi
>
> Am 21.04.22 um 10:34 schrieb Christian König:
>> Am 21.04.22 um 10:30 schrieb Thomas Zimmermann:
>>> (Resending, as some MLs didn't like the size of the origninal mail.)
>>>
>>> Hi,
>>>
>>> thanks for your submission. Some general comments:
>>>
>>>   * some functions are prefixed with dla_, others use nvdla_. It 
>>> seems arbitrary to me. Please use nvdla_ consistently throughout the 
>>> source code.
>>>
>>>   * For reporting errors, please use drm_err(), drm_warn(), etc. I 
>>> suggest to rearrange the error messages to not be located in the 
>>> innermost functions.
>>
>> If you plan to have multiple instances of the driver loaded at the 
>> same time, using drm_dev_err(), drm_dev_warn() etc.. would be even 
>> better.
>
> I thought that these functions exist, but looking for them now I 
> cannot find them. The macros DRM_DEV_ERR(), etc are deprecated.

That's what I meant with the comment below.

I wasn't 100%, but dev_err() etc.. seems to now be the preferred form 
since that allows filtering for log messages of a certain device.

Regards,
Christian.

>
>>
>> BTW: I'm still absolutely not keen to enforcing drm_* log functions. 
>> So if you prefer to stick with pr_err() and dev_err() we could 
>> discuss that once more.
>>
>> Regards,
>> Christian.
>>
>>>
>>>   * Could you please split this patch into smaller pieces? It 
>>> currently hits size limits of some mailing lists. Maybe add the 
>>> register constants separately.
>>>
>>> Please find more review comments below. It's not a full review, but 
>>> at least something to start with.
>>>
>>> Best regards
>>> Thomas
>>
>


From mboxrd@z Thu Jan  1 00:00:00 1970
Return-Path: <linux-kernel-owner@kernel.org>
Received: from vger.kernel.org (vger.kernel.org [23.128.96.18])
	by smtp.lore.kernel.org (Postfix) with ESMTP id 6E336C433EF
	for <linux-kernel@archiver.kernel.org>; Wed, 20 Apr 2022 10:27:57 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1350590AbiDTKal (ORCPT
        <rfc822;linux-kernel@archiver.kernel.org>);
        Wed, 20 Apr 2022 06:30:41 -0400
Received: from lindbergh.monkeyblade.net ([23.128.96.19]:57998 "EHLO
        lindbergh.monkeyblade.net" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1351860AbiDTK3b (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Wed, 20 Apr 2022 06:29:31 -0400
Received: from smtp-out1.suse.de (smtp-out1.suse.de [195.135.220.28])
        by lindbergh.monkeyblade.net (Postfix) with ESMTPS id ED7E53F8B3;
        Wed, 20 Apr 2022 03:26:44 -0700 (PDT)
Received: from imap2.suse-dmz.suse.de (imap2.suse-dmz.suse.de [192.168.254.74])
        (using TLSv1.3 with cipher TLS_AES_256_GCM_SHA384 (256/256 bits)
         key-exchange X25519 server-signature ECDSA (P-521) server-digest SHA512)
        (No client certificate requested)
        by smtp-out1.suse.de (Postfix) with ESMTPS id 2A93A21112;
        Wed, 20 Apr 2022 10:26:43 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=suse.de; s=susede2_rsa;
        t=1650450403; h=from:from:reply-to:date:date:message-id:message-id:to:to:cc:cc:
         mime-version:mime-version:content-type:content-type:
         in-reply-to:in-reply-to:references:references;
        bh=voPzyH8iq64qt0E5OhdWMnq6bIfnqmW/Rh3thiu8noA=;
        b=aZOTa+MtE9fUDx0OwpliOT58omPsRdLwpFl6OPJ7rdM8CmlCksYa5shFh20lkGwZzcgfST
        XkikwyMirwwSD1aoaUPX/mYUbKEnzyPlXvHqFRxgQrGxILRqh4cQT2aislVxwIX5UisfBB
        0ZTLnGxIggpXAExOCrXBLb7gHq6Y7hI=
DKIM-Signature: v=1; a=ed25519-sha256; c=relaxed/relaxed; d=suse.de;
        s=susede2_ed25519; t=1650450403;
        h=from:from:reply-to:date:date:message-id:message-id:to:to:cc:cc:
         mime-version:mime-version:content-type:content-type:
         in-reply-to:in-reply-to:references:references;
        bh=voPzyH8iq64qt0E5OhdWMnq6bIfnqmW/Rh3thiu8noA=;
        b=jB1mZV1RL+RXJwaQlwWyqoBa73HJl9AVJmCijs6L2TIvYEvx2fuLLMj7voZMzetcLT3KxF
        p6Sn71PlmqCI5uDg==
Received: from imap2.suse-dmz.suse.de (imap2.suse-dmz.suse.de [192.168.254.74])
        (using TLSv1.3 with cipher TLS_AES_256_GCM_SHA384 (256/256 bits)
         key-exchange X25519 server-signature ECDSA (P-521) server-digest SHA512)
        (No client certificate requested)
        by imap2.suse-dmz.suse.de (Postfix) with ESMTPS id 1BFBD13AD5;
        Wed, 20 Apr 2022 10:26:42 +0000 (UTC)
Received: from dovecot-director2.suse.de ([192.168.254.65])
        by imap2.suse-dmz.suse.de with ESMTPSA
        id xCSfBeLfX2JDKwAAMHmgww
        (envelope-from <tzimmermann@suse.de>); Wed, 20 Apr 2022 10:26:42 +0000
Message-ID: <7fa19996-5830-af3d-ab24-08c76e1d5604@suse.de>
Date:   Wed, 20 Apr 2022 12:26:41 +0200
MIME-Version: 1.0
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:91.0) Gecko/20100101
 Thunderbird/91.7.0
Subject: Re: [PATCH 2/2] drm/nvdla: Add driver support for NVDLA
Content-Language: en-US
To:     Cai Huoqing <cai.huoqing@linux.dev>
Cc:     Maarten Lankhorst <maarten.lankhorst@linux.intel.com>,
        Maxime Ripard <mripard@kernel.org>,
        David Airlie <airlied@linux.ie>,
        Daniel Vetter <daniel@ffwll.ch>,
        Sumit Semwal <sumit.semwal@linaro.org>,
        =?UTF-8?Q?Christian_K=c3=b6nig?= <christian.koenig@amd.com>,
        linux-kernel@vger.kernel.org, dri-devel@lists.freedesktop.org,
        linux-media@vger.kernel.org, linaro-mm-sig@lists.linaro.org
References: <20220419135908.39606-1-cai.huoqing@linux.dev>
 <20220419135908.39606-3-cai.huoqing@linux.dev>
From:   Thomas Zimmermann <tzimmermann@suse.de>
In-Reply-To: <20220419135908.39606-3-cai.huoqing@linux.dev>
Content-Type: multipart/signed; micalg=pgp-sha256;
 protocol="application/pgp-signature";
 boundary="------------m0ARHsd0M9RHtk7nhgLvgANu"
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

This is an OpenPGP/MIME signed message (RFC 4880 and 3156)
--------------m0ARHsd0M9RHtk7nhgLvgANu
Content-Type: multipart/mixed; boundary="------------EjlnCHdLvB1p6d6ci3UZ9Wpr";
 protected-headers="v1"
From: Thomas Zimmermann <tzimmermann@suse.de>
To: Cai Huoqing <cai.huoqing@linux.dev>
Cc: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>,
 Maxime Ripard <mripard@kernel.org>, David Airlie <airlied@linux.ie>,
 Daniel Vetter <daniel@ffwll.ch>, Sumit Semwal <sumit.semwal@linaro.org>,
 =?UTF-8?Q?Christian_K=c3=b6nig?= <christian.koenig@amd.com>,
 linux-kernel@vger.kernel.org, dri-devel@lists.freedesktop.org,
 linux-media@vger.kernel.org, linaro-mm-sig@lists.linaro.org
Message-ID: <7fa19996-5830-af3d-ab24-08c76e1d5604@suse.de>
Subject: Re: [PATCH 2/2] drm/nvdla: Add driver support for NVDLA
References: <20220419135908.39606-1-cai.huoqing@linux.dev>
 <20220419135908.39606-3-cai.huoqing@linux.dev>
In-Reply-To: <20220419135908.39606-3-cai.huoqing@linux.dev>

--------------EjlnCHdLvB1p6d6ci3UZ9Wpr
Content-Type: text/plain; charset=UTF-8; format=flowed
Content-Transfer-Encoding: base64

SGksDQoNCnRoYW5rcyBmb3IgeW91ciBzdWJtaXNzaW9uLiBTb21lIGdlbmVyYWwgY29tbWVu
dHM6DQoNCiAgKiBzb21lIGZ1bmN0aW9ucyBhcmUgcHJlZml4ZWQgd2l0aCBkbGFfLCBvdGhl
cnMgdXNlIG52ZGxhXy4gSXQgc2VlbXMgDQphcmJpdHJhcnkgdG8gbWUuIFBsZWFzZSB1c2Ug
bnZkbGFfIGNvbnNpc3RlbnRseSB0aHJvdWdob3V0IHRoZSBzb3VyY2UgY29kZS4NCg0KICAq
IEZvciByZXBvcnRpbmcgZXJyb3JzLCBwbGVhc2UgdXNlIGRybV9lcnIoKSwgZHJtX3dhcm4o
KSwgZXRjLiBJIA0Kc3VnZ2VzdCB0byByZWFycmFuZ2UgdGhlIGVycm9yIG1lc3NhZ2VzIHRv
IG5vdCBiZSBsb2NhdGVkIGluIHRoZSANCmlubmVybW9zdCBmdW5jdGlvbnMuDQoNClBsZWFz
ZSBmaW5kIG1vcmUgcmV2aWV3IGNvbW1lbnRzIGJlbG93LiBJdCdzIG5vdCBhIGZ1bGwgcmV2
aWV3LCBidXQgYXQgDQpsZWFzdCBzb21ldGhpbmcgdG8gc3RhcnQgd2l0aC4NCg0KQmVzdCBy
ZWdhcmRzDQpUaG9tYXMNCg0KQW0gMTkuMDQuMjIgdW0gMTU6NTkgc2NocmllYiBDYWkgSHVv
cWluZzoNCj4gVGhlIE5WSURJQSBEZWVwIExlYXJuaW5nIEFjY2VsZXJhdG9yIChOVkRMQSkg
aXMgYW4gb3BlbiBzb3VyY2UgSVANCj4gd2hpY2ggaXMgaW50ZWdyYXRlZCBpbnRvIE5WSURJ
QSBKZXRzb24gQUdYIFhhdmllciwNCj4gc28gYWRkIGRyaXZlciBzdXBwb3J0IGZvciB0aGlz
IGFjY2VsZXJhdG9yLg0KPiANCj4gU2lnbmVkLW9mZi1ieTogQ2FpIEh1b3FpbmcgPGNhaS5o
dW9xaW5nQGxpbnV4LmRldj4NCj4gLS0tDQo+ICAgZHJpdmVycy9ncHUvZHJtL0tjb25maWcg
ICAgICAgICAgICAgICAgIHwgICAgMiArDQo+ICAgZHJpdmVycy9ncHUvZHJtL01ha2VmaWxl
ICAgICAgICAgICAgICAgIHwgICAgMSArDQo+ICAgZHJpdmVycy9ncHUvZHJtL252ZGxhL0tj
b25maWcgICAgICAgICAgIHwgICAgOCArDQo+ICAgZHJpdmVycy9ncHUvZHJtL252ZGxhL01h
a2VmaWxlICAgICAgICAgIHwgICAxOSArDQo+ICAgZHJpdmVycy9ncHUvZHJtL252ZGxhL252
ZGxhX2JkbWEuYyAgICAgIHwgIDIwMCArDQo+ICAgZHJpdmVycy9ncHUvZHJtL252ZGxhL252
ZGxhX2NhY2hlLmMgICAgIHwgIDIxNSArDQo+ICAgZHJpdmVycy9ncHUvZHJtL252ZGxhL252
ZGxhX2NkcC5jICAgICAgIHwgIDMwMCArKw0KPiAgIGRyaXZlcnMvZ3B1L2RybS9udmRsYS9u
dmRsYV9jb21tb24uYyAgICB8ICAyOTUgKysNCj4gICBkcml2ZXJzL2dwdS9kcm0vbnZkbGEv
bnZkbGFfY29tbW9uLmggICAgfCAgODM1ICsrKw0KPiAgIGRyaXZlcnMvZ3B1L2RybS9udmRs
YS9udmRsYV9jb252LmMgICAgICB8ICA2ODMgKysrDQo+ICAgZHJpdmVycy9ncHUvZHJtL252
ZGxhL252ZGxhX2RybS5jICAgICAgIHwgIDY5NSArKysNCj4gICBkcml2ZXJzL2dwdS9kcm0v
bnZkbGEvbnZkbGFfZHJtLmggICAgICAgfCAgMTI3ICsNCj4gICBkcml2ZXJzL2dwdS9kcm0v
bnZkbGEvbnZkbGFfZW5naW5lLmMgICAgfCAgMjMzICsNCj4gICBkcml2ZXJzL2dwdS9kcm0v
bnZkbGEvbnZkbGFfZW5naW5lLmggICAgfCAgMjcyICsNCj4gICBkcml2ZXJzL2dwdS9kcm0v
bnZkbGEvbnZkbGFfZ2VtLmMgICAgICAgfCAgMzkzICsrDQo+ICAgZHJpdmVycy9ncHUvZHJt
L252ZGxhL252ZGxhX2lvY3RsLmggICAgIHwgICA5OSArDQo+ICAgZHJpdmVycy9ncHUvZHJt
L252ZGxhL252ZGxhX3BkcC5jICAgICAgIHwgIDQ0NiArKw0KPiAgIGRyaXZlcnMvZ3B1L2Ry
bS9udmRsYS9udmRsYV9yZWcuaCAgICAgICB8IDY0MTEgKysrKysrKysrKysrKysrKysrKysr
KysNCj4gICBkcml2ZXJzL2dwdS9kcm0vbnZkbGEvbnZkbGFfcnViaWsuYyAgICAgfCAgMjE3
ICsNCj4gICBkcml2ZXJzL2dwdS9kcm0vbnZkbGEvbnZkbGFfc2NoZWQuaCAgICAgfCAgIDUy
ICsNCj4gICBkcml2ZXJzL2dwdS9kcm0vbnZkbGEvbnZkbGFfc2NoZWR1bGVyLmMgfCAxMDA1
ICsrKysNCj4gICBkcml2ZXJzL2dwdS9kcm0vbnZkbGEvbnZkbGFfc2RwLmMgICAgICAgfCAg
NzI4ICsrKw0KPiAgIDIyIGZpbGVzIGNoYW5nZWQsIDEzMjM2IGluc2VydGlvbnMoKykNCj4g
ICBjcmVhdGUgbW9kZSAxMDA2NDQgZHJpdmVycy9ncHUvZHJtL252ZGxhL0tjb25maWcNCj4g
ICBjcmVhdGUgbW9kZSAxMDA2NDQgZHJpdmVycy9ncHUvZHJtL252ZGxhL01ha2VmaWxlDQo+
ICAgY3JlYXRlIG1vZGUgMTAwNjQ0IGRyaXZlcnMvZ3B1L2RybS9udmRsYS9udmRsYV9iZG1h
LmMNCj4gICBjcmVhdGUgbW9kZSAxMDA2NDQgZHJpdmVycy9ncHUvZHJtL252ZGxhL252ZGxh
X2NhY2hlLmMNCj4gICBjcmVhdGUgbW9kZSAxMDA2NDQgZHJpdmVycy9ncHUvZHJtL252ZGxh
L252ZGxhX2NkcC5jDQo+ICAgY3JlYXRlIG1vZGUgMTAwNjQ0IGRyaXZlcnMvZ3B1L2RybS9u
dmRsYS9udmRsYV9jb21tb24uYw0KPiAgIGNyZWF0ZSBtb2RlIDEwMDY0NCBkcml2ZXJzL2dw
dS9kcm0vbnZkbGEvbnZkbGFfY29tbW9uLmgNCj4gICBjcmVhdGUgbW9kZSAxMDA2NDQgZHJp
dmVycy9ncHUvZHJtL252ZGxhL252ZGxhX2NvbnYuYw0KPiAgIGNyZWF0ZSBtb2RlIDEwMDY0
NCBkcml2ZXJzL2dwdS9kcm0vbnZkbGEvbnZkbGFfZHJtLmMNCj4gICBjcmVhdGUgbW9kZSAx
MDA2NDQgZHJpdmVycy9ncHUvZHJtL252ZGxhL252ZGxhX2RybS5oDQo+ICAgY3JlYXRlIG1v
ZGUgMTAwNjQ0IGRyaXZlcnMvZ3B1L2RybS9udmRsYS9udmRsYV9lbmdpbmUuYw0KPiAgIGNy
ZWF0ZSBtb2RlIDEwMDY0NCBkcml2ZXJzL2dwdS9kcm0vbnZkbGEvbnZkbGFfZW5naW5lLmgN
Cj4gICBjcmVhdGUgbW9kZSAxMDA2NDQgZHJpdmVycy9ncHUvZHJtL252ZGxhL252ZGxhX2dl
bS5jDQo+ICAgY3JlYXRlIG1vZGUgMTAwNjQ0IGRyaXZlcnMvZ3B1L2RybS9udmRsYS9udmRs
YV9pb2N0bC5oDQo+ICAgY3JlYXRlIG1vZGUgMTAwNjQ0IGRyaXZlcnMvZ3B1L2RybS9udmRs
YS9udmRsYV9wZHAuYw0KPiAgIGNyZWF0ZSBtb2RlIDEwMDY0NCBkcml2ZXJzL2dwdS9kcm0v
bnZkbGEvbnZkbGFfcmVnLmgNCj4gICBjcmVhdGUgbW9kZSAxMDA2NDQgZHJpdmVycy9ncHUv
ZHJtL252ZGxhL252ZGxhX3J1YmlrLmMNCj4gICBjcmVhdGUgbW9kZSAxMDA2NDQgZHJpdmVy
cy9ncHUvZHJtL252ZGxhL252ZGxhX3NjaGVkLmgNCj4gICBjcmVhdGUgbW9kZSAxMDA2NDQg
ZHJpdmVycy9ncHUvZHJtL252ZGxhL252ZGxhX3NjaGVkdWxlci5jDQo+ICAgY3JlYXRlIG1v
ZGUgMTAwNjQ0IGRyaXZlcnMvZ3B1L2RybS9udmRsYS9udmRsYV9zZHAuYw0KPiANCj4gZGlm
ZiAtLWdpdCBhL2RyaXZlcnMvZ3B1L2RybS9LY29uZmlnIGIvZHJpdmVycy9ncHUvZHJtL0tj
b25maWcNCj4gaW5kZXggNTEzM2MzZjAyOGFiLi5hNTVjZmYzNzRhYmQgMTAwNjQ0DQo+IC0t
LSBhL2RyaXZlcnMvZ3B1L2RybS9LY29uZmlnDQo+ICsrKyBiL2RyaXZlcnMvZ3B1L2RybS9L
Y29uZmlnDQo+IEBAIC00MDksNiArNDA5LDggQEAgc291cmNlICJkcml2ZXJzL2dwdS9kcm0v
c29sb21vbi9LY29uZmlnIg0KPiAgIA0KPiAgIHNvdXJjZSAiZHJpdmVycy9ncHUvZHJtL3Nw
cmQvS2NvbmZpZyINCj4gICANCj4gK3NvdXJjZSAiZHJpdmVycy9ncHUvZHJtL252ZGxhL0tj
b25maWciDQo+ICsNCj4gICBjb25maWcgRFJNX0hZUEVSVg0KPiAgIAl0cmlzdGF0ZSAiRFJN
IFN1cHBvcnQgZm9yIEh5cGVyLVYgc3ludGhldGljIHZpZGVvIGRldmljZSINCj4gICAJZGVw
ZW5kcyBvbiBEUk0gJiYgUENJICYmIE1NVSAmJiBIWVBFUlYNCj4gZGlmZiAtLWdpdCBhL2Ry
aXZlcnMvZ3B1L2RybS9NYWtlZmlsZSBiL2RyaXZlcnMvZ3B1L2RybS9NYWtlZmlsZQ0KPiBp
bmRleCBjMmVmNWY5ZmNlNTQuLjhmYTM1MzdmMzA4YSAxMDA2NDQNCj4gLS0tIGEvZHJpdmVy
cy9ncHUvZHJtL01ha2VmaWxlDQo+ICsrKyBiL2RyaXZlcnMvZ3B1L2RybS9NYWtlZmlsZQ0K
PiBAQCAtMTM0LDMgKzEzNCw0IEBAIG9iai15CQkJKz0gZ3VkLw0KPiAgIG9iai0kKENPTkZJ
R19EUk1fSFlQRVJWKSArPSBoeXBlcnYvDQo+ICAgb2JqLXkJCQkrPSBzb2xvbW9uLw0KPiAg
IG9iai0kKENPTkZJR19EUk1fU1BSRCkgKz0gc3ByZC8NCj4gK29iai0kKENPTkZJR19EUk1f
TlZETEEpICs9IG52ZGxhLw0KPiBkaWZmIC0tZ2l0IGEvZHJpdmVycy9ncHUvZHJtL252ZGxh
L0tjb25maWcgYi9kcml2ZXJzL2dwdS9kcm0vbnZkbGEvS2NvbmZpZw0KPiBuZXcgZmlsZSBt
b2RlIDEwMDY0NA0KPiBpbmRleCAwMDAwMDAwMDAwMDAuLjExYzA0ZjVkYTg3Nw0KPiAtLS0g
L2Rldi9udWxsDQo+ICsrKyBiL2RyaXZlcnMvZ3B1L2RybS9udmRsYS9LY29uZmlnDQo+IEBA
IC0wLDAgKzEsOCBAQA0KPiArIyBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogR1BMLTIuMC1v
bmx5DQo+ICtjb25maWcgRFJNX05WRExBDQo+ICsJdHJpc3RhdGUgIk5WRExBIERSTSINCj4g
KwlkZXBlbmRzIG9uIERSTQ0KPiArCXNlbGVjdCBEUk1fR0VNX0NNQV9IRUxQRVINCj4gKwlo
ZWxwDQo+ICsJICBDaG9vc2UgdGhpcyBvcHRpb24gZm9yIG9wZW4tc291cmNlIE5WSURJQSBE
TEEgc3VwcG9ydC4NCj4gKwkgIElmIE0gaXMgc2VsZWN0ZWQgdGhlIG1vZHVsZSB3aWxsIGJl
IGNhbGxlZCBudmRsYS1kcm0uDQo+IGRpZmYgLS1naXQgYS9kcml2ZXJzL2dwdS9kcm0vbnZk
bGEvTWFrZWZpbGUgYi9kcml2ZXJzL2dwdS9kcm0vbnZkbGEvTWFrZWZpbGUNCj4gbmV3IGZp
bGUgbW9kZSAxMDA2NDQNCj4gaW5kZXggMDAwMDAwMDAwMDAwLi43NGYzN2QyNThmOGQNCj4g
LS0tIC9kZXYvbnVsbA0KPiArKysgYi9kcml2ZXJzL2dwdS9kcm0vbnZkbGEvTWFrZWZpbGUN
Cj4gQEAgLTAsMCArMSwxOSBAQA0KPiArDQo+ICsjIFNQRFgtTGljZW5zZS1JZGVudGlmaWVy
OiBHUEwtMi4wDQo+ICtudmRsYS1kcm0teSA6PSBcDQo+ICsJbnZkbGFfZHJtLm8gXA0KPiAr
CW52ZGxhX2dlbS5vIFwNCj4gKwludmRsYV9zY2hlZHVsZXIubyBcDQo+ICsJbnZkbGFfZW5n
aW5lLm8gXA0KPiArCW52ZGxhX2JkbWEubyBcDQo+ICsJbnZkbGFfY29udi5vIFwNCj4gKwlu
dmRsYV9zZHAubyBcDQo+ICsJbnZkbGFfY2RwLm8gXA0KPiArCW52ZGxhX3BkcC5vIFwNCj4g
KwludmRsYV9ydWJpay5vIFwNCj4gKwludmRsYV9jYWNoZS5vIFwNCj4gKwludmRsYV9jb21t
b24ubyBcDQo+ICsJbnZkbGFfZW5naW5lX2RhdGEubyBcDQo+ICsJbnZkbGFfZW5naW5lX2Rl
YnVnLm8gXA0KDQpGaWxlIG5hbWVzIHNob3VsZCBiZSBzb3J0ZWQgYWxwaGFiZXRpY2FsbHkg
aGVyZS4NCg0KPiArDQo+ICtvYmotJChDT05GSUdfRFJNX05WRExBKSArPSBudmRsYS1kcm0u
bw0KPiBkaWZmIC0tZ2l0IGEvZHJpdmVycy9ncHUvZHJtL252ZGxhL252ZGxhX2JkbWEuYyBi
L2RyaXZlcnMvZ3B1L2RybS9udmRsYS9udmRsYV9iZG1hLmMNCj4gbmV3IGZpbGUgbW9kZSAx
MDA2NDQNCj4gaW5kZXggMDAwMDAwMDAwMDAwLi4yMjU2MTNmMjdhY2YNCj4gLS0tIC9kZXYv
bnVsbA0KPiArKysgYi9kcml2ZXJzL2dwdS9kcm0vbnZkbGEvbnZkbGFfYmRtYS5jDQo+IEBA
IC0wLDAgKzEsMjAwIEBADQo+ICsvLyBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQlNELTMt
Q2xhdXNlIE9SIEdQTC0yLjANCj4gKy8qDQo+ICsgKiBDb3B5cmlnaHQgKEMpIDIwMTctMjAx
OCBOVklESUEgQ09SUE9SQVRJT04NCj4gKyAqIENvcHlyaWdodCAoQykgMjAyMiBDYWkgSHVv
cWluZw0KPiArICovDQo+ICsNCj4gKyNpbmNsdWRlICJudmRsYV9jb21tb24uaCINCj4gKyNp
bmNsdWRlICJudmRsYV9kcm0uaCINCj4gKyNpbmNsdWRlICJudmRsYV9yZWcuaCINCj4gKyNp
bmNsdWRlICJudmRsYV9lbmdpbmUuaCINCj4gKw0KPiArc3RhdGljIGNvbnN0IHVpbnQ4X3Qg
bWFwX21lbVtdID0gew0KPiArCUZJRUxEX0VOVU0oQkRNQV9DRkdfQ01EXzAsIFNSQ19SQU1f
VFlQRSwgTUMpLA0KPiArCUZJRUxEX0VOVU0oQkRNQV9DRkdfQ01EXzAsIFNSQ19SQU1fVFlQ
RSwgQ1ZTUkFNKSwNCj4gK307DQo+ICsNCj4gK3ZvaWQNCj4gK2RsYV9iZG1hX3NldF9wcm9k
dWNlcihzdHJ1Y3QgZGxhX2VuZ2luZSAqZW5naW5lLCBpbnQzMl90IGdyb3VwX2lkLCBpbnQz
Ml90IHJkbWFfZ3JvdXBfaWQpDQo+ICt7DQo+ICsJLyoqDQo+ICsJICogVGhlcmUgaXMgbm8g
cHJvZHVjZXIgYml0IGZvciBCRE1BIG9wZXJhdGlvbiwNCj4gKwkgKiBpbnRlcnJ1cHQgcG9p
bnRlciBkZWNpZGVzIHdoaWNoIG91dHN0YW5kaW5nIHJlcXVlc3QNCj4gKwkgKiB0byB1c2Ug
Zm9yIHRoaXMgQkRNQSBvcGVyYXRpb24NCj4gKwkgKi8NCj4gK30NCj4gKw0KPiAraW50DQo+
ICtkbGFfYmRtYV9lbmFibGUoc3RydWN0IGRsYV9lbmdpbmUgKmVuZ2luZSwgc3RydWN0IGRs
YV9wcm9jZXNzb3JfZ3JvdXAgKmdyb3VwKQ0KPiArew0KPiArCWlmIChncm91cC0+c3VyZmFj
ZV9kZXNjLT5iZG1hX3N1cmZhY2UubnVtX3RyYW5zZmVycyA9PSAodWludDE2X3QpMCkgew0K
PiArCQlncm91cC0+ZXZlbnRzIHw9ICgodWludDhfdCkxIDw8IERMQV9FVkVOVF9PUF9DT01Q
TEVURUQpOw0KPiArCQlnb3RvIGV4aXQ7DQo+ICsJfQ0KPiArDQo+ICsJLyoqDQo+ICsJICog
TGF1bmNoIEJETUEgdHJhbnNmZXINCj4gKwkgKi8NCj4gKwlpZiAoZ3JvdXAtPmlkID09IDAp
DQo+ICsJCWJkbWFfcmVnX3dyaXRlKGVuZ2luZSwgQ0ZHX0xBVU5DSDAsIEZJRUxEX0VOVU0o
QkRNQV9DRkdfTEFVTkNIMF8wLA0KPiArCQkJCQkJCUdSUDBfTEFVTkNILCBZRVMpKTsNCj4g
KwllbHNlDQo+ICsJCWJkbWFfcmVnX3dyaXRlKGVuZ2luZSwgQ0ZHX0xBVU5DSDEsIEZJRUxE
X0VOVU0oQkRNQV9DRkdfTEFVTkNIMV8wLA0KPiArCQkJCQkJCUdSUDFfTEFVTkNILCBZRVMp
KTsNCj4gKw0KPiArZXhpdDoNCj4gKwlyZXR1cm4gMDsNCj4gK30NCj4gKw0KPiArdm9pZA0K
PiArZGxhX2JkbWFfcmRtYV9jaGVjayhzdHJ1Y3QgZGxhX3Byb2Nlc3Nvcl9ncm91cCAqZ3Jv
dXApDQo+ICt7DQo+ICsJZ3JvdXAtPmlzX3JkbWFfbmVlZGVkID0gMDsNCj4gK30NCj4gKw0K
PiArLyoqDQo+ICsgKiBQcm9ncmFtIEJETUEgc2xvdCBmb3IgdHJhbnNmZXINCj4gKyAqLw0K
PiArc3RhdGljIGludDMyX3QNCj4gK3Byb2Nlc3Nvcl9iZG1hX3Byb2dyYW1fc2xvdChzdHJ1
Y3QgZGxhX2VuZ2luZSAqZW5naW5lLA0KPiArCQkJCQkJCXN0cnVjdCBkbGFfYmRtYV9zdXJm
YWNlX2Rlc2MgKmJkbWFfc3VyZmFjZSwNCj4gKwkJCQkJCQlzdHJ1Y3QgZGxhX2JkbWFfdHJh
bnNmZXJfZGVzYyAqdHJhbnNmZXIpDQo+ICt7DQo+ICsJaW50MzJfdCByZXQgPSAwOw0KPiAr
CXVpbnQ2NF90IHNvdXJjZV9hZGRyID0gMDsNCj4gKwl1aW50NjRfdCBkZXN0aW5hdGlvbl9h
ZGRyID0gMDsNCj4gKwl1aW50MzJfdCBoaWdoLCBsb3csIHJlZzsNCj4gKwl1aW50OF90ICBi
ZG1hX2ZyZWVfc2xvdHMgPSAwOw0KPiArDQo+ICsJLyogbWFrZSBzdXJlIHRoZXJlJ3JlIGVu
b3VnaCBmcmVlIHNsb3RzICovDQo+ICsJaWYgKGJkbWFfZnJlZV9zbG90cyA8PSAwKSB7DQo+
ICsJCWRvIHsNCj4gKwkJCXJlZyA9IGJkbWFfcmVnX3JlYWQoZW5naW5lLCBTVEFUVVMpOw0K
PiArCQkJcmVnID0gKHJlZyAmIE1BU0soQkRNQV9TVEFUVVNfMCwgRlJFRV9TTE9UKSkgPj4N
Cj4gKwkJCQkJU0hJRlQoQkRNQV9TVEFUVVNfMCwgRlJFRV9TTE9UKTsNCj4gKwkJfSB3aGls
ZSAocmVnID09IDApOw0KPiArCQliZG1hX2ZyZWVfc2xvdHMgPSAodWludDhfdClyZWc7DQo+
ICsJfQ0KPiArDQo+ICsJZGxhX2dldF9kbWFfYWRkcmVzcyhlbmdpbmUtPmRyaXZlcl9jb250
ZXh0LCBlbmdpbmUtPnRhc2stPnRhc2tfZGF0YSwNCj4gKwkJCQkJCXRyYW5zZmVyLT5zb3Vy
Y2VfYWRkcmVzcywNCj4gKwkJCQkJCSh2b2lkICopJnNvdXJjZV9hZGRyLA0KPiArCQkJCQkJ
REVTVElOQVRJT05fRE1BKTsNCj4gKwlkbGFfZ2V0X2RtYV9hZGRyZXNzKGVuZ2luZS0+ZHJp
dmVyX2NvbnRleHQsIGVuZ2luZS0+dGFzay0+dGFza19kYXRhLA0KPiArCQkJCQkJdHJhbnNm
ZXItPmRlc3RpbmF0aW9uX2FkZHJlc3MsDQo+ICsJCQkJCQkodm9pZCAqKSZkZXN0aW5hdGlv
bl9hZGRyLA0KPiArCQkJCQkJREVTVElOQVRJT05fRE1BKTsNCj4gKw0KPiArCUFTU0VSVF9H
T1RPKCh0cmFuc2Zlci0+bGluZV9yZXBlYXQgPD0gODE5MiksDQo+ICsJCQkJcmV0LCAtRUlO
VkFMLCBleGl0KTsNCj4gKwlBU1NFUlRfR09UTygodHJhbnNmZXItPnN1cmZhY2VfcmVwZWF0
IDw9IDgxOTIpLA0KPiArCQkJCXJldCwgLUVJTlZBTCwgZXhpdCk7DQo+ICsJQVNTRVJUX0dP
VE8oKHRyYW5zZmVyLT5saW5lX3NpemUgJSAzMikgPT0gMCwNCj4gKwkJCQlyZXQsIC1FSU5W
QUwsIGV4aXQpOw0KPiArCUFTU0VSVF9HT1RPKHRyYW5zZmVyLT5zb3VyY2VfbGluZSA+PSB0
cmFuc2Zlci0+bGluZV9zaXplLA0KPiArCQkJCXJldCwgLUVJTlZBTCwgZXhpdCk7DQo+ICsJ
QVNTRVJUX0dPVE8odHJhbnNmZXItPmRlc3RpbmF0aW9uX2xpbmUgPj0gdHJhbnNmZXItPmxp
bmVfc2l6ZSwNCj4gKwkJCQlyZXQsIC1FSU5WQUwsIGV4aXQpOw0KPiArCUFTU0VSVF9HT1RP
KHRyYW5zZmVyLT5zb3VyY2Vfc3VyZmFjZSA+PQ0KPiArCQkJKHRyYW5zZmVyLT5zb3VyY2Vf
bGluZSAqIHRyYW5zZmVyLT5saW5lX3JlcGVhdCksDQo+ICsJCQkJcmV0LCAtRUlOVkFMLCBl
eGl0KTsNCj4gKwlBU1NFUlRfR09UTyh0cmFuc2Zlci0+ZGVzdGluYXRpb25fc3VyZmFjZSA+
PQ0KPiArCQkJKHRyYW5zZmVyLT5kZXN0aW5hdGlvbl9saW5lICogdHJhbnNmZXItPmxpbmVf
cmVwZWF0KSwNCj4gKwkJCQlyZXQsIC1FSU5WQUwsIGV4aXQpOw0KPiArDQo+ICsJLyogY29u
ZmlnIHJlZ2lzdGVycyAqLw0KPiArCWhpZ2ggPSB1cHBlcl8zMl9iaXRzKHNvdXJjZV9hZGRy
KTsNCj4gKwlsb3cgPSBsb3dlcl8zMl9iaXRzKHNvdXJjZV9hZGRyKTsNCj4gKwliZG1hX3Jl
Z193cml0ZShlbmdpbmUsIENGR19TUkNfQUREUl9MT1csIGxvdyk7DQo+ICsJYmRtYV9yZWdf
d3JpdGUoZW5naW5lLCBDRkdfU1JDX0FERFJfSElHSCwgaGlnaCk7DQo+ICsJaGlnaCA9IHVw
cGVyXzMyX2JpdHMoZGVzdGluYXRpb25fYWRkcik7DQo+ICsJbG93ID0gbG93ZXJfMzJfYml0
cyhkZXN0aW5hdGlvbl9hZGRyKTsNCj4gKwliZG1hX3JlZ193cml0ZShlbmdpbmUsIENGR19E
U1RfQUREUl9MT1csIGxvdyk7DQo+ICsJYmRtYV9yZWdfd3JpdGUoZW5naW5lLCBDRkdfRFNU
X0FERFJfSElHSCwgaGlnaCk7DQo+ICsJYmRtYV9yZWdfd3JpdGUoZW5naW5lLCBDRkdfTElO
RSwgKHRyYW5zZmVyLT5saW5lX3NpemUgPj4gNSkgLSAxKTsNCj4gKwlyZWcgPSAobWFwX21l
bVtiZG1hX3N1cmZhY2UtPnNvdXJjZV90eXBlXSA8PA0KPiArCQkJCVNISUZUKEJETUFfQ0ZH
X0NNRF8wLCBTUkNfUkFNX1RZUEUpKSB8DQo+ICsJCShtYXBfbWVtW2JkbWFfc3VyZmFjZS0+
ZGVzdGluYXRpb25fdHlwZV0gPDwNCj4gKwkJCQlTSElGVChCRE1BX0NGR19DTURfMCwgRFNU
X1JBTV9UWVBFKSk7DQo+ICsJYmRtYV9yZWdfd3JpdGUoZW5naW5lLCBDRkdfQ01ELCByZWcp
Ow0KPiArCWJkbWFfcmVnX3dyaXRlKGVuZ2luZSwgQ0ZHX0xJTkVfUkVQRUFULCB0cmFuc2Zl
ci0+bGluZV9yZXBlYXQgLSAxKTsNCj4gKwliZG1hX3JlZ193cml0ZShlbmdpbmUsIENGR19T
UkNfTElORSwgdHJhbnNmZXItPnNvdXJjZV9saW5lKTsNCj4gKwliZG1hX3JlZ193cml0ZShl
bmdpbmUsIENGR19EU1RfTElORSwgdHJhbnNmZXItPmRlc3RpbmF0aW9uX2xpbmUpOw0KPiAr
CWJkbWFfcmVnX3dyaXRlKGVuZ2luZSwgQ0ZHX1NVUkZfUkVQRUFULCB0cmFuc2Zlci0+c3Vy
ZmFjZV9yZXBlYXQgLSAxKTsNCj4gKwliZG1hX3JlZ193cml0ZShlbmdpbmUsIENGR19TUkNf
U1VSRiwgdHJhbnNmZXItPnNvdXJjZV9zdXJmYWNlKTsNCj4gKwliZG1hX3JlZ193cml0ZShl
bmdpbmUsIENGR19EU1RfU1VSRiwgdHJhbnNmZXItPmRlc3RpbmF0aW9uX3N1cmZhY2UpOw0K
PiArCWJkbWFfcmVnX3dyaXRlKGVuZ2luZSwgQ0ZHX09QLCBGSUVMRF9FTlVNKEJETUFfQ0ZH
X09QXzAsIEVOLCBFTkFCTEUpKTsNCj4gKw0KPiArZXhpdDoNCj4gKwlyZXR1cm4gcmV0Ow0K
PiArfQ0KPiArDQo+ICtpbnQNCj4gK2RsYV9iZG1hX2lzX3JlYWR5KHN0cnVjdCBkbGFfcHJv
Y2Vzc29yICpwcm9jZXNzb3IsDQo+ICsJCQkJICBzdHJ1Y3QgZGxhX3Byb2Nlc3Nvcl9ncm91
cCAqZ3JvdXApDQo+ICt7DQo+ICsJc3RydWN0IGRsYV9wcm9jZXNzb3JfZ3JvdXAgKm5leHRf
Z3JvdXA7DQo+ICsNCj4gKwluZXh0X2dyb3VwID0gJnByb2Nlc3Nvci0+Z3JvdXBzWyFncm91
cC0+aWRdOw0KPiArDQo+ICsJLyoqDQo+ICsJICogSWYgYW5vdGhlciBncm91cCBpcyBhbHJl
YWR5IHByb2dyYW1tZWQgYnV0IG5vdCBhY3RpdmUgdGhlbg0KPiArCSAqIGRvIG5vdCBwcm9n
cmFtIHRoaXMgb3BlcmF0aW9uIGFzIEJETUEgZG9lcyBub3QgcmVhbGx5DQo+ICsJICogaGF2
ZSBzaGFkb3cgY29waWVzIGZvciBncm91cHMuIEl0IHdpbGwgZW5kIHByb2dyYW1taW5nDQo+
ICsJICogc2FtZSBncm91cC4gV2FpdCBmb3IgYW5vdGhlciBncm91cCB0byBnZXQgZW5hYmxl
ZC4NCj4gKwkgKi8NCj4gKwlpZiAoKHByb2Nlc3Nvci0+Z3JvdXBfc3RhdHVzICYgKDEgPDwg
bmV4dF9ncm91cC0+aWQpKSAmJg0KPiArCQkJCQkJIW5leHRfZ3JvdXAtPmFjdGl2ZSkNCj4g
KwkJcmV0dXJuIDA7DQo+ICsNCj4gKwlyZXR1cm4gMTsNCj4gK30NCj4gKw0KPiArdm9pZA0K
PiArZGxhX2JkbWFfZHVtcF9jb25maWcoc3RydWN0IGRsYV9wcm9jZXNzb3JfZ3JvdXAgKmdy
b3VwKQ0KPiArew0KPiArCXN0cnVjdCBkbGFfYmRtYV9vcF9kZXNjICpiZG1hX29wOw0KPiAr
CXN0cnVjdCBkbGFfYmRtYV9zdXJmYWNlX2Rlc2MgKmJkbWFfc3VyZmFjZTsNCj4gKw0KPiAr
CWJkbWFfc3VyZmFjZSA9ICZncm91cC0+c3VyZmFjZV9kZXNjLT5iZG1hX3N1cmZhY2U7DQo+
ICsJYmRtYV9vcCA9ICZncm91cC0+b3BlcmF0aW9uX2Rlc2MtPmJkbWFfb3A7DQo+ICt9DQo+
ICsNCj4gK2ludA0KPiArZGxhX2JkbWFfcHJvZ3JhbShzdHJ1Y3QgZGxhX2VuZ2luZSAqZW5n
aW5lLCBzdHJ1Y3QgZGxhX3Byb2Nlc3Nvcl9ncm91cCAqZ3JvdXApDQo+ICt7DQo+ICsJaW50
MzJfdCBpOw0KPiArCWludDMyX3QgcmV0ID0gMDsNCj4gKwlzdHJ1Y3QgZGxhX2JkbWFfc3Vy
ZmFjZV9kZXNjICpiZG1hX3N1cmZhY2U7DQo+ICsNCj4gKwlpZiAoIWVuZ2luZS0+Y29uZmln
X2RhdGEtPmJkbWFfZW5hYmxlKSB7DQo+ICsJCXByX2VycigiQkRNQSBpcyBub3Qgc3VwcG9y
dGVkIGZvciB0aGlzIGNvbmZpZ3VyYXRpb25cbiIpOw0KPiArCQlyZXQgPSAtRUlOVkFMOw0K
PiArCQlnb3RvIGV4aXQ7DQo+ICsJfQ0KPiArDQo+ICsJYmRtYV9zdXJmYWNlID0gJmdyb3Vw
LT5zdXJmYWNlX2Rlc2MtPmJkbWFfc3VyZmFjZTsNCj4gKw0KPiArCXByX2RlYnVnKCJOdW0g
b2YgdHJhbnNmZXJzICV1XG4iLCBiZG1hX3N1cmZhY2UtPm51bV90cmFuc2ZlcnMpOw0KPiAr
CWlmIChiZG1hX3N1cmZhY2UtPm51bV90cmFuc2ZlcnMgPT0gKHVpbnQxNl90KTApDQo+ICsJ
CWdvdG8gZXhpdDsNCj4gKw0KPiArCWlmIChiZG1hX3N1cmZhY2UtPm51bV90cmFuc2ZlcnMg
PiBOVU1fTUFYX0JETUFfT1BTKSB7DQo+ICsJCXByX2VycigiSW52YWxpZCBudW1iZXIgb2Yg
dHJhbnNmZXJzXG4iKTsNCj4gKwkJcmV0ID0gLUVJTlZBTDsNCj4gKwkJZ290byBleGl0Ow0K
PiArCX0NCj4gKw0KPiArCWZvciAoaSA9IDA7IGkgPCBiZG1hX3N1cmZhY2UtPm51bV90cmFu
c2ZlcnM7IGkrKykgew0KPiArCQlyZXQgPSBwcm9jZXNzb3JfYmRtYV9wcm9ncmFtX3Nsb3Qo
ZW5naW5lLCBiZG1hX3N1cmZhY2UsDQo+ICsJCQkJCSZiZG1hX3N1cmZhY2UtPnRyYW5zZmVy
c1tpXSk7DQo+ICsJCWlmIChyZXQpDQo+ICsJCQlnb3RvIGV4aXQ7DQo+ICsJfQ0KPiArDQo+
ICsJZGxhX2VuYWJsZV9pbnRyKGVuZ2luZSwgTUFTSyhHTEJfU19JTlRSX01BU0tfMCwgQkRN
QV9ET05FX01BU0sxKSB8DQo+ICsJCQlNQVNLKEdMQl9TX0lOVFJfTUFTS18wLCBCRE1BX0RP
TkVfTUFTSzApKTsNCj4gKw0KPiArZXhpdDoNCj4gKwlyZXR1cm4gcmV0Ow0KPiArfQ0KPiBk
aWZmIC0tZ2l0IGEvZHJpdmVycy9ncHUvZHJtL252ZGxhL252ZGxhX2NhY2hlLmMgYi9kcml2
ZXJzL2dwdS9kcm0vbnZkbGEvbnZkbGFfY2FjaGUuYw0KPiBuZXcgZmlsZSBtb2RlIDEwMDY0
NA0KPiBpbmRleCAwMDAwMDAwMDAwMDAuLmY4YmQ3YjUxNGFhYg0KPiAtLS0gL2Rldi9udWxs
DQo+ICsrKyBiL2RyaXZlcnMvZ3B1L2RybS9udmRsYS9udmRsYV9jYWNoZS5jDQo+IEBAIC0w
LDAgKzEsMjE1IEBADQo+ICsvLyBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQlNELTMtQ2xh
dXNlIE9SIEdQTC0yLjANCj4gKy8qDQo+ICsgKiBDb3B5cmlnaHQgKEMpIDIwMTctMjAxOCBO
VklESUEgQ09SUE9SQVRJT04NCj4gKyAqIENvcHlyaWdodCAoQykgMjAyMiBDYWkgSHVvcWlu
Zw0KPiArICovDQo+ICsNCj4gKyNpbmNsdWRlICJudmRsYV9jb21tb24uaCINCj4gKyNpbmNs
dWRlICJudmRsYV9kcm0uaCINCj4gKyNpbmNsdWRlICJudmRsYV9yZWcuaCINCj4gKyNpbmNs
dWRlICJudmRsYV9lbmdpbmUuaCINCj4gKw0KPiArI2RlZmluZSBETEFfT1BfQ0FDSEVfU0la
RSAoRExBX05VTV9HUk9VUFMgKiAoKERMQV9PUF9OVU0gKyAyKSAqIDIpKQ0KPiArDQo+ICtz
dGF0aWMgc3RydWN0IGRsYV9jb21tb25fb3BfZGVzYyBkZXNjX2NhY2hlW0RMQV9PUF9OVU1d
W0RMQV9PUF9DQUNIRV9TSVpFXTsNCj4gK3N0YXRpYyBpbnQzMl90IGRlc2NfcmVmY291bnRb
RExBX09QX05VTV1bRExBX09QX0NBQ0hFX1NJWkVdOw0KPiArDQo+ICt2b2lkDQo+ICtkbGFf
Z2V0X3JlZmNvdW50KHN0cnVjdCBkbGFfY29tbW9uX29wX2Rlc2MgKm9wX2Rlc2MpDQo+ICt7
DQo+ICsJaW50MzJfdCBpOw0KPiArCXN0cnVjdCBkbGFfY29tbW9uX29wX2Rlc2MgKmRlc2Mg
PSBOVUxMOw0KPiArDQo+ICsJaWYgKG9wX2Rlc2MgPT0gTlVMTCkNCj4gKwkJcmV0dXJuOw0K
PiArDQo+ICsJaWYgKG9wX2Rlc2MtPmluZGV4ID09IC0xKQ0KPiArCQlyZXR1cm47DQo+ICsN
Cj4gKwlkZXNjID0gJmRlc2NfY2FjaGVbb3BfZGVzYy0+b3BfdHlwZV1bMF07DQo+ICsNCj4g
Kwlmb3IgKGkgPSAwOyBpIDwgRExBX09QX0NBQ0hFX1NJWkU7IGkrKywgZGVzYysrKSB7DQo+
ICsJCWlmIChkZXNjLT5pbmRleCA9PSBvcF9kZXNjLT5pbmRleCAmJg0KPiArCQkJCWRlc2Mt
PnJvaV9pbmRleCA9PSBvcF9kZXNjLT5yb2lfaW5kZXgpIHsNCj4gKwkJCWRlc2NfcmVmY291
bnRbb3BfZGVzYy0+b3BfdHlwZV1baV0rKzsNCj4gKwkJCXJldHVybjsNCj4gKwkJfQ0KPiAr
CX0NCj4gK30NCj4gKw0KPiArc3RydWN0IGRsYV9jb21tb25fb3BfZGVzYyAqDQo+ICtkbGFf
Z2V0X29wX2Rlc2Moc3RydWN0IGRsYV9lbmdpbmUgKmVuZ2luZSwNCj4gKwkJCQlzdHJ1Y3Qg
ZGxhX3Rhc2sgKnRhc2ssIGludDE2X3QgaW5kZXgsDQo+ICsJCQkJdWludDhfdCBvcF90eXBl
LCB1aW50OF90IHJvaV9pbmRleCkNCj4gK3sNCj4gKwlpbnQzMl90IGk7DQo+ICsJaW50MzJf
dCByZXQ7DQo+ICsJdWludDY0X3Qgb3BfYmFzZTsNCj4gKwl1aW50NjRfdCBkZXBfZ3JhcGhf
YWRkcjsNCj4gKwlzdHJ1Y3QgZGxhX2NvbW1vbl9vcF9kZXNjICpkZXNjID0gTlVMTDsNCj4g
Kw0KPiArCWlmIChpbmRleCA9PSAtMSkgew0KPiArCQlwcl9kZWJ1Zygibm8gZGVzYyBnZXQg
ZHVlIHRvIGluZGV4PT0tMVxuIik7DQo+ICsJCWdvdG8gZXhpdDsNCj4gKwl9DQo+ICsNCj4g
KwlkZXBfZ3JhcGhfYWRkciA9IChzaXplb2Yoc3RydWN0IGRsYV9jb21tb25fb3BfZGVzYykg
Kg0KPiArCQkJCWVuZ2luZS0+bmV0d29yay0+bnVtX29wZXJhdGlvbnMgKiByb2lfaW5kZXgp
Ow0KPiArDQo+ICsJZGVzYyA9ICZkZXNjX2NhY2hlW29wX3R5cGVdWzBdOw0KPiArDQo+ICsJ
Zm9yIChpID0gMDsgaSA8IERMQV9PUF9DQUNIRV9TSVpFOyBpKyssIGRlc2MrKykgew0KPiAr
CQlpZiAoZGVzYy0+aW5kZXggPT0gaW5kZXggJiYgZGVzYy0+cm9pX2luZGV4ID09IHJvaV9p
bmRleCkgew0KPiArCQkJaWYgKGRlc2MtPm9wX3R5cGUgIT0gb3BfdHlwZSkgew0KPiArCQkJ
CXByX2Vycigib3BfY2FjaGVbb3A9JXVdIGNvbnRhaW5zIGluY29ycmVjdCBlbnRyeSBvZiBv
cFsldV1cbiIsDQo+ICsJCQkJCSAgIG9wX3R5cGUsIGRlc2MtPm9wX3R5cGUpOw0KPiArCQkJ
CWNvbnRpbnVlOw0KPiArCQkJfQ0KPiArCQkJZGVzY19yZWZjb3VudFtvcF90eXBlXVtpXSsr
Ow0KPiArCQkJZ290byBleGl0Ow0KPiArCQl9DQo+ICsJfQ0KPiArDQo+ICsJZGVzYyA9ICZk
ZXNjX2NhY2hlW29wX3R5cGVdWzBdOw0KPiArDQo+ICsJZm9yIChpID0gMDsgaSA8IERMQV9P
UF9DQUNIRV9TSVpFOyBpKyssIGRlc2MrKykgew0KPiArCQlpZiAoZGVzYy0+aW5kZXggPT0g
LTEpIHsNCj4gKwkJCW9wX2Jhc2UgPSBkZXBfZ3JhcGhfYWRkciArDQo+ICsJCQkJCShzaXpl
b2Yoc3RydWN0IGRsYV9jb21tb25fb3BfZGVzYykgKg0KPiArCQkJCQkodWludDY0X3QpaW5k
ZXgpOw0KPiArCQkJcmV0ID0gZGxhX2RhdGFfcmVhZChlbmdpbmUtPmRyaXZlcl9jb250ZXh0
LA0KPiArCQkJCQl0YXNrLT50YXNrX2RhdGEsDQo+ICsJCQkJCXRhc2stPmRlcGVuZGVuY3lf
Z3JhcGhfYWRkciwNCj4gKwkJCQkJKHZvaWQgKikoZGVzYyksDQo+ICsJCQkJCXNpemVvZihz
dHJ1Y3QgZGxhX2NvbW1vbl9vcF9kZXNjKSwNCj4gKwkJCQkJb3BfYmFzZSk7DQo+ICsJCQlp
ZiAocmV0KSB7DQo+ICsJCQkJZGVzYyA9IE5VTEw7DQo+ICsJCQkJZ290byBleGl0Ow0KPiAr
CQkJfQ0KPiArDQo+ICsJCQlpZiAob3BfdHlwZSAhPSBkZXNjLT5vcF90eXBlKSB7DQo+ICsJ
CQkJLyoNCj4gKwkJCQkgKiBvcF90eXBlIG9mIGVudHJ5IHJlYWQgZnJvbSBEUkFNIHNob3Vs
ZCBub3QNCj4gKwkJCQkgKiBtaXNtYXRjaCB3aXRoIGdpdmVuIG9wX3R5cGUuIElmIHRoZXkN
Cj4gKwkJCQkgKiBtaXNtYXRjaGVzLCB0aGVuIHdyb25nIGVudHJ5IGlzIGZldGNoZWQsIHNv
DQo+ICsJCQkJICogcmVwb3J0IHRoaXMgaXNzdWUgYnkgdGhyb3dpbmcgZXJyb3IuDQo+ICsJ
CQkJICovDQo+ICsJCQkJcHJfZXJyKCJGZXRjaGVkIFtvcF90eXBlPSV1XSBmcm9tIERSQU0g
ZG9lc24ndCBtYXRjaCB3aXRoIG9wX3R5cGVbJXVdXG4iLA0KPiArCQkJCQkgICBkZXNjLT5v
cF90eXBlLCBvcF90eXBlKTsNCj4gKwkJCQlkZXNjLT5vcF90eXBlID0gb3BfdHlwZTsNCj4g
KwkJCQlkZXNjLT5pbmRleCA9IC0xOw0KPiArCQkJCWRlc2MtPnJvaV9pbmRleCA9IC0xOw0K
PiArCQkJCWRlc2MgPSBOVUxMOw0KPiArCQkJCWdvdG8gZXhpdDsNCj4gKwkJCX0NCj4gKw0K
PiArCQkJZGVzYy0+aW5kZXggPSBpbmRleDsNCj4gKwkJCWRlc2MtPnJvaV9pbmRleCA9IHJv
aV9pbmRleDsNCj4gKw0KPiArCQkJZGVzY19yZWZjb3VudFtvcF90eXBlXVtpXSsrOw0KPiAr
CQkJZ290byBleGl0Ow0KPiArCQl9DQo+ICsJfQ0KPiArDQo+ICtleGl0Og0KPiArCXJldHVy
biBkZXNjOw0KPiArfQ0KPiArDQo+ICtzdGF0aWMgdm9pZA0KPiArZGxhX2ZyZWVfb3BfZGVz
YyhzdHJ1Y3QgZGxhX2VuZ2luZSAqZW5naW5lLCBzdHJ1Y3QgZGxhX2NvbW1vbl9vcF9kZXNj
ICpvcF9kZXNjKQ0KPiArew0KPiArCXVpbnQ2NF90IG9wX2Jhc2U7DQo+ICsJdWludDY0X3Qg
ZGVwX2dyYXBoX2FkZHI7DQo+ICsJc3RydWN0IGRsYV90YXNrICp0YXNrOw0KPiArDQo+ICsJ
cHJfZGVidWcoIkVudGVyOiAlcyBvcCBkZXNjIGluZGV4ICV1IFJPSSAlZFxuIiwgX19mdW5j
X18sDQo+ICsJCQkJb3BfZGVzYy0+aW5kZXgsIG9wX2Rlc2MtPnJvaV9pbmRleCk7DQo+ICsN
Cj4gKwl0YXNrID0gZW5naW5lLT50YXNrOw0KPiArCWRlcF9ncmFwaF9hZGRyID0gKHNpemVv
ZihzdHJ1Y3QgZGxhX2NvbW1vbl9vcF9kZXNjKSAqDQo+ICsJCQkJZW5naW5lLT5uZXR3b3Jr
LT5udW1fb3BlcmF0aW9ucyAqDQo+ICsJCQkJb3BfZGVzYy0+cm9pX2luZGV4KTsNCj4gKw0K
PiArCWlmIChvcF9kZXNjLT5pbmRleCA9PSAtMSkNCj4gKwkJZ290byBleGl0Ow0KPiArDQo+
ICsJaWYgKG9wX2Rlc2MgPT0gTlVMTCkNCj4gKwkJZ290byBleGl0Ow0KPiArDQo+ICsJLyoq
DQo+ICsJICogVE9ETzoga2VlcGluZyB0aGUgZGVwdGggdmFsdWUgaGFyZGNvZGVkIGFzIDAg
Zm9yIG5vdywNCj4gKwkgKiBuZWVkIHRvIHJlcGxhY2UgaXQgb25jZSBjb3JyZXNwb25kaW5n
IGltcGxlbWVudGF0aW9uIGlzIGRvbmUuDQo+ICsJICovDQo+ICsJb3BfYmFzZSA9IChkZXBf
Z3JhcGhfYWRkciArDQo+ICsJCQkoc2l6ZW9mKHN0cnVjdCBkbGFfY29tbW9uX29wX2Rlc2Mp
ICoNCj4gKwkJCSh1aW50NjRfdClvcF9kZXNjLT5pbmRleCkpOw0KPiArDQo+ICsJLyoqDQo+
ICsJICogRmx1c2ggZGVzY3JpcHRvciB0byBEUkFNDQo+ICsJICovDQo+ICsJZGxhX2RhdGFf
d3JpdGUoZW5naW5lLT5kcml2ZXJfY29udGV4dCwNCj4gKwkJCXRhc2stPnRhc2tfZGF0YSwN
Cj4gKwkJCSh2b2lkICopb3BfZGVzYywNCj4gKwkJCXRhc2stPmRlcGVuZGVuY3lfZ3JhcGhf
YWRkciwNCj4gKwkJCXNpemVvZihzdHJ1Y3QgZGxhX2NvbW1vbl9vcF9kZXNjKSwNCj4gKwkJ
CW9wX2Jhc2UpOw0KPiArDQo+ICsJLyoqDQo+ICsJICogUmVsZWFzZSBpdA0KPiArCSAqLw0K
PiArCW9wX2Rlc2MtPmluZGV4ID0gLTE7DQo+ICsJb3BfZGVzYy0+cm9pX2luZGV4ID0gLTE7
DQo+ICtleGl0Og0KPiArCXJldHVybjsNCj4gK30NCj4gKw0KPiArdm9pZA0KPiArZGxhX3B1
dF9vcF9kZXNjKHN0cnVjdCBkbGFfZW5naW5lICplbmdpbmUsIHN0cnVjdCBkbGFfY29tbW9u
X29wX2Rlc2MgKm9wX2Rlc2MpDQo+ICt7DQo+ICsJaW50MzJfdCBpOw0KPiArCXN0cnVjdCBk
bGFfY29tbW9uX29wX2Rlc2MgKmRlc2M7DQo+ICsNCj4gKwlpZiAob3BfZGVzYyA9PSBOVUxM
KQ0KPiArCQlyZXR1cm47DQo+ICsNCj4gKwlpZiAob3BfZGVzYy0+aW5kZXggPT0gLTEpDQo+
ICsJCXJldHVybjsNCj4gKw0KPiArCWRlc2MgPSAmZGVzY19jYWNoZVtvcF9kZXNjLT5vcF90
eXBlXVswXTsNCj4gKw0KPiArCWZvciAoaSA9IDA7IGkgPCBETEFfT1BfQ0FDSEVfU0laRTsg
aSsrLCBkZXNjKyspIHsNCj4gKwkJaWYgKGRlc2MtPmluZGV4ID09IG9wX2Rlc2MtPmluZGV4
ICYmDQo+ICsJCQkJZGVzYy0+cm9pX2luZGV4ID09IG9wX2Rlc2MtPnJvaV9pbmRleCkgew0K
PiArDQo+ICsJCQlkZXNjX3JlZmNvdW50W29wX2Rlc2MtPm9wX3R5cGVdW2ldLS07DQo+ICsN
Cj4gKwkJCS8qKg0KPiArCQkJICogRnJlZSBkZXNjIGlmIHJlZmNvdW50IGlzIDANCj4gKwkJ
CSAqLw0KPiArCQkJaWYgKGRlc2NfcmVmY291bnRbb3BfZGVzYy0+b3BfdHlwZV1baV0gPT0g
MCkNCj4gKwkJCQlkbGFfZnJlZV9vcF9kZXNjKGVuZ2luZSwgb3BfZGVzYyk7DQo+ICsNCj4g
KwkJCXJldHVybjsNCj4gKwkJfQ0KPiArCX0NCj4gK30NCj4gKw0KPiArdm9pZA0KPiArZGxh
X2luaXRfb3BfY2FjaGUoc3RydWN0IGRsYV9lbmdpbmUgKmVuZ2luZSkNCj4gK3sNCj4gKwlp
bnQzMl90IGksIGo7DQo+ICsJc3RydWN0IGRsYV9jb21tb25fb3BfZGVzYyAqZGVzYyA9ICZk
ZXNjX2NhY2hlWzBdWzBdOw0KPiArDQo+ICsJbWVtc2V0KCh1aW50OF90ICopJmRlc2NfY2Fj
aGVbMF1bMF0sIDAsIHNpemVvZihkZXNjX2NhY2hlKSk7DQo+ICsJbWVtc2V0KCh1aW50OF90
ICopJmRlc2NfcmVmY291bnRbMF1bMF0sIDAsIHNpemVvZihkZXNjX3JlZmNvdW50KSk7DQo+
ICsNCj4gKwlmb3IgKGkgPSAwOyBpIDwgRExBX09QX05VTTsgaSsrKSB7DQo+ICsJCWZvciAo
aiA9IDA7IGogPCBETEFfT1BfQ0FDSEVfU0laRTsgaisrKSB7DQo+ICsJCQlkZXNjLT5pbmRl
eCA9IC0xOw0KPiArCQkJZGVzYy0+cm9pX2luZGV4ID0gLTE7DQo+ICsJCQlkZXNjLT5vcF90
eXBlID0gKHVpbnQ4X3QpaTsNCj4gKwkJCWRlc2MrKzsNCj4gKwkJfQ0KPiArCX0NCj4gK30N
Cj4gZGlmZiAtLWdpdCBhL2RyaXZlcnMvZ3B1L2RybS9udmRsYS9udmRsYV9jZHAuYyBiL2Ry
aXZlcnMvZ3B1L2RybS9udmRsYS9udmRsYV9jZHAuYw0KPiBuZXcgZmlsZSBtb2RlIDEwMDY0
NA0KPiBpbmRleCAwMDAwMDAwMDAwMDAuLjc5MzE2MWU1MGIxYw0KPiAtLS0gL2Rldi9udWxs
DQo+ICsrKyBiL2RyaXZlcnMvZ3B1L2RybS9udmRsYS9udmRsYV9jZHAuYw0KPiBAQCAtMCww
ICsxLDMwMCBAQA0KPiArLy8gU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEJTRC0zLUNsYXVz
ZSBPUiBHUEwtMi4wDQo+ICsvKg0KPiArICogQ29weXJpZ2h0IChDKSAyMDE3LTIwMTggTlZJ
RElBIENPUlBPUkFUSU9ODQo+ICsgKiBDb3B5cmlnaHQgKEMpIDIwMjIgQ2FpIEh1b3FpbmcN
Cj4gKyAqLw0KPiArDQo+ICsjaW5jbHVkZSAibnZkbGFfY29tbW9uLmgiDQo+ICsjaW5jbHVk
ZSAibnZkbGFfZHJtLmgiDQo+ICsjaW5jbHVkZSAibnZkbGFfcmVnLmgiDQo+ICsjaW5jbHVk
ZSAibnZkbGFfZW5naW5lLmgiDQo+ICsNCj4gK3N0YXRpYyBjb25zdCB1aW50OF90IG1hcF9y
YW1bXSA9IHsNCj4gKwlGSUVMRF9FTlVNKENEUF9SRE1BX0RfU1JDX0RNQV9DRkdfMCwgU1JD
X1JBTV9UWVBFLCBNQyksDQo+ICsJRklFTERfRU5VTShDRFBfUkRNQV9EX1NSQ19ETUFfQ0ZH
XzAsIFNSQ19SQU1fVFlQRSwgQ1YpLA0KPiArfTsNCj4gKw0KPiArc3RhdGljIGNvbnN0IHVp
bnQ4X3QgbWFwX3ByZWNpc2lvbltdID0gew0KPiArCUZJRUxEX0VOVU0oQ0RQX1JETUFfRF9E
QVRBX0ZPUk1BVF8wLCBJTlBVVF9EQVRBLCBJTlQ4KSwNCj4gKwlGSUVMRF9FTlVNKENEUF9S
RE1BX0RfREFUQV9GT1JNQVRfMCwgSU5QVVRfREFUQSwgSU5UMTYpLA0KPiArCUZJRUxEX0VO
VU0oQ0RQX1JETUFfRF9EQVRBX0ZPUk1BVF8wLCBJTlBVVF9EQVRBLCBGUDE2KSwNCj4gK307
DQo+ICsNCj4gK3N0YXRpYyBjb25zdCB1aW50OF90IG1hcF9wZXJmX2RtYVtdID0gew0KPiAr
CUZJRUxEX0VOVU0oQ0RQX0RfUEVSRl9FTkFCTEVfMCwgRE1BX0VOLCBESVNBQkxFKSwNCj4g
KwlGSUVMRF9FTlVNKENEUF9EX1BFUkZfRU5BQkxFXzAsIERNQV9FTiwgRU5BQkxFKSwNCj4g
K307DQo+ICsNCj4gK3N0YXRpYyBjb25zdCB1aW50OF90IG1hcF9wZXJmX2x1dFtdID0gew0K
PiArCUZJRUxEX0VOVU0oQ0RQX0RfUEVSRl9FTkFCTEVfMCwgTFVUX0VOLCBESVNBQkxFKSwN
Cj4gKwlGSUVMRF9FTlVNKENEUF9EX1BFUkZfRU5BQkxFXzAsIExVVF9FTiwgRU5BQkxFKSwN
Cj4gK307DQo+ICsNCj4gKw0KPiArc3RhdGljIHVpbnQzMl90DQo+ICttYXBfbG9jYWxfc2l6
ZSh1aW50OF90IGxvY2FsX3NpemUpDQo+ICt7DQo+ICsJcmV0dXJuICgobG9jYWxfc2l6ZS0x
KS8yKS0xOw0KPiArfQ0KPiArDQo+ICt2b2lkDQo+ICtkbGFfY2RwX3NldF9wcm9kdWNlcihz
dHJ1Y3QgZGxhX2VuZ2luZSAqZW5naW5lLCBpbnQzMl90IGdyb3VwX2lkLCBpbnQzMl90IHJk
bWFfZ3JvdXBfaWQpDQo+ICt7DQo+ICsJdWludDMyX3QgcmVnOw0KPiArDQo+ICsJLyoqDQo+
ICsJICogc2V0IHByb2R1Y2VyIHBvaW50ZXIgZm9yIGFsbCBzdWItbW9kdWxlcw0KPiArCSAq
Lw0KPiArCXJlZyA9IGdyb3VwX2lkIDw8IFNISUZUKENEUF9TX1BPSU5URVJfMCwgUFJPRFVD
RVIpOw0KPiArCWNkcF9yZWdfd3JpdGUoZW5naW5lLCBTX1BPSU5URVIsIHJlZyk7DQo+ICsJ
cmVnID0gZ3JvdXBfaWQgPDwgU0hJRlQoQ0RQX1JETUFfU19QT0lOVEVSXzAsIFBST0RVQ0VS
KTsNCj4gKwljZHBfcmRtYV9yZWdfd3JpdGUoZW5naW5lLCBTX1BPSU5URVIsIHJlZyk7DQo+
ICt9DQo+ICsNCj4gK2ludA0KPiArZGxhX2NkcF9lbmFibGUoc3RydWN0IGRsYV9lbmdpbmUg
KmVuZ2luZSwgc3RydWN0IGRsYV9wcm9jZXNzb3JfZ3JvdXAgKmdyb3VwKQ0KPiArew0KPiAr
CXVpbnQzMl90IHJlZzsNCj4gKw0KPiArCS8qKg0KPiArCSAqIGVuYWJsZSBhbGwgc3ViLW1v
ZHVsZXMNCj4gKwkgKi8NCj4gKwlyZWcgPSBGSUVMRF9FTlVNKENEUF9SRE1BX0RfT1BfRU5B
QkxFXzAsIE9QX0VOLCBFTkFCTEUpOw0KPiArCWNkcF9yZG1hX3JlZ193cml0ZShlbmdpbmUs
IERfT1BfRU5BQkxFLCByZWcpOw0KPiArCXJlZyA9IEZJRUxEX0VOVU0oQ0RQX0RfT1BfRU5B
QkxFXzAsIE9QX0VOLCBFTkFCTEUpOw0KPiArCWNkcF9yZWdfd3JpdGUoZW5naW5lLCBEX09Q
X0VOQUJMRSwgcmVnKTsNCj4gKw0KPiArCXJldHVybiAwOw0KPiArfQ0KPiArDQo+ICt2b2lk
DQo+ICtkbGFfY2RwX3JkbWFfY2hlY2soc3RydWN0IGRsYV9wcm9jZXNzb3JfZ3JvdXAgKmdy
b3VwKQ0KPiArew0KPiArCWdyb3VwLT5pc19yZG1hX25lZWRlZCA9IDE7DQo+ICt9DQo+ICsN
Cj4gK3N0YXRpYyBpbnQzMl90DQo+ICtwcm9jZXNzb3JfY2RwX3Byb2dyYW0oc3RydWN0IGRs
YV9lbmdpbmUgKmVuZ2luZSwgc3RydWN0IGRsYV9wcm9jZXNzb3JfZ3JvdXAgKmdyb3VwKQ0K
PiArew0KPiArCWludDMyX3QgcmV0ID0gMDsNCj4gKwl1aW50MzJfdCByZWcsIGhpZ2gsIGxv
dzsNCj4gKwl1aW50NjRfdCBpbnB1dF9hZGRyZXNzID0gMDsNCj4gKwl1aW50NjRfdCBvdXRw
dXRfYWRkcmVzcyA9IDA7DQo+ICsJc3RydWN0IGRsYV9sdXRfcGFyYW0gbHV0Ow0KPiArCXN0
cnVjdCBkbGFfY2RwX29wX2Rlc2MgKmNkcF9vcDsNCj4gKwlzdHJ1Y3QgZGxhX2NkcF9zdXJm
YWNlX2Rlc2MgKmNkcF9zdXJmYWNlOw0KPiArDQo+ICsJY2RwX29wID0gJmdyb3VwLT5vcGVy
YXRpb25fZGVzYy0+Y2RwX29wOw0KPiArCWNkcF9zdXJmYWNlID0gJmdyb3VwLT5zdXJmYWNl
X2Rlc2MtPmNkcF9zdXJmYWNlOw0KPiArDQo+ICsJLyogQXJndW1lbnQgY2hlY2sgKi8NCj4g
KwlpZiAoY2RwX3N1cmZhY2UtPnNyY19kYXRhLnR5cGUgPT0gRExBX01FTV9IVykgew0KPiAr
CQlwcl9lcnIoIkludmFsaWQgc291cmNlIG1lbW9yeSB0eXBlXG4iKTsNCj4gKwkJcmV0ID0g
LUVJTlZBTDsNCj4gKwkJZ290byBleGl0Ow0KPiArCX0NCj4gKwlpZiAoY2RwX3N1cmZhY2Ut
PmRzdF9kYXRhLnR5cGUgPT0gRExBX01FTV9IVykgew0KPiArCQlwcl9lcnIoIkludmFsaWQg
ZGVzdGluYXRpb24gbWVtb3J5IHR5cGVcbiIpOw0KPiArCQlyZXQgPSAtRUlOVkFMOw0KPiAr
CQlnb3RvIGV4aXQ7DQo+ICsJfQ0KPiArDQo+ICsJaWYgKGNkcF9vcC0+aW5fcHJlY2lzaW9u
ICE9IGNkcF9vcC0+b3V0X3ByZWNpc2lvbikgew0KPiArCQlwcl9lcnIoIkNEUCBkb2VzIG5v
dCBzdXBwb3J0IHByZWNpc2lvbiBjb252ZXJzaW9uXG4iKTsNCj4gKwkJcmV0ID0gLUVJTlZB
TDsNCj4gKwkJZ290byBleGl0Ow0KPiArCX0NCj4gKw0KPiArCS8qIGdldCB0aGUgYWRkcmVz
c2VzIGZyb20gdGFzayBkZXNjcmlwdG9yICovDQo+ICsJcmV0ID0gZGxhX3JlYWRfaW5wdXRf
YWRkcmVzcyhlbmdpbmUsICZjZHBfc3VyZmFjZS0+c3JjX2RhdGEsDQo+ICsJCQkJCQkJCSAm
aW5wdXRfYWRkcmVzcywNCj4gKwkJCQkJCQkJIGdyb3VwLT5vcF9kZXNjLT5pbmRleCwNCj4g
KwkJCQkJCQkJIGdyb3VwLT5yb2lfaW5kZXgsIDEpOw0KPiArCWlmIChyZXQpDQo+ICsJCWdv
dG8gZXhpdDsNCj4gKw0KPiArCWRsYV9nZXRfZG1hX2N1YmVfYWRkcmVzcyhlbmdpbmUtPmRy
aXZlcl9jb250ZXh0LA0KPiArCQkJCQkJCSBlbmdpbmUtPnRhc2stPnRhc2tfZGF0YSwNCj4g
KwkJCQkJCQkgY2RwX3N1cmZhY2UtPmRzdF9kYXRhLmFkZHJlc3MsDQo+ICsJCQkJCQkJIGNk
cF9zdXJmYWNlLT5kc3RfZGF0YS5vZmZzZXQsDQo+ICsJCQkJCQkJICh2b2lkICopJm91dHB1
dF9hZGRyZXNzLA0KPiArCQkJCQkJCSBERVNUSU5BVElPTl9ETUEpOw0KPiArCWlmIChjZHBf
b3AtPmx1dF9pbmRleCA+PSAwKSB7DQo+ICsJCWdyb3VwLT5sdXRfaW5kZXggPSBjZHBfb3At
Pmx1dF9pbmRleDsNCj4gKwkJZGxhX3JlYWRfbHV0KGVuZ2luZSwgY2RwX29wLT5sdXRfaW5k
ZXgsICh2b2lkICopJmx1dCk7DQo+ICsJfQ0KPiArDQo+ICsJLyogY29uZmlnIENEUCBSRE1B
IHJlZ2lzdGVycyAqLw0KPiArCXJlZyA9ICgoY2RwX3N1cmZhY2UtPnNyY19kYXRhLndpZHRo
IC0gMSkNCj4gKwkJPDwgU0hJRlQoQ0RQX1JETUFfRF9EQVRBX0NVQkVfV0lEVEhfMCwgV0lE
VEgpKTsNCj4gKwljZHBfcmRtYV9yZWdfd3JpdGUoZW5naW5lLCBEX0RBVEFfQ1VCRV9XSURU
SCwgcmVnKTsNCj4gKw0KPiArCXJlZyA9ICgoY2RwX3N1cmZhY2UtPnNyY19kYXRhLmhlaWdo
dCAtIDEpDQo+ICsJCTw8IFNISUZUKENEUF9SRE1BX0RfREFUQV9DVUJFX0hFSUdIVF8wLCBI
RUlHSFQpKTsNCj4gKwljZHBfcmRtYV9yZWdfd3JpdGUoZW5naW5lLCBEX0RBVEFfQ1VCRV9I
RUlHSFQsIHJlZyk7DQo+ICsNCj4gKwlyZWcgPSAoKGNkcF9zdXJmYWNlLT5zcmNfZGF0YS5j
aGFubmVsIC0gMSkNCj4gKwkJPDwgU0hJRlQoQ0RQX1JETUFfRF9EQVRBX0NVQkVfQ0hBTk5F
TF8wLCBDSEFOTkVMKSk7DQo+ICsJY2RwX3JkbWFfcmVnX3dyaXRlKGVuZ2luZSwgRF9EQVRB
X0NVQkVfQ0hBTk5FTCwgcmVnKTsNCj4gKw0KPiArCWhpZ2ggPSB1cHBlcl8zMl9iaXRzKGlu
cHV0X2FkZHJlc3MpOw0KPiArCWxvdyA9IGxvd2VyXzMyX2JpdHMoaW5wdXRfYWRkcmVzcyk7
DQo+ICsJY2RwX3JkbWFfcmVnX3dyaXRlKGVuZ2luZSwgRF9TUkNfQkFTRV9BRERSX0xPVywg
bG93KTsNCj4gKwljZHBfcmRtYV9yZWdfd3JpdGUoZW5naW5lLCBEX1NSQ19CQVNFX0FERFJf
SElHSCwgaGlnaCk7DQo+ICsNCj4gKwljZHBfcmRtYV9yZWdfd3JpdGUoZW5naW5lLCBEX1NS
Q19MSU5FX1NUUklERSwNCj4gKwkJCWNkcF9zdXJmYWNlLT5zcmNfZGF0YS5saW5lX3N0cmlk
ZSk7DQo+ICsJY2RwX3JkbWFfcmVnX3dyaXRlKGVuZ2luZSwgRF9TUkNfU1VSRkFDRV9TVFJJ
REUsDQo+ICsJCQljZHBfc3VyZmFjZS0+c3JjX2RhdGEuc3VyZl9zdHJpZGUpOw0KPiArDQo+
ICsJcmVnID0gKG1hcF9yYW1bY2RwX3N1cmZhY2UtPnNyY19kYXRhLnR5cGVdDQo+ICsJCTw8
IFNISUZUKENEUF9SRE1BX0RfU1JDX0RNQV9DRkdfMCwgU1JDX1JBTV9UWVBFKSk7DQo+ICsJ
Y2RwX3JkbWFfcmVnX3dyaXRlKGVuZ2luZSwgRF9TUkNfRE1BX0NGRywgcmVnKTsNCj4gKw0K
PiArCXJlZyA9IChtYXBfcHJlY2lzaW9uW2NkcF9vcC0+aW5fcHJlY2lzaW9uXQ0KPiArCQk8
PCBTSElGVChDRFBfUkRNQV9EX0RBVEFfRk9STUFUXzAsIElOUFVUX0RBVEEpKTsNCj4gKwlj
ZHBfcmRtYV9yZWdfd3JpdGUoZW5naW5lLCBEX0RBVEFfRk9STUFULCByZWcpOw0KPiArDQo+
ICsJLyogY29uZmlnIENEUCAqLw0KPiArCWlmIChjZHBfb3AtPmx1dF9pbmRleCA+PSAwKQ0K
PiArCQl1cGRhdGVfbHV0KGVuZ2luZSwgQ0RQX1NfTFVUX0FDQ0VTU19DRkdfMCwgJmx1dCwg
Y2RwX29wLT5pbl9wcmVjaXNpb24pOw0KPiArDQo+ICsJaGlnaCA9IHVwcGVyXzMyX2JpdHMo
b3V0cHV0X2FkZHJlc3MpOw0KPiArCWxvdyA9IGxvd2VyXzMyX2JpdHMob3V0cHV0X2FkZHJl
c3MpOw0KPiArCWNkcF9yZWdfd3JpdGUoZW5naW5lLCBEX0RTVF9CQVNFX0FERFJfTE9XLCBs
b3cpOw0KPiArCWNkcF9yZWdfd3JpdGUoZW5naW5lLCBEX0RTVF9CQVNFX0FERFJfSElHSCwg
aGlnaCk7DQo+ICsNCj4gKwljZHBfcmVnX3dyaXRlKGVuZ2luZSwgRF9EU1RfTElORV9TVFJJ
REUsIGNkcF9zdXJmYWNlLT5kc3RfZGF0YS5saW5lX3N0cmlkZSk7DQo+ICsJY2RwX3JlZ193
cml0ZShlbmdpbmUsIERfRFNUX1NVUkZBQ0VfU1RSSURFLCBjZHBfc3VyZmFjZS0+ZHN0X2Rh
dGEuc3VyZl9zdHJpZGUpOw0KPiArDQo+ICsJcmVnID0gKG1hcF9yYW1bY2RwX3N1cmZhY2Ut
PmRzdF9kYXRhLnR5cGVdDQo+ICsJCTw8IFNISUZUKENEUF9EX0RTVF9ETUFfQ0ZHXzAsIERT
VF9SQU1fVFlQRSkpOw0KPiArCWNkcF9yZWdfd3JpdGUoZW5naW5lLCBEX0RTVF9ETUFfQ0ZH
LCByZWcpOw0KPiArDQo+ICsJcmVnID0gKG1hcF9wcmVjaXNpb25bY2RwX29wLT5pbl9wcmVj
aXNpb25dDQo+ICsJCTw8IFNISUZUKENEUF9EX0RBVEFfRk9STUFUXzAsIElOUFVUX0RBVEFf
VFlQRSkpOw0KPiArCWNkcF9yZWdfd3JpdGUoZW5naW5lLCBEX0RBVEFfRk9STUFULCByZWcp
Ow0KPiArDQo+ICsJcmVnID0gKG1hcF9sb2NhbF9zaXplKGNkcF9vcC0+bG9jYWxfc2l6ZSkN
Cj4gKwkJPDwgU0hJRlQoQ0RQX0RfTFJOX0NGR18wLCBOT1JNQUxaX0xFTikpOw0KPiArCWNk
cF9yZWdfd3JpdGUoZW5naW5lLCBEX0xSTl9DRkcsIHJlZyk7DQo+ICsNCj4gKwlyZWcgPSAo
Y2RwX29wLT5pbl9jdnQub2Zmc2V0DQo+ICsJCTw8IFNISUZUKENEUF9EX0RBVElOX09GRlNF
VF8wLCBEQVRJTl9PRkZTRVQpKTsNCj4gKwljZHBfcmVnX3dyaXRlKGVuZ2luZSwgRF9EQVRJ
Tl9PRkZTRVQsIHJlZyk7DQo+ICsNCj4gKwlyZWcgPSAoY2RwX29wLT5pbl9jdnQuc2NhbGUN
Cj4gKwkJPDwgU0hJRlQoQ0RQX0RfREFUSU5fU0NBTEVfMCwgREFUSU5fU0NBTEUpKTsNCj4g
KwljZHBfcmVnX3dyaXRlKGVuZ2luZSwgRF9EQVRJTl9TQ0FMRSwgcmVnKTsNCj4gKw0KPiAr
CXJlZyA9IChjZHBfb3AtPmluX2N2dC50cnVuY2F0ZQ0KPiArCQk8PCBTSElGVChDRFBfRF9E
QVRJTl9TSElGVEVSXzAsIERBVElOX1NISUZURVIpKTsNCj4gKwljZHBfcmVnX3dyaXRlKGVu
Z2luZSwgRF9EQVRJTl9TSElGVEVSLCByZWcpOw0KPiArDQo+ICsJcmVnID0gKGNkcF9vcC0+
b3V0X2N2dC5vZmZzZXQNCj4gKwkJPDwgU0hJRlQoQ0RQX0RfREFUT1VUX09GRlNFVF8wLCBE
QVRPVVRfT0ZGU0VUKSk7DQo+ICsJY2RwX3JlZ193cml0ZShlbmdpbmUsIERfREFUT1VUX09G
RlNFVCwgcmVnKTsNCj4gKw0KPiArCXJlZyA9IChjZHBfb3AtPm91dF9jdnQuc2NhbGUNCj4g
KwkJPDwgU0hJRlQoQ0RQX0RfREFUT1VUX1NDQUxFXzAsIERBVE9VVF9TQ0FMRSkpOw0KPiAr
CWNkcF9yZWdfd3JpdGUoZW5naW5lLCBEX0RBVE9VVF9TQ0FMRSwgcmVnKTsNCj4gKw0KPiAr
CXJlZyA9IChjZHBfb3AtPm91dF9jdnQudHJ1bmNhdGUNCj4gKwkJPDwgU0hJRlQoQ0RQX0Rf
REFUT1VUX1NISUZURVJfMCwgREFUT1VUX1NISUZURVIpKTsNCj4gKwljZHBfcmVnX3dyaXRl
KGVuZ2luZSwgRF9EQVRPVVRfU0hJRlRFUiwgcmVnKTsNCj4gKw0KPiArCXJlZyA9ICgoY2Rw
X29wLT5ieXBhc3Nfc3FzdW0gPw0KPiArCQlGSUVMRF9FTlVNKENEUF9EX0ZVTkNfQllQQVNT
XzAsIFNRU1VNX0JZUEFTUywgRU5BQkxFKSA6DQo+ICsJCUZJRUxEX0VOVU0oQ0RQX0RfRlVO
Q19CWVBBU1NfMCwgU1FTVU1fQllQQVNTLCBESVNBQkxFKSkgPDwNCj4gKwkJU0hJRlQoQ0RQ
X0RfRlVOQ19CWVBBU1NfMCwgU1FTVU1fQllQQVNTKSkgfA0KPiArCQkoKGNkcF9vcC0+Ynlw
YXNzX291dF9tdWwgPw0KPiArCQlGSUVMRF9FTlVNKENEUF9EX0ZVTkNfQllQQVNTXzAsIE1V
TF9CWVBBU1MsIEVOQUJMRSkgOg0KPiArCQlGSUVMRF9FTlVNKENEUF9EX0ZVTkNfQllQQVNT
XzAsIE1VTF9CWVBBU1MsIERJU0FCTEUpKSA8PA0KPiArCQlTSElGVChDRFBfRF9GVU5DX0JZ
UEFTU18wLCBNVUxfQllQQVNTKSk7DQo+ICsJY2RwX3JlZ193cml0ZShlbmdpbmUsIERfRlVO
Q19CWVBBU1MsIHJlZyk7DQo+ICsNCj4gK2V4aXQ6DQo+ICsJcmV0dXJuIHJldDsNCj4gK30N
Cj4gKw0KPiAraW50DQo+ICtkbGFfY2RwX2lzX3JlYWR5KHN0cnVjdCBkbGFfcHJvY2Vzc29y
ICpwcm9jZXNzb3IsDQo+ICsJCQkJIHN0cnVjdCBkbGFfcHJvY2Vzc29yX2dyb3VwICpncm91
cCkNCj4gK3sNCj4gKwlzdHJ1Y3QgZGxhX3Byb2Nlc3Nvcl9ncm91cCAqbmV4dF9ncm91cDsN
Cj4gKwlzdHJ1Y3QgZGxhX2NkcF9vcF9kZXNjICpjZHBfb3A7DQo+ICsNCj4gKwljZHBfb3Ag
PSAmZ3JvdXAtPm9wZXJhdGlvbl9kZXNjLT5jZHBfb3A7DQo+ICsJbmV4dF9ncm91cCA9ICZw
cm9jZXNzb3ItPmdyb3Vwc1shZ3JvdXAtPmlkXTsNCj4gKw0KPiArCS8qKg0KPiArCSAqIFNp
bmdsZSBMVVQgaXMgc2hhcmVkIGJldHdlZW4gdHdvIENEUCBncm91cHMsIG5lZWQgdG8gbWFr
ZQ0KPiArCSAqIHN1cmUgdGhhdCB1c2FnZSBkb2VzIG5vdCBjb25mbGljdC4gQWxzbywgTFVU
IHdyaXRlDQo+ICsJICogYWNjZXNzIGlzIGxvY2tlZCB3aGVuIENEUCBzdWItZW5naW5lIGlz
IGFjdGl2ZSwgc28gZGVsYXkNCj4gKwkgKiB3cml0aW5nIExVVCB3aGVuIGFub3RoZXIgZ3Jv
dXAgaXMgYWN0aXZlLg0KPiArCSAqLw0KPiArDQo+ICsJLyoqDQo+ICsJICogaWYgbm8gTFVU
IHJlcXVpcmVkIGZvciBjdXJyZW50IGdyb3VwIHRoZW4gaXQgY2FuIGJlIHByb2dyYW1tZWQN
Cj4gKwkgKiB3aXRob3V0IGZ1cnRoZXIgY2hlY2tzDQo+ICsJICovDQo+ICsJaWYgKGNkcF9v
cC0+bHV0X2luZGV4ID09IC0xKQ0KPiArCQlyZXR1cm4gMTsNCj4gKw0KPiArCS8qKg0KPiAr
CSAqIGlmIHNhbWUgTFVUIGlzIHVzZWQgZm9yIGJvdGggZ3JvdXBzIHRoZW4gaXQgY2FuIGJl
IHByb2dyYW1tZWQNCj4gKwkgKiB3aXRob3V0IG1vcmUgY2hlY2tzLiBFdmVuIGlmIGFub3Ro
ZXIgZ3JvdXAgaXMgYWN0aXZlIGFuZCBMVVQNCj4gKwkgKiBpcyBsb2NrZWQsIGl0IHdvdWxk
IGhhdmUgYmVlbiBwcm9ncmFtbWVkIGJ5IGFub3RoZXIgZ3JvdXAuDQo+ICsJICovDQo+ICsJ
aWYgKG5leHRfZ3JvdXAtPmx1dF9pbmRleCA9PSBjZHBfb3AtPmx1dF9pbmRleCkNCj4gKwkJ
cmV0dXJuIDE7DQo+ICsNCj4gKwkvKioNCj4gKwkgKiBpZiBMVVQgaW5kZXggb2YgYW5vdGhl
ciBncm91cCBpcyBub3QgLTEgbWVhbnMgc29tZSBMVVQgaXMgcHJvZ3JhbW1lZCwNCj4gKwkg
KiB0aGVuIGRvIG5vdCBwcm9ncmFtIGN1cnJlbnQgTFVUIGFzIHdlIGFscmVhZHkga25vdyBj
dXJyZW50IExVVCBpcyBub3QNCj4gKwkgKiAtMSBhbmQgbmVpdGhlciBzYW1lIGFzIGFub3Ro
ZXIgZ3JvdXAuDQo+ICsJICovDQo+ICsJaWYgKG5leHRfZ3JvdXAtPmx1dF9pbmRleCAhPSAt
MSkNCj4gKwkJcmV0dXJuIDA7DQo+ICsNCj4gKwkvKioNCj4gKwkgKiBpZiBjdXJyZW50IGdy
b3VwIG5lZWRzIExVVCBkaWZmZXJlbnQgdGhhbiBhbm90aGVyIGdyb3VwIGFuZCB0aGF0DQo+
ICsJICogZ3JvdXAgaXMgbm90IGFjdGl2ZSB0aGVuIHByb2dyYW0gaXQuDQo+ICsJICovDQo+
ICsJaWYgKCFuZXh0X2dyb3VwLT5hY3RpdmUpDQo+ICsJCXJldHVybiAxOw0KPiArDQo+ICsJ
LyoqDQo+ICsJICogaWYgY29udHJvbCBpcyBoZXJlIGl0IG1lYW5zIGN1cnJlbnQgZ3JvdXAg
aXMgdXNpbmcgTFVUIGRpZmZlcmVudCB0aGFuDQo+ICsJICogYW5vdGhlciBncm91cCBhbmQg
dGhhdCBncm91cCBpcyBhY3RpdmUuIFdhaXQgZm9yIGFub3RoZXIgZ3JvdXAgdG8NCj4gKwkg
KiBiZWNvbWUgaWRsZS4NCj4gKwkgKi8NCj4gKw0KPiArCXJldHVybiAwOw0KPiArfQ0KPiAr
DQo+ICt2b2lkDQo+ICtkbGFfY2RwX2R1bXBfY29uZmlnKHN0cnVjdCBkbGFfcHJvY2Vzc29y
X2dyb3VwICpncm91cCkNCj4gK3sNCj4gKwlzdHJ1Y3QgZGxhX2NkcF9vcF9kZXNjICpjZHBf
b3A7DQo+ICsJc3RydWN0IGRsYV9jZHBfc3VyZmFjZV9kZXNjICpjZHBfc3VyZmFjZTsNCj4g
Kw0KPiArCWNkcF9zdXJmYWNlID0gJmdyb3VwLT5zdXJmYWNlX2Rlc2MtPmNkcF9zdXJmYWNl
Ow0KPiArCWNkcF9vcCA9ICZncm91cC0+b3BlcmF0aW9uX2Rlc2MtPmNkcF9vcDsNCj4gK30N
Cj4gKw0KPiAraW50DQo+ICtkbGFfY2RwX3Byb2dyYW0oc3RydWN0IGRsYV9lbmdpbmUgKmVu
Z2luZSwgc3RydWN0IGRsYV9wcm9jZXNzb3JfZ3JvdXAgKmdyb3VwKQ0KPiArew0KPiArCWlu
dDMyX3QgcmV0Ow0KPiArDQo+ICsJZGxhX2VuYWJsZV9pbnRyKGVuZ2luZSwgTUFTSyhHTEJf
U19JTlRSX01BU0tfMCwgQ0RQX0RPTkVfTUFTSzEpIHwNCj4gKwkJCQkJTUFTSyhHTEJfU19J
TlRSX01BU0tfMCwgQ0RQX0RPTkVfTUFTSzApKTsNCj4gKw0KPiArCXJldCA9IHByb2Nlc3Nv
cl9jZHBfcHJvZ3JhbShlbmdpbmUsIGdyb3VwKTsNCj4gKwlpZiAocmV0KQ0KPiArCQlnb3Rv
IGV4aXQ7DQo+ICsNCj4gK2V4aXQ6DQo+ICsJcmV0dXJuIHJldDsNCj4gK30NCj4gZGlmZiAt
LWdpdCBhL2RyaXZlcnMvZ3B1L2RybS9udmRsYS9udmRsYV9jb21tb24uYyBiL2RyaXZlcnMv
Z3B1L2RybS9udmRsYS9udmRsYV9jb21tb24uYw0KPiBuZXcgZmlsZSBtb2RlIDEwMDY0NA0K
PiBpbmRleCAwMDAwMDAwMDAwMDAuLjNhYmM4NjNkOWZjZQ0KPiAtLS0gL2Rldi9udWxsDQo+
ICsrKyBiL2RyaXZlcnMvZ3B1L2RybS9udmRsYS9udmRsYV9jb21tb24uYw0KPiBAQCAtMCww
ICsxLDI5NSBAQA0KPiArLy8gU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEJTRC0zLUNsYXVz
ZSBPUiBHUEwtMi4wDQo+ICsvKg0KPiArICogQ29weXJpZ2h0IChDKSAyMDE3LTIwMTggTlZJ
RElBIENPUlBPUkFUSU9ODQo+ICsgKiBDb3B5cmlnaHQgKEMpIDIwMjIgQ2FpIEh1b3FpbmcN
Cj4gKyAqLw0KPiArDQo+ICsjaW5jbHVkZSAibnZkbGFfcmVnLmgiDQo+ICsjaW5jbHVkZSAi
bnZkbGFfY29tbW9uLmgiDQo+ICsjaW5jbHVkZSAibnZkbGFfZHJtLmgiDQo+ICsjaW5jbHVk
ZSAibnZkbGFfZW5naW5lLmgiDQo+ICsNCj4gK3N0YXRpYyBjb25zdCB1aW50OF90IG1hcF9s
dXRfbWV0aG9kW10gPSB7DQo+ICsJRklFTERfRU5VTShDRFBfU19MVVRfQ0ZHXzAsIExVVF9M
RV9GVU5DVElPTiwgRVhQT05FTlQpLA0KPiArCUZJRUxEX0VOVU0oQ0RQX1NfTFVUX0NGR18w
LCBMVVRfTEVfRlVOQ1RJT04sIExJTkVBUikNCj4gK307DQo+ICtzdGF0aWMgY29uc3QgdWlu
dDhfdCBtYXBfbHV0X291dFtdID0gew0KPiArCUZJRUxEX0VOVU0oQ0RQX1NfTFVUX0NGR18w
LCBMVVRfVUZMT1dfUFJJT1JJVFksIExFKSwNCj4gKwlGSUVMRF9FTlVNKENEUF9TX0xVVF9D
RkdfMCwgTFVUX1VGTE9XX1BSSU9SSVRZLCBMTykNCj4gK307DQo+ICsNCj4gK3N0YXRpYyBj
b25zdCB1aW50MTZfdCBhY2Nlc3NfZGF0YV9vZmZzZXRbXSA9IHsNCj4gKwlDRFBfU19MVVRf
QUNDRVNTX0RBVEFfMCAtIENEUF9TX0xVVF9BQ0NFU1NfQ0ZHXzAsDQo+ICsJU0RQX1NfTFVU
X0FDQ0VTU19EQVRBXzAgLSBTRFBfU19MVVRfQUNDRVNTX0NGR18wLA0KPiArfTsNCj4gK3N0
YXRpYyBjb25zdCB1aW50MTZfdCBsdXRfY2ZnX29mZnNldFtdID0gew0KPiArCUNEUF9TX0xV
VF9DRkdfMCAtIENEUF9TX0xVVF9BQ0NFU1NfQ0ZHXzAsDQo+ICsJU0RQX1NfTFVUX0NGR18w
IC0gU0RQX1NfTFVUX0FDQ0VTU19DRkdfMCwNCj4gK307DQo+ICtzdGF0aWMgY29uc3QgdWlu
dDE2X3QgbHV0X2luZm9fb2Zmc2V0W10gPSB7DQo+ICsJQ0RQX1NfTFVUX0lORk9fMCAtIENE
UF9TX0xVVF9BQ0NFU1NfQ0ZHXzAsDQo+ICsJU0RQX1NfTFVUX0lORk9fMCAtIFNEUF9TX0xV
VF9BQ0NFU1NfQ0ZHXzAsDQo+ICt9Ow0KPiArc3RhdGljIGNvbnN0IHVpbnQxNl90IGxlX3N0
YXJ0X29mZnNldFtdID0gew0KPiArCUNEUF9TX0xVVF9MRV9TVEFSVF9MT1dfMCAtIENEUF9T
X0xVVF9BQ0NFU1NfQ0ZHXzAsDQo+ICsJU0RQX1NfTFVUX0xFX1NUQVJUXzAgLSBTRFBfU19M
VVRfQUNDRVNTX0NGR18wLA0KPiArfTsNCj4gK3N0YXRpYyBjb25zdCB1aW50MTZfdCBsZV9l
bmRfb2Zmc2V0W10gPSB7DQo+ICsJQ0RQX1NfTFVUX0xFX0VORF9MT1dfMCAtIENEUF9TX0xV
VF9BQ0NFU1NfQ0ZHXzAsDQo+ICsJU0RQX1NfTFVUX0xFX0VORF8wIC0gU0RQX1NfTFVUX0FD
Q0VTU19DRkdfMCwNCj4gK307DQo+ICtzdGF0aWMgY29uc3QgdWludDE2X3QgbG9fc3RhcnRf
b2Zmc2V0W10gPSB7DQo+ICsJQ0RQX1NfTFVUX0xPX1NUQVJUX0xPV18wIC0gQ0RQX1NfTFVU
X0FDQ0VTU19DRkdfMCwNCj4gKwlTRFBfU19MVVRfTE9fU1RBUlRfMCAtIFNEUF9TX0xVVF9B
Q0NFU1NfQ0ZHXzAsDQo+ICt9Ow0KPiArc3RhdGljIGNvbnN0IHVpbnQxNl90IGxvX2VuZF9v
ZmZzZXRbXSA9IHsNCj4gKwlDRFBfU19MVVRfTE9fRU5EX0xPV18wIC0gQ0RQX1NfTFVUX0FD
Q0VTU19DRkdfMCwNCj4gKwlTRFBfU19MVVRfTE9fRU5EXzAgLSBTRFBfU19MVVRfQUNDRVNT
X0NGR18wLA0KPiArfTsNCj4gK3N0YXRpYyBjb25zdCB1aW50MTZfdCBsZV9zbG9wZV9zY2Fs
ZV9vZmZzZXRbXSA9IHsNCj4gKwlDRFBfU19MVVRfTEVfU0xPUEVfU0NBTEVfMCAtIENEUF9T
X0xVVF9BQ0NFU1NfQ0ZHXzAsDQo+ICsJU0RQX1NfTFVUX0xFX1NMT1BFX1NDQUxFXzAgLSBT
RFBfU19MVVRfQUNDRVNTX0NGR18wLA0KPiArfTsNCj4gK3N0YXRpYyBjb25zdCB1aW50MTZf
dCBsZV9zbG9wZV9zaGlmdF9vZmZzZXRbXSA9IHsNCj4gKwlDRFBfU19MVVRfTEVfU0xPUEVf
U0hJRlRfMCAtIENEUF9TX0xVVF9BQ0NFU1NfQ0ZHXzAsDQo+ICsJU0RQX1NfTFVUX0xFX1NM
T1BFX1NISUZUXzAgLSBTRFBfU19MVVRfQUNDRVNTX0NGR18wLA0KPiArfTsNCj4gK3N0YXRp
YyBjb25zdCB1aW50MTZfdCBsb19zbG9wZV9zY2FsZV9vZmZzZXRbXSA9IHsNCj4gKwlDRFBf
U19MVVRfTE9fU0xPUEVfU0NBTEVfMCAtIENEUF9TX0xVVF9BQ0NFU1NfQ0ZHXzAsDQo+ICsJ
U0RQX1NfTFVUX0xPX1NMT1BFX1NDQUxFXzAgLSBTRFBfU19MVVRfQUNDRVNTX0NGR18wLA0K
PiArfTsNCj4gK3N0YXRpYyBjb25zdCB1aW50MTZfdCBsb19zbG9wZV9zaGlmdF9vZmZzZXRb
XSA9IHsNCj4gKwlDRFBfU19MVVRfTE9fU0xPUEVfU0hJRlRfMCAtIENEUF9TX0xVVF9BQ0NF
U1NfQ0ZHXzAsDQo+ICsJU0RQX1NfTFVUX0xPX1NMT1BFX1NISUZUXzAgLSBTRFBfU19MVVRf
QUNDRVNTX0NGR18wLA0KPiArfTsNCj4gKw0KPiArdm9pZCB1cGRhdGVfbHV0KHN0cnVjdCBk
bGFfZW5naW5lICplbmdpbmUsIHVpbnQzMl90IHJlZ19iYXNlLA0KPiArCQkJCXN0cnVjdCBk
bGFfbHV0X3BhcmFtICpsdXQsIHVpbnQ4X3QgcHJlY2lzaW9uKQ0KPiArew0KPiArCWludDMy
X3QgaTsNCj4gKwl1aW50MzJfdCByZWc7DQo+ICsJdWludDMyX3QgaGlnaCwgbG93Ow0KPiAr
CWludDMyX3QgaXNfc2RwID0gcmVnX2Jhc2UgPT0gU0RQX1NfTFVUX0FDQ0VTU19DRkdfMDsN
Cj4gKw0KPiArCS8qIHByb2dyYW0gcmF3IHRhYmxlICovDQo+ICsJcmVnID0gKEZJRUxEX0VO
VU0oQ0RQX1NfTFVUX0FDQ0VTU19DRkdfMCwgTFVUX1RBQkxFX0lELCBMRSkNCj4gKwkJPDwg
U0hJRlQoQ0RQX1NfTFVUX0FDQ0VTU19DRkdfMCwgTFVUX1RBQkxFX0lEKSkgfA0KPiArCQko
RklFTERfRU5VTShDRFBfU19MVVRfQUNDRVNTX0NGR18wLCBMVVRfQUNDRVNTX1RZUEUsIFdS
SVRFKQ0KPiArCQk8PCBTSElGVChDRFBfU19MVVRfQUNDRVNTX0NGR18wLCBMVVRfQUNDRVNT
X1RZUEUpKTsNCj4gKwlyZWdfd3JpdGUoZW5naW5lLCByZWdfYmFzZSwgcmVnKTsNCj4gKw0K
PiArCWZvciAoaSA9IDA7IGkgPCAoMTw8TFVUX0xJTkVBUl9FWFBfVEFCTEVfRU5UUllfTE9H
MikrMTsgaSsrKSB7DQo+ICsJCWRsYV9yZWdfd3JpdGUoZW5naW5lLT5kcml2ZXJfY29udGV4
dCwNCj4gKwkJCQlyZWdfYmFzZSArIGFjY2Vzc19kYXRhX29mZnNldFtpc19zZHBdLA0KPiAr
CQkJCWx1dC0+bGluZWFyX2V4cF90YWJsZVtpXSk7DQo+ICsJfQ0KPiArDQo+ICsJLyogcHJv
Z3JhbSBkZW5zaXR5IHRhYmxlICovDQo+ICsJcmVnID0gKEZJRUxEX0VOVU0oQ0RQX1NfTFVU
X0FDQ0VTU19DRkdfMCwgTFVUX1RBQkxFX0lELCBMTykNCj4gKwkJPDwgU0hJRlQoQ0RQX1Nf
TFVUX0FDQ0VTU19DRkdfMCwgTFVUX1RBQkxFX0lEKSkgfA0KPiArCQkoRklFTERfRU5VTShD
RFBfU19MVVRfQUNDRVNTX0NGR18wLCBMVVRfQUNDRVNTX1RZUEUsIFdSSVRFKQ0KPiArCQk8
PCBTSElGVChDRFBfU19MVVRfQUNDRVNTX0NGR18wLCBMVVRfQUNDRVNTX1RZUEUpKTsNCj4g
KwlkbGFfcmVnX3dyaXRlKGVuZ2luZS0+ZHJpdmVyX2NvbnRleHQsIHJlZ19iYXNlLCByZWcp
Ow0KPiArDQo+ICsJZm9yIChpID0gMDsgaSA8ICgxPDxMVVRfTElORUFSX09OTFlfVEFCTEVf
RU5UUllfTE9HMikrMTsgaSsrKSB7DQo+ICsJCWRsYV9yZWdfd3JpdGUoZW5naW5lLT5kcml2
ZXJfY29udGV4dCwNCj4gKwkJCQlyZWdfYmFzZSArIGFjY2Vzc19kYXRhX29mZnNldFtpc19z
ZHBdLA0KPiArCQkJCWx1dC0+bGluZWFyX29ubHlfdGFibGVbaV0pOw0KPiArCX0NCj4gKw0K
PiArCS8qIHByb2dyYW0gb3RoZXIgY29uZmlndXJhdGlvbnMgKi8NCj4gKwlyZWcgPSAobWFw
X2x1dF9tZXRob2RbbHV0LT5tZXRob2RdIDw8DQo+ICsJCVNISUZUKENEUF9TX0xVVF9DRkdf
MCwgTFVUX0xFX0ZVTkNUSU9OKSkgfA0KPiArCQkobWFwX2x1dF9vdXRbbHV0LT5oeWJyaWRf
cHJpb3JpdHldIDw8DQo+ICsJCVNISUZUKENEUF9TX0xVVF9DRkdfMCwgTFVUX0hZQlJJRF9Q
UklPUklUWSkpIHwNCj4gKwkJKG1hcF9sdXRfb3V0W2x1dC0+dW5kZXJmbG93X3ByaW9yaXR5
XSA8PA0KPiArCQlTSElGVChDRFBfU19MVVRfQ0ZHXzAsIExVVF9VRkxPV19QUklPUklUWSkp
IHwNCj4gKwkJKG1hcF9sdXRfb3V0W2x1dC0+b3ZlcmZsb3dfcHJpb3JpdHldIDw8DQo+ICsJ
CVNISUZUKENEUF9TX0xVVF9DRkdfMCwgTFVUX09GTE9XX1BSSU9SSVRZKSk7DQo+ICsJZGxh
X3JlZ193cml0ZShlbmdpbmUtPmRyaXZlcl9jb250ZXh0LA0KPiArCQkJcmVnX2Jhc2UgKyBs
dXRfY2ZnX29mZnNldFtpc19zZHBdLCByZWcpOw0KPiArDQo+ICsJaWYgKGx1dC0+bWV0aG9k
ID09IEZJRUxEX0VOVU0oQ0RQX1NfTFVUX0NGR18wLA0KPiArCQkJCQlMVVRfTEVfRlVOQ1RJ
T04sIEVYUE9ORU5UKSkgew0KPiArCQlyZWcgPSAoKCgodWludDMyX3QpbHV0LT5saW5lYXJf
ZXhwX29mZnNldC5leHBfb2Zmc2V0KSA8PA0KPiArCQkJU0hJRlQoQ0RQX1NfTFVUX0lORk9f
MCwgTFVUX0xFX0lOREVYX09GRlNFVCkpJg0KPiArCQlNQVNLKENEUF9TX0xVVF9JTkZPXzAs
IExVVF9MRV9JTkRFWF9PRkZTRVQpKSB8DQo+ICsJCQkoKCgodWludDMyX3QpbHV0LT5saW5l
YXJfb25seV9vZmZzZXQuZnJhY19iaXRzKSA8PA0KPiArCQkJU0hJRlQoQ0RQX1NfTFVUX0lO
Rk9fMCwgTFVUX0xPX0lOREVYX1NFTEVDVCkpJg0KPiArCQlNQVNLKENEUF9TX0xVVF9JTkZP
XzAsIExVVF9MT19JTkRFWF9TRUxFQ1QpKTsNCj4gKwl9IGVsc2Ugew0KPiArCQlyZWcgPSAo
KCgodWludDMyX3QpbHV0LT5saW5lYXJfZXhwX29mZnNldC5mcmFjX2JpdHMpIDw8DQo+ICsJ
CQlTSElGVChDRFBfU19MVVRfSU5GT18wLCBMVVRfTEVfSU5ERVhfU0VMRUNUKSkmDQo+ICsJ
CU1BU0soQ0RQX1NfTFVUX0lORk9fMCwgTFVUX0xFX0lOREVYX1NFTEVDVCkpIHwNCj4gKwkJ
CSgoKCh1aW50MzJfdClsdXQtPmxpbmVhcl9vbmx5X29mZnNldC5mcmFjX2JpdHMpIDw8DQo+
ICsJCQlTSElGVChDRFBfU19MVVRfSU5GT18wLCBMVVRfTE9fSU5ERVhfU0VMRUNUKSkmDQo+
ICsJCU1BU0soQ0RQX1NfTFVUX0lORk9fMCwgTFVUX0xPX0lOREVYX1NFTEVDVCkpOw0KPiAr
CX0NCj4gKwlkbGFfcmVnX3dyaXRlKGVuZ2luZS0+ZHJpdmVyX2NvbnRleHQsDQo+ICsJCQly
ZWdfYmFzZSArIGx1dF9pbmZvX29mZnNldFtpc19zZHBdLCByZWcpOw0KPiArCWhpZ2ggPSB1
cHBlcl8zMl9iaXRzKGx1dC0+bGluZWFyX2V4cF9zdGFydCk7DQo+ICsJbG93ID0gbG93ZXJf
MzJfYml0cyhsdXQtPmxpbmVhcl9leHBfc3RhcnQpOw0KPiArCWRsYV9yZWdfd3JpdGUoZW5n
aW5lLT5kcml2ZXJfY29udGV4dCwNCj4gKwkJCXJlZ19iYXNlICsgbGVfc3RhcnRfb2Zmc2V0
W2lzX3NkcF0sIGxvdyk7DQo+ICsJaWYgKCFpc19zZHApDQo+ICsJCWRsYV9yZWdfd3JpdGUo
ZW5naW5lLT5kcml2ZXJfY29udGV4dCwNCj4gKwkJCQlyZWdfYmFzZSArIGxlX3N0YXJ0X29m
ZnNldFtpc19zZHBdICsgNCwgaGlnaCk7DQo+ICsNCj4gKwloaWdoID0gdXBwZXJfMzJfYml0
cyhsdXQtPmxpbmVhcl9leHBfZW5kKTsNCj4gKwlsb3cgPSBsb3dlcl8zMl9iaXRzKGx1dC0+
bGluZWFyX2V4cF9lbmQpOw0KPiArCWRsYV9yZWdfd3JpdGUoZW5naW5lLT5kcml2ZXJfY29u
dGV4dCwNCj4gKwkJCQlyZWdfYmFzZSArIGxlX2VuZF9vZmZzZXRbaXNfc2RwXSwgbG93KTsN
Cj4gKwlpZiAoIWlzX3NkcCkNCj4gKwkJZGxhX3JlZ193cml0ZShlbmdpbmUtPmRyaXZlcl9j
b250ZXh0LA0KPiArCQkJCXJlZ19iYXNlICsgbGVfZW5kX29mZnNldFtpc19zZHBdICsgNCwg
aGlnaCk7DQo+ICsNCj4gKwloaWdoID0gdXBwZXJfMzJfYml0cyhsdXQtPmxpbmVhcl9vbmx5
X3N0YXJ0KTsNCj4gKwlsb3cgPSBsb3dlcl8zMl9iaXRzKGx1dC0+bGluZWFyX29ubHlfc3Rh
cnQpOw0KPiArCWRsYV9yZWdfd3JpdGUoZW5naW5lLT5kcml2ZXJfY29udGV4dCwNCj4gKwkJ
CQlyZWdfYmFzZSArIGxvX3N0YXJ0X29mZnNldFtpc19zZHBdLCBsb3cpOw0KPiArCWlmICgh
aXNfc2RwKQ0KPiArCQlkbGFfcmVnX3dyaXRlKGVuZ2luZS0+ZHJpdmVyX2NvbnRleHQsDQo+
ICsJCQkJcmVnX2Jhc2UgKyBsb19zdGFydF9vZmZzZXRbaXNfc2RwXSArIDQsIGhpZ2gpOw0K
PiArDQo+ICsJaGlnaCA9IHVwcGVyXzMyX2JpdHMobHV0LT5saW5lYXJfb25seV9lbmQpOw0K
PiArCWxvdyA9IGxvd2VyXzMyX2JpdHMobHV0LT5saW5lYXJfb25seV9lbmQpOw0KPiArCWRs
YV9yZWdfd3JpdGUoZW5naW5lLT5kcml2ZXJfY29udGV4dCwNCj4gKwkJCQlyZWdfYmFzZSAr
IGxvX2VuZF9vZmZzZXRbaXNfc2RwXSwgbG93KTsNCj4gKwlpZiAoIWlzX3NkcCkNCj4gKwkJ
ZGxhX3JlZ193cml0ZShlbmdpbmUtPmRyaXZlcl9jb250ZXh0LA0KPiArCQkJCXJlZ19iYXNl
ICsgbG9fZW5kX29mZnNldFtpc19zZHBdICsgNCwgaGlnaCk7DQo+ICsNCj4gKwlpZiAocHJl
Y2lzaW9uID09IFBSRUNJU0lPTl9GUDE2KSB7DQo+ICsJCXJlZyA9IChsdXQtPmxpbmVhcl9l
eHBfdW5kZXJmbG93X3Nsb3BlLmRhdGFfZiA8PA0KPiArCQkJU0hJRlQoQ0RQX1NfTFVUX0xF
X1NMT1BFX1NDQUxFXzAsDQo+ICsJCQkJCUxVVF9MRV9TTE9QRV9VRkxPV19TQ0FMRSkpIHwN
Cj4gKwkJCShsdXQtPmxpbmVhcl9leHBfb3ZlcmZsb3dfc2xvcGUuZGF0YV9mIDw8DQo+ICsJ
CQlTSElGVChDRFBfU19MVVRfTEVfU0xPUEVfU0NBTEVfMCwNCj4gKwkJCQkJTFVUX0xFX1NM
T1BFX09GTE9XX1NDQUxFKSk7DQo+ICsJCWRsYV9yZWdfd3JpdGUoZW5naW5lLT5kcml2ZXJf
Y29udGV4dCwNCj4gKwkJCQlyZWdfYmFzZSArIGxlX3Nsb3BlX3NjYWxlX29mZnNldFtpc19z
ZHBdLCByZWcpOw0KPiArDQo+ICsJCXJlZyA9IChsdXQtPmxpbmVhcl9vbmx5X3VuZGVyZmxv
d19zbG9wZS5kYXRhX2YgPDwNCj4gKwkJCVNISUZUKENEUF9TX0xVVF9MT19TTE9QRV9TQ0FM
RV8wLA0KPiArCQkJCQlMVVRfTE9fU0xPUEVfVUZMT1dfU0NBTEUpKSB8DQo+ICsJCQkobHV0
LT5saW5lYXJfb25seV9vdmVyZmxvd19zbG9wZS5kYXRhX2YgPDwNCj4gKwkJCVNISUZUKENE
UF9TX0xVVF9MT19TTE9QRV9TQ0FMRV8wLA0KPiArCQkJCQlMVVRfTE9fU0xPUEVfT0ZMT1df
U0NBTEUpKTsNCj4gKwkJZGxhX3JlZ193cml0ZShlbmdpbmUtPmRyaXZlcl9jb250ZXh0LA0K
PiArCQkJCXJlZ19iYXNlICsgbG9fc2xvcGVfc2NhbGVfb2Zmc2V0W2lzX3NkcF0sIHJlZyk7
DQo+ICsJfSBlbHNlIHsNCj4gKwkJdW5pb24gZGxhX3Nsb3BlICpvc2xvcGU7DQo+ICsJCXVu
aW9uIGRsYV9zbG9wZSAqdXNsb3BlOw0KPiArDQo+ICsJCXVzbG9wZSA9ICZsdXQtPmxpbmVh
cl9leHBfdW5kZXJmbG93X3Nsb3BlOw0KPiArCQlvc2xvcGUgPSAmbHV0LT5saW5lYXJfZXhw
X292ZXJmbG93X3Nsb3BlOw0KPiArCQlyZWcgPSAoKCgodWludDMyX3QpdXNsb3BlLT5kYXRh
X2kuc2NhbGUpDQo+ICsJCQk8PCBTSElGVChDRFBfU19MVVRfTEVfU0xPUEVfU0NBTEVfMCwN
Cj4gKwkJCQkJTFVUX0xFX1NMT1BFX1VGTE9XX1NDQUxFKSkmDQo+ICsJCQlNQVNLKENEUF9T
X0xVVF9MRV9TTE9QRV9TQ0FMRV8wLA0KPiArCQkJCQlMVVRfTEVfU0xPUEVfVUZMT1dfU0NB
TEUpKSB8DQo+ICsJCQkoKCgodWludDMyX3Qpb3Nsb3BlLT5kYXRhX2kuc2NhbGUpDQo+ICsJ
CQk8PCBTSElGVChDRFBfU19MVVRfTEVfU0xPUEVfU0NBTEVfMCwNCj4gKwkJCQkJTFVUX0xF
X1NMT1BFX09GTE9XX1NDQUxFKSkmDQo+ICsJCQlNQVNLKENEUF9TX0xVVF9MRV9TTE9QRV9T
Q0FMRV8wLA0KPiArCQkJCQlMVVRfTEVfU0xPUEVfT0ZMT1dfU0NBTEUpKTsNCj4gKwkJZGxh
X3JlZ193cml0ZShlbmdpbmUtPmRyaXZlcl9jb250ZXh0LA0KPiArCQkJCXJlZ19iYXNlICsg
bGVfc2xvcGVfc2NhbGVfb2Zmc2V0W2lzX3NkcF0sIHJlZyk7DQo+ICsNCj4gKwkJcmVnID0g
KCgoKHVpbnQzMl90KXVzbG9wZS0+ZGF0YV9pLnNoaWZ0ZXIpIDw8DQo+ICsJCQlTSElGVChD
RFBfU19MVVRfTEVfU0xPUEVfU0hJRlRfMCwNCj4gKwkJCQkJTFVUX0xFX1NMT1BFX1VGTE9X
X1NISUZUKSkmDQo+ICsJCQlNQVNLKENEUF9TX0xVVF9MRV9TTE9QRV9TSElGVF8wLA0KPiAr
CQkJCQlMVVRfTEVfU0xPUEVfVUZMT1dfU0hJRlQpKSB8DQo+ICsJCQkoKCgodWludDMyX3Qp
b3Nsb3BlLT5kYXRhX2kuc2hpZnRlcikgPDwNCj4gKwkJCVNISUZUKENEUF9TX0xVVF9MRV9T
TE9QRV9TSElGVF8wLA0KPiArCQkJCQlMVVRfTEVfU0xPUEVfT0ZMT1dfU0hJRlQpKSYNCj4g
KwkJCU1BU0soQ0RQX1NfTFVUX0xFX1NMT1BFX1NISUZUXzAsDQo+ICsJCQkJCUxVVF9MRV9T
TE9QRV9PRkxPV19TSElGVCkpOw0KPiArCQlkbGFfcmVnX3dyaXRlKGVuZ2luZS0+ZHJpdmVy
X2NvbnRleHQsDQo+ICsJCQkJcmVnX2Jhc2UgKyBsZV9zbG9wZV9zaGlmdF9vZmZzZXRbaXNf
c2RwXSwgcmVnKTsNCj4gKw0KPiArCQl1c2xvcGUgPSAmbHV0LT5saW5lYXJfb25seV91bmRl
cmZsb3dfc2xvcGU7DQo+ICsJCW9zbG9wZSA9ICZsdXQtPmxpbmVhcl9vbmx5X292ZXJmbG93
X3Nsb3BlOw0KPiArCQlyZWcgPSAoKCgodWludDMyX3QpdXNsb3BlLT5kYXRhX2kuc2NhbGUp
IDw8DQo+ICsJCQlTSElGVChDRFBfU19MVVRfTE9fU0xPUEVfU0NBTEVfMCwNCj4gKwkJCQkJ
TFVUX0xPX1NMT1BFX1VGTE9XX1NDQUxFKSkmDQo+ICsJCQlNQVNLKENEUF9TX0xVVF9MT19T
TE9QRV9TQ0FMRV8wLA0KPiArCQkJCQlMVVRfTE9fU0xPUEVfVUZMT1dfU0NBTEUpKSB8DQo+
ICsJCQkoKCgodWludDMyX3Qpb3Nsb3BlLT5kYXRhX2kuc2NhbGUpIDw8DQo+ICsJCQlTSElG
VChDRFBfU19MVVRfTE9fU0xPUEVfU0NBTEVfMCwNCj4gKwkJCQkJTFVUX0xPX1NMT1BFX09G
TE9XX1NDQUxFKSkmDQo+ICsJCQlNQVNLKENEUF9TX0xVVF9MT19TTE9QRV9TQ0FMRV8wLA0K
PiArCQkJCQlMVVRfTE9fU0xPUEVfT0ZMT1dfU0NBTEUpKTsNCj4gKwkJZGxhX3JlZ193cml0
ZShlbmdpbmUtPmRyaXZlcl9jb250ZXh0LA0KPiArCQkJCXJlZ19iYXNlICsgbG9fc2xvcGVf
c2NhbGVfb2Zmc2V0W2lzX3NkcF0sIHJlZyk7DQo+ICsJCXJlZyA9ICgoKCh1aW50MzJfdCl1
c2xvcGUtPmRhdGFfaS5zaGlmdGVyKSA8PA0KPiArCQkJU0hJRlQoQ0RQX1NfTFVUX0xPX1NM
T1BFX1NISUZUXzAsDQo+ICsJCQkJCUxVVF9MT19TTE9QRV9VRkxPV19TSElGVCkpJg0KPiAr
CQkJTUFTSyhDRFBfU19MVVRfTE9fU0xPUEVfU0hJRlRfMCwNCj4gKwkJCQkJTFVUX0xPX1NM
T1BFX1VGTE9XX1NISUZUKSkgfA0KPiArCQkJKCgoKHVpbnQzMl90KW9zbG9wZS0+ZGF0YV9p
LnNoaWZ0ZXIpIDw8DQo+ICsJCQlTSElGVChDRFBfU19MVVRfTE9fU0xPUEVfU0hJRlRfMCwN
Cj4gKwkJCQkJTFVUX0xPX1NMT1BFX09GTE9XX1NISUZUKSkmDQo+ICsJCQlNQVNLKENEUF9T
X0xVVF9MT19TTE9QRV9TSElGVF8wLA0KPiArCQkJCQlMVVRfTE9fU0xPUEVfT0ZMT1dfU0hJ
RlQpKTsNCj4gKwkJZGxhX3JlZ193cml0ZShlbmdpbmUtPmRyaXZlcl9jb250ZXh0LA0KPiAr
CQkJCXJlZ19iYXNlICsgbG9fc2xvcGVfc2hpZnRfb2Zmc2V0W2lzX3NkcF0sIHJlZyk7DQo+
ICsJfQ0KPiArfQ0KPiArDQo+ICtpbnQNCj4gK3ZhbGlkYXRlX2RhdGFfY3ViZShzdHJ1Y3Qg
ZGxhX2RhdGFfY3ViZSBzcmNfZGF0YV9jdWJlLA0KPiArCQkJCSAgIHN0cnVjdCBkbGFfZGF0
YV9jdWJlIGRzdF9kYXRhX2N1YmUsDQo+ICsJCQkJICAgdWludDhfdCBtZW1fdHlwZSkNCj4g
K3sNCj4gKwlpbnQzMl90IHJldCA9IDA7DQo+ICsNCj4gKwlpZiAoKHNyY19kYXRhX2N1YmUu
d2lkdGggPiBEQ1VCRV9NQVhfV0lEVEgpIHx8DQo+ICsJICAgIChzcmNfZGF0YV9jdWJlLmhl
aWdodCA+IERDVUJFX01BWF9IRUlHSFQpIHx8DQo+ICsJICAgIChzcmNfZGF0YV9jdWJlLmNo
YW5uZWwgPiBEQ1VCRV9NQVhfQ0hBTk5FTCkpIHsNCj4gKwkJcHJfZXJyKCJJbnZhbGlkIFNy
Y0lucHV0IEN1ZGVbVzogJXUsIEg6ICV1LCBDOiAldV0iLA0KPiArCQkJCXNyY19kYXRhX2N1
YmUud2lkdGgsIHNyY19kYXRhX2N1YmUuaGVpZ2h0LA0KPiArCQkJCXNyY19kYXRhX2N1YmUu
Y2hhbm5lbCk7DQo+ICsJCXJldCA9IC1FSU5WQUw7DQo+ICsJCWdvdG8gZXhpdDsNCj4gKwl9
DQo+ICsNCj4gKwlpZiAoKGRzdF9kYXRhX2N1YmUud2lkdGggPiBEQ1VCRV9NQVhfV0lEVEgp
IHx8DQo+ICsJICAgIChkc3RfZGF0YV9jdWJlLmhlaWdodCA+IERDVUJFX01BWF9IRUlHSFQp
IHx8DQo+ICsJICAgIChkc3RfZGF0YV9jdWJlLmNoYW5uZWwgPiBEQ1VCRV9NQVhfQ0hBTk5F
TCkpIHsNCj4gKwkJcHJfZXJyKCJJbnZhbGlkIERzdElucHV0IEN1ZGVbVzogJXUsIEg6ICV1
LCBDOiAldV0iLA0KPiArCQkJCWRzdF9kYXRhX2N1YmUud2lkdGgsIGRzdF9kYXRhX2N1YmUu
aGVpZ2h0LA0KPiArCQkJCWRzdF9kYXRhX2N1YmUuY2hhbm5lbCk7DQo+ICsJCXJldCA9IC1F
SU5WQUw7DQo+ICsJCWdvdG8gZXhpdDsNCj4gKwl9DQo+ICsNCj4gKwlpZiAoc3JjX2RhdGFf
Y3ViZS50eXBlID4gbWVtX3R5cGUpIHsNCj4gKwkJcHJfZXJyKCJJbnZhbGlkIHNyY19kYXRh
Lm1lbV90eXBlOiAldVxuIiwgc3JjX2RhdGFfY3ViZS50eXBlKTsNCj4gKwkJcmV0ID0gLUVJ
TlZBTDsNCj4gKwkJZ290byBleGl0Ow0KPiArCX0NCj4gKw0KPiArCWlmIChkc3RfZGF0YV9j
dWJlLnR5cGUgPiBtZW1fdHlwZSkgew0KPiArCQlwcl9lcnIoIkludmFsaWQgZHN0X2RhdGEu
bWVtX3R5cGU6ICV1XG4iLCBkc3RfZGF0YV9jdWJlLnR5cGUpOw0KPiArCQlyZXQgPSAtRUlO
VkFMOw0KPiArCQlnb3RvIGV4aXQ7DQo+ICsJfQ0KPiArDQo+ICtleGl0Og0KPiArCXJldHVy
biByZXQ7DQo+ICt9DQo+ICsNCj4gK2ludA0KPiArdmFsaWRhdGVfcHJlY2lzaW9uKHVpbnQ4
X3QgcHJlY2lzaW9uLCB1aW50OF90IG1hcF9wcmVjaXNpb24pDQo+ICt7DQo+ICsJaW50MzJf
dCByZXQgPSAwOw0KPiArDQo+ICsJaWYgKHByZWNpc2lvbiA+PSBtYXBfcHJlY2lzaW9uKSB7
DQo+ICsJCXByX2VycigiSW52YWxpZCBwcmVjaXNpb246ICV1XG4iLCBwcmVjaXNpb24pOw0K
PiArCQlyZXQgPSAtRUlOVkFMOw0KPiArCX0NCj4gKw0KPiArCXJldHVybiByZXQ7DQo+ICt9
DQo+IGRpZmYgLS1naXQgYS9kcml2ZXJzL2dwdS9kcm0vbnZkbGEvbnZkbGFfY29tbW9uLmgg
Yi9kcml2ZXJzL2dwdS9kcm0vbnZkbGEvbnZkbGFfY29tbW9uLmgNCj4gbmV3IGZpbGUgbW9k
ZSAxMDA2NDQNCj4gaW5kZXggMDAwMDAwMDAwMDAwLi4zOGNmNDMyNDY4OTANCj4gLS0tIC9k
ZXYvbnVsbA0KPiArKysgYi9kcml2ZXJzL2dwdS9kcm0vbnZkbGEvbnZkbGFfY29tbW9uLmgN
Cj4gQEAgLTAsMCArMSw4MzUgQEANCj4gKy8qIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBH
UEwtMi4wIE9SIEJTRC0zLUNsYXVzZSAqLw0KPiArLyoNCj4gKyAqIENvcHlyaWdodCAoQykg
MjAxNy0yMDE4IE5WSURJQSBDT1JQT1JBVElPTi4NCj4gKyAqIENvcHlyaWdodCAoQykgMjAy
MiBDYWkgSHVvcWluZw0KPiArICovDQo+ICsNCj4gKyNpZm5kZWYgX19OVkRMQV9DT01NT05f
SF8NCj4gKyNkZWZpbmUgX19OVkRMQV9DT01NT05fSF8NCj4gKw0KPiArI2luY2x1ZGUgPGxp
bnV4L3R5cGVzLmg+DQo+ICsNCj4gKyNkZWZpbmUgRENVQkVfTUFYX1dJRFRICQk4MTkyDQo+
ICsjZGVmaW5lIERDVUJFX01BWF9IRUlHSFQJODE5Mg0KPiArI2RlZmluZSBEQ1VCRV9NQVhf
Q0hBTk5FTAk4MTkyDQo+ICsNCj4gKy8qKg0KPiArICogQGluZ3JvdXAgUHJvY2Vzc29ycw0K
PiArICogQG5hbWUgRExBIFByb2Nlc3NvcnMNCj4gKyAqIFByb2Nlc3NvciBtb2R1bGVzIGlu
IERMQSBlbmdpbmUuIEVhY2ggcHJvY2Vzc29yIGhhcyBpdCdzDQo+ICsgKiBvd24gb3BlcmF0
aW9uIGEuay5hLiBIVyBsYXllci4gTmV0d29yayBpcyBmb3JtZWQgdXNpbmcNCj4gKyAqIGdy
YXBoIG9mIHRoZXNlIG9wZXJhdGlvbnMNCj4gKyAqIEB7DQo+ICsgKi8NCj4gKyNkZWZpbmUg
RExBX09QX0JETUEJCTANCj4gKyNkZWZpbmUgRExBX09QX0NPTlYJCTENCj4gKyNkZWZpbmUg
RExBX09QX1NEUAkJMg0KPiArI2RlZmluZSBETEFfT1BfUERQCQkzDQo+ICsjZGVmaW5lIERM
QV9PUF9DRFAJCTQNCj4gKyNkZWZpbmUgRExBX09QX1JVQklLCTUNCj4gKy8qKiBAfSAqLw0K
PiArDQo+ICsvKioNCj4gKyAqIEBpbmdyb3VwIFByb2Nlc3NvcnMNCj4gKyAqIEBuYW1lIE1h
eGltdW0gbnVtYmVyIG9mIHByb2Nlc3NvcnMNCj4gKyAqIEBicmllZiBETEEgYXNoIDYgcHJv
Y2Vzc29ycw0KPiArICogQHsNCj4gKyAqLw0KPiArI2RlZmluZSBETEFfT1BfTlVNCQk2DQo+
ICsvKiogQH0gKi8NCj4gKw0KPiArLyoqDQo+ICsgKiBAaW5ncm91cCBQcm9jZXNzb3JzDQo+
ICsgKiBAbmFtZSBOdW1iZXIgb2YgZ3JvdXBzDQo+ICsgKiBAYnJpZWYgRWFjaCBwcm9jZXNz
b3IgaGFzIDIgZ3JvdXBzIG9mIHJlZ2lzdGVycw0KPiArICogQHsNCj4gKyAqLw0KPiArI2Rl
ZmluZSBETEFfTlVNX0dST1VQUwkJMg0KPiArLyoqIEB9ICovDQo+ICsNCj4gKy8qKg0KPiAr
ICogTmV0d29yayBkZXNjcmlwdG9yDQo+ICsgKg0KPiArICogQ29udGFpbnMgYWxsIGluZm9y
bWF0aW9uIHRvIGV4ZWN1dGUgYSBuZXR3b3JrDQo+ICsgKg0KPiArICogQG9wX2hlYWQ6IElu
ZGV4IG9mIGZpcnN0IG9wZXJhdGlvbiBvZiBlYWNoIHR5cGUgaW4gb3BlcmF0aW9ucyBsaXN0
DQo+ICsgKiBAbnVtX3JvaXM6IE51bWJlciBvZiBST0lzDQo+ICsgKiBAbnVtX29wZXJhdGlv
bnM6IE51bWJlciBvZiBvcGVyYXRpb25zIGluIG9uZSBsaXN0DQo+ICsgKiBAbnVtX2x1dHM6
IE51bWJlciBvZiBMVVRzDQo+ICsgKi8NCj4gK3N0cnVjdCBkbGFfbmV0d29ya19kZXNjIHsN
Cj4gKwlpbnQxNl90IG9wZXJhdGlvbl9kZXNjX2luZGV4Ow0KPiArCWludDE2X3Qgc3VyZmFj
ZV9kZXNjX2luZGV4Ow0KPiArDQo+ICsJaW50MTZfdCBkZXBlbmRlbmN5X2dyYXBoX2luZGV4
Ow0KPiArCWludDE2X3QgbHV0X2RhdGFfaW5kZXg7DQo+ICsNCj4gKwlpbnQxNl90IHJvaV9h
cnJheV9pbmRleDsNCj4gKwlpbnQxNl90IHN1cmZhY2VfaW5kZXg7DQo+ICsNCj4gKwlpbnQx
Nl90IHN0YXRfbGlzdF9pbmRleDsNCj4gKwlpbnQxNl90IHJlc2VydmVkMTsNCj4gKw0KPiAr
CWludDE2X3Qgb3BfaGVhZFtETEFfT1BfTlVNXTsNCj4gKw0KPiArCXVpbnQxNl90IG51bV9y
b2lzOw0KPiArCXVpbnQxNl90IG51bV9vcGVyYXRpb25zOw0KPiArDQo+ICsJdWludDE2X3Qg
bnVtX2x1dHM7DQo+ICsJdWludDE2X3QgbnVtX2FkZHJlc3NlczsNCj4gKw0KPiArCWludDE2
X3QgaW5wdXRfbGF5ZXI7DQo+ICsJdWludDhfdCBkeW5hbWljX3JvaTsNCj4gKwl1aW50OF90
IHJlc2VydmVkMDsNCj4gK30gX19wYWNrZWQgX19hbGlnbmVkKDQpOw0KPiArDQo+ICsvKioN
Cj4gKyAqIEBuYW1lIE1lbW9yeSB0eXBlcw0KPiArICogQGJyaWVmIERMQSBlbmduaW5lIGNh
biByZWFkL3dyaXRlIHRvL2Zyb20gMyBtZW1vcnkgdHlwZXMNCj4gKyAqIEB7DQo+ICsgKi8N
Cj4gKyNkZWZpbmUgRExBX01FTV9NQwkJCTAgLyogRXh0ZXJuYWwgRFJBTSAqLw0KPiArI2Rl
ZmluZSBETEFfTUVNX0NWCQkJMSAvKiBDVi1TUkFNICovDQo+ICsjZGVmaW5lIERMQV9NRU1f
SFcJCQkyIC8qIERMQSBzdWItbW9kdWxlICovDQo+ICsvKiogQH0gKi8NCj4gKw0KPiArLyoq
DQo+ICsgKiBAaW5ncm91cCBFdmVudHMNCj4gKyAqIEBuYW1lIE9wZXJhdGlvbiBldmVudHMN
Cj4gKyAqIEBicmllZiBEaWZmZXJlbnQgZXZlbnRzIHRyaWdnZXJlZCBieSBhbiBvcGVyYXRp
b25zDQo+ICsgKiBAew0KPiArICovDQo+ICsjZGVmaW5lIERMQV9FVkVOVF9PUF9DT01QTEVU
RUQJCTENCj4gKyNkZWZpbmUgRExBX0VWRU5UX09QX1BST0dSQU1NRUQJCTINCj4gKyNkZWZp
bmUgRExBX0VWRU5UX09QX0VOQUJMRUQJCTMNCj4gKyNkZWZpbmUgRExBX0VWRU5UX0NETUFf
V1RfRE9ORQkJNA0KPiArI2RlZmluZSBETEFfRVZFTlRfQ0RNQV9EVF9ET05FCQk1DQo+ICsv
KiogQH0gKi8NCj4gKw0KPiArc3RydWN0IGRsYV9jb25zdW1lciB7DQo+ICsJaW50MTZfdCBp
bmRleDsgLyogdGhlIGluZGV4IG9mIGRsYV9jb21tb25fb3BfZGVzYyBpbiBkZXBfZ3JhcGhf
YWRkciAqLw0KPiArCXVpbnQ4X3QgZXZlbnQ7DQo+ICsJdWludDhfdCByZXM7DQo+ICt9IF9f
cGFja2VkIF9fYWxpZ25lZCg0KTsNCj4gKw0KPiArc3RydWN0IGRsYV9jb21tb25fb3BfZGVz
YyB7DQo+ICsJaW50MTZfdCBpbmRleDsgLyogc2V0IGJ5IHVjb2RlICovDQo+ICsJaW50OF90
IHJvaV9pbmRleDsNCj4gKwl1aW50OF90IG9wX3R5cGU7DQo+ICsNCj4gKwl1aW50OF90IGRl
cGVuZGVuY3lfY291bnQ7DQo+ICsJdWludDhfdCByZXNlcnZlZDBbM107DQo+ICsNCj4gKwlz
dHJ1Y3QgZGxhX2NvbnN1bWVyIGNvbnN1bWVyc1tETEFfT1BfTlVNXTsNCj4gKwlzdHJ1Y3Qg
ZGxhX2NvbnN1bWVyIGZ1c2VkX3BhcmVudDsNCj4gK30gX19wYWNrZWQgX19hbGlnbmVkKDQp
Ow0KPiArDQo+ICtzdHJ1Y3QgZGxhX3JvaV9hcnJheV9kZXNjIHsNCj4gKwl1aW50MzJfdCBh
cnJheV9sZW5ndGg7DQo+ICsNCj4gKwl1aW50MzJfdCBhcnJheV9yZXNlcnZlZDsNCj4gK30g
X19wYWNrZWQgX19hbGlnbmVkKDQpOw0KPiArDQo+ICtzdHJ1Y3QgZGxhX3JvaV9kZXNjIHsN
Cj4gKwl1aW50MzJfdCBsZWZ0Ow0KPiArDQo+ICsJdWludDMyX3QgdG9wOw0KPiArDQo+ICsJ
dWludDMyX3QgcmlnaHQ7DQo+ICsNCj4gKwl1aW50MzJfdCBib3R0b207DQo+ICt9IF9fcGFj
a2VkIF9fYWxpZ25lZCg0KTsNCj4gKw0KPiArLyoqDQo+ICsgKiBAaW5ncm91cCBCRE1BDQo+
ICsgKiBAbmFtZSBNYXhpbXVtIEJETUEgdHJhbnNmZXJzDQo+ICsgKiBAYnJpZWYgQkRNQSBz
dXBwb3J0cyBtdWx0aXBsZSB0cmFuc2ZlcnMgaW4gb3BlcmF0aW9uLiBUaGlzIGluZGljYXRl
cw0KPiArICogICAgICAgIG1heGltdW0gbnVtYmVyIG9mIHRyYW5zZmVycyBwb3NzaWJsZSBp
biBvbmUgb3BlcmF0aW9uLg0KPiArICogQHsNCj4gKyAqLw0KPiArI2RlZmluZSBOVU1fTUFY
X0JETUFfT1BTCTIwDQo+ICsvKiogQH0gKi8NCj4gKw0KPiArc3RydWN0IGRsYV9iZG1hX3Ry
YW5zZmVyX2Rlc2Mgew0KPiArCWludDE2X3Qgc291cmNlX2FkZHJlc3M7DQo+ICsJaW50MTZf
dCBkZXN0aW5hdGlvbl9hZGRyZXNzOw0KPiArDQo+ICsJdWludDMyX3QgbGluZV9zaXplOw0K
PiArDQo+ICsJdWludDMyX3QgbGluZV9yZXBlYXQ7DQo+ICsNCj4gKwl1aW50MzJfdCBzb3Vy
Y2VfbGluZTsNCj4gKw0KPiArCXVpbnQzMl90IGRlc3RpbmF0aW9uX2xpbmU7DQo+ICsNCj4g
Kwl1aW50MzJfdCBzdXJmYWNlX3JlcGVhdDsNCj4gKw0KPiArCXVpbnQzMl90IHNvdXJjZV9z
dXJmYWNlOw0KPiArDQo+ICsJdWludDMyX3QgZGVzdGluYXRpb25fc3VyZmFjZTsNCj4gK30g
X19wYWNrZWQgX19hbGlnbmVkKDQpOw0KPiArDQo+ICtzdHJ1Y3QgZGxhX2JkbWFfc3VyZmFj
ZV9kZXNjIHsNCj4gKwl1aW50OF90IHNvdXJjZV90eXBlOw0KPiArCXVpbnQ4X3QgZGVzdGlu
YXRpb25fdHlwZTsNCj4gKwl1aW50MTZfdCBudW1fdHJhbnNmZXJzOw0KPiArDQo+ICsJc3Ry
dWN0IGRsYV9iZG1hX3RyYW5zZmVyX2Rlc2MgdHJhbnNmZXJzW05VTV9NQVhfQkRNQV9PUFNd
Ow0KPiArfSBfX3BhY2tlZCBfX2FsaWduZWQoNCk7DQo+ICsNCj4gK3N0cnVjdCBkbGFfYmRt
YV9vcF9kZXNjIHsNCj4gKwl1aW50MTZfdCBudW1fdHJhbnNmZXJzOw0KPiArCXVpbnQxNl90
IHJlc2VydmVkMDsNCj4gK30gX19wYWNrZWQgX19hbGlnbmVkKDQpOw0KPiArDQo+ICtzdHJ1
Y3QgZGxhX2JkbWFfc3RhdF9kZXNjIHsNCj4gKwl1aW50MzJfdCByZWFkX3N0YWxsOw0KPiAr
CXVpbnQzMl90IHdyaXRlX3N0YWxsOw0KPiArfSBfX3BhY2tlZCBfX2FsaWduZWQoNCk7DQo+
ICsNCj4gKy8qKg0KPiArICogQGluZ3JvdXAgQ29udm9sdXRpb24NCj4gKyAqIEBuYW1lIENv
bnZvbHV0aW9uIG1vZGUNCj4gKyAqIEBicmllZiBDb252b2x1dGlvbiBtb2RlcyBzdXBwb3J0
IGJ5IERMQQ0KPiArICogQHsNCj4gKyAqLw0KPiArI2RlZmluZSBDT05WX01PREVfRElSRUNU
CTANCj4gKyNkZWZpbmUgQ09OVl9NT0RFX1dJTk9HUkFECTENCj4gKy8qKiBAfSAqLw0KPiAr
DQo+ICsvKioNCj4gKyAqIEBpbmdyb3VwIFByb2Nlc3NvcnMNCj4gKyAqIEBuYW1lIFByZWNp
c2lvbiBCUEUgbWFwcGluZw0KPiArICogQGJyaWVmIFByZWNpc2lvbiBmb3JtYXRzIGFuZCBC
aXQgUGVyIEVsZW1lbnRzIG1hcHBpbmcNCj4gKyAqIEB7DQo+ICsgKi8NCj4gKyNkZWZpbmUg
QlBFX1BSRUNJU0lPTl9JTlQ4CQkxDQo+ICsjZGVmaW5lIEJQRV9QUkVDSVNJT05fSU5UMTYJ
CTINCj4gKyNkZWZpbmUgQlBFX1BSRUNJU0lPTl9GUDE2CQkyDQo+ICsvKiogQH0gKi8NCj4g
Kw0KPiArDQo+ICsvKioNCj4gKyAqIEBpbmdyb3VwIFByb2Nlc3NvcnMNCj4gKyAqIEBuYW1l
IFByZWNpc2lvbiB0eXBlcw0KPiArICogQGJyaWVmIFByZWNpc2lvbiBmb3JtYXRzIHN1cHBv
cnRlZCBieSBETEEgZW5naW5lDQo+ICsgKiBAew0KPiArICovDQo+ICsjZGVmaW5lIFBSRUNJ
U0lPTl9JTlQ4CQkwDQo+ICsjZGVmaW5lIFBSRUNJU0lPTl9JTlQxNgkJMQ0KPiArI2RlZmlu
ZSBQUkVDSVNJT05fRlAxNgkJMg0KPiArLyoqIEB9ICovDQo+ICsNCj4gKy8qKg0KPiArICog
QGluZ3JvdXAgUHJvY2Vzc29ycw0KPiArICogQG5hbWUgRGF0YSBmb3JtYXRzDQo+ICsgKiBA
YnJpZWYgRGF0YSBmb3JtYXRzIHN1cHBvcnRlZCBieSBETEEgZW5naW5lDQo+ICsgKiBAew0K
PiArICovDQo+ICsjZGVmaW5lIEZPUk1BVF9UX1I4CQkJMA0KPiArI2RlZmluZSBGT1JNQVRf
VF9SMTAJCQkxDQo+ICsjZGVmaW5lIEZPUk1BVF9UX1IxMgkJCTINCj4gKyNkZWZpbmUgRk9S
TUFUX1RfUjE2CQkJMw0KPiArI2RlZmluZSBGT1JNQVRfVF9SMTZfSQkJCTQNCj4gKyNkZWZp
bmUgRk9STUFUX1RfUjE2X0YJCQk1DQo+ICsjZGVmaW5lIEZPUk1BVF9UX0ExNkIxNkcxNlIx
NgkJNg0KPiArI2RlZmluZSBGT1JNQVRfVF9YMTZCMTZHMTZSMTYJCTcNCj4gKyNkZWZpbmUg
Rk9STUFUX1RfQTE2QjE2RzE2UjE2X0YJCTgNCj4gKyNkZWZpbmUgRk9STUFUX1RfQTE2WTE2
VTE2VjE2CQk5DQo+ICsjZGVmaW5lIEZPUk1BVF9UX1YxNlUxNlkxNkExNgkJMTANCj4gKyNk
ZWZpbmUgRk9STUFUX1RfQTE2WTE2VTE2VjE2X0YJCTExDQo+ICsjZGVmaW5lIEZPUk1BVF9U
X0E4QjhHOFI4CQkxMg0KPiArI2RlZmluZSBGT1JNQVRfVF9BOFI4RzhCOAkJMTMNCj4gKyNk
ZWZpbmUgRk9STUFUX1RfQjhHOFI4QTgJCTE0DQo+ICsjZGVmaW5lIEZPUk1BVF9UX1I4RzhC
OEE4CQkxNQ0KPiArI2RlZmluZSBGT1JNQVRfVF9YOEI4RzhSOAkJMTYNCj4gKyNkZWZpbmUg
Rk9STUFUX1RfWDhSOEc4QjgJCTE3DQo+ICsjZGVmaW5lIEZPUk1BVF9UX0I4RzhSOFg4CQkx
OA0KPiArI2RlZmluZSBGT1JNQVRfVF9SOEc4QjhYOAkJMTkNCj4gKyNkZWZpbmUgRk9STUFU
X1RfQTJCMTBHMTBSMTAJCTIwDQo+ICsjZGVmaW5lIEZPUk1BVF9UX0EyUjEwRzEwQjEwCQky
MQ0KPiArI2RlZmluZSBGT1JNQVRfVF9CMTBHMTBSMTBBMgkJMjINCj4gKyNkZWZpbmUgRk9S
TUFUX1RfUjEwRzEwQjEwQTIJCTIzDQo+ICsjZGVmaW5lIEZPUk1BVF9UX0EyWTEwVTEwVjEw
CQkyNA0KPiArI2RlZmluZSBGT1JNQVRfVF9WMTBVMTBZMTBBMgkJMjUNCj4gKyNkZWZpbmUg
Rk9STUFUX1RfQThZOFU4VjgJCQkyNg0KPiArI2RlZmluZSBGT1JNQVRfVF9WOFU4WThBOAkJ
CTI3DQo+ICsjZGVmaW5lIEZPUk1BVF9UX1k4X19fVThWOF9ONDQ0CQkyOA0KPiArI2RlZmlu
ZSBGT1JNQVRfVF9ZOF9fX1Y4VThfTjQ0NAkJMjkNCj4gKyNkZWZpbmUgRk9STUFUX1RfWTEw
X19fVTEwVjEwX040NDQJMzANCj4gKyNkZWZpbmUgRk9STUFUX1RfWTEwX19fVjEwVTEwX040
NDQJMzENCj4gKyNkZWZpbmUgRk9STUFUX1RfWTEyX19fVTEyVjEyX040NDQJMzINCj4gKyNk
ZWZpbmUgRk9STUFUX1RfWTEyX19fVjEyVTEyX040NDQJMzMNCj4gKyNkZWZpbmUgRk9STUFU
X1RfWTE2X19fVTE2VjE2X040NDQJMzQNCj4gKyNkZWZpbmUgRk9STUFUX1RfWTE2X19fVjE2
VTE2X040NDQJMzUNCj4gKyNkZWZpbmUgRk9STUFUX0ZFQVRVUkUJCQkzNg0KPiArLyoqIEB9
ICovDQo+ICsNCj4gKy8qKg0KPiArICogQGluZ3JvdXAgQ29udm9sdXRpb24NCj4gKyAqIEBu
YW1lIFBpeGVsIG1hcHBpbmcNCj4gKyAqIEBicmllZiBQaXhlbCBtYXBwaW5nIGZvcm1hdHMg
c3VwcG9ydGVkIGZvciBpbWFnZSBpbnB1dCBpbiBDb252b2x1dGlvbg0KPiArICogQHsNCj4g
KyAqLw0KPiArI2RlZmluZSBNQVBfUElUQ0hfTElORUFSCQkwDQo+ICsvKiogQH0gKi8NCj4g
Kw0KPiArLyoqDQo+ICsgKiBAaW5ncm91cCBDb252b2x1dGlvbg0KPiArICogQG5hbWUgV2Vp
Z2h0IGZvcm1hdHMNCj4gKyAqIEBicmllZiBXZWlnaHQgZGF0YSBmb3JtYXRzIHN1cHBvcnRl
ZCBpbiBDb252b2x1dGlvbg0KPiArICogQHsNCj4gKyAqLw0KPiArI2RlZmluZSBXRUlHSFRf
Rk9STUFUX1VOQ09NUFJFU1NFRAkwDQo+ICsjZGVmaW5lIFdFSUdIVF9GT1JNQVRfQ09NUFJF
U1NFRAkxDQo+ICsvKiogQH0gKi8NCj4gKw0KPiArLyoqDQo+ICsgKiBAaW5ncm91cCBDb252
b2x1dGlvbg0KPiArICogQG5hbWUgTWVhbiBkYXRhIGZvcm1hdA0KPiArICogQGJyaWVmIE1l
YW4gZGF0YSBmb3JtYXRzIHN1cHBvcnRlZCBpbiBDb252b2x1dGlvbg0KPiArICogQHsNCj4g
KyAqLw0KPiArI2RlZmluZSBNRUFOX0ZPUk1BVF9ESVNBQkxFICAgICAwDQo+ICsjZGVmaW5l
IE1FQU5fRk9STUFUX0VOQUJMRSAgICAgIDENCj4gKy8qKiBAfSAqLw0KPiArDQo+ICtzdHJ1
Y3QgZGxhX2N2dF9wYXJhbSB7DQo+ICsJaW50MTZfdCAgc2NhbGU7DQo+ICsJdWludDhfdCAg
dHJ1bmNhdGU7DQo+ICsJdWludDhfdCAgZW5hYmxlOw0KPiArDQo+ICsJaW50MzJfdCAgb2Zm
c2V0Ow0KPiArfSBfX3BhY2tlZCBfX2FsaWduZWQoNCk7DQo+ICsNCj4gK3N0cnVjdCBkbGFf
ZGF0YV9jdWJlIHsNCj4gKwl1aW50MTZfdCB0eXBlOyAvKiBkbGFfbWVtX3R5cGUgKi8NCj4g
KwlpbnQxNl90IGFkZHJlc3M7IC8qIG9mZnNldCB0byB0aGUgYWN0dWFsIElPVkEgaW4gdGFz
ay5hZGRyZXNzX2xpc3QgKi8NCj4gKw0KPiArCXVpbnQzMl90IG9mZnNldDsgLyogb2Zmc2V0
IHdpdGhpbiBhZGRyZXNzICovDQo+ICsJdWludDMyX3Qgc2l6ZTsNCj4gKw0KPiArCS8qIGN1
YmUgZGltZW5zaW9ucyAqLw0KPiArCXVpbnQxNl90IHdpZHRoOw0KPiArCXVpbnQxNl90IGhl
aWdodDsNCj4gKw0KPiArCXVpbnQxNl90IGNoYW5uZWw7DQo+ICsJdWludDE2X3QgcmVzZXJ2
ZWQwOw0KPiArDQo+ICsJLyogc3RyaWRlIGluZm9ybWF0aW9uICovDQo+ICsJdWludDMyX3Qg
bGluZV9zdHJpZGU7DQo+ICsJdWludDMyX3Qgc3VyZl9zdHJpZGU7DQo+ICsNCj4gKwkvKiBG
b3IgUnViaWsgb25seSAqLw0KPiArCXVpbnQzMl90IHBsYW5lX3N0cmlkZTsNCj4gK30gX19w
YWNrZWQgX19hbGlnbmVkKDQpOw0KPiArDQo+ICsjZGVmaW5lIFBJWEVMX09WRVJSSURFX1VJ
TlQgMA0KPiArI2RlZmluZSBQSVhFTF9PVkVSUklERV9JTlQgIDENCj4gKw0KPiArc3RydWN0
IGRsYV9jb252X3N1cmZhY2VfZGVzYyB7DQo+ICsJLyogRGF0YSBjdWJlICovDQo+ICsJc3Ry
dWN0IGRsYV9kYXRhX2N1YmUgd2VpZ2h0X2RhdGE7DQo+ICsJc3RydWN0IGRsYV9kYXRhX2N1
YmUgd21iX2RhdGE7DQo+ICsJc3RydWN0IGRsYV9kYXRhX2N1YmUgd2dzX2RhdGE7DQo+ICsJ
c3RydWN0IGRsYV9kYXRhX2N1YmUgc3JjX2RhdGE7DQo+ICsJc3RydWN0IGRsYV9kYXRhX2N1
YmUgZHN0X2RhdGE7DQo+ICsNCj4gKwkvKioNCj4gKwkgKiB1X2FkZHIgPSBpbnB1dF9kYXRh
LnNvdXJjZV9hZGRyICsgb2Zmc2V0X3UNCj4gKwkgKiB0aGlzIGZpZWxkIHNob3VsZCBiZSBz
ZXQgd2hlbiBZVVYgaXMgbm90IGludGVybGVhdmUgZm9ybWF0DQo+ICsJICoNCj4gKwkgKi8N
Cj4gKwlpbnQ2NF90IG9mZnNldF91Ow0KPiArDQo+ICsJLyogbGluZSBzdHJpZGUgZm9yIDJu
ZCBwbGFuZSwgbXVzdCBiZSAzMmJ5dGVzIGFsaWduZWQgKi8NCj4gKwl1aW50MzJfdCBpbl9s
aW5lX3V2X3N0cmlkZTsNCj4gK30gX19wYWNrZWQgX19hbGlnbmVkKDQpOw0KPiArDQo+ICtz
dHJ1Y3QgZGxhX2NvbnZfb3BfZGVzYyB7DQo+ICsJLyogUGVyZm9ybWFuY2UgcGFyYW1ldGVy
cyAqLw0KPiArDQo+ICsJLyogZGxhX2NvbnZfbW9kZSAqLw0KPiArCXVpbnQ4X3QgY29udl9t
b2RlOw0KPiArCXVpbnQ4X3QgZGF0YV9yZXVzZTsNCj4gKwl1aW50OF90IHdlaWdodF9yZXVz
ZTsNCj4gKwl1aW50OF90IHNraXBfZGF0YV9ybHM7DQo+ICsNCj4gKwl1aW50OF90IHNraXBf
d2VpZ2h0X3JsczsNCj4gKwl1aW50OF90IHJlc2VydmVkMDsNCj4gKwl1aW50MTZfdCBlbnRy
eV9wZXJfc2xpY2U7DQo+ICsNCj4gKwkvKiBkbGFfZGF0YV9mb3JtYXQgKi8NCj4gKwl1aW50
OF90IGRhdGFfZm9ybWF0Ow0KPiArCS8qIGRsYV9waXhlbF9tYXBwaW5nICovDQo+ICsJdWlu
dDhfdCBwaXhlbF9tYXBwaW5nOw0KPiArCS8qIG51bWJlciBvZiBmcmVlIHNsaWNlcyBiZWZv
cmUgZmV0Y2ggKi8NCj4gKwl1aW50MTZfdCBmZXRjaF9ncmFpbjsNCj4gKw0KPiArCXVpbnQ4
X3QgcmVzZXJ2ZWRfYls4XTsNCj4gKw0KPiArCS8qIGJhdGNoX251bSAqLw0KPiArCXVpbnQ4
X3QgYmF0Y2g7DQo+ICsJLyogZGxhX3dlaWdodF9mb3JtYXQgKi8NCj4gKwl1aW50OF90IHdl
aWdodF9mb3JtYXQ7DQo+ICsJdWludDhfdCBkYXRhX2Jhbms7DQo+ICsJdWludDhfdCB3ZWln
aHRfYmFuazsNCj4gKw0KPiArCS8qIHRoZSBvZmZzZXQgaW4gYnl0ZXMgb2YgZWFjaCBkYXRh
IGN1YmUgaW4gYSBiYXRjaCAqLw0KPiArCXVpbnQzMl90IGJhdGNoX3N0cmlkZTsNCj4gKw0K
PiArCXVpbnQ4X3QgcG9zdF9leHRlbnNpb247DQo+ICsJdWludDhfdCBwaXhlbF9vdmVycmlk
ZTsNCj4gKwkvKiBudW1iZXIgb2Ygc2xpY2VzIG5lZWQgdG8gYmUgcmVsZWFzZWQgKi8NCj4g
Kwl1aW50MTZfdCByZWxlYXNlOw0KPiArDQo+ICsJIC8qIFRoZSBpbnB1dCBjdWJlIGRpbWVu
c2lvbiBmb3IgQ1NDICovDQo+ICsJdWludDE2X3QgaW5wdXRfd2lkdGhfY3NjOw0KPiArCXVp
bnQxNl90IGlucHV0X2hlaWdodF9jc2M7DQo+ICsNCj4gKwl1aW50MTZfdCBpbnB1dF9jaGFu
bmVsX2NzYzsNCj4gKwl1aW50MTZfdCBrZXJuZWxfd2lkdGhfY3NjOw0KPiArDQo+ICsJdWlu
dDE2X3Qga2VybmVsX2hlaWdodF9jc2M7DQo+ICsJdWludDE2X3Qga2VybmVsX2NoYW5uZWxf
Y3NjOw0KPiArDQo+ICsJLyogVGhlIGlucHV0IGN1YmUgZGltZW5zaW9uIGZvciBDTUFDICov
DQo+ICsJdWludDE2X3QgaW5wdXRfd2lkdGhfY21hYzsNCj4gKwl1aW50MTZfdCBpbnB1dF9o
ZWlnaHRfY21hYzsNCj4gKw0KPiArCS8qIGFjdHVhbCBzaXplIGluIGJ5dGVzICovDQo+ICsJ
dWludDMyX3QgYnl0ZXNfcGVyX2tlcm5lbDsNCj4gKw0KPiArCS8qIEFsZ29yaXRobSBwYXJh
bWV0ZXJzICovDQo+ICsNCj4gKwlpbnQxNl90IG1lYW5fcnk7IC8qIG1lYW4gdmFsdWUgZm9y
IHJlZCBpbiBSR0Igb3IgWSBpbiBZVVYgKi8NCj4gKwlpbnQxNl90IG1lYW5fZ3U7IC8qIG1l
YW4gdmFsdWUgZm9yIGdyZWVuIGluIFJHQiBvciBVIGluIFlVViAqLw0KPiArDQo+ICsJaW50
MTZfdCBtZWFuX2J2OyAvKiBtZWFuIHZhbHVlIGZvciBibHVlIGluIFJHQiBvciBWIGluIFlV
ViAqLw0KPiArCWludDE2X3QgbWVhbl9heDsNCj4gKw0KPiArCXVpbnQ4X3QgbWVhbl9mb3Jt
YXQ7IC8qIGRsYV9tZWFuX2Zvcm1hdCAqLw0KPiArCXVpbnQ4X3QgY29udl9zdHJpZGVfeDsN
Cj4gKwl1aW50OF90IGNvbnZfc3RyaWRlX3k7DQo+ICsJdWludDhfdCBwYWRfeF9sZWZ0Ow0K
PiArDQo+ICsJdWludDhfdCBwYWRfeF9yaWdodDsNCj4gKwl1aW50OF90IHBhZF95X3RvcDsN
Cj4gKwl1aW50OF90IHBhZF95X2JvdHRvbTsNCj4gKwl1aW50OF90IGRpbGF0aW9uX3g7DQo+
ICsNCj4gKwl1aW50OF90IGRpbGF0aW9uX3k7DQo+ICsJdWludDhfdCByZXNlcnZlZDJbMl07
DQo+ICsNCj4gKwkvKiBQcmVjaXNpb24gcGFyYW1ldGVycyAqLw0KPiArCXVpbnQ4X3QgcHJh
X3RydW5jYXRlOw0KPiArDQo+ICsJdWludDhfdCBpbl9wcmVjaXNpb247DQo+ICsJLyogVGhl
IG91dHB1dCBwcmVjaXNpb24gZnJvbSBDT05WLCBpdCdzIHRoZSBNQUMgcHJvY2Vzc2luZyBw
cmVjaXNvbiAqLw0KPiArCXVpbnQ4X3Qgb3V0X3ByZWNpc2lvbjsNCj4gKwlpbnQxNl90IHBh
ZF92YWw7DQo+ICsNCj4gKwkvKiBpbnB1dCBjb252ZXJ0ZXIgcGFyYW1ldGVycyAqLw0KPiAr
CXN0cnVjdCBkbGFfY3Z0X3BhcmFtIGluX2N2dDsNCj4gKwkvKiBvdXRwdXQgY29udmVydGVy
IHBhcmFtZXRlcnMsIHN1cHBvcnQgdHJ1bmNhdGUgb25seSAqLw0KPiArCXN0cnVjdCBkbGFf
Y3Z0X3BhcmFtIG91dF9jdnQ7DQo+ICsNCj4gK30gX19wYWNrZWQgX19hbGlnbmVkKDQpOw0K
PiArDQo+ICtzdHJ1Y3QgZGxhX2NvbnZfc3RhdF9kZXNjIHsNCj4gKwl1aW50MzJfdCBkYXRh
X3JlYWRfc3RhbGw7DQo+ICsJdWludDMyX3Qgd2VpZ2h0X3JlYWRfc3RhbGw7DQo+ICsJdWlu
dDMyX3QgZGF0YV9yZWFkX2xhdGVuY3k7DQo+ICsJdWludDMyX3Qgd2VpZ2h0X3JlYWRfbGF0
ZW5jeTsNCj4gKwl1aW50MzJfdCBzYXR1cmF0aW9uX2NvdW50Ow0KPiArCXVpbnQzMl90IG5h
bl9kYXRhX251bTsNCj4gKwl1aW50MzJfdCBuYW5fd2VpZ2h0X251bTsNCj4gKwl1aW50MzJf
dCBpbmZfZGF0YV9udW07DQo+ICsJdWludDMyX3QgaW5mX3dlaWdodF9udW07DQo+ICt9IF9f
cGFja2VkIF9fYWxpZ25lZCg0KTsNCj4gKw0KPiArLyoqDQo+ICsgKiBAaW5ncm91cCBTRFAN
Cj4gKyAqIEBuYW1lIEFjdGl2YXRpb24gZnVuY3Rpb25zDQo+ICsgKiBAYnJpZWYgQWN0aXZh
dGlvbiBmdW5jdGlvbnMgc3VwcG9ydGVkIGluIFNEUA0KPiArICogQHsNCj4gKyAqLw0KPiAr
I2RlZmluZSBBQ1RJVkFUSU9OX05PTkUJCTANCj4gKyNkZWZpbmUgQUNUSVZBVElPTl9SRUxV
CQkxDQo+ICsjZGVmaW5lIEFDVElWQVRJT05fTFVUCQkyDQo+ICsjZGVmaW5lIEFDVElWQVRJ
T05fUFJFTFUJMw0KPiArLyoqIEB9ICovDQo+ICsNCj4gKy8qKg0KPiArICogQGluZ3JvdXAg
TFVUDQo+ICsgKiBAbmFtZSBMVVQgc2l6ZQ0KPiArICogQGJyaWVmIExVVCBzaXplcyBmb3Ig
bGluZWFyIGFuZCBleHBvbmVudGlsYSBMVVQNCj4gKyAqIEB7DQo+ICsgKi8NCj4gKyNkZWZp
bmUgTFVUX0xJTkVBUl9FWFBfVEFCTEVfRU5UUllfTE9HMgkJNg0KPiArI2RlZmluZSBMVVRf
TElORUFSX09OTFlfVEFCTEVfRU5UUllfTE9HMgk4DQo+ICsvKiogQH0gKi8NCj4gKw0KPiAr
LyoqDQo+ICsgKiBAaW5ncm91cCBMVVQNCj4gKyAqIEBuYW1lIExVVCB0eXBlcw0KPiArICog
QGJyaWVmIERMQSBzdXBwb3J0cyB0d28gdHlwZXMgb2YgTFVULCBsaW5lYXIgYW5kIGV4b25l
bnRpYWwNCj4gKyAqIEB7DQo+ICsgKi8NCj4gKyNkZWZpbmUgTFVUX0xJTkVBUl9FWFBfVEFC
TEUJCTANCj4gKyNkZWZpbmUgTFVUX0xJTkVBUl9PTkxZX1RBQkxFCQkxDQo+ICsvKiogQH0g
Ki8NCj4gKw0KPiArLyoqDQo+ICsgKiBAaW5ncm91cCBMVVQNCj4gKyAqIEBuYW1lIExVVCBt
ZXRob2RzDQo+ICsgKiBAYnJpZWYgRExBIHN1cHBvcnRzIHR3byB0eXBlcyBvZiBMVVQsIGxp
bmVhciBhbmQgZXhvbmVudGlhbA0KPiArICogQHsNCj4gKyAqLw0KPiArI2RlZmluZSBMVVRf
TUVUSE9EX0VYUE9ORU5USUFMCQkwDQo+ICsjZGVmaW5lIExVVF9NRVRIT0RfTElORUFSCQkx
DQo+ICsvKiogQH0gKi8NCj4gKw0KPiArLyoqDQo+ICsgKiBAaW5ncm91cCBMVVQNCj4gKyAq
IEBuYW1lIExVVA0KPiArICogQGJyaWVmIERMQSBzdXBwb3J0cyB0d28gdHlwZXMgb2YgTFVU
LCBsaW5lYXIgYW5kIGV4b25lbnRpYWwNCj4gKyAqIEB7DQo+ICsgKi8NCj4gKyNkZWZpbmUg
TFVUX1BSSV9MSU5FQVJfRVhQCQkwDQo+ICsjZGVmaW5lIExVVF9QUklfTElORUFSX09OTFkJ
CTENCj4gKy8qKiBAfSAqLw0KPiArDQo+ICt1bmlvbiBkbGFfbHV0X29mZnNldCB7DQo+ICsJ
LyoqDQo+ICsJICogTnVtYmVyIHNob3VsZCBiZSBzdWJzdHJhY3RlZCBvbiBsb2cgZG9tYWlu
IGJlZm9yZSBsb29rIHVwDQo+ICsJICogZXhwb25ldGlhbCB0YWJsZSBpdCBoYXMgdGhlIHNh
bWUgZGVmaW5pdGlvbiBhcyBoYXJkd2FyZQ0KPiArCSAqIHRodXMgaW5wdXQgc2NhbGluZyBz
aG91bGQgYWxzbyB0YWtlIGludG8gYWNjb3VudCB3aGVuDQo+ICsJICogc2V0IHRoaXMgZmll
bGQuDQo+ICsJICovDQo+ICsJaW50OF90IGV4cF9vZmZzZXQ7DQo+ICsJLyoqDQo+ICsJICog
TnVtYmVyIG9mIGJpdHMgc2hvdWxkIGJlIHJpZ2h0IHNoaWZ0IGJlZm9yZSBsb29raW5nDQo+
ICsJICogdXAgbGluZWFyIHRhYmxlDQo+ICsJICovDQo+ICsJaW50OF90IGZyYWNfYml0czsN
Cj4gKwl1aW50MTZfdCByZXNlcnZlZDA7DQo+ICt9Ow0KPiArDQo+ICsvKioNCj4gKyAqIFRo
aXMgc3RydWN0IGlzIHVzZWQgdG8gcmVwcmVzZW50IGZsb2F0aW5nIHBvaW50IHZhbHVlcyBi
eSBJTlQNCj4gKyAqIHN1cHBvc2Ugd2UgaGF2ZSBhIGZsb2F0IHBvaW50IG51bWJlciBmcF94
LCBpdCB3aWxsIGJlIHJlcHJlc2VudGVkDQo+ICsgKiBhczoNCj4gKyAqDQo+ICsgKiBmcF94
ID0gc2NhbGVfaW50X3g+PihzaGlmdGVyX3gpDQo+ICsgKg0KPiArICogVGhpcyBpcyB2ZXJ5
IHVzZWZ1bCBmb3IgSU5UIHBpcGVsaW5lOw0KPiArICovDQo+ICtzdHJ1Y3QgZGxhX2Zsb2F0
X2RhdGEgew0KPiArCWludDE2X3Qgc2NhbGU7DQo+ICsJaW50OF90IHNoaWZ0ZXI7DQo+ICsJ
dWludDhfdCByZXNlcnZlZDA7DQo+ICt9IF9fcGFja2VkIF9fYWxpZ25lZCg0KTsNCj4gKw0K
PiArLyoqDQo+ICsgKiBGb3IgSU5UIHBpcGVsaW5lLCB3ZSB1c2UgdGhlIHN0cnVjdCBhYm92
ZSB0byByZXByZXNlbnQgYSBmbG9hdGluZyBudW1iZXI7DQo+ICsgKiBGb3IgRlAxNiBwaXBl
bGluZSwgd2Ugc2hvdWxkIHN0b3JlIHRoZSBGUDE2IGVuY29kZWQgdmFsdWUgaW50byBhIHVp
bnQxNl90DQo+ICsgKiBjb250YWluZXINCj4gKyAqLw0KPiArdW5pb24gZGxhX3Nsb3BlIHsN
Cj4gKwlzdHJ1Y3QgZGxhX2Zsb2F0X2RhdGEgZGF0YV9pOw0KPiArDQo+ICsJdWludDE2X3Qg
ZGF0YV9mOw0KPiArfTsNCj4gKw0KPiArc3RydWN0IGRsYV9sdXRfcGFyYW0gew0KPiArCS8q
Kg0KPiArCSAqIHZhbHVlIG9mIGV4cHJlc3Npb24gKCgxPDxMVVRfTElORUFSX0VYUF9UQUJM
RV9FTlRSWV9MT0cyKSsxKSBpcyA2NSwNCj4gKwkgKiAoKDE8PExVVF9MSU5FQVJfT05MWV9U
QUJMRV9FTlRSWV9MT0cyKSsxKSBpcyAyNTcsIGFuZCBpbnQxNl90IGlzIG9mDQo+ICsJICog
MkJ5dGUuIEFuZCBiZWxvdyB0d28gc3RhdGVtZW50J3MgY29tYmluZWQgbWVtb3J5IHNpemUg
aXMgNjQ0IEJ5dGUuDQo+ICsJICoNCj4gKwkgKiBOT1RFOiBiZWxvdyB0d28gZGVjbGFyYXRp
b24gY29tYmluZWQgc2l6ZSBzaG91bGQgYWx3YXlzIGJlIG11bHRpcGxlDQo+ICsJICogb2Yg
NC4NCj4gKwkgKi8NCj4gKwlpbnQxNl90IGxpbmVhcl9leHBfdGFibGVbKDE8PExVVF9MSU5F
QVJfRVhQX1RBQkxFX0VOVFJZX0xPRzIpKzFdOw0KPiArCWludDE2X3QgbGluZWFyX29ubHlf
dGFibGVbKDE8PExVVF9MSU5FQVJfT05MWV9UQUJMRV9FTlRSWV9MT0cyKSsxXTsNCj4gKw0K
PiArCXVuaW9uIGRsYV9sdXRfb2Zmc2V0IGxpbmVhcl9leHBfb2Zmc2V0Ow0KPiArCXVuaW9u
IGRsYV9sdXRfb2Zmc2V0IGxpbmVhcl9vbmx5X29mZnNldDsNCj4gKw0KPiArCS8qKg0KPiAr
CSAqIFRoZSBzdGFydCBhbmQgZW5kIHBvaW50IG9mIHJhdyB0YWJsZSwNCj4gKwkgKiB2YWxp
ZCB3aGVuIHJhd19tZXRob2Q9TElORUFSIG9ubHkNCj4gKwkgKi8NCj4gKwl1aW50NjRfdCBs
aW5lYXJfZXhwX3N0YXJ0Ow0KPiArCXVpbnQ2NF90IGxpbmVhcl9leHBfZW5kOw0KPiArCXVp
bnQ2NF90IGxpbmVhcl9vbmx5X3N0YXJ0Ow0KPiArCXVpbnQ2NF90IGxpbmVhcl9vbmx5X2Vu
ZDsNCj4gKw0KPiArCXVuaW9uIGRsYV9zbG9wZSBsaW5lYXJfZXhwX3VuZGVyZmxvd19zbG9w
ZTsNCj4gKwl1bmlvbiBkbGFfc2xvcGUgbGluZWFyX2V4cF9vdmVyZmxvd19zbG9wZTsNCj4g
Kwl1bmlvbiBkbGFfc2xvcGUgbGluZWFyX29ubHlfdW5kZXJmbG93X3Nsb3BlOw0KPiArCXVu
aW9uIGRsYV9zbG9wZSBsaW5lYXJfb25seV9vdmVyZmxvd19zbG9wZTsNCj4gKw0KPiArCS8q
Kg0KPiArCSAqIGRsYV9sdXRfcHJpb3JpdHksIHdoZW4gYm90aCBsdXQgYXJlIGhpdChvciBv
bmUgb3ZlcmZsb3csDQo+ICsJICogdGhlIG90aGVyIHVuZGVyZmxvdyksIHdoaWNoIG9uZSBz
aG91bGQgYmUgc2VsZWN0ZWQgYXMgb3V0cHV0DQo+ICsJICovDQo+ICsJdWludDhfdCBoeWJy
aWRfcHJpb3JpdHk7DQo+ICsJdWludDhfdCB1bmRlcmZsb3dfcHJpb3JpdHk7DQo+ICsJdWlu
dDhfdCBvdmVyZmxvd19wcmlvcml0eTsNCj4gKwl1aW50OF90IG1ldGhvZDsgLyogZGxhX2x1
dF9tZXRob2QgKi8NCj4gK30gX19wYWNrZWQgX19hbGlnbmVkKDQpOw0KPiArDQo+ICtzdHJ1
Y3QgZGxhX3NkcF9zdXJmYWNlX2Rlc2Mgew0KPiArCS8qIERhdGEgY3ViZSAqLw0KPiArCS8q
IHNvdXJjZSBpbnB1dCBjdWJlLCBhdmFpbGFibGUgd2hlbiBTRFAgd29ya2luZyBvbiBvZmZs
aW5lIG1vZGUgKi8NCj4gKwlzdHJ1Y3QgZGxhX2RhdGFfY3ViZSBzcmNfZGF0YTsNCj4gKw0K
PiArCS8qIFgxIGlucHV0IGN1YmUgKi8NCj4gKwlzdHJ1Y3QgZGxhX2RhdGFfY3ViZSB4MV9k
YXRhOw0KPiArDQo+ICsJLyogWDIgaW5wdXQgY3ViZSAqLw0KPiArCXN0cnVjdCBkbGFfZGF0
YV9jdWJlIHgyX2RhdGE7DQo+ICsNCj4gKwkvKiBZIGlucHV0IGN1YmUgKi8NCj4gKwlzdHJ1
Y3QgZGxhX2RhdGFfY3ViZSB5X2RhdGE7DQo+ICsNCj4gKwkvKiBPdXRwdXQgY3ViZSAqLw0K
PiArCXN0cnVjdCBkbGFfZGF0YV9jdWJlIGRzdF9kYXRhOw0KPiArfSBfX3BhY2tlZCBfX2Fs
aWduZWQoNCk7DQo+ICsNCj4gKyNkZWZpbmUgU0RQX09QX05PTkUJCTANCj4gKyNkZWZpbmUg
U0RQX09QX01VTAkJMQ0KPiArI2RlZmluZSBTRFBfT1BfQURECQkyDQo+ICsjZGVmaW5lIFNE
UF9PUF9CT1RICQkzDQo+ICsNCj4gKyNkZWZpbmUgU0RQX0FMVV9PUF9NQVgJCTANCj4gKyNk
ZWZpbmUgU0RQX0FMVV9PUF9NSU4JCTENCj4gKyNkZWZpbmUgU0RQX0FMVV9PUF9TVU0JCTIN
Cj4gKyNkZWZpbmUgU0RQX0FMVV9PUF9FUUwJCTMNCj4gKw0KPiArI2RlZmluZSBTRFBfT1Bf
UEVSX0xBWUVSCTANCj4gKyNkZWZpbmUgU0RQX09QX1BFUl9LRVJORUwJMQ0KPiArI2RlZmlu
ZSBTRFBfT1BfUEVSX1BPSU5UCTINCj4gKw0KPiArc3RydWN0IGRsYV9zZHBfY3Z0IHsNCj4g
KwlzdHJ1Y3QgZGxhX2N2dF9wYXJhbSBhbHVfY3Z0Ow0KPiArCXN0cnVjdCBkbGFfY3Z0X3Bh
cmFtIG11bF9jdnQ7DQo+ICt9IF9fcGFja2VkIF9fYWxpZ25lZCg0KTsNCj4gKw0KPiArc3Ry
dWN0IGRsYV9zZHBfb3Agew0KPiArCXVpbnQ4X3QgZW5hYmxlOw0KPiArCXVpbnQ4X3QgYWx1
X3R5cGU7IC8qIGRsYV9zZHBfYWx1X29wX3R5cGUgKi8NCj4gKwl1aW50OF90IHR5cGU7IC8q
IGRsYV9zZHBfb3BfdHlwZSAqLw0KPiArCXVpbnQ4X3QgbW9kZTsgLyogZGxhX3NkcF9vcF9t
b2RlICovDQo+ICsNCj4gKwl1aW50OF90IGFjdDsgLyogZGxhX2FjdF90eXBlICovDQo+ICsJ
dWludDhfdCBzaGlmdF92YWx1ZTsgLyogbGVmdCBzaGlmdCAqLw0KPiArCXVpbnQ4X3QgdHJ1
bmNhdGU7DQo+ICsJdWludDhfdCBwcmVjaXNpb247DQo+ICsNCj4gKwlpbnQzMl90IGFsdV9v
cGVyYW5kOw0KPiArCWludDMyX3QgbXVsX29wZXJhbmQ7DQo+ICsNCj4gKwlzdHJ1Y3QgZGxh
X3NkcF9jdnQgIGN2dDsNCj4gK30gX19wYWNrZWQgX19hbGlnbmVkKDQpOw0KPiArDQo+ICtz
dHJ1Y3QgZGxhX3NkcF9vcF9kZXNjIHsNCj4gKwkvKiBQcmVjaXNpb24gcGFyYW1ldGVycyAq
Lw0KPiArCS8qIGRsYV9wcmVjaXNpb24gKi8NCj4gKwl1aW50OF90IHNyY19wcmVjaXNpb247
DQo+ICsJdWludDhfdCBkc3RfcHJlY2lzaW9uOw0KPiArCWludDE2X3QgbHV0X2luZGV4Ow0K
PiArDQo+ICsJc3RydWN0IGRsYV9jdnRfcGFyYW0gb3V0X2N2dDsNCj4gKw0KPiArCS8qIFBl
cmZvcm1hbmNlIHBhcmFtZXRlcnMgKi8NCj4gKwkvKiBkbGFfY29udl9tb2RlICovDQo+ICsJ
dWludDhfdCBjb252X21vZGU7DQo+ICsJdWludDhfdCBiYXRjaF9udW07DQo+ICsJdWludDE2
X3QgcmVzZXJ2ZWQwOw0KPiArDQo+ICsJdWludDMyX3QgYmF0Y2hfc3RyaWRlOwkvKiB3aWxs
IGJlIHVzZWQgd2hlbiBiYXRjaF9udW0gPiAxICovDQo+ICsNCj4gKwkvKiBBbGdvcml0aG0g
cGFyYW1ldGVycyAqLw0KPiArCXN0cnVjdCBkbGFfc2RwX29wIHgxX29wOw0KPiArCXN0cnVj
dCBkbGFfc2RwX29wIHgyX29wOw0KPiArCXN0cnVjdCBkbGFfc2RwX29wIHlfb3A7DQo+ICt9
IF9fcGFja2VkIF9fYWxpZ25lZCg0KTsNCj4gKw0KPiArI2RlZmluZSBQT09MX01PREVfQVZH
CQkwDQo+ICsjZGVmaW5lIFBPT0xfTU9ERV9NQVgJCTENCj4gKyNkZWZpbmUgUE9PTF9NT0RF
X01JTgkJMg0KPiArDQo+ICsjZGVmaW5lIFBPT0xfU0laRV8xCQkwDQo+ICsjZGVmaW5lIFBP
T0xfU0laRV8yCQkxDQo+ICsjZGVmaW5lIFBPT0xfU0laRV8zCQkyDQo+ICsjZGVmaW5lIFBP
T0xfU0laRV80CQkzDQo+ICsjZGVmaW5lIFBPT0xfU0laRV81CQk0DQo+ICsjZGVmaW5lIFBP
T0xfU0laRV82CQk1DQo+ICsjZGVmaW5lIFBPT0xfU0laRV83CQk2DQo+ICsjZGVmaW5lIFBP
T0xfU0laRV84CQk3DQo+ICsNCj4gKyNkZWZpbmUgUERQX1BBRF9WQUxfTlVNCTcNCj4gKw0K
PiArc3RydWN0IGRsYV9wZHBfc3VyZmFjZV9kZXNjIHsNCj4gKwkvKiBEYXRhIGN1YmUgKi8N
Cj4gKwlzdHJ1Y3QgZGxhX2RhdGFfY3ViZSBzcmNfZGF0YTsNCj4gKw0KPiArCXN0cnVjdCBk
bGFfZGF0YV9jdWJlIGRzdF9kYXRhOw0KPiArfSBfX3BhY2tlZCBfX2FsaWduZWQoNCk7DQo+
ICsNCj4gK3N0cnVjdCBkbGFfcGRwX29wX2Rlc2Mgew0KPiArCS8qIFBlcmZvcm1hbmNlIHBh
cmFtZXRlcnMgKi8NCj4gKwl1aW50MTZfdCAgcGFydGlhbF9pbl93aWR0aF9maXJzdDsNCj4g
Kwl1aW50MTZfdCAgcGFydGlhbF9pbl93aWR0aF9taWQ7DQo+ICsNCj4gKwl1aW50MTZfdCAg
cGFydGlhbF9pbl93aWR0aF9sYXN0Ow0KPiArCXVpbnQxNl90ICBwYXJ0aWFsX3dpZHRoX2Zp
cnN0Ow0KPiArDQo+ICsJdWludDE2X3QgIHBhcnRpYWxfd2lkdGhfbWlkOw0KPiArCXVpbnQx
Nl90ICBwYXJ0aWFsX3dpZHRoX2xhc3Q7DQo+ICsNCj4gKwl1aW50OF90ICAgc3BsaXRfbnVt
Ow0KPiArDQo+ICsJLyogQWxnb3JpdGhtIHBhcmFtZXRlcnMgKi8NCj4gKwl1aW50OF90ICBw
b29sX21vZGU7IC8qIGRsYV9wb29sX21vZGUgKi8NCj4gKwl1aW50OF90ICBwb29sX3dpZHRo
OyAvKiBkbGFfcG9vbF93aWR0aCAqLw0KPiArCXVpbnQ4X3QgIHBvb2xfaGVpZ2h0OyAvKiBk
bGFfcG9vbF9oZWlnaHQgKi8NCj4gKw0KPiArCXVpbnQ4X3QgIHN0cmlkZV94Ow0KPiArCXVp
bnQ4X3QgIHN0cmlkZV95Ow0KPiArDQo+ICsJLyoqDQo+ICsJICogVGhlIGxlZnQvcmlnaHQg
cGFkZGluZyBzaXplLA0KPiArCSAqIHBhZF9yaWdodCBtaWdodCBiZSBsZXNzIHRoYW4gcGFk
X2xlZnQNCj4gKwkgKi8NCj4gKwl1aW50OF90ICBwYWRfbGVmdDsNCj4gKwl1aW50OF90ICBw
YWRfcmlnaHQ7DQo+ICsNCj4gKwkvKiBUaGUgdG9wL2JvdHRvbSBwYWRkaW5nIHNpemUgKi8N
Cj4gKwl1aW50OF90ICBwYWRfdG9wOw0KPiArCXVpbnQ4X3QgIHBhZF9ib3R0b207DQo+ICsN
Cj4gKwkvKiBQcmVjaXNpb24gcGFyYW1ldGVycyAqLw0KPiArCXVpbnQ4X3QgIHByZWNpc2lv
bjsgLyogZGxhX3ByZWNpc2lvbiAqLw0KPiArCXVpbnQ4X3QgIHJlc2VydmVkMDsNCj4gKwkv
KioNCj4gKwkgKiBpZiBpbnB1dCBoYXMgbm9uLXplcm8gIm9mZnNldCIsIHRoaXMgdmFsdWUg
c2hvdWxkIGJlIHNldA0KPiArCSAqIFRoZXJlJ2xsIGJlIDcgZGlmZmVyZW50IHBhZGRkaW5n
IHZhbHVlcywgdGhlIHJlbGF0aW9uc2hpcCBiZXR3ZWVuDQo+ICsJICogdGhvc2UgdmVyc2lv
bnMgYXJlOg0KPiArCSAqIHBhZGRpbmdfdmFsdWVbMF0gPSAtb2Zmc2V0KnNjYWxpbmc7DQo+
ICsJICogcGFkZGluZ192YWx1ZVsxXSA9IDIqcGFkZGluZ192YWx1ZVswXQ0KPiArCSAqIHBh
ZGRpbmdfdmFsdWVbMl0gPSAzKnBhZGRpbmdfdmFsdWVbMF0NCj4gKwkgKiAuLi4NCj4gKwkg
KiBUaGUgcHVycG9zZSBpcyB0byBhdm9pZCB1Y29kZSBpbXBsZW1lbnQgRlAxNg0KPiArCSAq
IG11bHRpcGxpZXIoZm9yIEZQMTYgbW9kZSkNCj4gKwkgKi8NCj4gKwlpbnQzMl90ICBwYWRk
aW5nX3ZhbHVlW1BEUF9QQURfVkFMX05VTV07DQo+ICt9IF9fcGFja2VkIF9fYWxpZ25lZCg0
KTsNCj4gKw0KPiArc3RydWN0IGRsYV9wZHBfc3RhdF9kZXNjIHsNCj4gKwl1aW50MzJfdCBp
bmZfaW5wdXRfbnVtOw0KPiArCXVpbnQzMl90IG5hbl9pbnB1dF9udW07DQo+ICsJdWludDMy
X3QgbmFuX291dHB1dF9udW07DQo+ICsJdWludDMyX3Qgd3JpdGVfc3RhbGw7DQo+ICsJdWlu
dDMyX3QgcnVudGltZTsNCj4gK30gX19wYWNrZWQgX19hbGlnbmVkKDQpOw0KPiArDQo+ICtz
dHJ1Y3QgZGxhX2NkcF9zdXJmYWNlX2Rlc2Mgew0KPiArCS8qIERhdGEgY3ViZSAqLw0KPiAr
CXN0cnVjdCBkbGFfZGF0YV9jdWJlIHNyY19kYXRhOw0KPiArDQo+ICsJc3RydWN0IGRsYV9k
YXRhX2N1YmUgZHN0X2RhdGE7DQo+ICt9IF9fcGFja2VkIF9fYWxpZ25lZCg0KTsNCj4gKw0K
PiArc3RydWN0IGRsYV9jZHBfb3BfZGVzYyB7DQo+ICsJLyogUHJlY2lzaW9uIHBhcmFtZXRl
cnMgKi8NCj4gKw0KPiArCS8qIGRsYV9wcmVjaXNpb24gKi8NCj4gKwl1aW50OF90ICBpbl9w
cmVjaXNpb247DQo+ICsJdWludDhfdCAgb3V0X3ByZWNpc2lvbjsNCj4gKwlpbnQxNl90ICBs
dXRfaW5kZXg7DQo+ICsNCj4gKwlzdHJ1Y3QgZGxhX2N2dF9wYXJhbSBpbl9jdnQ7DQo+ICsJ
c3RydWN0IGRsYV9jdnRfcGFyYW0gb3V0X2N2dDsNCj4gKw0KPiArCS8qIFBlcmZvcm1hbmNl
IHBhcmFtZXRlcnMgKi8NCj4gKw0KPiArCS8qIEFsZ29yaXRobSBwYXJhbWV0ZXJzICovDQo+
ICsJdWludDhfdCAgbG9jYWxfc2l6ZTsNCj4gKwl1aW50OF90ICBieXBhc3Nfc3FzdW07DQo+
ICsJdWludDhfdCAgYnlwYXNzX291dF9tdWw7DQo+ICsJdWludDhfdCAgcmVzZXJ2ZWQwOw0K
PiArfSBfX3BhY2tlZCBfX2FsaWduZWQoNCk7DQo+ICsNCj4gK3N0cnVjdCBkbGFfY2RwX3N0
YXRfZGVzYyB7DQo+ICsJdWludDMyX3QgbmFuX2lucHV0X251bTsNCj4gKwl1aW50MzJfdCBp
bmZfaW5wdXRfbnVtOw0KPiArCXVpbnQzMl90IG5hbl9vdXRwdXRfbnVtOw0KPiArCXVpbnQz
Ml90IHdyaXRlX3N0YWxsOw0KPiArCXVpbnQzMl90IGx1dF91ZmxvdzsNCj4gKwl1aW50MzJf
dCBsdXRfb2Zsb3c7DQo+ICsJdWludDMyX3QgbHV0X2h5YnJpZDsNCj4gKwl1aW50MzJfdCBs
dXRfbGVfaGl0Ow0KPiArCXVpbnQzMl90IGx1dF9sb19oaXQ7DQo+ICsJdWludDMyX3Qgc2F0
dXJhdGlvbl9jb3VudDsNCj4gKwl1aW50MzJfdCBydW50aW1lOw0KPiArfSBfX3BhY2tlZCBf
X2FsaWduZWQoNCk7DQo+ICsNCj4gK3N0cnVjdCBkbGFfcnViaWtfc3VyZmFjZV9kZXNjIHsN
Cj4gKwkvKiBEYXRhIGN1YmUgKi8NCj4gKwlzdHJ1Y3QgZGxhX2RhdGFfY3ViZSBzcmNfZGF0
YTsNCj4gKw0KPiArCXN0cnVjdCBkbGFfZGF0YV9jdWJlIGRzdF9kYXRhOw0KPiArfSBfX3Bh
Y2tlZCBfX2FsaWduZWQoNCk7DQo+ICsNCj4gKy8qIHJ1YmlrIG1vZGUgKi8NCj4gKyNkZWZp
bmUgUlVCSUtfTU9ERV9DT05UUkFDVAkwDQo+ICsjZGVmaW5lIFJVQklLX01PREVfU1BMSVQJ
MQ0KPiArI2RlZmluZSBSVUJJS19NT0RFX01FUkdFCTINCj4gKw0KPiArc3RydWN0IGRsYV9y
dWJpa19vcF9kZXNjIHsNCj4gKwkvKiBQcmVjaXNpb24gcGFyYW1ldGVycyAqLw0KPiArCXVp
bnQ4X3QgbW9kZTsNCj4gKwl1aW50OF90IHByZWNpc2lvbjsNCj4gKwl1aW50OF90IHN0cmlk
ZV94Ow0KPiArCXVpbnQ4X3Qgc3RyaWRlX3k7DQo+ICt9IF9fcGFja2VkIF9fYWxpZ25lZCg0
KTsNCj4gKw0KPiArc3RydWN0IGRsYV9ydWJpa19zdGF0X2Rlc2Mgew0KPiArCXVpbnQzMl90
IHJlYWRfc3RhbGw7DQo+ICsJdWludDMyX3Qgd3JpdGVfc3RhbGw7DQo+ICsJdWludDMyX3Qg
cnVudGltZTsNCj4gK30gX19wYWNrZWQgX19hbGlnbmVkKDQpOw0KPiArDQo+ICt1bmlvbiBk
bGFfc3VyZmFjZV9jb250YWluZXIgew0KPiArCXN0cnVjdCBkbGFfYmRtYV9zdXJmYWNlX2Rl
c2MgYmRtYV9zdXJmYWNlOw0KPiArCXN0cnVjdCBkbGFfY29udl9zdXJmYWNlX2Rlc2MgY29u
dl9zdXJmYWNlOw0KPiArCXN0cnVjdCBkbGFfc2RwX3N1cmZhY2VfZGVzYyBzZHBfc3VyZmFj
ZTsNCj4gKwlzdHJ1Y3QgZGxhX3BkcF9zdXJmYWNlX2Rlc2MgcGRwX3N1cmZhY2U7DQo+ICsJ
c3RydWN0IGRsYV9jZHBfc3VyZmFjZV9kZXNjIGNkcF9zdXJmYWNlOw0KPiArCXN0cnVjdCBk
bGFfcnViaWtfc3VyZmFjZV9kZXNjIHJ1YmlrX3N1cmZhY2U7DQo+ICt9Ow0KPiArDQo+ICt1
bmlvbiBkbGFfb3BlcmF0aW9uX2NvbnRhaW5lciB7DQo+ICsJc3RydWN0IGRsYV9iZG1hX29w
X2Rlc2MgYmRtYV9vcDsNCj4gKwlzdHJ1Y3QgZGxhX2NvbnZfb3BfZGVzYyBjb252X29wOw0K
PiArCXN0cnVjdCBkbGFfc2RwX29wX2Rlc2Mgc2RwX29wOw0KPiArCXN0cnVjdCBkbGFfcGRw
X29wX2Rlc2MgcGRwX29wOw0KPiArCXN0cnVjdCBkbGFfY2RwX29wX2Rlc2MgY2RwX29wOw0K
PiArCXN0cnVjdCBkbGFfcnViaWtfb3BfZGVzYyBydWJpa19vcDsNCj4gK307DQo+ICsNCj4g
K3N0cnVjdCBkbGFfZW5naW5lOw0KPiArdm9pZCB1cGRhdGVfbHV0KHN0cnVjdCBkbGFfZW5n
aW5lICplbmdpbmUsIHVpbnQzMl90IHJlZ19iYXNlLA0KPiArCQlzdHJ1Y3QgZGxhX2x1dF9w
YXJhbSAqbHV0LA0KPiArCQl1aW50OF90IHByZWNpc2lvbik7DQo+ICtpbnQzMl90IHZhbGlk
YXRlX2RhdGFfY3ViZShzdHJ1Y3QgZGxhX2RhdGFfY3ViZSBzcmNfZGF0YV9jdWJlLA0KPiAr
CQkJc3RydWN0IGRsYV9kYXRhX2N1YmUgZHN0X2RhdGFfY3ViZSwNCj4gKwkJCXVpbnQ4X3Qg
bWVtX3R5cGUpOw0KPiAraW50MzJfdCB2YWxpZGF0ZV9wcmVjaXNpb24odWludDhfdCBwcmVj
aXNpb24sDQo+ICsJCQl1aW50OF90IG1hcF9wcmVjaXNpb24pOw0KPiArDQo+ICsjZW5kaWYN
Cj4gZGlmZiAtLWdpdCBhL2RyaXZlcnMvZ3B1L2RybS9udmRsYS9udmRsYV9jb252LmMgYi9k
cml2ZXJzL2dwdS9kcm0vbnZkbGEvbnZkbGFfY29udi5jDQo+IG5ldyBmaWxlIG1vZGUgMTAw
NjQ0DQo+IGluZGV4IDAwMDAwMDAwMDAwMC4uYmIyNDkwOWUxYWZhDQo+IC0tLSAvZGV2L251
bGwNCj4gKysrIGIvZHJpdmVycy9ncHUvZHJtL252ZGxhL252ZGxhX2NvbnYuYw0KPiBAQCAt
MCwwICsxLDY4MyBAQA0KPiArLy8gU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEJTRC0zLUNs
YXVzZSBPUiBHUEwtMi4wDQo+ICsvKg0KPiArICogQ29weXJpZ2h0IChDKSAyMDE3LTIwMTgg
TlZJRElBIENPUlBPUkFUSU9ODQo+ICsgKiBDb3B5cmlnaHQgKEMpIDIwMjIgQ2FpIEh1b3Fp
bmcNCj4gKyAqLw0KPiArDQo+ICsjaW5jbHVkZSAibnZkbGFfY29tbW9uLmgiDQo+ICsjaW5j
bHVkZSAibnZkbGFfZHJtLmgiDQo+ICsjaW5jbHVkZSAibnZkbGFfcmVnLmgiDQo+ICsjaW5j
bHVkZSAibnZkbGFfY29tbW9uLmgiDQo+ICsjaW5jbHVkZSAibnZkbGFfZW5naW5lLmgiDQo+
ICsNCj4gK3N0YXRpYyBjb25zdCB1aW50OF90IG1hcF9wcmVjaXNpb25bXSA9IHsNCj4gKwlG
SUVMRF9FTlVNKENETUFfRF9NSVNDX0NGR18wLCBJTl9QUkVDSVNJT04sIElOVDgpLA0KPiAr
CUZJRUxEX0VOVU0oQ0RNQV9EX01JU0NfQ0ZHXzAsIElOX1BSRUNJU0lPTiwgSU5UMTYpLA0K
PiArCUZJRUxEX0VOVU0oQ0RNQV9EX01JU0NfQ0ZHXzAsIElOX1BSRUNJU0lPTiwgRlAxNiks
DQo+ICt9Ow0KPiArDQo+ICtzdGF0aWMgY29uc3QgdWludDhfdCBtYXBfY29udltdID0gew0K
PiArCUZJRUxEX0VOVU0oQ0FDQ19EX01JU0NfQ0ZHXzAsIENPTlZfTU9ERSwgRElSRUNUKSwN
Cj4gKwlGSUVMRF9FTlVNKENBQ0NfRF9NSVNDX0NGR18wLCBDT05WX01PREUsIFdJTk9HUkFE
KSwNCj4gK307DQo+ICsNCj4gK3N0YXRpYyBjb25zdCB1aW50OF90IG1hcF93ZWlnaHRfZm10
W10gPSB7DQo+ICsJRklFTERfRU5VTShDU0NfRF9XRUlHSFRfRk9STUFUXzAsIFdFSUdIVF9G
T1JNQVQsIFVOQ09NUFJFU1NFRCksDQo+ICsJRklFTERfRU5VTShDU0NfRF9XRUlHSFRfRk9S
TUFUXzAsIFdFSUdIVF9GT1JNQVQsIENPTVBSRVNTRUQpLA0KPiArfTsNCj4gKw0KPiArc3Rh
dGljIGNvbnN0IHVpbnQ4X3QgbWFwX2ltZ19mbXRbXVsyXSA9IHsNCj4gKwl7RklFTERfRU5V
TShDRE1BX0RfREFUQUlOX0ZPUk1BVF8wLA0KPiArCQkJUElYRUxfRk9STUFULCBUX1I4KSwg
MX0sDQo+ICsJe0ZJRUxEX0VOVU0oQ0RNQV9EX0RBVEFJTl9GT1JNQVRfMCwNCj4gKwkJCVBJ
WEVMX0ZPUk1BVCwgVF9SMTApLCAyfSwNCj4gKwl7RklFTERfRU5VTShDRE1BX0RfREFUQUlO
X0ZPUk1BVF8wLA0KPiArCQkJUElYRUxfRk9STUFULCBUX1IxMiksIDJ9LA0KPiArCXtGSUVM
RF9FTlVNKENETUFfRF9EQVRBSU5fRk9STUFUXzAsDQo+ICsJCQlQSVhFTF9GT1JNQVQsIFRf
UjE2KSwgMn0sDQo+ICsJe0ZJRUxEX0VOVU0oQ0RNQV9EX0RBVEFJTl9GT1JNQVRfMCwNCj4g
KwkJCVBJWEVMX0ZPUk1BVCwgVF9SMTZfSSksIDJ9LA0KPiArCXtGSUVMRF9FTlVNKENETUFf
RF9EQVRBSU5fRk9STUFUXzAsDQo+ICsJCQlQSVhFTF9GT1JNQVQsIFRfUjE2X0YpLCAyfSwN
Cj4gKwl7RklFTERfRU5VTShDRE1BX0RfREFUQUlOX0ZPUk1BVF8wLA0KPiArCQkJUElYRUxf
Rk9STUFULCBUX0ExNkIxNkcxNlIxNiksIDh9LA0KPiArCXtGSUVMRF9FTlVNKENETUFfRF9E
QVRBSU5fRk9STUFUXzAsDQo+ICsJCQlQSVhFTF9GT1JNQVQsIFRfWDE2QjE2RzE2UjE2KSwg
OH0sDQo+ICsJe0ZJRUxEX0VOVU0oQ0RNQV9EX0RBVEFJTl9GT1JNQVRfMCwNCj4gKwkJCVBJ
WEVMX0ZPUk1BVCwgVF9BMTZCMTZHMTZSMTZfRiksIDh9LA0KPiArCXtGSUVMRF9FTlVNKENE
TUFfRF9EQVRBSU5fRk9STUFUXzAsDQo+ICsJCQlQSVhFTF9GT1JNQVQsIFRfQTE2WTE2VTE2
VjE2KSwgOH0sDQo+ICsJe0ZJRUxEX0VOVU0oQ0RNQV9EX0RBVEFJTl9GT1JNQVRfMCwNCj4g
KwkJCVBJWEVMX0ZPUk1BVCwgVF9WMTZVMTZZMTZBMTYpLCA4fSwNCj4gKwl7RklFTERfRU5V
TShDRE1BX0RfREFUQUlOX0ZPUk1BVF8wLA0KPiArCQkJUElYRUxfRk9STUFULCBUX0ExNlkx
NlUxNlYxNl9GKSwgOH0sDQo+ICsJe0ZJRUxEX0VOVU0oQ0RNQV9EX0RBVEFJTl9GT1JNQVRf
MCwNCj4gKwkJCVBJWEVMX0ZPUk1BVCwgVF9BOEI4RzhSOCksIDR9LA0KPiArCXtGSUVMRF9F
TlVNKENETUFfRF9EQVRBSU5fRk9STUFUXzAsDQo+ICsJCQlQSVhFTF9GT1JNQVQsIFRfQThS
OEc4QjgpLCA0fSwNCj4gKwl7RklFTERfRU5VTShDRE1BX0RfREFUQUlOX0ZPUk1BVF8wLA0K
PiArCQkJUElYRUxfRk9STUFULCBUX0I4RzhSOEE4KSwgNH0sDQo+ICsJe0ZJRUxEX0VOVU0o
Q0RNQV9EX0RBVEFJTl9GT1JNQVRfMCwNCj4gKwkJCVBJWEVMX0ZPUk1BVCwgVF9SOEc4QjhB
OCksIDR9LA0KPiArCXtGSUVMRF9FTlVNKENETUFfRF9EQVRBSU5fRk9STUFUXzAsDQo+ICsJ
CQlQSVhFTF9GT1JNQVQsIFRfWDhCOEc4UjgpLCA0fSwNCj4gKwl7RklFTERfRU5VTShDRE1B
X0RfREFUQUlOX0ZPUk1BVF8wLA0KPiArCQkJUElYRUxfRk9STUFULCBUX1g4UjhHOEI4KSwg
NH0sDQo+ICsJe0ZJRUxEX0VOVU0oQ0RNQV9EX0RBVEFJTl9GT1JNQVRfMCwNCj4gKwkJCVBJ
WEVMX0ZPUk1BVCwgVF9COEc4UjhYOCksIDR9LA0KPiArCXtGSUVMRF9FTlVNKENETUFfRF9E
QVRBSU5fRk9STUFUXzAsDQo+ICsJCQlQSVhFTF9GT1JNQVQsIFRfUjhHOEI4WDgpLCA0fSwN
Cj4gKwl7RklFTERfRU5VTShDRE1BX0RfREFUQUlOX0ZPUk1BVF8wLA0KPiArCQkJUElYRUxf
Rk9STUFULCBUX0EyQjEwRzEwUjEwKSwgNH0sDQo+ICsJe0ZJRUxEX0VOVU0oQ0RNQV9EX0RB
VEFJTl9GT1JNQVRfMCwNCj4gKwkJCVBJWEVMX0ZPUk1BVCwgVF9BMlIxMEcxMEIxMCksIDR9
LA0KPiArCXtGSUVMRF9FTlVNKENETUFfRF9EQVRBSU5fRk9STUFUXzAsDQo+ICsJCQlQSVhF
TF9GT1JNQVQsIFRfQjEwRzEwUjEwQTIpLCA0fSwNCj4gKwl7RklFTERfRU5VTShDRE1BX0Rf
REFUQUlOX0ZPUk1BVF8wLA0KPiArCQkJUElYRUxfRk9STUFULCBUX1IxMEcxMEIxMEEyKSwg
NH0sDQo+ICsJe0ZJRUxEX0VOVU0oQ0RNQV9EX0RBVEFJTl9GT1JNQVRfMCwNCj4gKwkJCVBJ
WEVMX0ZPUk1BVCwgVF9BMlkxMFUxMFYxMCksIDR9LA0KPiArCXtGSUVMRF9FTlVNKENETUFf
RF9EQVRBSU5fRk9STUFUXzAsDQo+ICsJCQlQSVhFTF9GT1JNQVQsIFRfVjEwVTEwWTEwQTIp
LCA0fSwNCj4gKwl7RklFTERfRU5VTShDRE1BX0RfREFUQUlOX0ZPUk1BVF8wLA0KPiArCQkJ
UElYRUxfRk9STUFULCBUX0E4WThVOFY4KSwgNH0sDQo+ICsJe0ZJRUxEX0VOVU0oQ0RNQV9E
X0RBVEFJTl9GT1JNQVRfMCwNCj4gKwkJCVBJWEVMX0ZPUk1BVCwgVF9WOFU4WThBOCksIDR9
LA0KPiArCXtGSUVMRF9FTlVNKENETUFfRF9EQVRBSU5fRk9STUFUXzAsDQo+ICsJCQlQSVhF
TF9GT1JNQVQsIFRfWThfX19VOFY4X040NDQpLCAxfSwNCj4gKwl7RklFTERfRU5VTShDRE1B
X0RfREFUQUlOX0ZPUk1BVF8wLA0KPiArCQkJUElYRUxfRk9STUFULCBUX1k4X19fVjhVOF9O
NDQ0KSwgMX0sDQo+ICsJe0ZJRUxEX0VOVU0oQ0RNQV9EX0RBVEFJTl9GT1JNQVRfMCwNCj4g
KwkJCVBJWEVMX0ZPUk1BVCwgVF9ZMTBfX19VMTBWMTBfTjQ0NCksIDJ9LA0KPiArCXtGSUVM
RF9FTlVNKENETUFfRF9EQVRBSU5fRk9STUFUXzAsDQo+ICsJCQlQSVhFTF9GT1JNQVQsIFRf
WTEwX19fVjEwVTEwX040NDQpLCAyfSwNCj4gKwl7RklFTERfRU5VTShDRE1BX0RfREFUQUlO
X0ZPUk1BVF8wLA0KPiArCQkJUElYRUxfRk9STUFULCBUX1kxMl9fX1UxMlYxMl9ONDQ0KSwg
Mn0sDQo+ICsJe0ZJRUxEX0VOVU0oQ0RNQV9EX0RBVEFJTl9GT1JNQVRfMCwNCj4gKwkJCVBJ
WEVMX0ZPUk1BVCwgVF9ZMTJfX19WMTJVMTJfTjQ0NCksIDJ9LA0KPiArCXtGSUVMRF9FTlVN
KENETUFfRF9EQVRBSU5fRk9STUFUXzAsDQo+ICsJCQlQSVhFTF9GT1JNQVQsIFRfWTE2X19f
VTE2VjE2X040NDQpLCAyfSwNCj4gKwl7RklFTERfRU5VTShDRE1BX0RfREFUQUlOX0ZPUk1B
VF8wLA0KPiArCQkJUElYRUxfRk9STUFULCBUX1kxNl9fX1YxNlUxNl9ONDQ0KSwgMn0sDQo+
ICsJe0ZJRUxEX0VOVU0oQ0RNQV9EX0RBVEFJTl9GT1JNQVRfMCwNCj4gKwkJCURBVEFJTl9G
T1JNQVQsIEZFQVRVUkUpLCAyfSwNCj4gKwl7RklFTERfRU5VTShDRE1BX0RfREFUQUlOX0ZP
Uk1BVF8wLA0KPiArCQkJREFUQUlOX0ZPUk1BVCwgUElYRUwpLCAxfSwNCj4gK307DQo+ICsN
Cj4gK3N0YXRpYyBjb25zdCB1aW50OF90IG1hcF9waXhlbFtdID0gew0KPiArCUZJRUxEX0VO
VU0oQ0RNQV9EX0RBVEFJTl9GT1JNQVRfMCwgUElYRUxfTUFQUElORywgUElUQ0hfTElORUFS
KSwNCj4gK307DQo+ICsNCj4gK3N0YXRpYyBjb25zdCB1aW50OF90IG1hcF9yYW1bXSA9IHsN
Cj4gKwlGSUVMRF9FTlVNKENETUFfRF9EQUlOX1JBTV9UWVBFXzAsIERBVEFJTl9SQU1fVFlQ
RSwgTUNJRiksDQo+ICsJRklFTERfRU5VTShDRE1BX0RfREFJTl9SQU1fVFlQRV8wLCBEQVRB
SU5fUkFNX1RZUEUsIENWSUYpLA0KPiArfTsNCj4gKw0KPiArc3RhdGljIGNvbnN0IHVpbnQ4
X3QgbWFwX21lYW5bXSA9IHsNCj4gKwlGSUVMRF9FTlVNKENETUFfRF9NRUFOX0ZPUk1BVF8w
LCBNRUFOX0ZPUk1BVCwgRElTQUJMRSksDQo+ICsJRklFTERfRU5VTShDRE1BX0RfTUVBTl9G
T1JNQVRfMCwgTUVBTl9GT1JNQVQsIEVOQUJMRSksDQo+ICt9Ow0KPiArDQo+ICtzdGF0aWMg
dWludDMyX3QNCj4gK2dldF9pbl9mb3JtYXQodWludDhfdCBmb3JtYXQpDQo+ICt7DQo+ICsJ
dWludDMyX3QgaW5fZm9ybWF0ID0gMDsNCj4gKw0KPiArCWlmIChmb3JtYXQgPj0gRk9STUFU
X1RfUjggJiYgZm9ybWF0IDwgRk9STUFUX0ZFQVRVUkUpIHsNCj4gKwkJaW5fZm9ybWF0ID0g
RklFTERfRU5VTShDRE1BX0RfREFUQUlOX0ZPUk1BVF8wLA0KPiArCQkJCQkJREFUQUlOX0ZP
Uk1BVCwgUElYRUwpOw0KPiArCX0gZWxzZSBpZiAoZm9ybWF0ID09IEZPUk1BVF9GRUFUVVJF
KSB7DQo+ICsJCWluX2Zvcm1hdCA9IEZJRUxEX0VOVU0oQ0RNQV9EX0RBVEFJTl9GT1JNQVRf
MCwNCj4gKwkJCQkJCURBVEFJTl9GT1JNQVQsIEZFQVRVUkUpOw0KPiArCX0NCj4gKw0KPiAr
CXJldHVybiBpbl9mb3JtYXQ7DQo+ICt9DQo+ICsNCj4gK3ZvaWQNCj4gK2RsYV9jb252X3Nl
dF9wcm9kdWNlcihzdHJ1Y3QgZGxhX2VuZ2luZSAqZW5naW5lLCBpbnQzMl90IGdyb3VwX2lk
LCBpbnQzMl90IHJkbWFfZ3JvdXBfaWQpDQo+ICt7DQo+ICsJdWludDMyX3QgcmVnOw0KPiAr
DQo+ICsJLyogc2V0IHByb2R1Y2VyIHBvaW50ZXIgZm9yIGFsbCBzdWItbW9kdWxlcyAqLw0K
PiArCXJlZyA9IGdyb3VwX2lkIDw8IFNISUZUKENBQ0NfU19QT0lOVEVSXzAsIFBST0RVQ0VS
KTsNCj4gKwljYWNjX3JlZ193cml0ZShlbmdpbmUsIFNfUE9JTlRFUiwgcmVnKTsNCj4gKwlj
bWFjX2FfcmVnX3dyaXRlKGVuZ2luZSwgU19QT0lOVEVSLCByZWcpOw0KPiArCWNtYWNfYl9y
ZWdfd3JpdGUoZW5naW5lLCBTX1BPSU5URVIsIHJlZyk7DQo+ICsJY3NjX3JlZ193cml0ZShl
bmdpbmUsIFNfUE9JTlRFUiwgcmVnKTsNCj4gKwljZG1hX3JlZ193cml0ZShlbmdpbmUsIFNf
UE9JTlRFUiwgcmVnKTsNCj4gK30NCj4gKw0KPiAraW50DQo+ICtkbGFfY29udl9lbmFibGUo
c3RydWN0IGRsYV9lbmdpbmUgKmVuZ2luZSwgc3RydWN0IGRsYV9wcm9jZXNzb3JfZ3JvdXAg
Kmdyb3VwKQ0KPiArew0KPiArCXVpbnQzMl90IHJlZzsNCj4gKw0KPiArCWRvIHsNCj4gKwkJ
cmVnID0gY2RtYV9yZWdfcmVhZChlbmdpbmUsIFNfQ0JVRl9GTFVTSF9TVEFUVVMpOw0KPiAr
CX0gd2hpbGUgKCEocmVnICYgTUFTSyhDRE1BX1NfQ0JVRl9GTFVTSF9TVEFUVVNfMCwgRkxV
U0hfRE9ORSkpKTsNCj4gKw0KPiArCS8qIGVuYWJsZSBhbGwgc3ViLW1vZHVsZXMgKi8NCj4g
KwlyZWcgPSBGSUVMRF9FTlVNKENBQ0NfRF9PUF9FTkFCTEVfMCwgT1BfRU4sIEVOQUJMRSk7
DQo+ICsJY2FjY19yZWdfd3JpdGUoZW5naW5lLCBEX09QX0VOQUJMRSwgcmVnKTsNCj4gKwlj
bWFjX2FfcmVnX3dyaXRlKGVuZ2luZSwgRF9PUF9FTkFCTEUsIHJlZyk7DQo+ICsJY21hY19i
X3JlZ193cml0ZShlbmdpbmUsIERfT1BfRU5BQkxFLCByZWcpOw0KPiArCWNzY19yZWdfd3Jp
dGUoZW5naW5lLCBEX09QX0VOQUJMRSwgcmVnKTsNCj4gKwljZG1hX3JlZ193cml0ZShlbmdp
bmUsIERfT1BfRU5BQkxFLCByZWcpOw0KPiArDQo+ICsJcmV0dXJuIDA7DQo+ICt9DQo+ICsN
Cj4gK3ZvaWQNCj4gK2RsYV9jb252X3JkbWFfY2hlY2soc3RydWN0IGRsYV9wcm9jZXNzb3Jf
Z3JvdXAgKmdyb3VwKQ0KPiArew0KPiArCWdyb3VwLT5pc19yZG1hX25lZWRlZCA9IDA7DQo+
ICt9DQo+ICsNCj4gK3N0YXRpYyBpbnQzMl90DQo+ICtwcm9jZXNzb3JfY29udl9wcm9ncmFt
KHN0cnVjdCBkbGFfZW5naW5lICplbmdpbmUsIHN0cnVjdCBkbGFfcHJvY2Vzc29yX2dyb3Vw
ICpncm91cCkNCj4gK3sNCj4gKwlpbnQzMl90IHJldCA9IDA7DQo+ICsJdWludDMyX3QgcmVn
LCBoaWdoLCBsb3csIHNoaWZ0LCBtYXNrOw0KPiArCXVpbnQzMl90IHN0cmlkZV94LCBzdHJp
ZGVfeSwgcGFkX3gsIHBhZF95Ow0KPiArCXVpbnQ2NF90IHdlaWdodF9hZGRyZXNzID0gMDsN
Cj4gKwl1aW50NjRfdCB3bWJfYWRkcmVzcyA9IDA7DQo+ICsJdWludDY0X3Qgd2dzX2FkZHJl
c3MgPSAwOw0KPiArCXVpbnQ2NF90IGlucHV0X2FkZHJlc3MgPSAwOw0KPiArCXVpbnQ2NF90
IG91dHB1dF9hZGRyZXNzID0gMDsNCj4gKwl1aW50MzJfdCBhdG9tX3NpemUgPSAwOw0KPiAr
CWJvb2wgd2VpZ2h0X2NvbXByZXNzX3N1cHBvcnQgPSBmYWxzZTsNCj4gKwlzdHJ1Y3QgZGxh
X2NvbnZfb3BfZGVzYyAqY29udl9vcDsNCj4gKwlzdHJ1Y3QgZGxhX2NvbnZfc3VyZmFjZV9k
ZXNjICpjb252X3N1cmZhY2U7DQo+ICsNCj4gKwl3ZWlnaHRfY29tcHJlc3Nfc3VwcG9ydCA9
IGVuZ2luZS0+Y29uZmlnX2RhdGEtPndlaWdodF9jb21wcmVzc19zdXBwb3J0Ow0KPiArCWF0
b21fc2l6ZSA9IGVuZ2luZS0+Y29uZmlnX2RhdGEtPmF0b21fc2l6ZTsNCj4gKwljb252X29w
ID0gJmdyb3VwLT5vcGVyYXRpb25fZGVzYy0+Y29udl9vcDsNCj4gKwljb252X3N1cmZhY2Ug
PSAmZ3JvdXAtPnN1cmZhY2VfZGVzYy0+Y29udl9zdXJmYWNlOw0KPiArDQo+ICsJaWYgKGNv
bnZfb3AtPndlaWdodF9mb3JtYXQgPT0gV0VJR0hUX0ZPUk1BVF9DT01QUkVTU0VEKSB7DQo+
ICsJCUFTU0VSVF9HT1RPKCh3ZWlnaHRfY29tcHJlc3Nfc3VwcG9ydCksIHJldCwgLUVJTlZB
TCwgZXhpdCk7DQo+ICsJCUFTU0VSVF9HT1RPKChjb252X3N1cmZhY2UtPndtYl9kYXRhLmFk
ZHJlc3MgIT0gLTEpLA0KPiArCQkJcmV0LCAtRUlOVkFMLCBleGl0KTsNCj4gKwkJZGxhX2dl
dF9kbWFfY3ViZV9hZGRyZXNzKGVuZ2luZS0+ZHJpdmVyX2NvbnRleHQsDQo+ICsJCQkJCQkJ
CSBlbmdpbmUtPnRhc2stPnRhc2tfZGF0YSwNCj4gKwkJCQkJCQkJIGNvbnZfc3VyZmFjZS0+
d21iX2RhdGEuYWRkcmVzcywNCj4gKwkJCQkJCQkJIGNvbnZfc3VyZmFjZS0+d21iX2RhdGEu
b2Zmc2V0LA0KPiArCQkJCQkJCQkgKHZvaWQgKikmd21iX2FkZHJlc3MsDQo+ICsJCQkJCQkJ
CSBERVNUSU5BVElPTl9ETUEpOw0KPiArDQo+ICsJCUFTU0VSVF9HT1RPKChjb252X3N1cmZh
Y2UtPndnc19kYXRhLmFkZHJlc3MgIT0gLTEpLA0KPiArCQkJcmV0LCAtRUlOVkFMLCBleGl0
KTsNCj4gKwkJZGxhX2dldF9kbWFfY3ViZV9hZGRyZXNzKGVuZ2luZS0+ZHJpdmVyX2NvbnRl
eHQsDQo+ICsJCQkJCQkJCSBlbmdpbmUtPnRhc2stPnRhc2tfZGF0YSwNCj4gKwkJCQkJCQkJ
IGNvbnZfc3VyZmFjZS0+d2dzX2RhdGEuYWRkcmVzcywNCj4gKwkJCQkJCQkJIGNvbnZfc3Vy
ZmFjZS0+d2dzX2RhdGEub2Zmc2V0LA0KPiArCQkJCQkJCQkgKHZvaWQgKikmd2dzX2FkZHJl
c3MsDQo+ICsJCQkJCQkJCSBERVNUSU5BVElPTl9ETUEpOw0KPiArCX0NCj4gKw0KPiArCWlm
IChjb252X3N1cmZhY2UtPndlaWdodF9kYXRhLmFkZHJlc3MgIT0gLTEpIHsNCj4gKwkJZGxh
X2dldF9kbWFfY3ViZV9hZGRyZXNzKGVuZ2luZS0+ZHJpdmVyX2NvbnRleHQsDQo+ICsJCQkJ
CQkJCSBlbmdpbmUtPnRhc2stPnRhc2tfZGF0YSwNCj4gKwkJCQkJCQkJIGNvbnZfc3VyZmFj
ZS0+d2VpZ2h0X2RhdGEuYWRkcmVzcywNCj4gKwkJCQkJCQkJIGNvbnZfc3VyZmFjZS0+d2Vp
Z2h0X2RhdGEub2Zmc2V0LA0KPiArCQkJCQkJCQkgKHZvaWQgKikmd2VpZ2h0X2FkZHJlc3Ms
DQo+ICsJCQkJCQkJCSBERVNUSU5BVElPTl9ETUEpOw0KPiArCX0NCj4gKw0KPiArCWlmIChj
b252X3N1cmZhY2UtPmRzdF9kYXRhLmFkZHJlc3MgIT0gLTEpIHsNCj4gKwkJZGxhX2dldF9k
bWFfY3ViZV9hZGRyZXNzKGVuZ2luZS0+ZHJpdmVyX2NvbnRleHQsDQo+ICsJCQkJCQkJCSBl
bmdpbmUtPnRhc2stPnRhc2tfZGF0YSwNCj4gKwkJCQkJCQkJIGNvbnZfc3VyZmFjZS0+ZHN0
X2RhdGEuYWRkcmVzcywNCj4gKwkJCQkJCQkJIGNvbnZfc3VyZmFjZS0+ZHN0X2RhdGEub2Zm
c2V0LA0KPiArCQkJCQkJCQkgKHZvaWQgKikmb3V0cHV0X2FkZHJlc3MsDQo+ICsJCQkJCQkJ
CSBERVNUSU5BVElPTl9ETUEpOw0KPiArCX0NCj4gKw0KPiArCXJldCA9IGRsYV9yZWFkX2lu
cHV0X2FkZHJlc3MoZW5naW5lLCAmY29udl9zdXJmYWNlLT5zcmNfZGF0YSwgJmlucHV0X2Fk
ZHJlc3MsDQo+ICsJCQkJCQkJCSBncm91cC0+b3BfZGVzYy0+aW5kZXgsDQo+ICsJCQkJCQkJ
CSBncm91cC0+cm9pX2luZGV4LA0KPiArCQkJCQkJCQkgbWFwX2ltZ19mbXRbY29udl9vcC0+
ZGF0YV9mb3JtYXRdWzFdKTsNCj4gKwlpZiAocmV0KQ0KPiArCQlnb3RvIGV4aXQ7DQo+ICsN
Cj4gKwlBU1NFUlRfR09UTygoY29udl9vcC0+b3V0X2N2dC5zY2FsZSAgPT0gMSksIHJldCwg
LUVJTlZBTCwgZXhpdCk7DQo+ICsJQVNTRVJUX0dPVE8oKGNvbnZfb3AtPm91dF9jdnQub2Zm
c2V0ID09IDApLCByZXQsIC1FSU5WQUwsIGV4aXQpOw0KPiArDQo+ICsJLyogY2hlY2sgaWYg
dGhlIHJlZ2lzdGVyIGdyb3VwIGlzIGlkbGUgKi8NCj4gKwlyZWcgPSBjYWNjX3JlZ19yZWFk
KGVuZ2luZSwgU19TVEFUVVMpOw0KPiArCW1hc2sgPSBncm91cC0+aWQgPyBNQVNLKENBQ0Nf
U19TVEFUVVNfMCwgU1RBVFVTXzEpIDoNCj4gKwkJTUFTSyhDQUNDX1NfU1RBVFVTXzAsIFNU
QVRVU18wKTsNCj4gKwlzaGlmdCA9IGdyb3VwLT5pZCA/IFNISUZUKENBQ0NfU19TVEFUVVNf
MCwgU1RBVFVTXzEpIDoNCj4gKwkJU0hJRlQoQ0FDQ19TX1NUQVRVU18wLCBTVEFUVVNfMCk7
DQo+ICsJcmVnID0gKHJlZyAmIG1hc2spID4+IHNoaWZ0Ow0KPiArCUFTU0VSVF9HT1RPKChy
ZWcgPT0gRklFTERfRU5VTShDQUNDX1NfU1RBVFVTXzAsIFNUQVRVU18wLCBJRExFKSksDQo+
ICsJCQkJcmV0LCAtRUlOVkFMLCBleGl0KTsNCj4gKw0KPiArCXJlZyA9IGNtYWNfYV9yZWdf
cmVhZChlbmdpbmUsIFNfU1RBVFVTKTsNCj4gKwltYXNrID0gZ3JvdXAtPmlkID8gTUFTSyhD
TUFDX0FfU19TVEFUVVNfMCwgU1RBVFVTXzEpIDoNCj4gKwkJTUFTSyhDTUFDX0FfU19TVEFU
VVNfMCwgU1RBVFVTXzApOw0KPiArCXNoaWZ0ID0gZ3JvdXAtPmlkID8gU0hJRlQoQ01BQ19B
X1NfU1RBVFVTXzAsIFNUQVRVU18xKSA6DQo+ICsJCVNISUZUKENNQUNfQV9TX1NUQVRVU18w
LCBTVEFUVVNfMCk7DQo+ICsJcmVnID0gKHJlZyAmIG1hc2spID4+IHNoaWZ0Ow0KPiArCUFT
U0VSVF9HT1RPKChyZWcgPT0gRklFTERfRU5VTShDTUFDX0FfU19TVEFUVVNfMCwgU1RBVFVT
XzAsIElETEUpKSwNCj4gKwkJCQlyZXQsIC1FSU5WQUwsIGV4aXQpOw0KPiArDQo+ICsJcmVn
ID0gY21hY19iX3JlZ19yZWFkKGVuZ2luZSwgU19TVEFUVVMpOw0KPiArCW1hc2sgPSBncm91
cC0+aWQgPyBNQVNLKENNQUNfQl9TX1NUQVRVU18wLCBTVEFUVVNfMSkgOg0KPiArCQlNQVNL
KENNQUNfQl9TX1NUQVRVU18wLCBTVEFUVVNfMCk7DQo+ICsJc2hpZnQgPSBncm91cC0+aWQg
PyBTSElGVChDTUFDX0JfU19TVEFUVVNfMCwgU1RBVFVTXzEpIDoNCj4gKwkJU0hJRlQoQ01B
Q19CX1NfU1RBVFVTXzAsIFNUQVRVU18wKTsNCj4gKwlyZWcgPSAocmVnICYgbWFzaykgPj4g
c2hpZnQ7DQo+ICsJQVNTRVJUX0dPVE8oKHJlZyA9PSBGSUVMRF9FTlVNKENNQUNfQl9TX1NU
QVRVU18wLCBTVEFUVVNfMCwgSURMRSkpLA0KPiArCQkJCXJldCwgLUVJTlZBTCwgZXhpdCk7
DQo+ICsNCj4gKwlyZWcgPSBjc2NfcmVnX3JlYWQoZW5naW5lLCBTX1NUQVRVUyk7DQo+ICsJ
bWFzayA9IGdyb3VwLT5pZCA/IE1BU0soQ1NDX1NfU1RBVFVTXzAsIFNUQVRVU18xKSA6DQo+
ICsJCU1BU0soQ1NDX1NfU1RBVFVTXzAsIFNUQVRVU18wKTsNCj4gKwlzaGlmdCA9IGdyb3Vw
LT5pZCA/IFNISUZUKENTQ19TX1NUQVRVU18wLCBTVEFUVVNfMSkgOg0KPiArCQlTSElGVChD
U0NfU19TVEFUVVNfMCwgU1RBVFVTXzApOw0KPiArCXJlZyA9IChyZWcgJiBtYXNrKSA+PiBz
aGlmdDsNCj4gKwlBU1NFUlRfR09UTygocmVnID09IEZJRUxEX0VOVU0oQ1NDX1NfU1RBVFVT
XzAsIFNUQVRVU18wLCBJRExFKSksDQo+ICsJCQkJcmV0LCAtRUlOVkFMLCBleGl0KTsNCj4g
Kw0KPiArCXJlZyA9IGNkbWFfcmVnX3JlYWQoZW5naW5lLCBTX1NUQVRVUyk7DQo+ICsJbWFz
ayA9IGdyb3VwLT5pZCA/IE1BU0soQ0RNQV9TX1NUQVRVU18wLCBTVEFUVVNfMSkgOg0KPiAr
CQlNQVNLKENETUFfU19TVEFUVVNfMCwgU1RBVFVTXzApOw0KPiArCXNoaWZ0ID0gZ3JvdXAt
PmlkID8gU0hJRlQoQ0RNQV9TX1NUQVRVU18wLCBTVEFUVVNfMSkgOg0KPiArCQlTSElGVChD
RE1BX1NfU1RBVFVTXzAsIFNUQVRVU18wKTsNCj4gKwlyZWcgPSAocmVnICYgbWFzaykgPj4g
c2hpZnQ7DQo+ICsJQVNTRVJUX0dPVE8oKHJlZyA9PSBGSUVMRF9FTlVNKENETUFfU19TVEFU
VVNfMCwgU1RBVFVTXzAsIElETEUpKSwNCj4gKwkJcmV0LCAtRUlOVkFMLCBleGl0KTsNCj4g
Kw0KPiArCS8qIHJldmVyc2UgY29uZmlnIGVhY2ggc3ViLW1vZHVsZSBpbiBDQyAqLw0KPiAr
DQo+ICsJLyogQ0FDQyAqLw0KPiArCXJlZyA9IChtYXBfY29udltjb252X29wLT5jb252X21v
ZGVdDQo+ICsJCTw8IFNISUZUKENBQ0NfRF9NSVNDX0NGR18wLCBDT05WX01PREUpKSB8DQo+
ICsJCShtYXBfcHJlY2lzaW9uW2NvbnZfb3AtPm91dF9wcmVjaXNpb25dDQo+ICsJCTw8IFNI
SUZUKENBQ0NfRF9NSVNDX0NGR18wLCBQUk9DX1BSRUNJU0lPTikpOw0KPiArCWNhY2NfcmVn
X3dyaXRlKGVuZ2luZSwgRF9NSVNDX0NGRywgcmVnKTsNCj4gKw0KPiArCXJlZyA9ICgoY29u
dl9zdXJmYWNlLT5kc3RfZGF0YS53aWR0aCAtIDEpDQo+ICsJCTw8IFNISUZUKENBQ0NfRF9E
QVRBT1VUX1NJWkVfMF8wLCBEQVRBT1VUX1dJRFRIKSkgfA0KPiArCQkoKGNvbnZfc3VyZmFj
ZS0+ZHN0X2RhdGEuaGVpZ2h0IC0gMSkNCj4gKwkJPDwgU0hJRlQoQ0FDQ19EX0RBVEFPVVRf
U0laRV8wXzAsIERBVEFPVVRfSEVJR0hUKSk7DQo+ICsJY2FjY19yZWdfd3JpdGUoZW5naW5l
LCBEX0RBVEFPVVRfU0laRV8wLCByZWcpOw0KPiArDQo+ICsJcmVnID0gKChjb252X3N1cmZh
Y2UtPmRzdF9kYXRhLmNoYW5uZWwgLSAxKQ0KPiArCQk8PCBTSElGVChDQUNDX0RfREFUQU9V
VF9TSVpFXzFfMCwgREFUQU9VVF9DSEFOTkVMKSk7DQo+ICsJY2FjY19yZWdfd3JpdGUoZW5n
aW5lLCBEX0RBVEFPVVRfU0laRV8xLCByZWcpOw0KPiArDQo+ICsJbG93ID0gbG93ZXJfMzJf
Yml0cyhvdXRwdXRfYWRkcmVzcyk7DQo+ICsJY2FjY19yZWdfd3JpdGUoZW5naW5lLCBEX0RB
VEFPVVRfQUREUiwgbG93KTsNCj4gKwljYWNjX3JlZ193cml0ZShlbmdpbmUsIERfQkFUQ0hf
TlVNQkVSLCBjb252X29wLT5iYXRjaCAtIDEpOw0KPiArCWNhY2NfcmVnX3dyaXRlKGVuZ2lu
ZSwgRF9MSU5FX1NUUklERSwgY29udl9zdXJmYWNlLT5kc3RfZGF0YS5saW5lX3N0cmlkZSk7
DQo+ICsJY2FjY19yZWdfd3JpdGUoZW5naW5lLCBEX1NVUkZfU1RSSURFLCBjb252X3N1cmZh
Y2UtPmRzdF9kYXRhLnN1cmZfc3RyaWRlKTsNCj4gKw0KPiArCWlmIChjb252X3N1cmZhY2Ut
PmRzdF9kYXRhLndpZHRoID09IDEgJiYNCj4gKwkJCQljb252X3N1cmZhY2UtPmRzdF9kYXRh
LmhlaWdodCA9PSAxKSB7DQo+ICsJCUFTU0VSVF9HT1RPKCgoKHVpbnQzMl90KWNvbnZfc3Vy
ZmFjZS0+ZHN0X2RhdGEubGluZV9zdHJpZGUgPT0NCj4gKwkJCSh1aW50MzJfdCkoY29udl9z
dXJmYWNlLT5kc3RfZGF0YS53aWR0aCAqIGF0b21fc2l6ZSkpKSwNCj4gKwkJCXJldCwgLUVJ
TlZBTCwgZXhpdCk7DQo+ICsJCXJlZyA9IChDQUNDX0RfREFUQU9VVF9NQVBfMF9MSU5FX1BB
Q0tFRF9UUlVFIDw8DQo+ICsJCQkJU0hJRlQoQ0FDQ19EX0RBVEFPVVRfTUFQXzAsIExJTkVf
UEFDS0VEKSk7DQo+ICsJCXJlZyB8PSAoQ0FDQ19EX0RBVEFPVVRfTUFQXzBfU1VSRl9QQUNL
RURfVFJVRSA8PA0KPiArCQkJCVNISUZUKENBQ0NfRF9EQVRBT1VUX01BUF8wLCBTVVJGX1BB
Q0tFRCkpOw0KPiArCX0gZWxzZSB7DQo+ICsJCXJlZyA9IChGSUVMRF9FTlVNKENBQ0NfRF9E
QVRBT1VUX01BUF8wLCBMSU5FX1BBQ0tFRCwgRkFMU0UpIDw8DQo+ICsJCQkJU0hJRlQoQ0FD
Q19EX0RBVEFPVVRfTUFQXzAsIExJTkVfUEFDS0VEKSk7DQo+ICsJCXJlZyB8PSAoRklFTERf
RU5VTShDQUNDX0RfREFUQU9VVF9NQVBfMCwgU1VSRl9QQUNLRUQsIEZBTFNFKSA8PA0KPiAr
CQkJCVNISUZUKENBQ0NfRF9EQVRBT1VUX01BUF8wLCBTVVJGX1BBQ0tFRCkpOw0KPiArCX0N
Cj4gKwljYWNjX3JlZ193cml0ZShlbmdpbmUsIERfREFUQU9VVF9NQVAsIHJlZyk7DQo+ICsN
Cj4gKwljYWNjX3JlZ193cml0ZShlbmdpbmUsIERfQ0xJUF9DRkcsIGNvbnZfb3AtPm91dF9j
dnQudHJ1bmNhdGUpOw0KPiArDQo+ICsJLyogQ01BQyAqLw0KPiArCXJlZyA9IChtYXBfY29u
dltjb252X29wLT5jb252X21vZGVdDQo+ICsJCTw8IFNISUZUKENNQUNfQV9EX01JU0NfQ0ZH
XzAsIENPTlZfTU9ERSkpIHwNCj4gKwkJKG1hcF9wcmVjaXNpb25bY29udl9vcC0+b3V0X3By
ZWNpc2lvbl0NCj4gKwkJPDwgU0hJRlQoQ01BQ19BX0RfTUlTQ19DRkdfMCwgUFJPQ19QUkVD
SVNJT04pKTsNCj4gKwljbWFjX2FfcmVnX3dyaXRlKGVuZ2luZSwgRF9NSVNDX0NGRywgcmVn
KTsNCj4gKwljbWFjX2JfcmVnX3dyaXRlKGVuZ2luZSwgRF9NSVNDX0NGRywgcmVnKTsNCj4g
Kw0KPiArCS8qIENTQyAqLw0KPiArCXJlZyA9IChtYXBfY29udltjb252X29wLT5jb252X21v
ZGVdDQo+ICsJCTw8IFNISUZUKENTQ19EX01JU0NfQ0ZHXzAsIENPTlZfTU9ERSkpIHwNCj4g
KwkJKG1hcF9wcmVjaXNpb25bY29udl9vcC0+b3V0X3ByZWNpc2lvbl0NCj4gKwkJPDwgU0hJ
RlQoQ1NDX0RfTUlTQ19DRkdfMCwgSU5fUFJFQ0lTSU9OKSkgfA0KPiArCQkobWFwX3ByZWNp
c2lvbltjb252X29wLT5vdXRfcHJlY2lzaW9uXQ0KPiArCQk8PCBTSElGVChDU0NfRF9NSVND
X0NGR18wLCBQUk9DX1BSRUNJU0lPTikpIHwNCj4gKwkJKGNvbnZfb3AtPmRhdGFfcmV1c2UN
Cj4gKwkJPDwgU0hJRlQoQ1NDX0RfTUlTQ19DRkdfMCwgREFUQV9SRVVTRSkpIHwNCj4gKwkJ
KGNvbnZfb3AtPndlaWdodF9yZXVzZQ0KPiArCQk8PCBTSElGVChDU0NfRF9NSVNDX0NGR18w
LCBXRUlHSFRfUkVVU0UpKSB8DQo+ICsJCShjb252X29wLT5za2lwX2RhdGFfcmxzDQo+ICsJ
CTw8IFNISUZUKENTQ19EX01JU0NfQ0ZHXzAsIFNLSVBfREFUQV9STFMpKSB8DQo+ICsJCShj
b252X29wLT5za2lwX3dlaWdodF9ybHMNCj4gKwkJPDwgU0hJRlQoQ1NDX0RfTUlTQ19DRkdf
MCwgU0tJUF9XRUlHSFRfUkxTKSk7DQo+ICsJY3NjX3JlZ193cml0ZShlbmdpbmUsIERfTUlT
Q19DRkcsIHJlZyk7DQo+ICsNCj4gKwlyZWcgPSAoZ2V0X2luX2Zvcm1hdChjb252X29wLT5k
YXRhX2Zvcm1hdCkgPDwNCj4gKwkJU0hJRlQoQ1NDX0RfREFUQUlOX0ZPUk1BVF8wLCBEQVRB
SU5fRk9STUFUKSk7DQo+ICsJY3NjX3JlZ193cml0ZShlbmdpbmUsIERfREFUQUlOX0ZPUk1B
VCwgcmVnKTsNCj4gKw0KPiArCXJlZyA9ICgoY29udl9vcC0+aW5wdXRfd2lkdGhfY3NjIC0g
MSkNCj4gKwkJPDwgU0hJRlQoQ1NDX0RfREFUQUlOX1NJWkVfRVhUXzBfMCwgREFUQUlOX1dJ
RFRIX0VYVCkpIHwNCj4gKwkJKChjb252X29wLT5pbnB1dF9oZWlnaHRfY3NjIC0gMSkNCj4g
KwkJPDwgU0hJRlQoQ1NDX0RfREFUQUlOX1NJWkVfRVhUXzBfMCwgREFUQUlOX0hFSUdIVF9F
WFQpKTsNCj4gKwljc2NfcmVnX3dyaXRlKGVuZ2luZSwgRF9EQVRBSU5fU0laRV9FWFRfMCwg
cmVnKTsNCj4gKw0KPiArCXJlZyA9ICgoY29udl9vcC0+aW5wdXRfY2hhbm5lbF9jc2MgLSAx
KQ0KPiArCQk8PCBTSElGVChDU0NfRF9EQVRBSU5fU0laRV9FWFRfMV8wLCBEQVRBSU5fQ0hB
Tk5FTF9FWFQpKTsNCj4gKwljc2NfcmVnX3dyaXRlKGVuZ2luZSwgRF9EQVRBSU5fU0laRV9F
WFRfMSwgcmVnKTsNCj4gKw0KPiArCXJlZyA9ICgoY29udl9vcC0+YmF0Y2ggLSAxKQ0KPiAr
CQk8PCBTSElGVChDU0NfRF9CQVRDSF9OVU1CRVJfMCwgQkFUQ0hFUykpOw0KPiArCWNzY19y
ZWdfd3JpdGUoZW5naW5lLCBEX0JBVENIX05VTUJFUiwgcmVnKTsNCj4gKwlyZWcgPSAoKGNv
bnZfb3AtPnBvc3RfZXh0ZW5zaW9uKQ0KPiArCQk8PCBTSElGVChDU0NfRF9QT1NUX1lfRVhU
RU5TSU9OXzAsIFlfRVhURU5TSU9OKSk7DQo+ICsJY3NjX3JlZ193cml0ZShlbmdpbmUsIERf
UE9TVF9ZX0VYVEVOU0lPTiwgcmVnKTsNCj4gKw0KPiArCXJlZyA9ICgoY29udl9vcC0+ZW50
cnlfcGVyX3NsaWNlIC0gMSkNCj4gKwkJPDwgU0hJRlQoQ1NDX0RfRU5UUllfUEVSX1NMSUNF
XzAsIEVOVFJJRVMpKTsNCj4gKwljc2NfcmVnX3dyaXRlKGVuZ2luZSwgRF9FTlRSWV9QRVJf
U0xJQ0UsIHJlZyk7DQo+ICsNCj4gKwlyZWcgPSAobWFwX3dlaWdodF9mbXRbY29udl9vcC0+
d2VpZ2h0X2Zvcm1hdF0NCj4gKwkJPDwgU0hJRlQoQ1NDX0RfV0VJR0hUX0ZPUk1BVF8wLCBX
RUlHSFRfRk9STUFUKSk7DQo+ICsJY3NjX3JlZ193cml0ZShlbmdpbmUsIERfV0VJR0hUX0ZP
Uk1BVCwgcmVnKTsNCj4gKw0KPiArCXJlZyA9ICgoY29udl9vcC0+a2VybmVsX3dpZHRoX2Nz
YyAtIDEpDQo+ICsJCTw8IFNISUZUKENTQ19EX1dFSUdIVF9TSVpFX0VYVF8wXzAsIFdFSUdI
VF9XSURUSF9FWFQpKSB8DQo+ICsJCSgoY29udl9vcC0+a2VybmVsX2hlaWdodF9jc2MgLSAx
KQ0KPiArCQk8PCBTSElGVChDU0NfRF9XRUlHSFRfU0laRV9FWFRfMF8wLCBXRUlHSFRfSEVJ
R0hUX0VYVCkpOw0KPiArCWNzY19yZWdfd3JpdGUoZW5naW5lLCBEX1dFSUdIVF9TSVpFX0VY
VF8wLCByZWcpOw0KPiArDQo+ICsJcmVnID0gKChjb252X29wLT5rZXJuZWxfY2hhbm5lbF9j
c2MgLSAxKQ0KPiArCQk8PCBTSElGVChDU0NfRF9XRUlHSFRfU0laRV9FWFRfMV8wLCBXRUlH
SFRfQ0hBTk5FTF9FWFQpKSB8DQo+ICsJCSgoY29udl9zdXJmYWNlLT5kc3RfZGF0YS5jaGFu
bmVsIC0gMSkNCj4gKwkJPDwgU0hJRlQoQ1NDX0RfV0VJR0hUX1NJWkVfRVhUXzFfMCwgV0VJ
R0hUX0tFUk5FTCkpOw0KPiArCWNzY19yZWdfd3JpdGUoZW5naW5lLCBEX1dFSUdIVF9TSVpF
X0VYVF8xLCByZWcpOw0KPiArDQo+ICsJY3NjX3JlZ193cml0ZShlbmdpbmUsIERfV0VJR0hU
X0JZVEVTLCBjb252X3N1cmZhY2UtPndlaWdodF9kYXRhLnNpemUpOw0KPiArCWNzY19yZWdf
d3JpdGUoZW5naW5lLCBEX1dNQl9CWVRFUywgY29udl9zdXJmYWNlLT53bWJfZGF0YS5zaXpl
KTsNCj4gKw0KPiArCXJlZyA9ICgoY29udl9vcC0+aW5wdXRfd2lkdGhfY21hYyAtIDEpDQo+
ICsJCTw8IFNISUZUKENTQ19EX0RBVEFPVVRfU0laRV8wXzAsIERBVEFPVVRfV0lEVEgpKSB8
DQo+ICsJCSgoY29udl9vcC0+aW5wdXRfaGVpZ2h0X2NtYWMgLSAxKQ0KPiArCQk8PCBTSElG
VChDU0NfRF9EQVRBT1VUX1NJWkVfMF8wLCBEQVRBT1VUX0hFSUdIVCkpOw0KPiArCWNzY19y
ZWdfd3JpdGUoZW5naW5lLCBEX0RBVEFPVVRfU0laRV8wLCByZWcpOw0KPiArDQo+ICsJcmVn
ID0gKChjb252X3N1cmZhY2UtPmRzdF9kYXRhLmNoYW5uZWwgLSAxKQ0KPiArCQk8PCBTSElG
VChDU0NfRF9EQVRBT1VUX1NJWkVfMV8wLCBEQVRBT1VUX0NIQU5ORUwpKTsNCj4gKwljc2Nf
cmVnX3dyaXRlKGVuZ2luZSwgRF9EQVRBT1VUX1NJWkVfMSwgcmVnKTsNCj4gKw0KPiArCXJl
ZyA9ICgoY29udl9zdXJmYWNlLT5kc3RfZGF0YS53aWR0aCAqDQo+ICsJCQkJY29udl9zdXJm
YWNlLT5kc3RfZGF0YS5oZWlnaHQgLSAxKQ0KPiArCQk8PCBTSElGVChDU0NfRF9BVE9NSUNT
XzAsIEFUT01JQ1MpKTsNCj4gKwljc2NfcmVnX3dyaXRlKGVuZ2luZSwgRF9BVE9NSUNTLCBy
ZWcpOw0KPiArCXJlZyA9ICgoY29udl9vcC0+cmVsZWFzZSAtIDEpDQo+ICsJCTw8IFNISUZU
KENTQ19EX1JFTEVBU0VfMCwgUkxTX1NMSUNFUykpOw0KPiArCWNzY19yZWdfd3JpdGUoZW5n
aW5lLCBEX1JFTEVBU0UsIHJlZyk7DQo+ICsNCj4gKwlpZiAoY29udl9vcC0+Y29udl9tb2Rl
ID09IENPTlZfTU9ERV9ESVJFQ1QpIHsNCj4gKwkJc3RyaWRlX3ggPSBjb252X29wLT5jb252
X3N0cmlkZV94IC0gMTsNCj4gKwkJc3RyaWRlX3kgPSBjb252X29wLT5jb252X3N0cmlkZV95
IC0gMTsNCj4gKwkJcGFkX3ggPSBjb252X29wLT5wYWRfeF9sZWZ0Ow0KPiArCQlwYWRfeSA9
IGNvbnZfb3AtPnBhZF95X3RvcDsNCj4gKwl9IGVsc2Ugew0KPiArCQlzdHJpZGVfeCA9IDA7
DQo+ICsJCXN0cmlkZV95ID0gMDsNCj4gKwkJcGFkX3ggPSAwOw0KPiArCQlwYWRfeSA9IDA7
DQo+ICsJfQ0KPiArDQo+ICsJcmVnID0gKHN0cmlkZV94DQo+ICsJCTw8IFNISUZUKENTQ19E
X0NPTlZfU1RSSURFX0VYVF8wLCBDT05WX1hfU1RSSURFX0VYVCkpIHwNCj4gKwkJKHN0cmlk
ZV95DQo+ICsJCTw8IFNISUZUKENTQ19EX0NPTlZfU1RSSURFX0VYVF8wLCBDT05WX1lfU1RS
SURFX0VYVCkpOw0KPiArCWNzY19yZWdfd3JpdGUoZW5naW5lLCBEX0NPTlZfU1RSSURFX0VY
VCwgcmVnKTsNCj4gKw0KPiArCXJlZyA9ICgoY29udl9vcC0+ZGlsYXRpb25feCAtIDEpDQo+
ICsJCTw8IFNISUZUKENTQ19EX0RJTEFUSU9OX0VYVF8wLCBYX0RJTEFUSU9OX0VYVCkpIHwN
Cj4gKwkJKChjb252X29wLT5kaWxhdGlvbl95IC0gMSkNCj4gKwkJPDwgU0hJRlQoQ1NDX0Rf
RElMQVRJT05fRVhUXzAsIFlfRElMQVRJT05fRVhUKSk7DQo+ICsJY3NjX3JlZ193cml0ZShl
bmdpbmUsIERfRElMQVRJT05fRVhULCByZWcpOw0KPiArDQo+ICsJcmVnID0gKHBhZF94DQo+
ICsJCTw8IFNISUZUKENTQ19EX1pFUk9fUEFERElOR18wLCBQQURfTEVGVCkpIHwNCj4gKwkJ
KHBhZF95DQo+ICsJCTw8IFNISUZUKENTQ19EX1pFUk9fUEFERElOR18wLCBQQURfVE9QKSk7
DQo+ICsJY3NjX3JlZ193cml0ZShlbmdpbmUsIERfWkVST19QQURESU5HLCByZWcpOw0KPiAr
DQo+ICsJcmVnID0gKGNvbnZfb3AtPnBhZF92YWwNCj4gKwkJPDwgU0hJRlQoQ1NDX0RfWkVS
T19QQURESU5HX1ZBTFVFXzAsIFBBRF9WQUxVRSkpICYNCj4gKwkJTUFTSyhDU0NfRF9aRVJP
X1BBRERJTkdfVkFMVUVfMCwgUEFEX1ZBTFVFKTsNCj4gKwljc2NfcmVnX3dyaXRlKGVuZ2lu
ZSwgRF9aRVJPX1BBRERJTkdfVkFMVUUsIHJlZyk7DQo+ICsNCj4gKwlyZWcgPSAoKGNvbnZf
b3AtPmRhdGFfYmFuayAtIDEpDQo+ICsJCTw8IFNISUZUKENTQ19EX0JBTktfMCwgREFUQV9C
QU5LKSkgfA0KPiArCQkoKGNvbnZfb3AtPndlaWdodF9iYW5rIC0gMSkNCj4gKwkJPDwgU0hJ
RlQoQ1NDX0RfQkFOS18wLCBXRUlHSFRfQkFOSykpOw0KPiArCWNzY19yZWdfd3JpdGUoZW5n
aW5lLCBEX0JBTkssIHJlZyk7DQo+ICsJY3NjX3JlZ193cml0ZShlbmdpbmUsIERfUFJBX0NG
RywgY29udl9vcC0+cHJhX3RydW5jYXRlKTsNCj4gKw0KPiArCS8qIENCVUYgKi8NCj4gKwkv
KiB0aGVyZSdzIG5vIENCVUYgcmVnaXN0ZXIgKi8NCj4gKw0KPiArCS8qIENETUEgKi8NCj4g
KwlyZWcgPSAobWFwX2NvbnZbY29udl9vcC0+Y29udl9tb2RlXQ0KPiArCQk8PCBTSElGVChD
RE1BX0RfTUlTQ19DRkdfMCwgQ09OVl9NT0RFKSkgfA0KPiArCQkobWFwX3ByZWNpc2lvbltj
b252X29wLT5pbl9wcmVjaXNpb25dDQo+ICsJCTw8IFNISUZUKENETUFfRF9NSVNDX0NGR18w
LCBJTl9QUkVDSVNJT04pKSB8DQo+ICsJCShtYXBfcHJlY2lzaW9uW2NvbnZfb3AtPm91dF9w
cmVjaXNpb25dDQo+ICsJCTw8IFNISUZUKENETUFfRF9NSVNDX0NGR18wLCBQUk9DX1BSRUNJ
U0lPTikpIHwNCj4gKwkJKGNvbnZfb3AtPmRhdGFfcmV1c2UNCj4gKwkJPDwgU0hJRlQoQ0RN
QV9EX01JU0NfQ0ZHXzAsIERBVEFfUkVVU0UpKSB8DQo+ICsJCShjb252X29wLT53ZWlnaHRf
cmV1c2UNCj4gKwkJPDwgU0hJRlQoQ0RNQV9EX01JU0NfQ0ZHXzAsIFdFSUdIVF9SRVVTRSkp
IHwNCj4gKwkJKGNvbnZfb3AtPnNraXBfZGF0YV9ybHMNCj4gKwkJPDwgU0hJRlQoQ0RNQV9E
X01JU0NfQ0ZHXzAsIFNLSVBfREFUQV9STFMpKSB8DQo+ICsJCShjb252X29wLT5za2lwX3dl
aWdodF9ybHMNCj4gKwkJPDwgU0hJRlQoQ0RNQV9EX01JU0NfQ0ZHXzAsIFNLSVBfV0VJR0hU
X1JMUykpOw0KPiArCWNkbWFfcmVnX3dyaXRlKGVuZ2luZSwgRF9NSVNDX0NGRywgcmVnKTsN
Cj4gKw0KPiArCXJlZyA9IChnZXRfaW5fZm9ybWF0KGNvbnZfb3AtPmRhdGFfZm9ybWF0KSA8
PA0KPiArCQlTSElGVChDRE1BX0RfREFUQUlOX0ZPUk1BVF8wLCBEQVRBSU5fRk9STUFUKSkg
fA0KPiArCQkobWFwX2ltZ19mbXRbY29udl9vcC0+ZGF0YV9mb3JtYXRdWzBdDQo+ICsJCTw8
IFNISUZUKENETUFfRF9EQVRBSU5fRk9STUFUXzAsIFBJWEVMX0ZPUk1BVCkpIHwNCj4gKwkJ
KG1hcF9waXhlbFtjb252X29wLT5waXhlbF9tYXBwaW5nXQ0KPiArCQk8PCBTSElGVChDRE1B
X0RfREFUQUlOX0ZPUk1BVF8wLCBQSVhFTF9NQVBQSU5HKSkgfA0KPiArCQkoY29udl9vcC0+
cGl4ZWxfb3ZlcnJpZGUNCj4gKwkJPDwgU0hJRlQoQ0RNQV9EX0RBVEFJTl9GT1JNQVRfMCwg
UElYRUxfU0lHTl9PVkVSUklERSkpOw0KPiArCWNkbWFfcmVnX3dyaXRlKGVuZ2luZSwgRF9E
QVRBSU5fRk9STUFULCByZWcpOw0KPiArDQo+ICsJcmVnID0gKChjb252X3N1cmZhY2UtPnNy
Y19kYXRhLndpZHRoIC0gMSkNCj4gKwkJPDwgU0hJRlQoQ0RNQV9EX0RBVEFJTl9TSVpFXzBf
MCwgREFUQUlOX1dJRFRIKSkgfA0KPiArCQkoKGNvbnZfc3VyZmFjZS0+c3JjX2RhdGEuaGVp
Z2h0IC0gMSkNCj4gKwkJPDwgU0hJRlQoQ0RNQV9EX0RBVEFJTl9TSVpFXzBfMCwgREFUQUlO
X0hFSUdIVCkpOw0KPiArCWNkbWFfcmVnX3dyaXRlKGVuZ2luZSwgRF9EQVRBSU5fU0laRV8w
LCByZWcpOw0KPiArDQo+ICsJcmVnID0gKChjb252X3N1cmZhY2UtPnNyY19kYXRhLmNoYW5u
ZWwgLSAxKQ0KPiArCQk8PCBTSElGVChDRE1BX0RfREFUQUlOX1NJWkVfMV8wLCBEQVRBSU5f
Q0hBTk5FTCkpOw0KPiArCWNkbWFfcmVnX3dyaXRlKGVuZ2luZSwgRF9EQVRBSU5fU0laRV8x
LCByZWcpOw0KPiArDQo+ICsJcmVnID0gKChjb252X29wLT5pbnB1dF93aWR0aF9jc2MgLSAx
KQ0KPiArCQk8PCBTSElGVChDRE1BX0RfREFUQUlOX1NJWkVfRVhUXzBfMCwgREFUQUlOX1dJ
RFRIX0VYVCkpIHwNCj4gKwkJKChjb252X29wLT5pbnB1dF9oZWlnaHRfY3NjIC0gMSkNCj4g
KwkJPDwgU0hJRlQoQ0RNQV9EX0RBVEFJTl9TSVpFX0VYVF8wXzAsIERBVEFJTl9IRUlHSFRf
RVhUKSk7DQo+ICsJY2RtYV9yZWdfd3JpdGUoZW5naW5lLCBEX0RBVEFJTl9TSVpFX0VYVF8w
LCByZWcpOw0KPiArDQo+ICsJcmVnID0gKG1hcF9yYW1bY29udl9zdXJmYWNlLT5zcmNfZGF0
YS50eXBlXQ0KPiArCQk8PCBTSElGVChDRE1BX0RfREFJTl9SQU1fVFlQRV8wLCBEQVRBSU5f
UkFNX1RZUEUpKTsNCj4gKwljZG1hX3JlZ193cml0ZShlbmdpbmUsIERfREFJTl9SQU1fVFlQ
RSwgcmVnKTsNCj4gKw0KPiArCWhpZ2ggPSB1cHBlcl8zMl9iaXRzKGlucHV0X2FkZHJlc3Mp
Ow0KPiArCWxvdyA9IGxvd2VyXzMyX2JpdHMoaW5wdXRfYWRkcmVzcyk7DQo+ICsJY2RtYV9y
ZWdfd3JpdGUoZW5naW5lLCBEX0RBSU5fQUREUl9ISUdIXzAsIGhpZ2gpOw0KPiArCWNkbWFf
cmVnX3dyaXRlKGVuZ2luZSwgRF9EQUlOX0FERFJfTE9XXzAsIGxvdyk7DQo+ICsNCj4gKwlo
aWdoID0gdXBwZXJfMzJfYml0cygoaW5wdXRfYWRkcmVzcyArIGNvbnZfc3VyZmFjZS0+b2Zm
c2V0X3UpKTsNCj4gKwlsb3cgPSBsb3dlcl8zMl9iaXRzKGlucHV0X2FkZHJlc3MgKyBjb252
X3N1cmZhY2UtPm9mZnNldF91KTsNCj4gKwljZG1hX3JlZ193cml0ZShlbmdpbmUsIERfREFJ
Tl9BRERSX0hJR0hfMSwgaGlnaCk7DQo+ICsJY2RtYV9yZWdfd3JpdGUoZW5naW5lLCBEX0RB
SU5fQUREUl9MT1dfMSwgbG93KTsNCj4gKw0KPiArCWNkbWFfcmVnX3dyaXRlKGVuZ2luZSwg
RF9MSU5FX1NUUklERSwgY29udl9zdXJmYWNlLT5zcmNfZGF0YS5saW5lX3N0cmlkZSk7DQo+
ICsJY2RtYV9yZWdfd3JpdGUoZW5naW5lLCBEX1NVUkZfU1RSSURFLCBjb252X3N1cmZhY2Ut
PnNyY19kYXRhLnN1cmZfc3RyaWRlKTsNCj4gKwljZG1hX3JlZ193cml0ZShlbmdpbmUsIERf
TElORV9VVl9TVFJJREUsIGNvbnZfc3VyZmFjZS0+aW5fbGluZV91dl9zdHJpZGUpOw0KPiAr
DQo+ICsJcmVnID0gKChjb252X3N1cmZhY2UtPnNyY19kYXRhLmxpbmVfc3RyaWRlID09DQo+
ICsJCQkoKHVpbnQzMl90KWNvbnZfc3VyZmFjZS0+c3JjX2RhdGEud2lkdGggKiBhdG9tX3Np
emUpKQ0KPiArCQk8PCBTSElGVChDRE1BX0RfREFJTl9NQVBfMCwgTElORV9QQUNLRUQpKTsN
Cj4gKwlyZWcgfD0gKChjb252X3N1cmZhY2UtPnNyY19kYXRhLnN1cmZfc3RyaWRlID09DQo+
ICsJCQkoKHVpbnQzMl90KShjb252X3N1cmZhY2UtPnNyY19kYXRhLndpZHRoICoNCj4gKwkJ
CWNvbnZfc3VyZmFjZS0+c3JjX2RhdGEuaGVpZ2h0KSAqIGF0b21fc2l6ZSkpDQo+ICsJCTw8
IFNISUZUKENETUFfRF9EQUlOX01BUF8wLCBTVVJGX1BBQ0tFRCkpOw0KPiArCWNkbWFfcmVn
X3dyaXRlKGVuZ2luZSwgRF9EQUlOX01BUCwgcmVnKTsNCj4gKw0KPiArCXJlZyA9ICgoY29u
dl9vcC0+YmF0Y2ggLSAxKQ0KPiArCQk8PCBTSElGVChDRE1BX0RfQkFUQ0hfTlVNQkVSXzAs
IEJBVENIRVMpKTsNCj4gKwljZG1hX3JlZ193cml0ZShlbmdpbmUsIERfQkFUQ0hfTlVNQkVS
LCByZWcpOw0KPiArDQo+ICsJY2RtYV9yZWdfd3JpdGUoZW5naW5lLCBEX0JBVENIX1NUUklE
RSwgY29udl9vcC0+YmF0Y2hfc3RyaWRlKTsNCj4gKw0KPiArCXJlZyA9ICgoY29udl9vcC0+
ZW50cnlfcGVyX3NsaWNlIC0gMSkNCj4gKwkJPDwgU0hJRlQoQ0RNQV9EX0VOVFJZX1BFUl9T
TElDRV8wLCBFTlRSSUVTKSk7DQo+ICsJY2RtYV9yZWdfd3JpdGUoZW5naW5lLCBEX0VOVFJZ
X1BFUl9TTElDRSwgcmVnKTsNCj4gKw0KPiArCXJlZyA9ICgoY29udl9vcC0+ZmV0Y2hfZ3Jh
aW4gLSAxKQ0KPiArCQk8PCBTSElGVChDRE1BX0RfRkVUQ0hfR1JBSU5fMCwgR1JBSU5TKSk7
DQo+ICsJY2RtYV9yZWdfd3JpdGUoZW5naW5lLCBEX0ZFVENIX0dSQUlOLCByZWcpOw0KPiAr
DQo+ICsJcmVnID0gKG1hcF93ZWlnaHRfZm10W2NvbnZfb3AtPndlaWdodF9mb3JtYXRdDQo+
ICsJCTw8IFNISUZUKENETUFfRF9XRUlHSFRfRk9STUFUXzAsIFdFSUdIVF9GT1JNQVQpKTsN
Cj4gKwljZG1hX3JlZ193cml0ZShlbmdpbmUsIERfV0VJR0hUX0ZPUk1BVCwgcmVnKTsNCj4g
Kw0KPiArCXJlZyA9ICgoY29udl9vcC0+Ynl0ZXNfcGVyX2tlcm5lbCAtIDEpDQo+ICsJCTw8
IFNISUZUKENETUFfRF9XRUlHSFRfU0laRV8wXzAsIEJZVEVfUEVSX0tFUk5FTCkpOw0KPiAr
CWNkbWFfcmVnX3dyaXRlKGVuZ2luZSwgRF9XRUlHSFRfU0laRV8wLCByZWcpOw0KPiArDQo+
ICsJcmVnID0gKChjb252X3N1cmZhY2UtPmRzdF9kYXRhLmNoYW5uZWwgLSAxKQ0KPiArCQk8
PCBTSElGVChDRE1BX0RfV0VJR0hUX1NJWkVfMV8wLCBXRUlHSFRfS0VSTkVMKSk7DQo+ICsJ
Y2RtYV9yZWdfd3JpdGUoZW5naW5lLCBEX1dFSUdIVF9TSVpFXzEsIHJlZyk7DQo+ICsNCj4g
KwlyZWcgPSAobWFwX3JhbVtjb252X3N1cmZhY2UtPndlaWdodF9kYXRhLnR5cGVdDQo+ICsJ
CTw8IFNISUZUKENETUFfRF9XRUlHSFRfUkFNX1RZUEVfMCwgV0VJR0hUX1JBTV9UWVBFKSk7
DQo+ICsJY2RtYV9yZWdfd3JpdGUoZW5naW5lLCBEX1dFSUdIVF9SQU1fVFlQRSwgcmVnKTsN
Cj4gKw0KPiArCWhpZ2ggPSB1cHBlcl8zMl9iaXRzKHdlaWdodF9hZGRyZXNzKTsNCj4gKwls
b3cgPSBsb3dlcl8zMl9iaXRzKHdlaWdodF9hZGRyZXNzKTsNCj4gKwljZG1hX3JlZ193cml0
ZShlbmdpbmUsIERfV0VJR0hUX0FERFJfSElHSCwgaGlnaCk7DQo+ICsJY2RtYV9yZWdfd3Jp
dGUoZW5naW5lLCBEX1dFSUdIVF9BRERSX0xPVywgbG93KTsNCj4gKwljZG1hX3JlZ193cml0
ZShlbmdpbmUsIERfV0VJR0hUX0JZVEVTLCBjb252X3N1cmZhY2UtPndlaWdodF9kYXRhLnNp
emUpOw0KPiArDQo+ICsJaWYgKGNvbnZfb3AtPndlaWdodF9mb3JtYXQgPT0gV0VJR0hUX0ZP
Uk1BVF9DT01QUkVTU0VEKSB7DQo+ICsJCWhpZ2ggPSB1cHBlcl8zMl9iaXRzKHdnc19hZGRy
ZXNzKTsNCj4gKwkJbG93ID0gbG93ZXJfMzJfYml0cyh3Z3NfYWRkcmVzcyk7DQo+ICsJCWNk
bWFfcmVnX3dyaXRlKGVuZ2luZSwgRF9XR1NfQUREUl9ISUdILCBoaWdoKTsNCj4gKwkJY2Rt
YV9yZWdfd3JpdGUoZW5naW5lLCBEX1dHU19BRERSX0xPVywgbG93KTsNCj4gKw0KPiArCQlo
aWdoID0gdXBwZXJfMzJfYml0cyh3bWJfYWRkcmVzcyk7DQo+ICsJCWxvdyA9IGxvd2VyXzMy
X2JpdHMod21iX2FkZHJlc3MpOw0KPiArCQljZG1hX3JlZ193cml0ZShlbmdpbmUsIERfV01C
X0FERFJfSElHSCwgaGlnaCk7DQo+ICsJCWNkbWFfcmVnX3dyaXRlKGVuZ2luZSwgRF9XTUJf
QUREUl9MT1csIGxvdyk7DQo+ICsJCWNkbWFfcmVnX3dyaXRlKGVuZ2luZSwgRF9XTUJfQllU
RVMsIGNvbnZfc3VyZmFjZS0+d21iX2RhdGEuc2l6ZSk7DQo+ICsJfQ0KPiArDQo+ICsJcmVn
ID0gKG1hcF9tZWFuW2NvbnZfb3AtPm1lYW5fZm9ybWF0XQ0KPiArCQk8PCBTSElGVChDRE1B
X0RfTUVBTl9GT1JNQVRfMCwgTUVBTl9GT1JNQVQpKTsNCj4gKwljZG1hX3JlZ193cml0ZShl
bmdpbmUsIERfTUVBTl9GT1JNQVQsIHJlZyk7DQo+ICsNCj4gKwlpZiAoY29udl9vcC0+bWVh
bl9mb3JtYXQgPT0gTUVBTl9GT1JNQVRfRU5BQkxFKSB7DQo+ICsJCXJlZyA9ICgoY29udl9v
cC0+bWVhbl9yeQ0KPiArCQkJPDwgU0hJRlQoQ0RNQV9EX01FQU5fR0xPQkFMXzBfMCwgTUVB
Tl9SWSkpICYNCj4gKwkJCU1BU0soQ0RNQV9EX01FQU5fR0xPQkFMXzBfMCwgTUVBTl9SWSkp
IHwNCj4gKwkJCSgoY29udl9vcC0+bWVhbl9ndQ0KPiArCQkJPDwgU0hJRlQoQ0RNQV9EX01F
QU5fR0xPQkFMXzBfMCwgTUVBTl9HVSkpICYNCj4gKwkJCU1BU0soQ0RNQV9EX01FQU5fR0xP
QkFMXzBfMCwgTUVBTl9HVSkpOw0KPiArCQljZG1hX3JlZ193cml0ZShlbmdpbmUsIERfTUVB
Tl9HTE9CQUxfMCwgcmVnKTsNCj4gKw0KPiArCQlyZWcgPSAoKGNvbnZfb3AtPm1lYW5fYnYN
Cj4gKwkJCTw8IFNISUZUKENETUFfRF9NRUFOX0dMT0JBTF8xXzAsIE1FQU5fQlYpKSYNCj4g
KwkJCU1BU0soQ0RNQV9EX01FQU5fR0xPQkFMXzFfMCwgTUVBTl9CVikpIHwNCj4gKwkJCSgo
Y29udl9vcC0+bWVhbl9heA0KPiArCQkJPDwgU0hJRlQoQ0RNQV9EX01FQU5fR0xPQkFMXzFf
MCwgTUVBTl9BWCkpJg0KPiArCQkJTUFTSyhDRE1BX0RfTUVBTl9HTE9CQUxfMV8wLCBNRUFO
X0FYKSk7DQo+ICsJCWNkbWFfcmVnX3dyaXRlKGVuZ2luZSwgRF9NRUFOX0dMT0JBTF8xLCBy
ZWcpOw0KPiArCX0NCj4gKw0KPiArCWlmIChjb252X29wLT5pbl9jdnQuZW5hYmxlKSB7DQo+
ICsJCXJlZyA9ICgoRklFTERfRU5VTShDRE1BX0RfQ1ZUX0NGR18wLCBDVlRfRU4sIEVOQUJM
RSkpDQo+ICsJCQk8PCBTSElGVChDRE1BX0RfQ1ZUX0NGR18wLCBDVlRfRU4pKSB8DQo+ICsJ
CQkoY29udl9vcC0+aW5fY3Z0LnRydW5jYXRlDQo+ICsJCQk8PCBTSElGVChDRE1BX0RfQ1ZU
X0NGR18wLCBDVlRfVFJVTkNBVEUpKTsNCj4gKwkJY2RtYV9yZWdfd3JpdGUoZW5naW5lLCBE
X0NWVF9DRkcsIHJlZyk7DQo+ICsJCWNkbWFfcmVnX3dyaXRlKGVuZ2luZSwgRF9DVlRfT0ZG
U0VULCBjb252X29wLT5pbl9jdnQub2Zmc2V0KTsNCj4gKwkJY2RtYV9yZWdfd3JpdGUoZW5n
aW5lLCBEX0NWVF9TQ0FMRSwgY29udl9vcC0+aW5fY3Z0LnNjYWxlKTsNCj4gKwl9IGVsc2Ug
ew0KPiArCQlyZWcgPSAoKEZJRUxEX0VOVU0oQ0RNQV9EX0NWVF9DRkdfMCwgQ1ZUX0VOLCBE
SVNBQkxFKSkNCj4gKwkJCTw8IFNISUZUKENETUFfRF9DVlRfQ0ZHXzAsIENWVF9FTikpOw0K
PiArCQljZG1hX3JlZ193cml0ZShlbmdpbmUsIERfQ1ZUX0NGRywgcmVnKTsNCj4gKwl9DQo+
ICsNCj4gKwlyZWcgPSAoKGNvbnZfb3AtPmNvbnZfc3RyaWRlX3ggLSAxKQ0KPiArCQk8PCBT
SElGVChDRE1BX0RfQ09OVl9TVFJJREVfMCwgQ09OVl9YX1NUUklERSkpIHwNCj4gKwkJKChj
b252X29wLT5jb252X3N0cmlkZV95IC0gMSkNCj4gKwkJPDwgU0hJRlQoQ0RNQV9EX0NPTlZf
U1RSSURFXzAsIENPTlZfWV9TVFJJREUpKTsNCj4gKwljZG1hX3JlZ193cml0ZShlbmdpbmUs
IERfQ09OVl9TVFJJREUsIHJlZyk7DQo+ICsNCj4gKwlyZWcgPSAoY29udl9vcC0+cGFkX3hf
bGVmdCA8PA0KPiArCQlTSElGVChDRE1BX0RfWkVST19QQURESU5HXzAsIFBBRF9MRUZUKSkg
fA0KPiArCQkoY29udl9vcC0+cGFkX3hfcmlnaHQNCj4gKwkJPDwgU0hJRlQoQ0RNQV9EX1pF
Uk9fUEFERElOR18wLCBQQURfUklHSFQpKSB8DQo+ICsJCShjb252X29wLT5wYWRfeV90b3AN
Cj4gKwkJPDwgU0hJRlQoQ0RNQV9EX1pFUk9fUEFERElOR18wLCBQQURfVE9QKSkgfA0KPiAr
CQkoY29udl9vcC0+cGFkX3lfYm90dG9tDQo+ICsJCTw8IFNISUZUKENETUFfRF9aRVJPX1BB
RERJTkdfMCwgUEFEX0JPVFRPTSkpOw0KPiArCWNkbWFfcmVnX3dyaXRlKGVuZ2luZSwgRF9a
RVJPX1BBRERJTkcsICAgcmVnKTsNCj4gKw0KPiArCXJlZyA9IGNvbnZfb3AtPnBhZF92YWwg
PDwNCj4gKwkJU0hJRlQoQ0RNQV9EX1pFUk9fUEFERElOR19WQUxVRV8wLCBQQURfVkFMVUUp
ICYNCj4gKwkJTUFTSyhDRE1BX0RfWkVST19QQURESU5HX1ZBTFVFXzAsIFBBRF9WQUxVRSk7
DQo+ICsJY2RtYV9yZWdfd3JpdGUoZW5naW5lLCBEX1pFUk9fUEFERElOR19WQUxVRSwgcmVn
KTsNCj4gKwlyZWcgPSAoKGNvbnZfb3AtPndlaWdodF9iYW5rIC0gMSkNCj4gKwkJPDwgU0hJ
RlQoQ0RNQV9EX0JBTktfMCwgV0VJR0hUX0JBTkspKSB8DQo+ICsJCSgoY29udl9vcC0+ZGF0
YV9iYW5rIC0gMSkNCj4gKwkJPDwgU0hJRlQoQ0RNQV9EX0JBTktfMCwgREFUQV9CQU5LKSk7
DQo+ICsJY2RtYV9yZWdfd3JpdGUoZW5naW5lLCBEX0JBTkssIHJlZyk7DQo+ICsNCj4gK2V4
aXQ6DQo+ICsJcmV0dXJuIHJldDsNCj4gK30NCj4gKw0KPiAraW50DQo+ICtkbGFfY29udl9p
c19yZWFkeShzdHJ1Y3QgZGxhX3Byb2Nlc3NvciAqcHJvY2Vzc29yLA0KPiArCQkJCSAgc3Ry
dWN0IGRsYV9wcm9jZXNzb3JfZ3JvdXAgKmdyb3VwKQ0KPiArew0KPiArCXJldHVybiAxOw0K
PiArfQ0KPiArDQo+ICt2b2lkDQo+ICtkbGFfY29udl9kdW1wX2NvbmZpZyhzdHJ1Y3QgZGxh
X3Byb2Nlc3Nvcl9ncm91cCAqZ3JvdXApDQo+ICt7DQo+ICsJc3RydWN0IGRsYV9jb252X29w
X2Rlc2MgKmNvbnZfb3A7DQo+ICsJc3RydWN0IGRsYV9jb252X3N1cmZhY2VfZGVzYyAqY29u
dl9zdXJmYWNlOw0KPiArDQo+ICsJY29udl9zdXJmYWNlID0gJmdyb3VwLT5zdXJmYWNlX2Rl
c2MtPmNvbnZfc3VyZmFjZTsNCj4gKwljb252X29wID0gJmdyb3VwLT5vcGVyYXRpb25fZGVz
Yy0+Y29udl9vcDsNCj4gK30NCj4gKw0KPiAraW50DQo+ICtkbGFfY29udl9wcm9ncmFtKHN0
cnVjdCBkbGFfZW5naW5lICplbmdpbmUsIHN0cnVjdCBkbGFfcHJvY2Vzc29yX2dyb3VwICpn
cm91cCkNCj4gK3sNCj4gKwlpbnQzMl90IHJldDsNCj4gKw0KPiArCXJldCA9IHByb2Nlc3Nv
cl9jb252X3Byb2dyYW0oZW5naW5lLCBncm91cCk7DQo+ICsJaWYgKHJldCkNCj4gKwkJZ290
byBleGl0Ow0KPiArDQo+ICtleGl0Og0KPiArCXJldHVybiByZXQ7DQo+ICt9DQo+IGRpZmYg
LS1naXQgYS9kcml2ZXJzL2dwdS9kcm0vbnZkbGEvbnZkbGFfZHJtLmMgYi9kcml2ZXJzL2dw
dS9kcm0vbnZkbGEvbnZkbGFfZHJtLmMNCj4gbmV3IGZpbGUgbW9kZSAxMDA2NDQNCj4gaW5k
ZXggMDAwMDAwMDAwMDAwLi45MjE3ZWVlMWRlM2INCj4gLS0tIC9kZXYvbnVsbA0KPiArKysg
Yi9kcml2ZXJzL2dwdS9kcm0vbnZkbGEvbnZkbGFfZHJtLmMNCj4gQEAgLTAsMCArMSw2OTUg
QEANCj4gKy8vIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBCU0QtMy1DbGF1c2UgT1IgR1BM
LTIuMA0KPiArLyoNCj4gKyAqIENvcHlyaWdodCAoQykgMjAxNy0yMDE4IE5WSURJQSBDT1JQ
T1JBVElPTg0KPiArICogQ29weXJpZ2h0IChDKSAyMDIyIENhaSBIdW9xaW5nDQo+ICsgKi8N
Cj4gKw0KPiArI2luY2x1ZGUgPGxpbnV4L2RtYS1idWYuaD4NCj4gKyNpbmNsdWRlIDxsaW51
eC9kbWEtbWFwcGluZy5oPg0KPiArI2luY2x1ZGUgPGxpbnV4L2ZzLmg+DQo+ICsjaW5jbHVk
ZSA8bGludXgvaW50ZXJydXB0Lmg+DQo+ICsjaW5jbHVkZSA8bGludXgvaXJxLmg+DQo+ICsj
aW5jbHVkZSA8bGludXgvaXJxZG9tYWluLmg+DQo+ICsjaW5jbHVkZSA8bGludXgvbW9kdWxl
Lmg+DQo+ICsjaW5jbHVkZSA8bGludXgvb2YuaD4NCj4gKyNpbmNsdWRlIDxsaW51eC9vZl9k
ZXZpY2UuaD4NCj4gKyNpbmNsdWRlIDxsaW51eC9vZl9pcnEuaD4NCj4gKyNpbmNsdWRlIDxs
aW51eC9vZl9wbGF0Zm9ybS5oPg0KPiArI2luY2x1ZGUgPGxpbnV4L3BsYXRmb3JtX2Rldmlj
ZS5oPg0KPiArI2luY2x1ZGUgPGxpbnV4L3ByaW50ay5oPg0KPiArI2luY2x1ZGUgPGxpbnV4
L3NsYWIuaD4NCj4gKyNpbmNsdWRlIDxsaW51eC9zcGlubG9jay5oPg0KPiArI2luY2x1ZGUg
PGxpbnV4L3RpbWUuaD4NCj4gKyNpbmNsdWRlIDxsaW51eC91YWNjZXNzLmg+DQo+ICsjaW5j
bHVkZSA8bGludXgvdHlwZXMuaD4NCj4gKw0KPiArI2luY2x1ZGUgIm52ZGxhX2RybS5oIg0K
PiArI2luY2x1ZGUgIm52ZGxhX2lvY3RsLmgiDQo+ICsjaW5jbHVkZSAibnZkbGFfZW5naW5l
LmgiDQo+ICsNCj4gK3N0YXRpYyBzdHJ1Y3QgbnZkbGFfY29uZmlnIG52ZGxhX2NvbmZpZ19v
c19pbml0aWFsID0gew0KPiArCS5hdG9tX3NpemUgPSAzMiwNCj4gKwkuYmRtYV9lbmFibGUg
PSB0cnVlLA0KPiArCS5ydWJpa19lbmFibGUgPSB0cnVlLA0KPiArCS53ZWlnaHRfY29tcHJl
c3Nfc3VwcG9ydCA9IHRydWUsDQo+ICt9Ow0KPiArDQo+ICtzdGF0aWMgc3RydWN0IG52ZGxh
X2NvbmZpZyBudmRsYV9jb25maWdfc21hbGwgPSB7DQo+ICsJLy8uYXRvbV9zaXplID0gOCwN
Cj4gKwkuYXRvbV9zaXplID0gMzIsICAvLyBudl9sYXJnZSBjb25maWcNCj4gKwkuYmRtYV9l
bmFibGUgPSBmYWxzZSwNCj4gKwkucnViaWtfZW5hYmxlID0gZmFsc2UsDQo+ICsJLndlaWdo
dF9jb21wcmVzc19zdXBwb3J0ID0gZmFsc2UsDQo+ICt9Ow0KPiArDQo+ICtpbnQ2NF90IGRs
YV9nZXRfdGltZV91cyh2b2lkKQ0KPiArew0KPiArCXJldHVybiBrdGltZV9nZXRfbnMoKSAv
IE5TRUNfUEVSX1VTRUM7DQo+ICt9DQo+ICsNCj4gK3ZvaWQgZGxhX3JlZ193cml0ZSh2b2lk
ICpkcml2ZXJfY29udGV4dCwgdWludDMyX3QgYWRkciwgdWludDMyX3QgcmVnKQ0KPiArew0K
PiArCXN0cnVjdCBudmRsYV9kZXZpY2UgKm52ZGxhX2RldiA9DQo+ICsJCQkoc3RydWN0IG52
ZGxhX2RldmljZSAqKWRyaXZlcl9jb250ZXh0Ow0KPiArDQo+ICsJaWYgKCFudmRsYV9kZXYp
DQo+ICsJCXJldHVybjsNCj4gKw0KPiArCXdyaXRlbChyZWcsIG52ZGxhX2Rldi0+YmFzZSAr
IGFkZHIpOw0KPiArfQ0KPiArDQo+ICt1aW50MzJfdCBkbGFfcmVnX3JlYWQodm9pZCAqZHJp
dmVyX2NvbnRleHQsIHVpbnQzMl90IGFkZHIpDQo+ICt7DQo+ICsJc3RydWN0IG52ZGxhX2Rl
dmljZSAqbnZkbGFfZGV2ID0NCj4gKwkJCShzdHJ1Y3QgbnZkbGFfZGV2aWNlICopZHJpdmVy
X2NvbnRleHQ7DQo+ICsNCj4gKwlpZiAoIW52ZGxhX2RldikNCj4gKwkJcmV0dXJuIDA7DQo+
ICsNCj4gKwlyZXR1cm4gcmVhZGwobnZkbGFfZGV2LT5iYXNlICsgYWRkcik7DQo+ICt9DQo+
ICsNCj4gK3N0YXRpYyBpcnFyZXR1cm5fdCBudmRsYV9lbmdpbmVfaXNyKGludDMyX3QgaXJx
LCB2b2lkICpkYXRhKQ0KPiArew0KPiArCXVuc2lnbmVkIGxvbmcgZmxhZ3M7DQo+ICsJdWlu
dDMyX3QgbWFzazsNCj4gKwl1aW50MzJfdCByZWc7DQo+ICsJc3RydWN0IGRsYV9wcm9jZXNz
b3IgKnByb2Nlc3NvciA9IE5VTEw7DQo+ICsJc3RydWN0IGRsYV9wcm9jZXNzb3JfZ3JvdXAg
Kmdyb3VwOw0KPiArCXN0cnVjdCBkbGFfZW5naW5lICplbmdpbmU7DQo+ICsJc3RydWN0IG52
ZGxhX2RldmljZSAqbnZkbGFfZGV2ID0gKHN0cnVjdCBudmRsYV9kZXZpY2UgKilkYXRhOw0K
PiArDQo+ICsJaWYgKCFudmRsYV9kZXYpDQo+ICsJCXJldHVybiBJUlFfTk9ORTsNCj4gKw0K
PiArCWVuZ2luZSA9IG52ZGxhX2Rldi0+ZW5naW5lX2NvbnRleHQ7DQo+ICsJc3Bpbl9sb2Nr
X2lycXNhdmUoJm52ZGxhX2Rldi0+bnZkbGFfbG9jaywgZmxhZ3MpOw0KPiArDQo+ICsJbWFz
ayA9IGdsYl9yZWdfcmVhZChlbmdpbmUsIFNfSU5UUl9NQVNLKTsNCj4gKwlyZWcgPSBnbGJf
cmVnX3JlYWQoZW5naW5lLCBTX0lOVFJfU1RBVFVTKTsNCj4gKw0KPiArCWlmIChyZWcgJiBN
QVNLKEdMQl9TX0lOVFJfU1RBVFVTXzAsIENBQ0NfRE9ORV9TVEFUVVMwKSkgew0KPiArCQlw
cm9jZXNzb3IgPSAmZW5naW5lLT5wcm9jZXNzb3JzW0RMQV9PUF9DT05WXTsNCj4gKwkJZ3Jv
dXAgPSAmcHJvY2Vzc29yLT5ncm91cHNbMF07DQo+ICsJCWdyb3VwLT5ldmVudHMgfD0gKDEg
PDwgRExBX0VWRU5UX09QX0NPTVBMRVRFRCk7DQo+ICsJfQ0KPiArCWlmIChyZWcgJiBNQVNL
KEdMQl9TX0lOVFJfU1RBVFVTXzAsIENBQ0NfRE9ORV9TVEFUVVMxKSkgew0KPiArCQlwcm9j
ZXNzb3IgPSAmZW5naW5lLT5wcm9jZXNzb3JzW0RMQV9PUF9DT05WXTsNCj4gKwkJZ3JvdXAg
PSAmcHJvY2Vzc29yLT5ncm91cHNbMV07DQo+ICsJCWdyb3VwLT5ldmVudHMgfD0gKDEgPDwg
RExBX0VWRU5UX09QX0NPTVBMRVRFRCk7DQo+ICsJfQ0KPiArCWlmIChyZWcgJiBNQVNLKEdM
Ql9TX0lOVFJfU1RBVFVTXzAsIFNEUF9ET05FX1NUQVRVUzApKSB7DQo+ICsJCXByb2Nlc3Nv
ciA9ICZlbmdpbmUtPnByb2Nlc3NvcnNbRExBX09QX1NEUF07DQo+ICsJCWdyb3VwID0gJnBy
b2Nlc3Nvci0+Z3JvdXBzWzBdOw0KPiArCQlncm91cC0+ZXZlbnRzIHw9ICgxIDw8IERMQV9F
VkVOVF9PUF9DT01QTEVURUQpOw0KPiArCX0NCj4gKwlpZiAocmVnICYgTUFTSyhHTEJfU19J
TlRSX1NUQVRVU18wLCBTRFBfRE9ORV9TVEFUVVMxKSkgew0KPiArCQlwcm9jZXNzb3IgPSAm
ZW5naW5lLT5wcm9jZXNzb3JzW0RMQV9PUF9TRFBdOw0KPiArCQlncm91cCA9ICZwcm9jZXNz
b3ItPmdyb3Vwc1sxXTsNCj4gKwkJZ3JvdXAtPmV2ZW50cyB8PSAoMSA8PCBETEFfRVZFTlRf
T1BfQ09NUExFVEVEKTsNCj4gKwl9DQo+ICsJaWYgKHJlZyAmIE1BU0soR0xCX1NfSU5UUl9T
VEFUVVNfMCwgQ0RQX0RPTkVfU1RBVFVTMCkpIHsNCj4gKwkJcHJvY2Vzc29yID0gJmVuZ2lu
ZS0+cHJvY2Vzc29yc1tETEFfT1BfQ0RQXTsNCj4gKwkJZ3JvdXAgPSAmcHJvY2Vzc29yLT5n
cm91cHNbMF07DQo+ICsJCWdyb3VwLT5ldmVudHMgfD0gKDEgPDwgRExBX0VWRU5UX09QX0NP
TVBMRVRFRCk7DQo+ICsJfQ0KPiArCWlmIChyZWcgJiBNQVNLKEdMQl9TX0lOVFJfU1RBVFVT
XzAsIENEUF9ET05FX1NUQVRVUzEpKSB7DQo+ICsJCXByb2Nlc3NvciA9ICZlbmdpbmUtPnBy
b2Nlc3NvcnNbRExBX09QX0NEUF07DQo+ICsJCWdyb3VwID0gJnByb2Nlc3Nvci0+Z3JvdXBz
WzFdOw0KPiArCQlncm91cC0+ZXZlbnRzIHw9ICgxIDw8IERMQV9FVkVOVF9PUF9DT01QTEVU
RUQpOw0KPiArCX0NCj4gKwlpZiAocmVnICYgTUFTSyhHTEJfU19JTlRSX1NUQVRVU18wLCBS
VUJJS19ET05FX1NUQVRVUzApKSB7DQo+ICsJCXByb2Nlc3NvciA9ICZlbmdpbmUtPnByb2Nl
c3NvcnNbRExBX09QX1JVQklLXTsNCj4gKwkJZ3JvdXAgPSAmcHJvY2Vzc29yLT5ncm91cHNb
MF07DQo+ICsJCWdyb3VwLT5ldmVudHMgfD0gKDEgPDwgRExBX0VWRU5UX09QX0NPTVBMRVRF
RCk7DQo+ICsJfQ0KPiArCWlmIChyZWcgJiBNQVNLKEdMQl9TX0lOVFJfU1RBVFVTXzAsIFJV
QklLX0RPTkVfU1RBVFVTMSkpIHsNCj4gKwkJcHJvY2Vzc29yID0gJmVuZ2luZS0+cHJvY2Vz
c29yc1tETEFfT1BfUlVCSUtdOw0KPiArCQlncm91cCA9ICZwcm9jZXNzb3ItPmdyb3Vwc1sx
XTsNCj4gKwkJZ3JvdXAtPmV2ZW50cyB8PSAoMSA8PCBETEFfRVZFTlRfT1BfQ09NUExFVEVE
KTsNCj4gKwl9DQo+ICsJaWYgKHJlZyAmIE1BU0soR0xCX1NfSU5UUl9TVEFUVVNfMCwgUERQ
X0RPTkVfU1RBVFVTMCkpIHsNCj4gKwkJcHJvY2Vzc29yID0gJmVuZ2luZS0+cHJvY2Vzc29y
c1tETEFfT1BfUERQXTsNCj4gKwkJZ3JvdXAgPSAmcHJvY2Vzc29yLT5ncm91cHNbMF07DQo+
ICsJCWdyb3VwLT5ldmVudHMgfD0gKDEgPDwgRExBX0VWRU5UX09QX0NPTVBMRVRFRCk7DQo+
ICsJfQ0KPiArCWlmIChyZWcgJiBNQVNLKEdMQl9TX0lOVFJfU1RBVFVTXzAsIFBEUF9ET05F
X1NUQVRVUzEpKSB7DQo+ICsJCXByb2Nlc3NvciA9ICZlbmdpbmUtPnByb2Nlc3NvcnNbRExB
X09QX1BEUF07DQo+ICsJCWdyb3VwID0gJnByb2Nlc3Nvci0+Z3JvdXBzWzFdOw0KPiArCQln
cm91cC0+ZXZlbnRzIHw9ICgxIDw8IERMQV9FVkVOVF9PUF9DT01QTEVURUQpOw0KPiArCX0N
Cj4gKwlpZiAocmVnICYgTUFTSyhHTEJfU19JTlRSX1NUQVRVU18wLCBCRE1BX0RPTkVfU1RB
VFVTMCkpIHsNCj4gKwkJcHJvY2Vzc29yID0gJmVuZ2luZS0+cHJvY2Vzc29yc1tETEFfT1Bf
QkRNQV07DQo+ICsJCWdyb3VwID0gJnByb2Nlc3Nvci0+Z3JvdXBzWzBdOw0KPiArCQlncm91
cC0+ZXZlbnRzIHw9ICgxIDw8IERMQV9FVkVOVF9PUF9DT01QTEVURUQpOw0KPiArCX0NCj4g
KwlpZiAocmVnICYgTUFTSyhHTEJfU19JTlRSX1NUQVRVU18wLCBCRE1BX0RPTkVfU1RBVFVT
MSkpIHsNCj4gKwkJcHJvY2Vzc29yID0gJmVuZ2luZS0+cHJvY2Vzc29yc1tETEFfT1BfQkRN
QV07DQo+ICsJCWdyb3VwID0gJnByb2Nlc3Nvci0+Z3JvdXBzWzFdOw0KPiArCQlncm91cC0+
ZXZlbnRzIHw9ICgxIDw8IERMQV9FVkVOVF9PUF9DT01QTEVURUQpOw0KPiArCX0NCj4gKwlp
ZiAocmVnICYgTUFTSyhHTEJfU19JTlRSX1NUQVRVU18wLCBDRE1BX0RBVF9ET05FX1NUQVRV
UzApKSB7DQo+ICsJCXByb2Nlc3NvciA9ICZlbmdpbmUtPnByb2Nlc3NvcnNbRExBX09QX0NP
TlZdOw0KPiArCQlncm91cCA9ICZwcm9jZXNzb3ItPmdyb3Vwc1swXTsNCj4gKwkJZ3JvdXAt
PmV2ZW50cyB8PSAoMSA8PCBETEFfRVZFTlRfQ0RNQV9EVF9ET05FKTsNCj4gKwl9DQo+ICsJ
aWYgKHJlZyAmIE1BU0soR0xCX1NfSU5UUl9TVEFUVVNfMCwgQ0RNQV9EQVRfRE9ORV9TVEFU
VVMxKSkgew0KPiArCQlwcm9jZXNzb3IgPSAmZW5naW5lLT5wcm9jZXNzb3JzW0RMQV9PUF9D
T05WXTsNCj4gKwkJZ3JvdXAgPSAmcHJvY2Vzc29yLT5ncm91cHNbMV07DQo+ICsJCWdyb3Vw
LT5ldmVudHMgfD0gKDEgPDwgRExBX0VWRU5UX0NETUFfRFRfRE9ORSk7DQo+ICsJfQ0KPiAr
CWlmIChyZWcgJiBNQVNLKEdMQl9TX0lOVFJfU1RBVFVTXzAsIENETUFfV1RfRE9ORV9TVEFU
VVMwKSkgew0KPiArCQlwcm9jZXNzb3IgPSAmZW5naW5lLT5wcm9jZXNzb3JzW0RMQV9PUF9D
T05WXTsNCj4gKwkJZ3JvdXAgPSAmcHJvY2Vzc29yLT5ncm91cHNbMF07DQo+ICsJCWdyb3Vw
LT5ldmVudHMgfD0gKDEgPDwgRExBX0VWRU5UX0NETUFfV1RfRE9ORSk7DQo+ICsJfQ0KPiAr
CWlmIChyZWcgJiBNQVNLKEdMQl9TX0lOVFJfU1RBVFVTXzAsIENETUFfV1RfRE9ORV9TVEFU
VVMxKSkgew0KPiArCQlwcm9jZXNzb3IgPSAmZW5naW5lLT5wcm9jZXNzb3JzW0RMQV9PUF9D
T05WXTsNCj4gKwkJZ3JvdXAgPSAmcHJvY2Vzc29yLT5ncm91cHNbMV07DQo+ICsJCWdyb3Vw
LT5ldmVudHMgfD0gKDEgPDwgRExBX0VWRU5UX0NETUFfV1RfRE9ORSk7DQo+ICsJfQ0KPiAr
DQo+ICsJZ2xiX3JlZ193cml0ZShlbmdpbmUsIFNfSU5UUl9TVEFUVVMsIHJlZyk7DQo+ICsJ
bWFzayA9IGdsYl9yZWdfcmVhZChlbmdpbmUsIFNfSU5UUl9NQVNLKTsNCj4gKwlyZWcgPSBn
bGJfcmVnX3JlYWQoZW5naW5lLCBTX0lOVFJfU1RBVFVTKTsNCj4gKw0KPiArCWNvbXBsZXRl
KCZudmRsYV9kZXYtPmV2ZW50X25vdGlmaWVyKTsNCj4gKwlzcGluX3VubG9ja19pcnFyZXN0
b3JlKCZudmRsYV9kZXYtPm52ZGxhX2xvY2ssIGZsYWdzKTsNCj4gKw0KPiArCXJldHVybiBJ
UlFfSEFORExFRDsNCj4gK30NCj4gKw0KPiArc3RhdGljIGludDMyX3QgZGxhX3JlYWRfZG1h
X2FkZHJlc3Modm9pZCAqZHJpdmVyX2NvbnRleHQsIHZvaWQgKnRhc2tfZGF0YSwNCj4gKwkJ
CQkJCWludDE2X3QgaW5kZXgsIHZvaWQgKmRzdCkNCj4gK3sNCj4gKwlpbnQzMl90IHJldCA9
IDA7DQo+ICsJc3RydWN0IG52ZGxhX21lbV9oYW5kbGUgKmhhbmRsZXM7DQo+ICsJZG1hX2Fk
ZHJfdCAqcGh5c19hZGRyID0gKGRtYV9hZGRyX3QgKikoZHN0KTsNCj4gKwlzdHJ1Y3QgbnZk
bGFfZGV2aWNlICpudmRsYV9kZXYgPQ0KPiArCQkJKHN0cnVjdCBudmRsYV9kZXZpY2UgKilk
cml2ZXJfY29udGV4dDsNCj4gKwlzdHJ1Y3QgbnZkbGFfdGFzayAqdGFzayA9IChzdHJ1Y3Qg
bnZkbGFfdGFzayAqKXRhc2tfZGF0YTsNCj4gKw0KPiArCWlmIChpbmRleCA9PSAtMSB8fCBp
bmRleCA+IHRhc2stPm51bV9hZGRyZXNzZXMpDQo+ICsJCXJldHVybiAtRUlOVkFMOw0KPiAr
DQo+ICsJaGFuZGxlcyA9IChzdHJ1Y3QgbnZkbGFfbWVtX2hhbmRsZSAqKXRhc2stPmFkZHJl
c3NfbGlzdDsNCj4gKwlyZXQgPSBudmRsYV9nZW1fZG1hX2FkZHIobnZkbGFfZGV2LT5kcm0s
IHRhc2stPmZpbGUsDQo+ICsJCQkJCWhhbmRsZXNbaW5kZXhdLmhhbmRsZSwNCj4gKwkJCQkJ
cGh5c19hZGRyKTsNCj4gKw0KPiArCS8qIEFkZCBvZmZzZXQgdG8gSU9WQSBhZGRyZXNzICov
DQo+ICsJKnBoeXNfYWRkciA9ICpwaHlzX2FkZHIgKyBoYW5kbGVzW2luZGV4XS5vZmZzZXQ7
DQo+ICsNCj4gKwlyZXR1cm4gcmV0Ow0KPiArfQ0KPiArDQo+ICtzdGF0aWMgaW50MzJfdCBk
bGFfcmVhZF9jcHVfYWRkcmVzcyh2b2lkICpkcml2ZXJfY29udGV4dCwgdm9pZCAqdGFza19k
YXRhLA0KPiArCQkJCQkJaW50MTZfdCBpbmRleCwgdm9pZCAqZHN0KQ0KPiArew0KPiArCXVp
bnQ2NF90ICp0ZW1wID0gKHVpbnQ2NF90ICopZHN0Ow0KPiArCXN0cnVjdCBudmRsYV90YXNr
ICp0YXNrID0gKHN0cnVjdCBudmRsYV90YXNrICopdGFza19kYXRhOw0KPiArDQo+ICsJaWYg
KGluZGV4ID09IC0xIHx8IGluZGV4ID4gdGFzay0+bnVtX2FkZHJlc3NlcykNCj4gKwkJcmV0
dXJuIC1FSU5WQUw7DQo+ICsNCj4gKwkqdGVtcCA9ICh1aW50NjRfdClpbmRleDsNCj4gKwly
ZXR1cm4gMDsNCj4gK30NCj4gKw0KPiAraW50MzJfdCBkbGFfZ2V0X2RtYV9hZGRyZXNzKHZv
aWQgKmRyaXZlcl9jb250ZXh0LCB2b2lkICp0YXNrX2RhdGEsDQo+ICsJCQkJCWludDE2X3Qg
aW5kZXgsIHZvaWQgKmRzdF9wdHIsDQo+ICsJCQkJCXVpbnQzMl90IGRlc3RpbmF0aW9uKQ0K
PiArew0KPiArCWludDMyX3QgcmV0ID0gMDsNCj4gKw0KPiArCWlmIChkZXN0aW5hdGlvbiA9
PSBERVNUSU5BVElPTl9QUk9DRVNTT1IpIHsNCj4gKwkJcmV0ID0gZGxhX3JlYWRfY3B1X2Fk
ZHJlc3MoZHJpdmVyX2NvbnRleHQsIHRhc2tfZGF0YSwNCj4gKwkJCQkJCWluZGV4LCBkc3Rf
cHRyKTsNCj4gKwl9IGVsc2UgaWYgKGRlc3RpbmF0aW9uID09IERFU1RJTkFUSU9OX0RNQSkg
ew0KPiArCQlyZXQgPSBkbGFfcmVhZF9kbWFfYWRkcmVzcyhkcml2ZXJfY29udGV4dCwgdGFz
a19kYXRhLA0KPiArCQkJCQkJaW5kZXgsIGRzdF9wdHIpOw0KPiArCX0gZWxzZSB7DQo+ICsJ
CXJldCA9IC1FSU5WQUw7DQo+ICsJfQ0KPiArDQo+ICsJcmV0dXJuIHJldDsNCj4gK30NCj4g
Kw0KPiAraW50MzJfdCBkbGFfZGF0YV93cml0ZSh2b2lkICpkcml2ZXJfY29udGV4dCwgdm9p
ZCAqdGFza19kYXRhLA0KPiArCQkJCXZvaWQgKnNyYywgdWludDY0X3QgZHN0LA0KPiArCQkJ
CXVpbnQzMl90IHNpemUsIHVpbnQ2NF90IG9mZnNldCkNCj4gK3sNCj4gKwlpbnQzMl90IHJl
dDsNCj4gKwl2b2lkICpwdHIgPSBOVUxMOw0KPiArCXN0cnVjdCBkbWFfYnVmICpidWY7DQo+
ICsJc3RydWN0IGlvc3lzX21hcCBtYXA7DQo+ICsJc3RydWN0IG52ZGxhX21lbV9oYW5kbGUg
KmhhbmRsZXM7DQo+ICsJc3RydWN0IG52ZGxhX3Rhc2sgKnRhc2sgPSAoc3RydWN0IG52ZGxh
X3Rhc2sgKil0YXNrX2RhdGE7DQo+ICsNCj4gKwloYW5kbGVzID0gdGFzay0+YWRkcmVzc19s
aXN0Ow0KPiArCWJ1ZiA9IGRtYV9idWZfZ2V0KGhhbmRsZXNbZHN0XS5oYW5kbGUpOw0KPiAr
CWlmIChJU19FUlIoYnVmKSkgew0KPiArCQlwcl9lcnIoIiVzOiBGYWlsZWQgZ2V0IGRtYV9i
dWYgZm9yIGhhbmRsZT0lZFxuIiwgX19mdW5jX18sDQo+ICsJCQkJCQloYW5kbGVzW2RzdF0u
aGFuZGxlKTsNCj4gKwkJcmV0dXJuIC1FRkFVTFQ7DQo+ICsJfQ0KPiArDQo+ICsJcmV0ID0g
ZG1hX2J1Zl9iZWdpbl9jcHVfYWNjZXNzKGJ1ZiwgRE1BX0JJRElSRUNUSU9OQUwpOw0KPiAr
CWlmIChyZXQpDQo+ICsJCWdvdG8gcHV0X2RtYV9idWY7DQo+ICsNCj4gKwlyZXQgPSBkbWFf
YnVmX3ZtYXAoYnVmLCAmbWFwKTsNCj4gKwlwdHIgPSByZXQgPyBOVUxMIDogbWFwLnZhZGRy
Ow0KDQpOZXZlciBleHRyYWN0IHRoZSBwb2ludGVyJ3MgYWRkcmVzcyB3aXRob3V0IGdvb2Qg
cmVhc29uLiBZb3UgZG9uJ3Qga25vdyANCmlmIHRoaXMgcG9pbnRzIHRvIGEgbG9jYXRpb24g
aW4gSS9PIG1lbW9yeS4NCg0KPiArCWlmICghcHRyKSB7DQoNClNpbXBseSB0ZXN0IGZvciBy
ZXQgaGVyZS4NCg0KPiArCQlwcl9lcnIoIiVzOiBGYWlsZWQgdG8gdm1hcCBkbWFfYnVmIGZv
ciBoYW5kbGU9JWRcbiIsIF9fZnVuY19fLA0KPiArCQkJCQkJaGFuZGxlc1tkc3RdLmhhbmRs
ZSk7DQo+ICsJCXJldCA9IC1FTk9NRU07DQoNCllvdSBhbHJlYWR5IGdvdCBhbiBlcnJubyBj
b2RlLiBEb24ndCBvdmVycmlkZSBpdC4NCg0KPiArCQlnb3RvIGVuZF9jcHVfYWNjZXNzOw0K
PiArCX0NCj4gKw0KPiArDQo+ICsJbWVtY3B5KCh2b2lkICopKCh1aW50OF90ICopcHRyICsg
b2Zmc2V0KSwgc3JjLCBzaXplKTsNCg0KVXNlIGlvc3lzX21hcF9tZW1jcHlfdG8oKSBoZXJl
LiAgSXQgZG9lcyB0aGUgcmlnaHQgdGhpbmcNCg0KPiArDQo+ICsJZG1hX2J1Zl92dW5tYXAo
YnVmLCBwdHIpOw0KDQpZb3UgaGF2ZSB0byBwYXNzIG1hcCBhcyB0aGUgc2Vjb25kIGFyZ3Vt
ZW50Lg0KDQo+ICsNCj4gK2VuZF9jcHVfYWNjZXNzOg0KPiArCWRtYV9idWZfZW5kX2NwdV9h
Y2Nlc3MoYnVmLCBETUFfQklESVJFQ1RJT05BTCk7DQo+ICsNCj4gK3B1dF9kbWFfYnVmOg0K
PiArCWRtYV9idWZfcHV0KGJ1Zik7DQo+ICsNCj4gKwlyZXR1cm4gcmV0Ow0KPiArfQ0KPiAr
DQo+ICtpbnQzMl90IGRsYV9kYXRhX3JlYWQodm9pZCAqZHJpdmVyX2NvbnRleHQsIHZvaWQg
KnRhc2tfZGF0YSwNCj4gKwkJCQl1aW50NjRfdCBzcmMsIHZvaWQgKmRzdCwNCj4gKwkJCQl1
aW50MzJfdCBzaXplLCB1aW50NjRfdCBvZmZzZXQpDQo+ICt7DQo+ICsJaW50MzJfdCByZXQ7
DQo+ICsJdm9pZCAqcHRyID0gTlVMTDsNCj4gKwlzdHJ1Y3QgZG1hX2J1ZiAqYnVmOw0KPiAr
CXN0cnVjdCBpb3N5c19tYXAgbWFwOw0KPiArCXN0cnVjdCBudmRsYV9tZW1faGFuZGxlICpo
YW5kbGVzOw0KPiArCXN0cnVjdCBudmRsYV90YXNrICp0YXNrID0gKHN0cnVjdCBudmRsYV90
YXNrICopdGFza19kYXRhOw0KPiArDQo+ICsJaGFuZGxlcyA9IHRhc2stPmFkZHJlc3NfbGlz
dDsNCj4gKw0KPiArCWJ1ZiA9IGRtYV9idWZfZ2V0KGhhbmRsZXNbc3JjXS5oYW5kbGUpOw0K
PiArCWlmIChJU19FUlIoYnVmKSkgew0KPiArCQlwcl9lcnIoIiVzOiBGYWlsZWQgZ2V0IGRt
YV9idWYgZm9yIGhhbmRsZT0lZFxuIiwgX19mdW5jX18sDQo+ICsJCQkJCQloYW5kbGVzW3Ny
Y10uaGFuZGxlKTsNCj4gKwkJcmV0dXJuIC1FRkFVTFQ7DQo+ICsJfQ0KPiArDQo+ICsJcmV0
ID0gZG1hX2J1Zl9iZWdpbl9jcHVfYWNjZXNzKGJ1ZiwgRE1BX0JJRElSRUNUSU9OQUwpOw0K
PiArCWlmIChyZXQpDQo+ICsJCWdvdG8gcHV0X2RtYV9idWY7DQo+ICsNCj4gKwlyZXQgPSBk
bWFfYnVmX3ZtYXAoYnVmLCAmbWFwKTsNCj4gKwlwdHIgPSByZXQgPyBOVUxMIDogbWFwLnZh
ZGRyOw0KPiArCWlmICghcHRyKSB7DQo+ICsJCXByX2VycigiJXM6IEZhaWxlZCB0byB2bWFw
IGRtYV9idWYgZm9yIGhhbmRsZT0lZFxuIiwgX19mdW5jX18sDQo+ICsJCQkJCQloYW5kbGVz
W3NyY10uaGFuZGxlKTsNCj4gKwkJcmV0ID0gLUVOT01FTTsNCj4gKwkJZ290byBlbmRfY3B1
X2FjY2VzczsNCj4gKwl9DQoNCkFsbCB0aGUgc2FtZSBwcm9ibGVtcyBhcyBpbiBkbGFfZGF0
YV93cml0ZSgpLg0KDQo+ICsNCj4gKwltZW1jcHkoZHN0LCAodm9pZCAqKSgoKHVpbnQ4X3Qg
KilwdHIpICsgb2Zmc2V0KSwgc2l6ZSk7DQoNClVzZSBpb3N5c19tYXBfbWVtY3B5X2Zyb20o
KSBoZXJlLg0KDQo+ICsNCj4gKwlkbWFfYnVmX3Z1bm1hcChidWYsIHB0cik7DQoNCidtYXAn
IGluc3RlYWQgb2YgJ3B0cicNCg0KPiArDQo+ICtlbmRfY3B1X2FjY2VzczoNCj4gKwlkbWFf
YnVmX2VuZF9jcHVfYWNjZXNzKGJ1ZiwgRE1BX0JJRElSRUNUSU9OQUwpOw0KPiArDQo+ICtw
dXRfZG1hX2J1ZjoNCj4gKwlkbWFfYnVmX3B1dChidWYpOw0KPiArDQo+ICsJcmV0dXJuIHJl
dDsNCj4gK30NCj4gKw0KPiAraW50MzJfdCBudmRsYV90YXNrX3N1Ym1pdChzdHJ1Y3QgbnZk
bGFfZGV2aWNlICpudmRsYV9kZXYsIHN0cnVjdCBudmRsYV90YXNrICp0YXNrKQ0KPiArew0K
PiArCWludDMyX3QgZXJyID0gMDsNCj4gKwl1aW50MzJfdCB0YXNrX2NvbXBsZXRlID0gMDsN
Cj4gKw0KPiArCS8vdHJhY2VfcHJpbnRrKCJfX252ZGxhX3Rhc2tfc3VibWl0X2VudHJ5XG4i
KTsNCj4gKwludmRsYV9kZXYtPnRhc2sgPSB0YXNrOw0KPiArDQo+ICsJZXJyID0gZGxhX2V4
ZWN1dGVfdGFzayhudmRsYV9kZXYtPmVuZ2luZV9jb250ZXh0LCAodm9pZCAqKXRhc2ssIG52
ZGxhX2Rldi0+Y29uZmlnX2RhdGEpOw0KPiArCWlmIChlcnIpIHsNCj4gKwkJcHJfZXJyKCJU
YXNrIGV4ZWN1dGlvbiBmYWlsZWRcbiIpOw0KPiArCQlyZXR1cm4gZXJyOw0KPiArCX0NCj4g
Kw0KPiArCXByX2RlYnVnKCJXYWl0IGZvciB0YXNrIGNvbXBsZXRlXG4iKTsNCj4gKw0KPiAr
CXdoaWxlICgxKSB7DQo+ICsJCXVuc2lnbmVkIGxvbmcgZmxhZ3M7DQo+ICsNCj4gKwkJd2Fp
dF9mb3JfY29tcGxldGlvbigmbnZkbGFfZGV2LT5ldmVudF9ub3RpZmllcik7DQo+ICsNCj4g
KwkJc3Bpbl9sb2NrX2lycXNhdmUoJm52ZGxhX2Rldi0+bnZkbGFfbG9jaywgZmxhZ3MpOw0K
PiArDQo+ICsJCWVyciA9IGRsYV9wcm9jZXNzX2V2ZW50cyhudmRsYV9kZXYtPmVuZ2luZV9j
b250ZXh0LCAmdGFza19jb21wbGV0ZSk7DQo+ICsNCj4gKwkJc3Bpbl91bmxvY2tfaXJxcmVz
dG9yZSgmbnZkbGFfZGV2LT5udmRsYV9sb2NrLCBmbGFncyk7DQo+ICsNCj4gKwkJaWYgKGVy
ciB8fCB0YXNrX2NvbXBsZXRlKQ0KPiArCQkJYnJlYWs7DQo+ICsJfQ0KPiArDQo+ICsJcHJf
ZGVidWcoIlRhc2sgY29tcGxldGVcbiIpOw0KPiArCWRsYV9jbGVhcl90YXNrKG52ZGxhX2Rl
di0+ZW5naW5lX2NvbnRleHQpOw0KPiArCS8vdHJhY2VfcHJpbnRrKCJfX252ZGxhX3Rhc2tf
c3VibWl0X2V4aXRcbiIpOw0KPiArDQo+ICsJcmV0dXJuIGVycjsNCj4gK30NCj4gKw0KPiAr
c3RhdGljIHVuaW9uIGRsYV9vcGVyYXRpb25fY29udGFpbmVyIG9wZXJhdGlvbl9kZXNjW0RM
QV9PUF9OVU1dW0RMQV9OVU1fR1JPVVBTXTsNCj4gK3N0YXRpYyB1bmlvbiBkbGFfc3VyZmFj
ZV9jb250YWluZXIgc3VyZmFjZV9kZXNjW0RMQV9PUF9OVU1dW0RMQV9OVU1fR1JPVVBTXTsN
Cj4gKw0KPiArc3RhdGljIHN0cnVjdCBkbGFfdGFzayBnbG9iYWxfdGFzazsNCj4gKw0KPiAr
c3RhdGljIHN0cnVjdCBkbGFfZW5naW5lIGVuZ2luZSA9IHsNCj4gKwkucHJvY2Vzc29yc1tE
TEFfT1BfQkRNQV0gPSB7DQo+ICsJCS5uYW1lID0gIkJETUEiLA0KPiArCQkub3BfdHlwZSA9
IERMQV9PUF9CRE1BLA0KPiArCQkucHJvZ3JhbSA9IGRsYV9iZG1hX3Byb2dyYW0sDQo+ICsJ
CS5lbmFibGUgPSBkbGFfYmRtYV9lbmFibGUsDQo+ICsJCS5zZXRfcHJvZHVjZXIgPSBkbGFf
YmRtYV9zZXRfcHJvZHVjZXIsDQo+ICsJCS5pc19yZWFkeSA9IGRsYV9iZG1hX2lzX3JlYWR5
LA0KPiArCQkuZHVtcF9jb25maWcgPSBkbGFfYmRtYV9kdW1wX2NvbmZpZywNCj4gKwkJLnJk
bWFfY2hlY2sgPSBkbGFfYmRtYV9yZG1hX2NoZWNrLA0KPiArCQkuY29uc3VtZXJfcHRyID0g
MCwNCj4gKwkJLnJvaV9pbmRleCA9IDAsDQo+ICsJCS5ncm91cF9zdGF0dXMgPSAwLA0KPiAr
CQkucmRtYV9zdGF0dXMgPSAwLA0KPiArCQkubGFzdF9ncm91cCA9IDEsDQo+ICsJCS5ncm91
cHNbMF0gPSB7DQo+ICsJCQkuaWQgPSAwLA0KPiArCQkJLnJkbWFfaWQgPSAwLA0KPiArCQkJ
LmFjdGl2ZSA9IDAsDQo+ICsJCQkuZXZlbnRzID0gMCwNCj4gKwkJCS5yb2lfaW5kZXggPSAw
LA0KPiArCQkJLmlzX3JkbWFfbmVlZGVkID0gMCwNCj4gKwkJCS5sdXRfaW5kZXggPSAtMSwN
Cj4gKwkJCS5vcGVyYXRpb25fZGVzYyA9ICZvcGVyYXRpb25fZGVzY1tETEFfT1BfQkRNQV1b
MF0sDQo+ICsJCQkuc3VyZmFjZV9kZXNjID0gJnN1cmZhY2VfZGVzY1tETEFfT1BfQkRNQV1b
MF0sDQo+ICsJCX0sDQo+ICsJCS5ncm91cHNbMV0gPSB7DQo+ICsJCQkuaWQgPSAxLA0KPiAr
CQkJLnJkbWFfaWQgPSAwLA0KPiArCQkJLmFjdGl2ZSA9IDAsDQo+ICsJCQkuZXZlbnRzID0g
MCwNCj4gKwkJCS5yb2lfaW5kZXggPSAwLA0KPiArCQkJLmlzX3JkbWFfbmVlZGVkID0gMCwN
Cj4gKwkJCS5sdXRfaW5kZXggPSAtMSwNCj4gKwkJCS5vcGVyYXRpb25fZGVzYyA9ICZvcGVy
YXRpb25fZGVzY1tETEFfT1BfQkRNQV1bMV0sDQo+ICsJCQkuc3VyZmFjZV9kZXNjID0gJnN1
cmZhY2VfZGVzY1tETEFfT1BfQkRNQV1bMV0sDQo+ICsJCX0sDQo+ICsJfSwNCj4gKwkucHJv
Y2Vzc29yc1tETEFfT1BfQ09OVl0gPSB7DQo+ICsJCS5uYW1lID0gIkNvbnZvbHV0aW9uIiwN
Cj4gKwkJLm9wX3R5cGUgPSBETEFfT1BfQ09OViwNCj4gKwkJLnByb2dyYW0gPSBkbGFfY29u
dl9wcm9ncmFtLA0KPiArCQkuZW5hYmxlID0gZGxhX2NvbnZfZW5hYmxlLA0KPiArCQkuc2V0
X3Byb2R1Y2VyID0gZGxhX2NvbnZfc2V0X3Byb2R1Y2VyLA0KPiArCQkuaXNfcmVhZHkgPSBk
bGFfY29udl9pc19yZWFkeSwNCj4gKwkJLmR1bXBfY29uZmlnID0gZGxhX2NvbnZfZHVtcF9j
b25maWcsDQo+ICsJCS5yZG1hX2NoZWNrID0gZGxhX2NvbnZfcmRtYV9jaGVjaywNCj4gKwkJ
LmNvbnN1bWVyX3B0ciA9IDAsDQo+ICsJCS5yb2lfaW5kZXggPSAwLA0KPiArCQkuZ3JvdXBf
c3RhdHVzID0gMCwNCj4gKwkJLnJkbWFfc3RhdHVzID0gMCwNCj4gKwkJLmxhc3RfZ3JvdXAg
PSAxLA0KPiArCQkuZ3JvdXBzWzBdID0gew0KPiArCQkJLmlkID0gMCwNCj4gKwkJCS5yZG1h
X2lkID0gMCwNCj4gKwkJCS5hY3RpdmUgPSAwLA0KPiArCQkJLmV2ZW50cyA9IDAsDQo+ICsJ
CQkucm9pX2luZGV4ID0gMCwNCj4gKwkJCS5pc19yZG1hX25lZWRlZCA9IDAsDQo+ICsJCQku
bHV0X2luZGV4ID0gLTEsDQo+ICsJCQkub3BlcmF0aW9uX2Rlc2MgPSAmb3BlcmF0aW9uX2Rl
c2NbRExBX09QX0NPTlZdWzBdLA0KPiArCQkJLnN1cmZhY2VfZGVzYyA9ICZzdXJmYWNlX2Rl
c2NbRExBX09QX0NPTlZdWzBdLA0KPiArCQl9LA0KPiArCQkuZ3JvdXBzWzFdID0gew0KPiAr
CQkJLmlkID0gMSwNCj4gKwkJCS5yZG1hX2lkID0gMCwNCj4gKwkJCS5hY3RpdmUgPSAwLA0K
PiArCQkJLmV2ZW50cyA9IDAsDQo+ICsJCQkucm9pX2luZGV4ID0gMCwNCj4gKwkJCS5pc19y
ZG1hX25lZWRlZCA9IDAsDQo+ICsJCQkubHV0X2luZGV4ID0gLTEsDQo+ICsJCQkub3BlcmF0
aW9uX2Rlc2MgPSAmb3BlcmF0aW9uX2Rlc2NbRExBX09QX0NPTlZdWzFdLA0KPiArCQkJLnN1
cmZhY2VfZGVzYyA9ICZzdXJmYWNlX2Rlc2NbRExBX09QX0NPTlZdWzFdLA0KPiArCQl9LA0K
PiArCX0sDQo+ICsJLnByb2Nlc3NvcnNbRExBX09QX1NEUF0gPSB7DQo+ICsJCS5uYW1lID0g
IlNEUCIsDQo+ICsJCS5vcF90eXBlID0gRExBX09QX1NEUCwNCj4gKwkJLnByb2dyYW0gPSBk
bGFfc2RwX3Byb2dyYW0sDQo+ICsJCS5lbmFibGUgPSBkbGFfc2RwX2VuYWJsZSwNCj4gKwkJ
LnNldF9wcm9kdWNlciA9IGRsYV9zZHBfc2V0X3Byb2R1Y2VyLA0KPiArCQkuaXNfcmVhZHkg
PSBkbGFfc2RwX2lzX3JlYWR5LA0KPiArCQkuZHVtcF9jb25maWcgPSBkbGFfc2RwX2R1bXBf
Y29uZmlnLA0KPiArCQkucmRtYV9jaGVjayA9IGRsYV9zZHBfcmRtYV9jaGVjaywNCj4gKwkJ
LmNvbnN1bWVyX3B0ciA9IDAsDQo+ICsJCS5yb2lfaW5kZXggPSAwLA0KPiArCQkuZ3JvdXBf
c3RhdHVzID0gMCwNCj4gKwkJLnJkbWFfc3RhdHVzID0gMCwNCj4gKwkJLmxhc3RfZ3JvdXAg
PSAxLA0KPiArCQkuZ3JvdXBzWzBdID0gew0KPiArCQkJLmlkID0gMCwNCj4gKwkJCS5yZG1h
X2lkID0gMCwNCj4gKwkJCS5hY3RpdmUgPSAwLA0KPiArCQkJLmV2ZW50cyA9IDAsDQo+ICsJ
CQkucm9pX2luZGV4ID0gMCwNCj4gKwkJCS5pc19yZG1hX25lZWRlZCA9IDAsDQo+ICsJCQku
bHV0X2luZGV4ID0gLTEsDQo+ICsJCQkub3BlcmF0aW9uX2Rlc2MgPSAmb3BlcmF0aW9uX2Rl
c2NbRExBX09QX1NEUF1bMF0sDQo+ICsJCQkuc3VyZmFjZV9kZXNjID0gJnN1cmZhY2VfZGVz
Y1tETEFfT1BfU0RQXVswXSwNCj4gKwkJfSwNCj4gKwkJLmdyb3Vwc1sxXSA9IHsNCj4gKwkJ
CS5pZCA9IDEsDQo+ICsJCQkucmRtYV9pZCA9IDAsDQo+ICsJCQkuYWN0aXZlID0gMCwNCj4g
KwkJCS5ldmVudHMgPSAwLA0KPiArCQkJLnJvaV9pbmRleCA9IDAsDQo+ICsJCQkuaXNfcmRt
YV9uZWVkZWQgPSAwLA0KPiArCQkJLmx1dF9pbmRleCA9IC0xLA0KPiArCQkJLm9wZXJhdGlv
bl9kZXNjID0gJm9wZXJhdGlvbl9kZXNjW0RMQV9PUF9TRFBdWzFdLA0KPiArCQkJLnN1cmZh
Y2VfZGVzYyA9ICZzdXJmYWNlX2Rlc2NbRExBX09QX1NEUF1bMV0sDQo+ICsJCX0sDQo+ICsJ
fSwNCj4gKwkucHJvY2Vzc29yc1tETEFfT1BfUERQXSA9IHsNCj4gKwkJLm5hbWUgPSAiUERQ
IiwNCj4gKwkJLm9wX3R5cGUgPSBETEFfT1BfUERQLA0KPiArCQkucHJvZ3JhbSA9IGRsYV9w
ZHBfcHJvZ3JhbSwNCj4gKwkJLmVuYWJsZSA9IGRsYV9wZHBfZW5hYmxlLA0KPiArCQkuc2V0
X3Byb2R1Y2VyID0gZGxhX3BkcF9zZXRfcHJvZHVjZXIsDQo+ICsJCS5pc19yZWFkeSA9IGRs
YV9wZHBfaXNfcmVhZHksDQo+ICsJCS5kdW1wX2NvbmZpZyA9IGRsYV9wZHBfZHVtcF9jb25m
aWcsDQo+ICsJCS5yZG1hX2NoZWNrID0gZGxhX3BkcF9yZG1hX2NoZWNrLA0KPiArCQkuY29u
c3VtZXJfcHRyID0gMCwNCj4gKwkJLnJvaV9pbmRleCA9IDAsDQo+ICsJCS5ncm91cF9zdGF0
dXMgPSAwLA0KPiArCQkucmRtYV9zdGF0dXMgPSAwLA0KPiArCQkubGFzdF9ncm91cCA9IDEs
DQo+ICsJCS5ncm91cHNbMF0gPSB7DQo+ICsJCQkuaWQgPSAwLA0KPiArCQkJLnJkbWFfaWQg
PSAwLA0KPiArCQkJLmFjdGl2ZSA9IDAsDQo+ICsJCQkuZXZlbnRzID0gMCwNCj4gKwkJCS5y
b2lfaW5kZXggPSAwLA0KPiArCQkJLmlzX3JkbWFfbmVlZGVkID0gMCwNCj4gKwkJCS5sdXRf
aW5kZXggPSAtMSwNCj4gKwkJCS5vcGVyYXRpb25fZGVzYyA9ICZvcGVyYXRpb25fZGVzY1tE
TEFfT1BfUERQXVswXSwNCj4gKwkJCS5zdXJmYWNlX2Rlc2MgPSAmc3VyZmFjZV9kZXNjW0RM
QV9PUF9QRFBdWzBdLA0KPiArCQl9LA0KPiArCQkuZ3JvdXBzWzFdID0gew0KPiArCQkJLmlk
ID0gMSwNCj4gKwkJCS5yZG1hX2lkID0gMCwNCj4gKwkJCS5hY3RpdmUgPSAwLA0KPiArCQkJ
LmV2ZW50cyA9IDAsDQo+ICsJCQkucm9pX2luZGV4ID0gMCwNCj4gKwkJCS5pc19yZG1hX25l
ZWRlZCA9IDAsDQo+ICsJCQkubHV0X2luZGV4ID0gLTEsDQo+ICsJCQkub3BlcmF0aW9uX2Rl
c2MgPSAmb3BlcmF0aW9uX2Rlc2NbRExBX09QX1BEUF1bMV0sDQo+ICsJCQkuc3VyZmFjZV9k
ZXNjID0gJnN1cmZhY2VfZGVzY1tETEFfT1BfUERQXVsxXSwNCj4gKwkJfSwNCj4gKwl9LA0K
PiArCS5wcm9jZXNzb3JzW0RMQV9PUF9DRFBdID0gew0KPiArCQkubmFtZSA9ICJDRFAiLA0K
PiArCQkub3BfdHlwZSA9IERMQV9PUF9DRFAsDQo+ICsJCS5wcm9ncmFtID0gZGxhX2NkcF9w
cm9ncmFtLA0KPiArCQkuZW5hYmxlID0gZGxhX2NkcF9lbmFibGUsDQo+ICsJCS5zZXRfcHJv
ZHVjZXIgPSBkbGFfY2RwX3NldF9wcm9kdWNlciwNCj4gKwkJLmlzX3JlYWR5ID0gZGxhX2Nk
cF9pc19yZWFkeSwNCj4gKwkJLmR1bXBfY29uZmlnID0gZGxhX2NkcF9kdW1wX2NvbmZpZywN
Cj4gKwkJLnJkbWFfY2hlY2sgPSBkbGFfY2RwX3JkbWFfY2hlY2ssDQo+ICsJCS5jb25zdW1l
cl9wdHIgPSAwLA0KPiArCQkucm9pX2luZGV4ID0gMCwNCj4gKwkJLmdyb3VwX3N0YXR1cyA9
IDAsDQo+ICsJCS5yZG1hX3N0YXR1cyA9IDAsDQo+ICsJCS5sYXN0X2dyb3VwID0gMSwNCj4g
KwkJLmdyb3Vwc1swXSA9IHsNCj4gKwkJCS5pZCA9IDAsDQo+ICsJCQkucmRtYV9pZCA9IDAs
DQo+ICsJCQkuYWN0aXZlID0gMCwNCj4gKwkJCS5ldmVudHMgPSAwLA0KPiArCQkJLnJvaV9p
bmRleCA9IDAsDQo+ICsJCQkuaXNfcmRtYV9uZWVkZWQgPSAwLA0KPiArCQkJLmx1dF9pbmRl
eCA9IC0xLA0KPiArCQkJLm9wZXJhdGlvbl9kZXNjID0gJm9wZXJhdGlvbl9kZXNjW0RMQV9P
UF9DRFBdWzBdLA0KPiArCQkJLnN1cmZhY2VfZGVzYyA9ICZzdXJmYWNlX2Rlc2NbRExBX09Q
X0NEUF1bMF0sDQo+ICsJCX0sDQo+ICsJCS5ncm91cHNbMV0gPSB7DQo+ICsJCQkuaWQgPSAx
LA0KPiArCQkJLnJkbWFfaWQgPSAwLA0KPiArCQkJLmFjdGl2ZSA9IDAsDQo+ICsJCQkuZXZl
bnRzID0gMCwNCj4gKwkJCS5yb2lfaW5kZXggPSAwLA0KPiArCQkJLmlzX3JkbWFfbmVlZGVk
ID0gMCwNCj4gKwkJCS5sdXRfaW5kZXggPSAtMSwNCj4gKwkJCS5vcGVyYXRpb25fZGVzYyA9
ICZvcGVyYXRpb25fZGVzY1tETEFfT1BfQ0RQXVsxXSwNCj4gKwkJCS5zdXJmYWNlX2Rlc2Mg
PSAmc3VyZmFjZV9kZXNjW0RMQV9PUF9DRFBdWzFdLA0KPiArCQl9LA0KPiArCX0sDQo+ICsN
Cj4gKwkucHJvY2Vzc29yc1tETEFfT1BfUlVCSUtdID0gew0KPiArCQkubmFtZSA9ICJSVUJJ
SyIsDQo+ICsJCS5vcF90eXBlID0gRExBX09QX1JVQklLLA0KPiArCQkucHJvZ3JhbSA9IGRs
YV9ydWJpa19wcm9ncmFtLA0KPiArCQkuZW5hYmxlID0gZGxhX3J1YmlrX2VuYWJsZSwNCj4g
KwkJLnNldF9wcm9kdWNlciA9IGRsYV9ydWJpa19zZXRfcHJvZHVjZXIsDQo+ICsJCS5pc19y
ZWFkeSA9IGRsYV9ydWJpa19pc19yZWFkeSwNCj4gKwkJLmR1bXBfY29uZmlnID0gZGxhX3J1
YmlrX2R1bXBfY29uZmlnLA0KPiArCQkucmRtYV9jaGVjayA9IGRsYV9ydWJpa19yZG1hX2No
ZWNrLA0KPiArCQkuY29uc3VtZXJfcHRyID0gMCwNCj4gKwkJLnJvaV9pbmRleCA9IDAsDQo+
ICsJCS5ncm91cF9zdGF0dXMgPSAwLA0KPiArCQkucmRtYV9zdGF0dXMgPSAwLA0KPiArCQku
bGFzdF9ncm91cCA9IDEsDQo+ICsJCS5ncm91cHNbMF0gPSB7DQo+ICsJCQkuaWQgPSAwLA0K
PiArCQkJLnJkbWFfaWQgPSAwLA0KPiArCQkJLmFjdGl2ZSA9IDAsDQo+ICsJCQkuZXZlbnRz
ID0gMCwNCj4gKwkJCS5yb2lfaW5kZXggPSAwLA0KPiArCQkJLmlzX3JkbWFfbmVlZGVkID0g
MCwNCj4gKwkJCS5sdXRfaW5kZXggPSAtMSwNCj4gKwkJCS5vcGVyYXRpb25fZGVzYyA9ICZv
cGVyYXRpb25fZGVzY1tETEFfT1BfUlVCSUtdWzBdLA0KPiArCQkJLnN1cmZhY2VfZGVzYyA9
ICZzdXJmYWNlX2Rlc2NbRExBX09QX1JVQklLXVswXSwNCj4gKwkJfSwNCj4gKwkJLmdyb3Vw
c1sxXSA9IHsNCj4gKwkJCS5pZCA9IDEsDQo+ICsJCQkucmRtYV9pZCA9IDAsDQo+ICsJCQku
YWN0aXZlID0gMCwNCj4gKwkJCS5ldmVudHMgPSAwLA0KPiArCQkJLnJvaV9pbmRleCA9IDAs
DQo+ICsJCQkuaXNfcmRtYV9uZWVkZWQgPSAwLA0KPiArCQkJLmx1dF9pbmRleCA9IC0xLA0K
PiArCQkJLm9wZXJhdGlvbl9kZXNjID0gJm9wZXJhdGlvbl9kZXNjW0RMQV9PUF9SVUJJS11b
MV0sDQo+ICsJCQkuc3VyZmFjZV9kZXNjID0gJnN1cmZhY2VfZGVzY1tETEFfT1BfUlVCSUtd
WzFdLA0KPiArCQl9LA0KPiArCX0sDQo+ICsNCj4gK307DQo+ICsNCj4gKy8qIGRyaXZlciBw
cm9iZSBhbmQgaW5pdCAqLw0KPiArc3RhdGljIGNvbnN0IHN0cnVjdCBvZl9kZXZpY2VfaWQg
bnZkbGFfb2ZfbWF0Y2hbXSA9IHsNCj4gKwl7DQo+ICsJCS5jb21wYXRpYmxlID0gIm52aWRp
YSxudmRsYV9vc19pbml0aWFsIiwNCj4gKwkJLmRhdGEgPSAmbnZkbGFfY29uZmlnX29zX2lu
aXRpYWwsDQo+ICsJfSwNCj4gKwl7DQo+ICsJCS5jb21wYXRpYmxlID0gIm52aWRpYSxudmRs
YV8yIiwNCj4gKwkJLmRhdGEgPSAmbnZkbGFfY29uZmlnX3NtYWxsLA0KPiArCX0sDQo+ICsJ
eyB9LA0KPiArfTsNCj4gKw0KPiArc3RhdGljIGludDMyX3QgbnZkbGFfcHJvYmUoc3RydWN0
IHBsYXRmb3JtX2RldmljZSAqcGRldikNCj4gK3sNCj4gKwlpbnQzMl90IGVyciA9IDA7DQo+
ICsJc3RydWN0IHJlc291cmNlICpyZXM7DQo+ICsJc3RydWN0IG52ZGxhX2RldmljZSAqbnZk
bGFfZGV2Ow0KPiArCXN0cnVjdCBkZXZpY2UgKmRldiA9ICZwZGV2LT5kZXY7DQo+ICsJY29u
c3Qgc3RydWN0IG9mX2RldmljZV9pZCAqbWF0Y2g7DQo+ICsNCj4gKwlpZiAoIXBkZXYtPmRl
di5vZl9ub2RlKQ0KPiArCQlyZXR1cm4gLUVJTlZBTDsNCj4gKw0KPiArCW1hdGNoID0gb2Zf
bWF0Y2hfZGV2aWNlKG52ZGxhX29mX21hdGNoLCAmcGRldi0+ZGV2KTsNCj4gKwlpZiAoIW1h
dGNoKSB7DQo+ICsJCXByX2VycigiTWlzc2luZyBEVCBlbnRyeSFcbiIpOw0KPiArCQlyZXR1
cm4gLUVJTlZBTDsNCj4gKwl9DQo+ICsNCj4gKwludmRsYV9kZXYgPSBkZXZtX2t6YWxsb2Mo
ZGV2LCBzaXplb2YoKm52ZGxhX2RldiksIEdGUF9LRVJORUwpOw0KPiArCWlmICghbnZkbGFf
ZGV2KQ0KPiArCQlyZXR1cm4gLUVOT01FTTsNCj4gKw0KPiArCXBsYXRmb3JtX3NldF9kcnZk
YXRhKHBkZXYsIG52ZGxhX2Rldik7DQo+ICsJbnZkbGFfZGV2LT5wZGV2ID0gcGRldjsNCj4g
KwludmRsYV9kZXYtPmNvbmZpZ19kYXRhID0gKHN0cnVjdCBudmRsYV9jb25maWcgKiltYXRj
aC0+ZGF0YTsNCj4gKw0KPiArCWluaXRfY29tcGxldGlvbigmbnZkbGFfZGV2LT5ldmVudF9u
b3RpZmllcik7DQo+ICsNCj4gKwlyZXMgPSBwbGF0Zm9ybV9nZXRfcmVzb3VyY2UocGRldiwg
SU9SRVNPVVJDRV9NRU0sIDApOw0KPiArCW52ZGxhX2Rldi0+YmFzZSA9IGRldm1faW9yZW1h
cF9yZXNvdXJjZSgmcGRldi0+ZGV2LCByZXMpOw0KPiArCWlmIChJU19FUlIobnZkbGFfZGV2
LT5iYXNlKSkNCj4gKwkJcmV0dXJuIFBUUl9FUlIobnZkbGFfZGV2LT5iYXNlKTsNCj4gKw0K
PiArCXJlcyA9IHBsYXRmb3JtX2dldF9yZXNvdXJjZShwZGV2LCBJT1JFU09VUkNFX0lSUSwg
MCk7DQo+ICsJaWYgKCFyZXMpIHsNCj4gKwkJZGV2X2VycigmcGRldi0+ZGV2LCAibm8gaXJx
IHJlc291cmNlXG4iKTsNCj4gKwkJcmV0dXJuIC1FSU5WQUw7DQo+ICsJfQ0KPiArCW52ZGxh
X2Rldi0+aXJxID0gcmVzLT5zdGFydDsNCj4gKw0KPiArCWVyciA9IGRldm1fcmVxdWVzdF9p
cnEoJnBkZXYtPmRldiwgbnZkbGFfZGV2LT5pcnEsDQo+ICsJCQkJbnZkbGFfZW5naW5lX2lz
ciwgMCwNCj4gKwkJCQlkZXZfbmFtZSgmcGRldi0+ZGV2KSwgbnZkbGFfZGV2KTsNCj4gKwlp
ZiAoZXJyKQ0KPiArCQlyZXR1cm4gZXJyOw0KPiArDQo+ICsJbnZkbGFfZGV2LT5lbmdpbmVf
Y29udGV4dCA9ICZlbmdpbmU7DQo+ICsJZW5naW5lLnRhc2sgPSAmZ2xvYmFsX3Rhc2s7DQo+
ICsJZW5naW5lLmRyaXZlcl9jb250ZXh0ID0gKHZvaWQgKiludmRsYV9kZXY7DQo+ICsJZW5n
aW5lLnRhc2stPnRhc2tfZGF0YSA9IE5VTEw7DQo+ICsNCj4gKwlkbGFfaW5pdF9vcF9jYWNo
ZSgmZW5naW5lKTsNCj4gKwlkbGFfY2xlYXJfdGFzayhudmRsYV9kZXYtPmVuZ2luZV9jb250
ZXh0KTsNCj4gKw0KPiArCWVyciA9IG52ZGxhX2RybV9wcm9iZShudmRsYV9kZXYpOw0KPiAr
CWlmIChlcnIpDQo+ICsJCWRldl9lcnIoJnBkZXYtPmRldiwgImZhaWxlZCB0byByZWdpc3Rl
ciBkcm0gZGV2aWNlXG4iKTsNCj4gKw0KPiArCXJldHVybiBlcnI7DQo+ICt9DQo+ICsNCj4g
K3N0YXRpYyBpbnQzMl90IF9fZXhpdCBudmRsYV9yZW1vdmUoc3RydWN0IHBsYXRmb3JtX2Rl
dmljZSAqcGRldikNCj4gK3sNCj4gKwlzdHJ1Y3QgbnZkbGFfZGV2aWNlICpudmRsYV9kZXYg
PSBkZXZfZ2V0X2RydmRhdGEoJnBkZXYtPmRldik7DQo+ICsNCj4gKwludmRsYV9kcm1fcmVt
b3ZlKG52ZGxhX2Rldik7DQo+ICsNCj4gKwlyZXR1cm4gMDsNCj4gK30NCj4gKw0KPiArc3Rh
dGljIHN0cnVjdCBwbGF0Zm9ybV9kcml2ZXIgbnZkbGFfZHJpdmVyID0gew0KPiArCS5wcm9i
ZSA9IG52ZGxhX3Byb2JlLA0KPiArCS5yZW1vdmUgPSBfX2V4aXRfcChudmRsYV9yZW1vdmUp
LA0KPiArCS5kcml2ZXIgPSB7DQo+ICsJCS5vd25lciA9IFRISVNfTU9EVUxFLA0KPiArCQku
bmFtZSA9ICJOVkRMQSIsDQo+ICsJCS5vZl9tYXRjaF90YWJsZSA9IG9mX21hdGNoX3B0cihu
dmRsYV9vZl9tYXRjaCksDQo+ICsJfSwNCj4gK307DQo+ICttb2R1bGVfcGxhdGZvcm1fZHJp
dmVyKG52ZGxhX2RyaXZlcik7DQo+ICsNCj4gK01PRFVMRV9MSUNFTlNFKCJEdWFsIEJTRC9H
UEwiKTsNCj4gK01PRFVMRV9ERVNDUklQVElPTigiTnZpZGlhIERlZXAgTGVhcm5pbmcgQWNj
ZWxlcmF0b3IgZHJpdmVyIik7DQo+ICtNT0RVTEVfSU1QT1JUX05TKERNQV9CVUYpOw0KPiBk
aWZmIC0tZ2l0IGEvZHJpdmVycy9ncHUvZHJtL252ZGxhL252ZGxhX2RybS5oIGIvZHJpdmVy
cy9ncHUvZHJtL252ZGxhL252ZGxhX2RybS5oDQo+IG5ldyBmaWxlIG1vZGUgMTAwNjQ0DQo+
IGluZGV4IDAwMDAwMDAwMDAwMC4uMzU2ZmMzOTlhY2NiDQo+IC0tLSAvZGV2L251bGwNCj4g
KysrIGIvZHJpdmVycy9ncHUvZHJtL252ZGxhL252ZGxhX2RybS5oDQo+IEBAIC0wLDAgKzEs
MTI3IEBADQo+ICsvKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogR1BMLTIuMCBPUiBCU0Qt
My1DbGF1c2UgKi8NCj4gKy8qDQo+ICsgKiBDb3B5cmlnaHQgKEMpIDIwMTctMjAxOCBOVklE
SUEgQ09SUE9SQVRJT04uDQo+ICsgKiBDb3B5cmlnaHQgKEMpIDIwMjIgQ2FpIEh1b3FpbmcN
Cj4gKyAqLw0KPiArDQo+ICsjaWZuZGVmIF9fTlZETEFfRFJNX0hfDQo+ICsjZGVmaW5lIF9f
TlZETEFfRFJNX0hfDQo+ICsNCj4gKyNpbmNsdWRlIDxsaW51eC9jb21wbGV0aW9uLmg+DQo+
ICsjaW5jbHVkZSA8bGludXgvZGV2aWNlLmg+DQo+ICsjaW5jbHVkZSA8bGludXgva3JlZi5o
Pg0KPiArI2luY2x1ZGUgPGxpbnV4L3BsYXRmb3JtX2RldmljZS5oPg0KPiArI2luY2x1ZGUg
PGxpbnV4L3NwaW5sb2NrLmg+DQo+ICsjaW5jbHVkZSA8bGludXgvZXJybm8uaD4NCj4gKyNp
bmNsdWRlIDxsaW51eC9iaXRzLmg+DQo+ICsjaW5jbHVkZSA8bGludXgvdHlwZXMuaD4NCj4g
Kw0KPiArI2luY2x1ZGUgIm52ZGxhX2VuZ2luZS5oIg0KPiArDQo+ICsjZGVmaW5lIEFTU0VS
VF9HT1RPKF9jb25kaXRpb24sIF9yZXQsIF9lcnJfdmFsdWUsIF9nb3RvKQkgICBcDQo+ICtk
byB7CQkJCQkJCQkJCQkJCQkgICBcDQo+ICsJaWYgKCEoX2NvbmRpdGlvbikpIHsJCQkJCQkJ
CQkgICBcDQo+ICsJCV9yZXQgPSBfZXJyX3ZhbHVlOwkJCQkJCQkJCSAgIFwNCj4gKwkJcHJf
ZXJyKCIlczolZCBmYWlsZWQgJWRcbiIsIF9fZnVuY19fLCBfX0xJTkVfXywgX3JldCk7IFwN
Cj4gKwkJZ290byBfZ290bzsJCQkJCQkJCQkJCSAgIFwNCj4gKwl9IGVsc2UgewkJCQkJCQkJ
CQkJCSAgIFwNCj4gKwkJX3JldCA9IDA7CQkJCQkJCQkJCQkgICBcDQo+ICsJfQkJCQkJCQkJ
CQkJCQkJICAgXA0KPiArfSB3aGlsZSAoMCkNCj4gKw0KPiArLyoqDQo+ICsgKiBAYnJpZWYJ
CQlUYXNrIGluZm9ybWF0aW9uIHN1Ym1pdHRlZCBmcm9tIHVzZXIgc3BhY2UNCj4gKyAqDQo+
ICsgKiByZWYJCQkJUmVmZXJlbmNlIGNvdW50IGZvciB0YXNrDQo+ICsgKiBudW1fYWRkcmVz
c2VzCQlOdW1iZXIgb2YgYWRkcmVzc2VzIGluIGFkZHJlc3MgbGlzdA0KPiArICogbnZkbGFf
ZGV2CQkJUG9pbnRlciB0byBOVkRMQSBkZXZpY2UNCj4gKyAqIGFkZHJlc3NfbGlzdAkJCUFk
ZHJlc3MgbGlzdA0KPiArICogZmlsZQkJCQlEUk0gZmlsZSBpbnN0YW5jZQ0KPiArICovDQo+
ICtzdHJ1Y3QgbnZkbGFfdGFzayB7DQo+ICsJc3RydWN0IGtyZWYgcmVmOw0KPiArCXVpbnQz
Ml90IG51bV9hZGRyZXNzZXM7DQo+ICsJc3RydWN0IG52ZGxhX2RldmljZSAqbnZkbGFfZGV2
Ow0KPiArCXN0cnVjdCBudmRsYV9tZW1faGFuZGxlICphZGRyZXNzX2xpc3Q7DQo+ICsJc3Ry
dWN0IGRybV9maWxlICpmaWxlOw0KPiArfTsNCj4gKw0KPiArLyoqDQo+ICsgKiBAYnJpZWYJ
CQlDb25maWd1cmF0aW9uIHBhcmFtZXRlcnMgc3VwcG9ydGVkIGJ5IHRoZSBlbmdpbmUNCj4g
KyAqDQo+ICsgKiBhdG9tX3NpemUJCQlNZW1vcnkgc21hbGxlc3QgYWNjZXNzIHNpemUNCj4g
KyAqIGJkbWFfZW5hYmxlCQkJRGVmaW5lcyB3aGV0aGVyIGJkbWEgaXMgc3VwcG9ydGVkDQo+
ICsgKiBydWJpa19lbmFibGUJCQlEZWZpbmVzIHdoZXRoZXIgcnViaWsgaXMgc3VwcG9ydGVk
DQo+ICsgKiB3ZWlnaHRfY29tcHJlc3Nfc3VwcG9ydAlEZWZpbmVzIHdoZXRoZXIgd2VpZ2h0
IGRhdGEgY29tcHJlc3Npb24gaXMgc3VwcG9ydGVkDQo+ICsgKi8NCj4gK3N0cnVjdCBudmRs
YV9jb25maWcgew0KPiArCXVpbnQzMl90IGF0b21fc2l6ZTsNCj4gKwlib29sIGJkbWFfZW5h
YmxlOw0KPiArCWJvb2wgcnViaWtfZW5hYmxlOw0KPiArCWJvb2wgd2VpZ2h0X2NvbXByZXNz
X3N1cHBvcnQ7DQo+ICt9Ow0KPiArDQo+ICsvKioNCj4gKyAqIEBicmllZgkJCU5WRExBIGRl
dmljZQ0KPiArICoNCj4gKyAqIGlycQkJCQlJbnRlcnJ1cHQgbnVtYmVyIGFzc29jaWF0ZWQg
d2l0aCB0aGlzIGRldmljZQ0KPiArICogcmVmCQkJCVJlZmVyZW5jZSBjb3VudCBmb3IgZGV2
aWNlDQo+ICsgKiBiYXNlCQkJCUlPIG1hcHBlZCBiYXNlIGFkZHJlc3MgZm9yIGRldmljZQ0K
PiArICogbnZkbGFfbG9jawkJCVNwaW5sb2NrIHVzZWQgZm9yIHN5bmNocm9uaXphdGlvbg0K
PiArICogZHJtCQkJCURSTSBkZXZpY2UgaW5zdGFuY2UNCj4gKyAqIHRhc2sJCQkJUG9pbnRl
ciB0byB0YXNrIGluIGV4ZWN1dGlvbg0KPiArICogY29uZmlnX2RhdGEJCQlQb2ludGVyIHRv
IHRoZSBjb25maWd1cmF0aW9uIGRhdGENCj4gKyAqIHBkZXYJCQkJUG9pbnRlciB0byBOVkRM
QSBwbGF0Zm9ybSBkZXZpY2UNCj4gKyAqIGV2ZW50X25vdGlmaWVyCQlDb21wbGV0aW9uIG9i
amVjdCB1c2VkIHRvIHdhaXQgZm9yIGV2ZW50cyBmcm9tIEhXDQo+ICsgKiBlbmdpbmVfY29u
dGV4dAkJUHJpdmF0ZSBkYXRhIHBhc3NlZCBmcm9tIGVuZ2luZSBpbiBkbGFfZW5naW5lX2lu
aXQNCj4gKyAqLw0KPiArc3RydWN0IG52ZGxhX2RldmljZSB7DQo+ICsJaW50MzJfdCBpcnE7
DQo+ICsJc3RydWN0IGtyZWYgcmVmOw0KPiArCXZvaWQgX19pb21lbSAqYmFzZTsNCj4gKwlz
cGlubG9ja190IG52ZGxhX2xvY2s7DQo+ICsJc3RydWN0IGRybV9kZXZpY2UgKmRybTsNCj4g
KwlzdHJ1Y3QgbnZkbGFfdGFzayAqdGFzazsNCj4gKwlzdHJ1Y3QgbnZkbGFfY29uZmlnICpj
b25maWdfZGF0YTsNCj4gKwlzdHJ1Y3QgcGxhdGZvcm1fZGV2aWNlICpwZGV2Ow0KPiArCXN0
cnVjdCBjb21wbGV0aW9uIGV2ZW50X25vdGlmaWVyOw0KPiArDQo+ICsJc3RydWN0IGRsYV9l
bmdpbmUgKmVuZ2luZV9jb250ZXh0Ow0KPiArfTsNCj4gKw0KPiAraW50MzJfdCBudmRsYV90
YXNrX3N1Ym1pdChzdHJ1Y3QgbnZkbGFfZGV2aWNlICpudmRsYV9kZXYsIHN0cnVjdCBudmRs
YV90YXNrICp0YXNrKTsNCj4gKw0KPiAraW50MzJfdCBudmRsYV9nZW1fZG1hX2FkZHIoc3Ry
dWN0IGRybV9kZXZpY2UgKmRldiwgc3RydWN0IGRybV9maWxlICpmaWxlLA0KPiArCQkJCQl1
aW50MzJfdCBmZCwgZG1hX2FkZHJfdCAqYWRkcik7DQo+ICsNCj4gK2ludDMyX3QgbnZkbGFf
ZHJtX3Byb2JlKHN0cnVjdCBudmRsYV9kZXZpY2UgKm52ZGxhX2Rldik7DQo+ICsNCj4gK3Zv
aWQgbnZkbGFfZHJtX3JlbW92ZShzdHJ1Y3QgbnZkbGFfZGV2aWNlICpudmRsYV9kZXYpOw0K
PiArDQo+ICtpbnQzMl90IGRsYV9wcm9jZXNzX2V2ZW50cyhzdHJ1Y3QgZGxhX2VuZ2luZSAq
ZW5naW5lX2NvbnRleHQsIHVpbnQzMl90ICp0YXNrX2NvbXBsZXRlKTsNCj4gKw0KPiArdm9p
ZCBkbGFfY2xlYXJfdGFzayhzdHJ1Y3QgZGxhX2VuZ2luZSAqZW5naW5lX2NvbnRleHQpOw0K
PiArDQo+ICtpbnQzMl90IGRsYV9leGVjdXRlX3Rhc2soc3RydWN0IGRsYV9lbmdpbmUgKmVu
Z2luZV9jb250ZXh0LCB2b2lkICp0YXNrX2RhdGEsIHZvaWQgKmNvbmZpZ19kYXRhKTsNCj4g
Kw0KPiArdWludDMyX3QgZGxhX3JlZ19yZWFkKHZvaWQgKmRyaXZlcl9jb250ZXh0LCB1aW50
MzJfdCBhZGRyKTsNCj4gKw0KPiArdm9pZCBkbGFfcmVnX3dyaXRlKHZvaWQgKmRyaXZlcl9j
b250ZXh0LCB1aW50MzJfdCBhZGRyLCB1aW50MzJfdCByZWcpOw0KPiArDQo+ICtpbnQzMl90
IGRsYV9kYXRhX3JlYWQodm9pZCAqZHJpdmVyX2NvbnRleHQsIHZvaWQgKnRhc2tfZGF0YSwN
Cj4gKwkJCQl1aW50NjRfdCBzcmMsIHZvaWQgKmRzdCwNCj4gKwkJCQl1aW50MzJfdCBzaXpl
LCB1aW50NjRfdCBvZmZzZXQpOw0KPiArDQo+ICtpbnQzMl90IGRsYV9kYXRhX3dyaXRlKHZv
aWQgKmRyaXZlcl9jb250ZXh0LCB2b2lkICp0YXNrX2RhdGEsDQo+ICsJCQkJdm9pZCAqc3Jj
LCB1aW50NjRfdCBkc3QsDQo+ICsJCQkJdWludDMyX3Qgc2l6ZSwgdWludDY0X3Qgb2Zmc2V0
KTsNCj4gKw0KPiArLyogRGVzdGluYXRpb24gZm9yIERNQSBidWZmZXIgKi8NCj4gKyNkZWZp
bmUgREVTVElOQVRJT05fUFJPQ0VTU09SCTANCj4gKyNkZWZpbmUgREVTVElOQVRJT05fRE1B
CQkxDQo+ICsNCj4gK2ludDMyX3QgZGxhX2dldF9kbWFfYWRkcmVzcyh2b2lkICpkcml2ZXJf
Y29udGV4dCwgdm9pZCAqdGFza19kYXRhLA0KPiArCQkJCQlpbnQxNl90IGluZGV4LCB2b2lk
ICpkc3RfcHRyLA0KPiArCQkJCQl1aW50MzJfdCBkZXN0aW5hdGlvbik7DQo+ICsNCj4gKyNl
bmRpZg0KPiBkaWZmIC0tZ2l0IGEvZHJpdmVycy9ncHUvZHJtL252ZGxhL252ZGxhX2VuZ2lu
ZS5jIGIvZHJpdmVycy9ncHUvZHJtL252ZGxhL252ZGxhX2VuZ2luZS5jDQo+IG5ldyBmaWxl
IG1vZGUgMTAwNjQ0DQo+IGluZGV4IDAwMDAwMDAwMDAwMC4uMjZlYmQ2YzM2MmIwDQo+IC0t
LSAvZGV2L251bGwNCj4gKysrIGIvZHJpdmVycy9ncHUvZHJtL252ZGxhL252ZGxhX2VuZ2lu
ZS5jDQo+IEBAIC0wLDAgKzEsMjMzIEBADQo+ICsvLyBTUERYLUxpY2Vuc2UtSWRlbnRpZmll
cjogQlNELTMtQ2xhdXNlIE9SIEdQTC0yLjANCj4gKy8qDQo+ICsgKiBDb3B5cmlnaHQgKEMp
IDIwMTctMjAxOCBOVklESUEgQ09SUE9SQVRJT04NCj4gKyAqIENvcHlyaWdodCAoQykgMjAy
MiBDYWkgSHVvcWluZw0KPiArICovDQo+ICsNCj4gKyNpbmNsdWRlICJudmRsYV9jb21tb24u
aCINCj4gKyNpbmNsdWRlICJudmRsYV9kcm0uaCINCj4gKyNpbmNsdWRlICJudmRsYV9yZWcu
aCINCj4gKyNpbmNsdWRlICJudmRsYV9lbmdpbmUuaCINCj4gKw0KPiArc3RhdGljIGNvbnN0
IHVpbnQzMl90IG1hcF9yZG1hX3B0cl9hZGRyW10gPSB7DQo+ICsJMHhGRkZGRkZGRiwNCj4g
KwkweEZGRkZGRkZGLA0KPiArCVNEUF9SRUcoUkRNQV9TX1BPSU5URVIpLA0KPiArCVBEUF9S
RUcoUkRNQV9TX1BPSU5URVIpLA0KPiArCUNEUF9SRUcoUkRNQV9TX1BPSU5URVIpLA0KPiAr
CTB4RkZGRkZGRkYsDQo+ICt9Ow0KPiArDQo+ICtzdGF0aWMgY29uc3QgdWludDMyX3QgbWFw
X3N0c19hZGRyW10gPSB7DQo+ICsJQkRNQV9SRUcoU1RBVFVTKSwNCj4gKwlDQUNDX1JFRyhT
X1NUQVRVUyksDQo+ICsJU0RQX1JFRyhTX1NUQVRVUyksDQo+ICsJUERQX1JFRyhTX1NUQVRV
UyksDQo+ICsJQ0RQX1JFRyhTX1NUQVRVUyksDQo+ICsJUkJLX1JFRyhTX1NUQVRVUyksDQo+
ICt9Ow0KPiArDQo+ICtzdGF0aWMgY29uc3QgdWludDMyX3QgbWFwX3B0cl9hZGRyW10gPSB7
DQo+ICsJQkRNQV9SRUcoU1RBVFVTKSwNCj4gKwlDQUNDX1JFRyhTX1BPSU5URVIpLA0KPiAr
CVNEUF9SRUcoU19QT0lOVEVSKSwNCj4gKwlQRFBfUkVHKFNfUE9JTlRFUiksDQo+ICsJQ0RQ
X1JFRyhTX1BPSU5URVIpLA0KPiArCVJCS19SRUcoU19QT0lOVEVSKSwNCj4gK307DQo+ICsN
Cj4gK3VpbnQzMl90IHJlZ19yZWFkKHN0cnVjdCBkbGFfZW5naW5lICplbmdpbmUsIHVpbnQz
Ml90IGFkZHIpDQo+ICt7DQo+ICsJcmV0dXJuIGRsYV9yZWdfcmVhZChlbmdpbmUtPmRyaXZl
cl9jb250ZXh0LCBhZGRyKTsNCj4gK30NCj4gKw0KPiArdm9pZCByZWdfd3JpdGUoc3RydWN0
IGRsYV9lbmdpbmUgKmVuZ2luZSwgdWludDMyX3QgYWRkciwgdWludDMyX3QgcmVnKQ0KPiAr
ew0KPiArCWRsYV9yZWdfd3JpdGUoZW5naW5lLT5kcml2ZXJfY29udGV4dCwgYWRkciwgcmVn
KTsNCj4gK30NCj4gKw0KPiAraW50MzJfdCBkbGFfZW5hYmxlX2ludHIoc3RydWN0IGRsYV9l
bmdpbmUgKmVuZ2luZSwgdWludDMyX3QgbWFzaykNCj4gK3sNCj4gKwl1aW50MzJfdCByZWcg
PSBnbGJfcmVnX3JlYWQoZW5naW5lLCBTX0lOVFJfTUFTSyk7DQo+ICsNCj4gKwlyZWcgPSBy
ZWcgJiAofm1hc2spOw0KPiArCWdsYl9yZWdfd3JpdGUoZW5naW5lLCBTX0lOVFJfTUFTSywg
cmVnKTsNCj4gKw0KPiArCXJldHVybiAwOw0KPiArfQ0KPiArDQo+ICt1aW50OF90IGJkbWFf
Z3JwX3N0c1syXSA9IHsNCj4gKwlGSUVMRF9FTlVNKEJETUFfU1RBVFVTXzAsIElETEUsIFlF
UyksDQo+ICsJRklFTERfRU5VTShCRE1BX1NUQVRVU18wLCBJRExFLCBZRVMpDQo+ICt9Ow0K
PiArDQo+ICtzdHJ1Y3QgZGxhX3JvaV9kZXNjIHJvaV9kZXNjOw0KPiArDQo+ICsvKioNCj4g
KyAqIEdldCBETUEgZGF0YSBjdWJlIGFkZHJlc3MNCj4gKyAqLw0KPiAraW50MzJfdA0KPiAr
ZGxhX2dldF9kbWFfY3ViZV9hZGRyZXNzKHZvaWQgKmRyaXZlcl9jb250ZXh0LCB2b2lkICp0
YXNrX2RhdGEsDQo+ICsJCQkJCQkgaW50MTZfdCBpbmRleCwgdWludDMyX3Qgb2Zmc2V0LCB2
b2lkICpkc3RfcHRyLA0KPiArCQkJCQkJIHVpbnQzMl90IGRlc3RpbmF0aW9uKQ0KPiArew0K
PiArCWludDMyX3QgcmV0ID0gMDsNCj4gKwl1aW50NjRfdCAqcGRzdCA9ICh1aW50NjRfdCAq
KWRzdF9wdHI7DQo+ICsgICAgICAgcmV0ID0gZGxhX2dldF9kbWFfYWRkcmVzcyhkcml2ZXJf
Y29udGV4dCwgdGFza19kYXRhLCBpbmRleCwNCj4gKwkJCQkJCQkJZHN0X3B0ciwgZGVzdGlu
YXRpb24pOw0KPiArCWlmIChyZXQpDQo+ICsJCWdvdG8gZXhpdDsNCj4gKw0KPiArCXBkc3Rb
MF0gKz0gb2Zmc2V0Ow0KPiArDQo+ICtleGl0Og0KPiArCXJldHVybiByZXQ7DQo+ICt9DQo+
ICsNCj4gKy8qKg0KPiArICogUmVhZCBpbnB1dCBidWZmZXIgYWRkcmVzcw0KPiArICoNCj4g
KyAqIEZvciBpbnB1dCBsYXllciwgaW4gY2FzZSBvZiBzdGF0aWMgUk9JIHRoaXMgYWRkcmVz
cyBpcyByZWFkDQo+ICsgKiBmcm9tIGFkZHJlc3MgbGlzdCBhbmQgaW5kZXggaXMgc3BlY2lm
aWVkIGluIGRhdGEgY3ViZS4gSW4gY2FzZQ0KPiArICogZHluYW1pYyBST0ksIGl0IGhhcyB0
byBiZSByZWFkIGRlcGVuZGluZyBvbiBST0kgaW5mb3JtYXRpb24NCj4gKyAqIGFuZCB1c2lu
ZyBzdXJmYWNlIGFkZHJlc3MNCj4gKyAqDQo+ICsgKiBGb3IgYWxsIG90aGVyIGxheWVycywg
dGhpcyBhZGRyZXNzIGlzIHJlYWQgZnJvbSBhZGRyZXNzIGxpc3QNCj4gKyAqIHVzaW5nIGlu
ZGV4IHNwZWNpZmllZCBpbiBkYXRhIGN1YmUNCj4gKyAqLw0KPiAraW50DQo+ICtkbGFfcmVh
ZF9pbnB1dF9hZGRyZXNzKHN0cnVjdCBkbGFfZW5naW5lICplbmdpbmUsIHN0cnVjdCBkbGFf
ZGF0YV9jdWJlICpkYXRhLA0KPiArCQkJCQkgICB1aW50NjRfdCAqYWRkcmVzcywgaW50MTZf
dCBvcF9pbmRleCwNCj4gKwkJCQkJICAgdWludDhfdCByb2lfaW5kZXgsIHVpbnQ4X3QgYnBw
KQ0KPiArew0KPiArCXVpbnQ2NF90IHJvaV9kZXNjX2FkZHI7DQo+ICsJaW50MzJfdCByZXQg
PSAtRUlOVkFMOw0KPiArDQo+ICsJLyoqDQo+ICsJICogSWYgbWVtb3J5IHR5cGUgaXMgSFcg
dGhlbiBubyBhZGRyZXNzIHJlcXVpcmVkDQo+ICsJICovDQo+ICsJaWYgKGRhdGEtPnR5cGUg
PT0gRExBX01FTV9IVykgew0KPiArCQlyZXQgPSAwOw0KPiArCQlnb3RvIGV4aXQ7DQo+ICsJ
fQ0KPiArDQo+ICsJLyoqDQo+ICsJICogSWYgYWRkcmVzcyBsaXN0IGluZGV4IGlzIG5vdCAt
MSBtZWFucyB0aGlzIGFkZHJlc3MgaGFzIHRvDQo+ICsJICogYmUgcmVhZCBmcm9tIGFkZHJl
c3MgbGlzdA0KPiArCSAqLw0KPiArCWlmIChkYXRhLT5hZGRyZXNzICE9IC0xKSB7DQo+ICsN
Cj4gKwkJLyoqDQo+ICsJCSAqIEJ1dCBpZiBvdGhlciBwYXJhbWV0ZXJzIGluZGljYXRlIHRo
YXQgdGhpcyBpcyBpbnB1dCBsYXllcg0KPiArCQkgKiBmb3IgZHluYW1pYyBST0kgdGhlbiBp
dCBpcyBhbiBlcnJvcg0KPiArCQkgKi8NCj4gKwkJaWYgKGVuZ2luZS0+bmV0d29yay0+ZHlu
YW1pY19yb2kgJiYNCj4gKwkJCWVuZ2luZS0+bmV0d29yay0+aW5wdXRfbGF5ZXIgPT0gb3Bf
aW5kZXgpDQo+ICsJCQlnb3RvIGV4aXQ7DQo+ICsJCXJldCA9IGRsYV9nZXRfZG1hX2N1YmVf
YWRkcmVzcyhlbmdpbmUtPmRyaXZlcl9jb250ZXh0LA0KPiArCQkJCQkJZW5naW5lLT50YXNr
LT50YXNrX2RhdGEsDQo+ICsJCQkJCQlkYXRhLT5hZGRyZXNzLA0KPiArCQkJCQkJZGF0YS0+
b2Zmc2V0LA0KPiArCQkJCQkJKHZvaWQgKilhZGRyZXNzLA0KPiArCQkJCQkJREVTVElOQVRJ
T05fRE1BKTsNCj4gKwkJZ290byBleGl0Ow0KPiArCX0NCj4gKw0KPiArCS8qKg0KPiArCSAq
IENoZWNrIGlmIGl0IGlzIGR5bmFtaWMgUk9JIGFuZCB0aGlzIGlzIGlucHV0IGxheWVyDQo+
ICsJICovDQo+ICsJaWYgKGVuZ2luZS0+bmV0d29yay0+ZHluYW1pY19yb2kgJiYgZW5naW5l
LT5uZXR3b3JrLT5pbnB1dF9sYXllciA9PSBvcF9pbmRleCkgew0KPiArCQlpZiAoIWVuZ2lu
ZS0+dGFzay0+c3VyZmFjZV9hZGRyKQ0KPiArCQkJZ290byBleGl0Ow0KPiArDQo+ICsJCS8q
IENhbGN1bGF0ZSBhZGRyZXNzIG9mIFJPSSBkZXNjcmlwdG9yIGluIGFycmF5ICovDQo+ICsJ
CXJvaV9kZXNjX2FkZHIgPSBlbmdpbmUtPnRhc2stPnJvaV9hcnJheV9hZGRyOw0KPiArDQo+
ICsJCS8qIFJlYWQgUk9JIGRlc2NyaXB0b3IgKi8NCj4gKwkJcmV0ID0gZGxhX2RhdGFfcmVh
ZChlbmdpbmUtPmRyaXZlcl9jb250ZXh0LA0KPiArCQkJCWVuZ2luZS0+dGFzay0+dGFza19k
YXRhLA0KPiArCQkJCXJvaV9kZXNjX2FkZHIsDQo+ICsJCQkJKHZvaWQgKikmcm9pX2Rlc2Ms
DQo+ICsJCQkJc2l6ZW9mKHJvaV9kZXNjKSwNCj4gKwkJCQlzaXplb2Yoc3RydWN0IGRsYV9y
b2lfYXJyYXlfZGVzYykgKw0KPiArCQkJCXJvaV9pbmRleCAqIHNpemVvZihzdHJ1Y3QgZGxh
X3JvaV9kZXNjKSk7DQo+ICsJCWlmIChyZXQpDQo+ICsJCQlnb3RvIGV4aXQ7DQo+ICsNCj4g
KwkJLyogQ2FsY3VsYXRlIFJPSSBhZGRyZXNzICovDQo+ICsJCSphZGRyZXNzID0gZW5naW5l
LT50YXNrLT5zdXJmYWNlX2FkZHI7DQo+ICsJCSphZGRyZXNzICs9IChyb2lfZGVzYy50b3Ag
KiBkYXRhLT5saW5lX3N0cmlkZSkgKw0KPiArCQkJCQkJKGJwcCAqIHJvaV9kZXNjLmxlZnQp
Ow0KPiArCX0NCj4gKw0KPiArZXhpdDoNCj4gKwlyZXR1cm4gcmV0Ow0KPiArfQ0KPiArDQo+
ICtpbnQNCj4gK3V0aWxzX2dldF9mcmVlX2dyb3VwKHN0cnVjdCBkbGFfZW5naW5lICplbmdp
bmUsIHN0cnVjdCBkbGFfcHJvY2Vzc29yICpwcm9jZXNzb3IsDQo+ICsJCQkJCSB1aW50OF90
ICpncm91cF9pZCwgdWludDhfdCAqcmRtYV9pZCkNCj4gK3sNCj4gKwlpbnQzMl90IHJldCA9
IDA7DQo+ICsJdWludDMyX3QgcG9pbnRlcjsNCj4gKwl1aW50MzJfdCBod19jb25zdW1lcl9w
dHI7DQo+ICsJdWludDMyX3QgaHdfcmRtYV9wdHI7DQo+ICsNCj4gKwlod19yZG1hX3B0ciA9
IDA7DQo+ICsNCj4gKwlpZiAocHJvY2Vzc29yLT5vcF90eXBlID09IERMQV9PUF9CRE1BKSB7
DQo+ICsJCXBvaW50ZXIgPSByZWdfcmVhZChlbmdpbmUsIG1hcF9wdHJfYWRkcltwcm9jZXNz
b3ItPm9wX3R5cGVdKTsNCj4gKwkJaHdfY29uc3VtZXJfcHRyID0gKChwb2ludGVyICYgTUFT
SyhCRE1BX1NUQVRVU18wLCBHUlAwX0JVU1kpKSA+Pg0KPiArCQkJCVNISUZUKEJETUFfU1RB
VFVTXzAsIEdSUDBfQlVTWSkpID09DQo+ICsJCQkJRklFTERfRU5VTShCRE1BX1NUQVRVU18w
LCBHUlAwX0JVU1ksIFlFUykgPw0KPiArCQkJCTEgOiAwOw0KPiArCX0gZWxzZSB7DQo+ICsJ
CXBvaW50ZXIgPSByZWdfcmVhZChlbmdpbmUsIG1hcF9wdHJfYWRkcltwcm9jZXNzb3ItPm9w
X3R5cGVdKTsNCj4gKwkJaHdfY29uc3VtZXJfcHRyID0gKHBvaW50ZXIgJiBNQVNLKENEUF9T
X1BPSU5URVJfMCwgQ09OU1VNRVIpKSA+Pg0KPiArCQkJCVNISUZUKENEUF9TX1BPSU5URVJf
MCwgQ09OU1VNRVIpOw0KPiArDQo+ICsJCS8qKg0KPiArCQkgKiBSZWFkIGN1cnJlbnQgY29u
c3VtZXIgcG9pbnRlciBmb3IgUkRNQSBvbmx5IGlmIHByb2Nlc3Nvcg0KPiArCQkgKiBoYXMg
UkRNQSBtb2R1bGUNCj4gKwkJICovDQo+ICsJCWlmIChtYXBfcmRtYV9wdHJfYWRkcltwcm9j
ZXNzb3ItPm9wX3R5cGVdICE9IDB4RkZGRkZGRkYpIHsNCj4gKwkJCXBvaW50ZXIgPQ0KPiAr
CQkJcmVnX3JlYWQoZW5naW5lLCBtYXBfcmRtYV9wdHJfYWRkcltwcm9jZXNzb3ItPm9wX3R5
cGVdKTsNCj4gKwkJCWh3X3JkbWFfcHRyID0gKHBvaW50ZXIgJg0KPiArCQkJCQlNQVNLKENE
UF9TX1BPSU5URVJfMCwgQ09OU1VNRVIpKSA+Pg0KPiArCQkJCQlTSElGVChDRFBfU19QT0lO
VEVSXzAsIENPTlNVTUVSKTsNCj4gKwkJfQ0KPiArCX0NCj4gKw0KPiArCS8qKg0KPiArCSAq
IElmIGJvdGggcHJvY2Vzc29ycyBhcmUgcHJvZ3JhbW1lZCB0aGVuIGV4aXQNCj4gKwkgKi8N
Cj4gKwlpZiAocHJvY2Vzc29yLT5ncm91cF9zdGF0dXMgPT0gMHgzKSB7DQo+ICsJCXJldCA9
IC1FQlVTWTsNCj4gKwkJZ290byBleGl0Ow0KPiArCX0NCj4gKw0KPiArCWlmICghcHJvY2Vz
c29yLT5ncm91cF9zdGF0dXMpDQo+ICsJCS8qKg0KPiArCQkgKiBJZiBib3RoIGdyb3VwcyBh
cmUgaWRsZSB0aGVuIHVzZSBjb25zdW1lciBwb2ludGVyDQo+ICsJCSAqLw0KPiArCQkqZ3Jv
dXBfaWQgPSBod19jb25zdW1lcl9wdHI7DQo+ICsJZWxzZQ0KPiArCQkvKioNCj4gKwkJICog
SGVyZSBpdCBpcyBhc3N1bWVkIHRoYXQgb25seSBvbmUgZ3JvdXAgaXMgaWRsZSBvciBidXN5
DQo+ICsJCSAqIGFuZCBoZW5jZSByaWdodCBzaGlmdCB3aWxsIHdvcmsgdG8gZ2V0IGNvcnJl
Y3QNCj4gKwkJICogZ3JvdXAgaWQNCj4gKwkJICovDQo+ICsJCSpncm91cF9pZCA9ICEocHJv
Y2Vzc29yLT5ncm91cF9zdGF0dXMgPj4gMSk7DQo+ICsNCj4gKwkvKioNCj4gKwkgKiBJZiBi
b3RoIGdyb3VwcyBhcmUgaWRsZSB0aGVuIHJlYWQgZ3JvdXAgaWQgZnJvbSBwb2ludGVyDQo+
ICsJICovDQo+ICsJaWYgKCFwcm9jZXNzb3ItPnJkbWFfc3RhdHVzKQ0KPiArCQkqcmRtYV9p
ZCA9IGh3X3JkbWFfcHRyOw0KPiArCWVsc2UNCj4gKwkJKnJkbWFfaWQgPSAhKHByb2Nlc3Nv
ci0+cmRtYV9zdGF0dXMgPj4gMSk7DQo+ICsNCj4gK2V4aXQ6DQo+ICsJcmV0dXJuIHJldDsN
Cj4gK30NCj4gZGlmZiAtLWdpdCBhL2RyaXZlcnMvZ3B1L2RybS9udmRsYS9udmRsYV9lbmdp
bmUuaCBiL2RyaXZlcnMvZ3B1L2RybS9udmRsYS9udmRsYV9lbmdpbmUuaA0KPiBuZXcgZmls
ZSBtb2RlIDEwMDY0NA0KPiBpbmRleCAwMDAwMDAwMDAwMDAuLjE5NzZmNTkxOTU0Mw0KPiAt
LS0gL2Rldi9udWxsDQo+ICsrKyBiL2RyaXZlcnMvZ3B1L2RybS9udmRsYS9udmRsYV9lbmdp
bmUuaA0KPiBAQCAtMCwwICsxLDI3MiBAQA0KPiArLyogU1BEWC1MaWNlbnNlLUlkZW50aWZp
ZXI6IEdQTC0yLjAgT1IgQlNELTMtQ2xhdXNlICovDQo+ICsvKg0KPiArICogQ29weXJpZ2h0
IChDKSAyMDE3LTIwMTggTlZJRElBIENPUlBPUkFUSU9OLg0KPiArICogQ29weXJpZ2h0IChD
KSAyMDIyIENhaSBIdW9xaW5nDQo+ICsgKi8NCj4gKw0KPiArI2lmbmRlZiBfX05WRExBX0VO
R0lORV9IXw0KPiArI2RlZmluZSBfX05WRExBX0VOR0lORV9IXw0KPiArDQo+ICsjaW5jbHVk
ZSAibnZkbGFfY29tbW9uLmgiDQo+ICsjaW5jbHVkZSAibnZkbGFfc2NoZWQuaCINCj4gKyNp
bmNsdWRlICJudmRsYV9lbmdpbmUuaCINCj4gKyNpbmNsdWRlICJudmRsYV9yZWcuaCINCj4g
Kw0KPiArLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKi8NCj4gKy8qKioqKioqKioqKioqKioqKioqKiBVdGlsaXRpZXMgKioqKioq
KioqKioqKioqKioqKioqKioqKiovDQo+ICsvKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLw0KPiArI2RlZmluZSBNQVNLKHJlZywg
ZmllbGQpCQkocmVnIyNfIyNmaWVsZCMjX0ZJRUxEKQ0KPiArI2RlZmluZSBGSUVMRF9FTlVN
KHIsIGYsIGUpCQkociMjXyMjZiMjXyMjZSkNCj4gKyNkZWZpbmUgU0hJRlQocmVnLCBmaWVs
ZCkJCShyZWcjI18jI2ZpZWxkIyNfU0hJRlQpDQo+ICsNCj4gKyNkZWZpbmUgR0xCX1JFRyhu
YW1lKSAgICAgICAgICAgICAgICBHTEJfIyNuYW1lIyNfMA0KPiArI2RlZmluZSBNQ0lGX1JF
RyhuYW1lKSAgICAgICAgICAgICAgIE1DSUZfIyNuYW1lIyNfMA0KPiArI2RlZmluZSBDVklG
X1JFRyhuYW1lKSAgICAgICAgICAgICAgIENWSUZfIyNuYW1lIyNfMA0KPiArI2RlZmluZSBC
RE1BX1JFRyhuYW1lKSAgICAgICAgICAgICAgIEJETUFfIyNuYW1lIyNfMA0KPiArI2RlZmlu
ZSBDRE1BX1JFRyhuYW1lKSAgICAgICAgICAgICAgIENETUFfIyNuYW1lIyNfMA0KPiArI2Rl
ZmluZSBDU0NfUkVHKG5hbWUpICAgICAgICAgICAgICAgIENTQ18jI25hbWUjI18wDQo+ICsj
ZGVmaW5lIENNQUNfQV9SRUcobmFtZSkgICAgICAgICAgICAgQ01BQ19BXyMjbmFtZSMjXzAN
Cj4gKyNkZWZpbmUgQ01BQ19CX1JFRyhuYW1lKSAgICAgICAgICAgICBDTUFDX0JfIyNuYW1l
IyNfMA0KPiArI2RlZmluZSBDQUNDX1JFRyhuYW1lKSAgICAgICAgICAgICAgIENBQ0NfIyNu
YW1lIyNfMA0KPiArI2RlZmluZSBTRFBfUkRNQV9SRUcobmFtZSkgICAgICAgICAgIFNEUF9S
RE1BXyMjbmFtZSMjXzANCj4gKyNkZWZpbmUgU0RQX1JFRyhuYW1lKSAgICAgICAgICAgICAg
ICBTRFBfIyNuYW1lIyNfMA0KPiArI2RlZmluZSBQRFBfUkRNQV9SRUcobmFtZSkgICAgICAg
ICAgIFBEUF9SRE1BXyMjbmFtZSMjXzANCj4gKyNkZWZpbmUgUERQX1JFRyhuYW1lKSAgICAg
ICAgICAgICAgICBQRFBfIyNuYW1lIyNfMA0KPiArI2RlZmluZSBDRFBfUkRNQV9SRUcobmFt
ZSkgICAgICAgICAgIENEUF9SRE1BXyMjbmFtZSMjXzANCj4gKyNkZWZpbmUgQ0RQX1JFRyhu
YW1lKSAgICAgICAgICAgICAgICBDRFBfIyNuYW1lIyNfMA0KPiArI2RlZmluZSBSQktfUkVH
KG5hbWUpICAgICAgICAgICAgICAgIFJCS18jI25hbWUjI18wDQo+ICsNCj4gKy8qIGFsaWFz
IGZvciByZWdpc3RlciByZWFkIGZvciBlYWNoIHN1Yi1tb2R1bGUgKi8NCj4gKyNkZWZpbmUg
Z2xiX3JlZ19yZWFkKGVuZ2luZSwgcmVnKSAgICAgICAgICAgcmVnX3JlYWQoZW5naW5lLCBH
TEJfUkVHKHJlZykpDQo+ICsjZGVmaW5lIGJkbWFfcmVnX3JlYWQoZW5naW5lLCByZWcpICAg
ICAgICAgIHJlZ19yZWFkKGVuZ2luZSwgQkRNQV9SRUcocmVnKSkNCj4gKyNkZWZpbmUgY2Rt
YV9yZWdfcmVhZChlbmdpbmUsIHJlZykgICAgICAgICAgcmVnX3JlYWQoZW5naW5lLCBDRE1B
X1JFRyhyZWcpKQ0KPiArI2RlZmluZSBjc2NfcmVnX3JlYWQoZW5naW5lLCByZWcpICAgICAg
ICAgICByZWdfcmVhZChlbmdpbmUsIENTQ19SRUcocmVnKSkNCj4gKyNkZWZpbmUgY21hY19h
X3JlZ19yZWFkKGVuZ2luZSwgcmVnKSAgICAgICAgcmVnX3JlYWQoZW5naW5lLCBDTUFDX0Ff
UkVHKHJlZykpDQo+ICsjZGVmaW5lIGNtYWNfYl9yZWdfcmVhZChlbmdpbmUsIHJlZykgICAg
ICAgIHJlZ19yZWFkKGVuZ2luZSwgQ01BQ19CX1JFRyhyZWcpKQ0KPiArI2RlZmluZSBjYWNj
X3JlZ19yZWFkKGVuZ2luZSwgcmVnKSAgICAgICAgICByZWdfcmVhZChlbmdpbmUsIENBQ0Nf
UkVHKHJlZykpDQo+ICsjZGVmaW5lIHNkcF9yZG1hX3JlZ19yZWFkKGVuZ2luZSwgcmVnKSAg
ICAgIHJlZ19yZWFkKGVuZ2luZSwgU0RQX1JETUFfUkVHKHJlZykpDQo+ICsjZGVmaW5lIHNk
cF9yZWdfcmVhZChlbmdpbmUsIHJlZykgICAgICAgICAgIHJlZ19yZWFkKGVuZ2luZSwgU0RQ
X1JFRyhyZWcpKQ0KPiArI2RlZmluZSBwZHBfcmRtYV9yZWdfcmVhZChlbmdpbmUsIHJlZykg
ICAgICByZWdfcmVhZChlbmdpbmUsIFBEUF9SRE1BX1JFRyhyZWcpKQ0KPiArI2RlZmluZSBw
ZHBfcmVnX3JlYWQoZW5naW5lLCByZWcpICAgICAgICAgICByZWdfcmVhZChlbmdpbmUsIFBE
UF9SRUcocmVnKSkNCj4gKyNkZWZpbmUgY2RwX3JkbWFfcmVnX3JlYWQoZW5naW5lLCByZWcp
ICAgICAgcmVnX3JlYWQoZW5naW5lLCBDRFBfUkRNQV9SRUcocmVnKSkNCj4gKyNkZWZpbmUg
Y2RwX3JlZ19yZWFkKGVuZ2luZSwgcmVnKSAgICAgICAgICAgcmVnX3JlYWQoZW5naW5lLCBD
RFBfUkVHKHJlZykpDQo+ICsjZGVmaW5lIHJ1YmlrX3JlZ19yZWFkKGVuZ2luZSwgcmVnKSAg
ICAgICAgIHJlZ19yZWFkKGVuZ2luZSwgUkJLX1JFRyhyZWcpKQ0KPiArDQo+ICsvKiBhbGlh
cyBmb3IgcmVnaXN0ZXIgd3JpdGUgZm9yIGVhY2ggc3ViLW1vZHVsZSAqLw0KPiArI2RlZmlu
ZSBnbGJfcmVnX3dyaXRlKGVuZ2luZSwgcmVnLCB2YWwpICAgICAgcmVnX3dyaXRlKGVuZ2lu
ZSwgR0xCX1JFRyhyZWcpLCB2YWwpDQo+ICsjZGVmaW5lIGJkbWFfcmVnX3dyaXRlKGVuZ2lu
ZSwgcmVnLCB2YWwpICAgICByZWdfd3JpdGUoZW5naW5lLCBCRE1BX1JFRyhyZWcpLCB2YWwp
DQo+ICsjZGVmaW5lIGNkbWFfcmVnX3dyaXRlKGVuZ2luZSwgcmVnLCB2YWwpICAgICByZWdf
d3JpdGUoZW5naW5lLCBDRE1BX1JFRyhyZWcpLCB2YWwpDQo+ICsjZGVmaW5lIGNzY19yZWdf
d3JpdGUoZW5naW5lLCByZWcsIHZhbCkgICAgICByZWdfd3JpdGUoZW5naW5lLCBDU0NfUkVH
KHJlZyksIHZhbCkNCj4gKyNkZWZpbmUgY21hY19hX3JlZ193cml0ZShlbmdpbmUsIHJlZywg
dmFsKSAgIHJlZ193cml0ZShlbmdpbmUsIENNQUNfQV9SRUcocmVnKSwgdmFsKQ0KPiArI2Rl
ZmluZSBjbWFjX2JfcmVnX3dyaXRlKGVuZ2luZSwgcmVnLCB2YWwpICAgcmVnX3dyaXRlKGVu
Z2luZSwgQ01BQ19CX1JFRyhyZWcpLCB2YWwpDQo+ICsjZGVmaW5lIGNhY2NfcmVnX3dyaXRl
KGVuZ2luZSwgcmVnLCB2YWwpICAgICByZWdfd3JpdGUoZW5naW5lLCBDQUNDX1JFRyhyZWcp
LCB2YWwpDQo+ICsjZGVmaW5lIHNkcF9yZG1hX3JlZ193cml0ZShlbmdpbmUsIHJlZywgdmFs
KSByZWdfd3JpdGUoZW5naW5lLCBTRFBfUkRNQV9SRUcocmVnKSwgdmFsKQ0KPiArI2RlZmlu
ZSBzZHBfcmVnX3dyaXRlKGVuZ2luZSwgcmVnLCB2YWwpICAgICAgcmVnX3dyaXRlKGVuZ2lu
ZSwgU0RQX1JFRyhyZWcpLCB2YWwpDQo+ICsjZGVmaW5lIHBkcF9yZG1hX3JlZ193cml0ZShl
bmdpbmUsIHJlZywgdmFsKSByZWdfd3JpdGUoZW5naW5lLCBQRFBfUkRNQV9SRUcocmVnKSwg
dmFsKQ0KPiArI2RlZmluZSBwZHBfcmVnX3dyaXRlKGVuZ2luZSwgcmVnLCB2YWwpICAgICAg
cmVnX3dyaXRlKGVuZ2luZSwgUERQX1JFRyhyZWcpLCB2YWwpDQo+ICsjZGVmaW5lIGNkcF9y
ZG1hX3JlZ193cml0ZShlbmdpbmUsIHJlZywgdmFsKSByZWdfd3JpdGUoZW5naW5lLCBDRFBf
UkRNQV9SRUcocmVnKSwgdmFsKQ0KPiArI2RlZmluZSBjZHBfcmVnX3dyaXRlKGVuZ2luZSwg
cmVnLCB2YWwpICAgICAgcmVnX3dyaXRlKGVuZ2luZSwgQ0RQX1JFRyhyZWcpLCB2YWwpDQo+
ICsjZGVmaW5lIHJ1YmlrX3JlZ193cml0ZShlbmdpbmUsIHJlZywgdmFsKSAgICByZWdfd3Jp
dGUoZW5naW5lLCBSQktfUkVHKHJlZyksIHZhbCkNCj4gKw0KPiArc3RydWN0IGRsYV9wcm9j
ZXNzb3JfZ3JvdXAgew0KPiArCXVpbnQ4X3QgaWQ7DQo+ICsJdWludDhfdCByZG1hX2lkOw0K
PiArCXVpbnQ4X3QgYWN0aXZlOw0KPiArCXVpbnQ4X3QgZXZlbnRzOw0KPiArCXVpbnQ4X3Qg
cm9pX2luZGV4Ow0KPiArCXVpbnQ4X3QgaXNfcmRtYV9uZWVkZWQ7DQo+ICsJdWludDhfdCBw
ZW5kaW5nOw0KPiArCWludDMyX3QgbHV0X2luZGV4Ow0KPiArCXVpbnQ4X3QgcHJvZ3JhbW1p
bmc7DQo+ICsNCj4gKwlzdHJ1Y3QgZGxhX2NvbW1vbl9vcF9kZXNjICpvcF9kZXNjOw0KPiAr
CXN0cnVjdCBkbGFfY29tbW9uX29wX2Rlc2MgKmNvbnN1bWVyc1tETEFfT1BfTlVNXTsNCj4g
KwlzdHJ1Y3QgZGxhX2NvbW1vbl9vcF9kZXNjICpmdXNlZF9wYXJlbnQ7DQo+ICsJdW5pb24g
ZGxhX29wZXJhdGlvbl9jb250YWluZXIgKm9wZXJhdGlvbl9kZXNjOw0KPiArCXVuaW9uIGRs
YV9zdXJmYWNlX2NvbnRhaW5lciAqc3VyZmFjZV9kZXNjOw0KPiArfTsNCj4gKw0KPiArc3Ry
dWN0IGRsYV9wcm9jZXNzb3Igew0KPiArCWNvbnN0IGNoYXIgKm5hbWU7DQo+ICsJdWludDhf
dCBvcF90eXBlOw0KPiArCXVpbnQ4X3QgY29uc3VtZXJfcHRyOw0KPiArCXVpbnQ4X3Qgcm9p
X2luZGV4Ow0KPiArCXVpbnQ4X3QgZ3JvdXBfc3RhdHVzOw0KPiArCXVpbnQ4X3QgcmRtYV9z
dGF0dXM7DQo+ICsJdWludDhfdCBsYXN0X2dyb3VwOw0KPiArDQo+ICsJc3RydWN0IGRsYV9j
b21tb25fb3BfZGVzYyAqdGFpbF9vcDsNCj4gKwlzdHJ1Y3QgZGxhX3Byb2Nlc3Nvcl9ncm91
cCBncm91cHNbRExBX05VTV9HUk9VUFNdOw0KPiArCXN0cnVjdCBkbGFfZW5naW5lICplbmdp
bmU7DQo+ICsNCj4gKwlpbnQgKCppc19yZWFkeSkoc3RydWN0IGRsYV9wcm9jZXNzb3IgKnBy
b2Nlc3NvciwNCj4gKwkJCQkgIHN0cnVjdCBkbGFfcHJvY2Vzc29yX2dyb3VwICpncm91cCk7
DQo+ICsJaW50ICgqZW5hYmxlKShzdHJ1Y3QgZGxhX2VuZ2luZSAqZW5naW5lLCBzdHJ1Y3Qg
ZGxhX3Byb2Nlc3Nvcl9ncm91cCAqZ3JvdXApOw0KPiArCWludCAoKnByb2dyYW0pKHN0cnVj
dCBkbGFfZW5naW5lICplbmdpbmUsIHN0cnVjdCBkbGFfcHJvY2Vzc29yX2dyb3VwICpncm91
cCk7DQo+ICsJdm9pZCAoKnNldF9wcm9kdWNlcikoc3RydWN0IGRsYV9lbmdpbmUgKmVuZ2lu
ZSwgaW50MzJfdCBncm91cF9pZCwgaW50MzJfdCByZG1hX2lkKTsNCj4gKwl2b2lkICgqZHVt
cF9jb25maWcpKHN0cnVjdCBkbGFfcHJvY2Vzc29yX2dyb3VwICpncm91cCk7DQo+ICsJdm9p
ZCAoKnJkbWFfY2hlY2spKHN0cnVjdCBkbGFfcHJvY2Vzc29yX2dyb3VwICpncm91cCk7DQo+
ICt9Ow0KPiArDQo+ICtzdHJ1Y3QgZGxhX2VuZ2luZSB7DQo+ICsJc3RydWN0IGRsYV90YXNr
ICp0YXNrOw0KPiArCXN0cnVjdCBkbGFfY29uZmlnICpjb25maWdfZGF0YTsNCj4gKwlzdHJ1
Y3QgZGxhX25ldHdvcmtfZGVzYyAqbmV0d29yazsNCj4gKwlzdHJ1Y3QgZGxhX3Byb2Nlc3Nv
ciBwcm9jZXNzb3JzW0RMQV9PUF9OVU1dOw0KPiArDQo+ICsJdWludDE2X3QgbnVtX3Byb2Nf
aHdsOw0KPiArCWludDMyX3Qgc3RhdHVzOw0KPiArDQo+ICsJdm9pZCAqZHJpdmVyX2NvbnRl
eHQ7DQo+ICt9Ow0KPiArDQo+ICt2b2lkIHJlZ193cml0ZShzdHJ1Y3QgZGxhX2VuZ2luZSAq
ZW5naW5lLCB1aW50MzJfdCBhZGRyLCB1aW50MzJfdCByZWcpOw0KPiArdWludDMyX3QgcmVn
X3JlYWQoc3RydWN0IGRsYV9lbmdpbmUgKmVuZ2luZSwgdWludDMyX3QgYWRkcik7DQo+ICsN
Cj4gKy8qKg0KPiArICogT3BlcmF0aW9uIGRlc2NyaXB0b3IgY2FjaGUgZnVuY3Rpb25zDQo+
ICsgKi8NCj4gK3ZvaWQNCj4gK2RsYV9wdXRfb3BfZGVzYyhzdHJ1Y3QgZGxhX2VuZ2luZSAq
ZW5naW5lLCBzdHJ1Y3QgZGxhX2NvbW1vbl9vcF9kZXNjICpvcF9kZXNjKTsNCj4gK3N0cnVj
dCBkbGFfY29tbW9uX29wX2Rlc2MNCj4gKypkbGFfZ2V0X29wX2Rlc2Moc3RydWN0IGRsYV9l
bmdpbmUgKmVuZ2luZSwgc3RydWN0IGRsYV90YXNrICp0YXNrLA0KPiArCQkJICAgaW50MTZf
dCBpbmRleCwNCj4gKwkJCSAgIHVpbnQ4X3Qgb3BfdHlwZSwNCj4gKwkJCSAgIHVpbnQ4X3Qg
cm9pX2luZGV4KTsNCj4gK3ZvaWQNCj4gK2RsYV9nZXRfcmVmY291bnQoc3RydWN0IGRsYV9j
b21tb25fb3BfZGVzYyAqb3BfZGVzYyk7DQo+ICt2b2lkDQo+ICtkbGFfaW5pdF9vcF9jYWNo
ZShzdHJ1Y3QgZGxhX2VuZ2luZSAqZW5naW5lKTsNCj4gKw0KPiArLyoqDQo+ICsgKiBPcGVy
YXRpb24gY29tcGxldGlvbiBoYW5kbGVyDQo+ICsgKi8NCj4gK2ludA0KPiArZGxhX29wX2Nv
bXBsZXRpb24oc3RydWN0IGRsYV9lbmdpbmUgKmVuZ2luZSwgc3RydWN0IGRsYV9wcm9jZXNz
b3IgKnByb2Nlc3NvciwNCj4gKwkJICAgICAgc3RydWN0IGRsYV9wcm9jZXNzb3JfZ3JvdXAg
Kmdyb3VwKTsNCj4gKw0KPiAraW50MzJfdA0KPiArZGxhX3JlYWRfbHV0KHN0cnVjdCBkbGFf
ZW5naW5lICplbmdpbmUsIGludDE2X3QgaW5kZXgsIHZvaWQgKmRzdCk7DQo+ICtpbnQNCj4g
K2RsYV9lbmFibGVfaW50cihzdHJ1Y3QgZGxhX2VuZ2luZSAqZW5naW5lLCB1aW50MzJfdCBt
YXNrKTsNCj4gK2ludA0KPiArdXRpbHNfZ2V0X2ZyZWVfZ3JvdXAoc3RydWN0IGRsYV9lbmdp
bmUgKmVuZ2luZSwgc3RydWN0IGRsYV9wcm9jZXNzb3IgKnByb2Nlc3NvciwNCj4gKwkJCXVp
bnQ4X3QgKmdyb3VwX2lkLA0KPiArCQkJdWludDhfdCAqcmRtYV9pZCk7DQo+ICtpbnQzMl90
DQo+ICtkbGFfZ2V0X2RtYV9jdWJlX2FkZHJlc3Modm9pZCAqZHJpdmVyX2NvbnRleHQsDQo+
ICsJCQkJCQl2b2lkICp0YXNrX2RhdGEsDQo+ICsJCQkJCQlpbnQxNl90IGluZGV4LA0KPiAr
CQkJCQkJdWludDMyX3Qgb2Zmc2V0LA0KPiArCQkJCQkJdm9pZCAqZHN0X3B0ciwNCj4gKwkJ
CQkJCXVpbnQzMl90IGRlc3RpbmF0aW9uKTsNCj4gK2ludA0KPiArZGxhX3JlYWRfaW5wdXRf
YWRkcmVzcyhzdHJ1Y3QgZGxhX2VuZ2luZSAqZW5naW5lLCBzdHJ1Y3QgZGxhX2RhdGFfY3Vi
ZSAqZGF0YSwNCj4gKwkJICAgICAgIHVpbnQ2NF90ICphZGRyZXNzLA0KPiArCQkgICAgICAg
aW50MTZfdCBvcF9pbmRleCwNCj4gKwkJICAgICAgIHVpbnQ4X3Qgcm9pX2luZGV4LA0KPiAr
CQkgICAgICAgdWludDhfdCBicHApOw0KPiArDQo+ICsvKioNCj4gKyAqIEJETUEgb3BlcmF0
aW9ucw0KPiArICovDQo+ICt2b2lkDQo+ICtkbGFfYmRtYV9zZXRfcHJvZHVjZXIoc3RydWN0
IGRsYV9lbmdpbmUgKmVuZ2luZSwgaW50MzJfdCBncm91cF9pZCwgaW50MzJfdCByZG1hX2dy
b3VwX2lkKTsNCj4gK2ludA0KPiArZGxhX2JkbWFfZW5hYmxlKHN0cnVjdCBkbGFfZW5naW5l
ICplbmdpbmUsIHN0cnVjdCBkbGFfcHJvY2Vzc29yX2dyb3VwICpncm91cCk7DQo+ICtpbnQN
Cj4gK2RsYV9iZG1hX3Byb2dyYW0oc3RydWN0IGRsYV9lbmdpbmUgKmVuZ2luZSwgc3RydWN0
IGRsYV9wcm9jZXNzb3JfZ3JvdXAgKmdyb3VwKTsNCj4gK2ludA0KPiArZGxhX2JkbWFfaXNf
cmVhZHkoc3RydWN0IGRsYV9wcm9jZXNzb3IgKnByb2Nlc3NvciwNCj4gKwkJCSAgICBzdHJ1
Y3QgZGxhX3Byb2Nlc3Nvcl9ncm91cCAqZ3JvdXApOw0KPiArdm9pZA0KPiArZGxhX2JkbWFf
ZHVtcF9jb25maWcoc3RydWN0IGRsYV9wcm9jZXNzb3JfZ3JvdXAgKmdyb3VwKTsNCj4gK3Zv
aWQNCj4gK2RsYV9iZG1hX3JkbWFfY2hlY2soc3RydWN0IGRsYV9wcm9jZXNzb3JfZ3JvdXAg
Kmdyb3VwKTsNCj4gKw0KPiArLyoqDQo+ICsgKiBDb252b2x1dGlvbiBvcGVyYXRpb25zDQo+
ICsgKi8NCj4gK3ZvaWQNCj4gK2RsYV9jb252X3NldF9wcm9kdWNlcihzdHJ1Y3QgZGxhX2Vu
Z2luZSAqZW5naW5lLCBpbnQzMl90IGdyb3VwX2lkLCBpbnQzMl90IHJkbWFfZ3JvdXBfaWQp
Ow0KPiAraW50DQo+ICtkbGFfY29udl9lbmFibGUoc3RydWN0IGRsYV9lbmdpbmUgKmVuZ2lu
ZSwgc3RydWN0IGRsYV9wcm9jZXNzb3JfZ3JvdXAgKmdyb3VwKTsNCj4gK2ludA0KPiArZGxh
X2NvbnZfcHJvZ3JhbShzdHJ1Y3QgZGxhX2VuZ2luZSAqZW5naW5lLCBzdHJ1Y3QgZGxhX3By
b2Nlc3Nvcl9ncm91cCAqZ3JvdXApOw0KPiAraW50DQo+ICtkbGFfY29udl9pc19yZWFkeShz
dHJ1Y3QgZGxhX3Byb2Nlc3NvciAqcHJvY2Vzc29yLA0KPiArCQkJICAgIHN0cnVjdCBkbGFf
cHJvY2Vzc29yX2dyb3VwICpncm91cCk7DQo+ICt2b2lkDQo+ICtkbGFfY29udl9kdW1wX2Nv
bmZpZyhzdHJ1Y3QgZGxhX3Byb2Nlc3Nvcl9ncm91cCAqZ3JvdXApOw0KPiArdm9pZA0KPiAr
ZGxhX2NvbnZfcmRtYV9jaGVjayhzdHJ1Y3QgZGxhX3Byb2Nlc3Nvcl9ncm91cCAqZ3JvdXAp
Ow0KPiArDQo+ICsvKioNCj4gKyAqIFNEUCBvcGVyYXRpb25zDQo+ICsgKi8NCj4gK3ZvaWQN
Cj4gK2RsYV9zZHBfc2V0X3Byb2R1Y2VyKHN0cnVjdCBkbGFfZW5naW5lICplbmdpbmUsIGlu
dDMyX3QgZ3JvdXBfaWQsIGludDMyX3QgcmRtYV9ncm91cF9pZCk7DQo+ICtpbnQNCj4gK2Rs
YV9zZHBfZW5hYmxlKHN0cnVjdCBkbGFfZW5naW5lICplbmdpbmUsIHN0cnVjdCBkbGFfcHJv
Y2Vzc29yX2dyb3VwICpncm91cCk7DQo+ICtpbnQNCj4gK2RsYV9zZHBfcHJvZ3JhbShzdHJ1
Y3QgZGxhX2VuZ2luZSAqZW5naW5lLCBzdHJ1Y3QgZGxhX3Byb2Nlc3Nvcl9ncm91cCAqZ3Jv
dXApOw0KPiAraW50DQo+ICtkbGFfc2RwX2lzX3JlYWR5KHN0cnVjdCBkbGFfcHJvY2Vzc29y
ICpwcm9jZXNzb3IsDQo+ICsJCQkgICBzdHJ1Y3QgZGxhX3Byb2Nlc3Nvcl9ncm91cCAqZ3Jv
dXApOw0KPiArdm9pZA0KPiArZGxhX3NkcF9kdW1wX2NvbmZpZyhzdHJ1Y3QgZGxhX3Byb2Nl
c3Nvcl9ncm91cCAqZ3JvdXApOw0KPiArdm9pZA0KPiArZGxhX3NkcF9yZG1hX2NoZWNrKHN0
cnVjdCBkbGFfcHJvY2Vzc29yX2dyb3VwICpncm91cCk7DQo+ICsNCj4gKy8qKg0KPiArICog
UERQIG9wZXJhdGlvbnMNCj4gKyAqLw0KPiArdm9pZA0KPiArZGxhX3BkcF9zZXRfcHJvZHVj
ZXIoc3RydWN0IGRsYV9lbmdpbmUgKmVuZ2luZSwgaW50MzJfdCBncm91cF9pZCwgaW50MzJf
dCByZG1hX2dyb3VwX2lkKTsNCj4gK2ludA0KPiArZGxhX3BkcF9lbmFibGUoc3RydWN0IGRs
YV9lbmdpbmUgKmVuZ2luZSwgc3RydWN0IGRsYV9wcm9jZXNzb3JfZ3JvdXAgKmdyb3VwKTsN
Cj4gK2ludA0KPiArZGxhX3BkcF9wcm9ncmFtKHN0cnVjdCBkbGFfZW5naW5lICplbmdpbmUs
IHN0cnVjdCBkbGFfcHJvY2Vzc29yX2dyb3VwICpncm91cCk7DQo+ICtpbnQNCj4gK2RsYV9w
ZHBfaXNfcmVhZHkoc3RydWN0IGRsYV9wcm9jZXNzb3IgKnByb2Nlc3NvciwNCj4gKwkJCSAg
IHN0cnVjdCBkbGFfcHJvY2Vzc29yX2dyb3VwICpncm91cCk7DQo+ICt2b2lkDQo+ICtkbGFf
cGRwX2R1bXBfY29uZmlnKHN0cnVjdCBkbGFfcHJvY2Vzc29yX2dyb3VwICpncm91cCk7DQo+
ICt2b2lkDQo+ICtkbGFfcGRwX3JkbWFfY2hlY2soc3RydWN0IGRsYV9wcm9jZXNzb3JfZ3Jv
dXAgKmdyb3VwKTsNCj4gKw0KPiArLyoqDQo+ICsgKiBDRFAgb3BlcmF0aW9ucw0KPiArICov
DQo+ICt2b2lkDQo+ICtkbGFfY2RwX3NldF9wcm9kdWNlcihzdHJ1Y3QgZGxhX2VuZ2luZSAq
ZW5naW5lLCBpbnQzMl90IGdyb3VwX2lkLCBpbnQzMl90IHJkbWFfZ3JvdXBfaWQpOw0KPiAr
aW50DQo+ICtkbGFfY2RwX2VuYWJsZShzdHJ1Y3QgZGxhX2VuZ2luZSAqZW5naW5lLCBzdHJ1
Y3QgZGxhX3Byb2Nlc3Nvcl9ncm91cCAqZ3JvdXApOw0KPiAraW50DQo+ICtkbGFfY2RwX3By
b2dyYW0oc3RydWN0IGRsYV9lbmdpbmUgKmVuZ2luZSwgc3RydWN0IGRsYV9wcm9jZXNzb3Jf
Z3JvdXAgKmdyb3VwKTsNCj4gK2ludA0KPiArZGxhX2NkcF9pc19yZWFkeShzdHJ1Y3QgZGxh
X3Byb2Nlc3NvciAqcHJvY2Vzc29yLA0KPiArCQkJICAgc3RydWN0IGRsYV9wcm9jZXNzb3Jf
Z3JvdXAgKmdyb3VwKTsNCj4gK3ZvaWQNCj4gK2RsYV9jZHBfZHVtcF9jb25maWcoc3RydWN0
IGRsYV9wcm9jZXNzb3JfZ3JvdXAgKmdyb3VwKTsNCj4gK3ZvaWQNCj4gK2RsYV9jZHBfcmRt
YV9jaGVjayhzdHJ1Y3QgZGxhX3Byb2Nlc3Nvcl9ncm91cCAqZ3JvdXApOw0KPiArDQo+ICsv
KioNCj4gKyAqIFJVQklLIG9wZXJhdGlvbnMNCj4gKyAqLw0KPiArdm9pZA0KPiArZGxhX3J1
YmlrX3NldF9wcm9kdWNlcihzdHJ1Y3QgZGxhX2VuZ2luZSAqZW5naW5lLCBpbnQzMl90IGdy
b3VwX2lkLCBpbnQzMl90IHJkbWFfZ3JvdXBfaWQpOw0KPiAraW50DQo+ICtkbGFfcnViaWtf
ZW5hYmxlKHN0cnVjdCBkbGFfZW5naW5lICplbmdpbmUsIHN0cnVjdCBkbGFfcHJvY2Vzc29y
X2dyb3VwICpncm91cCk7DQo+ICtpbnQNCj4gK2RsYV9ydWJpa19wcm9ncmFtKHN0cnVjdCBk
bGFfZW5naW5lICplbmdpbmUsIHN0cnVjdCBkbGFfcHJvY2Vzc29yX2dyb3VwICpncm91cCk7
DQo+ICtpbnQNCj4gK2RsYV9ydWJpa19pc19yZWFkeShzdHJ1Y3QgZGxhX3Byb2Nlc3NvciAq
cHJvY2Vzc29yLA0KPiArCQkJICAgICBzdHJ1Y3QgZGxhX3Byb2Nlc3Nvcl9ncm91cCAqZ3Jv
dXApOw0KPiArdm9pZA0KPiArZGxhX3J1YmlrX2R1bXBfY29uZmlnKHN0cnVjdCBkbGFfcHJv
Y2Vzc29yX2dyb3VwICpncm91cCk7DQo+ICt2b2lkDQo+ICtkbGFfcnViaWtfcmRtYV9jaGVj
ayhzdHJ1Y3QgZGxhX3Byb2Nlc3Nvcl9ncm91cCAqZ3JvdXApOw0KPiArDQo+ICsjZW5kaWYN
Cj4gZGlmZiAtLWdpdCBhL2RyaXZlcnMvZ3B1L2RybS9udmRsYS9udmRsYV9nZW0uYyBiL2Ry
aXZlcnMvZ3B1L2RybS9udmRsYS9udmRsYV9nZW0uYw0KPiBuZXcgZmlsZSBtb2RlIDEwMDY0
NA0KPiBpbmRleCAwMDAwMDAwMDAwMDAuLmNjY2Y2ZDAxYTU2NA0KPiAtLS0gL2Rldi9udWxs
DQo+ICsrKyBiL2RyaXZlcnMvZ3B1L2RybS9udmRsYS9udmRsYV9nZW0uYw0KPiBAQCAtMCww
ICsxLDM5MyBAQA0KPiArLy8gU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEJTRC0zLUNsYXVz
ZSBPUiBHUEwtMi4wDQo+ICsvKg0KPiArICogQ29weXJpZ2h0IChDKSAyMDE3LTIwMTggTlZJ
RElBIENPUlBPUkFUSU9ODQo+ICsgKiBDb3B5cmlnaHQgKEMpIDIwMjIgQ2FpIEh1b3FpbmcN
Cj4gKyAqLw0KPiArDQo+ICsjaW5jbHVkZSA8bGludXgvZG1hLWJ1Zi5oPg0KPiArI2luY2x1
ZGUgPGRybS9kcm1fZHJ2Lmg+DQo+ICsjaW5jbHVkZSA8ZHJtL2RybV9nZW1fY21hX2hlbHBl
ci5oPg0KPiArDQo+ICsjaW5jbHVkZSAibnZkbGFfZHJtLmgiDQo+ICsjaW5jbHVkZSAibnZk
bGFfaW9jdGwuaCINCj4gKw0KPiArI2RlZmluZSB0b19udmRsYV9vYmooeCkgY29udGFpbmVy
X29mKHgsIHN0cnVjdCBudmRsYV9nZW1fb2JqZWN0LCBvYmplY3QpDQo+ICsNCj4gK3N0cnVj
dCBudmRsYV9nZW1fb2JqZWN0IHsNCj4gKwlzdHJ1Y3QgZHJtX2dlbV9vYmplY3Qgb2JqZWN0
Ow0KPiArDQo+ICsJdm9pZCAqa3ZhZGRyOw0KPiArCWRtYV9hZGRyX3QgZG1hX2FkZHI7DQo+
ICsJdW5zaWduZWQgbG9uZyBkbWFfYXR0cnM7DQo+ICt9Ow0KPiArDQo+ICtzdGF0aWMgaW50
MzJfdCBudmRsYV9maWxsX3Rhc2tfZGVzYyhzdHJ1Y3QgbnZkbGFfaW9jdGxfc3VibWl0X3Rh
c2sgKmxvY2FsX3Rhc2ssDQo+ICsJCQkJc3RydWN0IG52ZGxhX3Rhc2sgKnRhc2spDQo+ICt7
DQo+ICsJc3RydWN0IG52ZGxhX21lbV9oYW5kbGUgKmhhbmRsZXM7DQo+ICsNCj4gKwkvKiB1
cGRhdGUgdGFzayBkZXNjIGZpZWxkcyAqLw0KPiArCXRhc2stPm51bV9hZGRyZXNzZXMgPSBs
b2NhbF90YXNrLT5udW1fYWRkcmVzc2VzOw0KPiArDQo+ICsJaGFuZGxlcyA9IGt6YWxsb2Mo
bG9jYWxfdGFzay0+bnVtX2FkZHJlc3NlcyAqIHNpemVvZihzdHJ1Y3QgbnZkbGFfbWVtX2hh
bmRsZSksDQo+ICsJCQkJCSAgR0ZQX0tFUk5FTCk7DQo+ICsJaWYgKGhhbmRsZXMgPT0gTlVM
TCkNCj4gKwkJcmV0dXJuIC1FRkFVTFQ7DQo+ICsNCj4gKwkvKiBnZXQgdXNlciBhZGRyZXNz
ZXMgbGlzdCAqLw0KPiArCWlmIChjb3B5X2Zyb21fdXNlcihoYW5kbGVzLA0KPiArCQkodm9p
ZCBfX3VzZXIgKilsb2NhbF90YXNrLT5hZGRyZXNzX2xpc3QsDQo+ICsJCSh0YXNrLT5udW1f
YWRkcmVzc2VzICoNCj4gKwkJCXNpemVvZihzdHJ1Y3QgbnZkbGFfbWVtX2hhbmRsZSkpKSkg
ew0KPiArCQlwcl9lcnIoImZhaWxlZCB0byBjb3B5IGFkZHJlc3MgbGlzdCBmcm9tIHVzZXIg
cHRyXG4iKTsNCj4gKwkJa2ZyZWUoaGFuZGxlcyk7DQo+ICsJCXJldHVybiAtRUZBVUxUOw0K
PiArCX0NCj4gKw0KPiArCXRhc2stPmFkZHJlc3NfbGlzdCA9IGhhbmRsZXM7DQo+ICsNCj4g
KwlyZXR1cm4gMDsNCj4gK30NCj4gKw0KPiArc3RhdGljIGludDMyX3QgbnZkbGFfc3VibWl0
KHN0cnVjdCBkcm1fZGV2aWNlICpkcm0sIHZvaWQgKmFyZywNCj4gKwkJCQkJc3RydWN0IGRy
bV9maWxlICpmaWxlKQ0KPiArew0KPiArCWludDMyX3QgZXJyID0gMDsNCj4gKwlzdHJ1Y3Qg
bnZkbGFfdGFzayAqdGFzazsNCj4gKwlzdHJ1Y3QgbnZkbGFfaW9jdGxfc3VibWl0X3Rhc2sg
bG9jYWxfdGFzazsNCj4gKwlzdHJ1Y3QgbnZkbGFfaW9jdGxfc3VibWl0X3Rhc2sgX191c2Vy
ICp1c2VyX3Rhc2s7DQo+ICsJc3RydWN0IG52ZGxhX2RldmljZSAqbnZkbGFfZGV2ID0gZGV2
X2dldF9kcnZkYXRhKGRybS0+ZGV2KTsNCj4gKwlzdHJ1Y3QgbnZkbGFfc3VibWl0X2FyZ3Mg
KmFyZ3MgPQ0KPiArCQkJKHN0cnVjdCBudmRsYV9zdWJtaXRfYXJncyAqKWFyZzsNCj4gKw0K
PiArCXVzZXJfdGFzayA9IChzdHJ1Y3QgbnZkbGFfaW9jdGxfc3VibWl0X3Rhc2sgX191c2Vy
ICopDQo+ICsJCQkodWludHB0cl90KWFyZ3MtPnRhc2tzOw0KPiArCWlmICghdXNlcl90YXNr
KQ0KPiArCQlyZXR1cm4gLUVJTlZBTDsNCj4gKw0KPiArCS8qIElPQ1RMIGNvcHkgZGVzY3Jp
cHRvcnMgKi8NCj4gKwlpZiAoY29weV9mcm9tX3VzZXIoJmxvY2FsX3Rhc2ssICh2b2lkIF9f
dXNlciAqKXVzZXJfdGFzaywNCj4gKwkJCShzaXplb2YoKnVzZXJfdGFzaykpKSkNCj4gKwkJ
cmV0dXJuIC1FRkFVTFQ7DQo+ICsNCj4gKwl0YXNrID0ga3phbGxvYyhzaXplb2YoKnRhc2sp
LCBHRlBfS0VSTkVMKTsNCj4gKwlpZiAodGFzayA9PSBOVUxMKQ0KPiArCQlyZXR1cm4gLUVG
QVVMVDsNCj4gKw0KPiArCW52ZGxhX2Rldi0+dGFzayA9IHRhc2s7DQo+ICsJa3JlZl9pbml0
KCZ0YXNrLT5yZWYpOw0KPiArCXRhc2stPm52ZGxhX2RldiA9IG52ZGxhX2RldjsNCj4gKwl0
YXNrLT5maWxlID0gZmlsZTsNCj4gKw0KPiArCS8qIHVwZGF0ZSB0YXNrIGRlc2MgZmllbGRz
ICovDQo+ICsJZXJyID0gbnZkbGFfZmlsbF90YXNrX2Rlc2MoJmxvY2FsX3Rhc2ssIHRhc2sp
Ow0KPiArCWlmIChlcnIpDQo+ICsJCWdvdG8gZnJlZV90YXNrX2Rlc2M7DQo+ICsNCj4gKwll
cnIgPSBudmRsYV90YXNrX3N1Ym1pdChudmRsYV9kZXYsIHRhc2spOw0KPiArDQo+ICsJa2Zy
ZWUodGFzay0+YWRkcmVzc19saXN0KTsNCj4gKw0KPiArZnJlZV90YXNrX2Rlc2M6DQo+ICsJ
a2ZyZWUodGFzayk7DQo+ICsJcmV0dXJuIGVycjsNCj4gK30NCj4gKw0KPiArc3RhdGljIGlu
dDMyX3QgbnZkbGFfZ2VtX2FsbG9jKHN0cnVjdCBudmRsYV9nZW1fb2JqZWN0ICpub2JqKQ0K
PiArew0KPiArCXN0cnVjdCBkcm1fZ2VtX29iamVjdCAqZG9iaiA9ICZub2JqLT5vYmplY3Q7
DQo+ICsJc3RydWN0IGRybV9kZXZpY2UgKmRybSA9IGRvYmotPmRldjsNCj4gKw0KPiArCW5v
YmotPmRtYV9hdHRycyA9IERNQV9BVFRSX1dSSVRFX0NPTUJJTkU7DQo+ICsNCj4gKwlub2Jq
LT5rdmFkZHIgPSBkbWFfYWxsb2NfYXR0cnMoZHJtLT5kZXYsIGRvYmotPnNpemUsICZub2Jq
LT5kbWFfYWRkciwNCj4gKwkJCQkJCUdGUF9LRVJORUwsIG5vYmotPmRtYV9hdHRycyk7DQo+
ICsNCg0KU3RvcmUgYW4gaW9zeXMtbWFwIGFkZHJlc3MgaW4gbm9iaiBhbmQgaW5pdGlhbGl6
ZSBpdCB3aXRoIA0KaW9zeXNfbWFwX3NldF92YWRkcigpOyBvciBpb3N5c19tYXBfc2V0X3Zh
ZGRyX2lvbWVtKCkgaWYgeW91J3JlIHdvcmtpbmcgDQp3aXRoIEkvTyBtZW1vcnkuDQoNCj4g
KwlpZiAoIW5vYmotPmt2YWRkcikNCj4gKwkJcmV0dXJuIC1FTk9NRU07DQo+ICsNCj4gKwly
ZXR1cm4gMDsNCj4gK30NCj4gKw0KPiArc3RhdGljIHZvaWQgbnZkbGFfZ2VtX2ZyZWUoc3Ry
dWN0IG52ZGxhX2dlbV9vYmplY3QgKm5vYmopDQo+ICt7DQo+ICsJc3RydWN0IGRybV9nZW1f
b2JqZWN0ICpkb2JqID0gJm5vYmotPm9iamVjdDsNCj4gKwlzdHJ1Y3QgZHJtX2RldmljZSAq
ZHJtID0gZG9iai0+ZGV2Ow0KPiArDQo+ICsJZG1hX2ZyZWVfYXR0cnMoZHJtLT5kZXYsIGRv
YmotPnNpemUsIG5vYmotPmt2YWRkciwgbm9iai0+ZG1hX2FkZHIsDQo+ICsJCQkJbm9iai0+
ZG1hX2F0dHJzKTsNCj4gK30NCj4gKw0KPiArc3RhdGljIHZvaWQgbnZkbGFfZ2VtX2ZyZWVf
b2JqZWN0KHN0cnVjdCBkcm1fZ2VtX29iamVjdCAqZG9iaikNCj4gK3sNCj4gKwlzdHJ1Y3Qg
bnZkbGFfZ2VtX29iamVjdCAqbm9iajsNCj4gKw0KPiArCWRybV9nZW1fZnJlZV9tbWFwX29m
ZnNldChkb2JqKTsNCj4gKw0KPiArCW5vYmogPSB0b19udmRsYV9vYmooZG9iaik7DQo+ICsN
Cj4gKwludmRsYV9nZW1fZnJlZShub2JqKTsNCj4gKw0KPiArCWtmcmVlKG5vYmopOw0KPiAr
fQ0KPiArDQo+ICtzdGF0aWMgc3RydWN0IG52ZGxhX2dlbV9vYmplY3QgKg0KPiArbnZkbGFf
Z2VtX2NyZWF0ZV9vYmplY3Qoc3RydWN0IGRybV9kZXZpY2UgKmRybSwgdWludDMyX3Qgc2l6
ZSkNCj4gK3sNCj4gKwlpbnQzMl90IHJldDsNCj4gKwlzdHJ1Y3QgZHJtX2dlbV9vYmplY3Qg
KmRvYmo7DQo+ICsJc3RydWN0IG52ZGxhX2dlbV9vYmplY3QgKm5vYmo7DQo+ICsNCj4gKwlz
aXplID0gcm91bmRfdXAoc2l6ZSwgUEFHRV9TSVpFKTsNCj4gKw0KPiArCW5vYmogPSBremFs
bG9jKHNpemVvZigqbm9iaiksIEdGUF9LRVJORUwpOw0KPiArCWlmICghbm9iaikNCj4gKwkJ
cmV0dXJuIEVSUl9QVFIoLUVOT01FTSk7DQo+ICsNCj4gKwlkb2JqID0gJm5vYmotPm9iamVj
dDsNCj4gKw0KPiArCWRybV9nZW1fcHJpdmF0ZV9vYmplY3RfaW5pdChkcm0sIGRvYmosIHNp
emUpOw0KPiArDQo+ICsJcmV0ID0gbnZkbGFfZ2VtX2FsbG9jKG5vYmopOw0KPiArCWlmIChy
ZXQpDQo+ICsJCWdvdG8gZnJlZV9udmRsYV9vYmo7DQo+ICsNCj4gKwlyZXR1cm4gbm9iajsN
Cj4gKw0KPiArZnJlZV9udmRsYV9vYmo6DQo+ICsJa2ZyZWUobm9iaik7DQo+ICsJcmV0dXJu
IEVSUl9QVFIocmV0KTsNCj4gK30NCj4gKw0KPiArc3RhdGljIHN0cnVjdCBzZ190YWJsZSoN
Cj4gK252ZGxhX2RybV9nZW1fcHJpbWVfZ2V0X3NnX3RhYmxlKHN0cnVjdCBkcm1fZ2VtX29i
amVjdCAqZG9iaikNCj4gK3sNCj4gKwlpbnQzMl90IHJldDsNCj4gKwlzdHJ1Y3Qgc2dfdGFi
bGUgKnNndDsNCj4gKwlzdHJ1Y3QgZHJtX2RldmljZSAqZHJtID0gZG9iai0+ZGV2Ow0KPiAr
CXN0cnVjdCBudmRsYV9nZW1fb2JqZWN0ICpub2JqID0gdG9fbnZkbGFfb2JqKGRvYmopOw0K
PiArDQo+ICsJc2d0ID0ga3phbGxvYyhzaXplb2YoKnNndCksIEdGUF9LRVJORUwpOw0KPiAr
CWlmICghc2d0KQ0KPiArCQlyZXR1cm4gRVJSX1BUUigtRU5PTUVNKTsNCj4gKw0KPiArCXJl
dCA9IGRtYV9nZXRfc2d0YWJsZV9hdHRycyhkcm0tPmRldiwgc2d0LCBub2JqLT5rdmFkZHIs
DQo+ICsJCQkJICAgIG5vYmotPmRtYV9hZGRyLCBkb2JqLT5zaXplLA0KPiArCQkJCSAgICBu
b2JqLT5kbWFfYXR0cnMpOw0KPiArCWlmIChyZXQpIHsNCj4gKwkJRFJNX0VSUk9SKCJmYWls
ZWQgdG8gYWxsb2NhdGUgc2d0LCAlZFxuIiwgcmV0KTsNCj4gKwkJa2ZyZWUoc2d0KTsNCj4g
KwkJcmV0dXJuIEVSUl9QVFIocmV0KTsNCj4gKwl9DQo+ICsNCj4gKwlyZXR1cm4gc2d0Ow0K
PiArfQ0KPiArDQo+ICtzdGF0aWMgaW50IG52ZGxhX2RybV9nZW1fcHJpbWVfdm1hcChzdHJ1
Y3QgZHJtX2dlbV9vYmplY3QgKm9iaiwgc3RydWN0IGlvc3lzX21hcCAqbWFwKQ0KPiArew0K
PiArCXN0cnVjdCBudmRsYV9nZW1fb2JqZWN0ICpub2JqID0gdG9fbnZkbGFfb2JqKG9iaik7
DQo+ICsNCj4gKwltYXAtPnZhZGRyID0gbm9iai0+a3ZhZGRyOw0KDQpJbnN0ZWFkIG9mIGt2
YWRkciwgc3RvcmUgdGhlIHBvaW50ZXIgYXMgc3RydWN0IGlvc3lzX21hcC4gVGhlbiBzaW1w
bHkgDQpjb3B5IGl0IGhlcmUsIGFzIGluDQoNCiAgICptYXAgPSBub2JqLT5tYXA7DQoNCj4g
Kw0KPiArCXJldHVybiAwOw0KPiArfQ0KPiArDQo+ICtzdGF0aWMgdm9pZCBudmRsYV9kcm1f
Z2VtX3ByaW1lX3Z1bm1hcChzdHJ1Y3QgZHJtX2dlbV9vYmplY3QgKm9iaiwgc3RydWN0IGlv
c3lzX21hcCAqbWFwKQ0KPiArew0KPiArCS8qIE5vdGhpbmcgdG8gZG8gKi8NCj4gK30NCj4g
Kw0KPiArc3RhdGljIGludDMyX3QgbnZkbGFfZHJtX2dlbV9vYmplY3RfbW1hcChzdHJ1Y3Qg
ZHJtX2dlbV9vYmplY3QgKmRvYmosDQo+ICsJCQkJCXN0cnVjdCB2bV9hcmVhX3N0cnVjdCAq
dm1hKQ0KPiArew0KPiArCWludDMyX3QgcmV0Ow0KPiArCXN0cnVjdCBudmRsYV9nZW1fb2Jq
ZWN0ICpub2JqID0gdG9fbnZkbGFfb2JqKGRvYmopOw0KPiArCXN0cnVjdCBkcm1fZGV2aWNl
ICpkcm0gPSBkb2JqLT5kZXY7DQo+ICsNCj4gKwl2bWEtPnZtX2ZsYWdzICY9IH5WTV9QRk5N
QVA7DQo+ICsJdm1hLT52bV9wZ29mZiA9IDA7DQoNCkl0J3MgY2xlYW5lciB0byBkbyB0aGlz
IGFzDQoNCiAgIHZtYS0+dm1fcGdvZmYgLT0gZHJtX3ZtYV9ub2RlX3N0YXJ0KCZvYmotPnZt
YV9ub2RlKQ0KDQo+ICsNCj4gKwlyZXQgPSBkbWFfbW1hcF9hdHRycyhkcm0tPmRldiwgdm1h
LCBub2JqLT5rdmFkZHIsIG5vYmotPmRtYV9hZGRyLA0KPiArCQkJICAgICBkb2JqLT5zaXpl
LCBub2JqLT5kbWFfYXR0cnMpOw0KPiArCWlmIChyZXQpDQo+ICsJCWRybV9nZW1fdm1fY2xv
c2Uodm1hKTsNCj4gKw0KPiArCXJldHVybiByZXQ7DQo+ICt9DQo+ICsNCj4gK3N0YXRpYyBj
b25zdCBzdHJ1Y3QgZHJtX2dlbV9vYmplY3RfZnVuY3MgbnZkbGFfZ2VtX29iamVjdF9mdW5j
cyA9IHsNCj4gKwkuZnJlZSA9IG52ZGxhX2dlbV9mcmVlX29iamVjdCwNCj4gKwkuZ2V0X3Nn
X3RhYmxlID0gbnZkbGFfZHJtX2dlbV9wcmltZV9nZXRfc2dfdGFibGUsDQo+ICsJLnZtYXAg
PSBudmRsYV9kcm1fZ2VtX3ByaW1lX3ZtYXAsDQo+ICsJLnZ1bm1hcCA9IG52ZGxhX2RybV9n
ZW1fcHJpbWVfdnVubWFwLA0KPiArCS5tbWFwID0gbnZkbGFfZHJtX2dlbV9vYmplY3RfbW1h
cCwNCj4gK307DQo+ICsNCj4gK3N0YXRpYyBzdHJ1Y3QgbnZkbGFfZ2VtX29iamVjdCoNCj4g
K252ZGxhX2dlbV9jcmVhdGVfd2l0aF9oYW5kbGUoc3RydWN0IGRybV9maWxlICpmaWxlX3By
aXYsDQo+ICsJCQkJCQkJIHN0cnVjdCBkcm1fZGV2aWNlICpkcm0sIHVpbnQzMl90IHNpemUs
DQo+ICsJCQkJCQkJIHVpbnQzMl90ICpoYW5kbGUpDQo+ICt7DQo+ICsJaW50MzJfdCByZXQ7
DQo+ICsJc3RydWN0IGRybV9nZW1fb2JqZWN0ICpkb2JqOw0KPiArCXN0cnVjdCBudmRsYV9n
ZW1fb2JqZWN0ICpub2JqOw0KPiArDQo+ICsJbm9iaiA9IG52ZGxhX2dlbV9jcmVhdGVfb2Jq
ZWN0KGRybSwgc2l6ZSk7DQo+ICsJaWYgKElTX0VSUihub2JqKSkNCj4gKwkJcmV0dXJuIEVS
Ul9DQVNUKG5vYmopOw0KPiArDQo+ICsJZG9iaiA9ICZub2JqLT5vYmplY3Q7DQo+ICsJZG9i
ai0+ZnVuY3MgPSAmbnZkbGFfZ2VtX29iamVjdF9mdW5jczsNCj4gKwlyZXQgPSBkcm1fZ2Vt
X2hhbmRsZV9jcmVhdGUoZmlsZV9wcml2LCBkb2JqLCBoYW5kbGUpOw0KPiArCWlmIChyZXQp
DQo+ICsJCWdvdG8gZnJlZV9kcm1fb2JqZWN0Ow0KPiArDQo+ICsJZHJtX2dlbV9vYmplY3Rf
cHV0KGRvYmopOw0KPiArDQo+ICsJcmV0dXJuIG5vYmo7DQo+ICsNCj4gK2ZyZWVfZHJtX29i
amVjdDoNCj4gKwludmRsYV9nZW1fZnJlZV9vYmplY3QoZG9iaik7DQo+ICsNCj4gKwlyZXR1
cm4gRVJSX1BUUihyZXQpOw0KPiArfQ0KPiArDQo+ICtzdGF0aWMgaW50MzJfdCBudmRsYV9n
ZW1fY3JlYXRlKHN0cnVjdCBkcm1fZGV2aWNlICpkcm0sIHZvaWQgKmRhdGEsDQo+ICsJCQkJ
CQkJCXN0cnVjdCBkcm1fZmlsZSAqZmlsZSkNCj4gK3sNCj4gKwlzdHJ1Y3QgbnZkbGFfZ2Vt
X29iamVjdCAqbm9iajsNCj4gKwlzdHJ1Y3QgbnZkbGFfZ2VtX2NyZWF0ZV9hcmdzICphcmdz
ID0gZGF0YTsNCj4gKw0KPiArCW5vYmogPSBudmRsYV9nZW1fY3JlYXRlX3dpdGhfaGFuZGxl
KGZpbGUsIGRybSwgYXJncy0+c2l6ZSwNCj4gKwkJCQkJICZhcmdzLT5oYW5kbGUpOw0KPiAr
CWlmIChJU19FUlIobm9iaikpDQo+ICsJCXJldHVybiBQVFJfRVJSKG5vYmopOw0KPiArDQo+
ICsJcmV0dXJuIDA7DQo+ICt9DQo+ICsNCj4gK3N0YXRpYyBpbnQzMl90IG52ZGxhX2RybV9n
ZW1fbW1hcF9idWYoc3RydWN0IGRybV9nZW1fb2JqZWN0ICpvYmosDQo+ICsJCQkJCQkJCQkg
IHN0cnVjdCB2bV9hcmVhX3N0cnVjdCAqdm1hKQ0KPiArew0KPiArCWludDMyX3QgcmV0Ow0K
PiArDQo+ICsJcmV0ID0gZHJtX2dlbV9tbWFwX29iaihvYmosIG9iai0+c2l6ZSwgdm1hKTsN
Cj4gKwlpZiAocmV0KQ0KPiArCQlyZXR1cm4gcmV0Ow0KPiArDQo+ICsJcmV0dXJuIG52ZGxh
X2RybV9nZW1fb2JqZWN0X21tYXAob2JqLCB2bWEpOw0KPiArfQ0KPiArDQo+ICtzdGF0aWMg
aW50MzJfdCBudmRsYV9kcm1fZ2VtX21tYXAoc3RydWN0IGZpbGUgKmZpbHAsIHN0cnVjdCB2
bV9hcmVhX3N0cnVjdCAqdm1hKQ0KPiArew0KPiArCWludDMyX3QgcmV0Ow0KPiArCXN0cnVj
dCBkcm1fZ2VtX29iamVjdCAqb2JqOw0KPiArDQo+ICsJcmV0ID0gZHJtX2dlbV9tbWFwKGZp
bHAsIHZtYSk7DQo+ICsJaWYgKHJldCkNCj4gKwkJcmV0dXJuIHJldDsNCj4gKw0KPiArCW9i
aiA9IHZtYS0+dm1fcHJpdmF0ZV9kYXRhOw0KPiArDQo+ICsJcmV0dXJuIG52ZGxhX2RybV9n
ZW1fb2JqZWN0X21tYXAob2JqLCB2bWEpOw0KDQpJIGRvbid0IHVuZGVyc3RhbmQgdGhlc2Ug
dHdvIGxpbmVzLiBUaGlzIGlzIHBhcnQgb2Ygd2hhdCBkcm1fZ2VtX21tYXAoKSANCmRvZXMu
IEl0IHNob3VsZG4ndCBiZSBuZWNlc3NhcnkgaGVyZS4NCg0KPiArfQ0KPiArDQo+ICtpbnQz
Ml90IG52ZGxhX2dlbV9kbWFfYWRkcihzdHJ1Y3QgZHJtX2RldmljZSAqZGV2LCBzdHJ1Y3Qg
ZHJtX2ZpbGUgKmZpbGUsDQo+ICsJCQkJCQkgICB1aW50MzJfdCBmZCwgZG1hX2FkZHJfdCAq
YWRkcikNCj4gK3sNCj4gKwlpbnQzMl90IHJldDsNCj4gKwl1aW50MzJfdCBoYW5kbGU7DQo+
ICsJc3RydWN0IG52ZGxhX2dlbV9vYmplY3QgKm5vYmo7DQo+ICsJc3RydWN0IGRybV9nZW1f
b2JqZWN0ICpkb2JqOw0KPiArDQo+ICsJcmV0ID0gZHJtX2dlbV9wcmltZV9mZF90b19oYW5k
bGUoZGV2LCBmaWxlLCBmZCwgJmhhbmRsZSk7DQo+ICsJaWYgKHJldCkNCj4gKwkJcmV0dXJu
IHJldDsNCj4gKw0KPiArCWRvYmogPSBkcm1fZ2VtX29iamVjdF9sb29rdXAoZmlsZSwgaGFu
ZGxlKTsNCj4gKwlpZiAoIWRvYmopDQo+ICsJCXJldHVybiAtRUlOVkFMOw0KPiArDQo+ICsJ
bm9iaiA9IHRvX252ZGxhX29iaihkb2JqKTsNCj4gKw0KPiArCSphZGRyID0gbm9iai0+ZG1h
X2FkZHI7DQo+ICsNCj4gKwlkcm1fZ2VtX29iamVjdF9wdXQoZG9iaik7DQo+ICsNCj4gKwly
ZXR1cm4gMDsNCj4gK30NCj4gKw0KPiArc3RhdGljIGludDMyX3QgbnZkbGFfZ2VtX21hcF9v
ZmZzZXQoc3RydWN0IGRybV9kZXZpY2UgKmRybSwgdm9pZCAqZGF0YSwNCj4gKwkJCQkJCQkJ
CXN0cnVjdCBkcm1fZmlsZSAqZmlsZSkNCj4gK3sNCj4gKwlzdHJ1Y3QgbnZkbGFfZ2VtX21h
cF9vZmZzZXRfYXJncyAqYXJncyA9IGRhdGE7DQo+ICsNCj4gKwlyZXR1cm4gZHJtX2dlbV9k
dW1iX21hcF9vZmZzZXQoZmlsZSwgZHJtLCBhcmdzLT5oYW5kbGUsDQo+ICsJCQkJCQkJCSAg
ICZhcmdzLT5vZmZzZXQpOw0KPiArfQ0KPiArDQo+ICtzdGF0aWMgY29uc3Qgc3RydWN0IGZp
bGVfb3BlcmF0aW9ucyBudmRsYV9kcm1fZm9wcyA9IHsNCj4gKwkub3duZXIgPSBUSElTX01P
RFVMRSwNCj4gKwkub3BlbiA9IGRybV9vcGVuLA0KPiArCS5yZWxlYXNlID0gZHJtX3JlbGVh
c2UsDQo+ICsJLnVubG9ja2VkX2lvY3RsID0gZHJtX2lvY3RsLA0KPiArCS5tbWFwID0gbnZk
bGFfZHJtX2dlbV9tbWFwLA0KDQpJdCBzaG91bGQgYmUgZmluZSB0byB1c2UgZHJtX2dlbV9t
bWFwIGhlcmUuIFRoZW4geW91IHNob3VsZCB1c2UgDQpERUZJTkVfRFJNX0dFTV9GT1BTKCkg
dG8gZGVmaW5lIG52ZGxhX2RybV9mb3BzLg0KDQo+ICsJLnBvbGwgPSBkcm1fcG9sbCwNCj4g
KwkucmVhZCA9IGRybV9yZWFkLA0KPiArI2lmZGVmIENPTkZJR19DT01QQVQNCj4gKwkuY29t
cGF0X2lvY3RsID0gZHJtX2NvbXBhdF9pb2N0bCwNCj4gKyNlbmRpZg0KPiArCS5sbHNlZWsg
PSBub29wX2xsc2VlaywNCj4gK307DQo+ICsNCj4gK3N0YXRpYyBjb25zdCBzdHJ1Y3QgZHJt
X2lvY3RsX2Rlc2MgbnZkbGFfZHJtX2lvY3Rsc1tdID0gew0KPiArCURSTV9JT0NUTF9ERUZf
RFJWKE5WRExBX1NVQk1JVCwgbnZkbGFfc3VibWl0LCBEUk1fUkVOREVSX0FMTE9XKSwNCj4g
KwlEUk1fSU9DVExfREVGX0RSVihOVkRMQV9HRU1fQ1JFQVRFLCBudmRsYV9nZW1fY3JlYXRl
LCBEUk1fUkVOREVSX0FMTE9XKSwNCj4gKwlEUk1fSU9DVExfREVGX0RSVihOVkRMQV9HRU1f
TU1BUCwgbnZkbGFfZ2VtX21hcF9vZmZzZXQsIERSTV9SRU5ERVJfQUxMT1cpLA0KPiArCS8q
IHVzZSBEUk1fSU9DVExfTU9ERV9ERVNUUk9ZX0RVTUIgdG8gZGVzdG9yeSAqLw0KPiArfTsN
Cj4gKw0KPiArc3RhdGljIHN0cnVjdCBkcm1fZHJpdmVyIG52ZGxhX2RybV9kcml2ZXIgPSB7
DQo+ICsJLmRyaXZlcl9mZWF0dXJlcyA9IERSSVZFUl9HRU0gfCBEUklWRVJfUkVOREVSLA0K
PiArDQo+ICsJLmlvY3RscyA9IG52ZGxhX2RybV9pb2N0bHMsDQo+ICsJLm51bV9pb2N0bHMg
PSBBUlJBWV9TSVpFKG52ZGxhX2RybV9pb2N0bHMpLA0KPiArCS5mb3BzID0gJm52ZGxhX2Ry
bV9mb3BzLA0KPiArCS5nZW1fcHJpbWVfbW1hcAkJPSBudmRsYV9kcm1fZ2VtX21tYXBfYnVm
LA0KDQpVc2UgZHJtX2dlbV9wcmltZV9tbWFwKCkgaGVyZS4NCg0KU29tZSBjb250ZXh0OiB0
aGUgc2l0dWF0aW9uIHdpdGggdGhlc2UgbW1hcCBmdW5jdGlvbnMgaGFzIGJlZW4gY29uZnVz
aW5nIA0KYW5kIGluY29uc2lzdGVudCBhbW9uZyBETVIgZHJpdmVycy4gQnV0IHdlIGNsZWFu
ZWQgaXQgdXAgc28gdGhhdCB5b3UgDQpvbmx5IGhhdmUgdG8gcHJvdmlkZSBhIG1pbmltYWwg
aW1wbGVtZW50YXRpb24gb2Ygc3RydWN0IA0KZHJtX2dlbV9vYmplY3RfZnVuY3MubW1hcC4g
IEFsbCBvdGhlciBtbWFwIGNhbGxiYWNrcyBjYW4gdGhlbiBiZSBmaWxsZWQgDQp3aXRoIHN0
YW5kYXJkIERSTSBoZWxwZXJzLg0KDQo+ICsNCj4gKwkubmFtZSA9ICJudmRsYSIsDQo+ICsJ
LmRlc2MgPSAiTlZETEEgZHJpdmVyIiwNCj4gKwkuZGF0ZSA9ICIyMDE3MTAxNyIsDQo+ICsJ
Lm1ham9yID0gMCwNCj4gKwkubWlub3IgPSAwLA0KPiArCS5wYXRjaGxldmVsID0gMCwNCj4g
K307DQo+ICsNCj4gK2ludDMyX3QgbnZkbGFfZHJtX3Byb2JlKHN0cnVjdCBudmRsYV9kZXZp
Y2UgKm52ZGxhX2RldikNCj4gK3sNCj4gKwlpbnQzMl90IGVycjsNCj4gKwlzdHJ1Y3QgZHJt
X2RldmljZSAqZHJtOw0KPiArCXN0cnVjdCBkcm1fZHJpdmVyICpkcml2ZXIgPSAmbnZkbGFf
ZHJtX2RyaXZlcjsNCj4gKw0KPiArCWRybSA9IGRybV9kZXZfYWxsb2MoZHJpdmVyLCAmbnZk
bGFfZGV2LT5wZGV2LT5kZXYpOw0KPiArCWlmIChJU19FUlIoZHJtKSkNCj4gKwkJcmV0dXJu
IFBUUl9FUlIoZHJtKTsNCj4gKw0KPiArCW52ZGxhX2Rldi0+ZHJtID0gZHJtOw0KPiArDQo+
ICsJZXJyID0gZHJtX2Rldl9yZWdpc3Rlcihkcm0sIDApOw0KPiArCWlmIChlcnIgPCAwKQ0K
PiArCQlnb3RvIHVucmVmOw0KPiArDQo+ICsJcmV0dXJuIDA7DQo+ICsNCj4gK3VucmVmOg0K
PiArCWRybV9kZXZfcHV0KGRybSk7DQo+ICsJcmV0dXJuIGVycjsNCj4gK30NCj4gKw0KPiAr
dm9pZCBudmRsYV9kcm1fcmVtb3ZlKHN0cnVjdCBudmRsYV9kZXZpY2UgKm52ZGxhX2RldikN
Cj4gK3sNCj4gKwlkcm1fZGV2X3VucmVnaXN0ZXIobnZkbGFfZGV2LT5kcm0pOw0KPiArCWRy
bV9kZXZfcHV0KG52ZGxhX2Rldi0+ZHJtKTsNCj4gK30NCj4gZGlmZiAtLWdpdCBhL2RyaXZl
cnMvZ3B1L2RybS9udmRsYS9udmRsYV9pb2N0bC5oIGIvZHJpdmVycy9ncHUvZHJtL252ZGxh
L252ZGxhX2lvY3RsLmgNCj4gbmV3IGZpbGUgbW9kZSAxMDA2NDQNCj4gaW5kZXggMDAwMDAw
MDAwMDAwLi5lMjFkNDAwN2I3ZjQNCj4gLS0tIC9kZXYvbnVsbA0KPiArKysgYi9kcml2ZXJz
L2dwdS9kcm0vbnZkbGEvbnZkbGFfaW9jdGwuaA0KPiBAQCAtMCwwICsxLDk5IEBADQo+ICsv
KiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogR1BMLTIuMCBPUiBCU0QtMy1DbGF1c2UgKi8N
Cj4gKy8qDQo+ICsgKiBDb3B5cmlnaHQgKEMpIDIwMTctMjAxOCBOVklESUEgQ09SUE9SQVRJ
T04uDQo+ICsgKiBDb3B5cmlnaHQgKEMpIDIwMjIgQ2FpIEh1b3FpbmcNCj4gKyAqLw0KPiAr
DQo+ICsjaWZuZGVmIF9fTElOVVhfTlZETEFfSU9DVExfSA0KPiArI2RlZmluZSBfX0xJTlVY
X05WRExBX0lPQ1RMX0gNCj4gKw0KPiArI2luY2x1ZGUgPGxpbnV4L2lvY3RsLmg+DQo+ICsj
aW5jbHVkZSA8bGludXgvdHlwZXMuaD4NCj4gKw0KPiArI2lmICFkZWZpbmVkKF9fS0VSTkVM
X18pDQo+ICsjZGVmaW5lIF9fdXNlcg0KPiArI2VuZGlmDQo+ICsNCj4gKy8qKg0KPiArICog
c3RydWN0IG52ZGxhX21lbV9oYW5kbGUgc3RydWN0dXJlIGZvciBtZW1vcnkgaGFuZGxlcw0K
PiArICoNCj4gKyAqIEBoYW5kbGUJCWhhbmRsZSB0byBETUEgYnVmZmVyIGFsbG9jYXRlZCBp
biB1c2Vyc3BhY2UNCj4gKyAqIEByZXNlcnZlZAkJUmVzZXJ2ZWQgZm9yIHBhZGRpbmcNCj4g
KyAqIEBvZmZzZXQJCW9mZnNldCBpbiBieXRlcyBmcm9tIHN0YXJ0IGFkZHJlc3Mgb2YgYnVm
ZmVyDQo+ICsgKg0KPiArICovDQo+ICtzdHJ1Y3QgbnZkbGFfbWVtX2hhbmRsZSB7DQo+ICsJ
X191MzIgaGFuZGxlOw0KPiArCV9fdTMyIHJlc2VydmVkOw0KPiArCV9fdTY0IG9mZnNldDsN
Cj4gK307DQo+ICsNCj4gKy8qKg0KPiArICogc3RydWN0IG52ZGxhX2lvY3RsX3N1Ym1pdF90
YXNrIHN0cnVjdHVyZSBmb3Igc2luZ2xlIHRhc2sgaW5mb3JtYXRpb24NCj4gKyAqDQo+ICsg
KiBAbnVtX2FkZHJlc3NlcwkJdG90YWwgbnVtYmVyIG9mIGVudHJpZXMgaW4gYWRkcmVzc19s
aXN0DQo+ICsgKiBAcmVzZXJ2ZWQJCQlSZXNlcnZlZCBmb3IgcGFkZGluZw0KPiArICogQGFk
ZHJlc3NfbGlzdAkJcG9pbnRlciB0byBhcnJheSBvZiBzdHJ1Y3QgbnZkbGFfbWVtX2hhbmRs
ZQ0KPiArICoNCj4gKyAqLw0KPiArc3RydWN0IG52ZGxhX2lvY3RsX3N1Ym1pdF90YXNrIHsN
Cj4gKyNkZWZpbmUgTlZETEFfTUFYX0JVRkZFUlNfUEVSX1RBU0sgKDYxNDQpDQo+ICsJX191
MzIgbnVtX2FkZHJlc3NlczsNCj4gKyNkZWZpbmUgTlZETEFfTk9fVElNRU9VVCAgICAoMHhm
ZmZmZmZmZikNCj4gKwlfX3UzMiB0aW1lb3V0Ow0KPiArCV9fdTY0IGFkZHJlc3NfbGlzdDsN
Cj4gK307DQo+ICsNCj4gKy8qKg0KPiArICogc3RydWN0IG52ZGxhX3N1Ym1pdF9hcmdzIHN0
cnVjdHVyZSBmb3IgdGFzayBzdWJtaXQNCj4gKyAqDQo+ICsgKiBAdGFza3MJCXBvaW50ZXIg
dG8gYXJyYXkgb2Ygc3RydWN0IG52ZGxhX2lvY3RsX3N1Ym1pdF90YXNrDQo+ICsgKiBAbnVt
X3Rhc2tzCQludW1iZXIgb2YgZW50cmllcyBpbiB0YXNrcw0KPiArICogQGZsYWdzCQlmbGFn
cyBmb3IgdGFzayBzdWJtaXQsIG5vIGZsYWdzIGRlZmluZWQgeWV0DQo+ICsgKiBAdmVyc2lv
bgkJdmVyc2lvbiBvZiB0YXNrIHN0cnVjdHVyZQ0KPiArICoNCj4gKyAqLw0KPiArc3RydWN0
IG52ZGxhX3N1Ym1pdF9hcmdzIHsNCj4gKwlfX3U2NCB0YXNrczsNCj4gKwlfX3UxNiBudW1f
dGFza3M7DQo+ICsjZGVmaW5lIE5WRExBX01BWF9UQVNLU19QRVJfU1VCTUlUCTI0DQo+ICsj
ZGVmaW5lIE5WRExBX1NVQk1JVF9GTEFHU19BVE9NSUMJKDEgPDwgMCkNCj4gKwlfX3UxNiBm
bGFnczsNCj4gKwlfX3UzMiB2ZXJzaW9uOw0KPiArfTsNCj4gKw0KPiArLyoqDQo+ICsgKiBz
dHJ1Y3QgbnZkbGFfZ2VtX2NyZWF0ZV9hcmdzIGZvciBhbGxvY2F0aW5nIERNQSBidWZmZXIg
dGhyb3VnaCBHRU0NCj4gKyAqDQo+ICsgKiBAaGFuZGxlCQloYW5kbGUgdXBkYXRlZCBieSBr
ZXJuZWwgYWZ0ZXIgYWxsb2NhdGlvbg0KPiArICogQGZsYWdzCQlpbXBsZW1lbnRhdGlvbiBz
cGVjaWZpYyBmbGFncw0KPiArICogQHNpemUJCXNpemUgb2YgYnVmZmVyIHRvIGFsbG9jYXRl
DQo+ICsgKi8NCj4gK3N0cnVjdCBudmRsYV9nZW1fY3JlYXRlX2FyZ3Mgew0KPiArCV9fdTMy
IGhhbmRsZTsNCj4gKwlfX3UzMiBmbGFnczsNCj4gKwlfX3U2NCBzaXplOw0KPiArfTsNCj4g
Kw0KPiArLyoqDQo+ICsgKiBzdHJ1Y3QgbnZkbGFfZ2VtX21hcF9vZmZzZXRfYXJncyBmb3Ig
bWFwcGluZyBETUEgYnVmZmVyDQo+ICsgKg0KPiArICogQGhhbmRsZQkJaGFuZGxlIG9mIHRo
ZSBidWZmZXINCj4gKyAqIEByZXNlcnZlZAkJcmVzZXJ2ZWQgZm9yIHBhZGRpbmcNCj4gKyAq
IEBvZmZzZXQJCW9mZnNldCB1cGRhdGVkIGJ5IGtlcm5lbCBhZnRlciBtYXBwaW5nDQo+ICsg
Ki8NCj4gK3N0cnVjdCBudmRsYV9nZW1fbWFwX29mZnNldF9hcmdzIHsNCj4gKwlfX3UzMiBo
YW5kbGU7DQo+ICsJX191MzIgcmVzZXJ2ZWQ7DQo+ICsJX191NjQgb2Zmc2V0Ow0KPiArfTsN
Cj4gKw0KPiArI2RlZmluZSBEUk1fTlZETEFfU1VCTUlUCQkweDAwDQo+ICsjZGVmaW5lIERS
TV9OVkRMQV9HRU1fQ1JFQVRFCQkweDAxDQo+ICsjZGVmaW5lIERSTV9OVkRMQV9HRU1fTU1B
UAkJMHgwMg0KPiArDQo+ICsjZGVmaW5lIERSTV9JT0NUTF9OVkRMQV9TVUJNSVQgRFJNX0lP
V1IoRFJNX0NPTU1BTkRfQkFTRSArIERSTV9OVkRMQV9TVUJNSVQsIHN0cnVjdCBudmRsYV9z
dWJtaXRfYXJncykNCj4gKyNkZWZpbmUgRFJNX0lPQ1RMX05WRExBX0dFTV9DUkVBVEUgRFJN
X0lPV1IoRFJNX0NPTU1BTkRfQkFTRSArIERSTV9OVkRMQV9HRU1fQ1JFQVRFLCBzdHJ1Y3Qg
bnZkbGFfZ2VtX2NyZWF0ZV9hcmdzKQ0KPiArI2RlZmluZSBEUk1fSU9DVExfTlZETEFfR0VN
X01NQVAgRFJNX0lPV1IoRFJNX0NPTU1BTkRfQkFTRSArIERSTV9OVkRMQV9HRU1fTU1BUCwg
c3RydWN0IG52ZGxhX2dlbV9tYXBfb2Zmc2V0X2FyZ3MpDQo+ICsNCj4gKyNlbmRpZg0KPiBk
aWZmIC0tZ2l0IGEvZHJpdmVycy9ncHUvZHJtL252ZGxhL252ZGxhX3BkcC5jIGIvZHJpdmVy
cy9ncHUvZHJtL252ZGxhL252ZGxhX3BkcC5jDQo+IG5ldyBmaWxlIG1vZGUgMTAwNjQ0DQo+
IGluZGV4IDAwMDAwMDAwMDAwMC4uMmVkMGFjMGYwMjFhDQo+IC0tLSAvZGV2L251bGwNCj4g
KysrIGIvZHJpdmVycy9ncHUvZHJtL252ZGxhL252ZGxhX3BkcC5jDQo+IEBAIC0wLDAgKzEs
NDQ2IEBADQo+ICsvLyBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQlNELTMtQ2xhdXNlIE9S
IEdQTC0yLjANCj4gKy8qDQo+ICsgKiBDb3B5cmlnaHQgKEMpIDIwMTctMjAxOCBOVklESUEg
Q09SUE9SQVRJT04NCj4gKyAqIENvcHlyaWdodCAoQykgMjAyMiBDYWkgSHVvcWluZw0KPiAr
ICovDQo+ICsNCj4gKyNpbmNsdWRlICJudmRsYV9kcm0uaCINCj4gKyNpbmNsdWRlICJudmRs
YV9yZWcuaCINCj4gKyNpbmNsdWRlICJudmRsYV9jb21tb24uaCINCj4gKyNpbmNsdWRlICJu
dmRsYV9lbmdpbmUuaCINCj4gKw0KPiArI2RlZmluZSBNQVhfU1BMSVRfTlVNCTY0DQo+ICsv
LyNkZWZpbmUgQVJSQVlfU0laRShhKQkoc2l6ZW9mKGEpIC8gc2l6ZW9mKChhWzBdKSkpDQo+
ICsNCj4gK3N0YXRpYyBjb25zdCB1aW50OF90IG1hcF9yYW1bXSA9IHsNCj4gKwlGSUVMRF9F
TlVNKFBEUF9SRE1BX0RfU1JDX1JBTV9DRkdfMCwgU1JDX1JBTV9UWVBFLCBNQyksDQo+ICsJ
RklFTERfRU5VTShQRFBfUkRNQV9EX1NSQ19SQU1fQ0ZHXzAsIFNSQ19SQU1fVFlQRSwgQ1Yp
LA0KPiArfTsNCj4gKw0KPiArc3RhdGljIGNvbnN0IHVpbnQ4X3QgbWFwX3Bvb2xbXSA9IHsN
Cj4gKwlGSUVMRF9FTlVNKFBEUF9EX09QRVJBVElPTl9NT0RFX0NGR18wLA0KPiArCQkJUE9P
TElOR19NRVRIT0QsIFBPT0xJTkdfTUVUSE9EX0FWRVJBR0UpLA0KPiArCUZJRUxEX0VOVU0o
UERQX0RfT1BFUkFUSU9OX01PREVfQ0ZHXzAsDQo+ICsJCQlQT09MSU5HX01FVEhPRCwgUE9P
TElOR19NRVRIT0RfTUFYKSwNCj4gKwlGSUVMRF9FTlVNKFBEUF9EX09QRVJBVElPTl9NT0RF
X0NGR18wLA0KPiArCQkJUE9PTElOR19NRVRIT0QsIFBPT0xJTkdfTUVUSE9EX01JTiksDQo+
ICt9Ow0KPiArDQo+ICtzdGF0aWMgY29uc3QgdWludDhfdCBtYXBfcHJlY2lzaW9uW10gPSB7
DQo+ICsJRklFTERfRU5VTShQRFBfRF9EQVRBX0ZPUk1BVF8wLCBJTlBVVF9EQVRBLCBJTlQ4
KSwNCj4gKwlGSUVMRF9FTlVNKFBEUF9EX0RBVEFfRk9STUFUXzAsIElOUFVUX0RBVEEsIElO
VDE2KSwNCj4gKwlGSUVMRF9FTlVNKFBEUF9EX0RBVEFfRk9STUFUXzAsIElOUFVUX0RBVEEs
IEZQMTYpLA0KPiArfTsNCj4gKw0KPiArc3RhdGljIGNvbnN0IHVpbnQ4X3QgbWFwX3Bvb2xf
a2VybmVsW10gPSB7DQo+ICsJRklFTERfRU5VTShQRFBfRF9QT09MSU5HX0tFUk5FTF9DRkdf
MCwgS0VSTkVMX1dJRFRILCBLRVJORUxfV0lEVEhfMSksDQo+ICsJRklFTERfRU5VTShQRFBf
RF9QT09MSU5HX0tFUk5FTF9DRkdfMCwgS0VSTkVMX1dJRFRILCBLRVJORUxfV0lEVEhfMiks
DQo+ICsJRklFTERfRU5VTShQRFBfRF9QT09MSU5HX0tFUk5FTF9DRkdfMCwgS0VSTkVMX1dJ
RFRILCBLRVJORUxfV0lEVEhfMyksDQo+ICsJRklFTERfRU5VTShQRFBfRF9QT09MSU5HX0tF
Uk5FTF9DRkdfMCwgS0VSTkVMX1dJRFRILCBLRVJORUxfV0lEVEhfNCksDQo+ICsJRklFTERf
RU5VTShQRFBfRF9QT09MSU5HX0tFUk5FTF9DRkdfMCwgS0VSTkVMX1dJRFRILCBLRVJORUxf
V0lEVEhfNSksDQo+ICsJRklFTERfRU5VTShQRFBfRF9QT09MSU5HX0tFUk5FTF9DRkdfMCwg
S0VSTkVMX1dJRFRILCBLRVJORUxfV0lEVEhfNiksDQo+ICsJRklFTERfRU5VTShQRFBfRF9Q
T09MSU5HX0tFUk5FTF9DRkdfMCwgS0VSTkVMX1dJRFRILCBLRVJORUxfV0lEVEhfNyksDQo+
ICsJRklFTERfRU5VTShQRFBfRF9QT09MSU5HX0tFUk5FTF9DRkdfMCwgS0VSTkVMX1dJRFRI
LCBLRVJORUxfV0lEVEhfOCksDQo+ICt9Ow0KPiArDQo+ICsvKiBUaGUgcmVjaXByb2NhbCBv
ZiBrZXJuZWwgd2lkdGg6IDEvMSwgMS8yLCAxLzMsIC4uLiAqLw0KPiArc3RhdGljIGNvbnN0
IHVpbnQzMl90IHJlY2lwX2tlcm5lbF9zaXplWzJdWzhdID0gew0KPiArCS8qDQo+ICsJICog
SU5UOC8xNg0KPiArCSAqIDEgICAgICAxLzIgICAgIDEvMyAgICAgMS80ICAgICAxLzUgICAg
IDEvNiAgICAgMS83ICAgICAxLzgNCj4gKwkgKi8NCj4gKwl7MHgxMDAwMCwgMHg4MDAwLCAw
eDU1NTUsIDB4NDAwMCwgMHgzMzMzLCAweDJhYWEsIDB4MjQ5MiwgMHgyMDAwfSwNCj4gKwl7
MHg3YzAwLCAweDc4MDAsIDB4NzU1NSwgIDB4NzQwMCwgMHg3MjY2LCAweDcxNTUsIDB4NzA5
MiwgMHg3MDAwfSwNCj4gK307DQo+ICsNCj4gK3N0YXRpYyB1aW50MzJfdA0KPiArZ2V0X2Zs
eV9tb2RlKHVpbnQ4X3QgdHlwZSkNCj4gK3sNCj4gKwl1aW50MzJfdCB2YWw7DQo+ICsNCj4g
Kwl2YWwgPSB0eXBlID09IERMQV9NRU1fSFcgPw0KPiArCQkJRklFTERfRU5VTShQRFBfRF9P
UEVSQVRJT05fTU9ERV9DRkdfMCwNCj4gKwkJCQkJCUZMWUlOR19NT0RFLCBPTl9GTFlJTkcp
IDoNCj4gKwkJCUZJRUxEX0VOVU0oUERQX0RfT1BFUkFUSU9OX01PREVfQ0ZHXzAsDQo+ICsJ
CQkJCQlGTFlJTkdfTU9ERSwgT0ZGX0ZMWUlORyk7DQo+ICsNCj4gKwlyZXR1cm4gdmFsOw0K
PiArfQ0KPiArDQo+ICt2b2lkDQo+ICtkbGFfcGRwX3NldF9wcm9kdWNlcihzdHJ1Y3QgZGxh
X2VuZ2luZSAqZW5naW5lLCBpbnQzMl90IGdyb3VwX2lkLCBpbnQzMl90IHJkbWFfZ3JvdXBf
aWQpDQo+ICt7DQo+ICsJdWludDMyX3QgcmVnOw0KPiArDQo+ICsJcHJfZGVidWcoImdyb3Vw
IGlkICVkIHJkbWEgaWQgJWRcbiIsIGdyb3VwX2lkLCByZG1hX2dyb3VwX2lkKTsNCj4gKw0K
PiArCXJlZyA9IGdyb3VwX2lkIDw8IFNISUZUKFBEUF9TX1BPSU5URVJfMCwgUFJPRFVDRVIp
Ow0KPiArCXBkcF9yZWdfd3JpdGUoZW5naW5lLCBTX1BPSU5URVIsIHJlZyk7DQo+ICsNCj4g
KwlyZWcgPSByZG1hX2dyb3VwX2lkIDw8IFNISUZUKFBEUF9SRE1BX1NfUE9JTlRFUl8wLCBQ
Uk9EVUNFUik7DQo+ICsJcGRwX3JkbWFfcmVnX3dyaXRlKGVuZ2luZSwgU19QT0lOVEVSLCBy
ZWcpOw0KPiArfQ0KPiArDQo+ICtpbnQNCj4gK2RsYV9wZHBfZW5hYmxlKHN0cnVjdCBkbGFf
ZW5naW5lICplbmdpbmUsIHN0cnVjdCBkbGFfcHJvY2Vzc29yX2dyb3VwICpncm91cCkNCj4g
K3sNCj4gKwlpbnQzMl90IHJldCA9IDA7DQo+ICsJdWludDMyX3QgcmVnOw0KPiArDQo+ICsJ
aWYgKCFncm91cCkgew0KPiArCQlyZXQgPSAtRUlOVkFMOw0KPiArCQlnb3RvIGV4aXQ7DQo+
ICsJfQ0KPiArDQo+ICsJcHJfZGVidWcoInJkbWEgbmVlZGVkICV1XG4iLCBncm91cC0+aXNf
cmRtYV9uZWVkZWQpOw0KPiArDQo+ICsJLyoqDQo+ICsJICogZW5hYmxlIGFsbCBzdWItbW9k
dWxlcw0KPiArCSAqLw0KPiArCWlmIChncm91cC0+aXNfcmRtYV9uZWVkZWQpIHsNCj4gKwkJ
cmVnID0gRklFTERfRU5VTShQRFBfUkRNQV9EX09QX0VOQUJMRV8wLCBPUF9FTiwgRU5BQkxF
KTsNCj4gKwkJcGRwX3JkbWFfcmVnX3dyaXRlKGVuZ2luZSwgRF9PUF9FTkFCTEUsIHJlZyk7
DQo+ICsJfQ0KPiArCXJlZyA9IEZJRUxEX0VOVU0oUERQX0RfT1BfRU5BQkxFXzAsIE9QX0VO
LCBFTkFCTEUpOw0KPiArCXBkcF9yZWdfd3JpdGUoZW5naW5lLCBEX09QX0VOQUJMRSwgcmVn
KTsNCj4gKw0KPiArZXhpdDoNCj4gKwlyZXR1cm4gcmV0Ow0KPiArfQ0KPiArDQo+ICt2b2lk
DQo+ICtkbGFfcGRwX3JkbWFfY2hlY2soc3RydWN0IGRsYV9wcm9jZXNzb3JfZ3JvdXAgKmdy
b3VwKQ0KPiArew0KPiArCXN0cnVjdCBkbGFfcGRwX3N1cmZhY2VfZGVzYyAqcGRwX3N1cmZh
Y2U7DQo+ICsNCj4gKwlwZHBfc3VyZmFjZSA9ICZncm91cC0+c3VyZmFjZV9kZXNjLT5wZHBf
c3VyZmFjZTsNCj4gKw0KPiArCWdyb3VwLT5pc19yZG1hX25lZWRlZCA9IDA7DQo+ICsNCj4g
KwlpZiAocGRwX3N1cmZhY2UtPnNyY19kYXRhLnR5cGUgIT0gRExBX01FTV9IVykNCj4gKwkJ
Z3JvdXAtPmlzX3JkbWFfbmVlZGVkID0gMTsNCj4gK30NCj4gKw0KPiArc3RhdGljIGludA0K
PiArdmFsaWRhdGVfc3RyaWRlcyh1aW50OF90IHN0cmlkZV94LCB1aW50OF90IHN0cmlkZV95
KQ0KPiArew0KPiArCWludDMyX3QgcmV0ID0gMDsNCj4gKw0KPiArCWlmIChzdHJpZGVfeCA8
IDEgfHwgc3RyaWRlX3kgPCAxIHx8IHN0cmlkZV94ID4gOCB8fCBzdHJpZGVfeSA+IDgpIHsN
Cj4gKwkJcHJfZXJyKCJJbnZhbGlkIFN0cmlkZSAoeFslZF0sIHlbJWRdKVxuIiwgc3RyaWRl
X3gsIHN0cmlkZV95KTsNCj4gKwkJcmV0ID0gLUVJTlZBTDsNCj4gKwl9DQo+ICsNCj4gKwly
ZXR1cm4gcmV0Ow0KPiArfQ0KPiArDQo+ICtzdGF0aWMgaW50DQo+ICt2YWlsZGF0ZV9wZHBf
Y29uZmlncyhzdHJ1Y3QgZGxhX3Byb2Nlc3Nvcl9ncm91cCAqZ3JvdXApDQo+ICt7DQo+ICsJ
aW50MzJfdCByZXQgPSAwOw0KPiArCXN0cnVjdCBkbGFfcGRwX29wX2Rlc2MgKnBkcF9vcDsN
Cj4gKwlzdHJ1Y3QgZGxhX3BkcF9zdXJmYWNlX2Rlc2MgKnBkcF9zdXJmYWNlOw0KPiArDQo+
ICsJcGRwX29wID0gJmdyb3VwLT5vcGVyYXRpb25fZGVzYy0+cGRwX29wOw0KPiArCXBkcF9z
dXJmYWNlID0gJmdyb3VwLT5zdXJmYWNlX2Rlc2MtPnBkcF9zdXJmYWNlOw0KPiArDQo+ICsJ
aWYgKHBkcF9zdXJmYWNlLT5kc3RfZGF0YS50eXBlID09IERMQV9NRU1fSFcpIHsNCj4gKwkJ
cHJfZXJyKCJEZXN0aW5hdGlvbiBidWZmZXIgZm9yIFBEUCBoYXMgdG8gYmUgZWl0aGVyIE1D
IG9yIENWIik7DQo+ICsJCXJldCA9IC1FSU5WQUw7DQo+ICsJCWdvdG8gZXhpdDsNCj4gKwl9
DQo+ICsNCj4gKwlyZXQgPSB2YWxpZGF0ZV9kYXRhX2N1YmUocGRwX3N1cmZhY2UtPnNyY19k
YXRhLCBwZHBfc3VyZmFjZS0+ZHN0X2RhdGEsDQo+ICsJCQkJCQkJCURMQV9NRU1fSFcpOw0K
PiArCWlmIChyZXQpDQo+ICsJCWdvdG8gZXhpdDsNCj4gKw0KPiArCXJldCA9IHZhbGlkYXRl
X3ByZWNpc2lvbihwZHBfb3AtPnByZWNpc2lvbiwgQVJSQVlfU0laRShtYXBfcHJlY2lzaW9u
KSk7DQo+ICsJaWYgKHJldCkNCj4gKwkJZ290byBleGl0Ow0KPiArDQo+ICsJcmV0ID0gdmFs
aWRhdGVfc3RyaWRlcyhwZHBfb3AtPnN0cmlkZV94LCBwZHBfb3AtPnN0cmlkZV95KTsNCj4g
KwlpZiAocmV0KQ0KPiArCQlnb3RvIGV4aXQ7DQo+ICsNCj4gKwlpZiAocGRwX29wLT5zcGxp
dF9udW0gPiBNQVhfU1BMSVRfTlVNKSB7DQo+ICsJCXByX2VycigiSW52YWxpZCBzcGxpdF9u
dW06ICV1XG4iLCBwZHBfb3AtPnNwbGl0X251bSk7DQo+ICsJCXJldCA9IC1FSU5WQUw7DQo+
ICsJCWdvdG8gZXhpdDsNCj4gKwl9DQo+ICsNCj4gKwlpZiAocGRwX29wLT5wb29sX3dpZHRo
ID49IEFSUkFZX1NJWkUobWFwX3Bvb2xfa2VybmVsKSkgew0KPiArCQlwcl9lcnIoIkludmFs
aWQgcG9vbF93aWR0aDogJXVcbiIsIHBkcF9vcC0+cG9vbF93aWR0aCk7DQo+ICsJCXJldCA9
IC1FSU5WQUw7DQo+ICsJCWdvdG8gZXhpdDsNCj4gKwl9DQo+ICsNCj4gKwlpZiAocGRwX29w
LT5wb29sX2hlaWdodCA+PSBBUlJBWV9TSVpFKG1hcF9wb29sX2tlcm5lbCkpIHsNCj4gKwkJ
cHJfZXJyKCJJbnZhbGlkIHBvb2xfaGVpZ2h0OiAldVxuIiwgcGRwX29wLT5wb29sX2hlaWdo
dCk7DQo+ICsJCXJldCA9IC1FSU5WQUw7DQo+ICsJCWdvdG8gZXhpdDsNCj4gKwl9DQo+ICsN
Cj4gKwlpZiAocGRwX29wLT5wb29sX21vZGUgPj0gQVJSQVlfU0laRShtYXBfcG9vbCkpIHsN
Cj4gKwkJcHJfZXJyKCJJbnZhbGlkIHBvb2xfbW9kZTogJXVcbiIsIHBkcF9vcC0+cG9vbF9t
b2RlKTsNCj4gKwkJcmV0ID0gLUVJTlZBTDsNCj4gKwkJZ290byBleGl0Ow0KPiArCX0NCj4g
Kw0KPiArZXhpdDoNCj4gKwlyZXR1cm4gcmV0Ow0KPiArfQ0KPiArDQo+ICtzdGF0aWMgaW50
DQo+ICtwcm9jZXNzb3JfcGRwX3Byb2dyYW0oc3RydWN0IGRsYV9lbmdpbmUgKmVuZ2luZSwg
c3RydWN0IGRsYV9wcm9jZXNzb3JfZ3JvdXAgKmdyb3VwKQ0KPiArew0KPiArCWludDMyX3Qg
cmV0ID0gMDsNCj4gKwl1aW50MzJfdCByZWcsIGhpZ2gsIGxvdzsNCj4gKwl1aW50NjRfdCBp
bnB1dF9hZGRyZXNzID0gMDsNCj4gKwl1aW50NjRfdCBvdXRwdXRfYWRkcmVzcyA9IDA7DQo+
ICsJc3RydWN0IGRsYV9wZHBfb3BfZGVzYyAqcGRwX29wOw0KPiArCXN0cnVjdCBkbGFfcGRw
X3N1cmZhY2VfZGVzYyAqcGRwX3N1cmZhY2U7DQo+ICsNCj4gKwlwZHBfb3AgPSAmZ3JvdXAt
Pm9wZXJhdGlvbl9kZXNjLT5wZHBfb3A7DQo+ICsJcGRwX3N1cmZhY2UgPSAmZ3JvdXAtPnN1
cmZhY2VfZGVzYy0+cGRwX3N1cmZhY2U7DQo+ICsNCj4gKwlyZXQgPSB2YWlsZGF0ZV9wZHBf
Y29uZmlncyhncm91cCk7DQo+ICsJaWYgKHJldCkNCj4gKwkJZ290byBleGl0Ow0KPiArDQo+
ICsJcmV0ID0gZGxhX3JlYWRfaW5wdXRfYWRkcmVzcyhlbmdpbmUsICZwZHBfc3VyZmFjZS0+
c3JjX2RhdGEsDQo+ICsJCQkJCSZpbnB1dF9hZGRyZXNzLA0KPiArCQkJCQlncm91cC0+b3Bf
ZGVzYy0+aW5kZXgsDQo+ICsJCQkJCWdyb3VwLT5yb2lfaW5kZXgsDQo+ICsJCQkJCTEpOw0K
PiArCWlmIChyZXQpDQo+ICsJCWdvdG8gZXhpdDsNCj4gKw0KPiArCWlmIChwZHBfc3VyZmFj
ZS0+ZHN0X2RhdGEuYWRkcmVzcyAhPSAtMSkNCj4gKwkJZGxhX2dldF9kbWFfY3ViZV9hZGRy
ZXNzKGVuZ2luZS0+ZHJpdmVyX2NvbnRleHQsDQo+ICsJCQkJCWVuZ2luZS0+dGFzay0+dGFz
a19kYXRhLA0KPiArCQkJCQlwZHBfc3VyZmFjZS0+ZHN0X2RhdGEuYWRkcmVzcywNCj4gKwkJ
CQkJcGRwX3N1cmZhY2UtPmRzdF9kYXRhLm9mZnNldCwNCj4gKwkJCQkJKHZvaWQgKikmb3V0
cHV0X2FkZHJlc3MsDQo+ICsJCQkJCURFU1RJTkFUSU9OX0RNQSk7DQo+ICsNCj4gKwlpZiAo
cGRwX3N1cmZhY2UtPnNyY19kYXRhLnR5cGUgIT0gRExBX01FTV9IVykgew0KPiArCQkvKiBQ
RFAgUkRNQSAqLw0KPiArCQlwZHBfcmRtYV9yZWdfd3JpdGUoZW5naW5lLCBEX0RBVEFfQ1VC
RV9JTl9XSURUSCwNCj4gKwkJCQlwZHBfc3VyZmFjZS0+c3JjX2RhdGEud2lkdGggLSAxKTsN
Cj4gKwkJcGRwX3JkbWFfcmVnX3dyaXRlKGVuZ2luZSwgRF9EQVRBX0NVQkVfSU5fSEVJR0hU
LA0KPiArCQkJCXBkcF9zdXJmYWNlLT5zcmNfZGF0YS5oZWlnaHQgLSAxKTsNCj4gKwkJcGRw
X3JkbWFfcmVnX3dyaXRlKGVuZ2luZSwgRF9EQVRBX0NVQkVfSU5fQ0hBTk5FTCwNCj4gKwkJ
CQlwZHBfc3VyZmFjZS0+c3JjX2RhdGEuY2hhbm5lbCAtIDEpOw0KPiArDQo+ICsJCWhpZ2gg
PSB1cHBlcl8zMl9iaXRzKGlucHV0X2FkZHJlc3MpOw0KPiArCQlsb3cgID0gbG93ZXJfMzJf
Yml0cyhpbnB1dF9hZGRyZXNzKTsNCj4gKwkJcGRwX3JkbWFfcmVnX3dyaXRlKGVuZ2luZSwg
RF9TUkNfQkFTRV9BRERSX0hJR0gsIGhpZ2gpOw0KPiArCQlwZHBfcmRtYV9yZWdfd3JpdGUo
ZW5naW5lLCBEX1NSQ19CQVNFX0FERFJfTE9XLCBsb3cpOw0KPiArCQlwZHBfcmRtYV9yZWdf
d3JpdGUoZW5naW5lLCBEX1NSQ19MSU5FX1NUUklERSwNCj4gKwkJCQlwZHBfc3VyZmFjZS0+
c3JjX2RhdGEubGluZV9zdHJpZGUpOw0KPiArCQlwZHBfcmRtYV9yZWdfd3JpdGUoZW5naW5l
LCBEX1NSQ19TVVJGQUNFX1NUUklERSwNCj4gKwkJCQlwZHBfc3VyZmFjZS0+c3JjX2RhdGEu
c3VyZl9zdHJpZGUpOw0KPiArDQo+ICsJCXJlZyA9IChtYXBfcHJlY2lzaW9uW3BkcF9vcC0+
cHJlY2lzaW9uXQ0KPiArCQkJPDwgU0hJRlQoUERQX1JETUFfRF9EQVRBX0ZPUk1BVF8wLCBJ
TlBVVF9EQVRBKSk7DQo+ICsJCXBkcF9yZG1hX3JlZ193cml0ZShlbmdpbmUsIERfREFUQV9G
T1JNQVQsIHJlZyk7DQo+ICsNCj4gKwkJcmVnID0gbWFwX3JhbVtwZHBfc3VyZmFjZS0+c3Jj
X2RhdGEudHlwZV0NCj4gKwkJCTw8IFNISUZUKFBEUF9SRE1BX0RfU1JDX1JBTV9DRkdfMCwg
U1JDX1JBTV9UWVBFKTsNCj4gKwkJcGRwX3JkbWFfcmVnX3dyaXRlKGVuZ2luZSwgRF9TUkNf
UkFNX0NGRywgcmVnKTsNCj4gKw0KPiArCQlyZWcgPSAoKHBkcF9vcC0+c3BsaXRfbnVtIC0g
MSkNCj4gKwkJCSA8PCBTSElGVChQRFBfUkRNQV9EX09QRVJBVElPTl9NT0RFX0NGR18wLCBT
UExJVF9OVU0pKTsNCj4gKwkJcGRwX3JkbWFfcmVnX3dyaXRlKGVuZ2luZSwgRF9PUEVSQVRJ
T05fTU9ERV9DRkcsIHJlZyk7DQo+ICsNCj4gKwkJcmVnID0gKG1hcF9wb29sX2tlcm5lbFtw
ZHBfb3AtPnBvb2xfd2lkdGhdDQo+ICsJCQk8PCBTSElGVChQRFBfUkRNQV9EX1BPT0xJTkdf
S0VSTkVMX0NGR18wLA0KPiArCQkJCQkJCUtFUk5FTF9XSURUSCkpIHwNCj4gKwkJCSgocGRw
X29wLT5zdHJpZGVfeCAtIDEpDQo+ICsJCQk8PCBTSElGVChQRFBfUkRNQV9EX1BPT0xJTkdf
S0VSTkVMX0NGR18wLA0KPiArCQkJCQkJCUtFUk5FTF9TVFJJREVfV0lEVEgpKTsNCj4gKwkJ
cGRwX3JkbWFfcmVnX3dyaXRlKGVuZ2luZSwgRF9QT09MSU5HX0tFUk5FTF9DRkcsIHJlZyk7
DQo+ICsNCj4gKwkJcmVnID0gKHBkcF9vcC0+cGFkX2xlZnQNCj4gKwkJCTw8IFNISUZUKFBE
UF9SRE1BX0RfUE9PTElOR19QQURESU5HX0NGR18wLCBQQURfV0lEVEgpKTsNCj4gKwkJcGRw
X3JkbWFfcmVnX3dyaXRlKGVuZ2luZSwgRF9QT09MSU5HX1BBRERJTkdfQ0ZHLCByZWcpOw0K
PiArDQo+ICsJCXJlZyA9ICgocGRwX29wLT5wYXJ0aWFsX2luX3dpZHRoX2ZpcnN0ID09IDAg
PyAwIDoNCj4gKwkJCQlwZHBfb3AtPnBhcnRpYWxfaW5fd2lkdGhfZmlyc3QgLSAxKQ0KPiAr
CQkJPDwgU0hJRlQoUERQX1JETUFfRF9QQVJUSUFMX1dJRFRIX0lOXzAsDQo+ICsJCQkJUEFS
VElBTF9XSURUSF9JTl9GSVJTVCkpIHwNCj4gKwkJCSgocGRwX29wLT5wYXJ0aWFsX2luX3dp
ZHRoX21pZCA9PSAwID8gMCA6DQo+ICsJCQkJcGRwX29wLT5wYXJ0aWFsX2luX3dpZHRoX21p
ZCAtIDEpDQo+ICsJCQk8PCBTSElGVChQRFBfUkRNQV9EX1BBUlRJQUxfV0lEVEhfSU5fMCwN
Cj4gKwkJCQlQQVJUSUFMX1dJRFRIX0lOX01JRCkpIHwNCj4gKwkJCSgocGRwX29wLT5wYXJ0
aWFsX2luX3dpZHRoX2xhc3QgPT0gMCA/IDAgOg0KPiArCQkJCXBkcF9vcC0+cGFydGlhbF9p
bl93aWR0aF9sYXN0IC0gMSkNCj4gKwkJCTw8IFNISUZUKFBEUF9SRE1BX0RfUEFSVElBTF9X
SURUSF9JTl8wLA0KPiArCQkJCVBBUlRJQUxfV0lEVEhfSU5fTEFTVCkpOw0KPiArCQlwZHBf
cmRtYV9yZWdfd3JpdGUoZW5naW5lLCBEX1BBUlRJQUxfV0lEVEhfSU4sIHJlZyk7DQo+ICsJ
fSBlbHNlIHsNCj4gKwkJQVNTRVJUX0dPVE8ocGRwX29wLT5zcGxpdF9udW0gPT0gMSwgcmV0
LA0KPiArCQkJCQktRUlOVkFMLCBleGl0KTsNCj4gKwl9DQo+ICsNCj4gKwlyZWcgPSAoKHBk
cF9zdXJmYWNlLT5zcmNfZGF0YS53aWR0aCAtIDEpDQo+ICsJCTw8IFNISUZUKFBEUF9EX0RB
VEFfQ1VCRV9JTl9XSURUSF8wLCBDVUJFX0lOX1dJRFRIKSk7DQo+ICsJcGRwX3JlZ193cml0
ZShlbmdpbmUsIERfREFUQV9DVUJFX0lOX1dJRFRILCByZWcpOw0KPiArDQo+ICsJcmVnID0g
KChwZHBfc3VyZmFjZS0+c3JjX2RhdGEuaGVpZ2h0IC0gMSkNCj4gKwkJPDwgU0hJRlQoUERQ
X0RfREFUQV9DVUJFX0lOX0hFSUdIVF8wLCBDVUJFX0lOX0hFSUdIVCkpOw0KPiArCXBkcF9y
ZWdfd3JpdGUoZW5naW5lLCBEX0RBVEFfQ1VCRV9JTl9IRUlHSFQsIHJlZyk7DQo+ICsNCj4g
KwlyZWcgPSAoKHBkcF9zdXJmYWNlLT5zcmNfZGF0YS5jaGFubmVsIC0gMSkNCj4gKwkJPDwg
U0hJRlQoUERQX0RfREFUQV9DVUJFX0lOX0NIQU5ORUxfMCwgQ1VCRV9JTl9DSEFOTkVMKSk7
DQo+ICsJcGRwX3JlZ193cml0ZShlbmdpbmUsIERfREFUQV9DVUJFX0lOX0NIQU5ORUwsIHJl
Zyk7DQo+ICsNCj4gKwlyZWcgPSAoKHBkcF9zdXJmYWNlLT5kc3RfZGF0YS53aWR0aCAtIDEp
DQo+ICsJCTw8IFNISUZUKFBEUF9EX0RBVEFfQ1VCRV9PVVRfV0lEVEhfMCwgQ1VCRV9PVVRf
V0lEVEgpKTsNCj4gKwlwZHBfcmVnX3dyaXRlKGVuZ2luZSwgRF9EQVRBX0NVQkVfT1VUX1dJ
RFRILCByZWcpOw0KPiArDQo+ICsJcmVnID0gKChwZHBfc3VyZmFjZS0+ZHN0X2RhdGEuaGVp
Z2h0IC0gMSkNCj4gKwkJPDwgU0hJRlQoUERQX0RfREFUQV9DVUJFX09VVF9IRUlHSFRfMCwg
Q1VCRV9PVVRfSEVJR0hUKSk7DQo+ICsJcGRwX3JlZ193cml0ZShlbmdpbmUsIERfREFUQV9D
VUJFX09VVF9IRUlHSFQsIHJlZyk7DQo+ICsNCj4gKwlyZWcgPSAoKHBkcF9zdXJmYWNlLT5k
c3RfZGF0YS5jaGFubmVsIC0gMSkNCj4gKwkJPDwgU0hJRlQoUERQX0RfREFUQV9DVUJFX09V
VF9DSEFOTkVMXzAsIENVQkVfT1VUX0NIQU5ORUwpKTsNCj4gKwlwZHBfcmVnX3dyaXRlKGVu
Z2luZSwgRF9EQVRBX0NVQkVfT1VUX0NIQU5ORUwsIHJlZyk7DQo+ICsNCj4gKwlyZWcgPSAo
bWFwX3Bvb2xbcGRwX29wLT5wb29sX21vZGVdDQo+ICsJCTw8IFNISUZUKFBEUF9EX09QRVJB
VElPTl9NT0RFX0NGR18wLCBQT09MSU5HX01FVEhPRCkpIHwNCj4gKwkJKGdldF9mbHlfbW9k
ZShwZHBfc3VyZmFjZS0+c3JjX2RhdGEudHlwZSkNCj4gKwkJPDwgU0hJRlQoUERQX0RfT1BF
UkFUSU9OX01PREVfQ0ZHXzAsIEZMWUlOR19NT0RFKSkgfA0KPiArCQkoKHBkcF9vcC0+c3Bs
aXRfbnVtIC0gMSkNCj4gKwkJPDwgU0hJRlQoUERQX0RfT1BFUkFUSU9OX01PREVfQ0ZHXzAs
IFNQTElUX05VTSkpOw0KPiArCXBkcF9yZWdfd3JpdGUoZW5naW5lLCBEX09QRVJBVElPTl9N
T0RFX0NGRywgcmVnKTsNCj4gKw0KPiArCXJlZyA9ICgocGRwX29wLT5wYXJ0aWFsX2luX3dp
ZHRoX2ZpcnN0ID09IDAgPyAwIDoNCj4gKwkJCXBkcF9vcC0+cGFydGlhbF9pbl93aWR0aF9m
aXJzdC0xKQ0KPiArCQk8PCBTSElGVChQRFBfRF9QQVJUSUFMX1dJRFRIX0lOXzAsIFBBUlRJ
QUxfV0lEVEhfSU5fRklSU1QpKSB8DQo+ICsJCSgocGRwX29wLT5wYXJ0aWFsX2luX3dpZHRo
X21pZCA9PSAwID8gMCA6DQo+ICsJCQlwZHBfb3AtPnBhcnRpYWxfaW5fd2lkdGhfbWlkLTEp
DQo+ICsJCTw8IFNISUZUKFBEUF9EX1BBUlRJQUxfV0lEVEhfSU5fMCwgUEFSVElBTF9XSURU
SF9JTl9NSUQpKSB8DQo+ICsJCSgocGRwX29wLT5wYXJ0aWFsX2luX3dpZHRoX2xhc3QgPT0g
MCA/IDAgOg0KPiArCQkJcGRwX29wLT5wYXJ0aWFsX2luX3dpZHRoX2xhc3QtMSkNCj4gKwkJ
PDwgU0hJRlQoUERQX0RfUEFSVElBTF9XSURUSF9JTl8wLCBQQVJUSUFMX1dJRFRIX0lOX0xB
U1QpKTsNCj4gKwlwZHBfcmVnX3dyaXRlKGVuZ2luZSwgRF9QQVJUSUFMX1dJRFRIX0lOLCBy
ZWcpOw0KPiArDQo+ICsJcmVnID0gKChwZHBfb3AtPnBhcnRpYWxfd2lkdGhfZmlyc3QgPT0g
MCA/IDAgOg0KPiArCQkJcGRwX29wLT5wYXJ0aWFsX3dpZHRoX2ZpcnN0LTEpDQo+ICsJCTw8
IFNISUZUKFBEUF9EX1BBUlRJQUxfV0lEVEhfT1VUXzAsIFBBUlRJQUxfV0lEVEhfT1VUX0ZJ
UlNUKSkgfA0KPiArCQkoKHBkcF9vcC0+cGFydGlhbF93aWR0aF9taWQgPT0gMCA/IDAgOg0K
PiArCQkJcGRwX29wLT5wYXJ0aWFsX3dpZHRoX21pZC0xKQ0KPiArCQk8PCBTSElGVChQRFBf
RF9QQVJUSUFMX1dJRFRIX09VVF8wLCBQQVJUSUFMX1dJRFRIX09VVF9NSUQpKSAgIHwNCj4g
KwkJKChwZHBfb3AtPnBhcnRpYWxfd2lkdGhfbGFzdCA9PSAwID8gMCA6DQo+ICsJCQlwZHBf
b3AtPnBhcnRpYWxfd2lkdGhfbGFzdC0xKQ0KPiArCQk8PCBTSElGVChQRFBfRF9QQVJUSUFM
X1dJRFRIX09VVF8wLCBQQVJUSUFMX1dJRFRIX09VVF9MQVNUKSk7DQo+ICsJcGRwX3JlZ193
cml0ZShlbmdpbmUsIERfUEFSVElBTF9XSURUSF9PVVQsIHJlZyk7DQo+ICsNCj4gKwlyZWcg
PSAobWFwX3Bvb2xfa2VybmVsW3BkcF9vcC0+cG9vbF93aWR0aF0NCj4gKwkJPDwgU0hJRlQo
UERQX0RfUE9PTElOR19LRVJORUxfQ0ZHXzAsIEtFUk5FTF9XSURUSCkpIHwNCj4gKwkJKG1h
cF9wb29sX2tlcm5lbFtwZHBfb3AtPnBvb2xfaGVpZ2h0XQ0KPiArCQk8PCBTSElGVChQRFBf
RF9QT09MSU5HX0tFUk5FTF9DRkdfMCwgS0VSTkVMX0hFSUdIVCkpfA0KPiArCQkoKHBkcF9v
cC0+c3RyaWRlX3ggLSAxKQ0KPiArCQk8PCBTSElGVChQRFBfRF9QT09MSU5HX0tFUk5FTF9D
RkdfMCwgS0VSTkVMX1NUUklERV9XSURUSCkpIHwNCj4gKwkJKChwZHBfb3AtPnN0cmlkZV95
IC0gMSkNCj4gKwkJPDwgU0hJRlQoUERQX0RfUE9PTElOR19LRVJORUxfQ0ZHXzAsIEtFUk5F
TF9TVFJJREVfSEVJR0hUKSk7DQo+ICsJcGRwX3JlZ193cml0ZShlbmdpbmUsIERfUE9PTElO
R19LRVJORUxfQ0ZHLCByZWcpOw0KPiArDQo+ICsJcGRwX3JlZ193cml0ZShlbmdpbmUsIERf
UkVDSVBfS0VSTkVMX1dJRFRILA0KPiArCQkJcmVjaXBfa2VybmVsX3NpemVbcGRwX29wLT5w
cmVjaXNpb24gPT0NCj4gKwkJCQkJUFJFQ0lTSU9OX0ZQMTZdW3BkcF9vcC0+cG9vbF93aWR0
aF0pOw0KPiArCXBkcF9yZWdfd3JpdGUoZW5naW5lLCBEX1JFQ0lQX0tFUk5FTF9IRUlHSFQs
DQo+ICsJCQlyZWNpcF9rZXJuZWxfc2l6ZVtwZHBfb3AtPnByZWNpc2lvbiA9PQ0KPiArCQkJ
CQlQUkVDSVNJT05fRlAxNl1bcGRwX29wLT5wb29sX2hlaWdodF0pOw0KPiArDQo+ICsJcmVn
ID0gKHBkcF9vcC0+cGFkX2xlZnQNCj4gKwkJPDwgU0hJRlQoUERQX0RfUE9PTElOR19QQURE
SU5HX0NGR18wLCBQQURfTEVGVCkpIHwNCj4gKwkJKHBkcF9vcC0+cGFkX3JpZ2h0DQo+ICsJ
CTw8IFNISUZUKFBEUF9EX1BPT0xJTkdfUEFERElOR19DRkdfMCwgUEFEX1JJR0hUKSkgfA0K
PiArCQkocGRwX29wLT5wYWRfdG9wDQo+ICsJCTw8IFNISUZUKFBEUF9EX1BPT0xJTkdfUEFE
RElOR19DRkdfMCwgUEFEX1RPUCkpIHwNCj4gKwkJKHBkcF9vcC0+cGFkX2JvdHRvbQ0KPiAr
CQk8PCBTSElGVChQRFBfRF9QT09MSU5HX1BBRERJTkdfQ0ZHXzAsIFBBRF9CT1RUT00pKTsN
Cj4gKwlpZiAocGRwX29wLT5wcmVjaXNpb24gPT0gUFJFQ0lTSU9OX0ZQMTYpIHsNCj4gKwkJ
aW50MzJfdCBpOw0KPiArDQo+ICsJCWZvciAoaSA9IDA7IGkgPCA3OyBpKyspDQo+ICsJCQlB
U1NFUlRfR09UTyhwZHBfb3AtPnBhZGRpbmdfdmFsdWVbaV0gPT0gMCwgcmV0LA0KPiArCQkJ
CQkJLUVJTlZBTCwgZXhpdCk7DQo+ICsJfQ0KPiArDQo+ICsJcGRwX3JlZ193cml0ZShlbmdp
bmUsIERfUE9PTElOR19QQURESU5HX0NGRywgcmVnKTsNCj4gKwlwZHBfcmVnX3dyaXRlKGVu
Z2luZSwgRF9QT09MSU5HX1BBRERJTkdfVkFMVUVfMV9DRkcsIHBkcF9vcC0+cGFkZGluZ192
YWx1ZVswXSk7DQo+ICsJcGRwX3JlZ193cml0ZShlbmdpbmUsIERfUE9PTElOR19QQURESU5H
X1ZBTFVFXzJfQ0ZHLCBwZHBfb3AtPnBhZGRpbmdfdmFsdWVbMV0pOw0KPiArCXBkcF9yZWdf
d3JpdGUoZW5naW5lLCBEX1BPT0xJTkdfUEFERElOR19WQUxVRV8zX0NGRywgcGRwX29wLT5w
YWRkaW5nX3ZhbHVlWzJdKTsNCj4gKwlwZHBfcmVnX3dyaXRlKGVuZ2luZSwgRF9QT09MSU5H
X1BBRERJTkdfVkFMVUVfNF9DRkcsIHBkcF9vcC0+cGFkZGluZ192YWx1ZVszXSk7DQo+ICsJ
cGRwX3JlZ193cml0ZShlbmdpbmUsIERfUE9PTElOR19QQURESU5HX1ZBTFVFXzVfQ0ZHLCBw
ZHBfb3AtPnBhZGRpbmdfdmFsdWVbNF0pOw0KPiArCXBkcF9yZWdfd3JpdGUoZW5naW5lLCBE
X1BPT0xJTkdfUEFERElOR19WQUxVRV82X0NGRywgcGRwX29wLT5wYWRkaW5nX3ZhbHVlWzVd
KTsNCj4gKwlwZHBfcmVnX3dyaXRlKGVuZ2luZSwgRF9QT09MSU5HX1BBRERJTkdfVkFMVUVf
N19DRkcsIHBkcF9vcC0+cGFkZGluZ192YWx1ZVs2XSk7DQo+ICsNCj4gKwlpZiAocGRwX3N1
cmZhY2UtPnNyY19kYXRhLnR5cGUgIT0gRExBX01FTV9IVykgew0KPiArCQlwZHBfcmVnX3dy
aXRlKGVuZ2luZSwgRF9TUkNfTElORV9TVFJJREUsDQo+ICsJCQkJcGRwX3N1cmZhY2UtPnNy
Y19kYXRhLmxpbmVfc3RyaWRlKTsNCj4gKwkJcGRwX3JlZ193cml0ZShlbmdpbmUsIERfU1JD
X1NVUkZBQ0VfU1RSSURFLA0KPiArCQkJCXBkcF9zdXJmYWNlLT5zcmNfZGF0YS5zdXJmX3N0
cmlkZSk7DQo+ICsJfQ0KPiArDQo+ICsJaGlnaCA9IHVwcGVyXzMyX2JpdHMob3V0cHV0X2Fk
ZHJlc3MpOw0KPiArCWxvdyA9IGxvd2VyXzMyX2JpdHMob3V0cHV0X2FkZHJlc3MpOw0KPiAr
CXBkcF9yZWdfd3JpdGUoZW5naW5lLCBEX0RTVF9CQVNFX0FERFJfTE9XLCBsb3cpOw0KPiAr
CXBkcF9yZWdfd3JpdGUoZW5naW5lLCBEX0RTVF9CQVNFX0FERFJfSElHSCwgaGlnaCk7DQo+
ICsNCj4gKwlwZHBfcmVnX3dyaXRlKGVuZ2luZSwgRF9EU1RfTElORV9TVFJJREUsIHBkcF9z
dXJmYWNlLT5kc3RfZGF0YS5saW5lX3N0cmlkZSk7DQo+ICsJcGRwX3JlZ193cml0ZShlbmdp
bmUsIERfRFNUX1NVUkZBQ0VfU1RSSURFLCBwZHBfc3VyZmFjZS0+ZHN0X2RhdGEuc3VyZl9z
dHJpZGUpOw0KPiArDQo+ICsJcmVnID0gKG1hcF9yYW1bcGRwX3N1cmZhY2UtPmRzdF9kYXRh
LnR5cGVdDQo+ICsJCTw8IFNISUZUKFBEUF9EX0RTVF9SQU1fQ0ZHXzAsIERTVF9SQU1fVFlQ
RSkpOw0KPiArCXBkcF9yZWdfd3JpdGUoZW5naW5lLCBEX0RTVF9SQU1fQ0ZHLCByZWcpOw0K
PiArDQo+ICsJcmVnID0gKG1hcF9wcmVjaXNpb25bcGRwX29wLT5wcmVjaXNpb25dDQo+ICsJ
CTw8IFNISUZUKFBEUF9EX0RBVEFfRk9STUFUXzAsIElOUFVUX0RBVEEpKTsNCj4gKwlwZHBf
cmVnX3dyaXRlKGVuZ2luZSwgRF9EQVRBX0ZPUk1BVCwgcmVnKTsNCj4gKw0KPiArZXhpdDoN
Cj4gKwlyZXR1cm4gcmV0Ow0KPiArfQ0KPiArDQo+ICtpbnQNCj4gK2RsYV9wZHBfaXNfcmVh
ZHkoc3RydWN0IGRsYV9wcm9jZXNzb3IgKnByb2Nlc3NvciwNCj4gKwkJCSAgIHN0cnVjdCBk
bGFfcHJvY2Vzc29yX2dyb3VwICpncm91cCkNCj4gK3sNCj4gKwlyZXR1cm4gMTsNCj4gK30N
Cj4gKw0KPiArdm9pZA0KPiArZGxhX3BkcF9kdW1wX2NvbmZpZyhzdHJ1Y3QgZGxhX3Byb2Nl
c3Nvcl9ncm91cCAqZ3JvdXApDQo+ICt7DQo+ICsJc3RydWN0IGRsYV9wZHBfb3BfZGVzYyAq
cGRwX29wOw0KPiArCXN0cnVjdCBkbGFfcGRwX3N1cmZhY2VfZGVzYyAqcGRwX3N1cmZhY2U7
DQo+ICsNCj4gKwlwZHBfc3VyZmFjZSA9ICZncm91cC0+c3VyZmFjZV9kZXNjLT5wZHBfc3Vy
ZmFjZTsNCj4gKwlwZHBfb3AgPSAmZ3JvdXAtPm9wZXJhdGlvbl9kZXNjLT5wZHBfb3A7DQo+
ICt9DQo+ICsNCj4gK2ludA0KPiArZGxhX3BkcF9wcm9ncmFtKHN0cnVjdCBkbGFfZW5naW5l
ICplbmdpbmUsIHN0cnVjdCBkbGFfcHJvY2Vzc29yX2dyb3VwICpncm91cCkNCj4gK3sNCj4g
KwlpbnQzMl90IHJldDsNCj4gKw0KPiArCWlmICghZ3JvdXApIHsNCj4gKwkJcmV0ID0gLUVJ
TlZBTDsNCj4gKwkJZ290byBleGl0Ow0KPiArCX0NCj4gKw0KPiArCWRsYV9lbmFibGVfaW50
cihlbmdpbmUsIE1BU0soR0xCX1NfSU5UUl9NQVNLXzAsIFBEUF9ET05FX01BU0sxKSB8DQo+
ICsJCQlNQVNLKEdMQl9TX0lOVFJfTUFTS18wLCBQRFBfRE9ORV9NQVNLMCkpOw0KPiArDQo+
ICsJcmV0ID0gcHJvY2Vzc29yX3BkcF9wcm9ncmFtKGVuZ2luZSwgZ3JvdXApOw0KPiArCWlm
IChyZXQpDQo+ICsJCWdvdG8gZXhpdDsNCj4gKw0KPiArZXhpdDoNCj4gKwlyZXR1cm4gcmV0
Ow0KPiArfQ0KPiBkaWZmIC0tZ2l0IGEvZHJpdmVycy9ncHUvZHJtL252ZGxhL252ZGxhX3Jl
Zy5oIGIvZHJpdmVycy9ncHUvZHJtL252ZGxhL252ZGxhX3JlZy5oDQo+IG5ldyBmaWxlIG1v
ZGUgMTAwNjQ0DQo+IGluZGV4IDAwMDAwMDAwMDAwMC4uNWNhMjg5NzQwNWJjDQo+IC0tLSAv
ZGV2L251bGwNCj4gKysrIGIvZHJpdmVycy9ncHUvZHJtL252ZGxhL252ZGxhX3JlZy5oDQo+
IEBAIC0wLDAgKzEsNjQxMSBAQA0KPiArLyogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEdQ
TC0yLjAgT1IgQlNELTMtQ2xhdXNlICovDQo+ICsvKg0KPiArICogQ29weXJpZ2h0IChDKSAy
MDE3LTIwMTggTlZJRElBIENPUlBPUkFUSU9OLg0KPiArICogQ29weXJpZ2h0IChDKSAyMDIy
IENhaSBIdW9xaW5nDQo+ICsgKi8NCj4gKw0KPiArI2lmbmRlZiBfX05WRExBX1JFR19IXw0K
PiArI2RlZmluZSBfX05WRExBX1JFR19IXw0KPiArDQo+ICsvLyBSZWdpc3RlciBOVkRMQV9D
RkdST01fQ0ZHUk9NX0hXX1ZFUlNJT05fMA0KPiArI2RlZmluZSBOVkRMQV9DRkdST01fQ0ZH
Uk9NX0hXX1ZFUlNJT05fMAkJCV9NS19BRERSX0NPTlNUKDB4MCkNCj4gKyNkZWZpbmUgTlZE
TEFfQ0ZHUk9NX0NGR1JPTV9IV19WRVJTSU9OXzBfSFdfVkVSU0lPTl9TSElGVAkJCV9NS19T
SElGVF9DT05TVCgwKQ0KPiArI2RlZmluZSBOVkRMQV9DRkdST01fQ0ZHUk9NX0hXX1ZFUlNJ
T05fMF9IV19WRVJTSU9OX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4ZmZmZmZmZmYsIE5W
RExBX0NGR1JPTV9DRkdST01fSFdfVkVSU0lPTl8wX0hXX1ZFUlNJT05fU0hJRlQpDQo+ICsN
Cj4gKw0KPiArLy8gUmVnaXN0ZXIgTlZETEFfQ0ZHUk9NX0NGR1JPTV9HTEJfREVTQ18wDQo+
ICsjZGVmaW5lIE5WRExBX0NGR1JPTV9DRkdST01fR0xCX0RFU0NfMAkJCV9NS19BRERSX0NP
TlNUKDB4NCkNCj4gKyNkZWZpbmUgTlZETEFfQ0ZHUk9NX0NGR1JPTV9HTEJfREVTQ18wX0dM
Ql9ERVNDX1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDApDQo+ICsjZGVmaW5lIE5WRExBX0NG
R1JPTV9DRkdST01fR0xCX0RFU0NfMF9HTEJfREVTQ19GSUVMRAkJCV9NS19GSUVMRF9DT05T
VCgweGZmZmZmZmZmLCBOVkRMQV9DRkdST01fQ0ZHUk9NX0dMQl9ERVNDXzBfR0xCX0RFU0Nf
U0hJRlQpDQo+ICsNCj4gKw0KPiArLy8gUmVnaXN0ZXIgTlZETEFfQ0ZHUk9NX0NGR1JPTV9D
SUZfREVTQ18wDQo+ICsjZGVmaW5lIE5WRExBX0NGR1JPTV9DRkdST01fQ0lGX0RFU0NfMAkJ
CV9NS19BRERSX0NPTlNUKDB4OCkNCj4gKyNkZWZpbmUgTlZETEFfQ0ZHUk9NX0NGR1JPTV9D
SUZfREVTQ18wX0NJRl9ERVNDX1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDApDQo+ICsjZGVm
aW5lIE5WRExBX0NGR1JPTV9DRkdST01fQ0lGX0RFU0NfMF9DSUZfREVTQ19GSUVMRAkJCV9N
S19GSUVMRF9DT05TVCgweGZmZmZmZmZmLCBOVkRMQV9DRkdST01fQ0ZHUk9NX0NJRl9ERVND
XzBfQ0lGX0RFU0NfU0hJRlQpDQo+ICsNCj4gKw0KPiArLy8gUmVnaXN0ZXIgTlZETEFfQ0ZH
Uk9NX0NGR1JPTV9DSUZfQ0FQX0lOQ09NUEFUXzANCj4gKyNkZWZpbmUgTlZETEFfQ0ZHUk9N
X0NGR1JPTV9DSUZfQ0FQX0lOQ09NUEFUXzAJCQlfTUtfQUREUl9DT05TVCgweGMpDQo+ICsj
ZGVmaW5lIE5WRExBX0NGR1JPTV9DRkdST01fQ0lGX0NBUF9JTkNPTVBBVF8wX0NJRl9DQVBf
SU5DT01QQVRfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMCkNCj4gKyNkZWZpbmUgTlZETEFf
Q0ZHUk9NX0NGR1JPTV9DSUZfQ0FQX0lOQ09NUEFUXzBfQ0lGX0NBUF9JTkNPTVBBVF9GSUVM
RAkJCV9NS19GSUVMRF9DT05TVCgweGZmZmZmZmZmLCBOVkRMQV9DRkdST01fQ0ZHUk9NX0NJ
Rl9DQVBfSU5DT01QQVRfMF9DSUZfQ0FQX0lOQ09NUEFUX1NISUZUKQ0KPiArDQo+ICsNCj4g
Ky8vIFJlZ2lzdGVyIE5WRExBX0NGR1JPTV9DRkdST01fQ0lGX0NBUF9DT01QQVRfMA0KPiAr
I2RlZmluZSBOVkRMQV9DRkdST01fQ0ZHUk9NX0NJRl9DQVBfQ09NUEFUXzAJCQlfTUtfQURE
Ul9DT05TVCgweDEwKQ0KPiArI2RlZmluZSBOVkRMQV9DRkdST01fQ0ZHUk9NX0NJRl9DQVBf
Q09NUEFUXzBfQ0lGX0NBUF9DT01QQVRfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMCkNCj4g
KyNkZWZpbmUgTlZETEFfQ0ZHUk9NX0NGR1JPTV9DSUZfQ0FQX0NPTVBBVF8wX0NJRl9DQVBf
Q09NUEFUX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4ZmZmZmZmZmYsIE5WRExBX0NGR1JP
TV9DRkdST01fQ0lGX0NBUF9DT01QQVRfMF9DSUZfQ0FQX0NPTVBBVF9TSElGVCkNCj4gKw0K
PiArDQo+ICsvLyBSZWdpc3RlciBOVkRMQV9DRkdST01fQ0ZHUk9NX0NJRl9CQVNFX1dJRFRI
XzANCj4gKyNkZWZpbmUgTlZETEFfQ0ZHUk9NX0NGR1JPTV9DSUZfQkFTRV9XSURUSF8wCQkJ
X01LX0FERFJfQ09OU1QoMHgxNCkNCj4gKyNkZWZpbmUgTlZETEFfQ0ZHUk9NX0NGR1JPTV9D
SUZfQkFTRV9XSURUSF8wX0NJRl9CQVNFX1dJRFRIX1NISUZUCQkJX01LX1NISUZUX0NPTlNU
KDApDQo+ICsjZGVmaW5lIE5WRExBX0NGR1JPTV9DRkdST01fQ0lGX0JBU0VfV0lEVEhfMF9D
SUZfQkFTRV9XSURUSF9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweGZmLCBOVkRMQV9DRkdS
T01fQ0ZHUk9NX0NJRl9CQVNFX1dJRFRIXzBfQ0lGX0JBU0VfV0lEVEhfU0hJRlQpDQo+ICsN
Cj4gKw0KPiArLy8gUmVnaXN0ZXIgTlZETEFfQ0ZHUk9NX0NGR1JPTV9DSUZfQkFTRV9MQVRF
TkNZXzANCj4gKyNkZWZpbmUgTlZETEFfQ0ZHUk9NX0NGR1JPTV9DSUZfQkFTRV9MQVRFTkNZ
XzAJCQlfTUtfQUREUl9DT05TVCgweDE4KQ0KPiArI2RlZmluZSBOVkRMQV9DRkdST01fQ0ZH
Uk9NX0NJRl9CQVNFX0xBVEVOQ1lfMF9DSUZfQkFTRV9MQVRFTkNZX1NISUZUCQkJX01LX1NI
SUZUX0NPTlNUKDApDQo+ICsjZGVmaW5lIE5WRExBX0NGR1JPTV9DRkdST01fQ0lGX0JBU0Vf
TEFURU5DWV8wX0NJRl9CQVNFX0xBVEVOQ1lfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHhm
ZmZmZmZmZiwgTlZETEFfQ0ZHUk9NX0NGR1JPTV9DSUZfQkFTRV9MQVRFTkNZXzBfQ0lGX0JB
U0VfTEFURU5DWV9TSElGVCkNCj4gKw0KPiArDQo+ICsvLyBSZWdpc3RlciBOVkRMQV9DRkdS
T01fQ0ZHUk9NX0NJRl9CQVNFX0JVUlNUX0xFTkdUSF9NQVhfMA0KPiArI2RlZmluZSBOVkRM
QV9DRkdST01fQ0ZHUk9NX0NJRl9CQVNFX0JVUlNUX0xFTkdUSF9NQVhfMAkJCV9NS19BRERS
X0NPTlNUKDB4MWMpDQo+ICsjZGVmaW5lIE5WRExBX0NGR1JPTV9DRkdST01fQ0lGX0JBU0Vf
QlVSU1RfTEVOR1RIX01BWF8wX0JBU0VfQlVSU1RfTEVOR1RIX01BWF9TSElGVAkJCV9NS19T
SElGVF9DT05TVCg1KQ0KPiArI2RlZmluZSBOVkRMQV9DRkdST01fQ0ZHUk9NX0NJRl9CQVNF
X0JVUlNUX0xFTkdUSF9NQVhfMF9CQVNFX0JVUlNUX0xFTkdUSF9NQVhfRklFTEQJCQlfTUtf
RklFTERfQ09OU1QoMHg3ZmZmZmZmLCBOVkRMQV9DRkdST01fQ0ZHUk9NX0NJRl9CQVNFX0JV
UlNUX0xFTkdUSF9NQVhfMF9CQVNFX0JVUlNUX0xFTkdUSF9NQVhfU0hJRlQpDQo+ICsNCj4g
Kw0KPiArLy8gUmVnaXN0ZXIgTlZETEFfQ0ZHUk9NX0NGR1JPTV9DSUZfQkFTRV9NRU1fQURE
Ul9XSURUSF8wDQo+ICsjZGVmaW5lIE5WRExBX0NGR1JPTV9DRkdST01fQ0lGX0JBU0VfTUVN
X0FERFJfV0lEVEhfMAkJCV9NS19BRERSX0NPTlNUKDB4MjApDQo+ICsjZGVmaW5lIE5WRExB
X0NGR1JPTV9DRkdST01fQ0lGX0JBU0VfTUVNX0FERFJfV0lEVEhfMF9DSUZfQkFTRV9NRU1f
QUREUl9XSURUSF9TSElGVAkJCV9NS19TSElGVF9DT05TVCg1KQ0KPiArI2RlZmluZSBOVkRM
QV9DRkdST01fQ0ZHUk9NX0NJRl9CQVNFX01FTV9BRERSX1dJRFRIXzBfQ0lGX0JBU0VfTUVN
X0FERFJfV0lEVEhfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHg3ZmZmZmZmLCBOVkRMQV9D
RkdST01fQ0ZHUk9NX0NJRl9CQVNFX01FTV9BRERSX1dJRFRIXzBfQ0lGX0JBU0VfTUVNX0FE
RFJfV0lEVEhfU0hJRlQpDQo+ICsNCj4gKw0KPiArLy8gUmVnaXN0ZXIgTlZETEFfQ0ZHUk9N
X0NGR1JPTV9DRE1BX0RFU0NfMA0KPiArI2RlZmluZSBOVkRMQV9DRkdST01fQ0ZHUk9NX0NE
TUFfREVTQ18wCQkJX01LX0FERFJfQ09OU1QoMHgyNCkNCj4gKyNkZWZpbmUgTlZETEFfQ0ZH
Uk9NX0NGR1JPTV9DRE1BX0RFU0NfMF9DRE1BX0RFU0NfU0hJRlQJCQlfTUtfU0hJRlRfQ09O
U1QoMCkNCj4gKyNkZWZpbmUgTlZETEFfQ0ZHUk9NX0NGR1JPTV9DRE1BX0RFU0NfMF9DRE1B
X0RFU0NfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHhmZmZmZmZmZiwgTlZETEFfQ0ZHUk9N
X0NGR1JPTV9DRE1BX0RFU0NfMF9DRE1BX0RFU0NfU0hJRlQpDQo+ICsNCj4gKw0KPiArLy8g
UmVnaXN0ZXIgTlZETEFfQ0ZHUk9NX0NGR1JPTV9DRE1BX0NBUF9JTkNPTVBBVF8wDQo+ICsj
ZGVmaW5lIE5WRExBX0NGR1JPTV9DRkdST01fQ0RNQV9DQVBfSU5DT01QQVRfMAkJCV9NS19B
RERSX0NPTlNUKDB4MjgpDQo+ICsjZGVmaW5lIE5WRExBX0NGR1JPTV9DRkdST01fQ0RNQV9D
QVBfSU5DT01QQVRfMF9DRE1BX0NBUF9JTkNPTVBBVF9TSElGVAkJCV9NS19TSElGVF9DT05T
VCgwKQ0KPiArI2RlZmluZSBOVkRMQV9DRkdST01fQ0ZHUk9NX0NETUFfQ0FQX0lOQ09NUEFU
XzBfQ0RNQV9DQVBfSU5DT01QQVRfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHhmZmZmZmZm
ZiwgTlZETEFfQ0ZHUk9NX0NGR1JPTV9DRE1BX0NBUF9JTkNPTVBBVF8wX0NETUFfQ0FQX0lO
Q09NUEFUX1NISUZUKQ0KPiArDQo+ICsNCj4gKy8vIFJlZ2lzdGVyIE5WRExBX0NGR1JPTV9D
RkdST01fQ0RNQV9DQVBfQ09NUEFUXzANCj4gKyNkZWZpbmUgTlZETEFfQ0ZHUk9NX0NGR1JP
TV9DRE1BX0NBUF9DT01QQVRfMAkJCV9NS19BRERSX0NPTlNUKDB4MmMpDQo+ICsjZGVmaW5l
IE5WRExBX0NGR1JPTV9DRkdST01fQ0RNQV9DQVBfQ09NUEFUXzBfQ0RNQV9DQVBfQ09NUEFU
X1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDApDQo+ICsjZGVmaW5lIE5WRExBX0NGR1JPTV9D
RkdST01fQ0RNQV9DQVBfQ09NUEFUXzBfQ0RNQV9DQVBfQ09NUEFUX0ZJRUxECQkJX01LX0ZJ
RUxEX0NPTlNUKDB4ZmZmZmZmZmYsIE5WRExBX0NGR1JPTV9DRkdST01fQ0RNQV9DQVBfQ09N
UEFUXzBfQ0RNQV9DQVBfQ09NUEFUX1NISUZUKQ0KPiArDQo+ICsNCj4gKy8vIFJlZ2lzdGVy
IE5WRExBX0NGR1JPTV9DRkdST01fQ0RNQV9CQVNFX0ZFQVRVUkVfVFlQRVNfMA0KPiArI2Rl
ZmluZSBOVkRMQV9DRkdST01fQ0ZHUk9NX0NETUFfQkFTRV9GRUFUVVJFX1RZUEVTXzAJCQlf
TUtfQUREUl9DT05TVCgweDMwKQ0KPiArI2RlZmluZSBOVkRMQV9DRkdST01fQ0ZHUk9NX0NE
TUFfQkFTRV9GRUFUVVJFX1RZUEVTXzBfQ0RNQV9CQVNFX0ZFQVRVUkVfVFlQRVNfU0hJRlQJ
CQlfTUtfU0hJRlRfQ09OU1QoMCkNCj4gKyNkZWZpbmUgTlZETEFfQ0ZHUk9NX0NGR1JPTV9D
RE1BX0JBU0VfRkVBVFVSRV9UWVBFU18wX0NETUFfQkFTRV9GRUFUVVJFX1RZUEVTX0ZJRUxE
CQkJX01LX0ZJRUxEX0NPTlNUKDB4ZmZmLCBOVkRMQV9DRkdST01fQ0ZHUk9NX0NETUFfQkFT
RV9GRUFUVVJFX1RZUEVTXzBfQ0RNQV9CQVNFX0ZFQVRVUkVfVFlQRVNfU0hJRlQpDQo+ICsN
Cj4gKw0KPiArLy8gUmVnaXN0ZXIgTlZETEFfQ0ZHUk9NX0NGR1JPTV9DRE1BX0JBU0VfV0VJ
R0hUX1RZUEVTXzANCj4gKyNkZWZpbmUgTlZETEFfQ0ZHUk9NX0NGR1JPTV9DRE1BX0JBU0Vf
V0VJR0hUX1RZUEVTXzAJCQlfTUtfQUREUl9DT05TVCgweDM0KQ0KPiArI2RlZmluZSBOVkRM
QV9DRkdST01fQ0ZHUk9NX0NETUFfQkFTRV9XRUlHSFRfVFlQRVNfMF9DRE1BX0JBU0VfV0VJ
R0hUX1RZUEVTX1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDApDQo+ICsjZGVmaW5lIE5WRExB
X0NGR1JPTV9DRkdST01fQ0RNQV9CQVNFX1dFSUdIVF9UWVBFU18wX0NETUFfQkFTRV9XRUlH
SFRfVFlQRVNfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHhmZmYsIE5WRExBX0NGR1JPTV9D
RkdST01fQ0RNQV9CQVNFX1dFSUdIVF9UWVBFU18wX0NETUFfQkFTRV9XRUlHSFRfVFlQRVNf
U0hJRlQpDQo+ICsNCj4gKw0KPiArLy8gUmVnaXN0ZXIgTlZETEFfQ0ZHUk9NX0NGR1JPTV9D
RE1BX0JBU0VfQVRPTUlDX0NfMA0KPiArI2RlZmluZSBOVkRMQV9DRkdST01fQ0ZHUk9NX0NE
TUFfQkFTRV9BVE9NSUNfQ18wCQkJX01LX0FERFJfQ09OU1QoMHgzOCkNCj4gKyNkZWZpbmUg
TlZETEFfQ0ZHUk9NX0NGR1JPTV9DRE1BX0JBU0VfQVRPTUlDX0NfMF9DRE1BX0JBU0VfQVRP
TUlDX0NfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMCkNCj4gKyNkZWZpbmUgTlZETEFfQ0ZH
Uk9NX0NGR1JPTV9DRE1BX0JBU0VfQVRPTUlDX0NfMF9DRE1BX0JBU0VfQVRPTUlDX0NfRklF
TEQJCQlfTUtfRklFTERfQ09OU1QoMHhmZmZmZmZmZiwgTlZETEFfQ0ZHUk9NX0NGR1JPTV9D
RE1BX0JBU0VfQVRPTUlDX0NfMF9DRE1BX0JBU0VfQVRPTUlDX0NfU0hJRlQpDQo+ICsNCj4g
Kw0KPiArLy8gUmVnaXN0ZXIgTlZETEFfQ0ZHUk9NX0NGR1JPTV9DRE1BX0JBU0VfQVRPTUlD
X0tfMA0KPiArI2RlZmluZSBOVkRMQV9DRkdST01fQ0ZHUk9NX0NETUFfQkFTRV9BVE9NSUNf
S18wCQkJX01LX0FERFJfQ09OU1QoMHgzYykNCj4gKyNkZWZpbmUgTlZETEFfQ0ZHUk9NX0NG
R1JPTV9DRE1BX0JBU0VfQVRPTUlDX0tfMF9DRE1BX0JBU0VfQVRPTUlDX0tfU0hJRlQJCQlf
TUtfU0hJRlRfQ09OU1QoMCkNCj4gKyNkZWZpbmUgTlZETEFfQ0ZHUk9NX0NGR1JPTV9DRE1B
X0JBU0VfQVRPTUlDX0tfMF9DRE1BX0JBU0VfQVRPTUlDX0tfRklFTEQJCQlfTUtfRklFTERf
Q09OU1QoMHhmZmZmZmZmZiwgTlZETEFfQ0ZHUk9NX0NGR1JPTV9DRE1BX0JBU0VfQVRPTUlD
X0tfMF9DRE1BX0JBU0VfQVRPTUlDX0tfU0hJRlQpDQo+ICsNCj4gKw0KPiArLy8gUmVnaXN0
ZXIgTlZETEFfQ0ZHUk9NX0NGR1JPTV9DRE1BX0JBU0VfQVRPTUlDX01fMA0KPiArI2RlZmlu
ZSBOVkRMQV9DRkdST01fQ0ZHUk9NX0NETUFfQkFTRV9BVE9NSUNfTV8wCQkJX01LX0FERFJf
Q09OU1QoMHg0MCkNCj4gKyNkZWZpbmUgTlZETEFfQ0ZHUk9NX0NGR1JPTV9DRE1BX0JBU0Vf
QVRPTUlDX01fMF9DRE1BX0JBU0VfQVRPTUlDX01fU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1Qo
MCkNCj4gKyNkZWZpbmUgTlZETEFfQ0ZHUk9NX0NGR1JPTV9DRE1BX0JBU0VfQVRPTUlDX01f
MF9DRE1BX0JBU0VfQVRPTUlDX01fRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHhmZmZmZmZm
ZiwgTlZETEFfQ0ZHUk9NX0NGR1JPTV9DRE1BX0JBU0VfQVRPTUlDX01fMF9DRE1BX0JBU0Vf
QVRPTUlDX01fU0hJRlQpDQo+ICsNCj4gKw0KPiArLy8gUmVnaXN0ZXIgTlZETEFfQ0ZHUk9N
X0NGR1JPTV9DRE1BX0JBU0VfQ0JVRl9CQU5LX05VTV8wDQo+ICsjZGVmaW5lIE5WRExBX0NG
R1JPTV9DRkdST01fQ0RNQV9CQVNFX0NCVUZfQkFOS19OVU1fMAkJCV9NS19BRERSX0NPTlNU
KDB4NDQpDQo+ICsjZGVmaW5lIE5WRExBX0NGR1JPTV9DRkdST01fQ0RNQV9CQVNFX0NCVUZf
QkFOS19OVU1fMF9DRE1BX0JBU0VfQ0JVRl9CQU5LX05VTV9TSElGVAkJCV9NS19TSElGVF9D
T05TVCgwKQ0KPiArI2RlZmluZSBOVkRMQV9DRkdST01fQ0ZHUk9NX0NETUFfQkFTRV9DQlVG
X0JBTktfTlVNXzBfQ0RNQV9CQVNFX0NCVUZfQkFOS19OVU1fRklFTEQJCQlfTUtfRklFTERf
Q09OU1QoMHhmZmZmZmZmZiwgTlZETEFfQ0ZHUk9NX0NGR1JPTV9DRE1BX0JBU0VfQ0JVRl9C
QU5LX05VTV8wX0NETUFfQkFTRV9DQlVGX0JBTktfTlVNX1NISUZUKQ0KPiArDQo+ICsNCj4g
Ky8vIFJlZ2lzdGVyIE5WRExBX0NGR1JPTV9DRkdST01fQ0RNQV9CQVNFX0NCVUZfQkFOS19X
SURUSF8wDQo+ICsjZGVmaW5lIE5WRExBX0NGR1JPTV9DRkdST01fQ0RNQV9CQVNFX0NCVUZf
QkFOS19XSURUSF8wCQkJX01LX0FERFJfQ09OU1QoMHg0OCkNCj4gKyNkZWZpbmUgTlZETEFf
Q0ZHUk9NX0NGR1JPTV9DRE1BX0JBU0VfQ0JVRl9CQU5LX1dJRFRIXzBfQ0RNQV9CQVNFX0NC
VUZfQkFOS19XSURUSF9TSElGVAkJCV9NS19TSElGVF9DT05TVCgwKQ0KPiArI2RlZmluZSBO
VkRMQV9DRkdST01fQ0ZHUk9NX0NETUFfQkFTRV9DQlVGX0JBTktfV0lEVEhfMF9DRE1BX0JB
U0VfQ0JVRl9CQU5LX1dJRFRIX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4ZmZmZmZmZmYs
IE5WRExBX0NGR1JPTV9DRkdST01fQ0RNQV9CQVNFX0NCVUZfQkFOS19XSURUSF8wX0NETUFf
QkFTRV9DQlVGX0JBTktfV0lEVEhfU0hJRlQpDQo+ICsNCj4gKw0KPiArLy8gUmVnaXN0ZXIg
TlZETEFfQ0ZHUk9NX0NGR1JPTV9DRE1BX0JBU0VfQ0JVRl9CQU5LX0RFUFRIXzANCj4gKyNk
ZWZpbmUgTlZETEFfQ0ZHUk9NX0NGR1JPTV9DRE1BX0JBU0VfQ0JVRl9CQU5LX0RFUFRIXzAJ
CQlfTUtfQUREUl9DT05TVCgweDRjKQ0KPiArI2RlZmluZSBOVkRMQV9DRkdST01fQ0ZHUk9N
X0NETUFfQkFTRV9DQlVGX0JBTktfREVQVEhfMF9DRE1BX0JBU0VfQ0JVRl9CQU5LX0RFUFRI
X1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDApDQo+ICsjZGVmaW5lIE5WRExBX0NGR1JPTV9D
RkdST01fQ0RNQV9CQVNFX0NCVUZfQkFOS19ERVBUSF8wX0NETUFfQkFTRV9DQlVGX0JBTktf
REVQVEhfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHhmZmZmZmZmZiwgTlZETEFfQ0ZHUk9N
X0NGR1JPTV9DRE1BX0JBU0VfQ0JVRl9CQU5LX0RFUFRIXzBfQ0RNQV9CQVNFX0NCVUZfQkFO
S19ERVBUSF9TSElGVCkNCj4gKw0KPiArDQo+ICsvLyBSZWdpc3RlciBOVkRMQV9DRkdST01f
Q0ZHUk9NX0NETUFfTVVMVElfQkFUQ0hfTUFYXzANCj4gKyNkZWZpbmUgTlZETEFfQ0ZHUk9N
X0NGR1JPTV9DRE1BX01VTFRJX0JBVENIX01BWF8wCQkJX01LX0FERFJfQ09OU1QoMHg1MCkN
Cj4gKyNkZWZpbmUgTlZETEFfQ0ZHUk9NX0NGR1JPTV9DRE1BX01VTFRJX0JBVENIX01BWF8w
X0NETUFfTVVMVElfQkFUQ0hfTUFYX1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDApDQo+ICsj
ZGVmaW5lIE5WRExBX0NGR1JPTV9DRkdST01fQ0RNQV9NVUxUSV9CQVRDSF9NQVhfMF9DRE1B
X01VTFRJX0JBVENIX01BWF9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweGZmZmZmZmZmLCBO
VkRMQV9DRkdST01fQ0ZHUk9NX0NETUFfTVVMVElfQkFUQ0hfTUFYXzBfQ0RNQV9NVUxUSV9C
QVRDSF9NQVhfU0hJRlQpDQo+ICsNCj4gKw0KPiArLy8gUmVnaXN0ZXIgTlZETEFfQ0ZHUk9N
X0NGR1JPTV9DRE1BX0lNQUdFX0lOX0ZPUk1BVFNfUEFDS0VEXzANCj4gKyNkZWZpbmUgTlZE
TEFfQ0ZHUk9NX0NGR1JPTV9DRE1BX0lNQUdFX0lOX0ZPUk1BVFNfUEFDS0VEXzAJCQlfTUtf
QUREUl9DT05TVCgweDU0KQ0KPiArI2RlZmluZSBOVkRMQV9DRkdST01fQ0ZHUk9NX0NETUFf
SU1BR0VfSU5fRk9STUFUU19QQUNLRURfMF9DRE1BX0lNQUdFX0lOX0ZPUk1BVFNfUEFDS0VE
X1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDApDQo+ICsjZGVmaW5lIE5WRExBX0NGR1JPTV9D
RkdST01fQ0RNQV9JTUFHRV9JTl9GT1JNQVRTX1BBQ0tFRF8wX0NETUFfSU1BR0VfSU5fRk9S
TUFUU19QQUNLRURfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHhmZmZmZmZmZiwgTlZETEFf
Q0ZHUk9NX0NGR1JPTV9DRE1BX0lNQUdFX0lOX0ZPUk1BVFNfUEFDS0VEXzBfQ0RNQV9JTUFH
RV9JTl9GT1JNQVRTX1BBQ0tFRF9TSElGVCkNCj4gKw0KPiArDQo+ICsvLyBSZWdpc3RlciBO
VkRMQV9DRkdST01fQ0ZHUk9NX0NETUFfSU1BR0VfSU5fRk9STUFUU19TRU1JXzANCj4gKyNk
ZWZpbmUgTlZETEFfQ0ZHUk9NX0NGR1JPTV9DRE1BX0lNQUdFX0lOX0ZPUk1BVFNfU0VNSV8w
CQkJX01LX0FERFJfQ09OU1QoMHg1OCkNCj4gKyNkZWZpbmUgTlZETEFfQ0ZHUk9NX0NGR1JP
TV9DRE1BX0lNQUdFX0lOX0ZPUk1BVFNfU0VNSV8wX0NETUFfSU1BR0VfSU5fRk9STUFUU19T
RU1JX1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDApDQo+ICsjZGVmaW5lIE5WRExBX0NGR1JP
TV9DRkdST01fQ0RNQV9JTUFHRV9JTl9GT1JNQVRTX1NFTUlfMF9DRE1BX0lNQUdFX0lOX0ZP
Uk1BVFNfU0VNSV9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweGZmZmZmZmZmLCBOVkRMQV9D
RkdST01fQ0ZHUk9NX0NETUFfSU1BR0VfSU5fRk9STUFUU19TRU1JXzBfQ0RNQV9JTUFHRV9J
Tl9GT1JNQVRTX1NFTUlfU0hJRlQpDQo+ICsNCj4gKw0KPiArLy8gUmVnaXN0ZXIgTlZETEFf
Q0ZHUk9NX0NGR1JPTV9DQlVGX0RFU0NfMA0KPiArI2RlZmluZSBOVkRMQV9DRkdST01fQ0ZH
Uk9NX0NCVUZfREVTQ18wCQkJX01LX0FERFJfQ09OU1QoMHg1YykNCj4gKyNkZWZpbmUgTlZE
TEFfQ0ZHUk9NX0NGR1JPTV9DQlVGX0RFU0NfMF9DQlVGX0RFU0NfU0hJRlQJCQlfTUtfU0hJ
RlRfQ09OU1QoMCkNCj4gKyNkZWZpbmUgTlZETEFfQ0ZHUk9NX0NGR1JPTV9DQlVGX0RFU0Nf
MF9DQlVGX0RFU0NfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHhmZmZmZmZmZiwgTlZETEFf
Q0ZHUk9NX0NGR1JPTV9DQlVGX0RFU0NfMF9DQlVGX0RFU0NfU0hJRlQpDQo+ICsNCj4gKw0K
PiArLy8gUmVnaXN0ZXIgTlZETEFfQ0ZHUk9NX0NGR1JPTV9DQlVGX0NBUF9JTkNPTVBBVF8w
DQo+ICsjZGVmaW5lIE5WRExBX0NGR1JPTV9DRkdST01fQ0JVRl9DQVBfSU5DT01QQVRfMAkJ
CV9NS19BRERSX0NPTlNUKDB4NjApDQo+ICsjZGVmaW5lIE5WRExBX0NGR1JPTV9DRkdST01f
Q0JVRl9DQVBfSU5DT01QQVRfMF9DQlVGX0NBUF9JTkNPTVBBVF9TSElGVAkJCV9NS19TSElG
VF9DT05TVCgwKQ0KPiArI2RlZmluZSBOVkRMQV9DRkdST01fQ0ZHUk9NX0NCVUZfQ0FQX0lO
Q09NUEFUXzBfQ0JVRl9DQVBfSU5DT01QQVRfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHhm
ZmZmZmZmZiwgTlZETEFfQ0ZHUk9NX0NGR1JPTV9DQlVGX0NBUF9JTkNPTVBBVF8wX0NCVUZf
Q0FQX0lOQ09NUEFUX1NISUZUKQ0KPiArDQo+ICsNCj4gKy8vIFJlZ2lzdGVyIE5WRExBX0NG
R1JPTV9DRkdST01fQ0JVRl9DQVBfQ09NUEFUXzANCj4gKyNkZWZpbmUgTlZETEFfQ0ZHUk9N
X0NGR1JPTV9DQlVGX0NBUF9DT01QQVRfMAkJCV9NS19BRERSX0NPTlNUKDB4NjQpDQo+ICsj
ZGVmaW5lIE5WRExBX0NGR1JPTV9DRkdST01fQ0JVRl9DQVBfQ09NUEFUXzBfQ0JVRl9DQVBf
Q09NUEFUX1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDApDQo+ICsjZGVmaW5lIE5WRExBX0NG
R1JPTV9DRkdST01fQ0JVRl9DQVBfQ09NUEFUXzBfQ0JVRl9DQVBfQ09NUEFUX0ZJRUxECQkJ
X01LX0ZJRUxEX0NPTlNUKDB4ZmZmZmZmZmYsIE5WRExBX0NGR1JPTV9DRkdST01fQ0JVRl9D
QVBfQ09NUEFUXzBfQ0JVRl9DQVBfQ09NUEFUX1NISUZUKQ0KPiArDQo+ICsNCj4gKy8vIFJl
Z2lzdGVyIE5WRExBX0NGR1JPTV9DRkdST01fQ0JVRl9CQVNFX0NCVUZfQkFOS19OVU1fMA0K
PiArI2RlZmluZSBOVkRMQV9DRkdST01fQ0ZHUk9NX0NCVUZfQkFTRV9DQlVGX0JBTktfTlVN
XzAJCQlfTUtfQUREUl9DT05TVCgweDY4KQ0KPiArI2RlZmluZSBOVkRMQV9DRkdST01fQ0ZH
Uk9NX0NCVUZfQkFTRV9DQlVGX0JBTktfTlVNXzBfQ0JVRl9CQVNFX0NCVUZfQkFOS19OVU1f
U0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMCkNCj4gKyNkZWZpbmUgTlZETEFfQ0ZHUk9NX0NG
R1JPTV9DQlVGX0JBU0VfQ0JVRl9CQU5LX05VTV8wX0NCVUZfQkFTRV9DQlVGX0JBTktfTlVN
X0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4ZmZmZmZmZmYsIE5WRExBX0NGR1JPTV9DRkdS
T01fQ0JVRl9CQVNFX0NCVUZfQkFOS19OVU1fMF9DQlVGX0JBU0VfQ0JVRl9CQU5LX05VTV9T
SElGVCkNCj4gKw0KPiArDQo+ICsvLyBSZWdpc3RlciBOVkRMQV9DRkdST01fQ0ZHUk9NX0NC
VUZfQkFTRV9DQlVGX0JBTktfV0lEVEhfMA0KPiArI2RlZmluZSBOVkRMQV9DRkdST01fQ0ZH
Uk9NX0NCVUZfQkFTRV9DQlVGX0JBTktfV0lEVEhfMAkJCV9NS19BRERSX0NPTlNUKDB4NmMp
DQo+ICsjZGVmaW5lIE5WRExBX0NGR1JPTV9DRkdST01fQ0JVRl9CQVNFX0NCVUZfQkFOS19X
SURUSF8wX0NCVUZfQkFTRV9DQlVGX0JBTktfV0lEVEhfU0hJRlQJCQlfTUtfU0hJRlRfQ09O
U1QoMCkNCj4gKyNkZWZpbmUgTlZETEFfQ0ZHUk9NX0NGR1JPTV9DQlVGX0JBU0VfQ0JVRl9C
QU5LX1dJRFRIXzBfQ0JVRl9CQVNFX0NCVUZfQkFOS19XSURUSF9GSUVMRAkJCV9NS19GSUVM
RF9DT05TVCgweGZmZmZmZmZmLCBOVkRMQV9DRkdST01fQ0ZHUk9NX0NCVUZfQkFTRV9DQlVG
X0JBTktfV0lEVEhfMF9DQlVGX0JBU0VfQ0JVRl9CQU5LX1dJRFRIX1NISUZUKQ0KPiArDQo+
ICsNCj4gKy8vIFJlZ2lzdGVyIE5WRExBX0NGR1JPTV9DRkdST01fQ0JVRl9CQVNFX0NCVUZf
QkFOS19ERVBUSF8wDQo+ICsjZGVmaW5lIE5WRExBX0NGR1JPTV9DRkdST01fQ0JVRl9CQVNF
X0NCVUZfQkFOS19ERVBUSF8wCQkJX01LX0FERFJfQ09OU1QoMHg3MCkNCj4gKyNkZWZpbmUg
TlZETEFfQ0ZHUk9NX0NGR1JPTV9DQlVGX0JBU0VfQ0JVRl9CQU5LX0RFUFRIXzBfQ0JVRl9C
QVNFX0NCVUZfQkFOS19ERVBUSF9TSElGVAkJCV9NS19TSElGVF9DT05TVCgwKQ0KPiArI2Rl
ZmluZSBOVkRMQV9DRkdST01fQ0ZHUk9NX0NCVUZfQkFTRV9DQlVGX0JBTktfREVQVEhfMF9D
QlVGX0JBU0VfQ0JVRl9CQU5LX0RFUFRIX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4ZmZm
ZmZmZmYsIE5WRExBX0NGR1JPTV9DRkdST01fQ0JVRl9CQVNFX0NCVUZfQkFOS19ERVBUSF8w
X0NCVUZfQkFTRV9DQlVGX0JBTktfREVQVEhfU0hJRlQpDQo+ICsNCj4gKw0KPiArLy8gUmVn
aXN0ZXIgTlZETEFfQ0ZHUk9NX0NGR1JPTV9DQlVGX0JBU0VfQ0RNQV9JRF8wDQo+ICsjZGVm
aW5lIE5WRExBX0NGR1JPTV9DRkdST01fQ0JVRl9CQVNFX0NETUFfSURfMAkJCV9NS19BRERS
X0NPTlNUKDB4NzQpDQo+ICsjZGVmaW5lIE5WRExBX0NGR1JPTV9DRkdST01fQ0JVRl9CQVNF
X0NETUFfSURfMF9DQlVGX0JBU0VfQ0RNQV9JRF9TSElGVAkJCV9NS19TSElGVF9DT05TVCgw
KQ0KPiArI2RlZmluZSBOVkRMQV9DRkdST01fQ0ZHUk9NX0NCVUZfQkFTRV9DRE1BX0lEXzBf
Q0JVRl9CQVNFX0NETUFfSURfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHhmZmZmZmZmZiwg
TlZETEFfQ0ZHUk9NX0NGR1JPTV9DQlVGX0JBU0VfQ0RNQV9JRF8wX0NCVUZfQkFTRV9DRE1B
X0lEX1NISUZUKQ0KPiArDQo+ICsNCj4gKy8vIFJlZ2lzdGVyIE5WRExBX0NGR1JPTV9DRkdS
T01fQ1NDX0RFU0NfMA0KPiArI2RlZmluZSBOVkRMQV9DRkdST01fQ0ZHUk9NX0NTQ19ERVND
XzAJCQlfTUtfQUREUl9DT05TVCgweDc4KQ0KPiArI2RlZmluZSBOVkRMQV9DRkdST01fQ0ZH
Uk9NX0NTQ19ERVNDXzBfQ1NDX0RFU0NfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMCkNCj4g
KyNkZWZpbmUgTlZETEFfQ0ZHUk9NX0NGR1JPTV9DU0NfREVTQ18wX0NTQ19ERVNDX0ZJRUxE
CQkJX01LX0ZJRUxEX0NPTlNUKDB4ZmZmZmZmZmYsIE5WRExBX0NGR1JPTV9DRkdST01fQ1ND
X0RFU0NfMF9DU0NfREVTQ19TSElGVCkNCj4gKw0KPiArDQo+ICsvLyBSZWdpc3RlciBOVkRM
QV9DRkdST01fQ0ZHUk9NX0NTQ19DQVBfSU5DT01QQVRfMA0KPiArI2RlZmluZSBOVkRMQV9D
RkdST01fQ0ZHUk9NX0NTQ19DQVBfSU5DT01QQVRfMAkJCV9NS19BRERSX0NPTlNUKDB4N2Mp
DQo+ICsjZGVmaW5lIE5WRExBX0NGR1JPTV9DRkdST01fQ1NDX0NBUF9JTkNPTVBBVF8wX0NT
Q19DQVBfSU5DT01QQVRfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMCkNCj4gKyNkZWZpbmUg
TlZETEFfQ0ZHUk9NX0NGR1JPTV9DU0NfQ0FQX0lOQ09NUEFUXzBfQ1NDX0NBUF9JTkNPTVBB
VF9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweGZmZmZmZmZmLCBOVkRMQV9DRkdST01fQ0ZH
Uk9NX0NTQ19DQVBfSU5DT01QQVRfMF9DU0NfQ0FQX0lOQ09NUEFUX1NISUZUKQ0KPiArDQo+
ICsNCj4gKy8vIFJlZ2lzdGVyIE5WRExBX0NGR1JPTV9DRkdST01fQ1NDX0NBUF9DT01QQVRf
MA0KPiArI2RlZmluZSBOVkRMQV9DRkdST01fQ0ZHUk9NX0NTQ19DQVBfQ09NUEFUXzAJCQlf
TUtfQUREUl9DT05TVCgweDgwKQ0KPiArI2RlZmluZSBOVkRMQV9DRkdST01fQ0ZHUk9NX0NT
Q19DQVBfQ09NUEFUXzBfQ1NDX0NBUF9DT01QQVRfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1Qo
MCkNCj4gKyNkZWZpbmUgTlZETEFfQ0ZHUk9NX0NGR1JPTV9DU0NfQ0FQX0NPTVBBVF8wX0NT
Q19DQVBfQ09NUEFUX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4ZmZmZmZmZmYsIE5WRExB
X0NGR1JPTV9DRkdST01fQ1NDX0NBUF9DT01QQVRfMF9DU0NfQ0FQX0NPTVBBVF9TSElGVCkN
Cj4gKw0KPiArDQo+ICsvLyBSZWdpc3RlciBOVkRMQV9DRkdST01fQ0ZHUk9NX0NTQ19CQVNF
X0ZFQVRVUkVfVFlQRVNfMA0KPiArI2RlZmluZSBOVkRMQV9DRkdST01fQ0ZHUk9NX0NTQ19C
QVNFX0ZFQVRVUkVfVFlQRVNfMAkJCV9NS19BRERSX0NPTlNUKDB4ODQpDQo+ICsjZGVmaW5l
IE5WRExBX0NGR1JPTV9DRkdST01fQ1NDX0JBU0VfRkVBVFVSRV9UWVBFU18wX0NTQ19CQVNF
X0ZFQVRVUkVfVFlQRVNfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMCkNCj4gKyNkZWZpbmUg
TlZETEFfQ0ZHUk9NX0NGR1JPTV9DU0NfQkFTRV9GRUFUVVJFX1RZUEVTXzBfQ1NDX0JBU0Vf
RkVBVFVSRV9UWVBFU19GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweGZmZiwgTlZETEFfQ0ZH
Uk9NX0NGR1JPTV9DU0NfQkFTRV9GRUFUVVJFX1RZUEVTXzBfQ1NDX0JBU0VfRkVBVFVSRV9U
WVBFU19TSElGVCkNCj4gKw0KPiArDQo+ICsvLyBSZWdpc3RlciBOVkRMQV9DRkdST01fQ0ZH
Uk9NX0NTQ19CQVNFX1dFSUdIVF9UWVBFU18wDQo+ICsjZGVmaW5lIE5WRExBX0NGR1JPTV9D
RkdST01fQ1NDX0JBU0VfV0VJR0hUX1RZUEVTXzAJCQlfTUtfQUREUl9DT05TVCgweDg4KQ0K
PiArI2RlZmluZSBOVkRMQV9DRkdST01fQ0ZHUk9NX0NTQ19CQVNFX1dFSUdIVF9UWVBFU18w
X0NTQ19CQVNFX1dFSUdIVF9UWVBFU19TSElGVAkJCV9NS19TSElGVF9DT05TVCgwKQ0KPiAr
I2RlZmluZSBOVkRMQV9DRkdST01fQ0ZHUk9NX0NTQ19CQVNFX1dFSUdIVF9UWVBFU18wX0NT
Q19CQVNFX1dFSUdIVF9UWVBFU19GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweGZmZiwgTlZE
TEFfQ0ZHUk9NX0NGR1JPTV9DU0NfQkFTRV9XRUlHSFRfVFlQRVNfMF9DU0NfQkFTRV9XRUlH
SFRfVFlQRVNfU0hJRlQpDQo+ICsNCj4gKw0KPiArLy8gUmVnaXN0ZXIgTlZETEFfQ0ZHUk9N
X0NGR1JPTV9DU0NfQkFTRV9BVE9NSUNfQ18wDQo+ICsjZGVmaW5lIE5WRExBX0NGR1JPTV9D
RkdST01fQ1NDX0JBU0VfQVRPTUlDX0NfMAkJCV9NS19BRERSX0NPTlNUKDB4OGMpDQo+ICsj
ZGVmaW5lIE5WRExBX0NGR1JPTV9DRkdST01fQ1NDX0JBU0VfQVRPTUlDX0NfMF9DU0NfQkFT
RV9BVE9NSUNfQ19TSElGVAkJCV9NS19TSElGVF9DT05TVCgwKQ0KPiArI2RlZmluZSBOVkRM
QV9DRkdST01fQ0ZHUk9NX0NTQ19CQVNFX0FUT01JQ19DXzBfQ1NDX0JBU0VfQVRPTUlDX0Nf
RklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHhmZmZmZmZmZiwgTlZETEFfQ0ZHUk9NX0NGR1JP
TV9DU0NfQkFTRV9BVE9NSUNfQ18wX0NTQ19CQVNFX0FUT01JQ19DX1NISUZUKQ0KPiArDQo+
ICsNCj4gKy8vIFJlZ2lzdGVyIE5WRExBX0NGR1JPTV9DRkdST01fQ1NDX0JBU0VfQVRPTUlD
X0tfMA0KPiArI2RlZmluZSBOVkRMQV9DRkdST01fQ0ZHUk9NX0NTQ19CQVNFX0FUT01JQ19L
XzAJCQlfTUtfQUREUl9DT05TVCgweDkwKQ0KPiArI2RlZmluZSBOVkRMQV9DRkdST01fQ0ZH
Uk9NX0NTQ19CQVNFX0FUT01JQ19LXzBfQ1NDX0JBU0VfQVRPTUlDX0tfU0hJRlQJCQlfTUtf
U0hJRlRfQ09OU1QoMCkNCj4gKyNkZWZpbmUgTlZETEFfQ0ZHUk9NX0NGR1JPTV9DU0NfQkFT
RV9BVE9NSUNfS18wX0NTQ19CQVNFX0FUT01JQ19LX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNU
KDB4ZmZmZmZmZmYsIE5WRExBX0NGR1JPTV9DRkdST01fQ1NDX0JBU0VfQVRPTUlDX0tfMF9D
U0NfQkFTRV9BVE9NSUNfS19TSElGVCkNCj4gKw0KPiArDQo+ICsvLyBSZWdpc3RlciBOVkRM
QV9DRkdST01fQ0ZHUk9NX0NTQ19CQVNFX0FUT01JQ19NXzANCj4gKyNkZWZpbmUgTlZETEFf
Q0ZHUk9NX0NGR1JPTV9DU0NfQkFTRV9BVE9NSUNfTV8wCQkJX01LX0FERFJfQ09OU1QoMHg5
NCkNCj4gKyNkZWZpbmUgTlZETEFfQ0ZHUk9NX0NGR1JPTV9DU0NfQkFTRV9BVE9NSUNfTV8w
X0NTQ19CQVNFX0FUT01JQ19NX1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDApDQo+ICsjZGVm
aW5lIE5WRExBX0NGR1JPTV9DRkdST01fQ1NDX0JBU0VfQVRPTUlDX01fMF9DU0NfQkFTRV9B
VE9NSUNfTV9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweGZmZmZmZmZmLCBOVkRMQV9DRkdS
T01fQ0ZHUk9NX0NTQ19CQVNFX0FUT01JQ19NXzBfQ1NDX0JBU0VfQVRPTUlDX01fU0hJRlQp
DQo+ICsNCj4gKw0KPiArLy8gUmVnaXN0ZXIgTlZETEFfQ0ZHUk9NX0NGR1JPTV9DU0NfQkFT
RV9DQlVGX0JBTktfTlVNXzANCj4gKyNkZWZpbmUgTlZETEFfQ0ZHUk9NX0NGR1JPTV9DU0Nf
QkFTRV9DQlVGX0JBTktfTlVNXzAJCQlfTUtfQUREUl9DT05TVCgweDk4KQ0KPiArI2RlZmlu
ZSBOVkRMQV9DRkdST01fQ0ZHUk9NX0NTQ19CQVNFX0NCVUZfQkFOS19OVU1fMF9DU0NfQkFT
RV9DQlVGX0JBTktfTlVNX1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDApDQo+ICsjZGVmaW5l
IE5WRExBX0NGR1JPTV9DRkdST01fQ1NDX0JBU0VfQ0JVRl9CQU5LX05VTV8wX0NTQ19CQVNF
X0NCVUZfQkFOS19OVU1fRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHhmZmZmZmZmZiwgTlZE
TEFfQ0ZHUk9NX0NGR1JPTV9DU0NfQkFTRV9DQlVGX0JBTktfTlVNXzBfQ1NDX0JBU0VfQ0JV
Rl9CQU5LX05VTV9TSElGVCkNCj4gKw0KPiArDQo+ICsvLyBSZWdpc3RlciBOVkRMQV9DRkdS
T01fQ0ZHUk9NX0NTQ19CQVNFX0NCVUZfQkFOS19XSURUSF8wDQo+ICsjZGVmaW5lIE5WRExB
X0NGR1JPTV9DRkdST01fQ1NDX0JBU0VfQ0JVRl9CQU5LX1dJRFRIXzAJCQlfTUtfQUREUl9D
T05TVCgweDljKQ0KPiArI2RlZmluZSBOVkRMQV9DRkdST01fQ0ZHUk9NX0NTQ19CQVNFX0NC
VUZfQkFOS19XSURUSF8wX0NTQ19CQVNFX0NCVUZfQkFOS19XSURUSF9TSElGVAkJCV9NS19T
SElGVF9DT05TVCgwKQ0KPiArI2RlZmluZSBOVkRMQV9DRkdST01fQ0ZHUk9NX0NTQ19CQVNF
X0NCVUZfQkFOS19XSURUSF8wX0NTQ19CQVNFX0NCVUZfQkFOS19XSURUSF9GSUVMRAkJCV9N
S19GSUVMRF9DT05TVCgweGZmZmZmZmZmLCBOVkRMQV9DRkdST01fQ0ZHUk9NX0NTQ19CQVNF
X0NCVUZfQkFOS19XSURUSF8wX0NTQ19CQVNFX0NCVUZfQkFOS19XSURUSF9TSElGVCkNCj4g
Kw0KPiArDQo+ICsvLyBSZWdpc3RlciBOVkRMQV9DRkdST01fQ0ZHUk9NX0NTQ19CQVNFX0NC
VUZfQkFOS19ERVBUSF8wDQo+ICsjZGVmaW5lIE5WRExBX0NGR1JPTV9DRkdST01fQ1NDX0JB
U0VfQ0JVRl9CQU5LX0RFUFRIXzAJCQlfTUtfQUREUl9DT05TVCgweGEwKQ0KPiArI2RlZmlu
ZSBOVkRMQV9DRkdST01fQ0ZHUk9NX0NTQ19CQVNFX0NCVUZfQkFOS19ERVBUSF8wX0NTQ19C
QVNFX0NCVUZfQkFOS19ERVBUSF9TSElGVAkJCV9NS19TSElGVF9DT05TVCgwKQ0KPiArI2Rl
ZmluZSBOVkRMQV9DRkdST01fQ0ZHUk9NX0NTQ19CQVNFX0NCVUZfQkFOS19ERVBUSF8wX0NT
Q19CQVNFX0NCVUZfQkFOS19ERVBUSF9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweGZmZmZm
ZmZmLCBOVkRMQV9DRkdST01fQ0ZHUk9NX0NTQ19CQVNFX0NCVUZfQkFOS19ERVBUSF8wX0NT
Q19CQVNFX0NCVUZfQkFOS19ERVBUSF9TSElGVCkNCj4gKw0KPiArDQo+ICsvLyBSZWdpc3Rl
ciBOVkRMQV9DRkdST01fQ0ZHUk9NX0NTQ19CQVNFX0NETUFfSURfMA0KPiArI2RlZmluZSBO
VkRMQV9DRkdST01fQ0ZHUk9NX0NTQ19CQVNFX0NETUFfSURfMAkJCV9NS19BRERSX0NPTlNU
KDB4YTQpDQo+ICsjZGVmaW5lIE5WRExBX0NGR1JPTV9DRkdST01fQ1NDX0JBU0VfQ0RNQV9J
RF8wX0NTQ19CQVNFX0NETUFfSURfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMCkNCj4gKyNk
ZWZpbmUgTlZETEFfQ0ZHUk9NX0NGR1JPTV9DU0NfQkFTRV9DRE1BX0lEXzBfQ1NDX0JBU0Vf
Q0RNQV9JRF9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweGZmZmZmZmZmLCBOVkRMQV9DRkdS
T01fQ0ZHUk9NX0NTQ19CQVNFX0NETUFfSURfMF9DU0NfQkFTRV9DRE1BX0lEX1NISUZUKQ0K
PiArDQo+ICsNCj4gKy8vIFJlZ2lzdGVyIE5WRExBX0NGR1JPTV9DRkdST01fQ1NDX01VTFRJ
X0JBVENIX01BWF8wDQo+ICsjZGVmaW5lIE5WRExBX0NGR1JPTV9DRkdST01fQ1NDX01VTFRJ
X0JBVENIX01BWF8wCQkJX01LX0FERFJfQ09OU1QoMHhhOCkNCj4gKyNkZWZpbmUgTlZETEFf
Q0ZHUk9NX0NGR1JPTV9DU0NfTVVMVElfQkFUQ0hfTUFYXzBfQ1NDX01VTFRJX0JBVENIX01B
WF9TSElGVAkJCV9NS19TSElGVF9DT05TVCgwKQ0KPiArI2RlZmluZSBOVkRMQV9DRkdST01f
Q0ZHUk9NX0NTQ19NVUxUSV9CQVRDSF9NQVhfMF9DU0NfTVVMVElfQkFUQ0hfTUFYX0ZJRUxE
CQkJX01LX0ZJRUxEX0NPTlNUKDB4ZmZmZmZmZmYsIE5WRExBX0NGR1JPTV9DRkdST01fQ1ND
X01VTFRJX0JBVENIX01BWF8wX0NTQ19NVUxUSV9CQVRDSF9NQVhfU0hJRlQpDQo+ICsNCj4g
Kw0KPiArLy8gUmVnaXN0ZXIgTlZETEFfQ0ZHUk9NX0NGR1JPTV9DTUFDX0FfREVTQ18wDQo+
ICsjZGVmaW5lIE5WRExBX0NGR1JPTV9DRkdST01fQ01BQ19BX0RFU0NfMAkJCV9NS19BRERS
X0NPTlNUKDB4YWMpDQo+ICsjZGVmaW5lIE5WRExBX0NGR1JPTV9DRkdST01fQ01BQ19BX0RF
U0NfMF9DTUFDX0FfREVTQ19TSElGVAkJCV9NS19TSElGVF9DT05TVCgwKQ0KPiArI2RlZmlu
ZSBOVkRMQV9DRkdST01fQ0ZHUk9NX0NNQUNfQV9ERVNDXzBfQ01BQ19BX0RFU0NfRklFTEQJ
CQlfTUtfRklFTERfQ09OU1QoMHhmZmZmZmZmZiwgTlZETEFfQ0ZHUk9NX0NGR1JPTV9DTUFD
X0FfREVTQ18wX0NNQUNfQV9ERVNDX1NISUZUKQ0KPiArDQo+ICsNCj4gKy8vIFJlZ2lzdGVy
IE5WRExBX0NGR1JPTV9DRkdST01fQ01BQ19BX0NBUF9JTkNPTVBBVF8wDQo+ICsjZGVmaW5l
IE5WRExBX0NGR1JPTV9DRkdST01fQ01BQ19BX0NBUF9JTkNPTVBBVF8wCQkJX01LX0FERFJf
Q09OU1QoMHhiMCkNCj4gKyNkZWZpbmUgTlZETEFfQ0ZHUk9NX0NGR1JPTV9DTUFDX0FfQ0FQ
X0lOQ09NUEFUXzBfQ01BQ19BX0NBUF9JTkNPTVBBVF9TSElGVAkJCV9NS19TSElGVF9DT05T
VCgwKQ0KPiArI2RlZmluZSBOVkRMQV9DRkdST01fQ0ZHUk9NX0NNQUNfQV9DQVBfSU5DT01Q
QVRfMF9DTUFDX0FfQ0FQX0lOQ09NUEFUX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4ZmZm
ZmZmZmYsIE5WRExBX0NGR1JPTV9DRkdST01fQ01BQ19BX0NBUF9JTkNPTVBBVF8wX0NNQUNf
QV9DQVBfSU5DT01QQVRfU0hJRlQpDQo+ICsNCj4gKw0KPiArLy8gUmVnaXN0ZXIgTlZETEFf
Q0ZHUk9NX0NGR1JPTV9DTUFDX0FfQ0FQX0NPTVBBVF8wDQo+ICsjZGVmaW5lIE5WRExBX0NG
R1JPTV9DRkdST01fQ01BQ19BX0NBUF9DT01QQVRfMAkJCV9NS19BRERSX0NPTlNUKDB4YjQp
DQo+ICsjZGVmaW5lIE5WRExBX0NGR1JPTV9DRkdST01fQ01BQ19BX0NBUF9DT01QQVRfMF9D
TUFDX0FfQ0FQX0NPTVBBVF9TSElGVAkJCV9NS19TSElGVF9DT05TVCgwKQ0KPiArI2RlZmlu
ZSBOVkRMQV9DRkdST01fQ0ZHUk9NX0NNQUNfQV9DQVBfQ09NUEFUXzBfQ01BQ19BX0NBUF9D
T01QQVRfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHhmZmZmZmZmZiwgTlZETEFfQ0ZHUk9N
X0NGR1JPTV9DTUFDX0FfQ0FQX0NPTVBBVF8wX0NNQUNfQV9DQVBfQ09NUEFUX1NISUZUKQ0K
PiArDQo+ICsNCj4gKy8vIFJlZ2lzdGVyIE5WRExBX0NGR1JPTV9DRkdST01fQ01BQ19BX0JB
U0VfRkVBVFVSRV9UWVBFU18wDQo+ICsjZGVmaW5lIE5WRExBX0NGR1JPTV9DRkdST01fQ01B
Q19BX0JBU0VfRkVBVFVSRV9UWVBFU18wCQkJX01LX0FERFJfQ09OU1QoMHhiOCkNCj4gKyNk
ZWZpbmUgTlZETEFfQ0ZHUk9NX0NGR1JPTV9DTUFDX0FfQkFTRV9GRUFUVVJFX1RZUEVTXzBf
Q01BQ19BX0JBU0VfRkVBVFVSRV9UWVBFU19TSElGVAkJCV9NS19TSElGVF9DT05TVCgwKQ0K
PiArI2RlZmluZSBOVkRMQV9DRkdST01fQ0ZHUk9NX0NNQUNfQV9CQVNFX0ZFQVRVUkVfVFlQ
RVNfMF9DTUFDX0FfQkFTRV9GRUFUVVJFX1RZUEVTX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNU
KDB4ZmZmLCBOVkRMQV9DRkdST01fQ0ZHUk9NX0NNQUNfQV9CQVNFX0ZFQVRVUkVfVFlQRVNf
MF9DTUFDX0FfQkFTRV9GRUFUVVJFX1RZUEVTX1NISUZUKQ0KPiArDQo+ICsNCj4gKy8vIFJl
Z2lzdGVyIE5WRExBX0NGR1JPTV9DRkdST01fQ01BQ19BX0JBU0VfV0VJR0hUX1RZUEVTXzAN
Cj4gKyNkZWZpbmUgTlZETEFfQ0ZHUk9NX0NGR1JPTV9DTUFDX0FfQkFTRV9XRUlHSFRfVFlQ
RVNfMAkJCV9NS19BRERSX0NPTlNUKDB4YmMpDQo+ICsjZGVmaW5lIE5WRExBX0NGR1JPTV9D
RkdST01fQ01BQ19BX0JBU0VfV0VJR0hUX1RZUEVTXzBfQ01BQ19BX0JBU0VfV0VJR0hUX1RZ
UEVTX1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDApDQo+ICsjZGVmaW5lIE5WRExBX0NGR1JP
TV9DRkdST01fQ01BQ19BX0JBU0VfV0VJR0hUX1RZUEVTXzBfQ01BQ19BX0JBU0VfV0VJR0hU
X1RZUEVTX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4ZmZmLCBOVkRMQV9DRkdST01fQ0ZH
Uk9NX0NNQUNfQV9CQVNFX1dFSUdIVF9UWVBFU18wX0NNQUNfQV9CQVNFX1dFSUdIVF9UWVBF
U19TSElGVCkNCj4gKw0KPiArDQo+ICsvLyBSZWdpc3RlciBOVkRMQV9DRkdST01fQ0ZHUk9N
X0NNQUNfQV9CQVNFX0FUT01JQ19DXzANCj4gKyNkZWZpbmUgTlZETEFfQ0ZHUk9NX0NGR1JP
TV9DTUFDX0FfQkFTRV9BVE9NSUNfQ18wCQkJX01LX0FERFJfQ09OU1QoMHhjMCkNCj4gKyNk
ZWZpbmUgTlZETEFfQ0ZHUk9NX0NGR1JPTV9DTUFDX0FfQkFTRV9BVE9NSUNfQ18wX0NNQUNf
QV9CQVNFX0FUT01JQ19DX1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDApDQo+ICsjZGVmaW5l
IE5WRExBX0NGR1JPTV9DRkdST01fQ01BQ19BX0JBU0VfQVRPTUlDX0NfMF9DTUFDX0FfQkFT
RV9BVE9NSUNfQ19GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweGZmZmZmZmZmLCBOVkRMQV9D
RkdST01fQ0ZHUk9NX0NNQUNfQV9CQVNFX0FUT01JQ19DXzBfQ01BQ19BX0JBU0VfQVRPTUlD
X0NfU0hJRlQpDQo+ICsNCj4gKw0KPiArLy8gUmVnaXN0ZXIgTlZETEFfQ0ZHUk9NX0NGR1JP
TV9DTUFDX0FfQkFTRV9BVE9NSUNfS18wDQo+ICsjZGVmaW5lIE5WRExBX0NGR1JPTV9DRkdS
T01fQ01BQ19BX0JBU0VfQVRPTUlDX0tfMAkJCV9NS19BRERSX0NPTlNUKDB4YzQpDQo+ICsj
ZGVmaW5lIE5WRExBX0NGR1JPTV9DRkdST01fQ01BQ19BX0JBU0VfQVRPTUlDX0tfMF9DTUFD
X0FfQkFTRV9BVE9NSUNfS19TSElGVAkJCV9NS19TSElGVF9DT05TVCgwKQ0KPiArI2RlZmlu
ZSBOVkRMQV9DRkdST01fQ0ZHUk9NX0NNQUNfQV9CQVNFX0FUT01JQ19LXzBfQ01BQ19BX0JB
U0VfQVRPTUlDX0tfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHhmZmZmZmZmZiwgTlZETEFf
Q0ZHUk9NX0NGR1JPTV9DTUFDX0FfQkFTRV9BVE9NSUNfS18wX0NNQUNfQV9CQVNFX0FUT01J
Q19LX1NISUZUKQ0KPiArDQo+ICsNCj4gKy8vIFJlZ2lzdGVyIE5WRExBX0NGR1JPTV9DRkdS
T01fQ01BQ19BX0JBU0VfQ0RNQV9JRF8wDQo+ICsjZGVmaW5lIE5WRExBX0NGR1JPTV9DRkdS
T01fQ01BQ19BX0JBU0VfQ0RNQV9JRF8wCQkJX01LX0FERFJfQ09OU1QoMHhjOCkNCj4gKyNk
ZWZpbmUgTlZETEFfQ0ZHUk9NX0NGR1JPTV9DTUFDX0FfQkFTRV9DRE1BX0lEXzBfQ01BQ19B
X0JBU0VfQ0RNQV9JRF9TSElGVAkJCV9NS19TSElGVF9DT05TVCgwKQ0KPiArI2RlZmluZSBO
VkRMQV9DRkdST01fQ0ZHUk9NX0NNQUNfQV9CQVNFX0NETUFfSURfMF9DTUFDX0FfQkFTRV9D
RE1BX0lEX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4ZmZmZmZmZmYsIE5WRExBX0NGR1JP
TV9DRkdST01fQ01BQ19BX0JBU0VfQ0RNQV9JRF8wX0NNQUNfQV9CQVNFX0NETUFfSURfU0hJ
RlQpDQo+ICsNCj4gKw0KPiArLy8gUmVnaXN0ZXIgTlZETEFfQ0ZHUk9NX0NGR1JPTV9DTUFD
X0JfREVTQ18wDQo+ICsjZGVmaW5lIE5WRExBX0NGR1JPTV9DRkdST01fQ01BQ19CX0RFU0Nf
MAkJCV9NS19BRERSX0NPTlNUKDB4Y2MpDQo+ICsjZGVmaW5lIE5WRExBX0NGR1JPTV9DRkdS
T01fQ01BQ19CX0RFU0NfMF9DTUFDX0JfREVTQ19TSElGVAkJCV9NS19TSElGVF9DT05TVCgw
KQ0KPiArI2RlZmluZSBOVkRMQV9DRkdST01fQ0ZHUk9NX0NNQUNfQl9ERVNDXzBfQ01BQ19C
X0RFU0NfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHhmZmZmZmZmZiwgTlZETEFfQ0ZHUk9N
X0NGR1JPTV9DTUFDX0JfREVTQ18wX0NNQUNfQl9ERVNDX1NISUZUKQ0KPiArDQo+ICsNCj4g
Ky8vIFJlZ2lzdGVyIE5WRExBX0NGR1JPTV9DRkdST01fQ01BQ19CX0NBUF9JTkNPTVBBVF8w
DQo+ICsjZGVmaW5lIE5WRExBX0NGR1JPTV9DRkdST01fQ01BQ19CX0NBUF9JTkNPTVBBVF8w
CQkJX01LX0FERFJfQ09OU1QoMHhkMCkNCj4gKyNkZWZpbmUgTlZETEFfQ0ZHUk9NX0NGR1JP
TV9DTUFDX0JfQ0FQX0lOQ09NUEFUXzBfQ01BQ19CX0NBUF9JTkNPTVBBVF9TSElGVAkJCV9N
S19TSElGVF9DT05TVCgwKQ0KPiArI2RlZmluZSBOVkRMQV9DRkdST01fQ0ZHUk9NX0NNQUNf
Ql9DQVBfSU5DT01QQVRfMF9DTUFDX0JfQ0FQX0lOQ09NUEFUX0ZJRUxECQkJX01LX0ZJRUxE
X0NPTlNUKDB4ZmZmZmZmZmYsIE5WRExBX0NGR1JPTV9DRkdST01fQ01BQ19CX0NBUF9JTkNP
TVBBVF8wX0NNQUNfQl9DQVBfSU5DT01QQVRfU0hJRlQpDQo+ICsNCj4gKw0KPiArLy8gUmVn
aXN0ZXIgTlZETEFfQ0ZHUk9NX0NGR1JPTV9DTUFDX0JfQ0FQX0NPTVBBVF8wDQo+ICsjZGVm
aW5lIE5WRExBX0NGR1JPTV9DRkdST01fQ01BQ19CX0NBUF9DT01QQVRfMAkJCV9NS19BRERS
X0NPTlNUKDB4ZDQpDQo+ICsjZGVmaW5lIE5WRExBX0NGR1JPTV9DRkdST01fQ01BQ19CX0NB
UF9DT01QQVRfMF9DTUFDX0JfQ0FQX0NPTVBBVF9TSElGVAkJCV9NS19TSElGVF9DT05TVCgw
KQ0KPiArI2RlZmluZSBOVkRMQV9DRkdST01fQ0ZHUk9NX0NNQUNfQl9DQVBfQ09NUEFUXzBf
Q01BQ19CX0NBUF9DT01QQVRfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHhmZmZmZmZmZiwg
TlZETEFfQ0ZHUk9NX0NGR1JPTV9DTUFDX0JfQ0FQX0NPTVBBVF8wX0NNQUNfQl9DQVBfQ09N
UEFUX1NISUZUKQ0KPiArDQo+ICsNCj4gKy8vIFJlZ2lzdGVyIE5WRExBX0NGR1JPTV9DRkdS
T01fQ01BQ19CX0JBU0VfRkVBVFVSRV9UWVBFU18wDQo+ICsjZGVmaW5lIE5WRExBX0NGR1JP
TV9DRkdST01fQ01BQ19CX0JBU0VfRkVBVFVSRV9UWVBFU18wCQkJX01LX0FERFJfQ09OU1Qo
MHhkOCkNCj4gKyNkZWZpbmUgTlZETEFfQ0ZHUk9NX0NGR1JPTV9DTUFDX0JfQkFTRV9GRUFU
VVJFX1RZUEVTXzBfQ01BQ19CX0JBU0VfRkVBVFVSRV9UWVBFU19TSElGVAkJCV9NS19TSElG
VF9DT05TVCgwKQ0KPiArI2RlZmluZSBOVkRMQV9DRkdST01fQ0ZHUk9NX0NNQUNfQl9CQVNF
X0ZFQVRVUkVfVFlQRVNfMF9DTUFDX0JfQkFTRV9GRUFUVVJFX1RZUEVTX0ZJRUxECQkJX01L
X0ZJRUxEX0NPTlNUKDB4ZmZmLCBOVkRMQV9DRkdST01fQ0ZHUk9NX0NNQUNfQl9CQVNFX0ZF
QVRVUkVfVFlQRVNfMF9DTUFDX0JfQkFTRV9GRUFUVVJFX1RZUEVTX1NISUZUKQ0KPiArDQo+
ICsNCj4gKy8vIFJlZ2lzdGVyIE5WRExBX0NGR1JPTV9DRkdST01fQ01BQ19CX0JBU0VfV0VJ
R0hUX1RZUEVTXzANCj4gKyNkZWZpbmUgTlZETEFfQ0ZHUk9NX0NGR1JPTV9DTUFDX0JfQkFT
RV9XRUlHSFRfVFlQRVNfMAkJCV9NS19BRERSX0NPTlNUKDB4ZGMpDQo+ICsjZGVmaW5lIE5W
RExBX0NGR1JPTV9DRkdST01fQ01BQ19CX0JBU0VfV0VJR0hUX1RZUEVTXzBfQ01BQ19CX0JB
U0VfV0VJR0hUX1RZUEVTX1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDApDQo+ICsjZGVmaW5l
IE5WRExBX0NGR1JPTV9DRkdST01fQ01BQ19CX0JBU0VfV0VJR0hUX1RZUEVTXzBfQ01BQ19C
X0JBU0VfV0VJR0hUX1RZUEVTX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4ZmZmLCBOVkRM
QV9DRkdST01fQ0ZHUk9NX0NNQUNfQl9CQVNFX1dFSUdIVF9UWVBFU18wX0NNQUNfQl9CQVNF
X1dFSUdIVF9UWVBFU19TSElGVCkNCj4gKw0KPiArDQo+ICsvLyBSZWdpc3RlciBOVkRMQV9D
RkdST01fQ0ZHUk9NX0NNQUNfQl9CQVNFX0FUT01JQ19DXzANCj4gKyNkZWZpbmUgTlZETEFf
Q0ZHUk9NX0NGR1JPTV9DTUFDX0JfQkFTRV9BVE9NSUNfQ18wCQkJX01LX0FERFJfQ09OU1Qo
MHhlMCkNCj4gKyNkZWZpbmUgTlZETEFfQ0ZHUk9NX0NGR1JPTV9DTUFDX0JfQkFTRV9BVE9N
SUNfQ18wX0NNQUNfQl9CQVNFX0FUT01JQ19DX1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDAp
DQo+ICsjZGVmaW5lIE5WRExBX0NGR1JPTV9DRkdST01fQ01BQ19CX0JBU0VfQVRPTUlDX0Nf
MF9DTUFDX0JfQkFTRV9BVE9NSUNfQ19GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweGZmZmZm
ZmZmLCBOVkRMQV9DRkdST01fQ0ZHUk9NX0NNQUNfQl9CQVNFX0FUT01JQ19DXzBfQ01BQ19C
X0JBU0VfQVRPTUlDX0NfU0hJRlQpDQo+ICsNCj4gKw0KPiArLy8gUmVnaXN0ZXIgTlZETEFf
Q0ZHUk9NX0NGR1JPTV9DTUFDX0JfQkFTRV9BVE9NSUNfS18wDQo+ICsjZGVmaW5lIE5WRExB
X0NGR1JPTV9DRkdST01fQ01BQ19CX0JBU0VfQVRPTUlDX0tfMAkJCV9NS19BRERSX0NPTlNU
KDB4ZTQpDQo+ICsjZGVmaW5lIE5WRExBX0NGR1JPTV9DRkdST01fQ01BQ19CX0JBU0VfQVRP
TUlDX0tfMF9DTUFDX0JfQkFTRV9BVE9NSUNfS19TSElGVAkJCV9NS19TSElGVF9DT05TVCgw
KQ0KPiArI2RlZmluZSBOVkRMQV9DRkdST01fQ0ZHUk9NX0NNQUNfQl9CQVNFX0FUT01JQ19L
XzBfQ01BQ19CX0JBU0VfQVRPTUlDX0tfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHhmZmZm
ZmZmZiwgTlZETEFfQ0ZHUk9NX0NGR1JPTV9DTUFDX0JfQkFTRV9BVE9NSUNfS18wX0NNQUNf
Ql9CQVNFX0FUT01JQ19LX1NISUZUKQ0KPiArDQo+ICsNCj4gKy8vIFJlZ2lzdGVyIE5WRExB
X0NGR1JPTV9DRkdST01fQ01BQ19CX0JBU0VfQ0RNQV9JRF8wDQo+ICsjZGVmaW5lIE5WRExB
X0NGR1JPTV9DRkdST01fQ01BQ19CX0JBU0VfQ0RNQV9JRF8wCQkJX01LX0FERFJfQ09OU1Qo
MHhlOCkNCj4gKyNkZWZpbmUgTlZETEFfQ0ZHUk9NX0NGR1JPTV9DTUFDX0JfQkFTRV9DRE1B
X0lEXzBfQ01BQ19CX0JBU0VfQ0RNQV9JRF9TSElGVAkJCV9NS19TSElGVF9DT05TVCgwKQ0K
PiArI2RlZmluZSBOVkRMQV9DRkdST01fQ0ZHUk9NX0NNQUNfQl9CQVNFX0NETUFfSURfMF9D
TUFDX0JfQkFTRV9DRE1BX0lEX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4ZmZmZmZmZmYs
IE5WRExBX0NGR1JPTV9DRkdST01fQ01BQ19CX0JBU0VfQ0RNQV9JRF8wX0NNQUNfQl9CQVNF
X0NETUFfSURfU0hJRlQpDQo+ICsNCj4gKw0KPiArLy8gUmVnaXN0ZXIgTlZETEFfQ0ZHUk9N
X0NGR1JPTV9DQUNDX0RFU0NfMA0KPiArI2RlZmluZSBOVkRMQV9DRkdST01fQ0ZHUk9NX0NB
Q0NfREVTQ18wCQkJX01LX0FERFJfQ09OU1QoMHhlYykNCj4gKyNkZWZpbmUgTlZETEFfQ0ZH
Uk9NX0NGR1JPTV9DQUNDX0RFU0NfMF9DQUNDX0RFU0NfU0hJRlQJCQlfTUtfU0hJRlRfQ09O
U1QoMCkNCj4gKyNkZWZpbmUgTlZETEFfQ0ZHUk9NX0NGR1JPTV9DQUNDX0RFU0NfMF9DQUND
X0RFU0NfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHhmZmZmZmZmZiwgTlZETEFfQ0ZHUk9N
X0NGR1JPTV9DQUNDX0RFU0NfMF9DQUNDX0RFU0NfU0hJRlQpDQo+ICsNCj4gKw0KPiArLy8g
UmVnaXN0ZXIgTlZETEFfQ0ZHUk9NX0NGR1JPTV9DQUNDX0NBUF9JTkNPTVBBVF8wDQo+ICsj
ZGVmaW5lIE5WRExBX0NGR1JPTV9DRkdST01fQ0FDQ19DQVBfSU5DT01QQVRfMAkJCV9NS19B
RERSX0NPTlNUKDB4ZjApDQo+ICsjZGVmaW5lIE5WRExBX0NGR1JPTV9DRkdST01fQ0FDQ19D
QVBfSU5DT01QQVRfMF9DQUNDX0NBUF9JTkNPTVBBVF9TSElGVAkJCV9NS19TSElGVF9DT05T
VCgwKQ0KPiArI2RlZmluZSBOVkRMQV9DRkdST01fQ0ZHUk9NX0NBQ0NfQ0FQX0lOQ09NUEFU
XzBfQ0FDQ19DQVBfSU5DT01QQVRfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHhmZmZmZmZm
ZiwgTlZETEFfQ0ZHUk9NX0NGR1JPTV9DQUNDX0NBUF9JTkNPTVBBVF8wX0NBQ0NfQ0FQX0lO
Q09NUEFUX1NISUZUKQ0KPiArDQo+ICsNCj4gKy8vIFJlZ2lzdGVyIE5WRExBX0NGR1JPTV9D
RkdST01fQ0FDQ19DQVBfQ09NUEFUXzANCj4gKyNkZWZpbmUgTlZETEFfQ0ZHUk9NX0NGR1JP
TV9DQUNDX0NBUF9DT01QQVRfMAkJCV9NS19BRERSX0NPTlNUKDB4ZjQpDQo+ICsjZGVmaW5l
IE5WRExBX0NGR1JPTV9DRkdST01fQ0FDQ19DQVBfQ09NUEFUXzBfQ0FDQ19DQVBfQ09NUEFU
X1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDApDQo+ICsjZGVmaW5lIE5WRExBX0NGR1JPTV9D
RkdST01fQ0FDQ19DQVBfQ09NUEFUXzBfQ0FDQ19DQVBfQ09NUEFUX0ZJRUxECQkJX01LX0ZJ
RUxEX0NPTlNUKDB4ZmZmZmZmZmYsIE5WRExBX0NGR1JPTV9DRkdST01fQ0FDQ19DQVBfQ09N
UEFUXzBfQ0FDQ19DQVBfQ09NUEFUX1NISUZUKQ0KPiArDQo+ICsNCj4gKy8vIFJlZ2lzdGVy
IE5WRExBX0NGR1JPTV9DRkdST01fQ0FDQ19CQVNFX0ZFQVRVUkVfVFlQRVNfMA0KPiArI2Rl
ZmluZSBOVkRMQV9DRkdST01fQ0ZHUk9NX0NBQ0NfQkFTRV9GRUFUVVJFX1RZUEVTXzAJCQlf
TUtfQUREUl9DT05TVCgweGY4KQ0KPiArI2RlZmluZSBOVkRMQV9DRkdST01fQ0ZHUk9NX0NB
Q0NfQkFTRV9GRUFUVVJFX1RZUEVTXzBfQ0FDQ19CQVNFX0ZFQVRVUkVfVFlQRVNfU0hJRlQJ
CQlfTUtfU0hJRlRfQ09OU1QoMCkNCj4gKyNkZWZpbmUgTlZETEFfQ0ZHUk9NX0NGR1JPTV9D
QUNDX0JBU0VfRkVBVFVSRV9UWVBFU18wX0NBQ0NfQkFTRV9GRUFUVVJFX1RZUEVTX0ZJRUxE
CQkJX01LX0ZJRUxEX0NPTlNUKDB4ZmZmLCBOVkRMQV9DRkdST01fQ0ZHUk9NX0NBQ0NfQkFT
RV9GRUFUVVJFX1RZUEVTXzBfQ0FDQ19CQVNFX0ZFQVRVUkVfVFlQRVNfU0hJRlQpDQo+ICsN
Cj4gKw0KPiArLy8gUmVnaXN0ZXIgTlZETEFfQ0ZHUk9NX0NGR1JPTV9DQUNDX0JBU0VfV0VJ
R0hUX1RZUEVTXzANCj4gKyNkZWZpbmUgTlZETEFfQ0ZHUk9NX0NGR1JPTV9DQUNDX0JBU0Vf
V0VJR0hUX1RZUEVTXzAJCQlfTUtfQUREUl9DT05TVCgweGZjKQ0KPiArI2RlZmluZSBOVkRM
QV9DRkdST01fQ0ZHUk9NX0NBQ0NfQkFTRV9XRUlHSFRfVFlQRVNfMF9DQUNDX0JBU0VfV0VJ
R0hUX1RZUEVTX1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDApDQo+ICsjZGVmaW5lIE5WRExB
X0NGR1JPTV9DRkdST01fQ0FDQ19CQVNFX1dFSUdIVF9UWVBFU18wX0NBQ0NfQkFTRV9XRUlH
SFRfVFlQRVNfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHhmZmYsIE5WRExBX0NGR1JPTV9D
RkdST01fQ0FDQ19CQVNFX1dFSUdIVF9UWVBFU18wX0NBQ0NfQkFTRV9XRUlHSFRfVFlQRVNf
U0hJRlQpDQo+ICsNCj4gKw0KPiArLy8gUmVnaXN0ZXIgTlZETEFfQ0ZHUk9NX0NGR1JPTV9D
QUNDX0JBU0VfQVRPTUlDX0NfMA0KPiArI2RlZmluZSBOVkRMQV9DRkdST01fQ0ZHUk9NX0NB
Q0NfQkFTRV9BVE9NSUNfQ18wCQkJX01LX0FERFJfQ09OU1QoMHgxMDApDQo+ICsjZGVmaW5l
IE5WRExBX0NGR1JPTV9DRkdST01fQ0FDQ19CQVNFX0FUT01JQ19DXzBfQ0FDQ19CQVNFX0FU
T01JQ19DX1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDApDQo+ICsjZGVmaW5lIE5WRExBX0NG
R1JPTV9DRkdST01fQ0FDQ19CQVNFX0FUT01JQ19DXzBfQ0FDQ19CQVNFX0FUT01JQ19DX0ZJ
RUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4ZmZmZmZmZmYsIE5WRExBX0NGR1JPTV9DRkdST01f
Q0FDQ19CQVNFX0FUT01JQ19DXzBfQ0FDQ19CQVNFX0FUT01JQ19DX1NISUZUKQ0KPiArDQo+
ICsNCj4gKy8vIFJlZ2lzdGVyIE5WRExBX0NGR1JPTV9DRkdST01fQ0FDQ19CQVNFX0FUT01J
Q19LXzANCj4gKyNkZWZpbmUgTlZETEFfQ0ZHUk9NX0NGR1JPTV9DQUNDX0JBU0VfQVRPTUlD
X0tfMAkJCV9NS19BRERSX0NPTlNUKDB4MTA0KQ0KPiArI2RlZmluZSBOVkRMQV9DRkdST01f
Q0ZHUk9NX0NBQ0NfQkFTRV9BVE9NSUNfS18wX0NBQ0NfQkFTRV9BVE9NSUNfS19TSElGVAkJ
CV9NS19TSElGVF9DT05TVCgwKQ0KPiArI2RlZmluZSBOVkRMQV9DRkdST01fQ0ZHUk9NX0NB
Q0NfQkFTRV9BVE9NSUNfS18wX0NBQ0NfQkFTRV9BVE9NSUNfS19GSUVMRAkJCV9NS19GSUVM
RF9DT05TVCgweGZmZmZmZmZmLCBOVkRMQV9DRkdST01fQ0ZHUk9NX0NBQ0NfQkFTRV9BVE9N
SUNfS18wX0NBQ0NfQkFTRV9BVE9NSUNfS19TSElGVCkNCj4gKw0KPiArDQo+ICsvLyBSZWdp
c3RlciBOVkRMQV9DRkdST01fQ0ZHUk9NX0NBQ0NfQkFTRV9DRE1BX0lEXzANCj4gKyNkZWZp
bmUgTlZETEFfQ0ZHUk9NX0NGR1JPTV9DQUNDX0JBU0VfQ0RNQV9JRF8wCQkJX01LX0FERFJf
Q09OU1QoMHgxMDgpDQo+ICsjZGVmaW5lIE5WRExBX0NGR1JPTV9DRkdST01fQ0FDQ19CQVNF
X0NETUFfSURfMF9DQUNDX0JBU0VfQ0RNQV9JRF9TSElGVAkJCV9NS19TSElGVF9DT05TVCgw
KQ0KPiArI2RlZmluZSBOVkRMQV9DRkdST01fQ0ZHUk9NX0NBQ0NfQkFTRV9DRE1BX0lEXzBf
Q0FDQ19CQVNFX0NETUFfSURfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHhmZmZmZmZmZiwg
TlZETEFfQ0ZHUk9NX0NGR1JPTV9DQUNDX0JBU0VfQ0RNQV9JRF8wX0NBQ0NfQkFTRV9DRE1B
X0lEX1NISUZUKQ0KPiArDQo+ICsNCj4gKy8vIFJlZ2lzdGVyIE5WRExBX0NGR1JPTV9DRkdS
T01fQ0FDQ19NVUxUSV9CQVRDSF9NQVhfMA0KPiArI2RlZmluZSBOVkRMQV9DRkdST01fQ0ZH
Uk9NX0NBQ0NfTVVMVElfQkFUQ0hfTUFYXzAJCQlfTUtfQUREUl9DT05TVCgweDEwYykNCj4g
KyNkZWZpbmUgTlZETEFfQ0ZHUk9NX0NGR1JPTV9DQUNDX01VTFRJX0JBVENIX01BWF8wX0NB
Q0NfTVVMVElfQkFUQ0hfTUFYX1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDApDQo+ICsjZGVm
aW5lIE5WRExBX0NGR1JPTV9DRkdST01fQ0FDQ19NVUxUSV9CQVRDSF9NQVhfMF9DQUNDX01V
TFRJX0JBVENIX01BWF9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweGZmZmZmZmZmLCBOVkRM
QV9DRkdST01fQ0ZHUk9NX0NBQ0NfTVVMVElfQkFUQ0hfTUFYXzBfQ0FDQ19NVUxUSV9CQVRD
SF9NQVhfU0hJRlQpDQo+ICsNCj4gKw0KPiArLy8gUmVnaXN0ZXIgTlZETEFfQ0ZHUk9NX0NG
R1JPTV9TRFBfUkRNQV9ERVNDXzANCj4gKyNkZWZpbmUgTlZETEFfQ0ZHUk9NX0NGR1JPTV9T
RFBfUkRNQV9ERVNDXzAJCQlfTUtfQUREUl9DT05TVCgweDExMCkNCj4gKyNkZWZpbmUgTlZE
TEFfQ0ZHUk9NX0NGR1JPTV9TRFBfUkRNQV9ERVNDXzBfU0RQX1JETUFfREVTQ19TSElGVAkJ
CV9NS19TSElGVF9DT05TVCgwKQ0KPiArI2RlZmluZSBOVkRMQV9DRkdST01fQ0ZHUk9NX1NE
UF9SRE1BX0RFU0NfMF9TRFBfUkRNQV9ERVNDX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4
ZmZmZmZmZmYsIE5WRExBX0NGR1JPTV9DRkdST01fU0RQX1JETUFfREVTQ18wX1NEUF9SRE1B
X0RFU0NfU0hJRlQpDQo+ICsNCj4gKw0KPiArLy8gUmVnaXN0ZXIgTlZETEFfQ0ZHUk9NX0NG
R1JPTV9TRFBfUkRNQV9DQVBfSU5DT01QQVRfMA0KPiArI2RlZmluZSBOVkRMQV9DRkdST01f
Q0ZHUk9NX1NEUF9SRE1BX0NBUF9JTkNPTVBBVF8wCQkJX01LX0FERFJfQ09OU1QoMHgxMTQp
DQo+ICsjZGVmaW5lIE5WRExBX0NGR1JPTV9DRkdST01fU0RQX1JETUFfQ0FQX0lOQ09NUEFU
XzBfU0RQX1JETUFfQ0FQX0lOQ09NUEFUX1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDApDQo+
ICsjZGVmaW5lIE5WRExBX0NGR1JPTV9DRkdST01fU0RQX1JETUFfQ0FQX0lOQ09NUEFUXzBf
U0RQX1JETUFfQ0FQX0lOQ09NUEFUX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4ZmZmZmZm
ZmYsIE5WRExBX0NGR1JPTV9DRkdST01fU0RQX1JETUFfQ0FQX0lOQ09NUEFUXzBfU0RQX1JE
TUFfQ0FQX0lOQ09NUEFUX1NISUZUKQ0KPiArDQo+ICsNCj4gKy8vIFJlZ2lzdGVyIE5WRExB
X0NGR1JPTV9DRkdST01fU0RQX1JETUFfQ0FQX0NPTVBBVF8wDQo+ICsjZGVmaW5lIE5WRExB
X0NGR1JPTV9DRkdST01fU0RQX1JETUFfQ0FQX0NPTVBBVF8wCQkJX01LX0FERFJfQ09OU1Qo
MHgxMTgpDQo+ICsjZGVmaW5lIE5WRExBX0NGR1JPTV9DRkdST01fU0RQX1JETUFfQ0FQX0NP
TVBBVF8wX1NEUF9SRE1BX0NBUF9DT01QQVRfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMCkN
Cj4gKyNkZWZpbmUgTlZETEFfQ0ZHUk9NX0NGR1JPTV9TRFBfUkRNQV9DQVBfQ09NUEFUXzBf
U0RQX1JETUFfQ0FQX0NPTVBBVF9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweGZmZmZmZmZm
LCBOVkRMQV9DRkdST01fQ0ZHUk9NX1NEUF9SRE1BX0NBUF9DT01QQVRfMF9TRFBfUkRNQV9D
QVBfQ09NUEFUX1NISUZUKQ0KPiArDQo+ICsNCj4gKy8vIFJlZ2lzdGVyIE5WRExBX0NGR1JP
TV9DRkdST01fU0RQX1JETUFfQkFTRV9BVE9NSUNfTV8wDQo+ICsjZGVmaW5lIE5WRExBX0NG
R1JPTV9DRkdST01fU0RQX1JETUFfQkFTRV9BVE9NSUNfTV8wCQkJX01LX0FERFJfQ09OU1Qo
MHgxMWMpDQo+ICsjZGVmaW5lIE5WRExBX0NGR1JPTV9DRkdST01fU0RQX1JETUFfQkFTRV9B
VE9NSUNfTV8wX1NEUF9SRE1BX0JBU0VfQVRPTUlDX01fU0hJRlQJCQlfTUtfU0hJRlRfQ09O
U1QoMCkNCj4gKyNkZWZpbmUgTlZETEFfQ0ZHUk9NX0NGR1JPTV9TRFBfUkRNQV9CQVNFX0FU
T01JQ19NXzBfU0RQX1JETUFfQkFTRV9BVE9NSUNfTV9GSUVMRAkJCV9NS19GSUVMRF9DT05T
VCgweGZmZmZmZmZmLCBOVkRMQV9DRkdST01fQ0ZHUk9NX1NEUF9SRE1BX0JBU0VfQVRPTUlD
X01fMF9TRFBfUkRNQV9CQVNFX0FUT01JQ19NX1NISUZUKQ0KPiArDQo+ICsNCj4gKy8vIFJl
Z2lzdGVyIE5WRExBX0NGR1JPTV9DRkdST01fU0RQX1JETUFfQkFTRV9TRFBfSURfMA0KPiAr
I2RlZmluZSBOVkRMQV9DRkdST01fQ0ZHUk9NX1NEUF9SRE1BX0JBU0VfU0RQX0lEXzAJCQlf
TUtfQUREUl9DT05TVCgweDEyMCkNCj4gKyNkZWZpbmUgTlZETEFfQ0ZHUk9NX0NGR1JPTV9T
RFBfUkRNQV9CQVNFX1NEUF9JRF8wX1NEUF9SRE1BX0JBU0VfU0RQX0lEX1NISUZUCQkJX01L
X1NISUZUX0NPTlNUKDApDQo+ICsjZGVmaW5lIE5WRExBX0NGR1JPTV9DRkdST01fU0RQX1JE
TUFfQkFTRV9TRFBfSURfMF9TRFBfUkRNQV9CQVNFX1NEUF9JRF9GSUVMRAkJCV9NS19GSUVM
RF9DT05TVCgweGZmZmZmZmZmLCBOVkRMQV9DRkdST01fQ0ZHUk9NX1NEUF9SRE1BX0JBU0Vf
U0RQX0lEXzBfU0RQX1JETUFfQkFTRV9TRFBfSURfU0hJRlQpDQo+ICsNCj4gKw0KPiArLy8g
UmVnaXN0ZXIgTlZETEFfQ0ZHUk9NX0NGR1JPTV9TRFBfREVTQ18wDQo+ICsjZGVmaW5lIE5W
RExBX0NGR1JPTV9DRkdST01fU0RQX0RFU0NfMAkJCV9NS19BRERSX0NPTlNUKDB4MTI0KQ0K
PiArI2RlZmluZSBOVkRMQV9DRkdST01fQ0ZHUk9NX1NEUF9ERVNDXzBfU0RQX0RFU0NfU0hJ
RlQJCQlfTUtfU0hJRlRfQ09OU1QoMCkNCj4gKyNkZWZpbmUgTlZETEFfQ0ZHUk9NX0NGR1JP
TV9TRFBfREVTQ18wX1NEUF9ERVNDX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4ZmZmZmZm
ZmYsIE5WRExBX0NGR1JPTV9DRkdST01fU0RQX0RFU0NfMF9TRFBfREVTQ19TSElGVCkNCj4g
Kw0KPiArDQo+ICsvLyBSZWdpc3RlciBOVkRMQV9DRkdST01fQ0ZHUk9NX1NEUF9DQVBfSU5D
T01QQVRfMA0KPiArI2RlZmluZSBOVkRMQV9DRkdST01fQ0ZHUk9NX1NEUF9DQVBfSU5DT01Q
QVRfMAkJCV9NS19BRERSX0NPTlNUKDB4MTI4KQ0KPiArI2RlZmluZSBOVkRMQV9DRkdST01f
Q0ZHUk9NX1NEUF9DQVBfSU5DT01QQVRfMF9TRFBfQ0FQX0lOQ09NUEFUX1NISUZUCQkJX01L
X1NISUZUX0NPTlNUKDApDQo+ICsjZGVmaW5lIE5WRExBX0NGR1JPTV9DRkdST01fU0RQX0NB
UF9JTkNPTVBBVF8wX1NEUF9DQVBfSU5DT01QQVRfRklFTEQJCQlfTUtfRklFTERfQ09OU1Qo
MHhmZmZmZmZmZiwgTlZETEFfQ0ZHUk9NX0NGR1JPTV9TRFBfQ0FQX0lOQ09NUEFUXzBfU0RQ
X0NBUF9JTkNPTVBBVF9TSElGVCkNCj4gKw0KPiArDQo+ICsvLyBSZWdpc3RlciBOVkRMQV9D
RkdST01fQ0ZHUk9NX1NEUF9DQVBfQ09NUEFUXzANCj4gKyNkZWZpbmUgTlZETEFfQ0ZHUk9N
X0NGR1JPTV9TRFBfQ0FQX0NPTVBBVF8wCQkJX01LX0FERFJfQ09OU1QoMHgxMmMpDQo+ICsj
ZGVmaW5lIE5WRExBX0NGR1JPTV9DRkdST01fU0RQX0NBUF9DT01QQVRfMF9TRFBfQ0FQX0NP
TVBBVF9TSElGVAkJCV9NS19TSElGVF9DT05TVCgwKQ0KPiArI2RlZmluZSBOVkRMQV9DRkdS
T01fQ0ZHUk9NX1NEUF9DQVBfQ09NUEFUXzBfU0RQX0NBUF9DT01QQVRfRklFTEQJCQlfTUtf
RklFTERfQ09OU1QoMHhmZmZmZmZmZiwgTlZETEFfQ0ZHUk9NX0NGR1JPTV9TRFBfQ0FQX0NP
TVBBVF8wX1NEUF9DQVBfQ09NUEFUX1NISUZUKQ0KPiArDQo+ICsNCj4gKy8vIFJlZ2lzdGVy
IE5WRExBX0NGR1JPTV9DRkdST01fU0RQX0JBU0VfRkVBVFVSRV9UWVBFU18wDQo+ICsjZGVm
aW5lIE5WRExBX0NGR1JPTV9DRkdST01fU0RQX0JBU0VfRkVBVFVSRV9UWVBFU18wCQkJX01L
X0FERFJfQ09OU1QoMHgxMzApDQo+ICsjZGVmaW5lIE5WRExBX0NGR1JPTV9DRkdST01fU0RQ
X0JBU0VfRkVBVFVSRV9UWVBFU18wX1NEUF9CQVNFX0ZFQVRVUkVfVFlQRVNfU0hJRlQJCQlf
TUtfU0hJRlRfQ09OU1QoMCkNCj4gKyNkZWZpbmUgTlZETEFfQ0ZHUk9NX0NGR1JPTV9TRFBf
QkFTRV9GRUFUVVJFX1RZUEVTXzBfU0RQX0JBU0VfRkVBVFVSRV9UWVBFU19GSUVMRAkJCV9N
S19GSUVMRF9DT05TVCgweGZmZiwgTlZETEFfQ0ZHUk9NX0NGR1JPTV9TRFBfQkFTRV9GRUFU
VVJFX1RZUEVTXzBfU0RQX0JBU0VfRkVBVFVSRV9UWVBFU19TSElGVCkNCj4gKw0KPiArDQo+
ICsvLyBSZWdpc3RlciBOVkRMQV9DRkdST01fQ0ZHUk9NX1NEUF9CQVNFX1dFSUdIVF9UWVBF
U18wDQo+ICsjZGVmaW5lIE5WRExBX0NGR1JPTV9DRkdST01fU0RQX0JBU0VfV0VJR0hUX1RZ
UEVTXzAJCQlfTUtfQUREUl9DT05TVCgweDEzNCkNCj4gKyNkZWZpbmUgTlZETEFfQ0ZHUk9N
X0NGR1JPTV9TRFBfQkFTRV9XRUlHSFRfVFlQRVNfMF9TRFBfQkFTRV9XRUlHSFRfVFlQRVNf
U0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMCkNCj4gKyNkZWZpbmUgTlZETEFfQ0ZHUk9NX0NG
R1JPTV9TRFBfQkFTRV9XRUlHSFRfVFlQRVNfMF9TRFBfQkFTRV9XRUlHSFRfVFlQRVNfRklF
TEQJCQlfTUtfRklFTERfQ09OU1QoMHhmZmYsIE5WRExBX0NGR1JPTV9DRkdST01fU0RQX0JB
U0VfV0VJR0hUX1RZUEVTXzBfU0RQX0JBU0VfV0VJR0hUX1RZUEVTX1NISUZUKQ0KPiArDQo+
ICsNCj4gKy8vIFJlZ2lzdGVyIE5WRExBX0NGR1JPTV9DRkdST01fU0RQX0JBU0VfQ0RNQV9J
RF8wDQo+ICsjZGVmaW5lIE5WRExBX0NGR1JPTV9DRkdST01fU0RQX0JBU0VfQ0RNQV9JRF8w
CQkJX01LX0FERFJfQ09OU1QoMHgxMzgpDQo+ICsjZGVmaW5lIE5WRExBX0NGR1JPTV9DRkdS
T01fU0RQX0JBU0VfQ0RNQV9JRF8wX1NEUF9CQVNFX0NETUFfSURfU0hJRlQJCQlfTUtfU0hJ
RlRfQ09OU1QoMCkNCj4gKyNkZWZpbmUgTlZETEFfQ0ZHUk9NX0NGR1JPTV9TRFBfQkFTRV9D
RE1BX0lEXzBfU0RQX0JBU0VfQ0RNQV9JRF9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweGZm
ZmZmZmZmLCBOVkRMQV9DRkdST01fQ0ZHUk9NX1NEUF9CQVNFX0NETUFfSURfMF9TRFBfQkFT
RV9DRE1BX0lEX1NISUZUKQ0KPiArDQo+ICsNCj4gKy8vIFJlZ2lzdGVyIE5WRExBX0NGR1JP
TV9DRkdST01fU0RQX01VTFRJX0JBVENIX01BWF8wDQo+ICsjZGVmaW5lIE5WRExBX0NGR1JP
TV9DRkdST01fU0RQX01VTFRJX0JBVENIX01BWF8wCQkJX01LX0FERFJfQ09OU1QoMHgxM2Mp
DQo+ICsjZGVmaW5lIE5WRExBX0NGR1JPTV9DRkdST01fU0RQX01VTFRJX0JBVENIX01BWF8w
X1NEUF9NVUxUSV9CQVRDSF9NQVhfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMCkNCj4gKyNk
ZWZpbmUgTlZETEFfQ0ZHUk9NX0NGR1JPTV9TRFBfTVVMVElfQkFUQ0hfTUFYXzBfU0RQX01V
TFRJX0JBVENIX01BWF9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweGZmZmZmZmZmLCBOVkRM
QV9DRkdST01fQ0ZHUk9NX1NEUF9NVUxUSV9CQVRDSF9NQVhfMF9TRFBfTVVMVElfQkFUQ0hf
TUFYX1NISUZUKQ0KPiArDQo+ICsNCj4gKy8vIFJlZ2lzdGVyIE5WRExBX0NGR1JPTV9DRkdS
T01fU0RQX0JTX1RIUk9VR0hQVVRfMA0KPiArI2RlZmluZSBOVkRMQV9DRkdST01fQ0ZHUk9N
X1NEUF9CU19USFJPVUdIUFVUXzAJCQlfTUtfQUREUl9DT05TVCgweDE0MCkNCj4gKyNkZWZp
bmUgTlZETEFfQ0ZHUk9NX0NGR1JPTV9TRFBfQlNfVEhST1VHSFBVVF8wX1NEUF9CU19USFJP
VUdIUFVUX1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDApDQo+ICsjZGVmaW5lIE5WRExBX0NG
R1JPTV9DRkdST01fU0RQX0JTX1RIUk9VR0hQVVRfMF9TRFBfQlNfVEhST1VHSFBVVF9GSUVM
RAkJCV9NS19GSUVMRF9DT05TVCgweGZmZmZmZmZmLCBOVkRMQV9DRkdST01fQ0ZHUk9NX1NE
UF9CU19USFJPVUdIUFVUXzBfU0RQX0JTX1RIUk9VR0hQVVRfU0hJRlQpDQo+ICsNCj4gKw0K
PiArLy8gUmVnaXN0ZXIgTlZETEFfQ0ZHUk9NX0NGR1JPTV9TRFBfQk5fVEhST1VHSFBVVF8w
DQo+ICsjZGVmaW5lIE5WRExBX0NGR1JPTV9DRkdST01fU0RQX0JOX1RIUk9VR0hQVVRfMAkJ
CV9NS19BRERSX0NPTlNUKDB4MTQ0KQ0KPiArI2RlZmluZSBOVkRMQV9DRkdST01fQ0ZHUk9N
X1NEUF9CTl9USFJPVUdIUFVUXzBfU0RQX0JOX1RIUk9VR0hQVVRfU0hJRlQJCQlfTUtfU0hJ
RlRfQ09OU1QoMCkNCj4gKyNkZWZpbmUgTlZETEFfQ0ZHUk9NX0NGR1JPTV9TRFBfQk5fVEhS
T1VHSFBVVF8wX1NEUF9CTl9USFJPVUdIUFVUX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4
ZmZmZmZmZmYsIE5WRExBX0NGR1JPTV9DRkdST01fU0RQX0JOX1RIUk9VR0hQVVRfMF9TRFBf
Qk5fVEhST1VHSFBVVF9TSElGVCkNCj4gKw0KPiArDQo+ICsvLyBSZWdpc3RlciBOVkRMQV9D
RkdST01fQ0ZHUk9NX1NEUF9FV19USFJPVUdIUFVUXzANCj4gKyNkZWZpbmUgTlZETEFfQ0ZH
Uk9NX0NGR1JPTV9TRFBfRVdfVEhST1VHSFBVVF8wCQkJX01LX0FERFJfQ09OU1QoMHgxNDgp
DQo+ICsjZGVmaW5lIE5WRExBX0NGR1JPTV9DRkdST01fU0RQX0VXX1RIUk9VR0hQVVRfMF9T
RFBfRVdfVEhST1VHSFBVVF9TSElGVAkJCV9NS19TSElGVF9DT05TVCgwKQ0KPiArI2RlZmlu
ZSBOVkRMQV9DRkdST01fQ0ZHUk9NX1NEUF9FV19USFJPVUdIUFVUXzBfU0RQX0VXX1RIUk9V
R0hQVVRfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHhmZmZmZmZmZiwgTlZETEFfQ0ZHUk9N
X0NGR1JPTV9TRFBfRVdfVEhST1VHSFBVVF8wX1NEUF9FV19USFJPVUdIUFVUX1NISUZUKQ0K
PiArDQo+ICsNCj4gKy8vIFJlZ2lzdGVyIE5WRExBX0NGR1JPTV9DRkdST01fUERQX1JETUFf
REVTQ18wDQo+ICsjZGVmaW5lIE5WRExBX0NGR1JPTV9DRkdST01fUERQX1JETUFfREVTQ18w
CQkJX01LX0FERFJfQ09OU1QoMHgxNGMpDQo+ICsjZGVmaW5lIE5WRExBX0NGR1JPTV9DRkdS
T01fUERQX1JETUFfREVTQ18wX1BEUF9SRE1BX0RFU0NfU0hJRlQJCQlfTUtfU0hJRlRfQ09O
U1QoMCkNCj4gKyNkZWZpbmUgTlZETEFfQ0ZHUk9NX0NGR1JPTV9QRFBfUkRNQV9ERVNDXzBf
UERQX1JETUFfREVTQ19GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweGZmZmZmZmZmLCBOVkRM
QV9DRkdST01fQ0ZHUk9NX1BEUF9SRE1BX0RFU0NfMF9QRFBfUkRNQV9ERVNDX1NISUZUKQ0K
PiArDQo+ICsNCj4gKy8vIFJlZ2lzdGVyIE5WRExBX0NGR1JPTV9DRkdST01fUERQX1JETUFf
Q0FQX0lOQ09NUEFUXzANCj4gKyNkZWZpbmUgTlZETEFfQ0ZHUk9NX0NGR1JPTV9QRFBfUkRN
QV9DQVBfSU5DT01QQVRfMAkJCV9NS19BRERSX0NPTlNUKDB4MTUwKQ0KPiArI2RlZmluZSBO
VkRMQV9DRkdST01fQ0ZHUk9NX1BEUF9SRE1BX0NBUF9JTkNPTVBBVF8wX1BEUF9SRE1BX0NB
UF9JTkNPTVBBVF9TSElGVAkJCV9NS19TSElGVF9DT05TVCgwKQ0KPiArI2RlZmluZSBOVkRM
QV9DRkdST01fQ0ZHUk9NX1BEUF9SRE1BX0NBUF9JTkNPTVBBVF8wX1BEUF9SRE1BX0NBUF9J
TkNPTVBBVF9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweGZmZmZmZmZmLCBOVkRMQV9DRkdS
T01fQ0ZHUk9NX1BEUF9SRE1BX0NBUF9JTkNPTVBBVF8wX1BEUF9SRE1BX0NBUF9JTkNPTVBB
VF9TSElGVCkNCj4gKw0KPiArDQo+ICsvLyBSZWdpc3RlciBOVkRMQV9DRkdST01fQ0ZHUk9N
X1BEUF9SRE1BX0NBUF9DT01QQVRfMA0KPiArI2RlZmluZSBOVkRMQV9DRkdST01fQ0ZHUk9N
X1BEUF9SRE1BX0NBUF9DT01QQVRfMAkJCV9NS19BRERSX0NPTlNUKDB4MTU0KQ0KPiArI2Rl
ZmluZSBOVkRMQV9DRkdST01fQ0ZHUk9NX1BEUF9SRE1BX0NBUF9DT01QQVRfMF9QRFBfUkRN
QV9DQVBfQ09NUEFUX1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDApDQo+ICsjZGVmaW5lIE5W
RExBX0NGR1JPTV9DRkdST01fUERQX1JETUFfQ0FQX0NPTVBBVF8wX1BEUF9SRE1BX0NBUF9D
T01QQVRfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHhmZmZmZmZmZiwgTlZETEFfQ0ZHUk9N
X0NGR1JPTV9QRFBfUkRNQV9DQVBfQ09NUEFUXzBfUERQX1JETUFfQ0FQX0NPTVBBVF9TSElG
VCkNCj4gKw0KPiArDQo+ICsvLyBSZWdpc3RlciBOVkRMQV9DRkdST01fQ0ZHUk9NX1BEUF9S
RE1BX0JBU0VfQVRPTUlDX01fMA0KPiArI2RlZmluZSBOVkRMQV9DRkdST01fQ0ZHUk9NX1BE
UF9SRE1BX0JBU0VfQVRPTUlDX01fMAkJCV9NS19BRERSX0NPTlNUKDB4MTU4KQ0KPiArI2Rl
ZmluZSBOVkRMQV9DRkdST01fQ0ZHUk9NX1BEUF9SRE1BX0JBU0VfQVRPTUlDX01fMF9QRFBf
UkRNQV9CQVNFX0FUT01JQ19NX1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDApDQo+ICsjZGVm
aW5lIE5WRExBX0NGR1JPTV9DRkdST01fUERQX1JETUFfQkFTRV9BVE9NSUNfTV8wX1BEUF9S
RE1BX0JBU0VfQVRPTUlDX01fRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHhmZmZmZmZmZiwg
TlZETEFfQ0ZHUk9NX0NGR1JPTV9QRFBfUkRNQV9CQVNFX0FUT01JQ19NXzBfUERQX1JETUFf
QkFTRV9BVE9NSUNfTV9TSElGVCkNCj4gKw0KPiArDQo+ICsvLyBSZWdpc3RlciBOVkRMQV9D
RkdST01fQ0ZHUk9NX1BEUF9SRE1BX0JBU0VfUERQX0lEXzANCj4gKyNkZWZpbmUgTlZETEFf
Q0ZHUk9NX0NGR1JPTV9QRFBfUkRNQV9CQVNFX1BEUF9JRF8wCQkJX01LX0FERFJfQ09OU1Qo
MHgxNWMpDQo+ICsjZGVmaW5lIE5WRExBX0NGR1JPTV9DRkdST01fUERQX1JETUFfQkFTRV9Q
RFBfSURfMF9QRFBfUkRNQV9CQVNFX1BEUF9JRF9TSElGVAkJCV9NS19TSElGVF9DT05TVCgw
KQ0KPiArI2RlZmluZSBOVkRMQV9DRkdST01fQ0ZHUk9NX1BEUF9SRE1BX0JBU0VfUERQX0lE
XzBfUERQX1JETUFfQkFTRV9QRFBfSURfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHhmZmZm
ZmZmZiwgTlZETEFfQ0ZHUk9NX0NGR1JPTV9QRFBfUkRNQV9CQVNFX1BEUF9JRF8wX1BEUF9S
RE1BX0JBU0VfUERQX0lEX1NISUZUKQ0KPiArDQo+ICsNCj4gKy8vIFJlZ2lzdGVyIE5WRExB
X0NGR1JPTV9DRkdST01fUERQX0RFU0NfMA0KPiArI2RlZmluZSBOVkRMQV9DRkdST01fQ0ZH
Uk9NX1BEUF9ERVNDXzAJCQlfTUtfQUREUl9DT05TVCgweDE2MCkNCj4gKyNkZWZpbmUgTlZE
TEFfQ0ZHUk9NX0NGR1JPTV9QRFBfREVTQ18wX1BEUF9ERVNDX1NISUZUCQkJX01LX1NISUZU
X0NPTlNUKDApDQo+ICsjZGVmaW5lIE5WRExBX0NGR1JPTV9DRkdST01fUERQX0RFU0NfMF9Q
RFBfREVTQ19GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweGZmZmZmZmZmLCBOVkRMQV9DRkdS
T01fQ0ZHUk9NX1BEUF9ERVNDXzBfUERQX0RFU0NfU0hJRlQpDQo+ICsNCj4gKw0KPiArLy8g
UmVnaXN0ZXIgTlZETEFfQ0ZHUk9NX0NGR1JPTV9QRFBfQ0FQX0lOQ09NUEFUXzANCj4gKyNk
ZWZpbmUgTlZETEFfQ0ZHUk9NX0NGR1JPTV9QRFBfQ0FQX0lOQ09NUEFUXzAJCQlfTUtfQURE
Ul9DT05TVCgweDE2NCkNCj4gKyNkZWZpbmUgTlZETEFfQ0ZHUk9NX0NGR1JPTV9QRFBfQ0FQ
X0lOQ09NUEFUXzBfUERQX0NBUF9JTkNPTVBBVF9TSElGVAkJCV9NS19TSElGVF9DT05TVCgw
KQ0KPiArI2RlZmluZSBOVkRMQV9DRkdST01fQ0ZHUk9NX1BEUF9DQVBfSU5DT01QQVRfMF9Q
RFBfQ0FQX0lOQ09NUEFUX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4ZmZmZmZmZmYsIE5W
RExBX0NGR1JPTV9DRkdST01fUERQX0NBUF9JTkNPTVBBVF8wX1BEUF9DQVBfSU5DT01QQVRf
U0hJRlQpDQo+ICsNCj4gKw0KPiArLy8gUmVnaXN0ZXIgTlZETEFfQ0ZHUk9NX0NGR1JPTV9Q
RFBfQ0FQX0NPTVBBVF8wDQo+ICsjZGVmaW5lIE5WRExBX0NGR1JPTV9DRkdST01fUERQX0NB
UF9DT01QQVRfMAkJCV9NS19BRERSX0NPTlNUKDB4MTY4KQ0KPiArI2RlZmluZSBOVkRMQV9D
RkdST01fQ0ZHUk9NX1BEUF9DQVBfQ09NUEFUXzBfUERQX0NBUF9DT01QQVRfU0hJRlQJCQlf
TUtfU0hJRlRfQ09OU1QoMCkNCj4gKyNkZWZpbmUgTlZETEFfQ0ZHUk9NX0NGR1JPTV9QRFBf
Q0FQX0NPTVBBVF8wX1BEUF9DQVBfQ09NUEFUX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4
ZmZmZmZmZmYsIE5WRExBX0NGR1JPTV9DRkdST01fUERQX0NBUF9DT01QQVRfMF9QRFBfQ0FQ
X0NPTVBBVF9TSElGVCkNCj4gKw0KPiArDQo+ICsvLyBSZWdpc3RlciBOVkRMQV9DRkdST01f
Q0ZHUk9NX1BEUF9CQVNFX0ZFQVRVUkVfVFlQRVNfMA0KPiArI2RlZmluZSBOVkRMQV9DRkdS
T01fQ0ZHUk9NX1BEUF9CQVNFX0ZFQVRVUkVfVFlQRVNfMAkJCV9NS19BRERSX0NPTlNUKDB4
MTZjKQ0KPiArI2RlZmluZSBOVkRMQV9DRkdST01fQ0ZHUk9NX1BEUF9CQVNFX0ZFQVRVUkVf
VFlQRVNfMF9QRFBfQkFTRV9GRUFUVVJFX1RZUEVTX1NISUZUCQkJX01LX1NISUZUX0NPTlNU
KDApDQo+ICsjZGVmaW5lIE5WRExBX0NGR1JPTV9DRkdST01fUERQX0JBU0VfRkVBVFVSRV9U
WVBFU18wX1BEUF9CQVNFX0ZFQVRVUkVfVFlQRVNfRklFTEQJCQlfTUtfRklFTERfQ09OU1Qo
MHhmZmYsIE5WRExBX0NGR1JPTV9DRkdST01fUERQX0JBU0VfRkVBVFVSRV9UWVBFU18wX1BE
UF9CQVNFX0ZFQVRVUkVfVFlQRVNfU0hJRlQpDQo+ICsNCj4gKw0KPiArLy8gUmVnaXN0ZXIg
TlZETEFfQ0ZHUk9NX0NGR1JPTV9QRFBfQkFTRV9USFJPVUdIUFVUXzANCj4gKyNkZWZpbmUg
TlZETEFfQ0ZHUk9NX0NGR1JPTV9QRFBfQkFTRV9USFJPVUdIUFVUXzAJCQlfTUtfQUREUl9D
T05TVCgweDE3MCkNCj4gKyNkZWZpbmUgTlZETEFfQ0ZHUk9NX0NGR1JPTV9QRFBfQkFTRV9U
SFJPVUdIUFVUXzBfUERQX0JBU0VfVEhST1VHSFBVVF9TSElGVAkJCV9NS19TSElGVF9DT05T
VCgwKQ0KPiArI2RlZmluZSBOVkRMQV9DRkdST01fQ0ZHUk9NX1BEUF9CQVNFX1RIUk9VR0hQ
VVRfMF9QRFBfQkFTRV9USFJPVUdIUFVUX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4ZmZm
ZmZmZmYsIE5WRExBX0NGR1JPTV9DRkdST01fUERQX0JBU0VfVEhST1VHSFBVVF8wX1BEUF9C
QVNFX1RIUk9VR0hQVVRfU0hJRlQpDQo+ICsNCj4gKw0KPiArLy8gUmVnaXN0ZXIgTlZETEFf
Q0ZHUk9NX0NGR1JPTV9DRFBfUkRNQV9ERVNDXzANCj4gKyNkZWZpbmUgTlZETEFfQ0ZHUk9N
X0NGR1JPTV9DRFBfUkRNQV9ERVNDXzAJCQlfTUtfQUREUl9DT05TVCgweDE3NCkNCj4gKyNk
ZWZpbmUgTlZETEFfQ0ZHUk9NX0NGR1JPTV9DRFBfUkRNQV9ERVNDXzBfQ0RQX1JETUFfREVT
Q19TSElGVAkJCV9NS19TSElGVF9DT05TVCgwKQ0KPiArI2RlZmluZSBOVkRMQV9DRkdST01f
Q0ZHUk9NX0NEUF9SRE1BX0RFU0NfMF9DRFBfUkRNQV9ERVNDX0ZJRUxECQkJX01LX0ZJRUxE
X0NPTlNUKDB4ZmZmZmZmZmYsIE5WRExBX0NGR1JPTV9DRkdST01fQ0RQX1JETUFfREVTQ18w
X0NEUF9SRE1BX0RFU0NfU0hJRlQpDQo+ICsNCj4gKw0KPiArLy8gUmVnaXN0ZXIgTlZETEFf
Q0ZHUk9NX0NGR1JPTV9DRFBfUkRNQV9DQVBfSU5DT01QQVRfMA0KPiArI2RlZmluZSBOVkRM
QV9DRkdST01fQ0ZHUk9NX0NEUF9SRE1BX0NBUF9JTkNPTVBBVF8wCQkJX01LX0FERFJfQ09O
U1QoMHgxNzgpDQo+ICsjZGVmaW5lIE5WRExBX0NGR1JPTV9DRkdST01fQ0RQX1JETUFfQ0FQ
X0lOQ09NUEFUXzBfQ0RQX1JETUFfQ0FQX0lOQ09NUEFUX1NISUZUCQkJX01LX1NISUZUX0NP
TlNUKDApDQo+ICsjZGVmaW5lIE5WRExBX0NGR1JPTV9DRkdST01fQ0RQX1JETUFfQ0FQX0lO
Q09NUEFUXzBfQ0RQX1JETUFfQ0FQX0lOQ09NUEFUX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNU
KDB4ZmZmZmZmZmYsIE5WRExBX0NGR1JPTV9DRkdST01fQ0RQX1JETUFfQ0FQX0lOQ09NUEFU
XzBfQ0RQX1JETUFfQ0FQX0lOQ09NUEFUX1NISUZUKQ0KPiArDQo+ICsNCj4gKy8vIFJlZ2lz
dGVyIE5WRExBX0NGR1JPTV9DRkdST01fQ0RQX1JETUFfQ0FQX0NPTVBBVF8wDQo+ICsjZGVm
aW5lIE5WRExBX0NGR1JPTV9DRkdST01fQ0RQX1JETUFfQ0FQX0NPTVBBVF8wCQkJX01LX0FE
RFJfQ09OU1QoMHgxN2MpDQo+ICsjZGVmaW5lIE5WRExBX0NGR1JPTV9DRkdST01fQ0RQX1JE
TUFfQ0FQX0NPTVBBVF8wX0NEUF9SRE1BX0NBUF9DT01QQVRfU0hJRlQJCQlfTUtfU0hJRlRf
Q09OU1QoMCkNCj4gKyNkZWZpbmUgTlZETEFfQ0ZHUk9NX0NGR1JPTV9DRFBfUkRNQV9DQVBf
Q09NUEFUXzBfQ0RQX1JETUFfQ0FQX0NPTVBBVF9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgw
eGZmZmZmZmZmLCBOVkRMQV9DRkdST01fQ0ZHUk9NX0NEUF9SRE1BX0NBUF9DT01QQVRfMF9D
RFBfUkRNQV9DQVBfQ09NUEFUX1NISUZUKQ0KPiArDQo+ICsNCj4gKy8vIFJlZ2lzdGVyIE5W
RExBX0NGR1JPTV9DRkdST01fQ0RQX1JETUFfQkFTRV9BVE9NSUNfTV8wDQo+ICsjZGVmaW5l
IE5WRExBX0NGR1JPTV9DRkdST01fQ0RQX1JETUFfQkFTRV9BVE9NSUNfTV8wCQkJX01LX0FE
RFJfQ09OU1QoMHgxODApDQo+ICsjZGVmaW5lIE5WRExBX0NGR1JPTV9DRkdST01fQ0RQX1JE
TUFfQkFTRV9BVE9NSUNfTV8wX0NEUF9SRE1BX0JBU0VfQVRPTUlDX01fU0hJRlQJCQlfTUtf
U0hJRlRfQ09OU1QoMCkNCj4gKyNkZWZpbmUgTlZETEFfQ0ZHUk9NX0NGR1JPTV9DRFBfUkRN
QV9CQVNFX0FUT01JQ19NXzBfQ0RQX1JETUFfQkFTRV9BVE9NSUNfTV9GSUVMRAkJCV9NS19G
SUVMRF9DT05TVCgweGZmZmZmZmZmLCBOVkRMQV9DRkdST01fQ0ZHUk9NX0NEUF9SRE1BX0JB
U0VfQVRPTUlDX01fMF9DRFBfUkRNQV9CQVNFX0FUT01JQ19NX1NISUZUKQ0KPiArDQo+ICsN
Cj4gKy8vIFJlZ2lzdGVyIE5WRExBX0NGR1JPTV9DRkdST01fQ0RQX1JETUFfQkFTRV9DRFBf
SURfMA0KPiArI2RlZmluZSBOVkRMQV9DRkdST01fQ0ZHUk9NX0NEUF9SRE1BX0JBU0VfQ0RQ
X0lEXzAJCQlfTUtfQUREUl9DT05TVCgweDE4NCkNCj4gKyNkZWZpbmUgTlZETEFfQ0ZHUk9N
X0NGR1JPTV9DRFBfUkRNQV9CQVNFX0NEUF9JRF8wX0NEUF9SRE1BX0JBU0VfQ0RQX0lEX1NI
SUZUCQkJX01LX1NISUZUX0NPTlNUKDApDQo+ICsjZGVmaW5lIE5WRExBX0NGR1JPTV9DRkdS
T01fQ0RQX1JETUFfQkFTRV9DRFBfSURfMF9DRFBfUkRNQV9CQVNFX0NEUF9JRF9GSUVMRAkJ
CV9NS19GSUVMRF9DT05TVCgweGZmZmZmZmZmLCBOVkRMQV9DRkdST01fQ0ZHUk9NX0NEUF9S
RE1BX0JBU0VfQ0RQX0lEXzBfQ0RQX1JETUFfQkFTRV9DRFBfSURfU0hJRlQpDQo+ICsNCj4g
Kw0KPiArLy8gUmVnaXN0ZXIgTlZETEFfQ0ZHUk9NX0NGR1JPTV9DRFBfREVTQ18wDQo+ICsj
ZGVmaW5lIE5WRExBX0NGR1JPTV9DRkdST01fQ0RQX0RFU0NfMAkJCV9NS19BRERSX0NPTlNU
KDB4MTg4KQ0KPiArI2RlZmluZSBOVkRMQV9DRkdST01fQ0ZHUk9NX0NEUF9ERVNDXzBfQ0RQ
X0RFU0NfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMCkNCj4gKyNkZWZpbmUgTlZETEFfQ0ZH
Uk9NX0NGR1JPTV9DRFBfREVTQ18wX0NEUF9ERVNDX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNU
KDB4ZmZmZmZmZmYsIE5WRExBX0NGR1JPTV9DRkdST01fQ0RQX0RFU0NfMF9DRFBfREVTQ19T
SElGVCkNCj4gKw0KPiArDQo+ICsvLyBSZWdpc3RlciBOVkRMQV9DRkdST01fQ0ZHUk9NX0NE
UF9DQVBfSU5DT01QQVRfMA0KPiArI2RlZmluZSBOVkRMQV9DRkdST01fQ0ZHUk9NX0NEUF9D
QVBfSU5DT01QQVRfMAkJCV9NS19BRERSX0NPTlNUKDB4MThjKQ0KPiArI2RlZmluZSBOVkRM
QV9DRkdST01fQ0ZHUk9NX0NEUF9DQVBfSU5DT01QQVRfMF9DRFBfQ0FQX0lOQ09NUEFUX1NI
SUZUCQkJX01LX1NISUZUX0NPTlNUKDApDQo+ICsjZGVmaW5lIE5WRExBX0NGR1JPTV9DRkdS
T01fQ0RQX0NBUF9JTkNPTVBBVF8wX0NEUF9DQVBfSU5DT01QQVRfRklFTEQJCQlfTUtfRklF
TERfQ09OU1QoMHhmZmZmZmZmZiwgTlZETEFfQ0ZHUk9NX0NGR1JPTV9DRFBfQ0FQX0lOQ09N
UEFUXzBfQ0RQX0NBUF9JTkNPTVBBVF9TSElGVCkNCj4gKw0KPiArDQo+ICsvLyBSZWdpc3Rl
ciBOVkRMQV9DRkdST01fQ0ZHUk9NX0NEUF9DQVBfQ09NUEFUXzANCj4gKyNkZWZpbmUgTlZE
TEFfQ0ZHUk9NX0NGR1JPTV9DRFBfQ0FQX0NPTVBBVF8wCQkJX01LX0FERFJfQ09OU1QoMHgx
OTApDQo+ICsjZGVmaW5lIE5WRExBX0NGR1JPTV9DRkdST01fQ0RQX0NBUF9DT01QQVRfMF9D
RFBfQ0FQX0NPTVBBVF9TSElGVAkJCV9NS19TSElGVF9DT05TVCgwKQ0KPiArI2RlZmluZSBO
VkRMQV9DRkdST01fQ0ZHUk9NX0NEUF9DQVBfQ09NUEFUXzBfQ0RQX0NBUF9DT01QQVRfRklF
TEQJCQlfTUtfRklFTERfQ09OU1QoMHhmZmZmZmZmZiwgTlZETEFfQ0ZHUk9NX0NGR1JPTV9D
RFBfQ0FQX0NPTVBBVF8wX0NEUF9DQVBfQ09NUEFUX1NISUZUKQ0KPiArDQo+ICsNCj4gKy8v
IFJlZ2lzdGVyIE5WRExBX0NGR1JPTV9DRkdST01fQ0RQX0JBU0VfRkVBVFVSRV9UWVBFU18w
DQo+ICsjZGVmaW5lIE5WRExBX0NGR1JPTV9DRkdST01fQ0RQX0JBU0VfRkVBVFVSRV9UWVBF
U18wCQkJX01LX0FERFJfQ09OU1QoMHgxOTQpDQo+ICsjZGVmaW5lIE5WRExBX0NGR1JPTV9D
RkdST01fQ0RQX0JBU0VfRkVBVFVSRV9UWVBFU18wX0NEUF9CQVNFX0ZFQVRVUkVfVFlQRVNf
U0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMCkNCj4gKyNkZWZpbmUgTlZETEFfQ0ZHUk9NX0NG
R1JPTV9DRFBfQkFTRV9GRUFUVVJFX1RZUEVTXzBfQ0RQX0JBU0VfRkVBVFVSRV9UWVBFU19G
SUVMRAkJCV9NS19GSUVMRF9DT05TVCgweGZmZiwgTlZETEFfQ0ZHUk9NX0NGR1JPTV9DRFBf
QkFTRV9GRUFUVVJFX1RZUEVTXzBfQ0RQX0JBU0VfRkVBVFVSRV9UWVBFU19TSElGVCkNCj4g
Kw0KPiArDQo+ICsvLyBSZWdpc3RlciBOVkRMQV9DRkdST01fQ0ZHUk9NX0NEUF9CQVNFX1RI
Uk9VR0hQVVRfMA0KPiArI2RlZmluZSBOVkRMQV9DRkdST01fQ0ZHUk9NX0NEUF9CQVNFX1RI
Uk9VR0hQVVRfMAkJCV9NS19BRERSX0NPTlNUKDB4MTk4KQ0KPiArI2RlZmluZSBOVkRMQV9D
RkdST01fQ0ZHUk9NX0NEUF9CQVNFX1RIUk9VR0hQVVRfMF9DRFBfQkFTRV9USFJPVUdIUFVU
X1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDApDQo+ICsjZGVmaW5lIE5WRExBX0NGR1JPTV9D
RkdST01fQ0RQX0JBU0VfVEhST1VHSFBVVF8wX0NEUF9CQVNFX1RIUk9VR0hQVVRfRklFTEQJ
CQlfTUtfRklFTERfQ09OU1QoMHhmZmZmZmZmZiwgTlZETEFfQ0ZHUk9NX0NGR1JPTV9DRFBf
QkFTRV9USFJPVUdIUFVUXzBfQ0RQX0JBU0VfVEhST1VHSFBVVF9TSElGVCkNCj4gKw0KPiAr
DQo+ICsvLyBSZWdpc3RlciBOVkRMQV9DRkdST01fQ0ZHUk9NX0VORF9PRl9MSVNUXzANCj4g
KyNkZWZpbmUgTlZETEFfQ0ZHUk9NX0NGR1JPTV9FTkRfT0ZfTElTVF8wCQkJX01LX0FERFJf
Q09OU1QoMHgxOWMpDQo+ICsjZGVmaW5lIE5WRExBX0NGR1JPTV9DRkdST01fRU5EX09GX0xJ
U1RfMF9FTkRfT0ZfTElTVF9TSElGVAkJCV9NS19TSElGVF9DT05TVCgwKQ0KPiArI2RlZmlu
ZSBOVkRMQV9DRkdST01fQ0ZHUk9NX0VORF9PRl9MSVNUXzBfRU5EX09GX0xJU1RfRklFTEQJ
CQlfTUtfRklFTERfQ09OU1QoMHhmZmZmZmZmZiwgTlZETEFfQ0ZHUk9NX0NGR1JPTV9FTkRf
T0ZfTElTVF8wX0VORF9PRl9MSVNUX1NISUZUKQ0KPiArDQo+ICsNCj4gKw0KPiArLy8gVG8g
c2F0aXNmeSB2YXJpb3VzIGNvbXBpbGVycyBhbmQgcGxhdGZvcm1zLA0KPiArLy8gd2UgbGV0
IHVzZXJzIGNvbnRyb2wgdGhlIHR5cGVzIGFuZCBzeW50YXggb2YgY2VydGFpbiBjb25zdGFu
dHMsIHVzaW5nIG1hY3Jvcy4NCj4gKyNpZm5kZWYgX01LX1NISUZUX0NPTlNUDQo+ICsgICNk
ZWZpbmUgX01LX1NISUZUX0NPTlNUKF9jb25zdGFudF8pIF9jb25zdGFudF8NCj4gKyNlbmRp
Zg0KPiArI2lmbmRlZiBfTUtfTUFTS19DT05TVA0KPiArICAjZGVmaW5lIF9NS19NQVNLX0NP
TlNUKF9jb25zdGFudF8pIF9jb25zdGFudF8NCj4gKyNlbmRpZg0KPiArI2lmbmRlZiBfTUtf
RU5VTV9DT05TVA0KPiArICAjZGVmaW5lIF9NS19FTlVNX0NPTlNUKF9jb25zdGFudF8pIChf
Y29uc3RhbnRfICMjIFVMKQ0KPiArI2VuZGlmDQo+ICsjaWZuZGVmIF9NS19BRERSX0NPTlNU
DQo+ICsgICNkZWZpbmUgX01LX0FERFJfQ09OU1QoX2NvbnN0YW50XykgX2NvbnN0YW50Xw0K
PiArI2VuZGlmDQo+ICsjaWZuZGVmIF9NS19GSUVMRF9DT05TVA0KPiArICAjZGVmaW5lIF9N
S19GSUVMRF9DT05TVChfbWFza18sIF9zaGlmdF8pIChfTUtfTUFTS19DT05TVChfbWFza18p
IDw8IF9NS19TSElGVF9DT05TVChfc2hpZnRfKSkNCj4gKyNlbmRpZg0KPiArDQo+ICsNCj4g
Ky8vIFJlZ2lzdGVyIEdMQl9TX05WRExBX0hXX1ZFUlNJT05fMA0KPiArI2RlZmluZSBHTEJf
U19OVkRMQV9IV19WRVJTSU9OXzAJCQlfTUtfQUREUl9DT05TVCgweDEwMDApDQo+ICsjZGVm
aW5lIEdMQl9TX05WRExBX0hXX1ZFUlNJT05fMF9NQUpPUl9TSElGVAkJCV9NS19TSElGVF9D
T05TVCgwKQ0KPiArI2RlZmluZSBHTEJfU19OVkRMQV9IV19WRVJTSU9OXzBfTUFKT1JfRklF
TEQJCQlfTUtfRklFTERfQ09OU1QoMHhmZiwgR0xCX1NfTlZETEFfSFdfVkVSU0lPTl8wX01B
Sk9SX1NISUZUKQ0KPiArI2RlZmluZSBHTEJfU19OVkRMQV9IV19WRVJTSU9OXzBfTUlOT1Jf
U0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoOCkNCj4gKyNkZWZpbmUgR0xCX1NfTlZETEFfSFdf
VkVSU0lPTl8wX01JTk9SX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4ZmZmZiwgR0xCX1Nf
TlZETEFfSFdfVkVSU0lPTl8wX01JTk9SX1NISUZUKQ0KPiArDQo+ICsNCj4gKy8vIFJlZ2lz
dGVyIEdMQl9TX0lOVFJfTUFTS18wDQo+ICsjZGVmaW5lIEdMQl9TX0lOVFJfTUFTS18wCQkJ
X01LX0FERFJfQ09OU1QoMHgxMDA0KQ0KPiArI2RlZmluZSBHTEJfU19JTlRSX01BU0tfMF9T
RFBfRE9ORV9NQVNLMF9TSElGVAkJCV9NS19TSElGVF9DT05TVCgwKQ0KPiArI2RlZmluZSBH
TEJfU19JTlRSX01BU0tfMF9TRFBfRE9ORV9NQVNLMF9GSUVMRAkJCV9NS19GSUVMRF9DT05T
VCgweDEsIEdMQl9TX0lOVFJfTUFTS18wX1NEUF9ET05FX01BU0swX1NISUZUKQ0KPiArI2Rl
ZmluZSBHTEJfU19JTlRSX01BU0tfMF9TRFBfRE9ORV9NQVNLMV9TSElGVAkJCV9NS19TSElG
VF9DT05TVCgxKQ0KPiArI2RlZmluZSBHTEJfU19JTlRSX01BU0tfMF9TRFBfRE9ORV9NQVNL
MV9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweDEsIEdMQl9TX0lOVFJfTUFTS18wX1NEUF9E
T05FX01BU0sxX1NISUZUKQ0KPiArI2RlZmluZSBHTEJfU19JTlRSX01BU0tfMF9DRFBfRE9O
RV9NQVNLMF9TSElGVAkJCV9NS19TSElGVF9DT05TVCgyKQ0KPiArI2RlZmluZSBHTEJfU19J
TlRSX01BU0tfMF9DRFBfRE9ORV9NQVNLMF9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweDEs
IEdMQl9TX0lOVFJfTUFTS18wX0NEUF9ET05FX01BU0swX1NISUZUKQ0KPiArI2RlZmluZSBH
TEJfU19JTlRSX01BU0tfMF9DRFBfRE9ORV9NQVNLMV9TSElGVAkJCV9NS19TSElGVF9DT05T
VCgzKQ0KPiArI2RlZmluZSBHTEJfU19JTlRSX01BU0tfMF9DRFBfRE9ORV9NQVNLMV9GSUVM
RAkJCV9NS19GSUVMRF9DT05TVCgweDEsIEdMQl9TX0lOVFJfTUFTS18wX0NEUF9ET05FX01B
U0sxX1NISUZUKQ0KPiArI2RlZmluZSBHTEJfU19JTlRSX01BU0tfMF9QRFBfRE9ORV9NQVNL
MF9TSElGVAkJCV9NS19TSElGVF9DT05TVCg0KQ0KPiArI2RlZmluZSBHTEJfU19JTlRSX01B
U0tfMF9QRFBfRE9ORV9NQVNLMF9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweDEsIEdMQl9T
X0lOVFJfTUFTS18wX1BEUF9ET05FX01BU0swX1NISUZUKQ0KPiArI2RlZmluZSBHTEJfU19J
TlRSX01BU0tfMF9QRFBfRE9ORV9NQVNLMV9TSElGVAkJCV9NS19TSElGVF9DT05TVCg1KQ0K
PiArI2RlZmluZSBHTEJfU19JTlRSX01BU0tfMF9QRFBfRE9ORV9NQVNLMV9GSUVMRAkJCV9N
S19GSUVMRF9DT05TVCgweDEsIEdMQl9TX0lOVFJfTUFTS18wX1BEUF9ET05FX01BU0sxX1NI
SUZUKQ0KPiArI2RlZmluZSBHTEJfU19JTlRSX01BU0tfMF9CRE1BX0RPTkVfTUFTSzBfU0hJ
RlQJCQlfTUtfU0hJRlRfQ09OU1QoNikNCj4gKyNkZWZpbmUgR0xCX1NfSU5UUl9NQVNLXzBf
QkRNQV9ET05FX01BU0swX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4MSwgR0xCX1NfSU5U
Ul9NQVNLXzBfQkRNQV9ET05FX01BU0swX1NISUZUKQ0KPiArI2RlZmluZSBHTEJfU19JTlRS
X01BU0tfMF9CRE1BX0RPTkVfTUFTSzFfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoNykNCj4g
KyNkZWZpbmUgR0xCX1NfSU5UUl9NQVNLXzBfQkRNQV9ET05FX01BU0sxX0ZJRUxECQkJX01L
X0ZJRUxEX0NPTlNUKDB4MSwgR0xCX1NfSU5UUl9NQVNLXzBfQkRNQV9ET05FX01BU0sxX1NI
SUZUKQ0KPiArI2RlZmluZSBHTEJfU19JTlRSX01BU0tfMF9SVUJJS19ET05FX01BU0swX1NI
SUZUCQkJX01LX1NISUZUX0NPTlNUKDgpDQo+ICsjZGVmaW5lIEdMQl9TX0lOVFJfTUFTS18w
X1JVQklLX0RPTkVfTUFTSzBfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHgxLCBHTEJfU19J
TlRSX01BU0tfMF9SVUJJS19ET05FX01BU0swX1NISUZUKQ0KPiArI2RlZmluZSBHTEJfU19J
TlRSX01BU0tfMF9SVUJJS19ET05FX01BU0sxX1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDkp
DQo+ICsjZGVmaW5lIEdMQl9TX0lOVFJfTUFTS18wX1JVQklLX0RPTkVfTUFTSzFfRklFTEQJ
CQlfTUtfRklFTERfQ09OU1QoMHgxLCBHTEJfU19JTlRSX01BU0tfMF9SVUJJS19ET05FX01B
U0sxX1NISUZUKQ0KPiArI2RlZmluZSBHTEJfU19JTlRSX01BU0tfMF9DRE1BX0RBVF9ET05F
X01BU0swX1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDE2KQ0KPiArI2RlZmluZSBHTEJfU19J
TlRSX01BU0tfMF9DRE1BX0RBVF9ET05FX01BU0swX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNU
KDB4MSwgR0xCX1NfSU5UUl9NQVNLXzBfQ0RNQV9EQVRfRE9ORV9NQVNLMF9TSElGVCkNCj4g
KyNkZWZpbmUgR0xCX1NfSU5UUl9NQVNLXzBfQ0RNQV9EQVRfRE9ORV9NQVNLMV9TSElGVAkJ
CV9NS19TSElGVF9DT05TVCgxNykNCj4gKyNkZWZpbmUgR0xCX1NfSU5UUl9NQVNLXzBfQ0RN
QV9EQVRfRE9ORV9NQVNLMV9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweDEsIEdMQl9TX0lO
VFJfTUFTS18wX0NETUFfREFUX0RPTkVfTUFTSzFfU0hJRlQpDQo+ICsjZGVmaW5lIEdMQl9T
X0lOVFJfTUFTS18wX0NETUFfV1RfRE9ORV9NQVNLMF9TSElGVAkJCV9NS19TSElGVF9DT05T
VCgxOCkNCj4gKyNkZWZpbmUgR0xCX1NfSU5UUl9NQVNLXzBfQ0RNQV9XVF9ET05FX01BU0sw
X0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4MSwgR0xCX1NfSU5UUl9NQVNLXzBfQ0RNQV9X
VF9ET05FX01BU0swX1NISUZUKQ0KPiArI2RlZmluZSBHTEJfU19JTlRSX01BU0tfMF9DRE1B
X1dUX0RPTkVfTUFTSzFfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMTkpDQo+ICsjZGVmaW5l
IEdMQl9TX0lOVFJfTUFTS18wX0NETUFfV1RfRE9ORV9NQVNLMV9GSUVMRAkJCV9NS19GSUVM
RF9DT05TVCgweDEsIEdMQl9TX0lOVFJfTUFTS18wX0NETUFfV1RfRE9ORV9NQVNLMV9TSElG
VCkNCj4gKyNkZWZpbmUgR0xCX1NfSU5UUl9NQVNLXzBfQ0FDQ19ET05FX01BU0swX1NISUZU
CQkJX01LX1NISUZUX0NPTlNUKDIwKQ0KPiArI2RlZmluZSBHTEJfU19JTlRSX01BU0tfMF9D
QUNDX0RPTkVfTUFTSzBfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHgxLCBHTEJfU19JTlRS
X01BU0tfMF9DQUNDX0RPTkVfTUFTSzBfU0hJRlQpDQo+ICsjZGVmaW5lIEdMQl9TX0lOVFJf
TUFTS18wX0NBQ0NfRE9ORV9NQVNLMV9TSElGVAkJCV9NS19TSElGVF9DT05TVCgyMSkNCj4g
KyNkZWZpbmUgR0xCX1NfSU5UUl9NQVNLXzBfQ0FDQ19ET05FX01BU0sxX0ZJRUxECQkJX01L
X0ZJRUxEX0NPTlNUKDB4MSwgR0xCX1NfSU5UUl9NQVNLXzBfQ0FDQ19ET05FX01BU0sxX1NI
SUZUKQ0KPiArDQo+ICsNCj4gKy8vIFJlZ2lzdGVyIEdMQl9TX0lOVFJfU0VUXzANCj4gKyNk
ZWZpbmUgR0xCX1NfSU5UUl9TRVRfMAkJCV9NS19BRERSX0NPTlNUKDB4MTAwOCkNCj4gKyNk
ZWZpbmUgR0xCX1NfSU5UUl9TRVRfMF9TRFBfRE9ORV9TRVQwX1NISUZUCQkJX01LX1NISUZU
X0NPTlNUKDApDQo+ICsjZGVmaW5lIEdMQl9TX0lOVFJfU0VUXzBfU0RQX0RPTkVfU0VUMF9G
SUVMRAkJCV9NS19GSUVMRF9DT05TVCgweDEsIEdMQl9TX0lOVFJfU0VUXzBfU0RQX0RPTkVf
U0VUMF9TSElGVCkNCj4gKyNkZWZpbmUgR0xCX1NfSU5UUl9TRVRfMF9TRFBfRE9ORV9TRVQx
X1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDEpDQo+ICsjZGVmaW5lIEdMQl9TX0lOVFJfU0VU
XzBfU0RQX0RPTkVfU0VUMV9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweDEsIEdMQl9TX0lO
VFJfU0VUXzBfU0RQX0RPTkVfU0VUMV9TSElGVCkNCj4gKyNkZWZpbmUgR0xCX1NfSU5UUl9T
RVRfMF9DRFBfRE9ORV9TRVQwX1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDIpDQo+ICsjZGVm
aW5lIEdMQl9TX0lOVFJfU0VUXzBfQ0RQX0RPTkVfU0VUMF9GSUVMRAkJCV9NS19GSUVMRF9D
T05TVCgweDEsIEdMQl9TX0lOVFJfU0VUXzBfQ0RQX0RPTkVfU0VUMF9TSElGVCkNCj4gKyNk
ZWZpbmUgR0xCX1NfSU5UUl9TRVRfMF9DRFBfRE9ORV9TRVQxX1NISUZUCQkJX01LX1NISUZU
X0NPTlNUKDMpDQo+ICsjZGVmaW5lIEdMQl9TX0lOVFJfU0VUXzBfQ0RQX0RPTkVfU0VUMV9G
SUVMRAkJCV9NS19GSUVMRF9DT05TVCgweDEsIEdMQl9TX0lOVFJfU0VUXzBfQ0RQX0RPTkVf
U0VUMV9TSElGVCkNCj4gKyNkZWZpbmUgR0xCX1NfSU5UUl9TRVRfMF9QRFBfRE9ORV9TRVQw
X1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDQpDQo+ICsjZGVmaW5lIEdMQl9TX0lOVFJfU0VU
XzBfUERQX0RPTkVfU0VUMF9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweDEsIEdMQl9TX0lO
VFJfU0VUXzBfUERQX0RPTkVfU0VUMF9TSElGVCkNCj4gKyNkZWZpbmUgR0xCX1NfSU5UUl9T
RVRfMF9QRFBfRE9ORV9TRVQxX1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDUpDQo+ICsjZGVm
aW5lIEdMQl9TX0lOVFJfU0VUXzBfUERQX0RPTkVfU0VUMV9GSUVMRAkJCV9NS19GSUVMRF9D
T05TVCgweDEsIEdMQl9TX0lOVFJfU0VUXzBfUERQX0RPTkVfU0VUMV9TSElGVCkNCj4gKyNk
ZWZpbmUgR0xCX1NfSU5UUl9TRVRfMF9CRE1BX0RPTkVfU0VUMF9TSElGVAkJCV9NS19TSElG
VF9DT05TVCg2KQ0KPiArI2RlZmluZSBHTEJfU19JTlRSX1NFVF8wX0JETUFfRE9ORV9TRVQw
X0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4MSwgR0xCX1NfSU5UUl9TRVRfMF9CRE1BX0RP
TkVfU0VUMF9TSElGVCkNCj4gKyNkZWZpbmUgR0xCX1NfSU5UUl9TRVRfMF9CRE1BX0RPTkVf
U0VUMV9TSElGVAkJCV9NS19TSElGVF9DT05TVCg3KQ0KPiArI2RlZmluZSBHTEJfU19JTlRS
X1NFVF8wX0JETUFfRE9ORV9TRVQxX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4MSwgR0xC
X1NfSU5UUl9TRVRfMF9CRE1BX0RPTkVfU0VUMV9TSElGVCkNCj4gKyNkZWZpbmUgR0xCX1Nf
SU5UUl9TRVRfMF9SVUJJS19ET05FX1NFVDBfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoOCkN
Cj4gKyNkZWZpbmUgR0xCX1NfSU5UUl9TRVRfMF9SVUJJS19ET05FX1NFVDBfRklFTEQJCQlf
TUtfRklFTERfQ09OU1QoMHgxLCBHTEJfU19JTlRSX1NFVF8wX1JVQklLX0RPTkVfU0VUMF9T
SElGVCkNCj4gKyNkZWZpbmUgR0xCX1NfSU5UUl9TRVRfMF9SVUJJS19ET05FX1NFVDFfU0hJ
RlQJCQlfTUtfU0hJRlRfQ09OU1QoOSkNCj4gKyNkZWZpbmUgR0xCX1NfSU5UUl9TRVRfMF9S
VUJJS19ET05FX1NFVDFfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHgxLCBHTEJfU19JTlRS
X1NFVF8wX1JVQklLX0RPTkVfU0VUMV9TSElGVCkNCj4gKyNkZWZpbmUgR0xCX1NfSU5UUl9T
RVRfMF9DRE1BX0RBVF9ET05FX1NFVDBfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMTYpDQo+
ICsjZGVmaW5lIEdMQl9TX0lOVFJfU0VUXzBfQ0RNQV9EQVRfRE9ORV9TRVQwX0ZJRUxECQkJ
X01LX0ZJRUxEX0NPTlNUKDB4MSwgR0xCX1NfSU5UUl9TRVRfMF9DRE1BX0RBVF9ET05FX1NF
VDBfU0hJRlQpDQo+ICsjZGVmaW5lIEdMQl9TX0lOVFJfU0VUXzBfQ0RNQV9EQVRfRE9ORV9T
RVQxX1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDE3KQ0KPiArI2RlZmluZSBHTEJfU19JTlRS
X1NFVF8wX0NETUFfREFUX0RPTkVfU0VUMV9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweDEs
IEdMQl9TX0lOVFJfU0VUXzBfQ0RNQV9EQVRfRE9ORV9TRVQxX1NISUZUKQ0KPiArI2RlZmlu
ZSBHTEJfU19JTlRSX1NFVF8wX0NETUFfV1RfRE9ORV9TRVQwX1NISUZUCQkJX01LX1NISUZU
X0NPTlNUKDE4KQ0KPiArI2RlZmluZSBHTEJfU19JTlRSX1NFVF8wX0NETUFfV1RfRE9ORV9T
RVQwX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4MSwgR0xCX1NfSU5UUl9TRVRfMF9DRE1B
X1dUX0RPTkVfU0VUMF9TSElGVCkNCj4gKyNkZWZpbmUgR0xCX1NfSU5UUl9TRVRfMF9DRE1B
X1dUX0RPTkVfU0VUMV9TSElGVAkJCV9NS19TSElGVF9DT05TVCgxOSkNCj4gKyNkZWZpbmUg
R0xCX1NfSU5UUl9TRVRfMF9DRE1BX1dUX0RPTkVfU0VUMV9GSUVMRAkJCV9NS19GSUVMRF9D
T05TVCgweDEsIEdMQl9TX0lOVFJfU0VUXzBfQ0RNQV9XVF9ET05FX1NFVDFfU0hJRlQpDQo+
ICsjZGVmaW5lIEdMQl9TX0lOVFJfU0VUXzBfQ0FDQ19ET05FX1NFVDBfU0hJRlQJCQlfTUtf
U0hJRlRfQ09OU1QoMjApDQo+ICsjZGVmaW5lIEdMQl9TX0lOVFJfU0VUXzBfQ0FDQ19ET05F
X1NFVDBfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHgxLCBHTEJfU19JTlRSX1NFVF8wX0NB
Q0NfRE9ORV9TRVQwX1NISUZUKQ0KPiArI2RlZmluZSBHTEJfU19JTlRSX1NFVF8wX0NBQ0Nf
RE9ORV9TRVQxX1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDIxKQ0KPiArI2RlZmluZSBHTEJf
U19JTlRSX1NFVF8wX0NBQ0NfRE9ORV9TRVQxX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4
MSwgR0xCX1NfSU5UUl9TRVRfMF9DQUNDX0RPTkVfU0VUMV9TSElGVCkNCj4gKw0KPiArDQo+
ICsvLyBSZWdpc3RlciBHTEJfU19JTlRSX1NUQVRVU18wDQo+ICsjZGVmaW5lIEdMQl9TX0lO
VFJfU1RBVFVTXzAJCQlfTUtfQUREUl9DT05TVCgweDEwMGMpDQo+ICsjZGVmaW5lIEdMQl9T
X0lOVFJfU1RBVFVTXzBfU0RQX0RPTkVfU1RBVFVTMF9TSElGVAkJCV9NS19TSElGVF9DT05T
VCgwKQ0KPiArI2RlZmluZSBHTEJfU19JTlRSX1NUQVRVU18wX1NEUF9ET05FX1NUQVRVUzBf
RklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHgxLCBHTEJfU19JTlRSX1NUQVRVU18wX1NEUF9E
T05FX1NUQVRVUzBfU0hJRlQpDQo+ICsjZGVmaW5lIEdMQl9TX0lOVFJfU1RBVFVTXzBfU0RQ
X0RPTkVfU1RBVFVTMV9TSElGVAkJCV9NS19TSElGVF9DT05TVCgxKQ0KPiArI2RlZmluZSBH
TEJfU19JTlRSX1NUQVRVU18wX1NEUF9ET05FX1NUQVRVUzFfRklFTEQJCQlfTUtfRklFTERf
Q09OU1QoMHgxLCBHTEJfU19JTlRSX1NUQVRVU18wX1NEUF9ET05FX1NUQVRVUzFfU0hJRlQp
DQo+ICsjZGVmaW5lIEdMQl9TX0lOVFJfU1RBVFVTXzBfQ0RQX0RPTkVfU1RBVFVTMF9TSElG
VAkJCV9NS19TSElGVF9DT05TVCgyKQ0KPiArI2RlZmluZSBHTEJfU19JTlRSX1NUQVRVU18w
X0NEUF9ET05FX1NUQVRVUzBfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHgxLCBHTEJfU19J
TlRSX1NUQVRVU18wX0NEUF9ET05FX1NUQVRVUzBfU0hJRlQpDQo+ICsjZGVmaW5lIEdMQl9T
X0lOVFJfU1RBVFVTXzBfQ0RQX0RPTkVfU1RBVFVTMV9TSElGVAkJCV9NS19TSElGVF9DT05T
VCgzKQ0KPiArI2RlZmluZSBHTEJfU19JTlRSX1NUQVRVU18wX0NEUF9ET05FX1NUQVRVUzFf
RklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHgxLCBHTEJfU19JTlRSX1NUQVRVU18wX0NEUF9E
T05FX1NUQVRVUzFfU0hJRlQpDQo+ICsjZGVmaW5lIEdMQl9TX0lOVFJfU1RBVFVTXzBfUERQ
X0RPTkVfU1RBVFVTMF9TSElGVAkJCV9NS19TSElGVF9DT05TVCg0KQ0KPiArI2RlZmluZSBH
TEJfU19JTlRSX1NUQVRVU18wX1BEUF9ET05FX1NUQVRVUzBfRklFTEQJCQlfTUtfRklFTERf
Q09OU1QoMHgxLCBHTEJfU19JTlRSX1NUQVRVU18wX1BEUF9ET05FX1NUQVRVUzBfU0hJRlQp
DQo+ICsjZGVmaW5lIEdMQl9TX0lOVFJfU1RBVFVTXzBfUERQX0RPTkVfU1RBVFVTMV9TSElG
VAkJCV9NS19TSElGVF9DT05TVCg1KQ0KPiArI2RlZmluZSBHTEJfU19JTlRSX1NUQVRVU18w
X1BEUF9ET05FX1NUQVRVUzFfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHgxLCBHTEJfU19J
TlRSX1NUQVRVU18wX1BEUF9ET05FX1NUQVRVUzFfU0hJRlQpDQo+ICsjZGVmaW5lIEdMQl9T
X0lOVFJfU1RBVFVTXzBfQkRNQV9ET05FX1NUQVRVUzBfU0hJRlQJCQlfTUtfU0hJRlRfQ09O
U1QoNikNCj4gKyNkZWZpbmUgR0xCX1NfSU5UUl9TVEFUVVNfMF9CRE1BX0RPTkVfU1RBVFVT
MF9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweDEsIEdMQl9TX0lOVFJfU1RBVFVTXzBfQkRN
QV9ET05FX1NUQVRVUzBfU0hJRlQpDQo+ICsjZGVmaW5lIEdMQl9TX0lOVFJfU1RBVFVTXzBf
QkRNQV9ET05FX1NUQVRVUzFfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoNykNCj4gKyNkZWZp
bmUgR0xCX1NfSU5UUl9TVEFUVVNfMF9CRE1BX0RPTkVfU1RBVFVTMV9GSUVMRAkJCV9NS19G
SUVMRF9DT05TVCgweDEsIEdMQl9TX0lOVFJfU1RBVFVTXzBfQkRNQV9ET05FX1NUQVRVUzFf
U0hJRlQpDQo+ICsjZGVmaW5lIEdMQl9TX0lOVFJfU1RBVFVTXzBfUlVCSUtfRE9ORV9TVEFU
VVMwX1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDgpDQo+ICsjZGVmaW5lIEdMQl9TX0lOVFJf
U1RBVFVTXzBfUlVCSUtfRE9ORV9TVEFUVVMwX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4
MSwgR0xCX1NfSU5UUl9TVEFUVVNfMF9SVUJJS19ET05FX1NUQVRVUzBfU0hJRlQpDQo+ICsj
ZGVmaW5lIEdMQl9TX0lOVFJfU1RBVFVTXzBfUlVCSUtfRE9ORV9TVEFUVVMxX1NISUZUCQkJ
X01LX1NISUZUX0NPTlNUKDkpDQo+ICsjZGVmaW5lIEdMQl9TX0lOVFJfU1RBVFVTXzBfUlVC
SUtfRE9ORV9TVEFUVVMxX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4MSwgR0xCX1NfSU5U
Ul9TVEFUVVNfMF9SVUJJS19ET05FX1NUQVRVUzFfU0hJRlQpDQo+ICsjZGVmaW5lIEdMQl9T
X0lOVFJfU1RBVFVTXzBfQ0RNQV9EQVRfRE9ORV9TVEFUVVMwX1NISUZUCQkJX01LX1NISUZU
X0NPTlNUKDE2KQ0KPiArI2RlZmluZSBHTEJfU19JTlRSX1NUQVRVU18wX0NETUFfREFUX0RP
TkVfU1RBVFVTMF9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweDEsIEdMQl9TX0lOVFJfU1RB
VFVTXzBfQ0RNQV9EQVRfRE9ORV9TVEFUVVMwX1NISUZUKQ0KPiArI2RlZmluZSBHTEJfU19J
TlRSX1NUQVRVU18wX0NETUFfREFUX0RPTkVfU1RBVFVTMV9TSElGVAkJCV9NS19TSElGVF9D
T05TVCgxNykNCj4gKyNkZWZpbmUgR0xCX1NfSU5UUl9TVEFUVVNfMF9DRE1BX0RBVF9ET05F
X1NUQVRVUzFfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHgxLCBHTEJfU19JTlRSX1NUQVRV
U18wX0NETUFfREFUX0RPTkVfU1RBVFVTMV9TSElGVCkNCj4gKyNkZWZpbmUgR0xCX1NfSU5U
Ul9TVEFUVVNfMF9DRE1BX1dUX0RPTkVfU1RBVFVTMF9TSElGVAkJCV9NS19TSElGVF9DT05T
VCgxOCkNCj4gKyNkZWZpbmUgR0xCX1NfSU5UUl9TVEFUVVNfMF9DRE1BX1dUX0RPTkVfU1RB
VFVTMF9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweDEsIEdMQl9TX0lOVFJfU1RBVFVTXzBf
Q0RNQV9XVF9ET05FX1NUQVRVUzBfU0hJRlQpDQo+ICsjZGVmaW5lIEdMQl9TX0lOVFJfU1RB
VFVTXzBfQ0RNQV9XVF9ET05FX1NUQVRVUzFfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMTkp
DQo+ICsjZGVmaW5lIEdMQl9TX0lOVFJfU1RBVFVTXzBfQ0RNQV9XVF9ET05FX1NUQVRVUzFf
RklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHgxLCBHTEJfU19JTlRSX1NUQVRVU18wX0NETUFf
V1RfRE9ORV9TVEFUVVMxX1NISUZUKQ0KPiArI2RlZmluZSBHTEJfU19JTlRSX1NUQVRVU18w
X0NBQ0NfRE9ORV9TVEFUVVMwX1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDIwKQ0KPiArI2Rl
ZmluZSBHTEJfU19JTlRSX1NUQVRVU18wX0NBQ0NfRE9ORV9TVEFUVVMwX0ZJRUxECQkJX01L
X0ZJRUxEX0NPTlNUKDB4MSwgR0xCX1NfSU5UUl9TVEFUVVNfMF9DQUNDX0RPTkVfU1RBVFVT
MF9TSElGVCkNCj4gKyNkZWZpbmUgR0xCX1NfSU5UUl9TVEFUVVNfMF9DQUNDX0RPTkVfU1RB
VFVTMV9TSElGVAkJCV9NS19TSElGVF9DT05TVCgyMSkNCj4gKyNkZWZpbmUgR0xCX1NfSU5U
Ul9TVEFUVVNfMF9DQUNDX0RPTkVfU1RBVFVTMV9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgw
eDEsIEdMQl9TX0lOVFJfU1RBVFVTXzBfQ0FDQ19ET05FX1NUQVRVUzFfU0hJRlQpDQo+ICsN
Cj4gKw0KPiArDQo+ICsvLyBUbyBzYXRpc2Z5IHZhcmlvdXMgY29tcGlsZXJzIGFuZCBwbGF0
Zm9ybXMsDQo+ICsvLyB3ZSBsZXQgdXNlcnMgY29udHJvbCB0aGUgdHlwZXMgYW5kIHN5bnRh
eCBvZiBjZXJ0YWluIGNvbnN0YW50cywgdXNpbmcgbWFjcm9zLg0KPiArI2lmbmRlZiBfTUtf
U0hJRlRfQ09OU1QNCj4gKyAgI2RlZmluZSBfTUtfU0hJRlRfQ09OU1QoX2NvbnN0YW50Xykg
X2NvbnN0YW50Xw0KPiArI2VuZGlmDQo+ICsjaWZuZGVmIF9NS19NQVNLX0NPTlNUDQo+ICsg
ICNkZWZpbmUgX01LX01BU0tfQ09OU1QoX2NvbnN0YW50XykgX2NvbnN0YW50Xw0KPiArI2Vu
ZGlmDQo+ICsjaWZuZGVmIF9NS19FTlVNX0NPTlNUDQo+ICsgICNkZWZpbmUgX01LX0VOVU1f
Q09OU1QoX2NvbnN0YW50XykgKF9jb25zdGFudF8gIyMgVUwpDQo+ICsjZW5kaWYNCj4gKyNp
Zm5kZWYgX01LX0FERFJfQ09OU1QNCj4gKyAgI2RlZmluZSBfTUtfQUREUl9DT05TVChfY29u
c3RhbnRfKSBfY29uc3RhbnRfDQo+ICsjZW5kaWYNCj4gKyNpZm5kZWYgX01LX0ZJRUxEX0NP
TlNUDQo+ICsgICNkZWZpbmUgX01LX0ZJRUxEX0NPTlNUKF9tYXNrXywgX3NoaWZ0XykgKF9N
S19NQVNLX0NPTlNUKF9tYXNrXykgPDwgX01LX1NISUZUX0NPTlNUKF9zaGlmdF8pKQ0KPiAr
I2VuZGlmDQo+ICsNCj4gKw0KPiArLy8gUmVnaXN0ZXIgTlZETEFfTUNJRl9DRkdfUkRfV0VJ
R0hUXzBfMA0KPiArI2RlZmluZSBOVkRMQV9NQ0lGX0NGR19SRF9XRUlHSFRfMF8wCQkJX01L
X0FERFJfQ09OU1QoMHgyMDAwKQ0KPiArI2RlZmluZSBOVkRMQV9NQ0lGX0NGR19SRF9XRUlH
SFRfMF8wX1JEX1dFSUdIVF9CRE1BX1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDApDQo+ICsj
ZGVmaW5lIE5WRExBX01DSUZfQ0ZHX1JEX1dFSUdIVF8wXzBfUkRfV0VJR0hUX0JETUFfRklF
TEQJCQlfTUtfRklFTERfQ09OU1QoMHhmZiwgTlZETEFfTUNJRl9DRkdfUkRfV0VJR0hUXzBf
MF9SRF9XRUlHSFRfQkRNQV9TSElGVCkNCj4gKyNkZWZpbmUgTlZETEFfTUNJRl9DRkdfUkRf
V0VJR0hUXzBfMF9SRF9XRUlHSFRfU0RQX1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDgpDQo+
ICsjZGVmaW5lIE5WRExBX01DSUZfQ0ZHX1JEX1dFSUdIVF8wXzBfUkRfV0VJR0hUX1NEUF9G
SUVMRAkJCV9NS19GSUVMRF9DT05TVCgweGZmLCBOVkRMQV9NQ0lGX0NGR19SRF9XRUlHSFRf
MF8wX1JEX1dFSUdIVF9TRFBfU0hJRlQpDQo+ICsjZGVmaW5lIE5WRExBX01DSUZfQ0ZHX1JE
X1dFSUdIVF8wXzBfUkRfV0VJR0hUX1BEUF9TSElGVAkJCV9NS19TSElGVF9DT05TVCgxNikN
Cj4gKyNkZWZpbmUgTlZETEFfTUNJRl9DRkdfUkRfV0VJR0hUXzBfMF9SRF9XRUlHSFRfUERQ
X0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4ZmYsIE5WRExBX01DSUZfQ0ZHX1JEX1dFSUdI
VF8wXzBfUkRfV0VJR0hUX1BEUF9TSElGVCkNCj4gKyNkZWZpbmUgTlZETEFfTUNJRl9DRkdf
UkRfV0VJR0hUXzBfMF9SRF9XRUlHSFRfQ0RQX1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDI0
KQ0KPiArI2RlZmluZSBOVkRMQV9NQ0lGX0NGR19SRF9XRUlHSFRfMF8wX1JEX1dFSUdIVF9D
RFBfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHhmZiwgTlZETEFfTUNJRl9DRkdfUkRfV0VJ
R0hUXzBfMF9SRF9XRUlHSFRfQ0RQX1NISUZUKQ0KPiArDQo+ICsNCj4gKy8vIFJlZ2lzdGVy
IE5WRExBX01DSUZfQ0ZHX1JEX1dFSUdIVF8xXzANCj4gKyNkZWZpbmUgTlZETEFfTUNJRl9D
RkdfUkRfV0VJR0hUXzFfMAkJCV9NS19BRERSX0NPTlNUKDB4MjAwNCkNCj4gKyNkZWZpbmUg
TlZETEFfTUNJRl9DRkdfUkRfV0VJR0hUXzFfMF9SRF9XRUlHSFRfU0RQX0JfU0hJRlQJCQlf
TUtfU0hJRlRfQ09OU1QoMCkNCj4gKyNkZWZpbmUgTlZETEFfTUNJRl9DRkdfUkRfV0VJR0hU
XzFfMF9SRF9XRUlHSFRfU0RQX0JfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHhmZiwgTlZE
TEFfTUNJRl9DRkdfUkRfV0VJR0hUXzFfMF9SRF9XRUlHSFRfU0RQX0JfU0hJRlQpDQo+ICsj
ZGVmaW5lIE5WRExBX01DSUZfQ0ZHX1JEX1dFSUdIVF8xXzBfUkRfV0VJR0hUX1NEUF9OX1NI
SUZUCQkJX01LX1NISUZUX0NPTlNUKDgpDQo+ICsjZGVmaW5lIE5WRExBX01DSUZfQ0ZHX1JE
X1dFSUdIVF8xXzBfUkRfV0VJR0hUX1NEUF9OX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4
ZmYsIE5WRExBX01DSUZfQ0ZHX1JEX1dFSUdIVF8xXzBfUkRfV0VJR0hUX1NEUF9OX1NISUZU
KQ0KPiArI2RlZmluZSBOVkRMQV9NQ0lGX0NGR19SRF9XRUlHSFRfMV8wX1JEX1dFSUdIVF9T
RFBfRV9TSElGVAkJCV9NS19TSElGVF9DT05TVCgxNikNCj4gKyNkZWZpbmUgTlZETEFfTUNJ
Rl9DRkdfUkRfV0VJR0hUXzFfMF9SRF9XRUlHSFRfU0RQX0VfRklFTEQJCQlfTUtfRklFTERf
Q09OU1QoMHhmZiwgTlZETEFfTUNJRl9DRkdfUkRfV0VJR0hUXzFfMF9SRF9XRUlHSFRfU0RQ
X0VfU0hJRlQpDQo+ICsjZGVmaW5lIE5WRExBX01DSUZfQ0ZHX1JEX1dFSUdIVF8xXzBfUkRf
V0VJR0hUX0NETUFfREFUX1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDI0KQ0KPiArI2RlZmlu
ZSBOVkRMQV9NQ0lGX0NGR19SRF9XRUlHSFRfMV8wX1JEX1dFSUdIVF9DRE1BX0RBVF9GSUVM
RAkJCV9NS19GSUVMRF9DT05TVCgweGZmLCBOVkRMQV9NQ0lGX0NGR19SRF9XRUlHSFRfMV8w
X1JEX1dFSUdIVF9DRE1BX0RBVF9TSElGVCkNCj4gKw0KPiArDQo+ICsvLyBSZWdpc3RlciBO
VkRMQV9NQ0lGX0NGR19SRF9XRUlHSFRfMl8wDQo+ICsjZGVmaW5lIE5WRExBX01DSUZfQ0ZH
X1JEX1dFSUdIVF8yXzAJCQlfTUtfQUREUl9DT05TVCgweDIwMDgpDQo+ICsjZGVmaW5lIE5W
RExBX01DSUZfQ0ZHX1JEX1dFSUdIVF8yXzBfUkRfV0VJR0hUX0NETUFfV1RfU0hJRlQJCQlf
TUtfU0hJRlRfQ09OU1QoMCkNCj4gKyNkZWZpbmUgTlZETEFfTUNJRl9DRkdfUkRfV0VJR0hU
XzJfMF9SRF9XRUlHSFRfQ0RNQV9XVF9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweGZmLCBO
VkRMQV9NQ0lGX0NGR19SRF9XRUlHSFRfMl8wX1JEX1dFSUdIVF9DRE1BX1dUX1NISUZUKQ0K
PiArI2RlZmluZSBOVkRMQV9NQ0lGX0NGR19SRF9XRUlHSFRfMl8wX1JEX1dFSUdIVF9SQktf
U0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoOCkNCj4gKyNkZWZpbmUgTlZETEFfTUNJRl9DRkdf
UkRfV0VJR0hUXzJfMF9SRF9XRUlHSFRfUkJLX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4
ZmYsIE5WRExBX01DSUZfQ0ZHX1JEX1dFSUdIVF8yXzBfUkRfV0VJR0hUX1JCS19TSElGVCkN
Cj4gKyNkZWZpbmUgTlZETEFfTUNJRl9DRkdfUkRfV0VJR0hUXzJfMF9SRF9XRUlHSFRfUlNW
XzFfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMTYpDQo+ICsjZGVmaW5lIE5WRExBX01DSUZf
Q0ZHX1JEX1dFSUdIVF8yXzBfUkRfV0VJR0hUX1JTVl8xX0ZJRUxECQkJX01LX0ZJRUxEX0NP
TlNUKDB4ZmYsIE5WRExBX01DSUZfQ0ZHX1JEX1dFSUdIVF8yXzBfUkRfV0VJR0hUX1JTVl8x
X1NISUZUKQ0KPiArI2RlZmluZSBOVkRMQV9NQ0lGX0NGR19SRF9XRUlHSFRfMl8wX1JEX1dF
SUdIVF9SU1ZfMF9TSElGVAkJCV9NS19TSElGVF9DT05TVCgyNCkNCj4gKyNkZWZpbmUgTlZE
TEFfTUNJRl9DRkdfUkRfV0VJR0hUXzJfMF9SRF9XRUlHSFRfUlNWXzBfRklFTEQJCQlfTUtf
RklFTERfQ09OU1QoMHhmZiwgTlZETEFfTUNJRl9DRkdfUkRfV0VJR0hUXzJfMF9SRF9XRUlH
SFRfUlNWXzBfU0hJRlQpDQo+ICsNCj4gKw0KPiArLy8gUmVnaXN0ZXIgTlZETEFfTUNJRl9D
RkdfV1JfV0VJR0hUXzBfMA0KPiArI2RlZmluZSBOVkRMQV9NQ0lGX0NGR19XUl9XRUlHSFRf
MF8wCQkJX01LX0FERFJfQ09OU1QoMHgyMDBjKQ0KPiArI2RlZmluZSBOVkRMQV9NQ0lGX0NG
R19XUl9XRUlHSFRfMF8wX1dSX1dFSUdIVF9CRE1BX1NISUZUCQkJX01LX1NISUZUX0NPTlNU
KDApDQo+ICsjZGVmaW5lIE5WRExBX01DSUZfQ0ZHX1dSX1dFSUdIVF8wXzBfV1JfV0VJR0hU
X0JETUFfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHhmZiwgTlZETEFfTUNJRl9DRkdfV1Jf
V0VJR0hUXzBfMF9XUl9XRUlHSFRfQkRNQV9TSElGVCkNCj4gKyNkZWZpbmUgTlZETEFfTUNJ
Rl9DRkdfV1JfV0VJR0hUXzBfMF9XUl9XRUlHSFRfU0RQX1NISUZUCQkJX01LX1NISUZUX0NP
TlNUKDgpDQo+ICsjZGVmaW5lIE5WRExBX01DSUZfQ0ZHX1dSX1dFSUdIVF8wXzBfV1JfV0VJ
R0hUX1NEUF9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweGZmLCBOVkRMQV9NQ0lGX0NGR19X
Ul9XRUlHSFRfMF8wX1dSX1dFSUdIVF9TRFBfU0hJRlQpDQo+ICsjZGVmaW5lIE5WRExBX01D
SUZfQ0ZHX1dSX1dFSUdIVF8wXzBfV1JfV0VJR0hUX1BEUF9TSElGVAkJCV9NS19TSElGVF9D
T05TVCgxNikNCj4gKyNkZWZpbmUgTlZETEFfTUNJRl9DRkdfV1JfV0VJR0hUXzBfMF9XUl9X
RUlHSFRfUERQX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4ZmYsIE5WRExBX01DSUZfQ0ZH
X1dSX1dFSUdIVF8wXzBfV1JfV0VJR0hUX1BEUF9TSElGVCkNCj4gKyNkZWZpbmUgTlZETEFf
TUNJRl9DRkdfV1JfV0VJR0hUXzBfMF9XUl9XRUlHSFRfQ0RQX1NISUZUCQkJX01LX1NISUZU
X0NPTlNUKDI0KQ0KPiArI2RlZmluZSBOVkRMQV9NQ0lGX0NGR19XUl9XRUlHSFRfMF8wX1dS
X1dFSUdIVF9DRFBfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHhmZiwgTlZETEFfTUNJRl9D
RkdfV1JfV0VJR0hUXzBfMF9XUl9XRUlHSFRfQ0RQX1NISUZUKQ0KPiArDQo+ICsNCj4gKy8v
IFJlZ2lzdGVyIE5WRExBX01DSUZfQ0ZHX1dSX1dFSUdIVF8xXzANCj4gKyNkZWZpbmUgTlZE
TEFfTUNJRl9DRkdfV1JfV0VJR0hUXzFfMAkJCV9NS19BRERSX0NPTlNUKDB4MjAxMCkNCj4g
KyNkZWZpbmUgTlZETEFfTUNJRl9DRkdfV1JfV0VJR0hUXzFfMF9XUl9XRUlHSFRfUkJLX1NI
SUZUCQkJX01LX1NISUZUX0NPTlNUKDApDQo+ICsjZGVmaW5lIE5WRExBX01DSUZfQ0ZHX1dS
X1dFSUdIVF8xXzBfV1JfV0VJR0hUX1JCS19GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweGZm
LCBOVkRMQV9NQ0lGX0NGR19XUl9XRUlHSFRfMV8wX1dSX1dFSUdIVF9SQktfU0hJRlQpDQo+
ICsjZGVmaW5lIE5WRExBX01DSUZfQ0ZHX1dSX1dFSUdIVF8xXzBfV1JfV0VJR0hUX1JTVl8y
X1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDgpDQo+ICsjZGVmaW5lIE5WRExBX01DSUZfQ0ZH
X1dSX1dFSUdIVF8xXzBfV1JfV0VJR0hUX1JTVl8yX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNU
KDB4ZmYsIE5WRExBX01DSUZfQ0ZHX1dSX1dFSUdIVF8xXzBfV1JfV0VJR0hUX1JTVl8yX1NI
SUZUKQ0KPiArI2RlZmluZSBOVkRMQV9NQ0lGX0NGR19XUl9XRUlHSFRfMV8wX1dSX1dFSUdI
VF9SU1ZfMV9TSElGVAkJCV9NS19TSElGVF9DT05TVCgxNikNCj4gKyNkZWZpbmUgTlZETEFf
TUNJRl9DRkdfV1JfV0VJR0hUXzFfMF9XUl9XRUlHSFRfUlNWXzFfRklFTEQJCQlfTUtfRklF
TERfQ09OU1QoMHhmZiwgTlZETEFfTUNJRl9DRkdfV1JfV0VJR0hUXzFfMF9XUl9XRUlHSFRf
UlNWXzFfU0hJRlQpDQo+ICsjZGVmaW5lIE5WRExBX01DSUZfQ0ZHX1dSX1dFSUdIVF8xXzBf
V1JfV0VJR0hUX1JTVl8wX1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDI0KQ0KPiArI2RlZmlu
ZSBOVkRMQV9NQ0lGX0NGR19XUl9XRUlHSFRfMV8wX1dSX1dFSUdIVF9SU1ZfMF9GSUVMRAkJ
CV9NS19GSUVMRF9DT05TVCgweGZmLCBOVkRMQV9NQ0lGX0NGR19XUl9XRUlHSFRfMV8wX1dS
X1dFSUdIVF9SU1ZfMF9TSElGVCkNCj4gKw0KPiArDQo+ICsvLyBSZWdpc3RlciBOVkRMQV9N
Q0lGX0NGR19PVVRTVEFORElOR19DTlRfMA0KPiArI2RlZmluZSBOVkRMQV9NQ0lGX0NGR19P
VVRTVEFORElOR19DTlRfMAkJCV9NS19BRERSX0NPTlNUKDB4MjAxNCkNCj4gKyNkZWZpbmUg
TlZETEFfTUNJRl9DRkdfT1VUU1RBTkRJTkdfQ05UXzBfUkRfT1NfQ05UX1NISUZUCQkJX01L
X1NISUZUX0NPTlNUKDApDQo+ICsjZGVmaW5lIE5WRExBX01DSUZfQ0ZHX09VVFNUQU5ESU5H
X0NOVF8wX1JEX09TX0NOVF9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweGZmLCBOVkRMQV9N
Q0lGX0NGR19PVVRTVEFORElOR19DTlRfMF9SRF9PU19DTlRfU0hJRlQpDQo+ICsjZGVmaW5l
IE5WRExBX01DSUZfQ0ZHX09VVFNUQU5ESU5HX0NOVF8wX1dSX09TX0NOVF9TSElGVAkJCV9N
S19TSElGVF9DT05TVCg4KQ0KPiArI2RlZmluZSBOVkRMQV9NQ0lGX0NGR19PVVRTVEFORElO
R19DTlRfMF9XUl9PU19DTlRfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHhmZiwgTlZETEFf
TUNJRl9DRkdfT1VUU1RBTkRJTkdfQ05UXzBfV1JfT1NfQ05UX1NISUZUKQ0KPiArDQo+ICsN
Cj4gKy8vIFJlZ2lzdGVyIE5WRExBX01DSUZfU1RBVFVTXzANCj4gKyNkZWZpbmUgTlZETEFf
TUNJRl9TVEFUVVNfMAkJCV9NS19BRERSX0NPTlNUKDB4MjAxOCkNCj4gKyNkZWZpbmUgTlZE
TEFfTUNJRl9TVEFUVVNfMF9JRExFX1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDgpDQo+ICsj
ZGVmaW5lIE5WRExBX01DSUZfU1RBVFVTXzBfSURMRV9GSUVMRAkJCV9NS19GSUVMRF9DT05T
VCgweDEsIE5WRExBX01DSUZfU1RBVFVTXzBfSURMRV9TSElGVCkNCj4gKyNkZWZpbmUgTlZE
TEFfTUNJRl9TVEFUVVNfMF9JRExFX05PCQkJX01LX0VOVU1fQ09OU1QoMHgwKQ0KPiArI2Rl
ZmluZSBOVkRMQV9NQ0lGX1NUQVRVU18wX0lETEVfWUVTCQkJX01LX0VOVU1fQ09OU1QoMHgx
KQ0KPiArDQo+ICsNCj4gKw0KPiArLy8gVG8gc2F0aXNmeSB2YXJpb3VzIGNvbXBpbGVycyBh
bmQgcGxhdGZvcm1zLA0KPiArLy8gd2UgbGV0IHVzZXJzIGNvbnRyb2wgdGhlIHR5cGVzIGFu
ZCBzeW50YXggb2YgY2VydGFpbiBjb25zdGFudHMsIHVzaW5nIG1hY3Jvcy4NCj4gKyNpZm5k
ZWYgX01LX1NISUZUX0NPTlNUDQo+ICsgICNkZWZpbmUgX01LX1NISUZUX0NPTlNUKF9jb25z
dGFudF8pIF9jb25zdGFudF8NCj4gKyNlbmRpZg0KPiArI2lmbmRlZiBfTUtfTUFTS19DT05T
VA0KPiArICAjZGVmaW5lIF9NS19NQVNLX0NPTlNUKF9jb25zdGFudF8pIF9jb25zdGFudF8N
Cj4gKyNlbmRpZg0KPiArI2lmbmRlZiBfTUtfRU5VTV9DT05TVA0KPiArICAjZGVmaW5lIF9N
S19FTlVNX0NPTlNUKF9jb25zdGFudF8pIChfY29uc3RhbnRfICMjIFVMKQ0KPiArI2VuZGlm
DQo+ICsjaWZuZGVmIF9NS19BRERSX0NPTlNUDQo+ICsgICNkZWZpbmUgX01LX0FERFJfQ09O
U1QoX2NvbnN0YW50XykgX2NvbnN0YW50Xw0KPiArI2VuZGlmDQo+ICsjaWZuZGVmIF9NS19G
SUVMRF9DT05TVA0KPiArICAjZGVmaW5lIF9NS19GSUVMRF9DT05TVChfbWFza18sIF9zaGlm
dF8pIChfTUtfTUFTS19DT05TVChfbWFza18pIDw8IF9NS19TSElGVF9DT05TVChfc2hpZnRf
KSkNCj4gKyNlbmRpZg0KPiArDQo+ICsNCj4gKy8vIFJlZ2lzdGVyIENETUFfU19TVEFUVVNf
MA0KPiArI2RlZmluZSBDRE1BX1NfU1RBVFVTXzAJCQlfTUtfQUREUl9DT05TVCgweDMwMDAp
DQo+ICsjZGVmaW5lIENETUFfU19TVEFUVVNfMF9TVEFUVVNfMF9TSElGVAkJCV9NS19TSElG
VF9DT05TVCgwKQ0KPiArI2RlZmluZSBDRE1BX1NfU1RBVFVTXzBfU1RBVFVTXzBfRklFTEQJ
CQlfTUtfRklFTERfQ09OU1QoMHgzLCBDRE1BX1NfU1RBVFVTXzBfU1RBVFVTXzBfU0hJRlQp
DQo+ICsjZGVmaW5lIENETUFfU19TVEFUVVNfMF9TVEFUVVNfMF9JRExFCQkJX01LX0VOVU1f
Q09OU1QoMHgwKQ0KPiArI2RlZmluZSBDRE1BX1NfU1RBVFVTXzBfU1RBVFVTXzBfUlVOTklO
RwkJCV9NS19FTlVNX0NPTlNUKDB4MSkNCj4gKyNkZWZpbmUgQ0RNQV9TX1NUQVRVU18wX1NU
QVRVU18wX1BFTkRJTkcJCQlfTUtfRU5VTV9DT05TVCgweDIpDQo+ICsjZGVmaW5lIENETUFf
U19TVEFUVVNfMF9TVEFUVVNfMV9TSElGVAkJCV9NS19TSElGVF9DT05TVCgxNikNCj4gKyNk
ZWZpbmUgQ0RNQV9TX1NUQVRVU18wX1NUQVRVU18xX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNU
KDB4MywgQ0RNQV9TX1NUQVRVU18wX1NUQVRVU18xX1NISUZUKQ0KPiArI2RlZmluZSBDRE1B
X1NfU1RBVFVTXzBfU1RBVFVTXzFfSURMRQkJCV9NS19FTlVNX0NPTlNUKDB4MCkNCj4gKyNk
ZWZpbmUgQ0RNQV9TX1NUQVRVU18wX1NUQVRVU18xX1JVTk5JTkcJCQlfTUtfRU5VTV9DT05T
VCgweDEpDQo+ICsjZGVmaW5lIENETUFfU19TVEFUVVNfMF9TVEFUVVNfMV9QRU5ESU5HCQkJ
X01LX0VOVU1fQ09OU1QoMHgyKQ0KPiArDQo+ICsNCj4gKy8vIFJlZ2lzdGVyIENETUFfU19Q
T0lOVEVSXzANCj4gKyNkZWZpbmUgQ0RNQV9TX1BPSU5URVJfMAkJCV9NS19BRERSX0NPTlNU
KDB4MzAwNCkNCj4gKyNkZWZpbmUgQ0RNQV9TX1BPSU5URVJfMF9QUk9EVUNFUl9TSElGVAkJ
CV9NS19TSElGVF9DT05TVCgwKQ0KPiArI2RlZmluZSBDRE1BX1NfUE9JTlRFUl8wX1BST0RV
Q0VSX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4MSwgQ0RNQV9TX1BPSU5URVJfMF9QUk9E
VUNFUl9TSElGVCkNCj4gKyNkZWZpbmUgQ0RNQV9TX1BPSU5URVJfMF9QUk9EVUNFUl9HUk9V
UF8wCQkJX01LX0VOVU1fQ09OU1QoMHgwKQ0KPiArI2RlZmluZSBDRE1BX1NfUE9JTlRFUl8w
X1BST0RVQ0VSX0dST1VQXzEJCQlfTUtfRU5VTV9DT05TVCgweDEpDQo+ICsjZGVmaW5lIENE
TUFfU19QT0lOVEVSXzBfQ09OU1VNRVJfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMTYpDQo+
ICsjZGVmaW5lIENETUFfU19QT0lOVEVSXzBfQ09OU1VNRVJfRklFTEQJCQlfTUtfRklFTERf
Q09OU1QoMHgxLCBDRE1BX1NfUE9JTlRFUl8wX0NPTlNVTUVSX1NISUZUKQ0KPiArI2RlZmlu
ZSBDRE1BX1NfUE9JTlRFUl8wX0NPTlNVTUVSX0dST1VQXzAJCQlfTUtfRU5VTV9DT05TVCgw
eDApDQo+ICsjZGVmaW5lIENETUFfU19QT0lOVEVSXzBfQ09OU1VNRVJfR1JPVVBfMQkJCV9N
S19FTlVNX0NPTlNUKDB4MSkNCj4gKw0KPiArDQo+ICsvLyBSZWdpc3RlciBDRE1BX1NfQVJC
SVRFUl8wDQo+ICsjZGVmaW5lIENETUFfU19BUkJJVEVSXzAJCQlfTUtfQUREUl9DT05TVCgw
eDMwMDgpDQo+ICsjZGVmaW5lIENETUFfU19BUkJJVEVSXzBfQVJCX1dFSUdIVF9TSElGVAkJ
CV9NS19TSElGVF9DT05TVCgwKQ0KPiArI2RlZmluZSBDRE1BX1NfQVJCSVRFUl8wX0FSQl9X
RUlHSFRfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHhmLCBDRE1BX1NfQVJCSVRFUl8wX0FS
Ql9XRUlHSFRfU0hJRlQpDQo+ICsjZGVmaW5lIENETUFfU19BUkJJVEVSXzBfQVJCX1dNQl9T
SElGVAkJCV9NS19TSElGVF9DT05TVCgxNikNCj4gKyNkZWZpbmUgQ0RNQV9TX0FSQklURVJf
MF9BUkJfV01CX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4ZiwgQ0RNQV9TX0FSQklURVJf
MF9BUkJfV01CX1NISUZUKQ0KPiArDQo+ICsNCj4gKy8vIFJlZ2lzdGVyIENETUFfU19DQlVG
X0ZMVVNIX1NUQVRVU18wDQo+ICsjZGVmaW5lIENETUFfU19DQlVGX0ZMVVNIX1NUQVRVU18w
CQkJX01LX0FERFJfQ09OU1QoMHgzMDBjKQ0KPiArI2RlZmluZSBDRE1BX1NfQ0JVRl9GTFVT
SF9TVEFUVVNfMF9GTFVTSF9ET05FX1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDApDQo+ICsj
ZGVmaW5lIENETUFfU19DQlVGX0ZMVVNIX1NUQVRVU18wX0ZMVVNIX0RPTkVfRklFTEQJCQlf
TUtfRklFTERfQ09OU1QoMHgxLCBDRE1BX1NfQ0JVRl9GTFVTSF9TVEFUVVNfMF9GTFVTSF9E
T05FX1NISUZUKQ0KPiArDQo+ICsNCj4gKy8vIFJlZ2lzdGVyIENETUFfRF9PUF9FTkFCTEVf
MA0KPiArI2RlZmluZSBDRE1BX0RfT1BfRU5BQkxFXzAJCQlfTUtfQUREUl9DT05TVCgweDMw
MTApDQo+ICsjZGVmaW5lIENETUFfRF9PUF9FTkFCTEVfMF9PUF9FTl9TSElGVAkJCV9NS19T
SElGVF9DT05TVCgwKQ0KPiArI2RlZmluZSBDRE1BX0RfT1BfRU5BQkxFXzBfT1BfRU5fRklF
TEQJCQlfTUtfRklFTERfQ09OU1QoMHgxLCBDRE1BX0RfT1BfRU5BQkxFXzBfT1BfRU5fU0hJ
RlQpDQo+ICsjZGVmaW5lIENETUFfRF9PUF9FTkFCTEVfMF9PUF9FTl9ESVNBQkxFCQkJX01L
X0VOVU1fQ09OU1QoMHgwKQ0KPiArI2RlZmluZSBDRE1BX0RfT1BfRU5BQkxFXzBfT1BfRU5f
RU5BQkxFCQkJX01LX0VOVU1fQ09OU1QoMHgxKQ0KPiArDQo+ICsNCj4gKy8vIFJlZ2lzdGVy
IENETUFfRF9NSVNDX0NGR18wDQo+ICsjZGVmaW5lIENETUFfRF9NSVNDX0NGR18wCQkJX01L
X0FERFJfQ09OU1QoMHgzMDE0KQ0KPiArI2RlZmluZSBDRE1BX0RfTUlTQ19DRkdfMF9DT05W
X01PREVfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMCkNCj4gKyNkZWZpbmUgQ0RNQV9EX01J
U0NfQ0ZHXzBfQ09OVl9NT0RFX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4MSwgQ0RNQV9E
X01JU0NfQ0ZHXzBfQ09OVl9NT0RFX1NISUZUKQ0KPiArI2RlZmluZSBDRE1BX0RfTUlTQ19D
RkdfMF9DT05WX01PREVfRElSRUNUCQkJX01LX0VOVU1fQ09OU1QoMHgwKQ0KPiArI2RlZmlu
ZSBDRE1BX0RfTUlTQ19DRkdfMF9DT05WX01PREVfV0lOT0dSQUQJCQlfTUtfRU5VTV9DT05T
VCgweDEpDQo+ICsjZGVmaW5lIENETUFfRF9NSVNDX0NGR18wX0lOX1BSRUNJU0lPTl9TSElG
VAkJCV9NS19TSElGVF9DT05TVCg4KQ0KPiArI2RlZmluZSBDRE1BX0RfTUlTQ19DRkdfMF9J
Tl9QUkVDSVNJT05fRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHgzLCBDRE1BX0RfTUlTQ19D
RkdfMF9JTl9QUkVDSVNJT05fU0hJRlQpDQo+ICsjZGVmaW5lIENETUFfRF9NSVNDX0NGR18w
X0lOX1BSRUNJU0lPTl9JTlQ4CQkJX01LX0VOVU1fQ09OU1QoMHgwKQ0KPiArI2RlZmluZSBD
RE1BX0RfTUlTQ19DRkdfMF9JTl9QUkVDSVNJT05fSU5UMTYJCQlfTUtfRU5VTV9DT05TVCgw
eDEpDQo+ICsjZGVmaW5lIENETUFfRF9NSVNDX0NGR18wX0lOX1BSRUNJU0lPTl9GUDE2CQkJ
X01LX0VOVU1fQ09OU1QoMHgyKQ0KPiArI2RlZmluZSBDRE1BX0RfTUlTQ19DRkdfMF9QUk9D
X1BSRUNJU0lPTl9TSElGVAkJCV9NS19TSElGVF9DT05TVCgxMikNCj4gKyNkZWZpbmUgQ0RN
QV9EX01JU0NfQ0ZHXzBfUFJPQ19QUkVDSVNJT05fRklFTEQJCQlfTUtfRklFTERfQ09OU1Qo
MHgzLCBDRE1BX0RfTUlTQ19DRkdfMF9QUk9DX1BSRUNJU0lPTl9TSElGVCkNCj4gKyNkZWZp
bmUgQ0RNQV9EX01JU0NfQ0ZHXzBfUFJPQ19QUkVDSVNJT05fSU5UOAkJCV9NS19FTlVNX0NP
TlNUKDB4MCkNCj4gKyNkZWZpbmUgQ0RNQV9EX01JU0NfQ0ZHXzBfUFJPQ19QUkVDSVNJT05f
SU5UMTYJCQlfTUtfRU5VTV9DT05TVCgweDEpDQo+ICsjZGVmaW5lIENETUFfRF9NSVNDX0NG
R18wX1BST0NfUFJFQ0lTSU9OX0ZQMTYJCQlfTUtfRU5VTV9DT05TVCgweDIpDQo+ICsjZGVm
aW5lIENETUFfRF9NSVNDX0NGR18wX0RBVEFfUkVVU0VfU0hJRlQJCQlfTUtfU0hJRlRfQ09O
U1QoMTYpDQo+ICsjZGVmaW5lIENETUFfRF9NSVNDX0NGR18wX0RBVEFfUkVVU0VfRklFTEQJ
CQlfTUtfRklFTERfQ09OU1QoMHgxLCBDRE1BX0RfTUlTQ19DRkdfMF9EQVRBX1JFVVNFX1NI
SUZUKQ0KPiArI2RlZmluZSBDRE1BX0RfTUlTQ19DRkdfMF9EQVRBX1JFVVNFX0RJU0FCTEUJ
CQlfTUtfRU5VTV9DT05TVCgweDApDQo+ICsjZGVmaW5lIENETUFfRF9NSVNDX0NGR18wX0RB
VEFfUkVVU0VfRU5BQkxFCQkJX01LX0VOVU1fQ09OU1QoMHgxKQ0KPiArI2RlZmluZSBDRE1B
X0RfTUlTQ19DRkdfMF9XRUlHSFRfUkVVU0VfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMjAp
DQo+ICsjZGVmaW5lIENETUFfRF9NSVNDX0NGR18wX1dFSUdIVF9SRVVTRV9GSUVMRAkJCV9N
S19GSUVMRF9DT05TVCgweDEsIENETUFfRF9NSVNDX0NGR18wX1dFSUdIVF9SRVVTRV9TSElG
VCkNCj4gKyNkZWZpbmUgQ0RNQV9EX01JU0NfQ0ZHXzBfV0VJR0hUX1JFVVNFX0RJU0FCTEUJ
CQlfTUtfRU5VTV9DT05TVCgweDApDQo+ICsjZGVmaW5lIENETUFfRF9NSVNDX0NGR18wX1dF
SUdIVF9SRVVTRV9FTkFCTEUJCQlfTUtfRU5VTV9DT05TVCgweDEpDQo+ICsjZGVmaW5lIENE
TUFfRF9NSVNDX0NGR18wX1NLSVBfREFUQV9STFNfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1Qo
MjQpDQo+ICsjZGVmaW5lIENETUFfRF9NSVNDX0NGR18wX1NLSVBfREFUQV9STFNfRklFTEQJ
CQlfTUtfRklFTERfQ09OU1QoMHgxLCBDRE1BX0RfTUlTQ19DRkdfMF9TS0lQX0RBVEFfUkxT
X1NISUZUKQ0KPiArI2RlZmluZSBDRE1BX0RfTUlTQ19DRkdfMF9TS0lQX0RBVEFfUkxTX0RJ
U0FCTEUJCQlfTUtfRU5VTV9DT05TVCgweDApDQo+ICsjZGVmaW5lIENETUFfRF9NSVNDX0NG
R18wX1NLSVBfREFUQV9STFNfRU5BQkxFCQkJX01LX0VOVU1fQ09OU1QoMHgxKQ0KPiArI2Rl
ZmluZSBDRE1BX0RfTUlTQ19DRkdfMF9TS0lQX1dFSUdIVF9STFNfU0hJRlQJCQlfTUtfU0hJ
RlRfQ09OU1QoMjgpDQo+ICsjZGVmaW5lIENETUFfRF9NSVNDX0NGR18wX1NLSVBfV0VJR0hU
X1JMU19GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweDEsIENETUFfRF9NSVNDX0NGR18wX1NL
SVBfV0VJR0hUX1JMU19TSElGVCkNCj4gKyNkZWZpbmUgQ0RNQV9EX01JU0NfQ0ZHXzBfU0tJ
UF9XRUlHSFRfUkxTX0RJU0FCTEUJCQlfTUtfRU5VTV9DT05TVCgweDApDQo+ICsjZGVmaW5l
IENETUFfRF9NSVNDX0NGR18wX1NLSVBfV0VJR0hUX1JMU19FTkFCTEUJCQlfTUtfRU5VTV9D
T05TVCgweDEpDQo+ICsNCj4gKw0KPiArLy8gUmVnaXN0ZXIgQ0RNQV9EX0RBVEFJTl9GT1JN
QVRfMA0KPiArI2RlZmluZSBDRE1BX0RfREFUQUlOX0ZPUk1BVF8wCQkJX01LX0FERFJfQ09O
U1QoMHgzMDE4KQ0KPiArI2RlZmluZSBDRE1BX0RfREFUQUlOX0ZPUk1BVF8wX0RBVEFJTl9G
T1JNQVRfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMCkNCj4gKyNkZWZpbmUgQ0RNQV9EX0RB
VEFJTl9GT1JNQVRfMF9EQVRBSU5fRk9STUFUX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4
MSwgQ0RNQV9EX0RBVEFJTl9GT1JNQVRfMF9EQVRBSU5fRk9STUFUX1NISUZUKQ0KPiArI2Rl
ZmluZSBDRE1BX0RfREFUQUlOX0ZPUk1BVF8wX0RBVEFJTl9GT1JNQVRfRkVBVFVSRQkJCV9N
S19FTlVNX0NPTlNUKDB4MCkNCj4gKyNkZWZpbmUgQ0RNQV9EX0RBVEFJTl9GT1JNQVRfMF9E
QVRBSU5fRk9STUFUX1BJWEVMCQkJX01LX0VOVU1fQ09OU1QoMHgxKQ0KPiArI2RlZmluZSBD
RE1BX0RfREFUQUlOX0ZPUk1BVF8wX1BJWEVMX0ZPUk1BVF9TSElGVAkJCV9NS19TSElGVF9D
T05TVCg4KQ0KPiArI2RlZmluZSBDRE1BX0RfREFUQUlOX0ZPUk1BVF8wX1BJWEVMX0ZPUk1B
VF9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweDNmLCBDRE1BX0RfREFUQUlOX0ZPUk1BVF8w
X1BJWEVMX0ZPUk1BVF9TSElGVCkNCj4gKyNkZWZpbmUgQ0RNQV9EX0RBVEFJTl9GT1JNQVRf
MF9QSVhFTF9GT1JNQVRfVF9SOAkJCV9NS19FTlVNX0NPTlNUKDB4MCkNCj4gKyNkZWZpbmUg
Q0RNQV9EX0RBVEFJTl9GT1JNQVRfMF9QSVhFTF9GT1JNQVRfVF9SMTAJCQlfTUtfRU5VTV9D
T05TVCgweDEpDQo+ICsjZGVmaW5lIENETUFfRF9EQVRBSU5fRk9STUFUXzBfUElYRUxfRk9S
TUFUX1RfUjEyCQkJX01LX0VOVU1fQ09OU1QoMHgyKQ0KPiArI2RlZmluZSBDRE1BX0RfREFU
QUlOX0ZPUk1BVF8wX1BJWEVMX0ZPUk1BVF9UX1IxNgkJCV9NS19FTlVNX0NPTlNUKDB4MykN
Cj4gKyNkZWZpbmUgQ0RNQV9EX0RBVEFJTl9GT1JNQVRfMF9QSVhFTF9GT1JNQVRfVF9SMTZf
SQkJCV9NS19FTlVNX0NPTlNUKDB4NCkNCj4gKyNkZWZpbmUgQ0RNQV9EX0RBVEFJTl9GT1JN
QVRfMF9QSVhFTF9GT1JNQVRfVF9SMTZfRgkJCV9NS19FTlVNX0NPTlNUKDB4NSkNCj4gKyNk
ZWZpbmUgQ0RNQV9EX0RBVEFJTl9GT1JNQVRfMF9QSVhFTF9GT1JNQVRfVF9BMTZCMTZHMTZS
MTYJCQlfTUtfRU5VTV9DT05TVCgweDYpDQo+ICsjZGVmaW5lIENETUFfRF9EQVRBSU5fRk9S
TUFUXzBfUElYRUxfRk9STUFUX1RfWDE2QjE2RzE2UjE2CQkJX01LX0VOVU1fQ09OU1QoMHg3
KQ0KPiArI2RlZmluZSBDRE1BX0RfREFUQUlOX0ZPUk1BVF8wX1BJWEVMX0ZPUk1BVF9UX0Ex
NkIxNkcxNlIxNl9GCQkJX01LX0VOVU1fQ09OU1QoMHg4KQ0KPiArI2RlZmluZSBDRE1BX0Rf
REFUQUlOX0ZPUk1BVF8wX1BJWEVMX0ZPUk1BVF9UX0ExNlkxNlUxNlYxNgkJCV9NS19FTlVN
X0NPTlNUKDB4OSkNCj4gKyNkZWZpbmUgQ0RNQV9EX0RBVEFJTl9GT1JNQVRfMF9QSVhFTF9G
T1JNQVRfVF9WMTZVMTZZMTZBMTYJCQlfTUtfRU5VTV9DT05TVCgweGEpDQo+ICsjZGVmaW5l
IENETUFfRF9EQVRBSU5fRk9STUFUXzBfUElYRUxfRk9STUFUX1RfQTE2WTE2VTE2VjE2X0YJ
CQlfTUtfRU5VTV9DT05TVCgweGIpDQo+ICsjZGVmaW5lIENETUFfRF9EQVRBSU5fRk9STUFU
XzBfUElYRUxfRk9STUFUX1RfQThCOEc4UjgJCQlfTUtfRU5VTV9DT05TVCgweGMpDQo+ICsj
ZGVmaW5lIENETUFfRF9EQVRBSU5fRk9STUFUXzBfUElYRUxfRk9STUFUX1RfQThSOEc4QjgJ
CQlfTUtfRU5VTV9DT05TVCgweGQpDQo+ICsjZGVmaW5lIENETUFfRF9EQVRBSU5fRk9STUFU
XzBfUElYRUxfRk9STUFUX1RfQjhHOFI4QTgJCQlfTUtfRU5VTV9DT05TVCgweGUpDQo+ICsj
ZGVmaW5lIENETUFfRF9EQVRBSU5fRk9STUFUXzBfUElYRUxfRk9STUFUX1RfUjhHOEI4QTgJ
CQlfTUtfRU5VTV9DT05TVCgweGYpDQo+ICsjZGVmaW5lIENETUFfRF9EQVRBSU5fRk9STUFU
XzBfUElYRUxfRk9STUFUX1RfWDhCOEc4UjgJCQlfTUtfRU5VTV9DT05TVCgweDEwKQ0KPiAr
I2RlZmluZSBDRE1BX0RfREFUQUlOX0ZPUk1BVF8wX1BJWEVMX0ZPUk1BVF9UX1g4UjhHOEI4
CQkJX01LX0VOVU1fQ09OU1QoMHgxMSkNCj4gKyNkZWZpbmUgQ0RNQV9EX0RBVEFJTl9GT1JN
QVRfMF9QSVhFTF9GT1JNQVRfVF9COEc4UjhYOAkJCV9NS19FTlVNX0NPTlNUKDB4MTIpDQo+
ICsjZGVmaW5lIENETUFfRF9EQVRBSU5fRk9STUFUXzBfUElYRUxfRk9STUFUX1RfUjhHOEI4
WDgJCQlfTUtfRU5VTV9DT05TVCgweDEzKQ0KPiArI2RlZmluZSBDRE1BX0RfREFUQUlOX0ZP
Uk1BVF8wX1BJWEVMX0ZPUk1BVF9UX0EyQjEwRzEwUjEwCQkJX01LX0VOVU1fQ09OU1QoMHgx
NCkNCj4gKyNkZWZpbmUgQ0RNQV9EX0RBVEFJTl9GT1JNQVRfMF9QSVhFTF9GT1JNQVRfVF9B
MlIxMEcxMEIxMAkJCV9NS19FTlVNX0NPTlNUKDB4MTUpDQo+ICsjZGVmaW5lIENETUFfRF9E
QVRBSU5fRk9STUFUXzBfUElYRUxfRk9STUFUX1RfQjEwRzEwUjEwQTIJCQlfTUtfRU5VTV9D
T05TVCgweDE2KQ0KPiArI2RlZmluZSBDRE1BX0RfREFUQUlOX0ZPUk1BVF8wX1BJWEVMX0ZP
Uk1BVF9UX1IxMEcxMEIxMEEyCQkJX01LX0VOVU1fQ09OU1QoMHgxNykNCj4gKyNkZWZpbmUg
Q0RNQV9EX0RBVEFJTl9GT1JNQVRfMF9QSVhFTF9GT1JNQVRfVF9BMlkxMFUxMFYxMAkJCV9N
S19FTlVNX0NPTlNUKDB4MTgpDQo+ICsjZGVmaW5lIENETUFfRF9EQVRBSU5fRk9STUFUXzBf
UElYRUxfRk9STUFUX1RfVjEwVTEwWTEwQTIJCQlfTUtfRU5VTV9DT05TVCgweDE5KQ0KPiAr
I2RlZmluZSBDRE1BX0RfREFUQUlOX0ZPUk1BVF8wX1BJWEVMX0ZPUk1BVF9UX0E4WThVOFY4
CQkJX01LX0VOVU1fQ09OU1QoMHgxYSkNCj4gKyNkZWZpbmUgQ0RNQV9EX0RBVEFJTl9GT1JN
QVRfMF9QSVhFTF9GT1JNQVRfVF9WOFU4WThBOAkJCV9NS19FTlVNX0NPTlNUKDB4MWIpDQo+
ICsjZGVmaW5lIENETUFfRF9EQVRBSU5fRk9STUFUXzBfUElYRUxfRk9STUFUX1RfWThfX19V
OFY4X040NDQJCQlfTUtfRU5VTV9DT05TVCgweDFjKQ0KPiArI2RlZmluZSBDRE1BX0RfREFU
QUlOX0ZPUk1BVF8wX1BJWEVMX0ZPUk1BVF9UX1k4X19fVjhVOF9ONDQ0CQkJX01LX0VOVU1f
Q09OU1QoMHgxZCkNCj4gKyNkZWZpbmUgQ0RNQV9EX0RBVEFJTl9GT1JNQVRfMF9QSVhFTF9G
T1JNQVRfVF9ZMTBfX19VMTBWMTBfTjQ0NAkJCV9NS19FTlVNX0NPTlNUKDB4MWUpDQo+ICsj
ZGVmaW5lIENETUFfRF9EQVRBSU5fRk9STUFUXzBfUElYRUxfRk9STUFUX1RfWTEwX19fVjEw
VTEwX040NDQJCQlfTUtfRU5VTV9DT05TVCgweDFmKQ0KPiArI2RlZmluZSBDRE1BX0RfREFU
QUlOX0ZPUk1BVF8wX1BJWEVMX0ZPUk1BVF9UX1kxMl9fX1UxMlYxMl9ONDQ0CQkJX01LX0VO
VU1fQ09OU1QoMHgyMCkNCj4gKyNkZWZpbmUgQ0RNQV9EX0RBVEFJTl9GT1JNQVRfMF9QSVhF
TF9GT1JNQVRfVF9ZMTJfX19WMTJVMTJfTjQ0NAkJCV9NS19FTlVNX0NPTlNUKDB4MjEpDQo+
ICsjZGVmaW5lIENETUFfRF9EQVRBSU5fRk9STUFUXzBfUElYRUxfRk9STUFUX1RfWTE2X19f
VTE2VjE2X040NDQJCQlfTUtfRU5VTV9DT05TVCgweDIyKQ0KPiArI2RlZmluZSBDRE1BX0Rf
REFUQUlOX0ZPUk1BVF8wX1BJWEVMX0ZPUk1BVF9UX1kxNl9fX1YxNlUxNl9ONDQ0CQkJX01L
X0VOVU1fQ09OU1QoMHgyMykNCj4gKyNkZWZpbmUgQ0RNQV9EX0RBVEFJTl9GT1JNQVRfMF9Q
SVhFTF9NQVBQSU5HX1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDE2KQ0KPiArI2RlZmluZSBD
RE1BX0RfREFUQUlOX0ZPUk1BVF8wX1BJWEVMX01BUFBJTkdfRklFTEQJCQlfTUtfRklFTERf
Q09OU1QoMHgxLCBDRE1BX0RfREFUQUlOX0ZPUk1BVF8wX1BJWEVMX01BUFBJTkdfU0hJRlQp
DQo+ICsjZGVmaW5lIENETUFfRF9EQVRBSU5fRk9STUFUXzBfUElYRUxfTUFQUElOR19QSVRD
SF9MSU5FQVIJCQlfTUtfRU5VTV9DT05TVCgweDApDQo+ICsjZGVmaW5lIENETUFfRF9EQVRB
SU5fRk9STUFUXzBfUElYRUxfTUFQUElOR19SRVNFUlZFRF9MSU5FQVIJCQlfTUtfRU5VTV9D
T05TVCgweDEpDQo+ICsjZGVmaW5lIENETUFfRF9EQVRBSU5fRk9STUFUXzBfUElYRUxfU0lH
Tl9PVkVSUklERV9TSElGVAkJCV9NS19TSElGVF9DT05TVCgyMCkNCj4gKyNkZWZpbmUgQ0RN
QV9EX0RBVEFJTl9GT1JNQVRfMF9QSVhFTF9TSUdOX09WRVJSSURFX0ZJRUxECQkJX01LX0ZJ
RUxEX0NPTlNUKDB4MSwgQ0RNQV9EX0RBVEFJTl9GT1JNQVRfMF9QSVhFTF9TSUdOX09WRVJS
SURFX1NISUZUKQ0KPiArI2RlZmluZSBDRE1BX0RfREFUQUlOX0ZPUk1BVF8wX1BJWEVMX1NJ
R05fT1ZFUlJJREVfVU5TSUdORURfSU5UCQkJX01LX0VOVU1fQ09OU1QoMHgwKQ0KPiArI2Rl
ZmluZSBDRE1BX0RfREFUQUlOX0ZPUk1BVF8wX1BJWEVMX1NJR05fT1ZFUlJJREVfU0lHTkVE
X0lOVAkJCV9NS19FTlVNX0NPTlNUKDB4MSkNCj4gKw0KPiArDQo+ICsvLyBSZWdpc3RlciBD
RE1BX0RfREFUQUlOX1NJWkVfMF8wDQo+ICsjZGVmaW5lIENETUFfRF9EQVRBSU5fU0laRV8w
XzAJCQlfTUtfQUREUl9DT05TVCgweDMwMWMpDQo+ICsjZGVmaW5lIENETUFfRF9EQVRBSU5f
U0laRV8wXzBfREFUQUlOX1dJRFRIX1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDApDQo+ICsj
ZGVmaW5lIENETUFfRF9EQVRBSU5fU0laRV8wXzBfREFUQUlOX1dJRFRIX0ZJRUxECQkJX01L
X0ZJRUxEX0NPTlNUKDB4MWZmZiwgQ0RNQV9EX0RBVEFJTl9TSVpFXzBfMF9EQVRBSU5fV0lE
VEhfU0hJRlQpDQo+ICsjZGVmaW5lIENETUFfRF9EQVRBSU5fU0laRV8wXzBfREFUQUlOX0hF
SUdIVF9TSElGVAkJCV9NS19TSElGVF9DT05TVCgxNikNCj4gKyNkZWZpbmUgQ0RNQV9EX0RB
VEFJTl9TSVpFXzBfMF9EQVRBSU5fSEVJR0hUX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4
MWZmZiwgQ0RNQV9EX0RBVEFJTl9TSVpFXzBfMF9EQVRBSU5fSEVJR0hUX1NISUZUKQ0KPiAr
DQo+ICsNCj4gKy8vIFJlZ2lzdGVyIENETUFfRF9EQVRBSU5fU0laRV8xXzANCj4gKyNkZWZp
bmUgQ0RNQV9EX0RBVEFJTl9TSVpFXzFfMAkJCV9NS19BRERSX0NPTlNUKDB4MzAyMCkNCj4g
KyNkZWZpbmUgQ0RNQV9EX0RBVEFJTl9TSVpFXzFfMF9EQVRBSU5fQ0hBTk5FTF9TSElGVAkJ
CV9NS19TSElGVF9DT05TVCgwKQ0KPiArI2RlZmluZSBDRE1BX0RfREFUQUlOX1NJWkVfMV8w
X0RBVEFJTl9DSEFOTkVMX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4MWZmZiwgQ0RNQV9E
X0RBVEFJTl9TSVpFXzFfMF9EQVRBSU5fQ0hBTk5FTF9TSElGVCkNCj4gKw0KPiArDQo+ICsv
LyBSZWdpc3RlciBDRE1BX0RfREFUQUlOX1NJWkVfRVhUXzBfMA0KPiArI2RlZmluZSBDRE1B
X0RfREFUQUlOX1NJWkVfRVhUXzBfMAkJCV9NS19BRERSX0NPTlNUKDB4MzAyNCkNCj4gKyNk
ZWZpbmUgQ0RNQV9EX0RBVEFJTl9TSVpFX0VYVF8wXzBfREFUQUlOX1dJRFRIX0VYVF9TSElG
VAkJCV9NS19TSElGVF9DT05TVCgwKQ0KPiArI2RlZmluZSBDRE1BX0RfREFUQUlOX1NJWkVf
RVhUXzBfMF9EQVRBSU5fV0lEVEhfRVhUX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4MWZm
ZiwgQ0RNQV9EX0RBVEFJTl9TSVpFX0VYVF8wXzBfREFUQUlOX1dJRFRIX0VYVF9TSElGVCkN
Cj4gKyNkZWZpbmUgQ0RNQV9EX0RBVEFJTl9TSVpFX0VYVF8wXzBfREFUQUlOX0hFSUdIVF9F
WFRfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMTYpDQo+ICsjZGVmaW5lIENETUFfRF9EQVRB
SU5fU0laRV9FWFRfMF8wX0RBVEFJTl9IRUlHSFRfRVhUX0ZJRUxECQkJX01LX0ZJRUxEX0NP
TlNUKDB4MWZmZiwgQ0RNQV9EX0RBVEFJTl9TSVpFX0VYVF8wXzBfREFUQUlOX0hFSUdIVF9F
WFRfU0hJRlQpDQo+ICsNCj4gKw0KPiArLy8gUmVnaXN0ZXIgQ0RNQV9EX1BJWEVMX09GRlNF
VF8wDQo+ICsjZGVmaW5lIENETUFfRF9QSVhFTF9PRkZTRVRfMAkJCV9NS19BRERSX0NPTlNU
KDB4MzAyOCkNCj4gKyNkZWZpbmUgQ0RNQV9EX1BJWEVMX09GRlNFVF8wX1BJWEVMX1hfT0ZG
U0VUX1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDApDQo+ICsjZGVmaW5lIENETUFfRF9QSVhF
TF9PRkZTRVRfMF9QSVhFTF9YX09GRlNFVF9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweDFm
LCBDRE1BX0RfUElYRUxfT0ZGU0VUXzBfUElYRUxfWF9PRkZTRVRfU0hJRlQpDQo+ICsjZGVm
aW5lIENETUFfRF9QSVhFTF9PRkZTRVRfMF9QSVhFTF9ZX09GRlNFVF9TSElGVAkJCV9NS19T
SElGVF9DT05TVCgxNikNCj4gKyNkZWZpbmUgQ0RNQV9EX1BJWEVMX09GRlNFVF8wX1BJWEVM
X1lfT0ZGU0VUX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4NywgQ0RNQV9EX1BJWEVMX09G
RlNFVF8wX1BJWEVMX1lfT0ZGU0VUX1NISUZUKQ0KPiArDQo+ICsNCj4gKy8vIFJlZ2lzdGVy
IENETUFfRF9EQUlOX1JBTV9UWVBFXzANCj4gKyNkZWZpbmUgQ0RNQV9EX0RBSU5fUkFNX1RZ
UEVfMAkJCV9NS19BRERSX0NPTlNUKDB4MzAyYykNCj4gKyNkZWZpbmUgQ0RNQV9EX0RBSU5f
UkFNX1RZUEVfMF9EQVRBSU5fUkFNX1RZUEVfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMCkN
Cj4gKyNkZWZpbmUgQ0RNQV9EX0RBSU5fUkFNX1RZUEVfMF9EQVRBSU5fUkFNX1RZUEVfRklF
TEQJCQlfTUtfRklFTERfQ09OU1QoMHgxLCBDRE1BX0RfREFJTl9SQU1fVFlQRV8wX0RBVEFJ
Tl9SQU1fVFlQRV9TSElGVCkNCj4gKyNkZWZpbmUgQ0RNQV9EX0RBSU5fUkFNX1RZUEVfMF9E
QVRBSU5fUkFNX1RZUEVfQ1ZJRgkJCV9NS19FTlVNX0NPTlNUKDB4MCkNCj4gKyNkZWZpbmUg
Q0RNQV9EX0RBSU5fUkFNX1RZUEVfMF9EQVRBSU5fUkFNX1RZUEVfTUNJRgkJCV9NS19FTlVN
X0NPTlNUKDB4MSkNCj4gKw0KPiArDQo+ICsvLyBSZWdpc3RlciBDRE1BX0RfREFJTl9BRERS
X0hJR0hfMF8wDQo+ICsjZGVmaW5lIENETUFfRF9EQUlOX0FERFJfSElHSF8wXzAJCQlfTUtf
QUREUl9DT05TVCgweDMwMzApDQo+ICsjZGVmaW5lIENETUFfRF9EQUlOX0FERFJfSElHSF8w
XzBfREFUQUlOX0FERFJfSElHSF8wX1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDApDQo+ICsj
ZGVmaW5lIENETUFfRF9EQUlOX0FERFJfSElHSF8wXzBfREFUQUlOX0FERFJfSElHSF8wX0ZJ
RUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4ZmZmZmZmZmYsIENETUFfRF9EQUlOX0FERFJfSElH
SF8wXzBfREFUQUlOX0FERFJfSElHSF8wX1NISUZUKQ0KPiArDQo+ICsNCj4gKy8vIFJlZ2lz
dGVyIENETUFfRF9EQUlOX0FERFJfTE9XXzBfMA0KPiArI2RlZmluZSBDRE1BX0RfREFJTl9B
RERSX0xPV18wXzAJCQlfTUtfQUREUl9DT05TVCgweDMwMzQpDQo+ICsjZGVmaW5lIENETUFf
RF9EQUlOX0FERFJfTE9XXzBfMF9EQVRBSU5fQUREUl9MT1dfMF9TSElGVAkJCV9NS19TSElG
VF9DT05TVCgwKQ0KPiArI2RlZmluZSBDRE1BX0RfREFJTl9BRERSX0xPV18wXzBfREFUQUlO
X0FERFJfTE9XXzBfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHhmZmZmZmZmZiwgQ0RNQV9E
X0RBSU5fQUREUl9MT1dfMF8wX0RBVEFJTl9BRERSX0xPV18wX1NISUZUKQ0KPiArDQo+ICsN
Cj4gKy8vIFJlZ2lzdGVyIENETUFfRF9EQUlOX0FERFJfSElHSF8xXzANCj4gKyNkZWZpbmUg
Q0RNQV9EX0RBSU5fQUREUl9ISUdIXzFfMAkJCV9NS19BRERSX0NPTlNUKDB4MzAzOCkNCj4g
KyNkZWZpbmUgQ0RNQV9EX0RBSU5fQUREUl9ISUdIXzFfMF9EQVRBSU5fQUREUl9ISUdIXzFf
U0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMCkNCj4gKyNkZWZpbmUgQ0RNQV9EX0RBSU5fQURE
Ul9ISUdIXzFfMF9EQVRBSU5fQUREUl9ISUdIXzFfRklFTEQJCQlfTUtfRklFTERfQ09OU1Qo
MHhmZmZmZmZmZiwgQ0RNQV9EX0RBSU5fQUREUl9ISUdIXzFfMF9EQVRBSU5fQUREUl9ISUdI
XzFfU0hJRlQpDQo+ICsNCj4gKw0KPiArLy8gUmVnaXN0ZXIgQ0RNQV9EX0RBSU5fQUREUl9M
T1dfMV8wDQo+ICsjZGVmaW5lIENETUFfRF9EQUlOX0FERFJfTE9XXzFfMAkJCV9NS19BRERS
X0NPTlNUKDB4MzAzYykNCj4gKyNkZWZpbmUgQ0RNQV9EX0RBSU5fQUREUl9MT1dfMV8wX0RB
VEFJTl9BRERSX0xPV18xX1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDApDQo+ICsjZGVmaW5l
IENETUFfRF9EQUlOX0FERFJfTE9XXzFfMF9EQVRBSU5fQUREUl9MT1dfMV9GSUVMRAkJCV9N
S19GSUVMRF9DT05TVCgweGZmZmZmZmZmLCBDRE1BX0RfREFJTl9BRERSX0xPV18xXzBfREFU
QUlOX0FERFJfTE9XXzFfU0hJRlQpDQo+ICsNCj4gKw0KPiArLy8gUmVnaXN0ZXIgQ0RNQV9E
X0xJTkVfU1RSSURFXzANCj4gKyNkZWZpbmUgQ0RNQV9EX0xJTkVfU1RSSURFXzAJCQlfTUtf
QUREUl9DT05TVCgweDMwNDApDQo+ICsjZGVmaW5lIENETUFfRF9MSU5FX1NUUklERV8wX0xJ
TkVfU1RSSURFX1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDApDQo+ICsjZGVmaW5lIENETUFf
RF9MSU5FX1NUUklERV8wX0xJTkVfU1RSSURFX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4
ZmZmZmZmZmYsIENETUFfRF9MSU5FX1NUUklERV8wX0xJTkVfU1RSSURFX1NISUZUKQ0KPiAr
DQo+ICsNCj4gKy8vIFJlZ2lzdGVyIENETUFfRF9MSU5FX1VWX1NUUklERV8wDQo+ICsjZGVm
aW5lIENETUFfRF9MSU5FX1VWX1NUUklERV8wCQkJX01LX0FERFJfQ09OU1QoMHgzMDQ0KQ0K
PiArI2RlZmluZSBDRE1BX0RfTElORV9VVl9TVFJJREVfMF9VVl9MSU5FX1NUUklERV9TSElG
VAkJCV9NS19TSElGVF9DT05TVCgwKQ0KPiArI2RlZmluZSBDRE1BX0RfTElORV9VVl9TVFJJ
REVfMF9VVl9MSU5FX1NUUklERV9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweGZmZmZmZmZm
LCBDRE1BX0RfTElORV9VVl9TVFJJREVfMF9VVl9MSU5FX1NUUklERV9TSElGVCkNCj4gKw0K
PiArDQo+ICsvLyBSZWdpc3RlciBDRE1BX0RfU1VSRl9TVFJJREVfMA0KPiArI2RlZmluZSBD
RE1BX0RfU1VSRl9TVFJJREVfMAkJCV9NS19BRERSX0NPTlNUKDB4MzA0OCkNCj4gKyNkZWZp
bmUgQ0RNQV9EX1NVUkZfU1RSSURFXzBfU1VSRl9TVFJJREVfU0hJRlQJCQlfTUtfU0hJRlRf
Q09OU1QoMCkNCj4gKyNkZWZpbmUgQ0RNQV9EX1NVUkZfU1RSSURFXzBfU1VSRl9TVFJJREVf
RklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHhmZmZmZmZmZiwgQ0RNQV9EX1NVUkZfU1RSSURF
XzBfU1VSRl9TVFJJREVfU0hJRlQpDQo+ICsNCj4gKw0KPiArLy8gUmVnaXN0ZXIgQ0RNQV9E
X0RBSU5fTUFQXzANCj4gKyNkZWZpbmUgQ0RNQV9EX0RBSU5fTUFQXzAJCQlfTUtfQUREUl9D
T05TVCgweDMwNGMpDQo+ICsjZGVmaW5lIENETUFfRF9EQUlOX01BUF8wX0xJTkVfUEFDS0VE
X1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDApDQo+ICsjZGVmaW5lIENETUFfRF9EQUlOX01B
UF8wX0xJTkVfUEFDS0VEX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4MSwgQ0RNQV9EX0RB
SU5fTUFQXzBfTElORV9QQUNLRURfU0hJRlQpDQo+ICsjZGVmaW5lIENETUFfRF9EQUlOX01B
UF8wX0xJTkVfUEFDS0VEX0ZBTFNFCQkJX01LX0VOVU1fQ09OU1QoMHgwKQ0KPiArI2RlZmlu
ZSBDRE1BX0RfREFJTl9NQVBfMF9MSU5FX1BBQ0tFRF9UUlVFCQkJX01LX0VOVU1fQ09OU1Qo
MHgxKQ0KPiArI2RlZmluZSBDRE1BX0RfREFJTl9NQVBfMF9TVVJGX1BBQ0tFRF9TSElGVAkJ
CV9NS19TSElGVF9DT05TVCgxNikNCj4gKyNkZWZpbmUgQ0RNQV9EX0RBSU5fTUFQXzBfU1VS
Rl9QQUNLRURfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHgxLCBDRE1BX0RfREFJTl9NQVBf
MF9TVVJGX1BBQ0tFRF9TSElGVCkNCj4gKyNkZWZpbmUgQ0RNQV9EX0RBSU5fTUFQXzBfU1VS
Rl9QQUNLRURfRkFMU0UJCQlfTUtfRU5VTV9DT05TVCgweDApDQo+ICsjZGVmaW5lIENETUFf
RF9EQUlOX01BUF8wX1NVUkZfUEFDS0VEX1RSVUUJCQlfTUtfRU5VTV9DT05TVCgweDEpDQo+
ICsNCj4gKw0KPiArLy8gUmVnaXN0ZXIgQ0RNQV9EX1JFU0VSVkVEX1hfQ0ZHXzANCj4gKyNk
ZWZpbmUgQ0RNQV9EX1JFU0VSVkVEX1hfQ0ZHXzAJCQlfTUtfQUREUl9DT05TVCgweDMwNTAp
DQo+ICsjZGVmaW5lIENETUFfRF9SRVNFUlZFRF9YX0NGR18wX1JTVl9QRVJfTElORV9TSElG
VAkJCV9NS19TSElGVF9DT05TVCgwKQ0KPiArI2RlZmluZSBDRE1BX0RfUkVTRVJWRURfWF9D
RkdfMF9SU1ZfUEVSX0xJTkVfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHgzZmYsIENETUFf
RF9SRVNFUlZFRF9YX0NGR18wX1JTVl9QRVJfTElORV9TSElGVCkNCj4gKyNkZWZpbmUgQ0RN
QV9EX1JFU0VSVkVEX1hfQ0ZHXzBfUlNWX1BFUl9VVl9MSU5FX1NISUZUCQkJX01LX1NISUZU
X0NPTlNUKDE2KQ0KPiArI2RlZmluZSBDRE1BX0RfUkVTRVJWRURfWF9DRkdfMF9SU1ZfUEVS
X1VWX0xJTkVfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHgzZmYsIENETUFfRF9SRVNFUlZF
RF9YX0NGR18wX1JTVl9QRVJfVVZfTElORV9TSElGVCkNCj4gKw0KPiArDQo+ICsvLyBSZWdp
c3RlciBDRE1BX0RfUkVTRVJWRURfWV9DRkdfMA0KPiArI2RlZmluZSBDRE1BX0RfUkVTRVJW
RURfWV9DRkdfMAkJCV9NS19BRERSX0NPTlNUKDB4MzA1NCkNCj4gKyNkZWZpbmUgQ0RNQV9E
X1JFU0VSVkVEX1lfQ0ZHXzBfUlNWX0hFSUdIVF9TSElGVAkJCV9NS19TSElGVF9DT05TVCgw
KQ0KPiArI2RlZmluZSBDRE1BX0RfUkVTRVJWRURfWV9DRkdfMF9SU1ZfSEVJR0hUX0ZJRUxE
CQkJX01LX0ZJRUxEX0NPTlNUKDB4NywgQ0RNQV9EX1JFU0VSVkVEX1lfQ0ZHXzBfUlNWX0hF
SUdIVF9TSElGVCkNCj4gKyNkZWZpbmUgQ0RNQV9EX1JFU0VSVkVEX1lfQ0ZHXzBfUlNWX1lf
SU5ERVhfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMTYpDQo+ICsjZGVmaW5lIENETUFfRF9S
RVNFUlZFRF9ZX0NGR18wX1JTVl9ZX0lOREVYX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4
MWYsIENETUFfRF9SRVNFUlZFRF9ZX0NGR18wX1JTVl9ZX0lOREVYX1NISUZUKQ0KPiArDQo+
ICsNCj4gKy8vIFJlZ2lzdGVyIENETUFfRF9CQVRDSF9OVU1CRVJfMA0KPiArI2RlZmluZSBD
RE1BX0RfQkFUQ0hfTlVNQkVSXzAJCQlfTUtfQUREUl9DT05TVCgweDMwNTgpDQo+ICsjZGVm
aW5lIENETUFfRF9CQVRDSF9OVU1CRVJfMF9CQVRDSEVTX1NISUZUCQkJX01LX1NISUZUX0NP
TlNUKDApDQo+ICsjZGVmaW5lIENETUFfRF9CQVRDSF9OVU1CRVJfMF9CQVRDSEVTX0ZJRUxE
CQkJX01LX0ZJRUxEX0NPTlNUKDB4MWYsIENETUFfRF9CQVRDSF9OVU1CRVJfMF9CQVRDSEVT
X1NISUZUKQ0KPiArDQo+ICsNCj4gKy8vIFJlZ2lzdGVyIENETUFfRF9CQVRDSF9TVFJJREVf
MA0KPiArI2RlZmluZSBDRE1BX0RfQkFUQ0hfU1RSSURFXzAJCQlfTUtfQUREUl9DT05TVCgw
eDMwNWMpDQo+ICsjZGVmaW5lIENETUFfRF9CQVRDSF9TVFJJREVfMF9CQVRDSF9TVFJJREVf
U0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMCkNCj4gKyNkZWZpbmUgQ0RNQV9EX0JBVENIX1NU
UklERV8wX0JBVENIX1NUUklERV9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweGZmZmZmZmZm
LCBDRE1BX0RfQkFUQ0hfU1RSSURFXzBfQkFUQ0hfU1RSSURFX1NISUZUKQ0KPiArDQo+ICsN
Cj4gKy8vIFJlZ2lzdGVyIENETUFfRF9FTlRSWV9QRVJfU0xJQ0VfMA0KPiArI2RlZmluZSBD
RE1BX0RfRU5UUllfUEVSX1NMSUNFXzAJCQlfTUtfQUREUl9DT05TVCgweDMwNjApDQo+ICsj
ZGVmaW5lIENETUFfRF9FTlRSWV9QRVJfU0xJQ0VfMF9FTlRSSUVTX1NISUZUCQkJX01LX1NI
SUZUX0NPTlNUKDApDQo+ICsjZGVmaW5lIENETUFfRF9FTlRSWV9QRVJfU0xJQ0VfMF9FTlRS
SUVTX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4M2ZmZiwgQ0RNQV9EX0VOVFJZX1BFUl9T
TElDRV8wX0VOVFJJRVNfU0hJRlQpDQo+ICsNCj4gKw0KPiArLy8gUmVnaXN0ZXIgQ0RNQV9E
X0ZFVENIX0dSQUlOXzANCj4gKyNkZWZpbmUgQ0RNQV9EX0ZFVENIX0dSQUlOXzAJCQlfTUtf
QUREUl9DT05TVCgweDMwNjQpDQo+ICsjZGVmaW5lIENETUFfRF9GRVRDSF9HUkFJTl8wX0dS
QUlOU19TSElGVAkJCV9NS19TSElGVF9DT05TVCgwKQ0KPiArI2RlZmluZSBDRE1BX0RfRkVU
Q0hfR1JBSU5fMF9HUkFJTlNfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHhmZmYsIENETUFf
RF9GRVRDSF9HUkFJTl8wX0dSQUlOU19TSElGVCkNCj4gKw0KPiArDQo+ICsvLyBSZWdpc3Rl
ciBDRE1BX0RfV0VJR0hUX0ZPUk1BVF8wDQo+ICsjZGVmaW5lIENETUFfRF9XRUlHSFRfRk9S
TUFUXzAJCQlfTUtfQUREUl9DT05TVCgweDMwNjgpDQo+ICsjZGVmaW5lIENETUFfRF9XRUlH
SFRfRk9STUFUXzBfV0VJR0hUX0ZPUk1BVF9TSElGVAkJCV9NS19TSElGVF9DT05TVCgwKQ0K
PiArI2RlZmluZSBDRE1BX0RfV0VJR0hUX0ZPUk1BVF8wX1dFSUdIVF9GT1JNQVRfRklFTEQJ
CQlfTUtfRklFTERfQ09OU1QoMHgxLCBDRE1BX0RfV0VJR0hUX0ZPUk1BVF8wX1dFSUdIVF9G
T1JNQVRfU0hJRlQpDQo+ICsjZGVmaW5lIENETUFfRF9XRUlHSFRfRk9STUFUXzBfV0VJR0hU
X0ZPUk1BVF9VTkNPTVBSRVNTRUQJCQlfTUtfRU5VTV9DT05TVCgweDApDQo+ICsjZGVmaW5l
IENETUFfRF9XRUlHSFRfRk9STUFUXzBfV0VJR0hUX0ZPUk1BVF9DT01QUkVTU0VECQkJX01L
X0VOVU1fQ09OU1QoMHgxKQ0KPiArDQo+ICsNCj4gKy8vIFJlZ2lzdGVyIENETUFfRF9XRUlH
SFRfU0laRV8wXzANCj4gKyNkZWZpbmUgQ0RNQV9EX1dFSUdIVF9TSVpFXzBfMAkJCV9NS19B
RERSX0NPTlNUKDB4MzA2YykNCj4gKyNkZWZpbmUgQ0RNQV9EX1dFSUdIVF9TSVpFXzBfMF9C
WVRFX1BFUl9LRVJORUxfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMCkNCj4gKyNkZWZpbmUg
Q0RNQV9EX1dFSUdIVF9TSVpFXzBfMF9CWVRFX1BFUl9LRVJORUxfRklFTEQJCQlfTUtfRklF
TERfQ09OU1QoMHgzZmZmZiwgQ0RNQV9EX1dFSUdIVF9TSVpFXzBfMF9CWVRFX1BFUl9LRVJO
RUxfU0hJRlQpDQo+ICsNCj4gKw0KPiArLy8gUmVnaXN0ZXIgQ0RNQV9EX1dFSUdIVF9TSVpF
XzFfMA0KPiArI2RlZmluZSBDRE1BX0RfV0VJR0hUX1NJWkVfMV8wCQkJX01LX0FERFJfQ09O
U1QoMHgzMDcwKQ0KPiArI2RlZmluZSBDRE1BX0RfV0VJR0hUX1NJWkVfMV8wX1dFSUdIVF9L
RVJORUxfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMCkNCj4gKyNkZWZpbmUgQ0RNQV9EX1dF
SUdIVF9TSVpFXzFfMF9XRUlHSFRfS0VSTkVMX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4
MWZmZiwgQ0RNQV9EX1dFSUdIVF9TSVpFXzFfMF9XRUlHSFRfS0VSTkVMX1NISUZUKQ0KPiAr
DQo+ICsNCj4gKy8vIFJlZ2lzdGVyIENETUFfRF9XRUlHSFRfUkFNX1RZUEVfMA0KPiArI2Rl
ZmluZSBDRE1BX0RfV0VJR0hUX1JBTV9UWVBFXzAJCQlfTUtfQUREUl9DT05TVCgweDMwNzQp
DQo+ICsjZGVmaW5lIENETUFfRF9XRUlHSFRfUkFNX1RZUEVfMF9XRUlHSFRfUkFNX1RZUEVf
U0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMCkNCj4gKyNkZWZpbmUgQ0RNQV9EX1dFSUdIVF9S
QU1fVFlQRV8wX1dFSUdIVF9SQU1fVFlQRV9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweDEs
IENETUFfRF9XRUlHSFRfUkFNX1RZUEVfMF9XRUlHSFRfUkFNX1RZUEVfU0hJRlQpDQo+ICsj
ZGVmaW5lIENETUFfRF9XRUlHSFRfUkFNX1RZUEVfMF9XRUlHSFRfUkFNX1RZUEVfQ1ZJRgkJ
CV9NS19FTlVNX0NPTlNUKDB4MCkNCj4gKyNkZWZpbmUgQ0RNQV9EX1dFSUdIVF9SQU1fVFlQ
RV8wX1dFSUdIVF9SQU1fVFlQRV9NQ0lGCQkJX01LX0VOVU1fQ09OU1QoMHgxKQ0KPiArDQo+
ICsNCj4gKy8vIFJlZ2lzdGVyIENETUFfRF9XRUlHSFRfQUREUl9ISUdIXzANCj4gKyNkZWZp
bmUgQ0RNQV9EX1dFSUdIVF9BRERSX0hJR0hfMAkJCV9NS19BRERSX0NPTlNUKDB4MzA3OCkN
Cj4gKyNkZWZpbmUgQ0RNQV9EX1dFSUdIVF9BRERSX0hJR0hfMF9XRUlHSFRfQUREUl9ISUdI
X1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDApDQo+ICsjZGVmaW5lIENETUFfRF9XRUlHSFRf
QUREUl9ISUdIXzBfV0VJR0hUX0FERFJfSElHSF9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgw
eGZmZmZmZmZmLCBDRE1BX0RfV0VJR0hUX0FERFJfSElHSF8wX1dFSUdIVF9BRERSX0hJR0hf
U0hJRlQpDQo+ICsNCj4gKw0KPiArLy8gUmVnaXN0ZXIgQ0RNQV9EX1dFSUdIVF9BRERSX0xP
V18wDQo+ICsjZGVmaW5lIENETUFfRF9XRUlHSFRfQUREUl9MT1dfMAkJCV9NS19BRERSX0NP
TlNUKDB4MzA3YykNCj4gKyNkZWZpbmUgQ0RNQV9EX1dFSUdIVF9BRERSX0xPV18wX1dFSUdI
VF9BRERSX0xPV19TSElGVAkJCV9NS19TSElGVF9DT05TVCgwKQ0KPiArI2RlZmluZSBDRE1B
X0RfV0VJR0hUX0FERFJfTE9XXzBfV0VJR0hUX0FERFJfTE9XX0ZJRUxECQkJX01LX0ZJRUxE
X0NPTlNUKDB4ZmZmZmZmZmYsIENETUFfRF9XRUlHSFRfQUREUl9MT1dfMF9XRUlHSFRfQURE
Ul9MT1dfU0hJRlQpDQo+ICsNCj4gKw0KPiArLy8gUmVnaXN0ZXIgQ0RNQV9EX1dFSUdIVF9C
WVRFU18wDQo+ICsjZGVmaW5lIENETUFfRF9XRUlHSFRfQllURVNfMAkJCV9NS19BRERSX0NP
TlNUKDB4MzA4MCkNCj4gKyNkZWZpbmUgQ0RNQV9EX1dFSUdIVF9CWVRFU18wX1dFSUdIVF9C
WVRFU19TSElGVAkJCV9NS19TSElGVF9DT05TVCgwKQ0KPiArI2RlZmluZSBDRE1BX0RfV0VJ
R0hUX0JZVEVTXzBfV0VJR0hUX0JZVEVTX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4ZmZm
ZmZmZmYsIENETUFfRF9XRUlHSFRfQllURVNfMF9XRUlHSFRfQllURVNfU0hJRlQpDQo+ICsN
Cj4gKw0KPiArLy8gUmVnaXN0ZXIgQ0RNQV9EX1dHU19BRERSX0hJR0hfMA0KPiArI2RlZmlu
ZSBDRE1BX0RfV0dTX0FERFJfSElHSF8wCQkJX01LX0FERFJfQ09OU1QoMHgzMDg0KQ0KPiAr
I2RlZmluZSBDRE1BX0RfV0dTX0FERFJfSElHSF8wX1dHU19BRERSX0hJR0hfU0hJRlQJCQlf
TUtfU0hJRlRfQ09OU1QoMCkNCj4gKyNkZWZpbmUgQ0RNQV9EX1dHU19BRERSX0hJR0hfMF9X
R1NfQUREUl9ISUdIX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4ZmZmZmZmZmYsIENETUFf
RF9XR1NfQUREUl9ISUdIXzBfV0dTX0FERFJfSElHSF9TSElGVCkNCj4gKw0KPiArDQo+ICsv
LyBSZWdpc3RlciBDRE1BX0RfV0dTX0FERFJfTE9XXzANCj4gKyNkZWZpbmUgQ0RNQV9EX1dH
U19BRERSX0xPV18wCQkJX01LX0FERFJfQ09OU1QoMHgzMDg4KQ0KPiArI2RlZmluZSBDRE1B
X0RfV0dTX0FERFJfTE9XXzBfV0dTX0FERFJfTE9XX1NISUZUCQkJX01LX1NISUZUX0NPTlNU
KDApDQo+ICsjZGVmaW5lIENETUFfRF9XR1NfQUREUl9MT1dfMF9XR1NfQUREUl9MT1dfRklF
TEQJCQlfTUtfRklFTERfQ09OU1QoMHhmZmZmZmZmZiwgQ0RNQV9EX1dHU19BRERSX0xPV18w
X1dHU19BRERSX0xPV19TSElGVCkNCj4gKw0KPiArDQo+ICsvLyBSZWdpc3RlciBDRE1BX0Rf
V01CX0FERFJfSElHSF8wDQo+ICsjZGVmaW5lIENETUFfRF9XTUJfQUREUl9ISUdIXzAJCQlf
TUtfQUREUl9DT05TVCgweDMwOGMpDQo+ICsjZGVmaW5lIENETUFfRF9XTUJfQUREUl9ISUdI
XzBfV01CX0FERFJfSElHSF9TSElGVAkJCV9NS19TSElGVF9DT05TVCgwKQ0KPiArI2RlZmlu
ZSBDRE1BX0RfV01CX0FERFJfSElHSF8wX1dNQl9BRERSX0hJR0hfRklFTEQJCQlfTUtfRklF
TERfQ09OU1QoMHhmZmZmZmZmZiwgQ0RNQV9EX1dNQl9BRERSX0hJR0hfMF9XTUJfQUREUl9I
SUdIX1NISUZUKQ0KPiArDQo+ICsNCj4gKy8vIFJlZ2lzdGVyIENETUFfRF9XTUJfQUREUl9M
T1dfMA0KPiArI2RlZmluZSBDRE1BX0RfV01CX0FERFJfTE9XXzAJCQlfTUtfQUREUl9DT05T
VCgweDMwOTApDQo+ICsjZGVmaW5lIENETUFfRF9XTUJfQUREUl9MT1dfMF9XTUJfQUREUl9M
T1dfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMCkNCj4gKyNkZWZpbmUgQ0RNQV9EX1dNQl9B
RERSX0xPV18wX1dNQl9BRERSX0xPV19GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweGZmZmZm
ZmZmLCBDRE1BX0RfV01CX0FERFJfTE9XXzBfV01CX0FERFJfTE9XX1NISUZUKQ0KPiArDQo+
ICsNCj4gKy8vIFJlZ2lzdGVyIENETUFfRF9XTUJfQllURVNfMA0KPiArI2RlZmluZSBDRE1B
X0RfV01CX0JZVEVTXzAJCQlfTUtfQUREUl9DT05TVCgweDMwOTQpDQo+ICsjZGVmaW5lIENE
TUFfRF9XTUJfQllURVNfMF9XTUJfQllURVNfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMCkN
Cj4gKyNkZWZpbmUgQ0RNQV9EX1dNQl9CWVRFU18wX1dNQl9CWVRFU19GSUVMRAkJCV9NS19G
SUVMRF9DT05TVCgweGZmZmZmZmYsIENETUFfRF9XTUJfQllURVNfMF9XTUJfQllURVNfU0hJ
RlQpDQo+ICsNCj4gKw0KPiArLy8gUmVnaXN0ZXIgQ0RNQV9EX01FQU5fRk9STUFUXzANCj4g
KyNkZWZpbmUgQ0RNQV9EX01FQU5fRk9STUFUXzAJCQlfTUtfQUREUl9DT05TVCgweDMwOTgp
DQo+ICsjZGVmaW5lIENETUFfRF9NRUFOX0ZPUk1BVF8wX01FQU5fRk9STUFUX1NISUZUCQkJ
X01LX1NISUZUX0NPTlNUKDApDQo+ICsjZGVmaW5lIENETUFfRF9NRUFOX0ZPUk1BVF8wX01F
QU5fRk9STUFUX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4MSwgQ0RNQV9EX01FQU5fRk9S
TUFUXzBfTUVBTl9GT1JNQVRfU0hJRlQpDQo+ICsjZGVmaW5lIENETUFfRF9NRUFOX0ZPUk1B
VF8wX01FQU5fRk9STUFUX0RJU0FCTEUJCQlfTUtfRU5VTV9DT05TVCgweDApDQo+ICsjZGVm
aW5lIENETUFfRF9NRUFOX0ZPUk1BVF8wX01FQU5fRk9STUFUX0VOQUJMRQkJCV9NS19FTlVN
X0NPTlNUKDB4MSkNCj4gKw0KPiArDQo+ICsvLyBSZWdpc3RlciBDRE1BX0RfTUVBTl9HTE9C
QUxfMF8wDQo+ICsjZGVmaW5lIENETUFfRF9NRUFOX0dMT0JBTF8wXzAJCQlfTUtfQUREUl9D
T05TVCgweDMwOWMpDQo+ICsjZGVmaW5lIENETUFfRF9NRUFOX0dMT0JBTF8wXzBfTUVBTl9S
WV9TSElGVAkJCV9NS19TSElGVF9DT05TVCgwKQ0KPiArI2RlZmluZSBDRE1BX0RfTUVBTl9H
TE9CQUxfMF8wX01FQU5fUllfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHhmZmZmLCBDRE1B
X0RfTUVBTl9HTE9CQUxfMF8wX01FQU5fUllfU0hJRlQpDQo+ICsjZGVmaW5lIENETUFfRF9N
RUFOX0dMT0JBTF8wXzBfTUVBTl9HVV9TSElGVAkJCV9NS19TSElGVF9DT05TVCgxNikNCj4g
KyNkZWZpbmUgQ0RNQV9EX01FQU5fR0xPQkFMXzBfMF9NRUFOX0dVX0ZJRUxECQkJX01LX0ZJ
RUxEX0NPTlNUKDB4ZmZmZiwgQ0RNQV9EX01FQU5fR0xPQkFMXzBfMF9NRUFOX0dVX1NISUZU
KQ0KPiArDQo+ICsNCj4gKy8vIFJlZ2lzdGVyIENETUFfRF9NRUFOX0dMT0JBTF8xXzANCj4g
KyNkZWZpbmUgQ0RNQV9EX01FQU5fR0xPQkFMXzFfMAkJCV9NS19BRERSX0NPTlNUKDB4MzBh
MCkNCj4gKyNkZWZpbmUgQ0RNQV9EX01FQU5fR0xPQkFMXzFfMF9NRUFOX0JWX1NISUZUCQkJ
X01LX1NISUZUX0NPTlNUKDApDQo+ICsjZGVmaW5lIENETUFfRF9NRUFOX0dMT0JBTF8xXzBf
TUVBTl9CVl9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweGZmZmYsIENETUFfRF9NRUFOX0dM
T0JBTF8xXzBfTUVBTl9CVl9TSElGVCkNCj4gKyNkZWZpbmUgQ0RNQV9EX01FQU5fR0xPQkFM
XzFfMF9NRUFOX0FYX1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDE2KQ0KPiArI2RlZmluZSBD
RE1BX0RfTUVBTl9HTE9CQUxfMV8wX01FQU5fQVhfRklFTEQJCQlfTUtfRklFTERfQ09OU1Qo
MHhmZmZmLCBDRE1BX0RfTUVBTl9HTE9CQUxfMV8wX01FQU5fQVhfU0hJRlQpDQo+ICsNCj4g
Kw0KPiArLy8gUmVnaXN0ZXIgQ0RNQV9EX0NWVF9DRkdfMA0KPiArI2RlZmluZSBDRE1BX0Rf
Q1ZUX0NGR18wCQkJX01LX0FERFJfQ09OU1QoMHgzMGE0KQ0KPiArI2RlZmluZSBDRE1BX0Rf
Q1ZUX0NGR18wX0NWVF9FTl9TSElGVAkJCV9NS19TSElGVF9DT05TVCgwKQ0KPiArI2RlZmlu
ZSBDRE1BX0RfQ1ZUX0NGR18wX0NWVF9FTl9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweDEs
IENETUFfRF9DVlRfQ0ZHXzBfQ1ZUX0VOX1NISUZUKQ0KPiArI2RlZmluZSBDRE1BX0RfQ1ZU
X0NGR18wX0NWVF9FTl9ESVNBQkxFCQkJX01LX0VOVU1fQ09OU1QoMHgwKQ0KPiArI2RlZmlu
ZSBDRE1BX0RfQ1ZUX0NGR18wX0NWVF9FTl9FTkFCTEUJCQlfTUtfRU5VTV9DT05TVCgweDEp
DQo+ICsjZGVmaW5lIENETUFfRF9DVlRfQ0ZHXzBfQ1ZUX1RSVU5DQVRFX1NISUZUCQkJX01L
X1NISUZUX0NPTlNUKDQpDQo+ICsjZGVmaW5lIENETUFfRF9DVlRfQ0ZHXzBfQ1ZUX1RSVU5D
QVRFX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4M2YsIENETUFfRF9DVlRfQ0ZHXzBfQ1ZU
X1RSVU5DQVRFX1NISUZUKQ0KPiArDQo+ICsNCj4gKy8vIFJlZ2lzdGVyIENETUFfRF9DVlRf
T0ZGU0VUXzANCj4gKyNkZWZpbmUgQ0RNQV9EX0NWVF9PRkZTRVRfMAkJCV9NS19BRERSX0NP
TlNUKDB4MzBhOCkNCj4gKyNkZWZpbmUgQ0RNQV9EX0NWVF9PRkZTRVRfMF9DVlRfT0ZGU0VU
X1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDApDQo+ICsjZGVmaW5lIENETUFfRF9DVlRfT0ZG
U0VUXzBfQ1ZUX09GRlNFVF9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweGZmZmYsIENETUFf
RF9DVlRfT0ZGU0VUXzBfQ1ZUX09GRlNFVF9TSElGVCkNCj4gKw0KPiArDQo+ICsvLyBSZWdp
c3RlciBDRE1BX0RfQ1ZUX1NDQUxFXzANCj4gKyNkZWZpbmUgQ0RNQV9EX0NWVF9TQ0FMRV8w
CQkJX01LX0FERFJfQ09OU1QoMHgzMGFjKQ0KPiArI2RlZmluZSBDRE1BX0RfQ1ZUX1NDQUxF
XzBfQ1ZUX1NDQUxFX1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDApDQo+ICsjZGVmaW5lIENE
TUFfRF9DVlRfU0NBTEVfMF9DVlRfU0NBTEVfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHhm
ZmZmLCBDRE1BX0RfQ1ZUX1NDQUxFXzBfQ1ZUX1NDQUxFX1NISUZUKQ0KPiArDQo+ICsNCj4g
Ky8vIFJlZ2lzdGVyIENETUFfRF9DT05WX1NUUklERV8wDQo+ICsjZGVmaW5lIENETUFfRF9D
T05WX1NUUklERV8wCQkJX01LX0FERFJfQ09OU1QoMHgzMGIwKQ0KPiArI2RlZmluZSBDRE1B
X0RfQ09OVl9TVFJJREVfMF9DT05WX1hfU1RSSURFX1NISUZUCQkJX01LX1NISUZUX0NPTlNU
KDApDQo+ICsjZGVmaW5lIENETUFfRF9DT05WX1NUUklERV8wX0NPTlZfWF9TVFJJREVfRklF
TEQJCQlfTUtfRklFTERfQ09OU1QoMHg3LCBDRE1BX0RfQ09OVl9TVFJJREVfMF9DT05WX1hf
U1RSSURFX1NISUZUKQ0KPiArI2RlZmluZSBDRE1BX0RfQ09OVl9TVFJJREVfMF9DT05WX1lf
U1RSSURFX1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDE2KQ0KPiArI2RlZmluZSBDRE1BX0Rf
Q09OVl9TVFJJREVfMF9DT05WX1lfU1RSSURFX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4
NywgQ0RNQV9EX0NPTlZfU1RSSURFXzBfQ09OVl9ZX1NUUklERV9TSElGVCkNCj4gKw0KPiAr
DQo+ICsvLyBSZWdpc3RlciBDRE1BX0RfWkVST19QQURESU5HXzANCj4gKyNkZWZpbmUgQ0RN
QV9EX1pFUk9fUEFERElOR18wCQkJX01LX0FERFJfQ09OU1QoMHgzMGI0KQ0KPiArI2RlZmlu
ZSBDRE1BX0RfWkVST19QQURESU5HXzBfUEFEX0xFRlRfU0hJRlQJCQlfTUtfU0hJRlRfQ09O
U1QoMCkNCj4gKyNkZWZpbmUgQ0RNQV9EX1pFUk9fUEFERElOR18wX1BBRF9MRUZUX0ZJRUxE
CQkJX01LX0ZJRUxEX0NPTlNUKDB4MWYsIENETUFfRF9aRVJPX1BBRERJTkdfMF9QQURfTEVG
VF9TSElGVCkNCj4gKyNkZWZpbmUgQ0RNQV9EX1pFUk9fUEFERElOR18wX1BBRF9SSUdIVF9T
SElGVAkJCV9NS19TSElGVF9DT05TVCg4KQ0KPiArI2RlZmluZSBDRE1BX0RfWkVST19QQURE
SU5HXzBfUEFEX1JJR0hUX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4M2YsIENETUFfRF9a
RVJPX1BBRERJTkdfMF9QQURfUklHSFRfU0hJRlQpDQo+ICsjZGVmaW5lIENETUFfRF9aRVJP
X1BBRERJTkdfMF9QQURfVE9QX1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDE2KQ0KPiArI2Rl
ZmluZSBDRE1BX0RfWkVST19QQURESU5HXzBfUEFEX1RPUF9GSUVMRAkJCV9NS19GSUVMRF9D
T05TVCgweDFmLCBDRE1BX0RfWkVST19QQURESU5HXzBfUEFEX1RPUF9TSElGVCkNCj4gKyNk
ZWZpbmUgQ0RNQV9EX1pFUk9fUEFERElOR18wX1BBRF9CT1RUT01fU0hJRlQJCQlfTUtfU0hJ
RlRfQ09OU1QoMjQpDQo+ICsjZGVmaW5lIENETUFfRF9aRVJPX1BBRERJTkdfMF9QQURfQk9U
VE9NX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4M2YsIENETUFfRF9aRVJPX1BBRERJTkdf
MF9QQURfQk9UVE9NX1NISUZUKQ0KPiArDQo+ICsNCj4gKy8vIFJlZ2lzdGVyIENETUFfRF9a
RVJPX1BBRERJTkdfVkFMVUVfMA0KPiArI2RlZmluZSBDRE1BX0RfWkVST19QQURESU5HX1ZB
TFVFXzAJCQlfTUtfQUREUl9DT05TVCgweDMwYjgpDQo+ICsjZGVmaW5lIENETUFfRF9aRVJP
X1BBRERJTkdfVkFMVUVfMF9QQURfVkFMVUVfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMCkN
Cj4gKyNkZWZpbmUgQ0RNQV9EX1pFUk9fUEFERElOR19WQUxVRV8wX1BBRF9WQUxVRV9GSUVM
RAkJCV9NS19GSUVMRF9DT05TVCgweGZmZmYsIENETUFfRF9aRVJPX1BBRERJTkdfVkFMVUVf
MF9QQURfVkFMVUVfU0hJRlQpDQo+ICsNCj4gKw0KPiArLy8gUmVnaXN0ZXIgQ0RNQV9EX0JB
TktfMA0KPiArI2RlZmluZSBDRE1BX0RfQkFOS18wCQkJX01LX0FERFJfQ09OU1QoMHgzMGJj
KQ0KPiArI2RlZmluZSBDRE1BX0RfQkFOS18wX0RBVEFfQkFOS19TSElGVAkJCV9NS19TSElG
VF9DT05TVCgwKQ0KPiArI2RlZmluZSBDRE1BX0RfQkFOS18wX0RBVEFfQkFOS19GSUVMRAkJ
CV9NS19GSUVMRF9DT05TVCgweDFmLCBDRE1BX0RfQkFOS18wX0RBVEFfQkFOS19TSElGVCkN
Cj4gKyNkZWZpbmUgQ0RNQV9EX0JBTktfMF9XRUlHSFRfQkFOS19TSElGVAkJCV9NS19TSElG
VF9DT05TVCgxNikNCj4gKyNkZWZpbmUgQ0RNQV9EX0JBTktfMF9XRUlHSFRfQkFOS19GSUVM
RAkJCV9NS19GSUVMRF9DT05TVCgweDFmLCBDRE1BX0RfQkFOS18wX1dFSUdIVF9CQU5LX1NI
SUZUKQ0KPiArDQo+ICsNCj4gKy8vIFJlZ2lzdGVyIENETUFfRF9OQU5fRkxVU0hfVE9fWkVS
T18wDQo+ICsjZGVmaW5lIENETUFfRF9OQU5fRkxVU0hfVE9fWkVST18wCQkJX01LX0FERFJf
Q09OU1QoMHgzMGMwKQ0KPiArI2RlZmluZSBDRE1BX0RfTkFOX0ZMVVNIX1RPX1pFUk9fMF9O
QU5fVE9fWkVST19TSElGVAkJCV9NS19TSElGVF9DT05TVCgwKQ0KPiArI2RlZmluZSBDRE1B
X0RfTkFOX0ZMVVNIX1RPX1pFUk9fMF9OQU5fVE9fWkVST19GSUVMRAkJCV9NS19GSUVMRF9D
T05TVCgweDEsIENETUFfRF9OQU5fRkxVU0hfVE9fWkVST18wX05BTl9UT19aRVJPX1NISUZU
KQ0KPiArI2RlZmluZSBDRE1BX0RfTkFOX0ZMVVNIX1RPX1pFUk9fMF9OQU5fVE9fWkVST19E
SVNBQkxFCQkJX01LX0VOVU1fQ09OU1QoMHgwKQ0KPiArI2RlZmluZSBDRE1BX0RfTkFOX0ZM
VVNIX1RPX1pFUk9fMF9OQU5fVE9fWkVST19FTkFCTEUJCQlfTUtfRU5VTV9DT05TVCgweDEp
DQo+ICsNCj4gKw0KPiArLy8gUmVnaXN0ZXIgQ0RNQV9EX05BTl9JTlBVVF9EQVRBX05VTV8w
DQo+ICsjZGVmaW5lIENETUFfRF9OQU5fSU5QVVRfREFUQV9OVU1fMAkJCV9NS19BRERSX0NP
TlNUKDB4MzBjNCkNCj4gKyNkZWZpbmUgQ0RNQV9EX05BTl9JTlBVVF9EQVRBX05VTV8wX05B
Tl9EQVRBX05VTV9TSElGVAkJCV9NS19TSElGVF9DT05TVCgwKQ0KPiArI2RlZmluZSBDRE1B
X0RfTkFOX0lOUFVUX0RBVEFfTlVNXzBfTkFOX0RBVEFfTlVNX0ZJRUxECQkJX01LX0ZJRUxE
X0NPTlNUKDB4ZmZmZmZmZmYsIENETUFfRF9OQU5fSU5QVVRfREFUQV9OVU1fMF9OQU5fREFU
QV9OVU1fU0hJRlQpDQo+ICsNCj4gKw0KPiArLy8gUmVnaXN0ZXIgQ0RNQV9EX05BTl9JTlBV
VF9XRUlHSFRfTlVNXzANCj4gKyNkZWZpbmUgQ0RNQV9EX05BTl9JTlBVVF9XRUlHSFRfTlVN
XzAJCQlfTUtfQUREUl9DT05TVCgweDMwYzgpDQo+ICsjZGVmaW5lIENETUFfRF9OQU5fSU5Q
VVRfV0VJR0hUX05VTV8wX05BTl9XRUlHSFRfTlVNX1NISUZUCQkJX01LX1NISUZUX0NPTlNU
KDApDQo+ICsjZGVmaW5lIENETUFfRF9OQU5fSU5QVVRfV0VJR0hUX05VTV8wX05BTl9XRUlH
SFRfTlVNX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4ZmZmZmZmZmYsIENETUFfRF9OQU5f
SU5QVVRfV0VJR0hUX05VTV8wX05BTl9XRUlHSFRfTlVNX1NISUZUKQ0KPiArDQo+ICsNCj4g
Ky8vIFJlZ2lzdGVyIENETUFfRF9JTkZfSU5QVVRfREFUQV9OVU1fMA0KPiArI2RlZmluZSBD
RE1BX0RfSU5GX0lOUFVUX0RBVEFfTlVNXzAJCQlfTUtfQUREUl9DT05TVCgweDMwY2MpDQo+
ICsjZGVmaW5lIENETUFfRF9JTkZfSU5QVVRfREFUQV9OVU1fMF9JTkZfREFUQV9OVU1fU0hJ
RlQJCQlfTUtfU0hJRlRfQ09OU1QoMCkNCj4gKyNkZWZpbmUgQ0RNQV9EX0lORl9JTlBVVF9E
QVRBX05VTV8wX0lORl9EQVRBX05VTV9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweGZmZmZm
ZmZmLCBDRE1BX0RfSU5GX0lOUFVUX0RBVEFfTlVNXzBfSU5GX0RBVEFfTlVNX1NISUZUKQ0K
PiArDQo+ICsNCj4gKy8vIFJlZ2lzdGVyIENETUFfRF9JTkZfSU5QVVRfV0VJR0hUX05VTV8w
DQo+ICsjZGVmaW5lIENETUFfRF9JTkZfSU5QVVRfV0VJR0hUX05VTV8wCQkJX01LX0FERFJf
Q09OU1QoMHgzMGQwKQ0KPiArI2RlZmluZSBDRE1BX0RfSU5GX0lOUFVUX1dFSUdIVF9OVU1f
MF9JTkZfV0VJR0hUX05VTV9TSElGVAkJCV9NS19TSElGVF9DT05TVCgwKQ0KPiArI2RlZmlu
ZSBDRE1BX0RfSU5GX0lOUFVUX1dFSUdIVF9OVU1fMF9JTkZfV0VJR0hUX05VTV9GSUVMRAkJ
CV9NS19GSUVMRF9DT05TVCgweGZmZmZmZmZmLCBDRE1BX0RfSU5GX0lOUFVUX1dFSUdIVF9O
VU1fMF9JTkZfV0VJR0hUX05VTV9TSElGVCkNCj4gKw0KPiArDQo+ICsvLyBSZWdpc3RlciBD
RE1BX0RfUEVSRl9FTkFCTEVfMA0KPiArI2RlZmluZSBDRE1BX0RfUEVSRl9FTkFCTEVfMAkJ
CV9NS19BRERSX0NPTlNUKDB4MzBkNCkNCj4gKyNkZWZpbmUgQ0RNQV9EX1BFUkZfRU5BQkxF
XzBfRE1BX0VOX1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDApDQo+ICsjZGVmaW5lIENETUFf
RF9QRVJGX0VOQUJMRV8wX0RNQV9FTl9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweDEsIENE
TUFfRF9QRVJGX0VOQUJMRV8wX0RNQV9FTl9TSElGVCkNCj4gKw0KPiArDQo+ICsvLyBSZWdp
c3RlciBDRE1BX0RfUEVSRl9EQVRfUkVBRF9TVEFMTF8wDQo+ICsjZGVmaW5lIENETUFfRF9Q
RVJGX0RBVF9SRUFEX1NUQUxMXzAJCQlfTUtfQUREUl9DT05TVCgweDMwZDgpDQo+ICsjZGVm
aW5lIENETUFfRF9QRVJGX0RBVF9SRUFEX1NUQUxMXzBfREFUX1JEX1NUQUxMX1NISUZUCQkJ
X01LX1NISUZUX0NPTlNUKDApDQo+ICsjZGVmaW5lIENETUFfRF9QRVJGX0RBVF9SRUFEX1NU
QUxMXzBfREFUX1JEX1NUQUxMX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4ZmZmZmZmZmYs
IENETUFfRF9QRVJGX0RBVF9SRUFEX1NUQUxMXzBfREFUX1JEX1NUQUxMX1NISUZUKQ0KPiAr
DQo+ICsNCj4gKy8vIFJlZ2lzdGVyIENETUFfRF9QRVJGX1dUX1JFQURfU1RBTExfMA0KPiAr
I2RlZmluZSBDRE1BX0RfUEVSRl9XVF9SRUFEX1NUQUxMXzAJCQlfTUtfQUREUl9DT05TVCgw
eDMwZGMpDQo+ICsjZGVmaW5lIENETUFfRF9QRVJGX1dUX1JFQURfU1RBTExfMF9XVF9SRF9T
VEFMTF9TSElGVAkJCV9NS19TSElGVF9DT05TVCgwKQ0KPiArI2RlZmluZSBDRE1BX0RfUEVS
Rl9XVF9SRUFEX1NUQUxMXzBfV1RfUkRfU1RBTExfRklFTEQJCQlfTUtfRklFTERfQ09OU1Qo
MHhmZmZmZmZmZiwgQ0RNQV9EX1BFUkZfV1RfUkVBRF9TVEFMTF8wX1dUX1JEX1NUQUxMX1NI
SUZUKQ0KPiArDQo+ICsNCj4gKy8vIFJlZ2lzdGVyIENETUFfRF9QRVJGX0RBVF9SRUFEX0xB
VEVOQ1lfMA0KPiArI2RlZmluZSBDRE1BX0RfUEVSRl9EQVRfUkVBRF9MQVRFTkNZXzAJCQlf
TUtfQUREUl9DT05TVCgweDMwZTApDQo+ICsjZGVmaW5lIENETUFfRF9QRVJGX0RBVF9SRUFE
X0xBVEVOQ1lfMF9EQVRfUkRfTEFURU5DWV9TSElGVAkJCV9NS19TSElGVF9DT05TVCgwKQ0K
PiArI2RlZmluZSBDRE1BX0RfUEVSRl9EQVRfUkVBRF9MQVRFTkNZXzBfREFUX1JEX0xBVEVO
Q1lfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHhmZmZmZmZmZiwgQ0RNQV9EX1BFUkZfREFU
X1JFQURfTEFURU5DWV8wX0RBVF9SRF9MQVRFTkNZX1NISUZUKQ0KPiArDQo+ICsNCj4gKy8v
IFJlZ2lzdGVyIENETUFfRF9QRVJGX1dUX1JFQURfTEFURU5DWV8wDQo+ICsjZGVmaW5lIENE
TUFfRF9QRVJGX1dUX1JFQURfTEFURU5DWV8wCQkJX01LX0FERFJfQ09OU1QoMHgzMGU0KQ0K
PiArI2RlZmluZSBDRE1BX0RfUEVSRl9XVF9SRUFEX0xBVEVOQ1lfMF9XVF9SRF9MQVRFTkNZ
X1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDApDQo+ICsjZGVmaW5lIENETUFfRF9QRVJGX1dU
X1JFQURfTEFURU5DWV8wX1dUX1JEX0xBVEVOQ1lfRklFTEQJCQlfTUtfRklFTERfQ09OU1Qo
MHhmZmZmZmZmZiwgQ0RNQV9EX1BFUkZfV1RfUkVBRF9MQVRFTkNZXzBfV1RfUkRfTEFURU5D
WV9TSElGVCkNCj4gKw0KPiArDQo+ICsvLyBSZWdpc3RlciBDRE1BX0RfQ1lBXzANCj4gKyNk
ZWZpbmUgQ0RNQV9EX0NZQV8wCQkJX01LX0FERFJfQ09OU1QoMHgzMGU4KQ0KPiArI2RlZmlu
ZSBDRE1BX0RfQ1lBXzBfQ1lBX1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDApDQo+ICsjZGVm
aW5lIENETUFfRF9DWUFfMF9DWUFfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHhmZmZmZmZm
ZiwgQ0RNQV9EX0NZQV8wX0NZQV9TSElGVCkNCj4gKw0KPiArDQo+ICsNCj4gKy8vIFRvIHNh
dGlzZnkgdmFyaW91cyBjb21waWxlcnMgYW5kIHBsYXRmb3JtcywNCj4gKy8vIHdlIGxldCB1
c2VycyBjb250cm9sIHRoZSB0eXBlcyBhbmQgc3ludGF4IG9mIGNlcnRhaW4gY29uc3RhbnRz
LCB1c2luZyBtYWNyb3MuDQo+ICsjaWZuZGVmIF9NS19TSElGVF9DT05TVA0KPiArICAjZGVm
aW5lIF9NS19TSElGVF9DT05TVChfY29uc3RhbnRfKSBfY29uc3RhbnRfDQo+ICsjZW5kaWYN
Cj4gKyNpZm5kZWYgX01LX01BU0tfQ09OU1QNCj4gKyAgI2RlZmluZSBfTUtfTUFTS19DT05T
VChfY29uc3RhbnRfKSBfY29uc3RhbnRfDQo+ICsjZW5kaWYNCj4gKyNpZm5kZWYgX01LX0VO
VU1fQ09OU1QNCj4gKyAgI2RlZmluZSBfTUtfRU5VTV9DT05TVChfY29uc3RhbnRfKSAoX2Nv
bnN0YW50XyAjIyBVTCkNCj4gKyNlbmRpZg0KPiArI2lmbmRlZiBfTUtfQUREUl9DT05TVA0K
PiArICAjZGVmaW5lIF9NS19BRERSX0NPTlNUKF9jb25zdGFudF8pIF9jb25zdGFudF8NCj4g
KyNlbmRpZg0KPiArI2lmbmRlZiBfTUtfRklFTERfQ09OU1QNCj4gKyAgI2RlZmluZSBfTUtf
RklFTERfQ09OU1QoX21hc2tfLCBfc2hpZnRfKSAoX01LX01BU0tfQ09OU1QoX21hc2tfKSA8
PCBfTUtfU0hJRlRfQ09OU1QoX3NoaWZ0XykpDQo+ICsjZW5kaWYNCj4gKw0KPiArDQo+ICsv
LyBSZWdpc3RlciBDU0NfU19TVEFUVVNfMA0KPiArI2RlZmluZSBDU0NfU19TVEFUVVNfMAkJ
CV9NS19BRERSX0NPTlNUKDB4NDAwMCkNCj4gKyNkZWZpbmUgQ1NDX1NfU1RBVFVTXzBfU1RB
VFVTXzBfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMCkNCj4gKyNkZWZpbmUgQ1NDX1NfU1RB
VFVTXzBfU1RBVFVTXzBfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHgzLCBDU0NfU19TVEFU
VVNfMF9TVEFUVVNfMF9TSElGVCkNCj4gKyNkZWZpbmUgQ1NDX1NfU1RBVFVTXzBfU1RBVFVT
XzBfSURMRQkJCV9NS19FTlVNX0NPTlNUKDB4MCkNCj4gKyNkZWZpbmUgQ1NDX1NfU1RBVFVT
XzBfU1RBVFVTXzBfUlVOTklORwkJCV9NS19FTlVNX0NPTlNUKDB4MSkNCj4gKyNkZWZpbmUg
Q1NDX1NfU1RBVFVTXzBfU1RBVFVTXzBfUEVORElORwkJCV9NS19FTlVNX0NPTlNUKDB4MikN
Cj4gKyNkZWZpbmUgQ1NDX1NfU1RBVFVTXzBfU1RBVFVTXzFfU0hJRlQJCQlfTUtfU0hJRlRf
Q09OU1QoMTYpDQo+ICsjZGVmaW5lIENTQ19TX1NUQVRVU18wX1NUQVRVU18xX0ZJRUxECQkJ
X01LX0ZJRUxEX0NPTlNUKDB4MywgQ1NDX1NfU1RBVFVTXzBfU1RBVFVTXzFfU0hJRlQpDQo+
ICsjZGVmaW5lIENTQ19TX1NUQVRVU18wX1NUQVRVU18xX0lETEUJCQlfTUtfRU5VTV9DT05T
VCgweDApDQo+ICsjZGVmaW5lIENTQ19TX1NUQVRVU18wX1NUQVRVU18xX1JVTk5JTkcJCQlf
TUtfRU5VTV9DT05TVCgweDEpDQo+ICsjZGVmaW5lIENTQ19TX1NUQVRVU18wX1NUQVRVU18x
X1BFTkRJTkcJCQlfTUtfRU5VTV9DT05TVCgweDIpDQo+ICsNCj4gKw0KPiArLy8gUmVnaXN0
ZXIgQ1NDX1NfUE9JTlRFUl8wDQo+ICsjZGVmaW5lIENTQ19TX1BPSU5URVJfMAkJCV9NS19B
RERSX0NPTlNUKDB4NDAwNCkNCj4gKyNkZWZpbmUgQ1NDX1NfUE9JTlRFUl8wX1BST0RVQ0VS
X1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDApDQo+ICsjZGVmaW5lIENTQ19TX1BPSU5URVJf
MF9QUk9EVUNFUl9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweDEsIENTQ19TX1BPSU5URVJf
MF9QUk9EVUNFUl9TSElGVCkNCj4gKyNkZWZpbmUgQ1NDX1NfUE9JTlRFUl8wX1BST0RVQ0VS
X0dST1VQXzAJCQlfTUtfRU5VTV9DT05TVCgweDApDQo+ICsjZGVmaW5lIENTQ19TX1BPSU5U
RVJfMF9QUk9EVUNFUl9HUk9VUF8xCQkJX01LX0VOVU1fQ09OU1QoMHgxKQ0KPiArI2RlZmlu
ZSBDU0NfU19QT0lOVEVSXzBfQ09OU1VNRVJfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMTYp
DQo+ICsjZGVmaW5lIENTQ19TX1BPSU5URVJfMF9DT05TVU1FUl9GSUVMRAkJCV9NS19GSUVM
RF9DT05TVCgweDEsIENTQ19TX1BPSU5URVJfMF9DT05TVU1FUl9TSElGVCkNCj4gKyNkZWZp
bmUgQ1NDX1NfUE9JTlRFUl8wX0NPTlNVTUVSX0dST1VQXzAJCQlfTUtfRU5VTV9DT05TVCgw
eDApDQo+ICsjZGVmaW5lIENTQ19TX1BPSU5URVJfMF9DT05TVU1FUl9HUk9VUF8xCQkJX01L
X0VOVU1fQ09OU1QoMHgxKQ0KPiArDQo+ICsNCj4gKy8vIFJlZ2lzdGVyIENTQ19EX09QX0VO
QUJMRV8wDQo+ICsjZGVmaW5lIENTQ19EX09QX0VOQUJMRV8wCQkJX01LX0FERFJfQ09OU1Qo
MHg0MDA4KQ0KPiArI2RlZmluZSBDU0NfRF9PUF9FTkFCTEVfMF9PUF9FTl9TSElGVAkJCV9N
S19TSElGVF9DT05TVCgwKQ0KPiArI2RlZmluZSBDU0NfRF9PUF9FTkFCTEVfMF9PUF9FTl9G
SUVMRAkJCV9NS19GSUVMRF9DT05TVCgweDEsIENTQ19EX09QX0VOQUJMRV8wX09QX0VOX1NI
SUZUKQ0KPiArI2RlZmluZSBDU0NfRF9PUF9FTkFCTEVfMF9PUF9FTl9ESVNBQkxFCQkJX01L
X0VOVU1fQ09OU1QoMHgwKQ0KPiArI2RlZmluZSBDU0NfRF9PUF9FTkFCTEVfMF9PUF9FTl9F
TkFCTEUJCQlfTUtfRU5VTV9DT05TVCgweDEpDQo+ICsNCj4gKw0KPiArLy8gUmVnaXN0ZXIg
Q1NDX0RfTUlTQ19DRkdfMA0KPiArI2RlZmluZSBDU0NfRF9NSVNDX0NGR18wCQkJX01LX0FE
RFJfQ09OU1QoMHg0MDBjKQ0KPiArI2RlZmluZSBDU0NfRF9NSVNDX0NGR18wX0NPTlZfTU9E
RV9TSElGVAkJCV9NS19TSElGVF9DT05TVCgwKQ0KPiArI2RlZmluZSBDU0NfRF9NSVNDX0NG
R18wX0NPTlZfTU9ERV9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweDEsIENTQ19EX01JU0Nf
Q0ZHXzBfQ09OVl9NT0RFX1NISUZUKQ0KPiArI2RlZmluZSBDU0NfRF9NSVNDX0NGR18wX0NP
TlZfTU9ERV9ESVJFQ1QJCQlfTUtfRU5VTV9DT05TVCgweDApDQo+ICsjZGVmaW5lIENTQ19E
X01JU0NfQ0ZHXzBfQ09OVl9NT0RFX1dJTk9HUkFECQkJX01LX0VOVU1fQ09OU1QoMHgxKQ0K
PiArI2RlZmluZSBDU0NfRF9NSVNDX0NGR18wX0lOX1BSRUNJU0lPTl9TSElGVAkJCV9NS19T
SElGVF9DT05TVCg4KQ0KPiArI2RlZmluZSBDU0NfRF9NSVNDX0NGR18wX0lOX1BSRUNJU0lP
Tl9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweDMsIENTQ19EX01JU0NfQ0ZHXzBfSU5fUFJF
Q0lTSU9OX1NISUZUKQ0KPiArI2RlZmluZSBDU0NfRF9NSVNDX0NGR18wX0lOX1BSRUNJU0lP
Tl9JTlQ4CQkJX01LX0VOVU1fQ09OU1QoMHgwKQ0KPiArI2RlZmluZSBDU0NfRF9NSVNDX0NG
R18wX0lOX1BSRUNJU0lPTl9JTlQxNgkJCV9NS19FTlVNX0NPTlNUKDB4MSkNCj4gKyNkZWZp
bmUgQ1NDX0RfTUlTQ19DRkdfMF9JTl9QUkVDSVNJT05fRlAxNgkJCV9NS19FTlVNX0NPTlNU
KDB4MikNCj4gKyNkZWZpbmUgQ1NDX0RfTUlTQ19DRkdfMF9QUk9DX1BSRUNJU0lPTl9TSElG
VAkJCV9NS19TSElGVF9DT05TVCgxMikNCj4gKyNkZWZpbmUgQ1NDX0RfTUlTQ19DRkdfMF9Q
Uk9DX1BSRUNJU0lPTl9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweDMsIENTQ19EX01JU0Nf
Q0ZHXzBfUFJPQ19QUkVDSVNJT05fU0hJRlQpDQo+ICsjZGVmaW5lIENTQ19EX01JU0NfQ0ZH
XzBfUFJPQ19QUkVDSVNJT05fSU5UOAkJCV9NS19FTlVNX0NPTlNUKDB4MCkNCj4gKyNkZWZp
bmUgQ1NDX0RfTUlTQ19DRkdfMF9QUk9DX1BSRUNJU0lPTl9JTlQxNgkJCV9NS19FTlVNX0NP
TlNUKDB4MSkNCj4gKyNkZWZpbmUgQ1NDX0RfTUlTQ19DRkdfMF9QUk9DX1BSRUNJU0lPTl9G
UDE2CQkJX01LX0VOVU1fQ09OU1QoMHgyKQ0KPiArI2RlZmluZSBDU0NfRF9NSVNDX0NGR18w
X0RBVEFfUkVVU0VfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMTYpDQo+ICsjZGVmaW5lIENT
Q19EX01JU0NfQ0ZHXzBfREFUQV9SRVVTRV9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweDEs
IENTQ19EX01JU0NfQ0ZHXzBfREFUQV9SRVVTRV9TSElGVCkNCj4gKyNkZWZpbmUgQ1NDX0Rf
TUlTQ19DRkdfMF9EQVRBX1JFVVNFX0RJU0FCTEUJCQlfTUtfRU5VTV9DT05TVCgweDApDQo+
ICsjZGVmaW5lIENTQ19EX01JU0NfQ0ZHXzBfREFUQV9SRVVTRV9FTkFCTEUJCQlfTUtfRU5V
TV9DT05TVCgweDEpDQo+ICsjZGVmaW5lIENTQ19EX01JU0NfQ0ZHXzBfV0VJR0hUX1JFVVNF
X1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDIwKQ0KPiArI2RlZmluZSBDU0NfRF9NSVNDX0NG
R18wX1dFSUdIVF9SRVVTRV9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweDEsIENTQ19EX01J
U0NfQ0ZHXzBfV0VJR0hUX1JFVVNFX1NISUZUKQ0KPiArI2RlZmluZSBDU0NfRF9NSVNDX0NG
R18wX1dFSUdIVF9SRVVTRV9ESVNBQkxFCQkJX01LX0VOVU1fQ09OU1QoMHgwKQ0KPiArI2Rl
ZmluZSBDU0NfRF9NSVNDX0NGR18wX1dFSUdIVF9SRVVTRV9FTkFCTEUJCQlfTUtfRU5VTV9D
T05TVCgweDEpDQo+ICsjZGVmaW5lIENTQ19EX01JU0NfQ0ZHXzBfU0tJUF9EQVRBX1JMU19T
SElGVAkJCV9NS19TSElGVF9DT05TVCgyNCkNCj4gKyNkZWZpbmUgQ1NDX0RfTUlTQ19DRkdf
MF9TS0lQX0RBVEFfUkxTX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4MSwgQ1NDX0RfTUlT
Q19DRkdfMF9TS0lQX0RBVEFfUkxTX1NISUZUKQ0KPiArI2RlZmluZSBDU0NfRF9NSVNDX0NG
R18wX1NLSVBfREFUQV9STFNfRElTQUJMRQkJCV9NS19FTlVNX0NPTlNUKDB4MCkNCj4gKyNk
ZWZpbmUgQ1NDX0RfTUlTQ19DRkdfMF9TS0lQX0RBVEFfUkxTX0VOQUJMRQkJCV9NS19FTlVN
X0NPTlNUKDB4MSkNCj4gKyNkZWZpbmUgQ1NDX0RfTUlTQ19DRkdfMF9TS0lQX1dFSUdIVF9S
TFNfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMjgpDQo+ICsjZGVmaW5lIENTQ19EX01JU0Nf
Q0ZHXzBfU0tJUF9XRUlHSFRfUkxTX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4MSwgQ1ND
X0RfTUlTQ19DRkdfMF9TS0lQX1dFSUdIVF9STFNfU0hJRlQpDQo+ICsjZGVmaW5lIENTQ19E
X01JU0NfQ0ZHXzBfU0tJUF9XRUlHSFRfUkxTX0RJU0FCTEUJCQlfTUtfRU5VTV9DT05TVCgw
eDApDQo+ICsjZGVmaW5lIENTQ19EX01JU0NfQ0ZHXzBfU0tJUF9XRUlHSFRfUkxTX0VOQUJM
RQkJCV9NS19FTlVNX0NPTlNUKDB4MSkNCj4gKw0KPiArDQo+ICsvLyBSZWdpc3RlciBDU0Nf
RF9EQVRBSU5fRk9STUFUXzANCj4gKyNkZWZpbmUgQ1NDX0RfREFUQUlOX0ZPUk1BVF8wCQkJ
X01LX0FERFJfQ09OU1QoMHg0MDEwKQ0KPiArI2RlZmluZSBDU0NfRF9EQVRBSU5fRk9STUFU
XzBfREFUQUlOX0ZPUk1BVF9TSElGVAkJCV9NS19TSElGVF9DT05TVCgwKQ0KPiArI2RlZmlu
ZSBDU0NfRF9EQVRBSU5fRk9STUFUXzBfREFUQUlOX0ZPUk1BVF9GSUVMRAkJCV9NS19GSUVM
RF9DT05TVCgweDEsIENTQ19EX0RBVEFJTl9GT1JNQVRfMF9EQVRBSU5fRk9STUFUX1NISUZU
KQ0KPiArI2RlZmluZSBDU0NfRF9EQVRBSU5fRk9STUFUXzBfREFUQUlOX0ZPUk1BVF9GRUFU
VVJFCQkJX01LX0VOVU1fQ09OU1QoMHgwKQ0KPiArI2RlZmluZSBDU0NfRF9EQVRBSU5fRk9S
TUFUXzBfREFUQUlOX0ZPUk1BVF9QSVhFTAkJCV9NS19FTlVNX0NPTlNUKDB4MSkNCj4gKw0K
PiArDQo+ICsvLyBSZWdpc3RlciBDU0NfRF9EQVRBSU5fU0laRV9FWFRfMF8wDQo+ICsjZGVm
aW5lIENTQ19EX0RBVEFJTl9TSVpFX0VYVF8wXzAJCQlfTUtfQUREUl9DT05TVCgweDQwMTQp
DQo+ICsjZGVmaW5lIENTQ19EX0RBVEFJTl9TSVpFX0VYVF8wXzBfREFUQUlOX1dJRFRIX0VY
VF9TSElGVAkJCV9NS19TSElGVF9DT05TVCgwKQ0KPiArI2RlZmluZSBDU0NfRF9EQVRBSU5f
U0laRV9FWFRfMF8wX0RBVEFJTl9XSURUSF9FWFRfRklFTEQJCQlfTUtfRklFTERfQ09OU1Qo
MHgxZmZmLCBDU0NfRF9EQVRBSU5fU0laRV9FWFRfMF8wX0RBVEFJTl9XSURUSF9FWFRfU0hJ
RlQpDQo+ICsjZGVmaW5lIENTQ19EX0RBVEFJTl9TSVpFX0VYVF8wXzBfREFUQUlOX0hFSUdI
VF9FWFRfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMTYpDQo+ICsjZGVmaW5lIENTQ19EX0RB
VEFJTl9TSVpFX0VYVF8wXzBfREFUQUlOX0hFSUdIVF9FWFRfRklFTEQJCQlfTUtfRklFTERf
Q09OU1QoMHgxZmZmLCBDU0NfRF9EQVRBSU5fU0laRV9FWFRfMF8wX0RBVEFJTl9IRUlHSFRf
RVhUX1NISUZUKQ0KPiArDQo+ICsNCj4gKy8vIFJlZ2lzdGVyIENTQ19EX0RBVEFJTl9TSVpF
X0VYVF8xXzANCj4gKyNkZWZpbmUgQ1NDX0RfREFUQUlOX1NJWkVfRVhUXzFfMAkJCV9NS19B
RERSX0NPTlNUKDB4NDAxOCkNCj4gKyNkZWZpbmUgQ1NDX0RfREFUQUlOX1NJWkVfRVhUXzFf
MF9EQVRBSU5fQ0hBTk5FTF9FWFRfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMCkNCj4gKyNk
ZWZpbmUgQ1NDX0RfREFUQUlOX1NJWkVfRVhUXzFfMF9EQVRBSU5fQ0hBTk5FTF9FWFRfRklF
TEQJCQlfTUtfRklFTERfQ09OU1QoMHgxZmZmLCBDU0NfRF9EQVRBSU5fU0laRV9FWFRfMV8w
X0RBVEFJTl9DSEFOTkVMX0VYVF9TSElGVCkNCj4gKw0KPiArDQo+ICsvLyBSZWdpc3RlciBD
U0NfRF9CQVRDSF9OVU1CRVJfMA0KPiArI2RlZmluZSBDU0NfRF9CQVRDSF9OVU1CRVJfMAkJ
CV9NS19BRERSX0NPTlNUKDB4NDAxYykNCj4gKyNkZWZpbmUgQ1NDX0RfQkFUQ0hfTlVNQkVS
XzBfQkFUQ0hFU19TSElGVAkJCV9NS19TSElGVF9DT05TVCgwKQ0KPiArI2RlZmluZSBDU0Nf
RF9CQVRDSF9OVU1CRVJfMF9CQVRDSEVTX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4MWYs
IENTQ19EX0JBVENIX05VTUJFUl8wX0JBVENIRVNfU0hJRlQpDQo+ICsNCj4gKw0KPiArLy8g
UmVnaXN0ZXIgQ1NDX0RfUE9TVF9ZX0VYVEVOU0lPTl8wDQo+ICsjZGVmaW5lIENTQ19EX1BP
U1RfWV9FWFRFTlNJT05fMAkJCV9NS19BRERSX0NPTlNUKDB4NDAyMCkNCj4gKyNkZWZpbmUg
Q1NDX0RfUE9TVF9ZX0VYVEVOU0lPTl8wX1lfRVhURU5TSU9OX1NISUZUCQkJX01LX1NISUZU
X0NPTlNUKDApDQo+ICsjZGVmaW5lIENTQ19EX1BPU1RfWV9FWFRFTlNJT05fMF9ZX0VYVEVO
U0lPTl9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweDMsIENTQ19EX1BPU1RfWV9FWFRFTlNJ
T05fMF9ZX0VYVEVOU0lPTl9TSElGVCkNCj4gKw0KPiArDQo+ICsvLyBSZWdpc3RlciBDU0Nf
RF9FTlRSWV9QRVJfU0xJQ0VfMA0KPiArI2RlZmluZSBDU0NfRF9FTlRSWV9QRVJfU0xJQ0Vf
MAkJCV9NS19BRERSX0NPTlNUKDB4NDAyNCkNCj4gKyNkZWZpbmUgQ1NDX0RfRU5UUllfUEVS
X1NMSUNFXzBfRU5UUklFU19TSElGVAkJCV9NS19TSElGVF9DT05TVCgwKQ0KPiArI2RlZmlu
ZSBDU0NfRF9FTlRSWV9QRVJfU0xJQ0VfMF9FTlRSSUVTX0ZJRUxECQkJX01LX0ZJRUxEX0NP
TlNUKDB4M2ZmZiwgQ1NDX0RfRU5UUllfUEVSX1NMSUNFXzBfRU5UUklFU19TSElGVCkNCj4g
Kw0KPiArDQo+ICsvLyBSZWdpc3RlciBDU0NfRF9XRUlHSFRfRk9STUFUXzANCj4gKyNkZWZp
bmUgQ1NDX0RfV0VJR0hUX0ZPUk1BVF8wCQkJX01LX0FERFJfQ09OU1QoMHg0MDI4KQ0KPiAr
I2RlZmluZSBDU0NfRF9XRUlHSFRfRk9STUFUXzBfV0VJR0hUX0ZPUk1BVF9TSElGVAkJCV9N
S19TSElGVF9DT05TVCgwKQ0KPiArI2RlZmluZSBDU0NfRF9XRUlHSFRfRk9STUFUXzBfV0VJ
R0hUX0ZPUk1BVF9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweDEsIENTQ19EX1dFSUdIVF9G
T1JNQVRfMF9XRUlHSFRfRk9STUFUX1NISUZUKQ0KPiArI2RlZmluZSBDU0NfRF9XRUlHSFRf
Rk9STUFUXzBfV0VJR0hUX0ZPUk1BVF9VTkNPTVBSRVNTRUQJCQlfTUtfRU5VTV9DT05TVCgw
eDApDQo+ICsjZGVmaW5lIENTQ19EX1dFSUdIVF9GT1JNQVRfMF9XRUlHSFRfRk9STUFUX0NP
TVBSRVNTRUQJCQlfTUtfRU5VTV9DT05TVCgweDEpDQo+ICsNCj4gKw0KPiArLy8gUmVnaXN0
ZXIgQ1NDX0RfV0VJR0hUX1NJWkVfRVhUXzBfMA0KPiArI2RlZmluZSBDU0NfRF9XRUlHSFRf
U0laRV9FWFRfMF8wCQkJX01LX0FERFJfQ09OU1QoMHg0MDJjKQ0KPiArI2RlZmluZSBDU0Nf
RF9XRUlHSFRfU0laRV9FWFRfMF8wX1dFSUdIVF9XSURUSF9FWFRfU0hJRlQJCQlfTUtfU0hJ
RlRfQ09OU1QoMCkNCj4gKyNkZWZpbmUgQ1NDX0RfV0VJR0hUX1NJWkVfRVhUXzBfMF9XRUlH
SFRfV0lEVEhfRVhUX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4MWYsIENTQ19EX1dFSUdI
VF9TSVpFX0VYVF8wXzBfV0VJR0hUX1dJRFRIX0VYVF9TSElGVCkNCj4gKyNkZWZpbmUgQ1ND
X0RfV0VJR0hUX1NJWkVfRVhUXzBfMF9XRUlHSFRfSEVJR0hUX0VYVF9TSElGVAkJCV9NS19T
SElGVF9DT05TVCgxNikNCj4gKyNkZWZpbmUgQ1NDX0RfV0VJR0hUX1NJWkVfRVhUXzBfMF9X
RUlHSFRfSEVJR0hUX0VYVF9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweDFmLCBDU0NfRF9X
RUlHSFRfU0laRV9FWFRfMF8wX1dFSUdIVF9IRUlHSFRfRVhUX1NISUZUKQ0KPiArDQo+ICsN
Cj4gKy8vIFJlZ2lzdGVyIENTQ19EX1dFSUdIVF9TSVpFX0VYVF8xXzANCj4gKyNkZWZpbmUg
Q1NDX0RfV0VJR0hUX1NJWkVfRVhUXzFfMAkJCV9NS19BRERSX0NPTlNUKDB4NDAzMCkNCj4g
KyNkZWZpbmUgQ1NDX0RfV0VJR0hUX1NJWkVfRVhUXzFfMF9XRUlHSFRfQ0hBTk5FTF9FWFRf
U0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMCkNCj4gKyNkZWZpbmUgQ1NDX0RfV0VJR0hUX1NJ
WkVfRVhUXzFfMF9XRUlHSFRfQ0hBTk5FTF9FWFRfRklFTEQJCQlfTUtfRklFTERfQ09OU1Qo
MHgxZmZmLCBDU0NfRF9XRUlHSFRfU0laRV9FWFRfMV8wX1dFSUdIVF9DSEFOTkVMX0VYVF9T
SElGVCkNCj4gKyNkZWZpbmUgQ1NDX0RfV0VJR0hUX1NJWkVfRVhUXzFfMF9XRUlHSFRfS0VS
TkVMX1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDE2KQ0KPiArI2RlZmluZSBDU0NfRF9XRUlH
SFRfU0laRV9FWFRfMV8wX1dFSUdIVF9LRVJORUxfRklFTEQJCQlfTUtfRklFTERfQ09OU1Qo
MHgxZmZmLCBDU0NfRF9XRUlHSFRfU0laRV9FWFRfMV8wX1dFSUdIVF9LRVJORUxfU0hJRlQp
DQo+ICsNCj4gKw0KPiArLy8gUmVnaXN0ZXIgQ1NDX0RfV0VJR0hUX0JZVEVTXzANCj4gKyNk
ZWZpbmUgQ1NDX0RfV0VJR0hUX0JZVEVTXzAJCQlfTUtfQUREUl9DT05TVCgweDQwMzQpDQo+
ICsjZGVmaW5lIENTQ19EX1dFSUdIVF9CWVRFU18wX1dFSUdIVF9CWVRFU19TSElGVAkJCV9N
S19TSElGVF9DT05TVCgwKQ0KPiArI2RlZmluZSBDU0NfRF9XRUlHSFRfQllURVNfMF9XRUlH
SFRfQllURVNfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHhmZmZmZmZmZiwgQ1NDX0RfV0VJ
R0hUX0JZVEVTXzBfV0VJR0hUX0JZVEVTX1NISUZUKQ0KPiArDQo+ICsNCj4gKy8vIFJlZ2lz
dGVyIENTQ19EX1dNQl9CWVRFU18wDQo+ICsjZGVmaW5lIENTQ19EX1dNQl9CWVRFU18wCQkJ
X01LX0FERFJfQ09OU1QoMHg0MDM4KQ0KPiArI2RlZmluZSBDU0NfRF9XTUJfQllURVNfMF9X
TUJfQllURVNfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMCkNCj4gKyNkZWZpbmUgQ1NDX0Rf
V01CX0JZVEVTXzBfV01CX0JZVEVTX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4ZmZmZmZm
ZiwgQ1NDX0RfV01CX0JZVEVTXzBfV01CX0JZVEVTX1NISUZUKQ0KPiArDQo+ICsNCj4gKy8v
IFJlZ2lzdGVyIENTQ19EX0RBVEFPVVRfU0laRV8wXzANCj4gKyNkZWZpbmUgQ1NDX0RfREFU
QU9VVF9TSVpFXzBfMAkJCV9NS19BRERSX0NPTlNUKDB4NDAzYykNCj4gKyNkZWZpbmUgQ1ND
X0RfREFUQU9VVF9TSVpFXzBfMF9EQVRBT1VUX1dJRFRIX1NISUZUCQkJX01LX1NISUZUX0NP
TlNUKDApDQo+ICsjZGVmaW5lIENTQ19EX0RBVEFPVVRfU0laRV8wXzBfREFUQU9VVF9XSURU
SF9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweDFmZmYsIENTQ19EX0RBVEFPVVRfU0laRV8w
XzBfREFUQU9VVF9XSURUSF9TSElGVCkNCj4gKyNkZWZpbmUgQ1NDX0RfREFUQU9VVF9TSVpF
XzBfMF9EQVRBT1VUX0hFSUdIVF9TSElGVAkJCV9NS19TSElGVF9DT05TVCgxNikNCj4gKyNk
ZWZpbmUgQ1NDX0RfREFUQU9VVF9TSVpFXzBfMF9EQVRBT1VUX0hFSUdIVF9GSUVMRAkJCV9N
S19GSUVMRF9DT05TVCgweDFmZmYsIENTQ19EX0RBVEFPVVRfU0laRV8wXzBfREFUQU9VVF9I
RUlHSFRfU0hJRlQpDQo+ICsNCj4gKw0KPiArLy8gUmVnaXN0ZXIgQ1NDX0RfREFUQU9VVF9T
SVpFXzFfMA0KPiArI2RlZmluZSBDU0NfRF9EQVRBT1VUX1NJWkVfMV8wCQkJX01LX0FERFJf
Q09OU1QoMHg0MDQwKQ0KPiArI2RlZmluZSBDU0NfRF9EQVRBT1VUX1NJWkVfMV8wX0RBVEFP
VVRfQ0hBTk5FTF9TSElGVAkJCV9NS19TSElGVF9DT05TVCgwKQ0KPiArI2RlZmluZSBDU0Nf
RF9EQVRBT1VUX1NJWkVfMV8wX0RBVEFPVVRfQ0hBTk5FTF9GSUVMRAkJCV9NS19GSUVMRF9D
T05TVCgweDFmZmYsIENTQ19EX0RBVEFPVVRfU0laRV8xXzBfREFUQU9VVF9DSEFOTkVMX1NI
SUZUKQ0KPiArDQo+ICsNCj4gKy8vIFJlZ2lzdGVyIENTQ19EX0FUT01JQ1NfMA0KPiArI2Rl
ZmluZSBDU0NfRF9BVE9NSUNTXzAJCQlfTUtfQUREUl9DT05TVCgweDQwNDQpDQo+ICsjZGVm
aW5lIENTQ19EX0FUT01JQ1NfMF9BVE9NSUNTX1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDAp
DQo+ICsjZGVmaW5lIENTQ19EX0FUT01JQ1NfMF9BVE9NSUNTX0ZJRUxECQkJX01LX0ZJRUxE
X0NPTlNUKDB4MWZmZmZmLCBDU0NfRF9BVE9NSUNTXzBfQVRPTUlDU19TSElGVCkNCj4gKw0K
PiArDQo+ICsvLyBSZWdpc3RlciBDU0NfRF9SRUxFQVNFXzANCj4gKyNkZWZpbmUgQ1NDX0Rf
UkVMRUFTRV8wCQkJX01LX0FERFJfQ09OU1QoMHg0MDQ4KQ0KPiArI2RlZmluZSBDU0NfRF9S
RUxFQVNFXzBfUkxTX1NMSUNFU19TSElGVAkJCV9NS19TSElGVF9DT05TVCgwKQ0KPiArI2Rl
ZmluZSBDU0NfRF9SRUxFQVNFXzBfUkxTX1NMSUNFU19GSUVMRAkJCV9NS19GSUVMRF9DT05T
VCgweGZmZiwgQ1NDX0RfUkVMRUFTRV8wX1JMU19TTElDRVNfU0hJRlQpDQo+ICsNCj4gKw0K
PiArLy8gUmVnaXN0ZXIgQ1NDX0RfQ09OVl9TVFJJREVfRVhUXzANCj4gKyNkZWZpbmUgQ1ND
X0RfQ09OVl9TVFJJREVfRVhUXzAJCQlfTUtfQUREUl9DT05TVCgweDQwNGMpDQo+ICsjZGVm
aW5lIENTQ19EX0NPTlZfU1RSSURFX0VYVF8wX0NPTlZfWF9TVFJJREVfRVhUX1NISUZUCQkJ
X01LX1NISUZUX0NPTlNUKDApDQo+ICsjZGVmaW5lIENTQ19EX0NPTlZfU1RSSURFX0VYVF8w
X0NPTlZfWF9TVFJJREVfRVhUX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4NywgQ1NDX0Rf
Q09OVl9TVFJJREVfRVhUXzBfQ09OVl9YX1NUUklERV9FWFRfU0hJRlQpDQo+ICsjZGVmaW5l
IENTQ19EX0NPTlZfU1RSSURFX0VYVF8wX0NPTlZfWV9TVFJJREVfRVhUX1NISUZUCQkJX01L
X1NISUZUX0NPTlNUKDE2KQ0KPiArI2RlZmluZSBDU0NfRF9DT05WX1NUUklERV9FWFRfMF9D
T05WX1lfU1RSSURFX0VYVF9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweDcsIENTQ19EX0NP
TlZfU1RSSURFX0VYVF8wX0NPTlZfWV9TVFJJREVfRVhUX1NISUZUKQ0KPiArDQo+ICsNCj4g
Ky8vIFJlZ2lzdGVyIENTQ19EX0RJTEFUSU9OX0VYVF8wDQo+ICsjZGVmaW5lIENTQ19EX0RJ
TEFUSU9OX0VYVF8wCQkJX01LX0FERFJfQ09OU1QoMHg0MDUwKQ0KPiArI2RlZmluZSBDU0Nf
RF9ESUxBVElPTl9FWFRfMF9YX0RJTEFUSU9OX0VYVF9TSElGVAkJCV9NS19TSElGVF9DT05T
VCgwKQ0KPiArI2RlZmluZSBDU0NfRF9ESUxBVElPTl9FWFRfMF9YX0RJTEFUSU9OX0VYVF9G
SUVMRAkJCV9NS19GSUVMRF9DT05TVCgweDFmLCBDU0NfRF9ESUxBVElPTl9FWFRfMF9YX0RJ
TEFUSU9OX0VYVF9TSElGVCkNCj4gKyNkZWZpbmUgQ1NDX0RfRElMQVRJT05fRVhUXzBfWV9E
SUxBVElPTl9FWFRfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMTYpDQo+ICsjZGVmaW5lIENT
Q19EX0RJTEFUSU9OX0VYVF8wX1lfRElMQVRJT05fRVhUX0ZJRUxECQkJX01LX0ZJRUxEX0NP
TlNUKDB4MWYsIENTQ19EX0RJTEFUSU9OX0VYVF8wX1lfRElMQVRJT05fRVhUX1NISUZUKQ0K
PiArDQo+ICsNCj4gKy8vIFJlZ2lzdGVyIENTQ19EX1pFUk9fUEFERElOR18wDQo+ICsjZGVm
aW5lIENTQ19EX1pFUk9fUEFERElOR18wCQkJX01LX0FERFJfQ09OU1QoMHg0MDU0KQ0KPiAr
I2RlZmluZSBDU0NfRF9aRVJPX1BBRERJTkdfMF9QQURfTEVGVF9TSElGVAkJCV9NS19TSElG
VF9DT05TVCgwKQ0KPiArI2RlZmluZSBDU0NfRF9aRVJPX1BBRERJTkdfMF9QQURfTEVGVF9G
SUVMRAkJCV9NS19GSUVMRF9DT05TVCgweDFmLCBDU0NfRF9aRVJPX1BBRERJTkdfMF9QQURf
TEVGVF9TSElGVCkNCj4gKyNkZWZpbmUgQ1NDX0RfWkVST19QQURESU5HXzBfUEFEX1RPUF9T
SElGVAkJCV9NS19TSElGVF9DT05TVCgxNikNCj4gKyNkZWZpbmUgQ1NDX0RfWkVST19QQURE
SU5HXzBfUEFEX1RPUF9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweDFmLCBDU0NfRF9aRVJP
X1BBRERJTkdfMF9QQURfVE9QX1NISUZUKQ0KPiArDQo+ICsNCj4gKy8vIFJlZ2lzdGVyIENT
Q19EX1pFUk9fUEFERElOR19WQUxVRV8wDQo+ICsjZGVmaW5lIENTQ19EX1pFUk9fUEFERElO
R19WQUxVRV8wCQkJX01LX0FERFJfQ09OU1QoMHg0MDU4KQ0KPiArI2RlZmluZSBDU0NfRF9a
RVJPX1BBRERJTkdfVkFMVUVfMF9QQURfVkFMVUVfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1Qo
MCkNCj4gKyNkZWZpbmUgQ1NDX0RfWkVST19QQURESU5HX1ZBTFVFXzBfUEFEX1ZBTFVFX0ZJ
RUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4ZmZmZiwgQ1NDX0RfWkVST19QQURESU5HX1ZBTFVF
XzBfUEFEX1ZBTFVFX1NISUZUKQ0KPiArDQo+ICsNCj4gKy8vIFJlZ2lzdGVyIENTQ19EX0JB
TktfMA0KPiArI2RlZmluZSBDU0NfRF9CQU5LXzAJCQlfTUtfQUREUl9DT05TVCgweDQwNWMp
DQo+ICsjZGVmaW5lIENTQ19EX0JBTktfMF9EQVRBX0JBTktfU0hJRlQJCQlfTUtfU0hJRlRf
Q09OU1QoMCkNCj4gKyNkZWZpbmUgQ1NDX0RfQkFOS18wX0RBVEFfQkFOS19GSUVMRAkJCV9N
S19GSUVMRF9DT05TVCgweDFmLCBDU0NfRF9CQU5LXzBfREFUQV9CQU5LX1NISUZUKQ0KPiAr
I2RlZmluZSBDU0NfRF9CQU5LXzBfV0VJR0hUX0JBTktfU0hJRlQJCQlfTUtfU0hJRlRfQ09O
U1QoMTYpDQo+ICsjZGVmaW5lIENTQ19EX0JBTktfMF9XRUlHSFRfQkFOS19GSUVMRAkJCV9N
S19GSUVMRF9DT05TVCgweDFmLCBDU0NfRF9CQU5LXzBfV0VJR0hUX0JBTktfU0hJRlQpDQo+
ICsNCj4gKw0KPiArLy8gUmVnaXN0ZXIgQ1NDX0RfUFJBX0NGR18wDQo+ICsjZGVmaW5lIENT
Q19EX1BSQV9DRkdfMAkJCV9NS19BRERSX0NPTlNUKDB4NDA2MCkNCj4gKyNkZWZpbmUgQ1ND
X0RfUFJBX0NGR18wX1BSQV9UUlVOQ0FURV9TSElGVAkJCV9NS19TSElGVF9DT05TVCgwKQ0K
PiArI2RlZmluZSBDU0NfRF9QUkFfQ0ZHXzBfUFJBX1RSVU5DQVRFX0ZJRUxECQkJX01LX0ZJ
RUxEX0NPTlNUKDB4MywgQ1NDX0RfUFJBX0NGR18wX1BSQV9UUlVOQ0FURV9TSElGVCkNCj4g
Kw0KPiArDQo+ICsvLyBSZWdpc3RlciBDU0NfRF9DWUFfMA0KPiArI2RlZmluZSBDU0NfRF9D
WUFfMAkJCV9NS19BRERSX0NPTlNUKDB4NDA2NCkNCj4gKyNkZWZpbmUgQ1NDX0RfQ1lBXzBf
Q1lBX1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDApDQo+ICsjZGVmaW5lIENTQ19EX0NZQV8w
X0NZQV9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweGZmZmZmZmZmLCBDU0NfRF9DWUFfMF9D
WUFfU0hJRlQpDQo+ICsNCj4gKw0KPiArDQo+ICsvLyBUbyBzYXRpc2Z5IHZhcmlvdXMgY29t
cGlsZXJzIGFuZCBwbGF0Zm9ybXMsDQo+ICsvLyB3ZSBsZXQgdXNlcnMgY29udHJvbCB0aGUg
dHlwZXMgYW5kIHN5bnRheCBvZiBjZXJ0YWluIGNvbnN0YW50cywgdXNpbmcgbWFjcm9zLg0K
PiArI2lmbmRlZiBfTUtfU0hJRlRfQ09OU1QNCj4gKyAgI2RlZmluZSBfTUtfU0hJRlRfQ09O
U1QoX2NvbnN0YW50XykgX2NvbnN0YW50Xw0KPiArI2VuZGlmDQo+ICsjaWZuZGVmIF9NS19N
QVNLX0NPTlNUDQo+ICsgICNkZWZpbmUgX01LX01BU0tfQ09OU1QoX2NvbnN0YW50XykgX2Nv
bnN0YW50Xw0KPiArI2VuZGlmDQo+ICsjaWZuZGVmIF9NS19FTlVNX0NPTlNUDQo+ICsgICNk
ZWZpbmUgX01LX0VOVU1fQ09OU1QoX2NvbnN0YW50XykgKF9jb25zdGFudF8gIyMgVUwpDQo+
ICsjZW5kaWYNCj4gKyNpZm5kZWYgX01LX0FERFJfQ09OU1QNCj4gKyAgI2RlZmluZSBfTUtf
QUREUl9DT05TVChfY29uc3RhbnRfKSBfY29uc3RhbnRfDQo+ICsjZW5kaWYNCj4gKyNpZm5k
ZWYgX01LX0ZJRUxEX0NPTlNUDQo+ICsgICNkZWZpbmUgX01LX0ZJRUxEX0NPTlNUKF9tYXNr
XywgX3NoaWZ0XykgKF9NS19NQVNLX0NPTlNUKF9tYXNrXykgPDwgX01LX1NISUZUX0NPTlNU
KF9zaGlmdF8pKQ0KPiArI2VuZGlmDQo+ICsNCj4gKw0KPiArLy8gUmVnaXN0ZXIgQ01BQ19B
X1NfU1RBVFVTXzANCj4gKyNkZWZpbmUgQ01BQ19BX1NfU1RBVFVTXzAJCQlfTUtfQUREUl9D
T05TVCgweDUwMDApDQo+ICsjZGVmaW5lIENNQUNfQV9TX1NUQVRVU18wX1NUQVRVU18wX1NI
SUZUCQkJX01LX1NISUZUX0NPTlNUKDApDQo+ICsjZGVmaW5lIENNQUNfQV9TX1NUQVRVU18w
X1NUQVRVU18wX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4MywgQ01BQ19BX1NfU1RBVFVT
XzBfU1RBVFVTXzBfU0hJRlQpDQo+ICsjZGVmaW5lIENNQUNfQV9TX1NUQVRVU18wX1NUQVRV
U18wX0lETEUJCQlfTUtfRU5VTV9DT05TVCgweDApDQo+ICsjZGVmaW5lIENNQUNfQV9TX1NU
QVRVU18wX1NUQVRVU18wX1JVTk5JTkcJCQlfTUtfRU5VTV9DT05TVCgweDEpDQo+ICsjZGVm
aW5lIENNQUNfQV9TX1NUQVRVU18wX1NUQVRVU18wX1BFTkRJTkcJCQlfTUtfRU5VTV9DT05T
VCgweDIpDQo+ICsjZGVmaW5lIENNQUNfQV9TX1NUQVRVU18wX1NUQVRVU18xX1NISUZUCQkJ
X01LX1NISUZUX0NPTlNUKDE2KQ0KPiArI2RlZmluZSBDTUFDX0FfU19TVEFUVVNfMF9TVEFU
VVNfMV9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweDMsIENNQUNfQV9TX1NUQVRVU18wX1NU
QVRVU18xX1NISUZUKQ0KPiArI2RlZmluZSBDTUFDX0FfU19TVEFUVVNfMF9TVEFUVVNfMV9J
RExFCQkJX01LX0VOVU1fQ09OU1QoMHgwKQ0KPiArI2RlZmluZSBDTUFDX0FfU19TVEFUVVNf
MF9TVEFUVVNfMV9SVU5OSU5HCQkJX01LX0VOVU1fQ09OU1QoMHgxKQ0KPiArI2RlZmluZSBD
TUFDX0FfU19TVEFUVVNfMF9TVEFUVVNfMV9QRU5ESU5HCQkJX01LX0VOVU1fQ09OU1QoMHgy
KQ0KPiArDQo+ICsNCj4gKy8vIFJlZ2lzdGVyIENNQUNfQV9TX1BPSU5URVJfMA0KPiArI2Rl
ZmluZSBDTUFDX0FfU19QT0lOVEVSXzAJCQlfTUtfQUREUl9DT05TVCgweDUwMDQpDQo+ICsj
ZGVmaW5lIENNQUNfQV9TX1BPSU5URVJfMF9QUk9EVUNFUl9TSElGVAkJCV9NS19TSElGVF9D
T05TVCgwKQ0KPiArI2RlZmluZSBDTUFDX0FfU19QT0lOVEVSXzBfUFJPRFVDRVJfRklFTEQJ
CQlfTUtfRklFTERfQ09OU1QoMHgxLCBDTUFDX0FfU19QT0lOVEVSXzBfUFJPRFVDRVJfU0hJ
RlQpDQo+ICsjZGVmaW5lIENNQUNfQV9TX1BPSU5URVJfMF9QUk9EVUNFUl9HUk9VUF8wCQkJ
X01LX0VOVU1fQ09OU1QoMHgwKQ0KPiArI2RlZmluZSBDTUFDX0FfU19QT0lOVEVSXzBfUFJP
RFVDRVJfR1JPVVBfMQkJCV9NS19FTlVNX0NPTlNUKDB4MSkNCj4gKyNkZWZpbmUgQ01BQ19B
X1NfUE9JTlRFUl8wX0NPTlNVTUVSX1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDE2KQ0KPiAr
I2RlZmluZSBDTUFDX0FfU19QT0lOVEVSXzBfQ09OU1VNRVJfRklFTEQJCQlfTUtfRklFTERf
Q09OU1QoMHgxLCBDTUFDX0FfU19QT0lOVEVSXzBfQ09OU1VNRVJfU0hJRlQpDQo+ICsjZGVm
aW5lIENNQUNfQV9TX1BPSU5URVJfMF9DT05TVU1FUl9HUk9VUF8wCQkJX01LX0VOVU1fQ09O
U1QoMHgwKQ0KPiArI2RlZmluZSBDTUFDX0FfU19QT0lOVEVSXzBfQ09OU1VNRVJfR1JPVVBf
MQkJCV9NS19FTlVNX0NPTlNUKDB4MSkNCj4gKw0KPiArDQo+ICsvLyBSZWdpc3RlciBDTUFD
X0FfRF9PUF9FTkFCTEVfMA0KPiArI2RlZmluZSBDTUFDX0FfRF9PUF9FTkFCTEVfMAkJCV9N
S19BRERSX0NPTlNUKDB4NTAwOCkNCj4gKyNkZWZpbmUgQ01BQ19BX0RfT1BfRU5BQkxFXzBf
T1BfRU5fU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMCkNCj4gKyNkZWZpbmUgQ01BQ19BX0Rf
T1BfRU5BQkxFXzBfT1BfRU5fRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHgxLCBDTUFDX0Ff
RF9PUF9FTkFCTEVfMF9PUF9FTl9TSElGVCkNCj4gKyNkZWZpbmUgQ01BQ19BX0RfT1BfRU5B
QkxFXzBfT1BfRU5fRElTQUJMRQkJCV9NS19FTlVNX0NPTlNUKDB4MCkNCj4gKyNkZWZpbmUg
Q01BQ19BX0RfT1BfRU5BQkxFXzBfT1BfRU5fRU5BQkxFCQkJX01LX0VOVU1fQ09OU1QoMHgx
KQ0KPiArDQo+ICsNCj4gKy8vIFJlZ2lzdGVyIENNQUNfQV9EX01JU0NfQ0ZHXzANCj4gKyNk
ZWZpbmUgQ01BQ19BX0RfTUlTQ19DRkdfMAkJCV9NS19BRERSX0NPTlNUKDB4NTAwYykNCj4g
KyNkZWZpbmUgQ01BQ19BX0RfTUlTQ19DRkdfMF9DT05WX01PREVfU0hJRlQJCQlfTUtfU0hJ
RlRfQ09OU1QoMCkNCj4gKyNkZWZpbmUgQ01BQ19BX0RfTUlTQ19DRkdfMF9DT05WX01PREVf
RklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHgxLCBDTUFDX0FfRF9NSVNDX0NGR18wX0NPTlZf
TU9ERV9TSElGVCkNCj4gKyNkZWZpbmUgQ01BQ19BX0RfTUlTQ19DRkdfMF9DT05WX01PREVf
RElSRUNUCQkJX01LX0VOVU1fQ09OU1QoMHgwKQ0KPiArI2RlZmluZSBDTUFDX0FfRF9NSVND
X0NGR18wX0NPTlZfTU9ERV9XSU5PR1JBRAkJCV9NS19FTlVNX0NPTlNUKDB4MSkNCj4gKyNk
ZWZpbmUgQ01BQ19BX0RfTUlTQ19DRkdfMF9QUk9DX1BSRUNJU0lPTl9TSElGVAkJCV9NS19T
SElGVF9DT05TVCgxMikNCj4gKyNkZWZpbmUgQ01BQ19BX0RfTUlTQ19DRkdfMF9QUk9DX1BS
RUNJU0lPTl9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweDMsIENNQUNfQV9EX01JU0NfQ0ZH
XzBfUFJPQ19QUkVDSVNJT05fU0hJRlQpDQo+ICsjZGVmaW5lIENNQUNfQV9EX01JU0NfQ0ZH
XzBfUFJPQ19QUkVDSVNJT05fSU5UOAkJCV9NS19FTlVNX0NPTlNUKDB4MCkNCj4gKyNkZWZp
bmUgQ01BQ19BX0RfTUlTQ19DRkdfMF9QUk9DX1BSRUNJU0lPTl9JTlQxNgkJCV9NS19FTlVN
X0NPTlNUKDB4MSkNCj4gKyNkZWZpbmUgQ01BQ19BX0RfTUlTQ19DRkdfMF9QUk9DX1BSRUNJ
U0lPTl9GUDE2CQkJX01LX0VOVU1fQ09OU1QoMHgyKQ0KPiArDQo+ICsNCj4gKw0KPiArLy8g
VG8gc2F0aXNmeSB2YXJpb3VzIGNvbXBpbGVycyBhbmQgcGxhdGZvcm1zLA0KPiArLy8gd2Ug
bGV0IHVzZXJzIGNvbnRyb2wgdGhlIHR5cGVzIGFuZCBzeW50YXggb2YgY2VydGFpbiBjb25z
dGFudHMsIHVzaW5nIG1hY3Jvcy4NCj4gKyNpZm5kZWYgX01LX1NISUZUX0NPTlNUDQo+ICsg
ICNkZWZpbmUgX01LX1NISUZUX0NPTlNUKF9jb25zdGFudF8pIF9jb25zdGFudF8NCj4gKyNl
bmRpZg0KPiArI2lmbmRlZiBfTUtfTUFTS19DT05TVA0KPiArICAjZGVmaW5lIF9NS19NQVNL
X0NPTlNUKF9jb25zdGFudF8pIF9jb25zdGFudF8NCj4gKyNlbmRpZg0KPiArI2lmbmRlZiBf
TUtfRU5VTV9DT05TVA0KPiArICAjZGVmaW5lIF9NS19FTlVNX0NPTlNUKF9jb25zdGFudF8p
IChfY29uc3RhbnRfICMjIFVMKQ0KPiArI2VuZGlmDQo+ICsjaWZuZGVmIF9NS19BRERSX0NP
TlNUDQo+ICsgICNkZWZpbmUgX01LX0FERFJfQ09OU1QoX2NvbnN0YW50XykgX2NvbnN0YW50
Xw0KPiArI2VuZGlmDQo+ICsjaWZuZGVmIF9NS19GSUVMRF9DT05TVA0KPiArICAjZGVmaW5l
IF9NS19GSUVMRF9DT05TVChfbWFza18sIF9zaGlmdF8pIChfTUtfTUFTS19DT05TVChfbWFz
a18pIDw8IF9NS19TSElGVF9DT05TVChfc2hpZnRfKSkNCj4gKyNlbmRpZg0KPiArDQo+ICsN
Cj4gKy8vIFJlZ2lzdGVyIENNQUNfQl9TX1NUQVRVU18wDQo+ICsjZGVmaW5lIENNQUNfQl9T
X1NUQVRVU18wCQkJX01LX0FERFJfQ09OU1QoMHg2MDAwKQ0KPiArI2RlZmluZSBDTUFDX0Jf
U19TVEFUVVNfMF9TVEFUVVNfMF9TSElGVAkJCV9NS19TSElGVF9DT05TVCgwKQ0KPiArI2Rl
ZmluZSBDTUFDX0JfU19TVEFUVVNfMF9TVEFUVVNfMF9GSUVMRAkJCV9NS19GSUVMRF9DT05T
VCgweDMsIENNQUNfQl9TX1NUQVRVU18wX1NUQVRVU18wX1NISUZUKQ0KPiArI2RlZmluZSBD
TUFDX0JfU19TVEFUVVNfMF9TVEFUVVNfMF9JRExFCQkJX01LX0VOVU1fQ09OU1QoMHgwKQ0K
PiArI2RlZmluZSBDTUFDX0JfU19TVEFUVVNfMF9TVEFUVVNfMF9SVU5OSU5HCQkJX01LX0VO
VU1fQ09OU1QoMHgxKQ0KPiArI2RlZmluZSBDTUFDX0JfU19TVEFUVVNfMF9TVEFUVVNfMF9Q
RU5ESU5HCQkJX01LX0VOVU1fQ09OU1QoMHgyKQ0KPiArI2RlZmluZSBDTUFDX0JfU19TVEFU
VVNfMF9TVEFUVVNfMV9TSElGVAkJCV9NS19TSElGVF9DT05TVCgxNikNCj4gKyNkZWZpbmUg
Q01BQ19CX1NfU1RBVFVTXzBfU1RBVFVTXzFfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHgz
LCBDTUFDX0JfU19TVEFUVVNfMF9TVEFUVVNfMV9TSElGVCkNCj4gKyNkZWZpbmUgQ01BQ19C
X1NfU1RBVFVTXzBfU1RBVFVTXzFfSURMRQkJCV9NS19FTlVNX0NPTlNUKDB4MCkNCj4gKyNk
ZWZpbmUgQ01BQ19CX1NfU1RBVFVTXzBfU1RBVFVTXzFfUlVOTklORwkJCV9NS19FTlVNX0NP
TlNUKDB4MSkNCj4gKyNkZWZpbmUgQ01BQ19CX1NfU1RBVFVTXzBfU1RBVFVTXzFfUEVORElO
RwkJCV9NS19FTlVNX0NPTlNUKDB4MikNCj4gKw0KPiArDQo+ICsvLyBSZWdpc3RlciBDTUFD
X0JfU19QT0lOVEVSXzANCj4gKyNkZWZpbmUgQ01BQ19CX1NfUE9JTlRFUl8wCQkJX01LX0FE
RFJfQ09OU1QoMHg2MDA0KQ0KPiArI2RlZmluZSBDTUFDX0JfU19QT0lOVEVSXzBfUFJPRFVD
RVJfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMCkNCj4gKyNkZWZpbmUgQ01BQ19CX1NfUE9J
TlRFUl8wX1BST0RVQ0VSX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4MSwgQ01BQ19CX1Nf
UE9JTlRFUl8wX1BST0RVQ0VSX1NISUZUKQ0KPiArI2RlZmluZSBDTUFDX0JfU19QT0lOVEVS
XzBfUFJPRFVDRVJfR1JPVVBfMAkJCV9NS19FTlVNX0NPTlNUKDB4MCkNCj4gKyNkZWZpbmUg
Q01BQ19CX1NfUE9JTlRFUl8wX1BST0RVQ0VSX0dST1VQXzEJCQlfTUtfRU5VTV9DT05TVCgw
eDEpDQo+ICsjZGVmaW5lIENNQUNfQl9TX1BPSU5URVJfMF9DT05TVU1FUl9TSElGVAkJCV9N
S19TSElGVF9DT05TVCgxNikNCj4gKyNkZWZpbmUgQ01BQ19CX1NfUE9JTlRFUl8wX0NPTlNV
TUVSX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4MSwgQ01BQ19CX1NfUE9JTlRFUl8wX0NP
TlNVTUVSX1NISUZUKQ0KPiArI2RlZmluZSBDTUFDX0JfU19QT0lOVEVSXzBfQ09OU1VNRVJf
R1JPVVBfMAkJCV9NS19FTlVNX0NPTlNUKDB4MCkNCj4gKyNkZWZpbmUgQ01BQ19CX1NfUE9J
TlRFUl8wX0NPTlNVTUVSX0dST1VQXzEJCQlfTUtfRU5VTV9DT05TVCgweDEpDQo+ICsNCj4g
Kw0KPiArLy8gUmVnaXN0ZXIgQ01BQ19CX0RfT1BfRU5BQkxFXzANCj4gKyNkZWZpbmUgQ01B
Q19CX0RfT1BfRU5BQkxFXzAJCQlfTUtfQUREUl9DT05TVCgweDYwMDgpDQo+ICsjZGVmaW5l
IENNQUNfQl9EX09QX0VOQUJMRV8wX09QX0VOX1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDAp
DQo+ICsjZGVmaW5lIENNQUNfQl9EX09QX0VOQUJMRV8wX09QX0VOX0ZJRUxECQkJX01LX0ZJ
RUxEX0NPTlNUKDB4MSwgQ01BQ19CX0RfT1BfRU5BQkxFXzBfT1BfRU5fU0hJRlQpDQo+ICsj
ZGVmaW5lIENNQUNfQl9EX09QX0VOQUJMRV8wX09QX0VOX0RJU0FCTEUJCQlfTUtfRU5VTV9D
T05TVCgweDApDQo+ICsjZGVmaW5lIENNQUNfQl9EX09QX0VOQUJMRV8wX09QX0VOX0VOQUJM
RQkJCV9NS19FTlVNX0NPTlNUKDB4MSkNCj4gKw0KPiArDQo+ICsvLyBSZWdpc3RlciBDTUFD
X0JfRF9NSVNDX0NGR18wDQo+ICsjZGVmaW5lIENNQUNfQl9EX01JU0NfQ0ZHXzAJCQlfTUtf
QUREUl9DT05TVCgweDYwMGMpDQo+ICsjZGVmaW5lIENNQUNfQl9EX01JU0NfQ0ZHXzBfQ09O
Vl9NT0RFX1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDApDQo+ICsjZGVmaW5lIENNQUNfQl9E
X01JU0NfQ0ZHXzBfQ09OVl9NT0RFX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4MSwgQ01B
Q19CX0RfTUlTQ19DRkdfMF9DT05WX01PREVfU0hJRlQpDQo+ICsjZGVmaW5lIENNQUNfQl9E
X01JU0NfQ0ZHXzBfQ09OVl9NT0RFX0RJUkVDVAkJCV9NS19FTlVNX0NPTlNUKDB4MCkNCj4g
KyNkZWZpbmUgQ01BQ19CX0RfTUlTQ19DRkdfMF9DT05WX01PREVfV0lOT0dSQUQJCQlfTUtf
RU5VTV9DT05TVCgweDEpDQo+ICsjZGVmaW5lIENNQUNfQl9EX01JU0NfQ0ZHXzBfUFJPQ19Q
UkVDSVNJT05fU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMTIpDQo+ICsjZGVmaW5lIENNQUNf
Ql9EX01JU0NfQ0ZHXzBfUFJPQ19QUkVDSVNJT05fRklFTEQJCQlfTUtfRklFTERfQ09OU1Qo
MHgzLCBDTUFDX0JfRF9NSVNDX0NGR18wX1BST0NfUFJFQ0lTSU9OX1NISUZUKQ0KPiArI2Rl
ZmluZSBDTUFDX0JfRF9NSVNDX0NGR18wX1BST0NfUFJFQ0lTSU9OX0lOVDgJCQlfTUtfRU5V
TV9DT05TVCgweDApDQo+ICsjZGVmaW5lIENNQUNfQl9EX01JU0NfQ0ZHXzBfUFJPQ19QUkVD
SVNJT05fSU5UMTYJCQlfTUtfRU5VTV9DT05TVCgweDEpDQo+ICsjZGVmaW5lIENNQUNfQl9E
X01JU0NfQ0ZHXzBfUFJPQ19QUkVDSVNJT05fRlAxNgkJCV9NS19FTlVNX0NPTlNUKDB4MikN
Cj4gKw0KPiArDQo+ICsNCj4gKy8vIFRvIHNhdGlzZnkgdmFyaW91cyBjb21waWxlcnMgYW5k
IHBsYXRmb3JtcywNCj4gKy8vIHdlIGxldCB1c2VycyBjb250cm9sIHRoZSB0eXBlcyBhbmQg
c3ludGF4IG9mIGNlcnRhaW4gY29uc3RhbnRzLCB1c2luZyBtYWNyb3MuDQo+ICsjaWZuZGVm
IF9NS19TSElGVF9DT05TVA0KPiArICAjZGVmaW5lIF9NS19TSElGVF9DT05TVChfY29uc3Rh
bnRfKSBfY29uc3RhbnRfDQo+ICsjZW5kaWYNCj4gKyNpZm5kZWYgX01LX01BU0tfQ09OU1QN
Cj4gKyAgI2RlZmluZSBfTUtfTUFTS19DT05TVChfY29uc3RhbnRfKSBfY29uc3RhbnRfDQo+
ICsjZW5kaWYNCj4gKyNpZm5kZWYgX01LX0VOVU1fQ09OU1QNCj4gKyAgI2RlZmluZSBfTUtf
RU5VTV9DT05TVChfY29uc3RhbnRfKSAoX2NvbnN0YW50XyAjIyBVTCkNCj4gKyNlbmRpZg0K
PiArI2lmbmRlZiBfTUtfQUREUl9DT05TVA0KPiArICAjZGVmaW5lIF9NS19BRERSX0NPTlNU
KF9jb25zdGFudF8pIF9jb25zdGFudF8NCj4gKyNlbmRpZg0KPiArI2lmbmRlZiBfTUtfRklF
TERfQ09OU1QNCj4gKyAgI2RlZmluZSBfTUtfRklFTERfQ09OU1QoX21hc2tfLCBfc2hpZnRf
KSAoX01LX01BU0tfQ09OU1QoX21hc2tfKSA8PCBfTUtfU0hJRlRfQ09OU1QoX3NoaWZ0Xykp
DQo+ICsjZW5kaWYNCj4gKw0KPiArDQo+ICsvLyBSZWdpc3RlciBDQUNDX1NfU1RBVFVTXzAN
Cj4gKyNkZWZpbmUgQ0FDQ19TX1NUQVRVU18wCQkJX01LX0FERFJfQ09OU1QoMHg3MDAwKQ0K
PiArI2RlZmluZSBDQUNDX1NfU1RBVFVTXzBfU1RBVFVTXzBfU0hJRlQJCQlfTUtfU0hJRlRf
Q09OU1QoMCkNCj4gKyNkZWZpbmUgQ0FDQ19TX1NUQVRVU18wX1NUQVRVU18wX0ZJRUxECQkJ
X01LX0ZJRUxEX0NPTlNUKDB4MywgQ0FDQ19TX1NUQVRVU18wX1NUQVRVU18wX1NISUZUKQ0K
PiArI2RlZmluZSBDQUNDX1NfU1RBVFVTXzBfU1RBVFVTXzBfSURMRQkJCV9NS19FTlVNX0NP
TlNUKDB4MCkNCj4gKyNkZWZpbmUgQ0FDQ19TX1NUQVRVU18wX1NUQVRVU18wX1JVTk5JTkcJ
CQlfTUtfRU5VTV9DT05TVCgweDEpDQo+ICsjZGVmaW5lIENBQ0NfU19TVEFUVVNfMF9TVEFU
VVNfMF9QRU5ESU5HCQkJX01LX0VOVU1fQ09OU1QoMHgyKQ0KPiArI2RlZmluZSBDQUNDX1Nf
U1RBVFVTXzBfU1RBVFVTXzFfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMTYpDQo+ICsjZGVm
aW5lIENBQ0NfU19TVEFUVVNfMF9TVEFUVVNfMV9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgw
eDMsIENBQ0NfU19TVEFUVVNfMF9TVEFUVVNfMV9TSElGVCkNCj4gKyNkZWZpbmUgQ0FDQ19T
X1NUQVRVU18wX1NUQVRVU18xX0lETEUJCQlfTUtfRU5VTV9DT05TVCgweDApDQo+ICsjZGVm
aW5lIENBQ0NfU19TVEFUVVNfMF9TVEFUVVNfMV9SVU5OSU5HCQkJX01LX0VOVU1fQ09OU1Qo
MHgxKQ0KPiArI2RlZmluZSBDQUNDX1NfU1RBVFVTXzBfU1RBVFVTXzFfUEVORElORwkJCV9N
S19FTlVNX0NPTlNUKDB4MikNCj4gKw0KPiArDQo+ICsvLyBSZWdpc3RlciBDQUNDX1NfUE9J
TlRFUl8wDQo+ICsjZGVmaW5lIENBQ0NfU19QT0lOVEVSXzAJCQlfTUtfQUREUl9DT05TVCgw
eDcwMDQpDQo+ICsjZGVmaW5lIENBQ0NfU19QT0lOVEVSXzBfUFJPRFVDRVJfU0hJRlQJCQlf
TUtfU0hJRlRfQ09OU1QoMCkNCj4gKyNkZWZpbmUgQ0FDQ19TX1BPSU5URVJfMF9QUk9EVUNF
Ul9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweDEsIENBQ0NfU19QT0lOVEVSXzBfUFJPRFVD
RVJfU0hJRlQpDQo+ICsjZGVmaW5lIENBQ0NfU19QT0lOVEVSXzBfUFJPRFVDRVJfR1JPVVBf
MAkJCV9NS19FTlVNX0NPTlNUKDB4MCkNCj4gKyNkZWZpbmUgQ0FDQ19TX1BPSU5URVJfMF9Q
Uk9EVUNFUl9HUk9VUF8xCQkJX01LX0VOVU1fQ09OU1QoMHgxKQ0KPiArI2RlZmluZSBDQUND
X1NfUE9JTlRFUl8wX0NPTlNVTUVSX1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDE2KQ0KPiAr
I2RlZmluZSBDQUNDX1NfUE9JTlRFUl8wX0NPTlNVTUVSX0ZJRUxECQkJX01LX0ZJRUxEX0NP
TlNUKDB4MSwgQ0FDQ19TX1BPSU5URVJfMF9DT05TVU1FUl9TSElGVCkNCj4gKyNkZWZpbmUg
Q0FDQ19TX1BPSU5URVJfMF9DT05TVU1FUl9HUk9VUF8wCQkJX01LX0VOVU1fQ09OU1QoMHgw
KQ0KPiArI2RlZmluZSBDQUNDX1NfUE9JTlRFUl8wX0NPTlNVTUVSX0dST1VQXzEJCQlfTUtf
RU5VTV9DT05TVCgweDEpDQo+ICsNCj4gKw0KPiArLy8gUmVnaXN0ZXIgQ0FDQ19EX09QX0VO
QUJMRV8wDQo+ICsjZGVmaW5lIENBQ0NfRF9PUF9FTkFCTEVfMAkJCV9NS19BRERSX0NPTlNU
KDB4NzAwOCkNCj4gKyNkZWZpbmUgQ0FDQ19EX09QX0VOQUJMRV8wX09QX0VOX1NISUZUCQkJ
X01LX1NISUZUX0NPTlNUKDApDQo+ICsjZGVmaW5lIENBQ0NfRF9PUF9FTkFCTEVfMF9PUF9F
Tl9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweDEsIENBQ0NfRF9PUF9FTkFCTEVfMF9PUF9F
Tl9TSElGVCkNCj4gKyNkZWZpbmUgQ0FDQ19EX09QX0VOQUJMRV8wX09QX0VOX0RJU0FCTEUJ
CQlfTUtfRU5VTV9DT05TVCgweDApDQo+ICsjZGVmaW5lIENBQ0NfRF9PUF9FTkFCTEVfMF9P
UF9FTl9FTkFCTEUJCQlfTUtfRU5VTV9DT05TVCgweDEpDQo+ICsNCj4gKw0KPiArLy8gUmVn
aXN0ZXIgQ0FDQ19EX01JU0NfQ0ZHXzANCj4gKyNkZWZpbmUgQ0FDQ19EX01JU0NfQ0ZHXzAJ
CQlfTUtfQUREUl9DT05TVCgweDcwMGMpDQo+ICsjZGVmaW5lIENBQ0NfRF9NSVNDX0NGR18w
X0NPTlZfTU9ERV9TSElGVAkJCV9NS19TSElGVF9DT05TVCgwKQ0KPiArI2RlZmluZSBDQUND
X0RfTUlTQ19DRkdfMF9DT05WX01PREVfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHgxLCBD
QUNDX0RfTUlTQ19DRkdfMF9DT05WX01PREVfU0hJRlQpDQo+ICsjZGVmaW5lIENBQ0NfRF9N
SVNDX0NGR18wX0NPTlZfTU9ERV9ESVJFQ1QJCQlfTUtfRU5VTV9DT05TVCgweDApDQo+ICsj
ZGVmaW5lIENBQ0NfRF9NSVNDX0NGR18wX0NPTlZfTU9ERV9XSU5PR1JBRAkJCV9NS19FTlVN
X0NPTlNUKDB4MSkNCj4gKyNkZWZpbmUgQ0FDQ19EX01JU0NfQ0ZHXzBfUFJPQ19QUkVDSVNJ
T05fU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMTIpDQo+ICsjZGVmaW5lIENBQ0NfRF9NSVND
X0NGR18wX1BST0NfUFJFQ0lTSU9OX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4MywgQ0FD
Q19EX01JU0NfQ0ZHXzBfUFJPQ19QUkVDSVNJT05fU0hJRlQpDQo+ICsjZGVmaW5lIENBQ0Nf
RF9NSVNDX0NGR18wX1BST0NfUFJFQ0lTSU9OX0lOVDgJCQlfTUtfRU5VTV9DT05TVCgweDAp
DQo+ICsjZGVmaW5lIENBQ0NfRF9NSVNDX0NGR18wX1BST0NfUFJFQ0lTSU9OX0lOVDE2CQkJ
X01LX0VOVU1fQ09OU1QoMHgxKQ0KPiArI2RlZmluZSBDQUNDX0RfTUlTQ19DRkdfMF9QUk9D
X1BSRUNJU0lPTl9GUDE2CQkJX01LX0VOVU1fQ09OU1QoMHgyKQ0KPiArDQo+ICsNCj4gKy8v
IFJlZ2lzdGVyIENBQ0NfRF9EQVRBT1VUX1NJWkVfMF8wDQo+ICsjZGVmaW5lIENBQ0NfRF9E
QVRBT1VUX1NJWkVfMF8wCQkJX01LX0FERFJfQ09OU1QoMHg3MDEwKQ0KPiArI2RlZmluZSBD
QUNDX0RfREFUQU9VVF9TSVpFXzBfMF9EQVRBT1VUX1dJRFRIX1NISUZUCQkJX01LX1NISUZU
X0NPTlNUKDApDQo+ICsjZGVmaW5lIENBQ0NfRF9EQVRBT1VUX1NJWkVfMF8wX0RBVEFPVVRf
V0lEVEhfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHgxZmZmLCBDQUNDX0RfREFUQU9VVF9T
SVpFXzBfMF9EQVRBT1VUX1dJRFRIX1NISUZUKQ0KPiArI2RlZmluZSBDQUNDX0RfREFUQU9V
VF9TSVpFXzBfMF9EQVRBT1VUX0hFSUdIVF9TSElGVAkJCV9NS19TSElGVF9DT05TVCgxNikN
Cj4gKyNkZWZpbmUgQ0FDQ19EX0RBVEFPVVRfU0laRV8wXzBfREFUQU9VVF9IRUlHSFRfRklF
TEQJCQlfTUtfRklFTERfQ09OU1QoMHgxZmZmLCBDQUNDX0RfREFUQU9VVF9TSVpFXzBfMF9E
QVRBT1VUX0hFSUdIVF9TSElGVCkNCj4gKw0KPiArDQo+ICsvLyBSZWdpc3RlciBDQUNDX0Rf
REFUQU9VVF9TSVpFXzFfMA0KPiArI2RlZmluZSBDQUNDX0RfREFUQU9VVF9TSVpFXzFfMAkJ
CV9NS19BRERSX0NPTlNUKDB4NzAxNCkNCj4gKyNkZWZpbmUgQ0FDQ19EX0RBVEFPVVRfU0la
RV8xXzBfREFUQU9VVF9DSEFOTkVMX1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDApDQo+ICsj
ZGVmaW5lIENBQ0NfRF9EQVRBT1VUX1NJWkVfMV8wX0RBVEFPVVRfQ0hBTk5FTF9GSUVMRAkJ
CV9NS19GSUVMRF9DT05TVCgweDFmZmYsIENBQ0NfRF9EQVRBT1VUX1NJWkVfMV8wX0RBVEFP
VVRfQ0hBTk5FTF9TSElGVCkNCj4gKw0KPiArDQo+ICsvLyBSZWdpc3RlciBDQUNDX0RfREFU
QU9VVF9BRERSXzANCj4gKyNkZWZpbmUgQ0FDQ19EX0RBVEFPVVRfQUREUl8wCQkJX01LX0FE
RFJfQ09OU1QoMHg3MDE4KQ0KPiArI2RlZmluZSBDQUNDX0RfREFUQU9VVF9BRERSXzBfREFU
QU9VVF9BRERSX1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDApDQo+ICsjZGVmaW5lIENBQ0Nf
RF9EQVRBT1VUX0FERFJfMF9EQVRBT1VUX0FERFJfRklFTEQJCQlfTUtfRklFTERfQ09OU1Qo
MHhmZmZmZmZmZiwgQ0FDQ19EX0RBVEFPVVRfQUREUl8wX0RBVEFPVVRfQUREUl9TSElGVCkN
Cj4gKw0KPiArDQo+ICsvLyBSZWdpc3RlciBDQUNDX0RfQkFUQ0hfTlVNQkVSXzANCj4gKyNk
ZWZpbmUgQ0FDQ19EX0JBVENIX05VTUJFUl8wCQkJX01LX0FERFJfQ09OU1QoMHg3MDFjKQ0K
PiArI2RlZmluZSBDQUNDX0RfQkFUQ0hfTlVNQkVSXzBfQkFUQ0hFU19TSElGVAkJCV9NS19T
SElGVF9DT05TVCgwKQ0KPiArI2RlZmluZSBDQUNDX0RfQkFUQ0hfTlVNQkVSXzBfQkFUQ0hF
U19GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweDFmLCBDQUNDX0RfQkFUQ0hfTlVNQkVSXzBf
QkFUQ0hFU19TSElGVCkNCj4gKw0KPiArDQo+ICsvLyBSZWdpc3RlciBDQUNDX0RfTElORV9T
VFJJREVfMA0KPiArI2RlZmluZSBDQUNDX0RfTElORV9TVFJJREVfMAkJCV9NS19BRERSX0NP
TlNUKDB4NzAyMCkNCj4gKyNkZWZpbmUgQ0FDQ19EX0xJTkVfU1RSSURFXzBfTElORV9TVFJJ
REVfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMCkNCj4gKyNkZWZpbmUgQ0FDQ19EX0xJTkVf
U1RSSURFXzBfTElORV9TVFJJREVfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHhmZmZmZmYs
IENBQ0NfRF9MSU5FX1NUUklERV8wX0xJTkVfU1RSSURFX1NISUZUKQ0KPiArDQo+ICsNCj4g
Ky8vIFJlZ2lzdGVyIENBQ0NfRF9TVVJGX1NUUklERV8wDQo+ICsjZGVmaW5lIENBQ0NfRF9T
VVJGX1NUUklERV8wCQkJX01LX0FERFJfQ09OU1QoMHg3MDI0KQ0KPiArI2RlZmluZSBDQUND
X0RfU1VSRl9TVFJJREVfMF9TVVJGX1NUUklERV9TSElGVAkJCV9NS19TSElGVF9DT05TVCgw
KQ0KPiArI2RlZmluZSBDQUNDX0RfU1VSRl9TVFJJREVfMF9TVVJGX1NUUklERV9GSUVMRAkJ
CV9NS19GSUVMRF9DT05TVCgweGZmZmZmZiwgQ0FDQ19EX1NVUkZfU1RSSURFXzBfU1VSRl9T
VFJJREVfU0hJRlQpDQo+ICsNCj4gKw0KPiArLy8gUmVnaXN0ZXIgQ0FDQ19EX0RBVEFPVVRf
TUFQXzANCj4gKyNkZWZpbmUgQ0FDQ19EX0RBVEFPVVRfTUFQXzAJCQlfTUtfQUREUl9DT05T
VCgweDcwMjgpDQo+ICsjZGVmaW5lIENBQ0NfRF9EQVRBT1VUX01BUF8wX0xJTkVfUEFDS0VE
X1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDApDQo+ICsjZGVmaW5lIENBQ0NfRF9EQVRBT1VU
X01BUF8wX0xJTkVfUEFDS0VEX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4MSwgQ0FDQ19E
X0RBVEFPVVRfTUFQXzBfTElORV9QQUNLRURfU0hJRlQpDQo+ICsjZGVmaW5lIENBQ0NfRF9E
QVRBT1VUX01BUF8wX0xJTkVfUEFDS0VEX0ZBTFNFCQkJX01LX0VOVU1fQ09OU1QoMHgwKQ0K
PiArI2RlZmluZSBDQUNDX0RfREFUQU9VVF9NQVBfMF9MSU5FX1BBQ0tFRF9UUlVFCQkJX01L
X0VOVU1fQ09OU1QoMHgxKQ0KPiArI2RlZmluZSBDQUNDX0RfREFUQU9VVF9NQVBfMF9TVVJG
X1BBQ0tFRF9TSElGVAkJCV9NS19TSElGVF9DT05TVCgxNikNCj4gKyNkZWZpbmUgQ0FDQ19E
X0RBVEFPVVRfTUFQXzBfU1VSRl9QQUNLRURfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHgx
LCBDQUNDX0RfREFUQU9VVF9NQVBfMF9TVVJGX1BBQ0tFRF9TSElGVCkNCj4gKyNkZWZpbmUg
Q0FDQ19EX0RBVEFPVVRfTUFQXzBfU1VSRl9QQUNLRURfRkFMU0UJCQlfTUtfRU5VTV9DT05T
VCgweDApDQo+ICsjZGVmaW5lIENBQ0NfRF9EQVRBT1VUX01BUF8wX1NVUkZfUEFDS0VEX1RS
VUUJCQlfTUtfRU5VTV9DT05TVCgweDEpDQo+ICsNCj4gKw0KPiArLy8gUmVnaXN0ZXIgQ0FD
Q19EX0NMSVBfQ0ZHXzANCj4gKyNkZWZpbmUgQ0FDQ19EX0NMSVBfQ0ZHXzAJCQlfTUtfQURE
Ul9DT05TVCgweDcwMmMpDQo+ICsjZGVmaW5lIENBQ0NfRF9DTElQX0NGR18wX0NMSVBfVFJV
TkNBVEVfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMCkNCj4gKyNkZWZpbmUgQ0FDQ19EX0NM
SVBfQ0ZHXzBfQ0xJUF9UUlVOQ0FURV9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweDFmLCBD
QUNDX0RfQ0xJUF9DRkdfMF9DTElQX1RSVU5DQVRFX1NISUZUKQ0KPiArDQo+ICsNCj4gKy8v
IFJlZ2lzdGVyIENBQ0NfRF9PVVRfU0FUVVJBVElPTl8wDQo+ICsjZGVmaW5lIENBQ0NfRF9P
VVRfU0FUVVJBVElPTl8wCQkJX01LX0FERFJfQ09OU1QoMHg3MDMwKQ0KPiArI2RlZmluZSBD
QUNDX0RfT1VUX1NBVFVSQVRJT05fMF9TQVRfQ09VTlRfU0hJRlQJCQlfTUtfU0hJRlRfQ09O
U1QoMCkNCj4gKyNkZWZpbmUgQ0FDQ19EX09VVF9TQVRVUkFUSU9OXzBfU0FUX0NPVU5UX0ZJ
RUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4ZmZmZmZmZmYsIENBQ0NfRF9PVVRfU0FUVVJBVElP
Tl8wX1NBVF9DT1VOVF9TSElGVCkNCj4gKw0KPiArDQo+ICsvLyBSZWdpc3RlciBDQUNDX0Rf
Q1lBXzANCj4gKyNkZWZpbmUgQ0FDQ19EX0NZQV8wCQkJX01LX0FERFJfQ09OU1QoMHg3MDM0
KQ0KPiArI2RlZmluZSBDQUNDX0RfQ1lBXzBfQ1lBX1NISUZUCQkJX01LX1NISUZUX0NPTlNU
KDApDQo+ICsjZGVmaW5lIENBQ0NfRF9DWUFfMF9DWUFfRklFTEQJCQlfTUtfRklFTERfQ09O
U1QoMHhmZmZmZmZmZiwgQ0FDQ19EX0NZQV8wX0NZQV9TSElGVCkNCj4gKw0KPiArDQo+ICsN
Cj4gKy8vIFRvIHNhdGlzZnkgdmFyaW91cyBjb21waWxlcnMgYW5kIHBsYXRmb3JtcywNCj4g
Ky8vIHdlIGxldCB1c2VycyBjb250cm9sIHRoZSB0eXBlcyBhbmQgc3ludGF4IG9mIGNlcnRh
aW4gY29uc3RhbnRzLCB1c2luZyBtYWNyb3MuDQo+ICsjaWZuZGVmIF9NS19TSElGVF9DT05T
VA0KPiArICAjZGVmaW5lIF9NS19TSElGVF9DT05TVChfY29uc3RhbnRfKSBfY29uc3RhbnRf
DQo+ICsjZW5kaWYNCj4gKyNpZm5kZWYgX01LX01BU0tfQ09OU1QNCj4gKyAgI2RlZmluZSBf
TUtfTUFTS19DT05TVChfY29uc3RhbnRfKSBfY29uc3RhbnRfDQo+ICsjZW5kaWYNCj4gKyNp
Zm5kZWYgX01LX0VOVU1fQ09OU1QNCj4gKyAgI2RlZmluZSBfTUtfRU5VTV9DT05TVChfY29u
c3RhbnRfKSAoX2NvbnN0YW50XyAjIyBVTCkNCj4gKyNlbmRpZg0KPiArI2lmbmRlZiBfTUtf
QUREUl9DT05TVA0KPiArICAjZGVmaW5lIF9NS19BRERSX0NPTlNUKF9jb25zdGFudF8pIF9j
b25zdGFudF8NCj4gKyNlbmRpZg0KPiArI2lmbmRlZiBfTUtfRklFTERfQ09OU1QNCj4gKyAg
I2RlZmluZSBfTUtfRklFTERfQ09OU1QoX21hc2tfLCBfc2hpZnRfKSAoX01LX01BU0tfQ09O
U1QoX21hc2tfKSA8PCBfTUtfU0hJRlRfQ09OU1QoX3NoaWZ0XykpDQo+ICsjZW5kaWYNCj4g
Kw0KPiArDQo+ICsvLyBSZWdpc3RlciBTRFBfUkRNQV9TX1NUQVRVU18wDQo+ICsjZGVmaW5l
IFNEUF9SRE1BX1NfU1RBVFVTXzAJCQlfTUtfQUREUl9DT05TVCgweDgwMDApDQo+ICsjZGVm
aW5lIFNEUF9SRE1BX1NfU1RBVFVTXzBfU1RBVFVTXzBfU0hJRlQJCQlfTUtfU0hJRlRfQ09O
U1QoMCkNCj4gKyNkZWZpbmUgU0RQX1JETUFfU19TVEFUVVNfMF9TVEFUVVNfMF9GSUVMRAkJ
CV9NS19GSUVMRF9DT05TVCgweDMsIFNEUF9SRE1BX1NfU1RBVFVTXzBfU1RBVFVTXzBfU0hJ
RlQpDQo+ICsjZGVmaW5lIFNEUF9SRE1BX1NfU1RBVFVTXzBfU1RBVFVTXzBfSURMRQkJCV9N
S19FTlVNX0NPTlNUKDB4MCkNCj4gKyNkZWZpbmUgU0RQX1JETUFfU19TVEFUVVNfMF9TVEFU
VVNfMF9SVU5OSU5HCQkJX01LX0VOVU1fQ09OU1QoMHgxKQ0KPiArI2RlZmluZSBTRFBfUkRN
QV9TX1NUQVRVU18wX1NUQVRVU18wX1BFTkRJTkcJCQlfTUtfRU5VTV9DT05TVCgweDIpDQo+
ICsjZGVmaW5lIFNEUF9SRE1BX1NfU1RBVFVTXzBfU1RBVFVTXzFfU0hJRlQJCQlfTUtfU0hJ
RlRfQ09OU1QoMTYpDQo+ICsjZGVmaW5lIFNEUF9SRE1BX1NfU1RBVFVTXzBfU1RBVFVTXzFf
RklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHgzLCBTRFBfUkRNQV9TX1NUQVRVU18wX1NUQVRV
U18xX1NISUZUKQ0KPiArI2RlZmluZSBTRFBfUkRNQV9TX1NUQVRVU18wX1NUQVRVU18xX0lE
TEUJCQlfTUtfRU5VTV9DT05TVCgweDApDQo+ICsjZGVmaW5lIFNEUF9SRE1BX1NfU1RBVFVT
XzBfU1RBVFVTXzFfUlVOTklORwkJCV9NS19FTlVNX0NPTlNUKDB4MSkNCj4gKyNkZWZpbmUg
U0RQX1JETUFfU19TVEFUVVNfMF9TVEFUVVNfMV9QRU5ESU5HCQkJX01LX0VOVU1fQ09OU1Qo
MHgyKQ0KPiArDQo+ICsNCj4gKy8vIFJlZ2lzdGVyIFNEUF9SRE1BX1NfUE9JTlRFUl8wDQo+
ICsjZGVmaW5lIFNEUF9SRE1BX1NfUE9JTlRFUl8wCQkJX01LX0FERFJfQ09OU1QoMHg4MDA0
KQ0KPiArI2RlZmluZSBTRFBfUkRNQV9TX1BPSU5URVJfMF9QUk9EVUNFUl9TSElGVAkJCV9N
S19TSElGVF9DT05TVCgwKQ0KPiArI2RlZmluZSBTRFBfUkRNQV9TX1BPSU5URVJfMF9QUk9E
VUNFUl9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweDEsIFNEUF9SRE1BX1NfUE9JTlRFUl8w
X1BST0RVQ0VSX1NISUZUKQ0KPiArI2RlZmluZSBTRFBfUkRNQV9TX1BPSU5URVJfMF9QUk9E
VUNFUl9HUk9VUF8wCQkJX01LX0VOVU1fQ09OU1QoMHgwKQ0KPiArI2RlZmluZSBTRFBfUkRN
QV9TX1BPSU5URVJfMF9QUk9EVUNFUl9HUk9VUF8xCQkJX01LX0VOVU1fQ09OU1QoMHgxKQ0K
PiArI2RlZmluZSBTRFBfUkRNQV9TX1BPSU5URVJfMF9DT05TVU1FUl9TSElGVAkJCV9NS19T
SElGVF9DT05TVCgxNikNCj4gKyNkZWZpbmUgU0RQX1JETUFfU19QT0lOVEVSXzBfQ09OU1VN
RVJfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHgxLCBTRFBfUkRNQV9TX1BPSU5URVJfMF9D
T05TVU1FUl9TSElGVCkNCj4gKyNkZWZpbmUgU0RQX1JETUFfU19QT0lOVEVSXzBfQ09OU1VN
RVJfR1JPVVBfMAkJCV9NS19FTlVNX0NPTlNUKDB4MCkNCj4gKyNkZWZpbmUgU0RQX1JETUFf
U19QT0lOVEVSXzBfQ09OU1VNRVJfR1JPVVBfMQkJCV9NS19FTlVNX0NPTlNUKDB4MSkNCj4g
Kw0KPiArDQo+ICsvLyBSZWdpc3RlciBTRFBfUkRNQV9EX09QX0VOQUJMRV8wDQo+ICsjZGVm
aW5lIFNEUF9SRE1BX0RfT1BfRU5BQkxFXzAJCQlfTUtfQUREUl9DT05TVCgweDgwMDgpDQo+
ICsjZGVmaW5lIFNEUF9SRE1BX0RfT1BfRU5BQkxFXzBfT1BfRU5fU0hJRlQJCQlfTUtfU0hJ
RlRfQ09OU1QoMCkNCj4gKyNkZWZpbmUgU0RQX1JETUFfRF9PUF9FTkFCTEVfMF9PUF9FTl9G
SUVMRAkJCV9NS19GSUVMRF9DT05TVCgweDEsIFNEUF9SRE1BX0RfT1BfRU5BQkxFXzBfT1Bf
RU5fU0hJRlQpDQo+ICsjZGVmaW5lIFNEUF9SRE1BX0RfT1BfRU5BQkxFXzBfT1BfRU5fRElT
QUJMRQkJCV9NS19FTlVNX0NPTlNUKDB4MCkNCj4gKyNkZWZpbmUgU0RQX1JETUFfRF9PUF9F
TkFCTEVfMF9PUF9FTl9FTkFCTEUJCQlfTUtfRU5VTV9DT05TVCgweDEpDQo+ICsNCj4gKw0K
PiArLy8gUmVnaXN0ZXIgU0RQX1JETUFfRF9EQVRBX0NVQkVfV0lEVEhfMA0KPiArI2RlZmlu
ZSBTRFBfUkRNQV9EX0RBVEFfQ1VCRV9XSURUSF8wCQkJX01LX0FERFJfQ09OU1QoMHg4MDBj
KQ0KPiArI2RlZmluZSBTRFBfUkRNQV9EX0RBVEFfQ1VCRV9XSURUSF8wX1dJRFRIX1NISUZU
CQkJX01LX1NISUZUX0NPTlNUKDApDQo+ICsjZGVmaW5lIFNEUF9SRE1BX0RfREFUQV9DVUJF
X1dJRFRIXzBfV0lEVEhfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHgxZmZmLCBTRFBfUkRN
QV9EX0RBVEFfQ1VCRV9XSURUSF8wX1dJRFRIX1NISUZUKQ0KPiArDQo+ICsNCj4gKy8vIFJl
Z2lzdGVyIFNEUF9SRE1BX0RfREFUQV9DVUJFX0hFSUdIVF8wDQo+ICsjZGVmaW5lIFNEUF9S
RE1BX0RfREFUQV9DVUJFX0hFSUdIVF8wCQkJX01LX0FERFJfQ09OU1QoMHg4MDEwKQ0KPiAr
I2RlZmluZSBTRFBfUkRNQV9EX0RBVEFfQ1VCRV9IRUlHSFRfMF9IRUlHSFRfU0hJRlQJCQlf
TUtfU0hJRlRfQ09OU1QoMCkNCj4gKyNkZWZpbmUgU0RQX1JETUFfRF9EQVRBX0NVQkVfSEVJ
R0hUXzBfSEVJR0hUX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4MWZmZiwgU0RQX1JETUFf
RF9EQVRBX0NVQkVfSEVJR0hUXzBfSEVJR0hUX1NISUZUKQ0KPiArDQo+ICsNCj4gKy8vIFJl
Z2lzdGVyIFNEUF9SRE1BX0RfREFUQV9DVUJFX0NIQU5ORUxfMA0KPiArI2RlZmluZSBTRFBf
UkRNQV9EX0RBVEFfQ1VCRV9DSEFOTkVMXzAJCQlfTUtfQUREUl9DT05TVCgweDgwMTQpDQo+
ICsjZGVmaW5lIFNEUF9SRE1BX0RfREFUQV9DVUJFX0NIQU5ORUxfMF9DSEFOTkVMX1NISUZU
CQkJX01LX1NISUZUX0NPTlNUKDApDQo+ICsjZGVmaW5lIFNEUF9SRE1BX0RfREFUQV9DVUJF
X0NIQU5ORUxfMF9DSEFOTkVMX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4MWZmZiwgU0RQ
X1JETUFfRF9EQVRBX0NVQkVfQ0hBTk5FTF8wX0NIQU5ORUxfU0hJRlQpDQo+ICsNCj4gKw0K
PiArLy8gUmVnaXN0ZXIgU0RQX1JETUFfRF9TUkNfQkFTRV9BRERSX0xPV18wDQo+ICsjZGVm
aW5lIFNEUF9SRE1BX0RfU1JDX0JBU0VfQUREUl9MT1dfMAkJCV9NS19BRERSX0NPTlNUKDB4
ODAxOCkNCj4gKyNkZWZpbmUgU0RQX1JETUFfRF9TUkNfQkFTRV9BRERSX0xPV18wX1NSQ19C
QVNFX0FERFJfTE9XX1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDApDQo+ICsjZGVmaW5lIFNE
UF9SRE1BX0RfU1JDX0JBU0VfQUREUl9MT1dfMF9TUkNfQkFTRV9BRERSX0xPV19GSUVMRAkJ
CV9NS19GSUVMRF9DT05TVCgweGZmZmZmZmZmLCBTRFBfUkRNQV9EX1NSQ19CQVNFX0FERFJf
TE9XXzBfU1JDX0JBU0VfQUREUl9MT1dfU0hJRlQpDQo+ICsNCj4gKw0KPiArLy8gUmVnaXN0
ZXIgU0RQX1JETUFfRF9TUkNfQkFTRV9BRERSX0hJR0hfMA0KPiArI2RlZmluZSBTRFBfUkRN
QV9EX1NSQ19CQVNFX0FERFJfSElHSF8wCQkJX01LX0FERFJfQ09OU1QoMHg4MDFjKQ0KPiAr
I2RlZmluZSBTRFBfUkRNQV9EX1NSQ19CQVNFX0FERFJfSElHSF8wX1NSQ19CQVNFX0FERFJf
SElHSF9TSElGVAkJCV9NS19TSElGVF9DT05TVCgwKQ0KPiArI2RlZmluZSBTRFBfUkRNQV9E
X1NSQ19CQVNFX0FERFJfSElHSF8wX1NSQ19CQVNFX0FERFJfSElHSF9GSUVMRAkJCV9NS19G
SUVMRF9DT05TVCgweGZmZmZmZmZmLCBTRFBfUkRNQV9EX1NSQ19CQVNFX0FERFJfSElHSF8w
X1NSQ19CQVNFX0FERFJfSElHSF9TSElGVCkNCj4gKw0KPiArDQo+ICsvLyBSZWdpc3RlciBT
RFBfUkRNQV9EX1NSQ19MSU5FX1NUUklERV8wDQo+ICsjZGVmaW5lIFNEUF9SRE1BX0RfU1JD
X0xJTkVfU1RSSURFXzAJCQlfTUtfQUREUl9DT05TVCgweDgwMjApDQo+ICsjZGVmaW5lIFNE
UF9SRE1BX0RfU1JDX0xJTkVfU1RSSURFXzBfU1JDX0xJTkVfU1RSSURFX1NISUZUCQkJX01L
X1NISUZUX0NPTlNUKDApDQo+ICsjZGVmaW5lIFNEUF9SRE1BX0RfU1JDX0xJTkVfU1RSSURF
XzBfU1JDX0xJTkVfU1RSSURFX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4ZmZmZmZmZmYs
IFNEUF9SRE1BX0RfU1JDX0xJTkVfU1RSSURFXzBfU1JDX0xJTkVfU1RSSURFX1NISUZUKQ0K
PiArDQo+ICsNCj4gKy8vIFJlZ2lzdGVyIFNEUF9SRE1BX0RfU1JDX1NVUkZBQ0VfU1RSSURF
XzANCj4gKyNkZWZpbmUgU0RQX1JETUFfRF9TUkNfU1VSRkFDRV9TVFJJREVfMAkJCV9NS19B
RERSX0NPTlNUKDB4ODAyNCkNCj4gKyNkZWZpbmUgU0RQX1JETUFfRF9TUkNfU1VSRkFDRV9T
VFJJREVfMF9TUkNfU1VSRkFDRV9TVFJJREVfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMCkN
Cj4gKyNkZWZpbmUgU0RQX1JETUFfRF9TUkNfU1VSRkFDRV9TVFJJREVfMF9TUkNfU1VSRkFD
RV9TVFJJREVfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHhmZmZmZmZmZiwgU0RQX1JETUFf
RF9TUkNfU1VSRkFDRV9TVFJJREVfMF9TUkNfU1VSRkFDRV9TVFJJREVfU0hJRlQpDQo+ICsN
Cj4gKw0KPiArLy8gUmVnaXN0ZXIgU0RQX1JETUFfRF9CUkRNQV9DRkdfMA0KPiArI2RlZmlu
ZSBTRFBfUkRNQV9EX0JSRE1BX0NGR18wCQkJX01LX0FERFJfQ09OU1QoMHg4MDI4KQ0KPiAr
I2RlZmluZSBTRFBfUkRNQV9EX0JSRE1BX0NGR18wX0JSRE1BX0RJU0FCTEVfU0hJRlQJCQlf
TUtfU0hJRlRfQ09OU1QoMCkNCj4gKyNkZWZpbmUgU0RQX1JETUFfRF9CUkRNQV9DRkdfMF9C
UkRNQV9ESVNBQkxFX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4MSwgU0RQX1JETUFfRF9C
UkRNQV9DRkdfMF9CUkRNQV9ESVNBQkxFX1NISUZUKQ0KPiArI2RlZmluZSBTRFBfUkRNQV9E
X0JSRE1BX0NGR18wX0JSRE1BX0RJU0FCTEVfTk8JCQlfTUtfRU5VTV9DT05TVCgweDApDQo+
ICsjZGVmaW5lIFNEUF9SRE1BX0RfQlJETUFfQ0ZHXzBfQlJETUFfRElTQUJMRV9ZRVMJCQlf
TUtfRU5VTV9DT05TVCgweDEpDQo+ICsjZGVmaW5lIFNEUF9SRE1BX0RfQlJETUFfQ0ZHXzBf
QlJETUFfREFUQV9VU0VfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMSkNCj4gKyNkZWZpbmUg
U0RQX1JETUFfRF9CUkRNQV9DRkdfMF9CUkRNQV9EQVRBX1VTRV9GSUVMRAkJCV9NS19GSUVM
RF9DT05TVCgweDMsIFNEUF9SRE1BX0RfQlJETUFfQ0ZHXzBfQlJETUFfREFUQV9VU0VfU0hJ
RlQpDQo+ICsjZGVmaW5lIFNEUF9SRE1BX0RfQlJETUFfQ0ZHXzBfQlJETUFfREFUQV9VU0Vf
TVVMCQkJX01LX0VOVU1fQ09OU1QoMHgwKQ0KPiArI2RlZmluZSBTRFBfUkRNQV9EX0JSRE1B
X0NGR18wX0JSRE1BX0RBVEFfVVNFX0FMVQkJCV9NS19FTlVNX0NPTlNUKDB4MSkNCj4gKyNk
ZWZpbmUgU0RQX1JETUFfRF9CUkRNQV9DRkdfMF9CUkRNQV9EQVRBX1VTRV9CT1RICQkJX01L
X0VOVU1fQ09OU1QoMHgyKQ0KPiArI2RlZmluZSBTRFBfUkRNQV9EX0JSRE1BX0NGR18wX0JS
RE1BX0RBVEFfU0laRV9TSElGVAkJCV9NS19TSElGVF9DT05TVCgzKQ0KPiArI2RlZmluZSBT
RFBfUkRNQV9EX0JSRE1BX0NGR18wX0JSRE1BX0RBVEFfU0laRV9GSUVMRAkJCV9NS19GSUVM
RF9DT05TVCgweDEsIFNEUF9SRE1BX0RfQlJETUFfQ0ZHXzBfQlJETUFfREFUQV9TSVpFX1NI
SUZUKQ0KPiArI2RlZmluZSBTRFBfUkRNQV9EX0JSRE1BX0NGR18wX0JSRE1BX0RBVEFfU0la
RV9PTkVfQllURQkJCV9NS19FTlVNX0NPTlNUKDB4MCkNCj4gKyNkZWZpbmUgU0RQX1JETUFf
RF9CUkRNQV9DRkdfMF9CUkRNQV9EQVRBX1NJWkVfVFdPX0JZVEUJCQlfTUtfRU5VTV9DT05T
VCgweDEpDQo+ICsjZGVmaW5lIFNEUF9SRE1BX0RfQlJETUFfQ0ZHXzBfQlJETUFfREFUQV9N
T0RFX1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDQpDQo+ICsjZGVmaW5lIFNEUF9SRE1BX0Rf
QlJETUFfQ0ZHXzBfQlJETUFfREFUQV9NT0RFX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4
MSwgU0RQX1JETUFfRF9CUkRNQV9DRkdfMF9CUkRNQV9EQVRBX01PREVfU0hJRlQpDQo+ICsj
ZGVmaW5lIFNEUF9SRE1BX0RfQlJETUFfQ0ZHXzBfQlJETUFfREFUQV9NT0RFX1BFUl9LRVJO
RUwJCQlfTUtfRU5VTV9DT05TVCgweDApDQo+ICsjZGVmaW5lIFNEUF9SRE1BX0RfQlJETUFf
Q0ZHXzBfQlJETUFfREFUQV9NT0RFX1BFUl9FTEVNRU5UCQkJX01LX0VOVU1fQ09OU1QoMHgx
KQ0KPiArI2RlZmluZSBTRFBfUkRNQV9EX0JSRE1BX0NGR18wX0JSRE1BX1JBTV9UWVBFX1NI
SUZUCQkJX01LX1NISUZUX0NPTlNUKDUpDQo+ICsjZGVmaW5lIFNEUF9SRE1BX0RfQlJETUFf
Q0ZHXzBfQlJETUFfUkFNX1RZUEVfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHgxLCBTRFBf
UkRNQV9EX0JSRE1BX0NGR18wX0JSRE1BX1JBTV9UWVBFX1NISUZUKQ0KPiArI2RlZmluZSBT
RFBfUkRNQV9EX0JSRE1BX0NGR18wX0JSRE1BX1JBTV9UWVBFX0NWCQkJX01LX0VOVU1fQ09O
U1QoMHgwKQ0KPiArI2RlZmluZSBTRFBfUkRNQV9EX0JSRE1BX0NGR18wX0JSRE1BX1JBTV9U
WVBFX01DCQkJX01LX0VOVU1fQ09OU1QoMHgxKQ0KPiArDQo+ICsNCj4gKy8vIFJlZ2lzdGVy
IFNEUF9SRE1BX0RfQlNfQkFTRV9BRERSX0xPV18wDQo+ICsjZGVmaW5lIFNEUF9SRE1BX0Rf
QlNfQkFTRV9BRERSX0xPV18wCQkJX01LX0FERFJfQ09OU1QoMHg4MDJjKQ0KPiArI2RlZmlu
ZSBTRFBfUkRNQV9EX0JTX0JBU0VfQUREUl9MT1dfMF9CU19CQVNFX0FERFJfTE9XX1NISUZU
CQkJX01LX1NISUZUX0NPTlNUKDApDQo+ICsjZGVmaW5lIFNEUF9SRE1BX0RfQlNfQkFTRV9B
RERSX0xPV18wX0JTX0JBU0VfQUREUl9MT1dfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHhm
ZmZmZmZmZiwgU0RQX1JETUFfRF9CU19CQVNFX0FERFJfTE9XXzBfQlNfQkFTRV9BRERSX0xP
V19TSElGVCkNCj4gKw0KPiArDQo+ICsvLyBSZWdpc3RlciBTRFBfUkRNQV9EX0JTX0JBU0Vf
QUREUl9ISUdIXzANCj4gKyNkZWZpbmUgU0RQX1JETUFfRF9CU19CQVNFX0FERFJfSElHSF8w
CQkJX01LX0FERFJfQ09OU1QoMHg4MDMwKQ0KPiArI2RlZmluZSBTRFBfUkRNQV9EX0JTX0JB
U0VfQUREUl9ISUdIXzBfQlNfQkFTRV9BRERSX0hJR0hfU0hJRlQJCQlfTUtfU0hJRlRfQ09O
U1QoMCkNCj4gKyNkZWZpbmUgU0RQX1JETUFfRF9CU19CQVNFX0FERFJfSElHSF8wX0JTX0JB
U0VfQUREUl9ISUdIX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4ZmZmZmZmZmYsIFNEUF9S
RE1BX0RfQlNfQkFTRV9BRERSX0hJR0hfMF9CU19CQVNFX0FERFJfSElHSF9TSElGVCkNCj4g
Kw0KPiArDQo+ICsvLyBSZWdpc3RlciBTRFBfUkRNQV9EX0JTX0xJTkVfU1RSSURFXzANCj4g
KyNkZWZpbmUgU0RQX1JETUFfRF9CU19MSU5FX1NUUklERV8wCQkJX01LX0FERFJfQ09OU1Qo
MHg4MDM0KQ0KPiArI2RlZmluZSBTRFBfUkRNQV9EX0JTX0xJTkVfU1RSSURFXzBfQlNfTElO
RV9TVFJJREVfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMCkNCj4gKyNkZWZpbmUgU0RQX1JE
TUFfRF9CU19MSU5FX1NUUklERV8wX0JTX0xJTkVfU1RSSURFX0ZJRUxECQkJX01LX0ZJRUxE
X0NPTlNUKDB4ZmZmZmZmZmYsIFNEUF9SRE1BX0RfQlNfTElORV9TVFJJREVfMF9CU19MSU5F
X1NUUklERV9TSElGVCkNCj4gKw0KPiArDQo+ICsvLyBSZWdpc3RlciBTRFBfUkRNQV9EX0JT
X1NVUkZBQ0VfU1RSSURFXzANCj4gKyNkZWZpbmUgU0RQX1JETUFfRF9CU19TVVJGQUNFX1NU
UklERV8wCQkJX01LX0FERFJfQ09OU1QoMHg4MDM4KQ0KPiArI2RlZmluZSBTRFBfUkRNQV9E
X0JTX1NVUkZBQ0VfU1RSSURFXzBfQlNfU1VSRkFDRV9TVFJJREVfU0hJRlQJCQlfTUtfU0hJ
RlRfQ09OU1QoMCkNCj4gKyNkZWZpbmUgU0RQX1JETUFfRF9CU19TVVJGQUNFX1NUUklERV8w
X0JTX1NVUkZBQ0VfU1RSSURFX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4ZmZmZmZmZmYs
IFNEUF9SRE1BX0RfQlNfU1VSRkFDRV9TVFJJREVfMF9CU19TVVJGQUNFX1NUUklERV9TSElG
VCkNCj4gKw0KPiArDQo+ICsvLyBSZWdpc3RlciBTRFBfUkRNQV9EX0JTX0JBVENIX1NUUklE
RV8wDQo+ICsjZGVmaW5lIFNEUF9SRE1BX0RfQlNfQkFUQ0hfU1RSSURFXzAJCQlfTUtfQURE
Ul9DT05TVCgweDgwM2MpDQo+ICsjZGVmaW5lIFNEUF9SRE1BX0RfQlNfQkFUQ0hfU1RSSURF
XzBfQlNfQkFUQ0hfU1RSSURFX1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDApDQo+ICsjZGVm
aW5lIFNEUF9SRE1BX0RfQlNfQkFUQ0hfU1RSSURFXzBfQlNfQkFUQ0hfU1RSSURFX0ZJRUxE
CQkJX01LX0ZJRUxEX0NPTlNUKDB4ZmZmZmZmZmYsIFNEUF9SRE1BX0RfQlNfQkFUQ0hfU1RS
SURFXzBfQlNfQkFUQ0hfU1RSSURFX1NISUZUKQ0KPiArDQo+ICsNCj4gKy8vIFJlZ2lzdGVy
IFNEUF9SRE1BX0RfTlJETUFfQ0ZHXzANCj4gKyNkZWZpbmUgU0RQX1JETUFfRF9OUkRNQV9D
RkdfMAkJCV9NS19BRERSX0NPTlNUKDB4ODA0MCkNCj4gKyNkZWZpbmUgU0RQX1JETUFfRF9O
UkRNQV9DRkdfMF9OUkRNQV9ESVNBQkxFX1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDApDQo+
ICsjZGVmaW5lIFNEUF9SRE1BX0RfTlJETUFfQ0ZHXzBfTlJETUFfRElTQUJMRV9GSUVMRAkJ
CV9NS19GSUVMRF9DT05TVCgweDEsIFNEUF9SRE1BX0RfTlJETUFfQ0ZHXzBfTlJETUFfRElT
QUJMRV9TSElGVCkNCj4gKyNkZWZpbmUgU0RQX1JETUFfRF9OUkRNQV9DRkdfMF9OUkRNQV9E
SVNBQkxFX05PCQkJX01LX0VOVU1fQ09OU1QoMHgwKQ0KPiArI2RlZmluZSBTRFBfUkRNQV9E
X05SRE1BX0NGR18wX05SRE1BX0RJU0FCTEVfWUVTCQkJX01LX0VOVU1fQ09OU1QoMHgxKQ0K
PiArI2RlZmluZSBTRFBfUkRNQV9EX05SRE1BX0NGR18wX05SRE1BX0RBVEFfVVNFX1NISUZU
CQkJX01LX1NISUZUX0NPTlNUKDEpDQo+ICsjZGVmaW5lIFNEUF9SRE1BX0RfTlJETUFfQ0ZH
XzBfTlJETUFfREFUQV9VU0VfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHgzLCBTRFBfUkRN
QV9EX05SRE1BX0NGR18wX05SRE1BX0RBVEFfVVNFX1NISUZUKQ0KPiArI2RlZmluZSBTRFBf
UkRNQV9EX05SRE1BX0NGR18wX05SRE1BX0RBVEFfVVNFX01VTAkJCV9NS19FTlVNX0NPTlNU
KDB4MCkNCj4gKyNkZWZpbmUgU0RQX1JETUFfRF9OUkRNQV9DRkdfMF9OUkRNQV9EQVRBX1VT
RV9BTFUJCQlfTUtfRU5VTV9DT05TVCgweDEpDQo+ICsjZGVmaW5lIFNEUF9SRE1BX0RfTlJE
TUFfQ0ZHXzBfTlJETUFfREFUQV9VU0VfQk9USAkJCV9NS19FTlVNX0NPTlNUKDB4MikNCj4g
KyNkZWZpbmUgU0RQX1JETUFfRF9OUkRNQV9DRkdfMF9OUkRNQV9EQVRBX1NJWkVfU0hJRlQJ
CQlfTUtfU0hJRlRfQ09OU1QoMykNCj4gKyNkZWZpbmUgU0RQX1JETUFfRF9OUkRNQV9DRkdf
MF9OUkRNQV9EQVRBX1NJWkVfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHgxLCBTRFBfUkRN
QV9EX05SRE1BX0NGR18wX05SRE1BX0RBVEFfU0laRV9TSElGVCkNCj4gKyNkZWZpbmUgU0RQ
X1JETUFfRF9OUkRNQV9DRkdfMF9OUkRNQV9EQVRBX1NJWkVfT05FX0JZVEUJCQlfTUtfRU5V
TV9DT05TVCgweDApDQo+ICsjZGVmaW5lIFNEUF9SRE1BX0RfTlJETUFfQ0ZHXzBfTlJETUFf
REFUQV9TSVpFX1RXT19CWVRFCQkJX01LX0VOVU1fQ09OU1QoMHgxKQ0KPiArI2RlZmluZSBT
RFBfUkRNQV9EX05SRE1BX0NGR18wX05SRE1BX0RBVEFfTU9ERV9TSElGVAkJCV9NS19TSElG
VF9DT05TVCg0KQ0KPiArI2RlZmluZSBTRFBfUkRNQV9EX05SRE1BX0NGR18wX05SRE1BX0RB
VEFfTU9ERV9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweDEsIFNEUF9SRE1BX0RfTlJETUFf
Q0ZHXzBfTlJETUFfREFUQV9NT0RFX1NISUZUKQ0KPiArI2RlZmluZSBTRFBfUkRNQV9EX05S
RE1BX0NGR18wX05SRE1BX0RBVEFfTU9ERV9QRVJfS0VSTkVMCQkJX01LX0VOVU1fQ09OU1Qo
MHgwKQ0KPiArI2RlZmluZSBTRFBfUkRNQV9EX05SRE1BX0NGR18wX05SRE1BX0RBVEFfTU9E
RV9QRVJfRUxFTUVOVAkJCV9NS19FTlVNX0NPTlNUKDB4MSkNCj4gKyNkZWZpbmUgU0RQX1JE
TUFfRF9OUkRNQV9DRkdfMF9OUkRNQV9SQU1fVFlQRV9TSElGVAkJCV9NS19TSElGVF9DT05T
VCg1KQ0KPiArI2RlZmluZSBTRFBfUkRNQV9EX05SRE1BX0NGR18wX05SRE1BX1JBTV9UWVBF
X0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4MSwgU0RQX1JETUFfRF9OUkRNQV9DRkdfMF9O
UkRNQV9SQU1fVFlQRV9TSElGVCkNCj4gKyNkZWZpbmUgU0RQX1JETUFfRF9OUkRNQV9DRkdf
MF9OUkRNQV9SQU1fVFlQRV9DVgkJCV9NS19FTlVNX0NPTlNUKDB4MCkNCj4gKyNkZWZpbmUg
U0RQX1JETUFfRF9OUkRNQV9DRkdfMF9OUkRNQV9SQU1fVFlQRV9NQwkJCV9NS19FTlVNX0NP
TlNUKDB4MSkNCj4gKw0KPiArDQo+ICsvLyBSZWdpc3RlciBTRFBfUkRNQV9EX0JOX0JBU0Vf
QUREUl9MT1dfMA0KPiArI2RlZmluZSBTRFBfUkRNQV9EX0JOX0JBU0VfQUREUl9MT1dfMAkJ
CV9NS19BRERSX0NPTlNUKDB4ODA0NCkNCj4gKyNkZWZpbmUgU0RQX1JETUFfRF9CTl9CQVNF
X0FERFJfTE9XXzBfQk5fQkFTRV9BRERSX0xPV19TSElGVAkJCV9NS19TSElGVF9DT05TVCgw
KQ0KPiArI2RlZmluZSBTRFBfUkRNQV9EX0JOX0JBU0VfQUREUl9MT1dfMF9CTl9CQVNFX0FE
RFJfTE9XX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4ZmZmZmZmZmYsIFNEUF9SRE1BX0Rf
Qk5fQkFTRV9BRERSX0xPV18wX0JOX0JBU0VfQUREUl9MT1dfU0hJRlQpDQo+ICsNCj4gKw0K
PiArLy8gUmVnaXN0ZXIgU0RQX1JETUFfRF9CTl9CQVNFX0FERFJfSElHSF8wDQo+ICsjZGVm
aW5lIFNEUF9SRE1BX0RfQk5fQkFTRV9BRERSX0hJR0hfMAkJCV9NS19BRERSX0NPTlNUKDB4
ODA0OCkNCj4gKyNkZWZpbmUgU0RQX1JETUFfRF9CTl9CQVNFX0FERFJfSElHSF8wX0JOX0JB
U0VfQUREUl9ISUdIX1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDApDQo+ICsjZGVmaW5lIFNE
UF9SRE1BX0RfQk5fQkFTRV9BRERSX0hJR0hfMF9CTl9CQVNFX0FERFJfSElHSF9GSUVMRAkJ
CV9NS19GSUVMRF9DT05TVCgweGZmZmZmZmZmLCBTRFBfUkRNQV9EX0JOX0JBU0VfQUREUl9I
SUdIXzBfQk5fQkFTRV9BRERSX0hJR0hfU0hJRlQpDQo+ICsNCj4gKw0KPiArLy8gUmVnaXN0
ZXIgU0RQX1JETUFfRF9CTl9MSU5FX1NUUklERV8wDQo+ICsjZGVmaW5lIFNEUF9SRE1BX0Rf
Qk5fTElORV9TVFJJREVfMAkJCV9NS19BRERSX0NPTlNUKDB4ODA0YykNCj4gKyNkZWZpbmUg
U0RQX1JETUFfRF9CTl9MSU5FX1NUUklERV8wX0JOX0xJTkVfU1RSSURFX1NISUZUCQkJX01L
X1NISUZUX0NPTlNUKDApDQo+ICsjZGVmaW5lIFNEUF9SRE1BX0RfQk5fTElORV9TVFJJREVf
MF9CTl9MSU5FX1NUUklERV9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweGZmZmZmZmZmLCBT
RFBfUkRNQV9EX0JOX0xJTkVfU1RSSURFXzBfQk5fTElORV9TVFJJREVfU0hJRlQpDQo+ICsN
Cj4gKw0KPiArLy8gUmVnaXN0ZXIgU0RQX1JETUFfRF9CTl9TVVJGQUNFX1NUUklERV8wDQo+
ICsjZGVmaW5lIFNEUF9SRE1BX0RfQk5fU1VSRkFDRV9TVFJJREVfMAkJCV9NS19BRERSX0NP
TlNUKDB4ODA1MCkNCj4gKyNkZWZpbmUgU0RQX1JETUFfRF9CTl9TVVJGQUNFX1NUUklERV8w
X0JOX1NVUkZBQ0VfU1RSSURFX1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDApDQo+ICsjZGVm
aW5lIFNEUF9SRE1BX0RfQk5fU1VSRkFDRV9TVFJJREVfMF9CTl9TVVJGQUNFX1NUUklERV9G
SUVMRAkJCV9NS19GSUVMRF9DT05TVCgweGZmZmZmZmZmLCBTRFBfUkRNQV9EX0JOX1NVUkZB
Q0VfU1RSSURFXzBfQk5fU1VSRkFDRV9TVFJJREVfU0hJRlQpDQo+ICsNCj4gKw0KPiArLy8g
UmVnaXN0ZXIgU0RQX1JETUFfRF9CTl9CQVRDSF9TVFJJREVfMA0KPiArI2RlZmluZSBTRFBf
UkRNQV9EX0JOX0JBVENIX1NUUklERV8wCQkJX01LX0FERFJfQ09OU1QoMHg4MDU0KQ0KPiAr
I2RlZmluZSBTRFBfUkRNQV9EX0JOX0JBVENIX1NUUklERV8wX0JOX0JBVENIX1NUUklERV9T
SElGVAkJCV9NS19TSElGVF9DT05TVCgwKQ0KPiArI2RlZmluZSBTRFBfUkRNQV9EX0JOX0JB
VENIX1NUUklERV8wX0JOX0JBVENIX1NUUklERV9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgw
eGZmZmZmZmZmLCBTRFBfUkRNQV9EX0JOX0JBVENIX1NUUklERV8wX0JOX0JBVENIX1NUUklE
RV9TSElGVCkNCj4gKw0KPiArDQo+ICsvLyBSZWdpc3RlciBTRFBfUkRNQV9EX0VSRE1BX0NG
R18wDQo+ICsjZGVmaW5lIFNEUF9SRE1BX0RfRVJETUFfQ0ZHXzAJCQlfTUtfQUREUl9DT05T
VCgweDgwNTgpDQo+ICsjZGVmaW5lIFNEUF9SRE1BX0RfRVJETUFfQ0ZHXzBfRVJETUFfRElT
QUJMRV9TSElGVAkJCV9NS19TSElGVF9DT05TVCgwKQ0KPiArI2RlZmluZSBTRFBfUkRNQV9E
X0VSRE1BX0NGR18wX0VSRE1BX0RJU0FCTEVfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHgx
LCBTRFBfUkRNQV9EX0VSRE1BX0NGR18wX0VSRE1BX0RJU0FCTEVfU0hJRlQpDQo+ICsjZGVm
aW5lIFNEUF9SRE1BX0RfRVJETUFfQ0ZHXzBfRVJETUFfRElTQUJMRV9OTwkJCV9NS19FTlVN
X0NPTlNUKDB4MCkNCj4gKyNkZWZpbmUgU0RQX1JETUFfRF9FUkRNQV9DRkdfMF9FUkRNQV9E
SVNBQkxFX1lFUwkJCV9NS19FTlVNX0NPTlNUKDB4MSkNCj4gKyNkZWZpbmUgU0RQX1JETUFf
RF9FUkRNQV9DRkdfMF9FUkRNQV9EQVRBX1VTRV9TSElGVAkJCV9NS19TSElGVF9DT05TVCgx
KQ0KPiArI2RlZmluZSBTRFBfUkRNQV9EX0VSRE1BX0NGR18wX0VSRE1BX0RBVEFfVVNFX0ZJ
RUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4MywgU0RQX1JETUFfRF9FUkRNQV9DRkdfMF9FUkRN
QV9EQVRBX1VTRV9TSElGVCkNCj4gKyNkZWZpbmUgU0RQX1JETUFfRF9FUkRNQV9DRkdfMF9F
UkRNQV9EQVRBX1VTRV9NVUwJCQlfTUtfRU5VTV9DT05TVCgweDApDQo+ICsjZGVmaW5lIFNE
UF9SRE1BX0RfRVJETUFfQ0ZHXzBfRVJETUFfREFUQV9VU0VfQUxVCQkJX01LX0VOVU1fQ09O
U1QoMHgxKQ0KPiArI2RlZmluZSBTRFBfUkRNQV9EX0VSRE1BX0NGR18wX0VSRE1BX0RBVEFf
VVNFX0JPVEgJCQlfTUtfRU5VTV9DT05TVCgweDIpDQo+ICsjZGVmaW5lIFNEUF9SRE1BX0Rf
RVJETUFfQ0ZHXzBfRVJETUFfREFUQV9TSVpFX1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDMp
DQo+ICsjZGVmaW5lIFNEUF9SRE1BX0RfRVJETUFfQ0ZHXzBfRVJETUFfREFUQV9TSVpFX0ZJ
RUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4MSwgU0RQX1JETUFfRF9FUkRNQV9DRkdfMF9FUkRN
QV9EQVRBX1NJWkVfU0hJRlQpDQo+ICsjZGVmaW5lIFNEUF9SRE1BX0RfRVJETUFfQ0ZHXzBf
RVJETUFfREFUQV9TSVpFX09ORV9CWVRFCQkJX01LX0VOVU1fQ09OU1QoMHgwKQ0KPiArI2Rl
ZmluZSBTRFBfUkRNQV9EX0VSRE1BX0NGR18wX0VSRE1BX0RBVEFfU0laRV9UV09fQllURQkJ
CV9NS19FTlVNX0NPTlNUKDB4MSkNCj4gKyNkZWZpbmUgU0RQX1JETUFfRF9FUkRNQV9DRkdf
MF9FUkRNQV9EQVRBX01PREVfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoNCkNCj4gKyNkZWZp
bmUgU0RQX1JETUFfRF9FUkRNQV9DRkdfMF9FUkRNQV9EQVRBX01PREVfRklFTEQJCQlfTUtf
RklFTERfQ09OU1QoMHgxLCBTRFBfUkRNQV9EX0VSRE1BX0NGR18wX0VSRE1BX0RBVEFfTU9E
RV9TSElGVCkNCj4gKyNkZWZpbmUgU0RQX1JETUFfRF9FUkRNQV9DRkdfMF9FUkRNQV9EQVRB
X01PREVfUEVSX0tFUk5FTAkJCV9NS19FTlVNX0NPTlNUKDB4MCkNCj4gKyNkZWZpbmUgU0RQ
X1JETUFfRF9FUkRNQV9DRkdfMF9FUkRNQV9EQVRBX01PREVfUEVSX0VMRU1FTlQJCQlfTUtf
RU5VTV9DT05TVCgweDEpDQo+ICsjZGVmaW5lIFNEUF9SRE1BX0RfRVJETUFfQ0ZHXzBfRVJE
TUFfUkFNX1RZUEVfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoNSkNCj4gKyNkZWZpbmUgU0RQ
X1JETUFfRF9FUkRNQV9DRkdfMF9FUkRNQV9SQU1fVFlQRV9GSUVMRAkJCV9NS19GSUVMRF9D
T05TVCgweDEsIFNEUF9SRE1BX0RfRVJETUFfQ0ZHXzBfRVJETUFfUkFNX1RZUEVfU0hJRlQp
DQo+ICsjZGVmaW5lIFNEUF9SRE1BX0RfRVJETUFfQ0ZHXzBfRVJETUFfUkFNX1RZUEVfQ1YJ
CQlfTUtfRU5VTV9DT05TVCgweDApDQo+ICsjZGVmaW5lIFNEUF9SRE1BX0RfRVJETUFfQ0ZH
XzBfRVJETUFfUkFNX1RZUEVfTUMJCQlfTUtfRU5VTV9DT05TVCgweDEpDQo+ICsNCj4gKw0K
PiArLy8gUmVnaXN0ZXIgU0RQX1JETUFfRF9FV19CQVNFX0FERFJfTE9XXzANCj4gKyNkZWZp
bmUgU0RQX1JETUFfRF9FV19CQVNFX0FERFJfTE9XXzAJCQlfTUtfQUREUl9DT05TVCgweDgw
NWMpDQo+ICsjZGVmaW5lIFNEUF9SRE1BX0RfRVdfQkFTRV9BRERSX0xPV18wX0VXX0JBU0Vf
QUREUl9MT1dfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMCkNCj4gKyNkZWZpbmUgU0RQX1JE
TUFfRF9FV19CQVNFX0FERFJfTE9XXzBfRVdfQkFTRV9BRERSX0xPV19GSUVMRAkJCV9NS19G
SUVMRF9DT05TVCgweGZmZmZmZmZmLCBTRFBfUkRNQV9EX0VXX0JBU0VfQUREUl9MT1dfMF9F
V19CQVNFX0FERFJfTE9XX1NISUZUKQ0KPiArDQo+ICsNCj4gKy8vIFJlZ2lzdGVyIFNEUF9S
RE1BX0RfRVdfQkFTRV9BRERSX0hJR0hfMA0KPiArI2RlZmluZSBTRFBfUkRNQV9EX0VXX0JB
U0VfQUREUl9ISUdIXzAJCQlfTUtfQUREUl9DT05TVCgweDgwNjApDQo+ICsjZGVmaW5lIFNE
UF9SRE1BX0RfRVdfQkFTRV9BRERSX0hJR0hfMF9FV19CQVNFX0FERFJfSElHSF9TSElGVAkJ
CV9NS19TSElGVF9DT05TVCgwKQ0KPiArI2RlZmluZSBTRFBfUkRNQV9EX0VXX0JBU0VfQURE
Ul9ISUdIXzBfRVdfQkFTRV9BRERSX0hJR0hfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHhm
ZmZmZmZmZiwgU0RQX1JETUFfRF9FV19CQVNFX0FERFJfSElHSF8wX0VXX0JBU0VfQUREUl9I
SUdIX1NISUZUKQ0KPiArDQo+ICsNCj4gKy8vIFJlZ2lzdGVyIFNEUF9SRE1BX0RfRVdfTElO
RV9TVFJJREVfMA0KPiArI2RlZmluZSBTRFBfUkRNQV9EX0VXX0xJTkVfU1RSSURFXzAJCQlf
TUtfQUREUl9DT05TVCgweDgwNjQpDQo+ICsjZGVmaW5lIFNEUF9SRE1BX0RfRVdfTElORV9T
VFJJREVfMF9FV19MSU5FX1NUUklERV9TSElGVAkJCV9NS19TSElGVF9DT05TVCgwKQ0KPiAr
I2RlZmluZSBTRFBfUkRNQV9EX0VXX0xJTkVfU1RSSURFXzBfRVdfTElORV9TVFJJREVfRklF
TEQJCQlfTUtfRklFTERfQ09OU1QoMHhmZmZmZmZmZiwgU0RQX1JETUFfRF9FV19MSU5FX1NU
UklERV8wX0VXX0xJTkVfU1RSSURFX1NISUZUKQ0KPiArDQo+ICsNCj4gKy8vIFJlZ2lzdGVy
IFNEUF9SRE1BX0RfRVdfU1VSRkFDRV9TVFJJREVfMA0KPiArI2RlZmluZSBTRFBfUkRNQV9E
X0VXX1NVUkZBQ0VfU1RSSURFXzAJCQlfTUtfQUREUl9DT05TVCgweDgwNjgpDQo+ICsjZGVm
aW5lIFNEUF9SRE1BX0RfRVdfU1VSRkFDRV9TVFJJREVfMF9FV19TVVJGQUNFX1NUUklERV9T
SElGVAkJCV9NS19TSElGVF9DT05TVCgwKQ0KPiArI2RlZmluZSBTRFBfUkRNQV9EX0VXX1NV
UkZBQ0VfU1RSSURFXzBfRVdfU1VSRkFDRV9TVFJJREVfRklFTEQJCQlfTUtfRklFTERfQ09O
U1QoMHhmZmZmZmZmZiwgU0RQX1JETUFfRF9FV19TVVJGQUNFX1NUUklERV8wX0VXX1NVUkZB
Q0VfU1RSSURFX1NISUZUKQ0KPiArDQo+ICsNCj4gKy8vIFJlZ2lzdGVyIFNEUF9SRE1BX0Rf
RVdfQkFUQ0hfU1RSSURFXzANCj4gKyNkZWZpbmUgU0RQX1JETUFfRF9FV19CQVRDSF9TVFJJ
REVfMAkJCV9NS19BRERSX0NPTlNUKDB4ODA2YykNCj4gKyNkZWZpbmUgU0RQX1JETUFfRF9F
V19CQVRDSF9TVFJJREVfMF9FV19CQVRDSF9TVFJJREVfU0hJRlQJCQlfTUtfU0hJRlRfQ09O
U1QoMCkNCj4gKyNkZWZpbmUgU0RQX1JETUFfRF9FV19CQVRDSF9TVFJJREVfMF9FV19CQVRD
SF9TVFJJREVfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHhmZmZmZmZmZiwgU0RQX1JETUFf
RF9FV19CQVRDSF9TVFJJREVfMF9FV19CQVRDSF9TVFJJREVfU0hJRlQpDQo+ICsNCj4gKw0K
PiArLy8gUmVnaXN0ZXIgU0RQX1JETUFfRF9GRUFUVVJFX01PREVfQ0ZHXzANCj4gKyNkZWZp
bmUgU0RQX1JETUFfRF9GRUFUVVJFX01PREVfQ0ZHXzAJCQlfTUtfQUREUl9DT05TVCgweDgw
NzApDQo+ICsjZGVmaW5lIFNEUF9SRE1BX0RfRkVBVFVSRV9NT0RFX0NGR18wX0ZMWUlOR19N
T0RFX1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDApDQo+ICsjZGVmaW5lIFNEUF9SRE1BX0Rf
RkVBVFVSRV9NT0RFX0NGR18wX0ZMWUlOR19NT0RFX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNU
KDB4MSwgU0RQX1JETUFfRF9GRUFUVVJFX01PREVfQ0ZHXzBfRkxZSU5HX01PREVfU0hJRlQp
DQo+ICsjZGVmaW5lIFNEUF9SRE1BX0RfRkVBVFVSRV9NT0RFX0NGR18wX0ZMWUlOR19NT0RF
X09GRgkJCV9NS19FTlVNX0NPTlNUKDB4MCkNCj4gKyNkZWZpbmUgU0RQX1JETUFfRF9GRUFU
VVJFX01PREVfQ0ZHXzBfRkxZSU5HX01PREVfT04JCQlfTUtfRU5VTV9DT05TVCgweDEpDQo+
ICsjZGVmaW5lIFNEUF9SRE1BX0RfRkVBVFVSRV9NT0RFX0NGR18wX1dJTk9HUkFEX1NISUZU
CQkJX01LX1NISUZUX0NPTlNUKDEpDQo+ICsjZGVmaW5lIFNEUF9SRE1BX0RfRkVBVFVSRV9N
T0RFX0NGR18wX1dJTk9HUkFEX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4MSwgU0RQX1JE
TUFfRF9GRUFUVVJFX01PREVfQ0ZHXzBfV0lOT0dSQURfU0hJRlQpDQo+ICsjZGVmaW5lIFNE
UF9SRE1BX0RfRkVBVFVSRV9NT0RFX0NGR18wX1dJTk9HUkFEX09GRgkJCV9NS19FTlVNX0NP
TlNUKDB4MCkNCj4gKyNkZWZpbmUgU0RQX1JETUFfRF9GRUFUVVJFX01PREVfQ0ZHXzBfV0lO
T0dSQURfT04JCQlfTUtfRU5VTV9DT05TVCgweDEpDQo+ICsjZGVmaW5lIFNEUF9SRE1BX0Rf
RkVBVFVSRV9NT0RFX0NGR18wX0lOX1BSRUNJU0lPTl9TSElGVAkJCV9NS19TSElGVF9DT05T
VCgyKQ0KPiArI2RlZmluZSBTRFBfUkRNQV9EX0ZFQVRVUkVfTU9ERV9DRkdfMF9JTl9QUkVD
SVNJT05fRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHgzLCBTRFBfUkRNQV9EX0ZFQVRVUkVf
TU9ERV9DRkdfMF9JTl9QUkVDSVNJT05fU0hJRlQpDQo+ICsjZGVmaW5lIFNEUF9SRE1BX0Rf
RkVBVFVSRV9NT0RFX0NGR18wX0lOX1BSRUNJU0lPTl9JTlQ4CQkJX01LX0VOVU1fQ09OU1Qo
MHgwKQ0KPiArI2RlZmluZSBTRFBfUkRNQV9EX0ZFQVRVUkVfTU9ERV9DRkdfMF9JTl9QUkVD
SVNJT05fSU5UMTYJCQlfTUtfRU5VTV9DT05TVCgweDEpDQo+ICsjZGVmaW5lIFNEUF9SRE1B
X0RfRkVBVFVSRV9NT0RFX0NGR18wX0lOX1BSRUNJU0lPTl9GUDE2CQkJX01LX0VOVU1fQ09O
U1QoMHgyKQ0KPiArI2RlZmluZSBTRFBfUkRNQV9EX0ZFQVRVUkVfTU9ERV9DRkdfMF9QUk9D
X1BSRUNJU0lPTl9TSElGVAkJCV9NS19TSElGVF9DT05TVCg0KQ0KPiArI2RlZmluZSBTRFBf
UkRNQV9EX0ZFQVRVUkVfTU9ERV9DRkdfMF9QUk9DX1BSRUNJU0lPTl9GSUVMRAkJCV9NS19G
SUVMRF9DT05TVCgweDMsIFNEUF9SRE1BX0RfRkVBVFVSRV9NT0RFX0NGR18wX1BST0NfUFJF
Q0lTSU9OX1NISUZUKQ0KPiArI2RlZmluZSBTRFBfUkRNQV9EX0ZFQVRVUkVfTU9ERV9DRkdf
MF9QUk9DX1BSRUNJU0lPTl9JTlQ4CQkJX01LX0VOVU1fQ09OU1QoMHgwKQ0KPiArI2RlZmlu
ZSBTRFBfUkRNQV9EX0ZFQVRVUkVfTU9ERV9DRkdfMF9QUk9DX1BSRUNJU0lPTl9JTlQxNgkJ
CV9NS19FTlVNX0NPTlNUKDB4MSkNCj4gKyNkZWZpbmUgU0RQX1JETUFfRF9GRUFUVVJFX01P
REVfQ0ZHXzBfUFJPQ19QUkVDSVNJT05fRlAxNgkJCV9NS19FTlVNX0NPTlNUKDB4MikNCj4g
KyNkZWZpbmUgU0RQX1JETUFfRF9GRUFUVVJFX01PREVfQ0ZHXzBfT1VUX1BSRUNJU0lPTl9T
SElGVAkJCV9NS19TSElGVF9DT05TVCg2KQ0KPiArI2RlZmluZSBTRFBfUkRNQV9EX0ZFQVRV
UkVfTU9ERV9DRkdfMF9PVVRfUFJFQ0lTSU9OX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4
MywgU0RQX1JETUFfRF9GRUFUVVJFX01PREVfQ0ZHXzBfT1VUX1BSRUNJU0lPTl9TSElGVCkN
Cj4gKyNkZWZpbmUgU0RQX1JETUFfRF9GRUFUVVJFX01PREVfQ0ZHXzBfT1VUX1BSRUNJU0lP
Tl9JTlQ4CQkJX01LX0VOVU1fQ09OU1QoMHgwKQ0KPiArI2RlZmluZSBTRFBfUkRNQV9EX0ZF
QVRVUkVfTU9ERV9DRkdfMF9PVVRfUFJFQ0lTSU9OX0lOVDE2CQkJX01LX0VOVU1fQ09OU1Qo
MHgxKQ0KPiArI2RlZmluZSBTRFBfUkRNQV9EX0ZFQVRVUkVfTU9ERV9DRkdfMF9PVVRfUFJF
Q0lTSU9OX0ZQMTYJCQlfTUtfRU5VTV9DT05TVCgweDIpDQo+ICsjZGVmaW5lIFNEUF9SRE1B
X0RfRkVBVFVSRV9NT0RFX0NGR18wX0JBVENIX05VTUJFUl9TSElGVAkJCV9NS19TSElGVF9D
T05TVCg4KQ0KPiArI2RlZmluZSBTRFBfUkRNQV9EX0ZFQVRVUkVfTU9ERV9DRkdfMF9CQVRD
SF9OVU1CRVJfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHgxZiwgU0RQX1JETUFfRF9GRUFU
VVJFX01PREVfQ0ZHXzBfQkFUQ0hfTlVNQkVSX1NISUZUKQ0KPiArDQo+ICsNCj4gKy8vIFJl
Z2lzdGVyIFNEUF9SRE1BX0RfU1JDX0RNQV9DRkdfMA0KPiArI2RlZmluZSBTRFBfUkRNQV9E
X1NSQ19ETUFfQ0ZHXzAJCQlfTUtfQUREUl9DT05TVCgweDgwNzQpDQo+ICsjZGVmaW5lIFNE
UF9SRE1BX0RfU1JDX0RNQV9DRkdfMF9TUkNfUkFNX1RZUEVfU0hJRlQJCQlfTUtfU0hJRlRf
Q09OU1QoMCkNCj4gKyNkZWZpbmUgU0RQX1JETUFfRF9TUkNfRE1BX0NGR18wX1NSQ19SQU1f
VFlQRV9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweDEsIFNEUF9SRE1BX0RfU1JDX0RNQV9D
RkdfMF9TUkNfUkFNX1RZUEVfU0hJRlQpDQo+ICsjZGVmaW5lIFNEUF9SRE1BX0RfU1JDX0RN
QV9DRkdfMF9TUkNfUkFNX1RZUEVfQ1YJCQlfTUtfRU5VTV9DT05TVCgweDApDQo+ICsjZGVm
aW5lIFNEUF9SRE1BX0RfU1JDX0RNQV9DRkdfMF9TUkNfUkFNX1RZUEVfTUMJCQlfTUtfRU5V
TV9DT05TVCgweDEpDQo+ICsNCj4gKw0KPiArLy8gUmVnaXN0ZXIgU0RQX1JETUFfRF9TVEFU
VVNfTkFOX0lOUFVUX05VTV8wDQo+ICsjZGVmaW5lIFNEUF9SRE1BX0RfU1RBVFVTX05BTl9J
TlBVVF9OVU1fMAkJCV9NS19BRERSX0NPTlNUKDB4ODA3OCkNCj4gKyNkZWZpbmUgU0RQX1JE
TUFfRF9TVEFUVVNfTkFOX0lOUFVUX05VTV8wX1NUQVRVU19OQU5fSU5QVVRfTlVNX1NISUZU
CQkJX01LX1NISUZUX0NPTlNUKDApDQo+ICsjZGVmaW5lIFNEUF9SRE1BX0RfU1RBVFVTX05B
Tl9JTlBVVF9OVU1fMF9TVEFUVVNfTkFOX0lOUFVUX05VTV9GSUVMRAkJCV9NS19GSUVMRF9D
T05TVCgweGZmZmZmZmZmLCBTRFBfUkRNQV9EX1NUQVRVU19OQU5fSU5QVVRfTlVNXzBfU1RB
VFVTX05BTl9JTlBVVF9OVU1fU0hJRlQpDQo+ICsNCj4gKw0KPiArLy8gUmVnaXN0ZXIgU0RQ
X1JETUFfRF9TVEFUVVNfSU5GX0lOUFVUX05VTV8wDQo+ICsjZGVmaW5lIFNEUF9SRE1BX0Rf
U1RBVFVTX0lORl9JTlBVVF9OVU1fMAkJCV9NS19BRERSX0NPTlNUKDB4ODA3YykNCj4gKyNk
ZWZpbmUgU0RQX1JETUFfRF9TVEFUVVNfSU5GX0lOUFVUX05VTV8wX1NUQVRVU19JTkZfSU5Q
VVRfTlVNX1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDApDQo+ICsjZGVmaW5lIFNEUF9SRE1B
X0RfU1RBVFVTX0lORl9JTlBVVF9OVU1fMF9TVEFUVVNfSU5GX0lOUFVUX05VTV9GSUVMRAkJ
CV9NS19GSUVMRF9DT05TVCgweGZmZmZmZmZmLCBTRFBfUkRNQV9EX1NUQVRVU19JTkZfSU5Q
VVRfTlVNXzBfU1RBVFVTX0lORl9JTlBVVF9OVU1fU0hJRlQpDQo+ICsNCj4gKw0KPiArLy8g
UmVnaXN0ZXIgU0RQX1JETUFfRF9QRVJGX0VOQUJMRV8wDQo+ICsjZGVmaW5lIFNEUF9SRE1B
X0RfUEVSRl9FTkFCTEVfMAkJCV9NS19BRERSX0NPTlNUKDB4ODA4MCkNCj4gKyNkZWZpbmUg
U0RQX1JETUFfRF9QRVJGX0VOQUJMRV8wX1BFUkZfRE1BX0VOX1NISUZUCQkJX01LX1NISUZU
X0NPTlNUKDApDQo+ICsjZGVmaW5lIFNEUF9SRE1BX0RfUEVSRl9FTkFCTEVfMF9QRVJGX0RN
QV9FTl9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweDEsIFNEUF9SRE1BX0RfUEVSRl9FTkFC
TEVfMF9QRVJGX0RNQV9FTl9TSElGVCkNCj4gKyNkZWZpbmUgU0RQX1JETUFfRF9QRVJGX0VO
QUJMRV8wX1BFUkZfRE1BX0VOX05PCQkJX01LX0VOVU1fQ09OU1QoMHgwKQ0KPiArI2RlZmlu
ZSBTRFBfUkRNQV9EX1BFUkZfRU5BQkxFXzBfUEVSRl9ETUFfRU5fWUVTCQkJX01LX0VOVU1f
Q09OU1QoMHgxKQ0KPiArI2RlZmluZSBTRFBfUkRNQV9EX1BFUkZfRU5BQkxFXzBfUEVSRl9O
QU5fSU5GX0NPVU5UX0VOX1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDEpDQo+ICsjZGVmaW5l
IFNEUF9SRE1BX0RfUEVSRl9FTkFCTEVfMF9QRVJGX05BTl9JTkZfQ09VTlRfRU5fRklFTEQJ
CQlfTUtfRklFTERfQ09OU1QoMHgxLCBTRFBfUkRNQV9EX1BFUkZfRU5BQkxFXzBfUEVSRl9O
QU5fSU5GX0NPVU5UX0VOX1NISUZUKQ0KPiArI2RlZmluZSBTRFBfUkRNQV9EX1BFUkZfRU5B
QkxFXzBfUEVSRl9OQU5fSU5GX0NPVU5UX0VOX05PCQkJX01LX0VOVU1fQ09OU1QoMHgwKQ0K
PiArI2RlZmluZSBTRFBfUkRNQV9EX1BFUkZfRU5BQkxFXzBfUEVSRl9OQU5fSU5GX0NPVU5U
X0VOX1lFUwkJCV9NS19FTlVNX0NPTlNUKDB4MSkNCj4gKw0KPiArDQo+ICsvLyBSZWdpc3Rl
ciBTRFBfUkRNQV9EX1BFUkZfTVJETUFfUkVBRF9TVEFMTF8wDQo+ICsjZGVmaW5lIFNEUF9S
RE1BX0RfUEVSRl9NUkRNQV9SRUFEX1NUQUxMXzAJCQlfTUtfQUREUl9DT05TVCgweDgwODQp
DQo+ICsjZGVmaW5lIFNEUF9SRE1BX0RfUEVSRl9NUkRNQV9SRUFEX1NUQUxMXzBfTVJETUFf
U1RBTExfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMCkNCj4gKyNkZWZpbmUgU0RQX1JETUFf
RF9QRVJGX01SRE1BX1JFQURfU1RBTExfMF9NUkRNQV9TVEFMTF9GSUVMRAkJCV9NS19GSUVM
RF9DT05TVCgweGZmZmZmZmZmLCBTRFBfUkRNQV9EX1BFUkZfTVJETUFfUkVBRF9TVEFMTF8w
X01SRE1BX1NUQUxMX1NISUZUKQ0KPiArDQo+ICsNCj4gKy8vIFJlZ2lzdGVyIFNEUF9SRE1B
X0RfUEVSRl9CUkRNQV9SRUFEX1NUQUxMXzANCj4gKyNkZWZpbmUgU0RQX1JETUFfRF9QRVJG
X0JSRE1BX1JFQURfU1RBTExfMAkJCV9NS19BRERSX0NPTlNUKDB4ODA4OCkNCj4gKyNkZWZp
bmUgU0RQX1JETUFfRF9QRVJGX0JSRE1BX1JFQURfU1RBTExfMF9CUkRNQV9TVEFMTF9TSElG
VAkJCV9NS19TSElGVF9DT05TVCgwKQ0KPiArI2RlZmluZSBTRFBfUkRNQV9EX1BFUkZfQlJE
TUFfUkVBRF9TVEFMTF8wX0JSRE1BX1NUQUxMX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4
ZmZmZmZmZmYsIFNEUF9SRE1BX0RfUEVSRl9CUkRNQV9SRUFEX1NUQUxMXzBfQlJETUFfU1RB
TExfU0hJRlQpDQo+ICsNCj4gKw0KPiArLy8gUmVnaXN0ZXIgU0RQX1JETUFfRF9QRVJGX05S
RE1BX1JFQURfU1RBTExfMA0KPiArI2RlZmluZSBTRFBfUkRNQV9EX1BFUkZfTlJETUFfUkVB
RF9TVEFMTF8wCQkJX01LX0FERFJfQ09OU1QoMHg4MDhjKQ0KPiArI2RlZmluZSBTRFBfUkRN
QV9EX1BFUkZfTlJETUFfUkVBRF9TVEFMTF8wX05SRE1BX1NUQUxMX1NISUZUCQkJX01LX1NI
SUZUX0NPTlNUKDApDQo+ICsjZGVmaW5lIFNEUF9SRE1BX0RfUEVSRl9OUkRNQV9SRUFEX1NU
QUxMXzBfTlJETUFfU1RBTExfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHhmZmZmZmZmZiwg
U0RQX1JETUFfRF9QRVJGX05SRE1BX1JFQURfU1RBTExfMF9OUkRNQV9TVEFMTF9TSElGVCkN
Cj4gKw0KPiArDQo+ICsvLyBSZWdpc3RlciBTRFBfUkRNQV9EX1BFUkZfRVJETUFfUkVBRF9T
VEFMTF8wDQo+ICsjZGVmaW5lIFNEUF9SRE1BX0RfUEVSRl9FUkRNQV9SRUFEX1NUQUxMXzAJ
CQlfTUtfQUREUl9DT05TVCgweDgwOTApDQo+ICsjZGVmaW5lIFNEUF9SRE1BX0RfUEVSRl9F
UkRNQV9SRUFEX1NUQUxMXzBfRVJETUFfU1RBTExfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1Qo
MCkNCj4gKyNkZWZpbmUgU0RQX1JETUFfRF9QRVJGX0VSRE1BX1JFQURfU1RBTExfMF9FUkRN
QV9TVEFMTF9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweGZmZmZmZmZmLCBTRFBfUkRNQV9E
X1BFUkZfRVJETUFfUkVBRF9TVEFMTF8wX0VSRE1BX1NUQUxMX1NISUZUKQ0KPiArDQo+ICsN
Cj4gKw0KPiArLy8gVG8gc2F0aXNmeSB2YXJpb3VzIGNvbXBpbGVycyBhbmQgcGxhdGZvcm1z
LA0KPiArLy8gd2UgbGV0IHVzZXJzIGNvbnRyb2wgdGhlIHR5cGVzIGFuZCBzeW50YXggb2Yg
Y2VydGFpbiBjb25zdGFudHMsIHVzaW5nIG1hY3Jvcy4NCj4gKyNpZm5kZWYgX01LX1NISUZU
X0NPTlNUDQo+ICsgICNkZWZpbmUgX01LX1NISUZUX0NPTlNUKF9jb25zdGFudF8pIF9jb25z
dGFudF8NCj4gKyNlbmRpZg0KPiArI2lmbmRlZiBfTUtfTUFTS19DT05TVA0KPiArICAjZGVm
aW5lIF9NS19NQVNLX0NPTlNUKF9jb25zdGFudF8pIF9jb25zdGFudF8NCj4gKyNlbmRpZg0K
PiArI2lmbmRlZiBfTUtfRU5VTV9DT05TVA0KPiArICAjZGVmaW5lIF9NS19FTlVNX0NPTlNU
KF9jb25zdGFudF8pIChfY29uc3RhbnRfICMjIFVMKQ0KPiArI2VuZGlmDQo+ICsjaWZuZGVm
IF9NS19BRERSX0NPTlNUDQo+ICsgICNkZWZpbmUgX01LX0FERFJfQ09OU1QoX2NvbnN0YW50
XykgX2NvbnN0YW50Xw0KPiArI2VuZGlmDQo+ICsjaWZuZGVmIF9NS19GSUVMRF9DT05TVA0K
PiArICAjZGVmaW5lIF9NS19GSUVMRF9DT05TVChfbWFza18sIF9zaGlmdF8pIChfTUtfTUFT
S19DT05TVChfbWFza18pIDw8IF9NS19TSElGVF9DT05TVChfc2hpZnRfKSkNCj4gKyNlbmRp
Zg0KPiArDQo+ICsNCj4gKy8vIFJlZ2lzdGVyIFNEUF9TX1NUQVRVU18wDQo+ICsjZGVmaW5l
IFNEUF9TX1NUQVRVU18wCQkJX01LX0FERFJfQ09OU1QoMHg5MDAwKQ0KPiArI2RlZmluZSBT
RFBfU19TVEFUVVNfMF9TVEFUVVNfMF9TSElGVAkJCV9NS19TSElGVF9DT05TVCgwKQ0KPiAr
I2RlZmluZSBTRFBfU19TVEFUVVNfMF9TVEFUVVNfMF9GSUVMRAkJCV9NS19GSUVMRF9DT05T
VCgweDMsIFNEUF9TX1NUQVRVU18wX1NUQVRVU18wX1NISUZUKQ0KPiArI2RlZmluZSBTRFBf
U19TVEFUVVNfMF9TVEFUVVNfMF9JRExFCQkJX01LX0VOVU1fQ09OU1QoMHgwKQ0KPiArI2Rl
ZmluZSBTRFBfU19TVEFUVVNfMF9TVEFUVVNfMF9SVU5OSU5HCQkJX01LX0VOVU1fQ09OU1Qo
MHgxKQ0KPiArI2RlZmluZSBTRFBfU19TVEFUVVNfMF9TVEFUVVNfMF9QRU5ESU5HCQkJX01L
X0VOVU1fQ09OU1QoMHgyKQ0KPiArI2RlZmluZSBTRFBfU19TVEFUVVNfMF9TVEFUVVNfMV9T
SElGVAkJCV9NS19TSElGVF9DT05TVCgxNikNCj4gKyNkZWZpbmUgU0RQX1NfU1RBVFVTXzBf
U1RBVFVTXzFfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHgzLCBTRFBfU19TVEFUVVNfMF9T
VEFUVVNfMV9TSElGVCkNCj4gKyNkZWZpbmUgU0RQX1NfU1RBVFVTXzBfU1RBVFVTXzFfSURM
RQkJCV9NS19FTlVNX0NPTlNUKDB4MCkNCj4gKyNkZWZpbmUgU0RQX1NfU1RBVFVTXzBfU1RB
VFVTXzFfUlVOTklORwkJCV9NS19FTlVNX0NPTlNUKDB4MSkNCj4gKyNkZWZpbmUgU0RQX1Nf
U1RBVFVTXzBfU1RBVFVTXzFfUEVORElORwkJCV9NS19FTlVNX0NPTlNUKDB4MikNCj4gKw0K
PiArDQo+ICsvLyBSZWdpc3RlciBTRFBfU19QT0lOVEVSXzANCj4gKyNkZWZpbmUgU0RQX1Nf
UE9JTlRFUl8wCQkJX01LX0FERFJfQ09OU1QoMHg5MDA0KQ0KPiArI2RlZmluZSBTRFBfU19Q
T0lOVEVSXzBfUFJPRFVDRVJfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMCkNCj4gKyNkZWZp
bmUgU0RQX1NfUE9JTlRFUl8wX1BST0RVQ0VSX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4
MSwgU0RQX1NfUE9JTlRFUl8wX1BST0RVQ0VSX1NISUZUKQ0KPiArI2RlZmluZSBTRFBfU19Q
T0lOVEVSXzBfUFJPRFVDRVJfR1JPVVBfMAkJCV9NS19FTlVNX0NPTlNUKDB4MCkNCj4gKyNk
ZWZpbmUgU0RQX1NfUE9JTlRFUl8wX1BST0RVQ0VSX0dST1VQXzEJCQlfTUtfRU5VTV9DT05T
VCgweDEpDQo+ICsjZGVmaW5lIFNEUF9TX1BPSU5URVJfMF9DT05TVU1FUl9TSElGVAkJCV9N
S19TSElGVF9DT05TVCgxNikNCj4gKyNkZWZpbmUgU0RQX1NfUE9JTlRFUl8wX0NPTlNVTUVS
X0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4MSwgU0RQX1NfUE9JTlRFUl8wX0NPTlNVTUVS
X1NISUZUKQ0KPiArI2RlZmluZSBTRFBfU19QT0lOVEVSXzBfQ09OU1VNRVJfR1JPVVBfMAkJ
CV9NS19FTlVNX0NPTlNUKDB4MCkNCj4gKyNkZWZpbmUgU0RQX1NfUE9JTlRFUl8wX0NPTlNV
TUVSX0dST1VQXzEJCQlfTUtfRU5VTV9DT05TVCgweDEpDQo+ICsNCj4gKw0KPiArLy8gUmVn
aXN0ZXIgU0RQX1NfTFVUX0FDQ0VTU19DRkdfMA0KPiArI2RlZmluZSBTRFBfU19MVVRfQUND
RVNTX0NGR18wCQkJX01LX0FERFJfQ09OU1QoMHg5MDA4KQ0KPiArI2RlZmluZSBTRFBfU19M
VVRfQUNDRVNTX0NGR18wX0xVVF9BRERSX1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDApDQo+
ICsjZGVmaW5lIFNEUF9TX0xVVF9BQ0NFU1NfQ0ZHXzBfTFVUX0FERFJfRklFTEQJCQlfTUtf
RklFTERfQ09OU1QoMHgzZmYsIFNEUF9TX0xVVF9BQ0NFU1NfQ0ZHXzBfTFVUX0FERFJfU0hJ
RlQpDQo+ICsjZGVmaW5lIFNEUF9TX0xVVF9BQ0NFU1NfQ0ZHXzBfTFVUX1RBQkxFX0lEX1NI
SUZUCQkJX01LX1NISUZUX0NPTlNUKDE2KQ0KPiArI2RlZmluZSBTRFBfU19MVVRfQUNDRVNT
X0NGR18wX0xVVF9UQUJMRV9JRF9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweDEsIFNEUF9T
X0xVVF9BQ0NFU1NfQ0ZHXzBfTFVUX1RBQkxFX0lEX1NISUZUKQ0KPiArI2RlZmluZSBTRFBf
U19MVVRfQUNDRVNTX0NGR18wX0xVVF9UQUJMRV9JRF9MRQkJCV9NS19FTlVNX0NPTlNUKDB4
MCkNCj4gKyNkZWZpbmUgU0RQX1NfTFVUX0FDQ0VTU19DRkdfMF9MVVRfVEFCTEVfSURfTE8J
CQlfTUtfRU5VTV9DT05TVCgweDEpDQo+ICsjZGVmaW5lIFNEUF9TX0xVVF9BQ0NFU1NfQ0ZH
XzBfTFVUX0FDQ0VTU19UWVBFX1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDE3KQ0KPiArI2Rl
ZmluZSBTRFBfU19MVVRfQUNDRVNTX0NGR18wX0xVVF9BQ0NFU1NfVFlQRV9GSUVMRAkJCV9N
S19GSUVMRF9DT05TVCgweDEsIFNEUF9TX0xVVF9BQ0NFU1NfQ0ZHXzBfTFVUX0FDQ0VTU19U
WVBFX1NISUZUKQ0KPiArI2RlZmluZSBTRFBfU19MVVRfQUNDRVNTX0NGR18wX0xVVF9BQ0NF
U1NfVFlQRV9SRUFECQkJX01LX0VOVU1fQ09OU1QoMHgwKQ0KPiArI2RlZmluZSBTRFBfU19M
VVRfQUNDRVNTX0NGR18wX0xVVF9BQ0NFU1NfVFlQRV9XUklURQkJCV9NS19FTlVNX0NPTlNU
KDB4MSkNCj4gKw0KPiArDQo+ICsvLyBSZWdpc3RlciBTRFBfU19MVVRfQUNDRVNTX0RBVEFf
MA0KPiArI2RlZmluZSBTRFBfU19MVVRfQUNDRVNTX0RBVEFfMAkJCV9NS19BRERSX0NPTlNU
KDB4OTAwYykNCj4gKyNkZWZpbmUgU0RQX1NfTFVUX0FDQ0VTU19EQVRBXzBfTFVUX0RBVEFf
U0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMCkNCj4gKyNkZWZpbmUgU0RQX1NfTFVUX0FDQ0VT
U19EQVRBXzBfTFVUX0RBVEFfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHhmZmZmLCBTRFBf
U19MVVRfQUNDRVNTX0RBVEFfMF9MVVRfREFUQV9TSElGVCkNCj4gKw0KPiArDQo+ICsvLyBS
ZWdpc3RlciBTRFBfU19MVVRfQ0ZHXzANCj4gKyNkZWZpbmUgU0RQX1NfTFVUX0NGR18wCQkJ
X01LX0FERFJfQ09OU1QoMHg5MDEwKQ0KPiArI2RlZmluZSBTRFBfU19MVVRfQ0ZHXzBfTFVU
X0xFX0ZVTkNUSU9OX1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDApDQo+ICsjZGVmaW5lIFNE
UF9TX0xVVF9DRkdfMF9MVVRfTEVfRlVOQ1RJT05fRklFTEQJCQlfTUtfRklFTERfQ09OU1Qo
MHgxLCBTRFBfU19MVVRfQ0ZHXzBfTFVUX0xFX0ZVTkNUSU9OX1NISUZUKQ0KPiArI2RlZmlu
ZSBTRFBfU19MVVRfQ0ZHXzBfTFVUX0xFX0ZVTkNUSU9OX0VYUE9ORU5UCQkJX01LX0VOVU1f
Q09OU1QoMHgwKQ0KPiArI2RlZmluZSBTRFBfU19MVVRfQ0ZHXzBfTFVUX0xFX0ZVTkNUSU9O
X0xJTkVBUgkJCV9NS19FTlVNX0NPTlNUKDB4MSkNCj4gKyNkZWZpbmUgU0RQX1NfTFVUX0NG
R18wX0xVVF9VRkxPV19QUklPUklUWV9TSElGVAkJCV9NS19TSElGVF9DT05TVCg0KQ0KPiAr
I2RlZmluZSBTRFBfU19MVVRfQ0ZHXzBfTFVUX1VGTE9XX1BSSU9SSVRZX0ZJRUxECQkJX01L
X0ZJRUxEX0NPTlNUKDB4MSwgU0RQX1NfTFVUX0NGR18wX0xVVF9VRkxPV19QUklPUklUWV9T
SElGVCkNCj4gKyNkZWZpbmUgU0RQX1NfTFVUX0NGR18wX0xVVF9VRkxPV19QUklPUklUWV9M
RQkJCV9NS19FTlVNX0NPTlNUKDB4MCkNCj4gKyNkZWZpbmUgU0RQX1NfTFVUX0NGR18wX0xV
VF9VRkxPV19QUklPUklUWV9MTwkJCV9NS19FTlVNX0NPTlNUKDB4MSkNCj4gKyNkZWZpbmUg
U0RQX1NfTFVUX0NGR18wX0xVVF9PRkxPV19QUklPUklUWV9TSElGVAkJCV9NS19TSElGVF9D
T05TVCg1KQ0KPiArI2RlZmluZSBTRFBfU19MVVRfQ0ZHXzBfTFVUX09GTE9XX1BSSU9SSVRZ
X0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4MSwgU0RQX1NfTFVUX0NGR18wX0xVVF9PRkxP
V19QUklPUklUWV9TSElGVCkNCj4gKyNkZWZpbmUgU0RQX1NfTFVUX0NGR18wX0xVVF9PRkxP
V19QUklPUklUWV9MRQkJCV9NS19FTlVNX0NPTlNUKDB4MCkNCj4gKyNkZWZpbmUgU0RQX1Nf
TFVUX0NGR18wX0xVVF9PRkxPV19QUklPUklUWV9MTwkJCV9NS19FTlVNX0NPTlNUKDB4MSkN
Cj4gKyNkZWZpbmUgU0RQX1NfTFVUX0NGR18wX0xVVF9IWUJSSURfUFJJT1JJVFlfU0hJRlQJ
CQlfTUtfU0hJRlRfQ09OU1QoNikNCj4gKyNkZWZpbmUgU0RQX1NfTFVUX0NGR18wX0xVVF9I
WUJSSURfUFJJT1JJVFlfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHgxLCBTRFBfU19MVVRf
Q0ZHXzBfTFVUX0hZQlJJRF9QUklPUklUWV9TSElGVCkNCj4gKyNkZWZpbmUgU0RQX1NfTFVU
X0NGR18wX0xVVF9IWUJSSURfUFJJT1JJVFlfTEUJCQlfTUtfRU5VTV9DT05TVCgweDApDQo+
ICsjZGVmaW5lIFNEUF9TX0xVVF9DRkdfMF9MVVRfSFlCUklEX1BSSU9SSVRZX0xPCQkJX01L
X0VOVU1fQ09OU1QoMHgxKQ0KPiArDQo+ICsNCj4gKy8vIFJlZ2lzdGVyIFNEUF9TX0xVVF9J
TkZPXzANCj4gKyNkZWZpbmUgU0RQX1NfTFVUX0lORk9fMAkJCV9NS19BRERSX0NPTlNUKDB4
OTAxNCkNCj4gKyNkZWZpbmUgU0RQX1NfTFVUX0lORk9fMF9MVVRfTEVfSU5ERVhfT0ZGU0VU
X1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDApDQo+ICsjZGVmaW5lIFNEUF9TX0xVVF9JTkZP
XzBfTFVUX0xFX0lOREVYX09GRlNFVF9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweGZmLCBT
RFBfU19MVVRfSU5GT18wX0xVVF9MRV9JTkRFWF9PRkZTRVRfU0hJRlQpDQo+ICsjZGVmaW5l
IFNEUF9TX0xVVF9JTkZPXzBfTFVUX0xFX0lOREVYX1NFTEVDVF9TSElGVAkJCV9NS19TSElG
VF9DT05TVCg4KQ0KPiArI2RlZmluZSBTRFBfU19MVVRfSU5GT18wX0xVVF9MRV9JTkRFWF9T
RUxFQ1RfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHhmZiwgU0RQX1NfTFVUX0lORk9fMF9M
VVRfTEVfSU5ERVhfU0VMRUNUX1NISUZUKQ0KPiArI2RlZmluZSBTRFBfU19MVVRfSU5GT18w
X0xVVF9MT19JTkRFWF9TRUxFQ1RfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMTYpDQo+ICsj
ZGVmaW5lIFNEUF9TX0xVVF9JTkZPXzBfTFVUX0xPX0lOREVYX1NFTEVDVF9GSUVMRAkJCV9N
S19GSUVMRF9DT05TVCgweGZmLCBTRFBfU19MVVRfSU5GT18wX0xVVF9MT19JTkRFWF9TRUxF
Q1RfU0hJRlQpDQo+ICsNCj4gKw0KPiArLy8gUmVnaXN0ZXIgU0RQX1NfTFVUX0xFX1NUQVJU
XzANCj4gKyNkZWZpbmUgU0RQX1NfTFVUX0xFX1NUQVJUXzAJCQlfTUtfQUREUl9DT05TVCgw
eDkwMTgpDQo+ICsjZGVmaW5lIFNEUF9TX0xVVF9MRV9TVEFSVF8wX0xVVF9MRV9TVEFSVF9T
SElGVAkJCV9NS19TSElGVF9DT05TVCgwKQ0KPiArI2RlZmluZSBTRFBfU19MVVRfTEVfU1RB
UlRfMF9MVVRfTEVfU1RBUlRfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHhmZmZmZmZmZiwg
U0RQX1NfTFVUX0xFX1NUQVJUXzBfTFVUX0xFX1NUQVJUX1NISUZUKQ0KPiArDQo+ICsNCj4g
Ky8vIFJlZ2lzdGVyIFNEUF9TX0xVVF9MRV9FTkRfMA0KPiArI2RlZmluZSBTRFBfU19MVVRf
TEVfRU5EXzAJCQlfTUtfQUREUl9DT05TVCgweDkwMWMpDQo+ICsjZGVmaW5lIFNEUF9TX0xV
VF9MRV9FTkRfMF9MVVRfTEVfRU5EX1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDApDQo+ICsj
ZGVmaW5lIFNEUF9TX0xVVF9MRV9FTkRfMF9MVVRfTEVfRU5EX0ZJRUxECQkJX01LX0ZJRUxE
X0NPTlNUKDB4ZmZmZmZmZmYsIFNEUF9TX0xVVF9MRV9FTkRfMF9MVVRfTEVfRU5EX1NISUZU
KQ0KPiArDQo+ICsNCj4gKy8vIFJlZ2lzdGVyIFNEUF9TX0xVVF9MT19TVEFSVF8wDQo+ICsj
ZGVmaW5lIFNEUF9TX0xVVF9MT19TVEFSVF8wCQkJX01LX0FERFJfQ09OU1QoMHg5MDIwKQ0K
PiArI2RlZmluZSBTRFBfU19MVVRfTE9fU1RBUlRfMF9MVVRfTE9fU1RBUlRfU0hJRlQJCQlf
TUtfU0hJRlRfQ09OU1QoMCkNCj4gKyNkZWZpbmUgU0RQX1NfTFVUX0xPX1NUQVJUXzBfTFVU
X0xPX1NUQVJUX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4ZmZmZmZmZmYsIFNEUF9TX0xV
VF9MT19TVEFSVF8wX0xVVF9MT19TVEFSVF9TSElGVCkNCj4gKw0KPiArDQo+ICsvLyBSZWdp
c3RlciBTRFBfU19MVVRfTE9fRU5EXzANCj4gKyNkZWZpbmUgU0RQX1NfTFVUX0xPX0VORF8w
CQkJX01LX0FERFJfQ09OU1QoMHg5MDI0KQ0KPiArI2RlZmluZSBTRFBfU19MVVRfTE9fRU5E
XzBfTFVUX0xPX0VORF9TSElGVAkJCV9NS19TSElGVF9DT05TVCgwKQ0KPiArI2RlZmluZSBT
RFBfU19MVVRfTE9fRU5EXzBfTFVUX0xPX0VORF9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgw
eGZmZmZmZmZmLCBTRFBfU19MVVRfTE9fRU5EXzBfTFVUX0xPX0VORF9TSElGVCkNCj4gKw0K
PiArDQo+ICsvLyBSZWdpc3RlciBTRFBfU19MVVRfTEVfU0xPUEVfU0NBTEVfMA0KPiArI2Rl
ZmluZSBTRFBfU19MVVRfTEVfU0xPUEVfU0NBTEVfMAkJCV9NS19BRERSX0NPTlNUKDB4OTAy
OCkNCj4gKyNkZWZpbmUgU0RQX1NfTFVUX0xFX1NMT1BFX1NDQUxFXzBfTFVUX0xFX1NMT1BF
X1VGTE9XX1NDQUxFX1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDApDQo+ICsjZGVmaW5lIFNE
UF9TX0xVVF9MRV9TTE9QRV9TQ0FMRV8wX0xVVF9MRV9TTE9QRV9VRkxPV19TQ0FMRV9GSUVM
RAkJCV9NS19GSUVMRF9DT05TVCgweGZmZmYsIFNEUF9TX0xVVF9MRV9TTE9QRV9TQ0FMRV8w
X0xVVF9MRV9TTE9QRV9VRkxPV19TQ0FMRV9TSElGVCkNCj4gKyNkZWZpbmUgU0RQX1NfTFVU
X0xFX1NMT1BFX1NDQUxFXzBfTFVUX0xFX1NMT1BFX09GTE9XX1NDQUxFX1NISUZUCQkJX01L
X1NISUZUX0NPTlNUKDE2KQ0KPiArI2RlZmluZSBTRFBfU19MVVRfTEVfU0xPUEVfU0NBTEVf
MF9MVVRfTEVfU0xPUEVfT0ZMT1dfU0NBTEVfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHhm
ZmZmLCBTRFBfU19MVVRfTEVfU0xPUEVfU0NBTEVfMF9MVVRfTEVfU0xPUEVfT0ZMT1dfU0NB
TEVfU0hJRlQpDQo+ICsNCj4gKw0KPiArLy8gUmVnaXN0ZXIgU0RQX1NfTFVUX0xFX1NMT1BF
X1NISUZUXzANCj4gKyNkZWZpbmUgU0RQX1NfTFVUX0xFX1NMT1BFX1NISUZUXzAJCQlfTUtf
QUREUl9DT05TVCgweDkwMmMpDQo+ICsjZGVmaW5lIFNEUF9TX0xVVF9MRV9TTE9QRV9TSElG
VF8wX0xVVF9MRV9TTE9QRV9VRkxPV19TSElGVF9TSElGVAkJCV9NS19TSElGVF9DT05TVCgw
KQ0KPiArI2RlZmluZSBTRFBfU19MVVRfTEVfU0xPUEVfU0hJRlRfMF9MVVRfTEVfU0xPUEVf
VUZMT1dfU0hJRlRfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHgxZiwgU0RQX1NfTFVUX0xF
X1NMT1BFX1NISUZUXzBfTFVUX0xFX1NMT1BFX1VGTE9XX1NISUZUX1NISUZUKQ0KPiArI2Rl
ZmluZSBTRFBfU19MVVRfTEVfU0xPUEVfU0hJRlRfMF9MVVRfTEVfU0xPUEVfT0ZMT1dfU0hJ
RlRfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoNSkNCj4gKyNkZWZpbmUgU0RQX1NfTFVUX0xF
X1NMT1BFX1NISUZUXzBfTFVUX0xFX1NMT1BFX09GTE9XX1NISUZUX0ZJRUxECQkJX01LX0ZJ
RUxEX0NPTlNUKDB4MWYsIFNEUF9TX0xVVF9MRV9TTE9QRV9TSElGVF8wX0xVVF9MRV9TTE9Q
RV9PRkxPV19TSElGVF9TSElGVCkNCj4gKw0KPiArDQo+ICsvLyBSZWdpc3RlciBTRFBfU19M
VVRfTE9fU0xPUEVfU0NBTEVfMA0KPiArI2RlZmluZSBTRFBfU19MVVRfTE9fU0xPUEVfU0NB
TEVfMAkJCV9NS19BRERSX0NPTlNUKDB4OTAzMCkNCj4gKyNkZWZpbmUgU0RQX1NfTFVUX0xP
X1NMT1BFX1NDQUxFXzBfTFVUX0xPX1NMT1BFX1VGTE9XX1NDQUxFX1NISUZUCQkJX01LX1NI
SUZUX0NPTlNUKDApDQo+ICsjZGVmaW5lIFNEUF9TX0xVVF9MT19TTE9QRV9TQ0FMRV8wX0xV
VF9MT19TTE9QRV9VRkxPV19TQ0FMRV9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweGZmZmYs
IFNEUF9TX0xVVF9MT19TTE9QRV9TQ0FMRV8wX0xVVF9MT19TTE9QRV9VRkxPV19TQ0FMRV9T
SElGVCkNCj4gKyNkZWZpbmUgU0RQX1NfTFVUX0xPX1NMT1BFX1NDQUxFXzBfTFVUX0xPX1NM
T1BFX09GTE9XX1NDQUxFX1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDE2KQ0KPiArI2RlZmlu
ZSBTRFBfU19MVVRfTE9fU0xPUEVfU0NBTEVfMF9MVVRfTE9fU0xPUEVfT0ZMT1dfU0NBTEVf
RklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHhmZmZmLCBTRFBfU19MVVRfTE9fU0xPUEVfU0NB
TEVfMF9MVVRfTE9fU0xPUEVfT0ZMT1dfU0NBTEVfU0hJRlQpDQo+ICsNCj4gKw0KPiArLy8g
UmVnaXN0ZXIgU0RQX1NfTFVUX0xPX1NMT1BFX1NISUZUXzANCj4gKyNkZWZpbmUgU0RQX1Nf
TFVUX0xPX1NMT1BFX1NISUZUXzAJCQlfTUtfQUREUl9DT05TVCgweDkwMzQpDQo+ICsjZGVm
aW5lIFNEUF9TX0xVVF9MT19TTE9QRV9TSElGVF8wX0xVVF9MT19TTE9QRV9VRkxPV19TSElG
VF9TSElGVAkJCV9NS19TSElGVF9DT05TVCgwKQ0KPiArI2RlZmluZSBTRFBfU19MVVRfTE9f
U0xPUEVfU0hJRlRfMF9MVVRfTE9fU0xPUEVfVUZMT1dfU0hJRlRfRklFTEQJCQlfTUtfRklF
TERfQ09OU1QoMHgxZiwgU0RQX1NfTFVUX0xPX1NMT1BFX1NISUZUXzBfTFVUX0xPX1NMT1BF
X1VGTE9XX1NISUZUX1NISUZUKQ0KPiArI2RlZmluZSBTRFBfU19MVVRfTE9fU0xPUEVfU0hJ
RlRfMF9MVVRfTE9fU0xPUEVfT0ZMT1dfU0hJRlRfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1Qo
NSkNCj4gKyNkZWZpbmUgU0RQX1NfTFVUX0xPX1NMT1BFX1NISUZUXzBfTFVUX0xPX1NMT1BF
X09GTE9XX1NISUZUX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4MWYsIFNEUF9TX0xVVF9M
T19TTE9QRV9TSElGVF8wX0xVVF9MT19TTE9QRV9PRkxPV19TSElGVF9TSElGVCkNCj4gKw0K
PiArDQo+ICsvLyBSZWdpc3RlciBTRFBfRF9PUF9FTkFCTEVfMA0KPiArI2RlZmluZSBTRFBf
RF9PUF9FTkFCTEVfMAkJCV9NS19BRERSX0NPTlNUKDB4OTAzOCkNCj4gKyNkZWZpbmUgU0RQ
X0RfT1BfRU5BQkxFXzBfT1BfRU5fU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMCkNCj4gKyNk
ZWZpbmUgU0RQX0RfT1BfRU5BQkxFXzBfT1BfRU5fRklFTEQJCQlfTUtfRklFTERfQ09OU1Qo
MHgxLCBTRFBfRF9PUF9FTkFCTEVfMF9PUF9FTl9TSElGVCkNCj4gKyNkZWZpbmUgU0RQX0Rf
T1BfRU5BQkxFXzBfT1BfRU5fRElTQUJMRQkJCV9NS19FTlVNX0NPTlNUKDB4MCkNCj4gKyNk
ZWZpbmUgU0RQX0RfT1BfRU5BQkxFXzBfT1BfRU5fRU5BQkxFCQkJX01LX0VOVU1fQ09OU1Qo
MHgxKQ0KPiArDQo+ICsNCj4gKy8vIFJlZ2lzdGVyIFNEUF9EX0RBVEFfQ1VCRV9XSURUSF8w
DQo+ICsjZGVmaW5lIFNEUF9EX0RBVEFfQ1VCRV9XSURUSF8wCQkJX01LX0FERFJfQ09OU1Qo
MHg5MDNjKQ0KPiArI2RlZmluZSBTRFBfRF9EQVRBX0NVQkVfV0lEVEhfMF9XSURUSF9TSElG
VAkJCV9NS19TSElGVF9DT05TVCgwKQ0KPiArI2RlZmluZSBTRFBfRF9EQVRBX0NVQkVfV0lE
VEhfMF9XSURUSF9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweDFmZmYsIFNEUF9EX0RBVEFf
Q1VCRV9XSURUSF8wX1dJRFRIX1NISUZUKQ0KPiArDQo+ICsNCj4gKy8vIFJlZ2lzdGVyIFNE
UF9EX0RBVEFfQ1VCRV9IRUlHSFRfMA0KPiArI2RlZmluZSBTRFBfRF9EQVRBX0NVQkVfSEVJ
R0hUXzAJCQlfTUtfQUREUl9DT05TVCgweDkwNDApDQo+ICsjZGVmaW5lIFNEUF9EX0RBVEFf
Q1VCRV9IRUlHSFRfMF9IRUlHSFRfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMCkNCj4gKyNk
ZWZpbmUgU0RQX0RfREFUQV9DVUJFX0hFSUdIVF8wX0hFSUdIVF9GSUVMRAkJCV9NS19GSUVM
RF9DT05TVCgweDFmZmYsIFNEUF9EX0RBVEFfQ1VCRV9IRUlHSFRfMF9IRUlHSFRfU0hJRlQp
DQo+ICsNCj4gKw0KPiArLy8gUmVnaXN0ZXIgU0RQX0RfREFUQV9DVUJFX0NIQU5ORUxfMA0K
PiArI2RlZmluZSBTRFBfRF9EQVRBX0NVQkVfQ0hBTk5FTF8wCQkJX01LX0FERFJfQ09OU1Qo
MHg5MDQ0KQ0KPiArI2RlZmluZSBTRFBfRF9EQVRBX0NVQkVfQ0hBTk5FTF8wX0NIQU5ORUxf
U0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMCkNCj4gKyNkZWZpbmUgU0RQX0RfREFUQV9DVUJF
X0NIQU5ORUxfMF9DSEFOTkVMX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4MWZmZiwgU0RQ
X0RfREFUQV9DVUJFX0NIQU5ORUxfMF9DSEFOTkVMX1NISUZUKQ0KPiArDQo+ICsNCj4gKy8v
IFJlZ2lzdGVyIFNEUF9EX0RTVF9CQVNFX0FERFJfTE9XXzANCj4gKyNkZWZpbmUgU0RQX0Rf
RFNUX0JBU0VfQUREUl9MT1dfMAkJCV9NS19BRERSX0NPTlNUKDB4OTA0OCkNCj4gKyNkZWZp
bmUgU0RQX0RfRFNUX0JBU0VfQUREUl9MT1dfMF9EU1RfQkFTRV9BRERSX0xPV19TSElGVAkJ
CV9NS19TSElGVF9DT05TVCgwKQ0KPiArI2RlZmluZSBTRFBfRF9EU1RfQkFTRV9BRERSX0xP
V18wX0RTVF9CQVNFX0FERFJfTE9XX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4ZmZmZmZm
ZmYsIFNEUF9EX0RTVF9CQVNFX0FERFJfTE9XXzBfRFNUX0JBU0VfQUREUl9MT1dfU0hJRlQp
DQo+ICsNCj4gKw0KPiArLy8gUmVnaXN0ZXIgU0RQX0RfRFNUX0JBU0VfQUREUl9ISUdIXzAN
Cj4gKyNkZWZpbmUgU0RQX0RfRFNUX0JBU0VfQUREUl9ISUdIXzAJCQlfTUtfQUREUl9DT05T
VCgweDkwNGMpDQo+ICsjZGVmaW5lIFNEUF9EX0RTVF9CQVNFX0FERFJfSElHSF8wX0RTVF9C
QVNFX0FERFJfSElHSF9TSElGVAkJCV9NS19TSElGVF9DT05TVCgwKQ0KPiArI2RlZmluZSBT
RFBfRF9EU1RfQkFTRV9BRERSX0hJR0hfMF9EU1RfQkFTRV9BRERSX0hJR0hfRklFTEQJCQlf
TUtfRklFTERfQ09OU1QoMHhmZmZmZmZmZiwgU0RQX0RfRFNUX0JBU0VfQUREUl9ISUdIXzBf
RFNUX0JBU0VfQUREUl9ISUdIX1NISUZUKQ0KPiArDQo+ICsNCj4gKy8vIFJlZ2lzdGVyIFNE
UF9EX0RTVF9MSU5FX1NUUklERV8wDQo+ICsjZGVmaW5lIFNEUF9EX0RTVF9MSU5FX1NUUklE
RV8wCQkJX01LX0FERFJfQ09OU1QoMHg5MDUwKQ0KPiArI2RlZmluZSBTRFBfRF9EU1RfTElO
RV9TVFJJREVfMF9EU1RfTElORV9TVFJJREVfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMCkN
Cj4gKyNkZWZpbmUgU0RQX0RfRFNUX0xJTkVfU1RSSURFXzBfRFNUX0xJTkVfU1RSSURFX0ZJ
RUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4ZmZmZmZmZmYsIFNEUF9EX0RTVF9MSU5FX1NUUklE
RV8wX0RTVF9MSU5FX1NUUklERV9TSElGVCkNCj4gKw0KPiArDQo+ICsvLyBSZWdpc3RlciBT
RFBfRF9EU1RfU1VSRkFDRV9TVFJJREVfMA0KPiArI2RlZmluZSBTRFBfRF9EU1RfU1VSRkFD
RV9TVFJJREVfMAkJCV9NS19BRERSX0NPTlNUKDB4OTA1NCkNCj4gKyNkZWZpbmUgU0RQX0Rf
RFNUX1NVUkZBQ0VfU1RSSURFXzBfRFNUX1NVUkZBQ0VfU1RSSURFX1NISUZUCQkJX01LX1NI
SUZUX0NPTlNUKDApDQo+ICsjZGVmaW5lIFNEUF9EX0RTVF9TVVJGQUNFX1NUUklERV8wX0RT
VF9TVVJGQUNFX1NUUklERV9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweGZmZmZmZmZmLCBT
RFBfRF9EU1RfU1VSRkFDRV9TVFJJREVfMF9EU1RfU1VSRkFDRV9TVFJJREVfU0hJRlQpDQo+
ICsNCj4gKw0KPiArLy8gUmVnaXN0ZXIgU0RQX0RfRFBfQlNfQ0ZHXzANCj4gKyNkZWZpbmUg
U0RQX0RfRFBfQlNfQ0ZHXzAJCQlfTUtfQUREUl9DT05TVCgweDkwNTgpDQo+ICsjZGVmaW5l
IFNEUF9EX0RQX0JTX0NGR18wX0JTX0JZUEFTU19TSElGVAkJCV9NS19TSElGVF9DT05TVCgw
KQ0KPiArI2RlZmluZSBTRFBfRF9EUF9CU19DRkdfMF9CU19CWVBBU1NfRklFTEQJCQlfTUtf
RklFTERfQ09OU1QoMHgxLCBTRFBfRF9EUF9CU19DRkdfMF9CU19CWVBBU1NfU0hJRlQpDQo+
ICsjZGVmaW5lIFNEUF9EX0RQX0JTX0NGR18wX0JTX0JZUEFTU19OTwkJCV9NS19FTlVNX0NP
TlNUKDB4MCkNCj4gKyNkZWZpbmUgU0RQX0RfRFBfQlNfQ0ZHXzBfQlNfQllQQVNTX1lFUwkJ
CV9NS19FTlVNX0NPTlNUKDB4MSkNCj4gKyNkZWZpbmUgU0RQX0RfRFBfQlNfQ0ZHXzBfQlNf
QUxVX0JZUEFTU19TSElGVAkJCV9NS19TSElGVF9DT05TVCgxKQ0KPiArI2RlZmluZSBTRFBf
RF9EUF9CU19DRkdfMF9CU19BTFVfQllQQVNTX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4
MSwgU0RQX0RfRFBfQlNfQ0ZHXzBfQlNfQUxVX0JZUEFTU19TSElGVCkNCj4gKyNkZWZpbmUg
U0RQX0RfRFBfQlNfQ0ZHXzBfQlNfQUxVX0JZUEFTU19OTwkJCV9NS19FTlVNX0NPTlNUKDB4
MCkNCj4gKyNkZWZpbmUgU0RQX0RfRFBfQlNfQ0ZHXzBfQlNfQUxVX0JZUEFTU19ZRVMJCQlf
TUtfRU5VTV9DT05TVCgweDEpDQo+ICsjZGVmaW5lIFNEUF9EX0RQX0JTX0NGR18wX0JTX0FM
VV9BTEdPX1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDIpDQo+ICsjZGVmaW5lIFNEUF9EX0RQ
X0JTX0NGR18wX0JTX0FMVV9BTEdPX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4MywgU0RQ
X0RfRFBfQlNfQ0ZHXzBfQlNfQUxVX0FMR09fU0hJRlQpDQo+ICsjZGVmaW5lIFNEUF9EX0RQ
X0JTX0NGR18wX0JTX0FMVV9BTEdPX01BWAkJCV9NS19FTlVNX0NPTlNUKDB4MCkNCj4gKyNk
ZWZpbmUgU0RQX0RfRFBfQlNfQ0ZHXzBfQlNfQUxVX0FMR09fTUlOCQkJX01LX0VOVU1fQ09O
U1QoMHgxKQ0KPiArI2RlZmluZSBTRFBfRF9EUF9CU19DRkdfMF9CU19BTFVfQUxHT19TVU0J
CQlfTUtfRU5VTV9DT05TVCgweDIpDQo+ICsjZGVmaW5lIFNEUF9EX0RQX0JTX0NGR18wX0JT
X01VTF9CWVBBU1NfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoNCkNCj4gKyNkZWZpbmUgU0RQ
X0RfRFBfQlNfQ0ZHXzBfQlNfTVVMX0JZUEFTU19GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgw
eDEsIFNEUF9EX0RQX0JTX0NGR18wX0JTX01VTF9CWVBBU1NfU0hJRlQpDQo+ICsjZGVmaW5l
IFNEUF9EX0RQX0JTX0NGR18wX0JTX01VTF9CWVBBU1NfTk8JCQlfTUtfRU5VTV9DT05TVCgw
eDApDQo+ICsjZGVmaW5lIFNEUF9EX0RQX0JTX0NGR18wX0JTX01VTF9CWVBBU1NfWUVTCQkJ
X01LX0VOVU1fQ09OU1QoMHgxKQ0KPiArI2RlZmluZSBTRFBfRF9EUF9CU19DRkdfMF9CU19N
VUxfUFJFTFVfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoNSkNCj4gKyNkZWZpbmUgU0RQX0Rf
RFBfQlNfQ0ZHXzBfQlNfTVVMX1BSRUxVX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4MSwg
U0RQX0RfRFBfQlNfQ0ZHXzBfQlNfTVVMX1BSRUxVX1NISUZUKQ0KPiArI2RlZmluZSBTRFBf
RF9EUF9CU19DRkdfMF9CU19NVUxfUFJFTFVfTk8JCQlfTUtfRU5VTV9DT05TVCgweDApDQo+
ICsjZGVmaW5lIFNEUF9EX0RQX0JTX0NGR18wX0JTX01VTF9QUkVMVV9ZRVMJCQlfTUtfRU5V
TV9DT05TVCgweDEpDQo+ICsjZGVmaW5lIFNEUF9EX0RQX0JTX0NGR18wX0JTX1JFTFVfQllQ
QVNTX1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDYpDQo+ICsjZGVmaW5lIFNEUF9EX0RQX0JT
X0NGR18wX0JTX1JFTFVfQllQQVNTX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4MSwgU0RQ
X0RfRFBfQlNfQ0ZHXzBfQlNfUkVMVV9CWVBBU1NfU0hJRlQpDQo+ICsjZGVmaW5lIFNEUF9E
X0RQX0JTX0NGR18wX0JTX1JFTFVfQllQQVNTX05PCQkJX01LX0VOVU1fQ09OU1QoMHgwKQ0K
PiArI2RlZmluZSBTRFBfRF9EUF9CU19DRkdfMF9CU19SRUxVX0JZUEFTU19ZRVMJCQlfTUtf
RU5VTV9DT05TVCgweDEpDQo+ICsNCj4gKw0KPiArLy8gUmVnaXN0ZXIgU0RQX0RfRFBfQlNf
QUxVX0NGR18wDQo+ICsjZGVmaW5lIFNEUF9EX0RQX0JTX0FMVV9DRkdfMAkJCV9NS19BRERS
X0NPTlNUKDB4OTA1YykNCj4gKyNkZWZpbmUgU0RQX0RfRFBfQlNfQUxVX0NGR18wX0JTX0FM
VV9TUkNfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMCkNCj4gKyNkZWZpbmUgU0RQX0RfRFBf
QlNfQUxVX0NGR18wX0JTX0FMVV9TUkNfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHgxLCBT
RFBfRF9EUF9CU19BTFVfQ0ZHXzBfQlNfQUxVX1NSQ19TSElGVCkNCj4gKyNkZWZpbmUgU0RQ
X0RfRFBfQlNfQUxVX0NGR18wX0JTX0FMVV9TUkNfUkVHCQkJX01LX0VOVU1fQ09OU1QoMHgw
KQ0KPiArI2RlZmluZSBTRFBfRF9EUF9CU19BTFVfQ0ZHXzBfQlNfQUxVX1NSQ19NRU0JCQlf
TUtfRU5VTV9DT05TVCgweDEpDQo+ICsjZGVmaW5lIFNEUF9EX0RQX0JTX0FMVV9DRkdfMF9C
U19BTFVfU0hJRlRfVkFMVUVfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoOCkNCj4gKyNkZWZp
bmUgU0RQX0RfRFBfQlNfQUxVX0NGR18wX0JTX0FMVV9TSElGVF9WQUxVRV9GSUVMRAkJCV9N
S19GSUVMRF9DT05TVCgweDNmLCBTRFBfRF9EUF9CU19BTFVfQ0ZHXzBfQlNfQUxVX1NISUZU
X1ZBTFVFX1NISUZUKQ0KPiArDQo+ICsNCj4gKy8vIFJlZ2lzdGVyIFNEUF9EX0RQX0JTX0FM
VV9TUkNfVkFMVUVfMA0KPiArI2RlZmluZSBTRFBfRF9EUF9CU19BTFVfU1JDX1ZBTFVFXzAJ
CQlfTUtfQUREUl9DT05TVCgweDkwNjApDQo+ICsjZGVmaW5lIFNEUF9EX0RQX0JTX0FMVV9T
UkNfVkFMVUVfMF9CU19BTFVfT1BFUkFORF9TSElGVAkJCV9NS19TSElGVF9DT05TVCgwKQ0K
PiArI2RlZmluZSBTRFBfRF9EUF9CU19BTFVfU1JDX1ZBTFVFXzBfQlNfQUxVX09QRVJBTkRf
RklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHhmZmZmLCBTRFBfRF9EUF9CU19BTFVfU1JDX1ZB
TFVFXzBfQlNfQUxVX09QRVJBTkRfU0hJRlQpDQo+ICsNCj4gKw0KPiArLy8gUmVnaXN0ZXIg
U0RQX0RfRFBfQlNfTVVMX0NGR18wDQo+ICsjZGVmaW5lIFNEUF9EX0RQX0JTX01VTF9DRkdf
MAkJCV9NS19BRERSX0NPTlNUKDB4OTA2NCkNCj4gKyNkZWZpbmUgU0RQX0RfRFBfQlNfTVVM
X0NGR18wX0JTX01VTF9TUkNfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMCkNCj4gKyNkZWZp
bmUgU0RQX0RfRFBfQlNfTVVMX0NGR18wX0JTX01VTF9TUkNfRklFTEQJCQlfTUtfRklFTERf
Q09OU1QoMHgxLCBTRFBfRF9EUF9CU19NVUxfQ0ZHXzBfQlNfTVVMX1NSQ19TSElGVCkNCj4g
KyNkZWZpbmUgU0RQX0RfRFBfQlNfTVVMX0NGR18wX0JTX01VTF9TUkNfUkVHCQkJX01LX0VO
VU1fQ09OU1QoMHgwKQ0KPiArI2RlZmluZSBTRFBfRF9EUF9CU19NVUxfQ0ZHXzBfQlNfTVVM
X1NSQ19NRU0JCQlfTUtfRU5VTV9DT05TVCgweDEpDQo+ICsjZGVmaW5lIFNEUF9EX0RQX0JT
X01VTF9DRkdfMF9CU19NVUxfU0hJRlRfVkFMVUVfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1Qo
OCkNCj4gKyNkZWZpbmUgU0RQX0RfRFBfQlNfTVVMX0NGR18wX0JTX01VTF9TSElGVF9WQUxV
RV9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweGZmLCBTRFBfRF9EUF9CU19NVUxfQ0ZHXzBf
QlNfTVVMX1NISUZUX1ZBTFVFX1NISUZUKQ0KPiArDQo+ICsNCj4gKy8vIFJlZ2lzdGVyIFNE
UF9EX0RQX0JTX01VTF9TUkNfVkFMVUVfMA0KPiArI2RlZmluZSBTRFBfRF9EUF9CU19NVUxf
U1JDX1ZBTFVFXzAJCQlfTUtfQUREUl9DT05TVCgweDkwNjgpDQo+ICsjZGVmaW5lIFNEUF9E
X0RQX0JTX01VTF9TUkNfVkFMVUVfMF9CU19NVUxfT1BFUkFORF9TSElGVAkJCV9NS19TSElG
VF9DT05TVCgwKQ0KPiArI2RlZmluZSBTRFBfRF9EUF9CU19NVUxfU1JDX1ZBTFVFXzBfQlNf
TVVMX09QRVJBTkRfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHhmZmZmLCBTRFBfRF9EUF9C
U19NVUxfU1JDX1ZBTFVFXzBfQlNfTVVMX09QRVJBTkRfU0hJRlQpDQo+ICsNCj4gKw0KPiAr
Ly8gUmVnaXN0ZXIgU0RQX0RfRFBfQk5fQ0ZHXzANCj4gKyNkZWZpbmUgU0RQX0RfRFBfQk5f
Q0ZHXzAJCQlfTUtfQUREUl9DT05TVCgweDkwNmMpDQo+ICsjZGVmaW5lIFNEUF9EX0RQX0JO
X0NGR18wX0JOX0JZUEFTU19TSElGVAkJCV9NS19TSElGVF9DT05TVCgwKQ0KPiArI2RlZmlu
ZSBTRFBfRF9EUF9CTl9DRkdfMF9CTl9CWVBBU1NfRklFTEQJCQlfTUtfRklFTERfQ09OU1Qo
MHgxLCBTRFBfRF9EUF9CTl9DRkdfMF9CTl9CWVBBU1NfU0hJRlQpDQo+ICsjZGVmaW5lIFNE
UF9EX0RQX0JOX0NGR18wX0JOX0JZUEFTU19OTwkJCV9NS19FTlVNX0NPTlNUKDB4MCkNCj4g
KyNkZWZpbmUgU0RQX0RfRFBfQk5fQ0ZHXzBfQk5fQllQQVNTX1lFUwkJCV9NS19FTlVNX0NP
TlNUKDB4MSkNCj4gKyNkZWZpbmUgU0RQX0RfRFBfQk5fQ0ZHXzBfQk5fQUxVX0JZUEFTU19T
SElGVAkJCV9NS19TSElGVF9DT05TVCgxKQ0KPiArI2RlZmluZSBTRFBfRF9EUF9CTl9DRkdf
MF9CTl9BTFVfQllQQVNTX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4MSwgU0RQX0RfRFBf
Qk5fQ0ZHXzBfQk5fQUxVX0JZUEFTU19TSElGVCkNCj4gKyNkZWZpbmUgU0RQX0RfRFBfQk5f
Q0ZHXzBfQk5fQUxVX0JZUEFTU19OTwkJCV9NS19FTlVNX0NPTlNUKDB4MCkNCj4gKyNkZWZp
bmUgU0RQX0RfRFBfQk5fQ0ZHXzBfQk5fQUxVX0JZUEFTU19ZRVMJCQlfTUtfRU5VTV9DT05T
VCgweDEpDQo+ICsjZGVmaW5lIFNEUF9EX0RQX0JOX0NGR18wX0JOX0FMVV9BTEdPX1NISUZU
CQkJX01LX1NISUZUX0NPTlNUKDIpDQo+ICsjZGVmaW5lIFNEUF9EX0RQX0JOX0NGR18wX0JO
X0FMVV9BTEdPX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4MywgU0RQX0RfRFBfQk5fQ0ZH
XzBfQk5fQUxVX0FMR09fU0hJRlQpDQo+ICsjZGVmaW5lIFNEUF9EX0RQX0JOX0NGR18wX0JO
X0FMVV9BTEdPX01BWAkJCV9NS19FTlVNX0NPTlNUKDB4MCkNCj4gKyNkZWZpbmUgU0RQX0Rf
RFBfQk5fQ0ZHXzBfQk5fQUxVX0FMR09fTUlOCQkJX01LX0VOVU1fQ09OU1QoMHgxKQ0KPiAr
I2RlZmluZSBTRFBfRF9EUF9CTl9DRkdfMF9CTl9BTFVfQUxHT19TVU0JCQlfTUtfRU5VTV9D
T05TVCgweDIpDQo+ICsjZGVmaW5lIFNEUF9EX0RQX0JOX0NGR18wX0JOX01VTF9CWVBBU1Nf
U0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoNCkNCj4gKyNkZWZpbmUgU0RQX0RfRFBfQk5fQ0ZH
XzBfQk5fTVVMX0JZUEFTU19GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweDEsIFNEUF9EX0RQ
X0JOX0NGR18wX0JOX01VTF9CWVBBU1NfU0hJRlQpDQo+ICsjZGVmaW5lIFNEUF9EX0RQX0JO
X0NGR18wX0JOX01VTF9CWVBBU1NfTk8JCQlfTUtfRU5VTV9DT05TVCgweDApDQo+ICsjZGVm
aW5lIFNEUF9EX0RQX0JOX0NGR18wX0JOX01VTF9CWVBBU1NfWUVTCQkJX01LX0VOVU1fQ09O
U1QoMHgxKQ0KPiArI2RlZmluZSBTRFBfRF9EUF9CTl9DRkdfMF9CTl9NVUxfUFJFTFVfU0hJ
RlQJCQlfTUtfU0hJRlRfQ09OU1QoNSkNCj4gKyNkZWZpbmUgU0RQX0RfRFBfQk5fQ0ZHXzBf
Qk5fTVVMX1BSRUxVX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4MSwgU0RQX0RfRFBfQk5f
Q0ZHXzBfQk5fTVVMX1BSRUxVX1NISUZUKQ0KPiArI2RlZmluZSBTRFBfRF9EUF9CTl9DRkdf
MF9CTl9NVUxfUFJFTFVfTk8JCQlfTUtfRU5VTV9DT05TVCgweDApDQo+ICsjZGVmaW5lIFNE
UF9EX0RQX0JOX0NGR18wX0JOX01VTF9QUkVMVV9ZRVMJCQlfTUtfRU5VTV9DT05TVCgweDEp
DQo+ICsjZGVmaW5lIFNEUF9EX0RQX0JOX0NGR18wX0JOX1JFTFVfQllQQVNTX1NISUZUCQkJ
X01LX1NISUZUX0NPTlNUKDYpDQo+ICsjZGVmaW5lIFNEUF9EX0RQX0JOX0NGR18wX0JOX1JF
TFVfQllQQVNTX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4MSwgU0RQX0RfRFBfQk5fQ0ZH
XzBfQk5fUkVMVV9CWVBBU1NfU0hJRlQpDQo+ICsjZGVmaW5lIFNEUF9EX0RQX0JOX0NGR18w
X0JOX1JFTFVfQllQQVNTX05PCQkJX01LX0VOVU1fQ09OU1QoMHgwKQ0KPiArI2RlZmluZSBT
RFBfRF9EUF9CTl9DRkdfMF9CTl9SRUxVX0JZUEFTU19ZRVMJCQlfTUtfRU5VTV9DT05TVCgw
eDEpDQo+ICsNCj4gKw0KPiArLy8gUmVnaXN0ZXIgU0RQX0RfRFBfQk5fQUxVX0NGR18wDQo+
ICsjZGVmaW5lIFNEUF9EX0RQX0JOX0FMVV9DRkdfMAkJCV9NS19BRERSX0NPTlNUKDB4OTA3
MCkNCj4gKyNkZWZpbmUgU0RQX0RfRFBfQk5fQUxVX0NGR18wX0JOX0FMVV9TUkNfU0hJRlQJ
CQlfTUtfU0hJRlRfQ09OU1QoMCkNCj4gKyNkZWZpbmUgU0RQX0RfRFBfQk5fQUxVX0NGR18w
X0JOX0FMVV9TUkNfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHgxLCBTRFBfRF9EUF9CTl9B
TFVfQ0ZHXzBfQk5fQUxVX1NSQ19TSElGVCkNCj4gKyNkZWZpbmUgU0RQX0RfRFBfQk5fQUxV
X0NGR18wX0JOX0FMVV9TUkNfUkVHCQkJX01LX0VOVU1fQ09OU1QoMHgwKQ0KPiArI2RlZmlu
ZSBTRFBfRF9EUF9CTl9BTFVfQ0ZHXzBfQk5fQUxVX1NSQ19NRU0JCQlfTUtfRU5VTV9DT05T
VCgweDEpDQo+ICsjZGVmaW5lIFNEUF9EX0RQX0JOX0FMVV9DRkdfMF9CTl9BTFVfU0hJRlRf
VkFMVUVfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoOCkNCj4gKyNkZWZpbmUgU0RQX0RfRFBf
Qk5fQUxVX0NGR18wX0JOX0FMVV9TSElGVF9WQUxVRV9GSUVMRAkJCV9NS19GSUVMRF9DT05T
VCgweDNmLCBTRFBfRF9EUF9CTl9BTFVfQ0ZHXzBfQk5fQUxVX1NISUZUX1ZBTFVFX1NISUZU
KQ0KPiArDQo+ICsNCj4gKy8vIFJlZ2lzdGVyIFNEUF9EX0RQX0JOX0FMVV9TUkNfVkFMVUVf
MA0KPiArI2RlZmluZSBTRFBfRF9EUF9CTl9BTFVfU1JDX1ZBTFVFXzAJCQlfTUtfQUREUl9D
T05TVCgweDkwNzQpDQo+ICsjZGVmaW5lIFNEUF9EX0RQX0JOX0FMVV9TUkNfVkFMVUVfMF9C
Tl9BTFVfT1BFUkFORF9TSElGVAkJCV9NS19TSElGVF9DT05TVCgwKQ0KPiArI2RlZmluZSBT
RFBfRF9EUF9CTl9BTFVfU1JDX1ZBTFVFXzBfQk5fQUxVX09QRVJBTkRfRklFTEQJCQlfTUtf
RklFTERfQ09OU1QoMHhmZmZmLCBTRFBfRF9EUF9CTl9BTFVfU1JDX1ZBTFVFXzBfQk5fQUxV
X09QRVJBTkRfU0hJRlQpDQo+ICsNCj4gKw0KPiArLy8gUmVnaXN0ZXIgU0RQX0RfRFBfQk5f
TVVMX0NGR18wDQo+ICsjZGVmaW5lIFNEUF9EX0RQX0JOX01VTF9DRkdfMAkJCV9NS19BRERS
X0NPTlNUKDB4OTA3OCkNCj4gKyNkZWZpbmUgU0RQX0RfRFBfQk5fTVVMX0NGR18wX0JOX01V
TF9TUkNfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMCkNCj4gKyNkZWZpbmUgU0RQX0RfRFBf
Qk5fTVVMX0NGR18wX0JOX01VTF9TUkNfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHgxLCBT
RFBfRF9EUF9CTl9NVUxfQ0ZHXzBfQk5fTVVMX1NSQ19TSElGVCkNCj4gKyNkZWZpbmUgU0RQ
X0RfRFBfQk5fTVVMX0NGR18wX0JOX01VTF9TUkNfUkVHCQkJX01LX0VOVU1fQ09OU1QoMHgw
KQ0KPiArI2RlZmluZSBTRFBfRF9EUF9CTl9NVUxfQ0ZHXzBfQk5fTVVMX1NSQ19NRU0JCQlf
TUtfRU5VTV9DT05TVCgweDEpDQo+ICsjZGVmaW5lIFNEUF9EX0RQX0JOX01VTF9DRkdfMF9C
Tl9NVUxfU0hJRlRfVkFMVUVfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoOCkNCj4gKyNkZWZp
bmUgU0RQX0RfRFBfQk5fTVVMX0NGR18wX0JOX01VTF9TSElGVF9WQUxVRV9GSUVMRAkJCV9N
S19GSUVMRF9DT05TVCgweGZmLCBTRFBfRF9EUF9CTl9NVUxfQ0ZHXzBfQk5fTVVMX1NISUZU
X1ZBTFVFX1NISUZUKQ0KPiArDQo+ICsNCj4gKy8vIFJlZ2lzdGVyIFNEUF9EX0RQX0JOX01V
TF9TUkNfVkFMVUVfMA0KPiArI2RlZmluZSBTRFBfRF9EUF9CTl9NVUxfU1JDX1ZBTFVFXzAJ
CQlfTUtfQUREUl9DT05TVCgweDkwN2MpDQo+ICsjZGVmaW5lIFNEUF9EX0RQX0JOX01VTF9T
UkNfVkFMVUVfMF9CTl9NVUxfT1BFUkFORF9TSElGVAkJCV9NS19TSElGVF9DT05TVCgwKQ0K
PiArI2RlZmluZSBTRFBfRF9EUF9CTl9NVUxfU1JDX1ZBTFVFXzBfQk5fTVVMX09QRVJBTkRf
RklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHhmZmZmLCBTRFBfRF9EUF9CTl9NVUxfU1JDX1ZB
TFVFXzBfQk5fTVVMX09QRVJBTkRfU0hJRlQpDQo+ICsNCj4gKw0KPiArLy8gUmVnaXN0ZXIg
U0RQX0RfRFBfRVdfQ0ZHXzANCj4gKyNkZWZpbmUgU0RQX0RfRFBfRVdfQ0ZHXzAJCQlfTUtf
QUREUl9DT05TVCgweDkwODApDQo+ICsjZGVmaW5lIFNEUF9EX0RQX0VXX0NGR18wX0VXX0JZ
UEFTU19TSElGVAkJCV9NS19TSElGVF9DT05TVCgwKQ0KPiArI2RlZmluZSBTRFBfRF9EUF9F
V19DRkdfMF9FV19CWVBBU1NfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHgxLCBTRFBfRF9E
UF9FV19DRkdfMF9FV19CWVBBU1NfU0hJRlQpDQo+ICsjZGVmaW5lIFNEUF9EX0RQX0VXX0NG
R18wX0VXX0JZUEFTU19OTwkJCV9NS19FTlVNX0NPTlNUKDB4MCkNCj4gKyNkZWZpbmUgU0RQ
X0RfRFBfRVdfQ0ZHXzBfRVdfQllQQVNTX1lFUwkJCV9NS19FTlVNX0NPTlNUKDB4MSkNCj4g
KyNkZWZpbmUgU0RQX0RfRFBfRVdfQ0ZHXzBfRVdfQUxVX0JZUEFTU19TSElGVAkJCV9NS19T
SElGVF9DT05TVCgxKQ0KPiArI2RlZmluZSBTRFBfRF9EUF9FV19DRkdfMF9FV19BTFVfQllQ
QVNTX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4MSwgU0RQX0RfRFBfRVdfQ0ZHXzBfRVdf
QUxVX0JZUEFTU19TSElGVCkNCj4gKyNkZWZpbmUgU0RQX0RfRFBfRVdfQ0ZHXzBfRVdfQUxV
X0JZUEFTU19OTwkJCV9NS19FTlVNX0NPTlNUKDB4MCkNCj4gKyNkZWZpbmUgU0RQX0RfRFBf
RVdfQ0ZHXzBfRVdfQUxVX0JZUEFTU19ZRVMJCQlfTUtfRU5VTV9DT05TVCgweDEpDQo+ICsj
ZGVmaW5lIFNEUF9EX0RQX0VXX0NGR18wX0VXX0FMVV9BTEdPX1NISUZUCQkJX01LX1NISUZU
X0NPTlNUKDIpDQo+ICsjZGVmaW5lIFNEUF9EX0RQX0VXX0NGR18wX0VXX0FMVV9BTEdPX0ZJ
RUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4MywgU0RQX0RfRFBfRVdfQ0ZHXzBfRVdfQUxVX0FM
R09fU0hJRlQpDQo+ICsjZGVmaW5lIFNEUF9EX0RQX0VXX0NGR18wX0VXX0FMVV9BTEdPX01B
WAkJCV9NS19FTlVNX0NPTlNUKDB4MCkNCj4gKyNkZWZpbmUgU0RQX0RfRFBfRVdfQ0ZHXzBf
RVdfQUxVX0FMR09fTUlOCQkJX01LX0VOVU1fQ09OU1QoMHgxKQ0KPiArI2RlZmluZSBTRFBf
RF9EUF9FV19DRkdfMF9FV19BTFVfQUxHT19TVU0JCQlfTUtfRU5VTV9DT05TVCgweDIpDQo+
ICsjZGVmaW5lIFNEUF9EX0RQX0VXX0NGR18wX0VXX0FMVV9BTEdPX0VRTAkJCV9NS19FTlVN
X0NPTlNUKDB4MykNCj4gKyNkZWZpbmUgU0RQX0RfRFBfRVdfQ0ZHXzBfRVdfTVVMX0JZUEFT
U19TSElGVAkJCV9NS19TSElGVF9DT05TVCg0KQ0KPiArI2RlZmluZSBTRFBfRF9EUF9FV19D
RkdfMF9FV19NVUxfQllQQVNTX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4MSwgU0RQX0Rf
RFBfRVdfQ0ZHXzBfRVdfTVVMX0JZUEFTU19TSElGVCkNCj4gKyNkZWZpbmUgU0RQX0RfRFBf
RVdfQ0ZHXzBfRVdfTVVMX0JZUEFTU19OTwkJCV9NS19FTlVNX0NPTlNUKDB4MCkNCj4gKyNk
ZWZpbmUgU0RQX0RfRFBfRVdfQ0ZHXzBfRVdfTVVMX0JZUEFTU19ZRVMJCQlfTUtfRU5VTV9D
T05TVCgweDEpDQo+ICsjZGVmaW5lIFNEUF9EX0RQX0VXX0NGR18wX0VXX01VTF9QUkVMVV9T
SElGVAkJCV9NS19TSElGVF9DT05TVCg1KQ0KPiArI2RlZmluZSBTRFBfRF9EUF9FV19DRkdf
MF9FV19NVUxfUFJFTFVfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHgxLCBTRFBfRF9EUF9F
V19DRkdfMF9FV19NVUxfUFJFTFVfU0hJRlQpDQo+ICsjZGVmaW5lIFNEUF9EX0RQX0VXX0NG
R18wX0VXX01VTF9QUkVMVV9OTwkJCV9NS19FTlVNX0NPTlNUKDB4MCkNCj4gKyNkZWZpbmUg
U0RQX0RfRFBfRVdfQ0ZHXzBfRVdfTVVMX1BSRUxVX1lFUwkJCV9NS19FTlVNX0NPTlNUKDB4
MSkNCj4gKyNkZWZpbmUgU0RQX0RfRFBfRVdfQ0ZHXzBfRVdfTFVUX0JZUEFTU19TSElGVAkJ
CV9NS19TSElGVF9DT05TVCg2KQ0KPiArI2RlZmluZSBTRFBfRF9EUF9FV19DRkdfMF9FV19M
VVRfQllQQVNTX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4MSwgU0RQX0RfRFBfRVdfQ0ZH
XzBfRVdfTFVUX0JZUEFTU19TSElGVCkNCj4gKyNkZWZpbmUgU0RQX0RfRFBfRVdfQ0ZHXzBf
RVdfTFVUX0JZUEFTU19OTwkJCV9NS19FTlVNX0NPTlNUKDB4MCkNCj4gKyNkZWZpbmUgU0RQ
X0RfRFBfRVdfQ0ZHXzBfRVdfTFVUX0JZUEFTU19ZRVMJCQlfTUtfRU5VTV9DT05TVCgweDEp
DQo+ICsNCj4gKw0KPiArLy8gUmVnaXN0ZXIgU0RQX0RfRFBfRVdfQUxVX0NGR18wDQo+ICsj
ZGVmaW5lIFNEUF9EX0RQX0VXX0FMVV9DRkdfMAkJCV9NS19BRERSX0NPTlNUKDB4OTA4NCkN
Cj4gKyNkZWZpbmUgU0RQX0RfRFBfRVdfQUxVX0NGR18wX0VXX0FMVV9TUkNfU0hJRlQJCQlf
TUtfU0hJRlRfQ09OU1QoMCkNCj4gKyNkZWZpbmUgU0RQX0RfRFBfRVdfQUxVX0NGR18wX0VX
X0FMVV9TUkNfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHgxLCBTRFBfRF9EUF9FV19BTFVf
Q0ZHXzBfRVdfQUxVX1NSQ19TSElGVCkNCj4gKyNkZWZpbmUgU0RQX0RfRFBfRVdfQUxVX0NG
R18wX0VXX0FMVV9TUkNfUkVHCQkJX01LX0VOVU1fQ09OU1QoMHgwKQ0KPiArI2RlZmluZSBT
RFBfRF9EUF9FV19BTFVfQ0ZHXzBfRVdfQUxVX1NSQ19NRU0JCQlfTUtfRU5VTV9DT05TVCgw
eDEpDQo+ICsjZGVmaW5lIFNEUF9EX0RQX0VXX0FMVV9DRkdfMF9FV19BTFVfQ1ZUX0JZUEFT
U19TSElGVAkJCV9NS19TSElGVF9DT05TVCgxKQ0KPiArI2RlZmluZSBTRFBfRF9EUF9FV19B
TFVfQ0ZHXzBfRVdfQUxVX0NWVF9CWVBBU1NfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHgx
LCBTRFBfRF9EUF9FV19BTFVfQ0ZHXzBfRVdfQUxVX0NWVF9CWVBBU1NfU0hJRlQpDQo+ICsj
ZGVmaW5lIFNEUF9EX0RQX0VXX0FMVV9DRkdfMF9FV19BTFVfQ1ZUX0JZUEFTU19OTwkJCV9N
S19FTlVNX0NPTlNUKDB4MCkNCj4gKyNkZWZpbmUgU0RQX0RfRFBfRVdfQUxVX0NGR18wX0VX
X0FMVV9DVlRfQllQQVNTX1lFUwkJCV9NS19FTlVNX0NPTlNUKDB4MSkNCj4gKw0KPiArDQo+
ICsvLyBSZWdpc3RlciBTRFBfRF9EUF9FV19BTFVfU1JDX1ZBTFVFXzANCj4gKyNkZWZpbmUg
U0RQX0RfRFBfRVdfQUxVX1NSQ19WQUxVRV8wCQkJX01LX0FERFJfQ09OU1QoMHg5MDg4KQ0K
PiArI2RlZmluZSBTRFBfRF9EUF9FV19BTFVfU1JDX1ZBTFVFXzBfRVdfQUxVX09QRVJBTkRf
U0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMCkNCj4gKyNkZWZpbmUgU0RQX0RfRFBfRVdfQUxV
X1NSQ19WQUxVRV8wX0VXX0FMVV9PUEVSQU5EX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4
ZmZmZmZmZmYsIFNEUF9EX0RQX0VXX0FMVV9TUkNfVkFMVUVfMF9FV19BTFVfT1BFUkFORF9T
SElGVCkNCj4gKw0KPiArDQo+ICsvLyBSZWdpc3RlciBTRFBfRF9EUF9FV19BTFVfQ1ZUX09G
RlNFVF9WQUxVRV8wDQo+ICsjZGVmaW5lIFNEUF9EX0RQX0VXX0FMVV9DVlRfT0ZGU0VUX1ZB
TFVFXzAJCQlfTUtfQUREUl9DT05TVCgweDkwOGMpDQo+ICsjZGVmaW5lIFNEUF9EX0RQX0VX
X0FMVV9DVlRfT0ZGU0VUX1ZBTFVFXzBfRVdfQUxVX0NWVF9PRkZTRVRfU0hJRlQJCQlfTUtf
U0hJRlRfQ09OU1QoMCkNCj4gKyNkZWZpbmUgU0RQX0RfRFBfRVdfQUxVX0NWVF9PRkZTRVRf
VkFMVUVfMF9FV19BTFVfQ1ZUX09GRlNFVF9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweGZm
ZmZmZmZmLCBTRFBfRF9EUF9FV19BTFVfQ1ZUX09GRlNFVF9WQUxVRV8wX0VXX0FMVV9DVlRf
T0ZGU0VUX1NISUZUKQ0KPiArDQo+ICsNCj4gKy8vIFJlZ2lzdGVyIFNEUF9EX0RQX0VXX0FM
VV9DVlRfU0NBTEVfVkFMVUVfMA0KPiArI2RlZmluZSBTRFBfRF9EUF9FV19BTFVfQ1ZUX1ND
QUxFX1ZBTFVFXzAJCQlfTUtfQUREUl9DT05TVCgweDkwOTApDQo+ICsjZGVmaW5lIFNEUF9E
X0RQX0VXX0FMVV9DVlRfU0NBTEVfVkFMVUVfMF9FV19BTFVfQ1ZUX1NDQUxFX1NISUZUCQkJ
X01LX1NISUZUX0NPTlNUKDApDQo+ICsjZGVmaW5lIFNEUF9EX0RQX0VXX0FMVV9DVlRfU0NB
TEVfVkFMVUVfMF9FV19BTFVfQ1ZUX1NDQUxFX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4
ZmZmZiwgU0RQX0RfRFBfRVdfQUxVX0NWVF9TQ0FMRV9WQUxVRV8wX0VXX0FMVV9DVlRfU0NB
TEVfU0hJRlQpDQo+ICsNCj4gKw0KPiArLy8gUmVnaXN0ZXIgU0RQX0RfRFBfRVdfQUxVX0NW
VF9UUlVOQ0FURV9WQUxVRV8wDQo+ICsjZGVmaW5lIFNEUF9EX0RQX0VXX0FMVV9DVlRfVFJV
TkNBVEVfVkFMVUVfMAkJCV9NS19BRERSX0NPTlNUKDB4OTA5NCkNCj4gKyNkZWZpbmUgU0RQ
X0RfRFBfRVdfQUxVX0NWVF9UUlVOQ0FURV9WQUxVRV8wX0VXX0FMVV9DVlRfVFJVTkNBVEVf
U0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMCkNCj4gKyNkZWZpbmUgU0RQX0RfRFBfRVdfQUxV
X0NWVF9UUlVOQ0FURV9WQUxVRV8wX0VXX0FMVV9DVlRfVFJVTkNBVEVfRklFTEQJCQlfTUtf
RklFTERfQ09OU1QoMHgzZiwgU0RQX0RfRFBfRVdfQUxVX0NWVF9UUlVOQ0FURV9WQUxVRV8w
X0VXX0FMVV9DVlRfVFJVTkNBVEVfU0hJRlQpDQo+ICsNCj4gKw0KPiArLy8gUmVnaXN0ZXIg
U0RQX0RfRFBfRVdfTVVMX0NGR18wDQo+ICsjZGVmaW5lIFNEUF9EX0RQX0VXX01VTF9DRkdf
MAkJCV9NS19BRERSX0NPTlNUKDB4OTA5OCkNCj4gKyNkZWZpbmUgU0RQX0RfRFBfRVdfTVVM
X0NGR18wX0VXX01VTF9TUkNfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMCkNCj4gKyNkZWZp
bmUgU0RQX0RfRFBfRVdfTVVMX0NGR18wX0VXX01VTF9TUkNfRklFTEQJCQlfTUtfRklFTERf
Q09OU1QoMHgxLCBTRFBfRF9EUF9FV19NVUxfQ0ZHXzBfRVdfTVVMX1NSQ19TSElGVCkNCj4g
KyNkZWZpbmUgU0RQX0RfRFBfRVdfTVVMX0NGR18wX0VXX01VTF9TUkNfUkVHCQkJX01LX0VO
VU1fQ09OU1QoMHgwKQ0KPiArI2RlZmluZSBTRFBfRF9EUF9FV19NVUxfQ0ZHXzBfRVdfTVVM
X1NSQ19NRU0JCQlfTUtfRU5VTV9DT05TVCgweDEpDQo+ICsjZGVmaW5lIFNEUF9EX0RQX0VX
X01VTF9DRkdfMF9FV19NVUxfQ1ZUX0JZUEFTU19TSElGVAkJCV9NS19TSElGVF9DT05TVCgx
KQ0KPiArI2RlZmluZSBTRFBfRF9EUF9FV19NVUxfQ0ZHXzBfRVdfTVVMX0NWVF9CWVBBU1Nf
RklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHgxLCBTRFBfRF9EUF9FV19NVUxfQ0ZHXzBfRVdf
TVVMX0NWVF9CWVBBU1NfU0hJRlQpDQo+ICsjZGVmaW5lIFNEUF9EX0RQX0VXX01VTF9DRkdf
MF9FV19NVUxfQ1ZUX0JZUEFTU19OTwkJCV9NS19FTlVNX0NPTlNUKDB4MCkNCj4gKyNkZWZp
bmUgU0RQX0RfRFBfRVdfTVVMX0NGR18wX0VXX01VTF9DVlRfQllQQVNTX1lFUwkJCV9NS19F
TlVNX0NPTlNUKDB4MSkNCj4gKw0KPiArDQo+ICsvLyBSZWdpc3RlciBTRFBfRF9EUF9FV19N
VUxfU1JDX1ZBTFVFXzANCj4gKyNkZWZpbmUgU0RQX0RfRFBfRVdfTVVMX1NSQ19WQUxVRV8w
CQkJX01LX0FERFJfQ09OU1QoMHg5MDljKQ0KPiArI2RlZmluZSBTRFBfRF9EUF9FV19NVUxf
U1JDX1ZBTFVFXzBfRVdfTVVMX09QRVJBTkRfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMCkN
Cj4gKyNkZWZpbmUgU0RQX0RfRFBfRVdfTVVMX1NSQ19WQUxVRV8wX0VXX01VTF9PUEVSQU5E
X0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4ZmZmZmZmZmYsIFNEUF9EX0RQX0VXX01VTF9T
UkNfVkFMVUVfMF9FV19NVUxfT1BFUkFORF9TSElGVCkNCj4gKw0KPiArDQo+ICsvLyBSZWdp
c3RlciBTRFBfRF9EUF9FV19NVUxfQ1ZUX09GRlNFVF9WQUxVRV8wDQo+ICsjZGVmaW5lIFNE
UF9EX0RQX0VXX01VTF9DVlRfT0ZGU0VUX1ZBTFVFXzAJCQlfTUtfQUREUl9DT05TVCgweDkw
YTApDQo+ICsjZGVmaW5lIFNEUF9EX0RQX0VXX01VTF9DVlRfT0ZGU0VUX1ZBTFVFXzBfRVdf
TVVMX0NWVF9PRkZTRVRfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMCkNCj4gKyNkZWZpbmUg
U0RQX0RfRFBfRVdfTVVMX0NWVF9PRkZTRVRfVkFMVUVfMF9FV19NVUxfQ1ZUX09GRlNFVF9G
SUVMRAkJCV9NS19GSUVMRF9DT05TVCgweGZmZmZmZmZmLCBTRFBfRF9EUF9FV19NVUxfQ1ZU
X09GRlNFVF9WQUxVRV8wX0VXX01VTF9DVlRfT0ZGU0VUX1NISUZUKQ0KPiArDQo+ICsNCj4g
Ky8vIFJlZ2lzdGVyIFNEUF9EX0RQX0VXX01VTF9DVlRfU0NBTEVfVkFMVUVfMA0KPiArI2Rl
ZmluZSBTRFBfRF9EUF9FV19NVUxfQ1ZUX1NDQUxFX1ZBTFVFXzAJCQlfTUtfQUREUl9DT05T
VCgweDkwYTQpDQo+ICsjZGVmaW5lIFNEUF9EX0RQX0VXX01VTF9DVlRfU0NBTEVfVkFMVUVf
MF9FV19NVUxfQ1ZUX1NDQUxFX1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDApDQo+ICsjZGVm
aW5lIFNEUF9EX0RQX0VXX01VTF9DVlRfU0NBTEVfVkFMVUVfMF9FV19NVUxfQ1ZUX1NDQUxF
X0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4ZmZmZiwgU0RQX0RfRFBfRVdfTVVMX0NWVF9T
Q0FMRV9WQUxVRV8wX0VXX01VTF9DVlRfU0NBTEVfU0hJRlQpDQo+ICsNCj4gKw0KPiArLy8g
UmVnaXN0ZXIgU0RQX0RfRFBfRVdfTVVMX0NWVF9UUlVOQ0FURV9WQUxVRV8wDQo+ICsjZGVm
aW5lIFNEUF9EX0RQX0VXX01VTF9DVlRfVFJVTkNBVEVfVkFMVUVfMAkJCV9NS19BRERSX0NP
TlNUKDB4OTBhOCkNCj4gKyNkZWZpbmUgU0RQX0RfRFBfRVdfTVVMX0NWVF9UUlVOQ0FURV9W
QUxVRV8wX0VXX01VTF9DVlRfVFJVTkNBVEVfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMCkN
Cj4gKyNkZWZpbmUgU0RQX0RfRFBfRVdfTVVMX0NWVF9UUlVOQ0FURV9WQUxVRV8wX0VXX01V
TF9DVlRfVFJVTkNBVEVfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHgzZiwgU0RQX0RfRFBf
RVdfTVVMX0NWVF9UUlVOQ0FURV9WQUxVRV8wX0VXX01VTF9DVlRfVFJVTkNBVEVfU0hJRlQp
DQo+ICsNCj4gKw0KPiArLy8gUmVnaXN0ZXIgU0RQX0RfRFBfRVdfVFJVTkNBVEVfVkFMVUVf
MA0KPiArI2RlZmluZSBTRFBfRF9EUF9FV19UUlVOQ0FURV9WQUxVRV8wCQkJX01LX0FERFJf
Q09OU1QoMHg5MGFjKQ0KPiArI2RlZmluZSBTRFBfRF9EUF9FV19UUlVOQ0FURV9WQUxVRV8w
X0VXX1RSVU5DQVRFX1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDApDQo+ICsjZGVmaW5lIFNE
UF9EX0RQX0VXX1RSVU5DQVRFX1ZBTFVFXzBfRVdfVFJVTkNBVEVfRklFTEQJCQlfTUtfRklF
TERfQ09OU1QoMHgzZmYsIFNEUF9EX0RQX0VXX1RSVU5DQVRFX1ZBTFVFXzBfRVdfVFJVTkNB
VEVfU0hJRlQpDQo+ICsNCj4gKw0KPiArLy8gUmVnaXN0ZXIgU0RQX0RfRkVBVFVSRV9NT0RF
X0NGR18wDQo+ICsjZGVmaW5lIFNEUF9EX0ZFQVRVUkVfTU9ERV9DRkdfMAkJCV9NS19BRERS
X0NPTlNUKDB4OTBiMCkNCj4gKyNkZWZpbmUgU0RQX0RfRkVBVFVSRV9NT0RFX0NGR18wX0ZM
WUlOR19NT0RFX1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDApDQo+ICsjZGVmaW5lIFNEUF9E
X0ZFQVRVUkVfTU9ERV9DRkdfMF9GTFlJTkdfTU9ERV9GSUVMRAkJCV9NS19GSUVMRF9DT05T
VCgweDEsIFNEUF9EX0ZFQVRVUkVfTU9ERV9DRkdfMF9GTFlJTkdfTU9ERV9TSElGVCkNCj4g
KyNkZWZpbmUgU0RQX0RfRkVBVFVSRV9NT0RFX0NGR18wX0ZMWUlOR19NT0RFX09GRgkJCV9N
S19FTlVNX0NPTlNUKDB4MCkNCj4gKyNkZWZpbmUgU0RQX0RfRkVBVFVSRV9NT0RFX0NGR18w
X0ZMWUlOR19NT0RFX09OCQkJX01LX0VOVU1fQ09OU1QoMHgxKQ0KPiArI2RlZmluZSBTRFBf
RF9GRUFUVVJFX01PREVfQ0ZHXzBfT1VUUFVUX0RTVF9TSElGVAkJCV9NS19TSElGVF9DT05T
VCgxKQ0KPiArI2RlZmluZSBTRFBfRF9GRUFUVVJFX01PREVfQ0ZHXzBfT1VUUFVUX0RTVF9G
SUVMRAkJCV9NS19GSUVMRF9DT05TVCgweDEsIFNEUF9EX0ZFQVRVUkVfTU9ERV9DRkdfMF9P
VVRQVVRfRFNUX1NISUZUKQ0KPiArI2RlZmluZSBTRFBfRF9GRUFUVVJFX01PREVfQ0ZHXzBf
T1VUUFVUX0RTVF9NRU0JCQlfTUtfRU5VTV9DT05TVCgweDApDQo+ICsjZGVmaW5lIFNEUF9E
X0ZFQVRVUkVfTU9ERV9DRkdfMF9PVVRQVVRfRFNUX1BEUAkJCV9NS19FTlVNX0NPTlNUKDB4
MSkNCj4gKyNkZWZpbmUgU0RQX0RfRkVBVFVSRV9NT0RFX0NGR18wX1dJTk9HUkFEX1NISUZU
CQkJX01LX1NISUZUX0NPTlNUKDIpDQo+ICsjZGVmaW5lIFNEUF9EX0ZFQVRVUkVfTU9ERV9D
RkdfMF9XSU5PR1JBRF9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweDEsIFNEUF9EX0ZFQVRV
UkVfTU9ERV9DRkdfMF9XSU5PR1JBRF9TSElGVCkNCj4gKyNkZWZpbmUgU0RQX0RfRkVBVFVS
RV9NT0RFX0NGR18wX1dJTk9HUkFEX09GRgkJCV9NS19FTlVNX0NPTlNUKDB4MCkNCj4gKyNk
ZWZpbmUgU0RQX0RfRkVBVFVSRV9NT0RFX0NGR18wX1dJTk9HUkFEX09OCQkJX01LX0VOVU1f
Q09OU1QoMHgxKQ0KPiArI2RlZmluZSBTRFBfRF9GRUFUVVJFX01PREVfQ0ZHXzBfTkFOX1RP
X1pFUk9fU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMykNCj4gKyNkZWZpbmUgU0RQX0RfRkVB
VFVSRV9NT0RFX0NGR18wX05BTl9UT19aRVJPX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4
MSwgU0RQX0RfRkVBVFVSRV9NT0RFX0NGR18wX05BTl9UT19aRVJPX1NISUZUKQ0KPiArI2Rl
ZmluZSBTRFBfRF9GRUFUVVJFX01PREVfQ0ZHXzBfTkFOX1RPX1pFUk9fRElTQUJMRQkJCV9N
S19FTlVNX0NPTlNUKDB4MCkNCj4gKyNkZWZpbmUgU0RQX0RfRkVBVFVSRV9NT0RFX0NGR18w
X05BTl9UT19aRVJPX0VOQUJMRQkJCV9NS19FTlVNX0NPTlNUKDB4MSkNCj4gKyNkZWZpbmUg
U0RQX0RfRkVBVFVSRV9NT0RFX0NGR18wX0JBVENIX05VTUJFUl9TSElGVAkJCV9NS19TSElG
VF9DT05TVCg4KQ0KPiArI2RlZmluZSBTRFBfRF9GRUFUVVJFX01PREVfQ0ZHXzBfQkFUQ0hf
TlVNQkVSX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4MWYsIFNEUF9EX0ZFQVRVUkVfTU9E
RV9DRkdfMF9CQVRDSF9OVU1CRVJfU0hJRlQpDQo+ICsNCj4gKw0KPiArLy8gUmVnaXN0ZXIg
U0RQX0RfRFNUX0RNQV9DRkdfMA0KPiArI2RlZmluZSBTRFBfRF9EU1RfRE1BX0NGR18wCQkJ
X01LX0FERFJfQ09OU1QoMHg5MGI0KQ0KPiArI2RlZmluZSBTRFBfRF9EU1RfRE1BX0NGR18w
X0RTVF9SQU1fVFlQRV9TSElGVAkJCV9NS19TSElGVF9DT05TVCgwKQ0KPiArI2RlZmluZSBT
RFBfRF9EU1RfRE1BX0NGR18wX0RTVF9SQU1fVFlQRV9GSUVMRAkJCV9NS19GSUVMRF9DT05T
VCgweDEsIFNEUF9EX0RTVF9ETUFfQ0ZHXzBfRFNUX1JBTV9UWVBFX1NISUZUKQ0KPiArI2Rl
ZmluZSBTRFBfRF9EU1RfRE1BX0NGR18wX0RTVF9SQU1fVFlQRV9DVgkJCV9NS19FTlVNX0NP
TlNUKDB4MCkNCj4gKyNkZWZpbmUgU0RQX0RfRFNUX0RNQV9DRkdfMF9EU1RfUkFNX1RZUEVf
TUMJCQlfTUtfRU5VTV9DT05TVCgweDEpDQo+ICsNCj4gKw0KPiArLy8gUmVnaXN0ZXIgU0RQ
X0RfRFNUX0JBVENIX1NUUklERV8wDQo+ICsjZGVmaW5lIFNEUF9EX0RTVF9CQVRDSF9TVFJJ
REVfMAkJCV9NS19BRERSX0NPTlNUKDB4OTBiOCkNCj4gKyNkZWZpbmUgU0RQX0RfRFNUX0JB
VENIX1NUUklERV8wX0RTVF9CQVRDSF9TVFJJREVfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1Qo
MCkNCj4gKyNkZWZpbmUgU0RQX0RfRFNUX0JBVENIX1NUUklERV8wX0RTVF9CQVRDSF9TVFJJ
REVfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHhmZmZmZmZmZiwgU0RQX0RfRFNUX0JBVENI
X1NUUklERV8wX0RTVF9CQVRDSF9TVFJJREVfU0hJRlQpDQo+ICsNCj4gKw0KPiArLy8gUmVn
aXN0ZXIgU0RQX0RfREFUQV9GT1JNQVRfMA0KPiArI2RlZmluZSBTRFBfRF9EQVRBX0ZPUk1B
VF8wCQkJX01LX0FERFJfQ09OU1QoMHg5MGJjKQ0KPiArI2RlZmluZSBTRFBfRF9EQVRBX0ZP
Uk1BVF8wX1BST0NfUFJFQ0lTSU9OX1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDApDQo+ICsj
ZGVmaW5lIFNEUF9EX0RBVEFfRk9STUFUXzBfUFJPQ19QUkVDSVNJT05fRklFTEQJCQlfTUtf
RklFTERfQ09OU1QoMHgzLCBTRFBfRF9EQVRBX0ZPUk1BVF8wX1BST0NfUFJFQ0lTSU9OX1NI
SUZUKQ0KPiArI2RlZmluZSBTRFBfRF9EQVRBX0ZPUk1BVF8wX1BST0NfUFJFQ0lTSU9OX0lO
VDgJCQlfTUtfRU5VTV9DT05TVCgweDApDQo+ICsjZGVmaW5lIFNEUF9EX0RBVEFfRk9STUFU
XzBfUFJPQ19QUkVDSVNJT05fSU5UMTYJCQlfTUtfRU5VTV9DT05TVCgweDEpDQo+ICsjZGVm
aW5lIFNEUF9EX0RBVEFfRk9STUFUXzBfUFJPQ19QUkVDSVNJT05fRlAxNgkJCV9NS19FTlVN
X0NPTlNUKDB4MikNCj4gKyNkZWZpbmUgU0RQX0RfREFUQV9GT1JNQVRfMF9PVVRfUFJFQ0lT
SU9OX1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDIpDQo+ICsjZGVmaW5lIFNEUF9EX0RBVEFf
Rk9STUFUXzBfT1VUX1BSRUNJU0lPTl9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweDMsIFNE
UF9EX0RBVEFfRk9STUFUXzBfT1VUX1BSRUNJU0lPTl9TSElGVCkNCj4gKyNkZWZpbmUgU0RQ
X0RfREFUQV9GT1JNQVRfMF9PVVRfUFJFQ0lTSU9OX0lOVDgJCQlfTUtfRU5VTV9DT05TVCgw
eDApDQo+ICsjZGVmaW5lIFNEUF9EX0RBVEFfRk9STUFUXzBfT1VUX1BSRUNJU0lPTl9JTlQx
NgkJCV9NS19FTlVNX0NPTlNUKDB4MSkNCj4gKyNkZWZpbmUgU0RQX0RfREFUQV9GT1JNQVRf
MF9PVVRfUFJFQ0lTSU9OX0ZQMTYJCQlfTUtfRU5VTV9DT05TVCgweDIpDQo+ICsNCj4gKw0K
PiArLy8gUmVnaXN0ZXIgU0RQX0RfQ1ZUX09GRlNFVF8wDQo+ICsjZGVmaW5lIFNEUF9EX0NW
VF9PRkZTRVRfMAkJCV9NS19BRERSX0NPTlNUKDB4OTBjMCkNCj4gKyNkZWZpbmUgU0RQX0Rf
Q1ZUX09GRlNFVF8wX0NWVF9PRkZTRVRfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMCkNCj4g
KyNkZWZpbmUgU0RQX0RfQ1ZUX09GRlNFVF8wX0NWVF9PRkZTRVRfRklFTEQJCQlfTUtfRklF
TERfQ09OU1QoMHhmZmZmZmZmZiwgU0RQX0RfQ1ZUX09GRlNFVF8wX0NWVF9PRkZTRVRfU0hJ
RlQpDQo+ICsNCj4gKw0KPiArLy8gUmVnaXN0ZXIgU0RQX0RfQ1ZUX1NDQUxFXzANCj4gKyNk
ZWZpbmUgU0RQX0RfQ1ZUX1NDQUxFXzAJCQlfTUtfQUREUl9DT05TVCgweDkwYzQpDQo+ICsj
ZGVmaW5lIFNEUF9EX0NWVF9TQ0FMRV8wX0NWVF9TQ0FMRV9TSElGVAkJCV9NS19TSElGVF9D
T05TVCgwKQ0KPiArI2RlZmluZSBTRFBfRF9DVlRfU0NBTEVfMF9DVlRfU0NBTEVfRklFTEQJ
CQlfTUtfRklFTERfQ09OU1QoMHhmZmZmLCBTRFBfRF9DVlRfU0NBTEVfMF9DVlRfU0NBTEVf
U0hJRlQpDQo+ICsNCj4gKw0KPiArLy8gUmVnaXN0ZXIgU0RQX0RfQ1ZUX1NISUZUXzANCj4g
KyNkZWZpbmUgU0RQX0RfQ1ZUX1NISUZUXzAJCQlfTUtfQUREUl9DT05TVCgweDkwYzgpDQo+
ICsjZGVmaW5lIFNEUF9EX0NWVF9TSElGVF8wX0NWVF9TSElGVF9TSElGVAkJCV9NS19TSElG
VF9DT05TVCgwKQ0KPiArI2RlZmluZSBTRFBfRF9DVlRfU0hJRlRfMF9DVlRfU0hJRlRfRklF
TEQJCQlfTUtfRklFTERfQ09OU1QoMHgzZiwgU0RQX0RfQ1ZUX1NISUZUXzBfQ1ZUX1NISUZU
X1NISUZUKQ0KPiArDQo+ICsNCj4gKy8vIFJlZ2lzdGVyIFNEUF9EX1NUQVRVU18wDQo+ICsj
ZGVmaW5lIFNEUF9EX1NUQVRVU18wCQkJX01LX0FERFJfQ09OU1QoMHg5MGNjKQ0KPiArI2Rl
ZmluZSBTRFBfRF9TVEFUVVNfMF9TVEFUVVNfVU5FUVVBTF9TSElGVAkJCV9NS19TSElGVF9D
T05TVCgwKQ0KPiArI2RlZmluZSBTRFBfRF9TVEFUVVNfMF9TVEFUVVNfVU5FUVVBTF9GSUVM
RAkJCV9NS19GSUVMRF9DT05TVCgweDEsIFNEUF9EX1NUQVRVU18wX1NUQVRVU19VTkVRVUFM
X1NISUZUKQ0KPiArDQo+ICsNCj4gKy8vIFJlZ2lzdGVyIFNEUF9EX1NUQVRVU19OQU5fSU5Q
VVRfTlVNXzANCj4gKyNkZWZpbmUgU0RQX0RfU1RBVFVTX05BTl9JTlBVVF9OVU1fMAkJCV9N
S19BRERSX0NPTlNUKDB4OTBkMCkNCj4gKyNkZWZpbmUgU0RQX0RfU1RBVFVTX05BTl9JTlBV
VF9OVU1fMF9TVEFUVVNfTkFOX0lOUFVUX05VTV9TSElGVAkJCV9NS19TSElGVF9DT05TVCgw
KQ0KPiArI2RlZmluZSBTRFBfRF9TVEFUVVNfTkFOX0lOUFVUX05VTV8wX1NUQVRVU19OQU5f
SU5QVVRfTlVNX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4ZmZmZmZmZmYsIFNEUF9EX1NU
QVRVU19OQU5fSU5QVVRfTlVNXzBfU1RBVFVTX05BTl9JTlBVVF9OVU1fU0hJRlQpDQo+ICsN
Cj4gKw0KPiArLy8gUmVnaXN0ZXIgU0RQX0RfU1RBVFVTX0lORl9JTlBVVF9OVU1fMA0KPiAr
I2RlZmluZSBTRFBfRF9TVEFUVVNfSU5GX0lOUFVUX05VTV8wCQkJX01LX0FERFJfQ09OU1Qo
MHg5MGQ0KQ0KPiArI2RlZmluZSBTRFBfRF9TVEFUVVNfSU5GX0lOUFVUX05VTV8wX1NUQVRV
U19JTkZfSU5QVVRfTlVNX1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDApDQo+ICsjZGVmaW5l
IFNEUF9EX1NUQVRVU19JTkZfSU5QVVRfTlVNXzBfU1RBVFVTX0lORl9JTlBVVF9OVU1fRklF
TEQJCQlfTUtfRklFTERfQ09OU1QoMHhmZmZmZmZmZiwgU0RQX0RfU1RBVFVTX0lORl9JTlBV
VF9OVU1fMF9TVEFUVVNfSU5GX0lOUFVUX05VTV9TSElGVCkNCj4gKw0KPiArDQo+ICsvLyBS
ZWdpc3RlciBTRFBfRF9TVEFUVVNfTkFOX09VVFBVVF9OVU1fMA0KPiArI2RlZmluZSBTRFBf
RF9TVEFUVVNfTkFOX09VVFBVVF9OVU1fMAkJCV9NS19BRERSX0NPTlNUKDB4OTBkOCkNCj4g
KyNkZWZpbmUgU0RQX0RfU1RBVFVTX05BTl9PVVRQVVRfTlVNXzBfU1RBVFVTX05BTl9PVVRQ
VVRfTlVNX1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDApDQo+ICsjZGVmaW5lIFNEUF9EX1NU
QVRVU19OQU5fT1VUUFVUX05VTV8wX1NUQVRVU19OQU5fT1VUUFVUX05VTV9GSUVMRAkJCV9N
S19GSUVMRF9DT05TVCgweGZmZmZmZmZmLCBTRFBfRF9TVEFUVVNfTkFOX09VVFBVVF9OVU1f
MF9TVEFUVVNfTkFOX09VVFBVVF9OVU1fU0hJRlQpDQo+ICsNCj4gKw0KPiArLy8gUmVnaXN0
ZXIgU0RQX0RfUEVSRl9FTkFCTEVfMA0KPiArI2RlZmluZSBTRFBfRF9QRVJGX0VOQUJMRV8w
CQkJX01LX0FERFJfQ09OU1QoMHg5MGRjKQ0KPiArI2RlZmluZSBTRFBfRF9QRVJGX0VOQUJM
RV8wX1BFUkZfRE1BX0VOX1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDApDQo+ICsjZGVmaW5l
IFNEUF9EX1BFUkZfRU5BQkxFXzBfUEVSRl9ETUFfRU5fRklFTEQJCQlfTUtfRklFTERfQ09O
U1QoMHgxLCBTRFBfRF9QRVJGX0VOQUJMRV8wX1BFUkZfRE1BX0VOX1NISUZUKQ0KPiArI2Rl
ZmluZSBTRFBfRF9QRVJGX0VOQUJMRV8wX1BFUkZfRE1BX0VOX05PCQkJX01LX0VOVU1fQ09O
U1QoMHgwKQ0KPiArI2RlZmluZSBTRFBfRF9QRVJGX0VOQUJMRV8wX1BFUkZfRE1BX0VOX1lF
UwkJCV9NS19FTlVNX0NPTlNUKDB4MSkNCj4gKyNkZWZpbmUgU0RQX0RfUEVSRl9FTkFCTEVf
MF9QRVJGX0xVVF9FTl9TSElGVAkJCV9NS19TSElGVF9DT05TVCgxKQ0KPiArI2RlZmluZSBT
RFBfRF9QRVJGX0VOQUJMRV8wX1BFUkZfTFVUX0VOX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNU
KDB4MSwgU0RQX0RfUEVSRl9FTkFCTEVfMF9QRVJGX0xVVF9FTl9TSElGVCkNCj4gKyNkZWZp
bmUgU0RQX0RfUEVSRl9FTkFCTEVfMF9QRVJGX0xVVF9FTl9OTwkJCV9NS19FTlVNX0NPTlNU
KDB4MCkNCj4gKyNkZWZpbmUgU0RQX0RfUEVSRl9FTkFCTEVfMF9QRVJGX0xVVF9FTl9ZRVMJ
CQlfTUtfRU5VTV9DT05TVCgweDEpDQo+ICsjZGVmaW5lIFNEUF9EX1BFUkZfRU5BQkxFXzBf
UEVSRl9TQVRfRU5fU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMikNCj4gKyNkZWZpbmUgU0RQ
X0RfUEVSRl9FTkFCTEVfMF9QRVJGX1NBVF9FTl9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgw
eDEsIFNEUF9EX1BFUkZfRU5BQkxFXzBfUEVSRl9TQVRfRU5fU0hJRlQpDQo+ICsjZGVmaW5l
IFNEUF9EX1BFUkZfRU5BQkxFXzBfUEVSRl9TQVRfRU5fTk8JCQlfTUtfRU5VTV9DT05TVCgw
eDApDQo+ICsjZGVmaW5lIFNEUF9EX1BFUkZfRU5BQkxFXzBfUEVSRl9TQVRfRU5fWUVTCQkJ
X01LX0VOVU1fQ09OU1QoMHgxKQ0KPiArI2RlZmluZSBTRFBfRF9QRVJGX0VOQUJMRV8wX1BF
UkZfTkFOX0lORl9DT1VOVF9FTl9TSElGVAkJCV9NS19TSElGVF9DT05TVCgzKQ0KPiArI2Rl
ZmluZSBTRFBfRF9QRVJGX0VOQUJMRV8wX1BFUkZfTkFOX0lORl9DT1VOVF9FTl9GSUVMRAkJ
CV9NS19GSUVMRF9DT05TVCgweDEsIFNEUF9EX1BFUkZfRU5BQkxFXzBfUEVSRl9OQU5fSU5G
X0NPVU5UX0VOX1NISUZUKQ0KPiArI2RlZmluZSBTRFBfRF9QRVJGX0VOQUJMRV8wX1BFUkZf
TkFOX0lORl9DT1VOVF9FTl9OTwkJCV9NS19FTlVNX0NPTlNUKDB4MCkNCj4gKyNkZWZpbmUg
U0RQX0RfUEVSRl9FTkFCTEVfMF9QRVJGX05BTl9JTkZfQ09VTlRfRU5fWUVTCQkJX01LX0VO
VU1fQ09OU1QoMHgxKQ0KPiArDQo+ICsNCj4gKy8vIFJlZ2lzdGVyIFNEUF9EX1BFUkZfV0RN
QV9XUklURV9TVEFMTF8wDQo+ICsjZGVmaW5lIFNEUF9EX1BFUkZfV0RNQV9XUklURV9TVEFM
TF8wCQkJX01LX0FERFJfQ09OU1QoMHg5MGUwKQ0KPiArI2RlZmluZSBTRFBfRF9QRVJGX1dE
TUFfV1JJVEVfU1RBTExfMF9XRE1BX1NUQUxMX1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDAp
DQo+ICsjZGVmaW5lIFNEUF9EX1BFUkZfV0RNQV9XUklURV9TVEFMTF8wX1dETUFfU1RBTExf
RklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHhmZmZmZmZmZiwgU0RQX0RfUEVSRl9XRE1BX1dS
SVRFX1NUQUxMXzBfV0RNQV9TVEFMTF9TSElGVCkNCj4gKw0KPiArDQo+ICsvLyBSZWdpc3Rl
ciBTRFBfRF9QRVJGX0xVVF9VRkxPV18wDQo+ICsjZGVmaW5lIFNEUF9EX1BFUkZfTFVUX1VG
TE9XXzAJCQlfTUtfQUREUl9DT05TVCgweDkwZTQpDQo+ICsjZGVmaW5lIFNEUF9EX1BFUkZf
TFVUX1VGTE9XXzBfTFVUX1VGTE9XX1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDApDQo+ICsj
ZGVmaW5lIFNEUF9EX1BFUkZfTFVUX1VGTE9XXzBfTFVUX1VGTE9XX0ZJRUxECQkJX01LX0ZJ
RUxEX0NPTlNUKDB4ZmZmZmZmZmYsIFNEUF9EX1BFUkZfTFVUX1VGTE9XXzBfTFVUX1VGTE9X
X1NISUZUKQ0KPiArDQo+ICsNCj4gKy8vIFJlZ2lzdGVyIFNEUF9EX1BFUkZfTFVUX09GTE9X
XzANCj4gKyNkZWZpbmUgU0RQX0RfUEVSRl9MVVRfT0ZMT1dfMAkJCV9NS19BRERSX0NPTlNU
KDB4OTBlOCkNCj4gKyNkZWZpbmUgU0RQX0RfUEVSRl9MVVRfT0ZMT1dfMF9MVVRfT0ZMT1df
U0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMCkNCj4gKyNkZWZpbmUgU0RQX0RfUEVSRl9MVVRf
T0ZMT1dfMF9MVVRfT0ZMT1dfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHhmZmZmZmZmZiwg
U0RQX0RfUEVSRl9MVVRfT0ZMT1dfMF9MVVRfT0ZMT1dfU0hJRlQpDQo+ICsNCj4gKw0KPiAr
Ly8gUmVnaXN0ZXIgU0RQX0RfUEVSRl9PVVRfU0FUVVJBVElPTl8wDQo+ICsjZGVmaW5lIFNE
UF9EX1BFUkZfT1VUX1NBVFVSQVRJT05fMAkJCV9NS19BRERSX0NPTlNUKDB4OTBlYykNCj4g
KyNkZWZpbmUgU0RQX0RfUEVSRl9PVVRfU0FUVVJBVElPTl8wX09VVF9TQVRVUkFUSU9OX1NI
SUZUCQkJX01LX1NISUZUX0NPTlNUKDApDQo+ICsjZGVmaW5lIFNEUF9EX1BFUkZfT1VUX1NB
VFVSQVRJT05fMF9PVVRfU0FUVVJBVElPTl9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweGZm
ZmZmZmZmLCBTRFBfRF9QRVJGX09VVF9TQVRVUkFUSU9OXzBfT1VUX1NBVFVSQVRJT05fU0hJ
RlQpDQo+ICsNCj4gKw0KPiArLy8gUmVnaXN0ZXIgU0RQX0RfUEVSRl9MVVRfSFlCUklEXzAN
Cj4gKyNkZWZpbmUgU0RQX0RfUEVSRl9MVVRfSFlCUklEXzAJCQlfTUtfQUREUl9DT05TVCgw
eDkwZjApDQo+ICsjZGVmaW5lIFNEUF9EX1BFUkZfTFVUX0hZQlJJRF8wX0xVVF9IWUJSSURf
U0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMCkNCj4gKyNkZWZpbmUgU0RQX0RfUEVSRl9MVVRf
SFlCUklEXzBfTFVUX0hZQlJJRF9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweGZmZmZmZmZm
LCBTRFBfRF9QRVJGX0xVVF9IWUJSSURfMF9MVVRfSFlCUklEX1NISUZUKQ0KPiArDQo+ICsN
Cj4gKy8vIFJlZ2lzdGVyIFNEUF9EX1BFUkZfTFVUX0xFX0hJVF8wDQo+ICsjZGVmaW5lIFNE
UF9EX1BFUkZfTFVUX0xFX0hJVF8wCQkJX01LX0FERFJfQ09OU1QoMHg5MGY0KQ0KPiArI2Rl
ZmluZSBTRFBfRF9QRVJGX0xVVF9MRV9ISVRfMF9MVVRfTEVfSElUX1NISUZUCQkJX01LX1NI
SUZUX0NPTlNUKDApDQo+ICsjZGVmaW5lIFNEUF9EX1BFUkZfTFVUX0xFX0hJVF8wX0xVVF9M
RV9ISVRfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHhmZmZmZmZmZiwgU0RQX0RfUEVSRl9M
VVRfTEVfSElUXzBfTFVUX0xFX0hJVF9TSElGVCkNCj4gKw0KPiArDQo+ICsvLyBSZWdpc3Rl
ciBTRFBfRF9QRVJGX0xVVF9MT19ISVRfMA0KPiArI2RlZmluZSBTRFBfRF9QRVJGX0xVVF9M
T19ISVRfMAkJCV9NS19BRERSX0NPTlNUKDB4OTBmOCkNCj4gKyNkZWZpbmUgU0RQX0RfUEVS
Rl9MVVRfTE9fSElUXzBfTFVUX0xPX0hJVF9TSElGVAkJCV9NS19TSElGVF9DT05TVCgwKQ0K
PiArI2RlZmluZSBTRFBfRF9QRVJGX0xVVF9MT19ISVRfMF9MVVRfTE9fSElUX0ZJRUxECQkJ
X01LX0ZJRUxEX0NPTlNUKDB4ZmZmZmZmZmYsIFNEUF9EX1BFUkZfTFVUX0xPX0hJVF8wX0xV
VF9MT19ISVRfU0hJRlQpDQo+ICsNCj4gKw0KPiArDQo+ICsvLyBUbyBzYXRpc2Z5IHZhcmlv
dXMgY29tcGlsZXJzIGFuZCBwbGF0Zm9ybXMsDQo+ICsvLyB3ZSBsZXQgdXNlcnMgY29udHJv
bCB0aGUgdHlwZXMgYW5kIHN5bnRheCBvZiBjZXJ0YWluIGNvbnN0YW50cywgdXNpbmcgbWFj
cm9zLg0KPiArI2lmbmRlZiBfTUtfU0hJRlRfQ09OU1QNCj4gKyAgI2RlZmluZSBfTUtfU0hJ
RlRfQ09OU1QoX2NvbnN0YW50XykgX2NvbnN0YW50Xw0KPiArI2VuZGlmDQo+ICsjaWZuZGVm
IF9NS19NQVNLX0NPTlNUDQo+ICsgICNkZWZpbmUgX01LX01BU0tfQ09OU1QoX2NvbnN0YW50
XykgX2NvbnN0YW50Xw0KPiArI2VuZGlmDQo+ICsjaWZuZGVmIF9NS19FTlVNX0NPTlNUDQo+
ICsgICNkZWZpbmUgX01LX0VOVU1fQ09OU1QoX2NvbnN0YW50XykgKF9jb25zdGFudF8gIyMg
VUwpDQo+ICsjZW5kaWYNCj4gKyNpZm5kZWYgX01LX0FERFJfQ09OU1QNCj4gKyAgI2RlZmlu
ZSBfTUtfQUREUl9DT05TVChfY29uc3RhbnRfKSBfY29uc3RhbnRfDQo+ICsjZW5kaWYNCj4g
KyNpZm5kZWYgX01LX0ZJRUxEX0NPTlNUDQo+ICsgICNkZWZpbmUgX01LX0ZJRUxEX0NPTlNU
KF9tYXNrXywgX3NoaWZ0XykgKF9NS19NQVNLX0NPTlNUKF9tYXNrXykgPDwgX01LX1NISUZU
X0NPTlNUKF9zaGlmdF8pKQ0KPiArI2VuZGlmDQo+ICsNCj4gKw0KPiArLy8gUmVnaXN0ZXIg
UERQX1JETUFfU19TVEFUVVNfMA0KPiArI2RlZmluZSBQRFBfUkRNQV9TX1NUQVRVU18wCQkJ
X01LX0FERFJfQ09OU1QoMHhhMDAwKQ0KPiArI2RlZmluZSBQRFBfUkRNQV9TX1NUQVRVU18w
X1NUQVRVU18wX1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDApDQo+ICsjZGVmaW5lIFBEUF9S
RE1BX1NfU1RBVFVTXzBfU1RBVFVTXzBfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHgzLCBQ
RFBfUkRNQV9TX1NUQVRVU18wX1NUQVRVU18wX1NISUZUKQ0KPiArI2RlZmluZSBQRFBfUkRN
QV9TX1NUQVRVU18wX1NUQVRVU18wX0lETEUJCQlfTUtfRU5VTV9DT05TVCgweDApDQo+ICsj
ZGVmaW5lIFBEUF9SRE1BX1NfU1RBVFVTXzBfU1RBVFVTXzBfUlVOTklORwkJCV9NS19FTlVN
X0NPTlNUKDB4MSkNCj4gKyNkZWZpbmUgUERQX1JETUFfU19TVEFUVVNfMF9TVEFUVVNfMF9Q
RU5ESU5HCQkJX01LX0VOVU1fQ09OU1QoMHgyKQ0KPiArI2RlZmluZSBQRFBfUkRNQV9TX1NU
QVRVU18wX1NUQVRVU18xX1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDE2KQ0KPiArI2RlZmlu
ZSBQRFBfUkRNQV9TX1NUQVRVU18wX1NUQVRVU18xX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNU
KDB4MywgUERQX1JETUFfU19TVEFUVVNfMF9TVEFUVVNfMV9TSElGVCkNCj4gKyNkZWZpbmUg
UERQX1JETUFfU19TVEFUVVNfMF9TVEFUVVNfMV9JRExFCQkJX01LX0VOVU1fQ09OU1QoMHgw
KQ0KPiArI2RlZmluZSBQRFBfUkRNQV9TX1NUQVRVU18wX1NUQVRVU18xX1JVTk5JTkcJCQlf
TUtfRU5VTV9DT05TVCgweDEpDQo+ICsjZGVmaW5lIFBEUF9SRE1BX1NfU1RBVFVTXzBfU1RB
VFVTXzFfUEVORElORwkJCV9NS19FTlVNX0NPTlNUKDB4MikNCj4gKw0KPiArDQo+ICsvLyBS
ZWdpc3RlciBQRFBfUkRNQV9TX1BPSU5URVJfMA0KPiArI2RlZmluZSBQRFBfUkRNQV9TX1BP
SU5URVJfMAkJCV9NS19BRERSX0NPTlNUKDB4YTAwNCkNCj4gKyNkZWZpbmUgUERQX1JETUFf
U19QT0lOVEVSXzBfUFJPRFVDRVJfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMCkNCj4gKyNk
ZWZpbmUgUERQX1JETUFfU19QT0lOVEVSXzBfUFJPRFVDRVJfRklFTEQJCQlfTUtfRklFTERf
Q09OU1QoMHgxLCBQRFBfUkRNQV9TX1BPSU5URVJfMF9QUk9EVUNFUl9TSElGVCkNCj4gKyNk
ZWZpbmUgUERQX1JETUFfU19QT0lOVEVSXzBfUFJPRFVDRVJfR1JPVVBfMAkJCV9NS19FTlVN
X0NPTlNUKDB4MCkNCj4gKyNkZWZpbmUgUERQX1JETUFfU19QT0lOVEVSXzBfUFJPRFVDRVJf
R1JPVVBfMQkJCV9NS19FTlVNX0NPTlNUKDB4MSkNCj4gKyNkZWZpbmUgUERQX1JETUFfU19Q
T0lOVEVSXzBfQ09OU1VNRVJfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMTYpDQo+ICsjZGVm
aW5lIFBEUF9SRE1BX1NfUE9JTlRFUl8wX0NPTlNVTUVSX0ZJRUxECQkJX01LX0ZJRUxEX0NP
TlNUKDB4MSwgUERQX1JETUFfU19QT0lOVEVSXzBfQ09OU1VNRVJfU0hJRlQpDQo+ICsjZGVm
aW5lIFBEUF9SRE1BX1NfUE9JTlRFUl8wX0NPTlNVTUVSX0dST1VQXzAJCQlfTUtfRU5VTV9D
T05TVCgweDApDQo+ICsjZGVmaW5lIFBEUF9SRE1BX1NfUE9JTlRFUl8wX0NPTlNVTUVSX0dS
T1VQXzEJCQlfTUtfRU5VTV9DT05TVCgweDEpDQo+ICsNCj4gKw0KPiArLy8gUmVnaXN0ZXIg
UERQX1JETUFfRF9PUF9FTkFCTEVfMA0KPiArI2RlZmluZSBQRFBfUkRNQV9EX09QX0VOQUJM
RV8wCQkJX01LX0FERFJfQ09OU1QoMHhhMDA4KQ0KPiArI2RlZmluZSBQRFBfUkRNQV9EX09Q
X0VOQUJMRV8wX09QX0VOX1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDApDQo+ICsjZGVmaW5l
IFBEUF9SRE1BX0RfT1BfRU5BQkxFXzBfT1BfRU5fRklFTEQJCQlfTUtfRklFTERfQ09OU1Qo
MHgxLCBQRFBfUkRNQV9EX09QX0VOQUJMRV8wX09QX0VOX1NISUZUKQ0KPiArI2RlZmluZSBQ
RFBfUkRNQV9EX09QX0VOQUJMRV8wX09QX0VOX0RJU0FCTEUJCQlfTUtfRU5VTV9DT05TVCgw
eDApDQo+ICsjZGVmaW5lIFBEUF9SRE1BX0RfT1BfRU5BQkxFXzBfT1BfRU5fRU5BQkxFCQkJ
X01LX0VOVU1fQ09OU1QoMHgxKQ0KPiArDQo+ICsNCj4gKy8vIFJlZ2lzdGVyIFBEUF9SRE1B
X0RfREFUQV9DVUJFX0lOX1dJRFRIXzANCj4gKyNkZWZpbmUgUERQX1JETUFfRF9EQVRBX0NV
QkVfSU5fV0lEVEhfMAkJCV9NS19BRERSX0NPTlNUKDB4YTAwYykNCj4gKyNkZWZpbmUgUERQ
X1JETUFfRF9EQVRBX0NVQkVfSU5fV0lEVEhfMF9DVUJFX0lOX1dJRFRIX1NISUZUCQkJX01L
X1NISUZUX0NPTlNUKDApDQo+ICsjZGVmaW5lIFBEUF9SRE1BX0RfREFUQV9DVUJFX0lOX1dJ
RFRIXzBfQ1VCRV9JTl9XSURUSF9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweDFmZmYsIFBE
UF9SRE1BX0RfREFUQV9DVUJFX0lOX1dJRFRIXzBfQ1VCRV9JTl9XSURUSF9TSElGVCkNCj4g
Kw0KPiArDQo+ICsvLyBSZWdpc3RlciBQRFBfUkRNQV9EX0RBVEFfQ1VCRV9JTl9IRUlHSFRf
MA0KPiArI2RlZmluZSBQRFBfUkRNQV9EX0RBVEFfQ1VCRV9JTl9IRUlHSFRfMAkJCV9NS19B
RERSX0NPTlNUKDB4YTAxMCkNCj4gKyNkZWZpbmUgUERQX1JETUFfRF9EQVRBX0NVQkVfSU5f
SEVJR0hUXzBfQ1VCRV9JTl9IRUlHSFRfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMCkNCj4g
KyNkZWZpbmUgUERQX1JETUFfRF9EQVRBX0NVQkVfSU5fSEVJR0hUXzBfQ1VCRV9JTl9IRUlH
SFRfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHgxZmZmLCBQRFBfUkRNQV9EX0RBVEFfQ1VC
RV9JTl9IRUlHSFRfMF9DVUJFX0lOX0hFSUdIVF9TSElGVCkNCj4gKw0KPiArDQo+ICsvLyBS
ZWdpc3RlciBQRFBfUkRNQV9EX0RBVEFfQ1VCRV9JTl9DSEFOTkVMXzANCj4gKyNkZWZpbmUg
UERQX1JETUFfRF9EQVRBX0NVQkVfSU5fQ0hBTk5FTF8wCQkJX01LX0FERFJfQ09OU1QoMHhh
MDE0KQ0KPiArI2RlZmluZSBQRFBfUkRNQV9EX0RBVEFfQ1VCRV9JTl9DSEFOTkVMXzBfQ1VC
RV9JTl9DSEFOTkVMX1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDApDQo+ICsjZGVmaW5lIFBE
UF9SRE1BX0RfREFUQV9DVUJFX0lOX0NIQU5ORUxfMF9DVUJFX0lOX0NIQU5ORUxfRklFTEQJ
CQlfTUtfRklFTERfQ09OU1QoMHgxZmZmLCBQRFBfUkRNQV9EX0RBVEFfQ1VCRV9JTl9DSEFO
TkVMXzBfQ1VCRV9JTl9DSEFOTkVMX1NISUZUKQ0KPiArDQo+ICsNCj4gKy8vIFJlZ2lzdGVy
IFBEUF9SRE1BX0RfRkxZSU5HX01PREVfMA0KPiArI2RlZmluZSBQRFBfUkRNQV9EX0ZMWUlO
R19NT0RFXzAJCQlfTUtfQUREUl9DT05TVCgweGEwMTgpDQo+ICsjZGVmaW5lIFBEUF9SRE1B
X0RfRkxZSU5HX01PREVfMF9GTFlJTkdfTU9ERV9TSElGVAkJCV9NS19TSElGVF9DT05TVCgw
KQ0KPiArI2RlZmluZSBQRFBfUkRNQV9EX0ZMWUlOR19NT0RFXzBfRkxZSU5HX01PREVfRklF
TEQJCQlfTUtfRklFTERfQ09OU1QoMHgxLCBQRFBfUkRNQV9EX0ZMWUlOR19NT0RFXzBfRkxZ
SU5HX01PREVfU0hJRlQpDQo+ICsjZGVmaW5lIFBEUF9SRE1BX0RfRkxZSU5HX01PREVfMF9G
TFlJTkdfTU9ERV9PTl9GTFlJTkcJCQlfTUtfRU5VTV9DT05TVCgweDApDQo+ICsjZGVmaW5l
IFBEUF9SRE1BX0RfRkxZSU5HX01PREVfMF9GTFlJTkdfTU9ERV9PRkZfRkxZSU5HCQkJX01L
X0VOVU1fQ09OU1QoMHgxKQ0KPiArDQo+ICsNCj4gKy8vIFJlZ2lzdGVyIFBEUF9SRE1BX0Rf
U1JDX0JBU0VfQUREUl9MT1dfMA0KPiArI2RlZmluZSBQRFBfUkRNQV9EX1NSQ19CQVNFX0FE
RFJfTE9XXzAJCQlfTUtfQUREUl9DT05TVCgweGEwMWMpDQo+ICsjZGVmaW5lIFBEUF9SRE1B
X0RfU1JDX0JBU0VfQUREUl9MT1dfMF9TUkNfQkFTRV9BRERSX0xPV19TSElGVAkJCV9NS19T
SElGVF9DT05TVCgwKQ0KPiArI2RlZmluZSBQRFBfUkRNQV9EX1NSQ19CQVNFX0FERFJfTE9X
XzBfU1JDX0JBU0VfQUREUl9MT1dfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHhmZmZmZmZm
ZiwgUERQX1JETUFfRF9TUkNfQkFTRV9BRERSX0xPV18wX1NSQ19CQVNFX0FERFJfTE9XX1NI
SUZUKQ0KPiArDQo+ICsNCj4gKy8vIFJlZ2lzdGVyIFBEUF9SRE1BX0RfU1JDX0JBU0VfQURE
Ul9ISUdIXzANCj4gKyNkZWZpbmUgUERQX1JETUFfRF9TUkNfQkFTRV9BRERSX0hJR0hfMAkJ
CV9NS19BRERSX0NPTlNUKDB4YTAyMCkNCj4gKyNkZWZpbmUgUERQX1JETUFfRF9TUkNfQkFT
RV9BRERSX0hJR0hfMF9TUkNfQkFTRV9BRERSX0hJR0hfU0hJRlQJCQlfTUtfU0hJRlRfQ09O
U1QoMCkNCj4gKyNkZWZpbmUgUERQX1JETUFfRF9TUkNfQkFTRV9BRERSX0hJR0hfMF9TUkNf
QkFTRV9BRERSX0hJR0hfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHhmZmZmZmZmZiwgUERQ
X1JETUFfRF9TUkNfQkFTRV9BRERSX0hJR0hfMF9TUkNfQkFTRV9BRERSX0hJR0hfU0hJRlQp
DQo+ICsNCj4gKw0KPiArLy8gUmVnaXN0ZXIgUERQX1JETUFfRF9TUkNfTElORV9TVFJJREVf
MA0KPiArI2RlZmluZSBQRFBfUkRNQV9EX1NSQ19MSU5FX1NUUklERV8wCQkJX01LX0FERFJf
Q09OU1QoMHhhMDI0KQ0KPiArI2RlZmluZSBQRFBfUkRNQV9EX1NSQ19MSU5FX1NUUklERV8w
X1NSQ19MSU5FX1NUUklERV9TSElGVAkJCV9NS19TSElGVF9DT05TVCgwKQ0KPiArI2RlZmlu
ZSBQRFBfUkRNQV9EX1NSQ19MSU5FX1NUUklERV8wX1NSQ19MSU5FX1NUUklERV9GSUVMRAkJ
CV9NS19GSUVMRF9DT05TVCgweGZmZmZmZmZmLCBQRFBfUkRNQV9EX1NSQ19MSU5FX1NUUklE
RV8wX1NSQ19MSU5FX1NUUklERV9TSElGVCkNCj4gKw0KPiArDQo+ICsvLyBSZWdpc3RlciBQ
RFBfUkRNQV9EX1NSQ19TVVJGQUNFX1NUUklERV8wDQo+ICsjZGVmaW5lIFBEUF9SRE1BX0Rf
U1JDX1NVUkZBQ0VfU1RSSURFXzAJCQlfTUtfQUREUl9DT05TVCgweGEwMjgpDQo+ICsjZGVm
aW5lIFBEUF9SRE1BX0RfU1JDX1NVUkZBQ0VfU1RSSURFXzBfU1JDX1NVUkZBQ0VfU1RSSURF
X1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDApDQo+ICsjZGVmaW5lIFBEUF9SRE1BX0RfU1JD
X1NVUkZBQ0VfU1RSSURFXzBfU1JDX1NVUkZBQ0VfU1RSSURFX0ZJRUxECQkJX01LX0ZJRUxE
X0NPTlNUKDB4ZmZmZmZmZmYsIFBEUF9SRE1BX0RfU1JDX1NVUkZBQ0VfU1RSSURFXzBfU1JD
X1NVUkZBQ0VfU1RSSURFX1NISUZUKQ0KPiArDQo+ICsNCj4gKy8vIFJlZ2lzdGVyIFBEUF9S
RE1BX0RfU1JDX1JBTV9DRkdfMA0KPiArI2RlZmluZSBQRFBfUkRNQV9EX1NSQ19SQU1fQ0ZH
XzAJCQlfTUtfQUREUl9DT05TVCgweGEwMmMpDQo+ICsjZGVmaW5lIFBEUF9SRE1BX0RfU1JD
X1JBTV9DRkdfMF9TUkNfUkFNX1RZUEVfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMCkNCj4g
KyNkZWZpbmUgUERQX1JETUFfRF9TUkNfUkFNX0NGR18wX1NSQ19SQU1fVFlQRV9GSUVMRAkJ
CV9NS19GSUVMRF9DT05TVCgweDEsIFBEUF9SRE1BX0RfU1JDX1JBTV9DRkdfMF9TUkNfUkFN
X1RZUEVfU0hJRlQpDQo+ICsjZGVmaW5lIFBEUF9SRE1BX0RfU1JDX1JBTV9DRkdfMF9TUkNf
UkFNX1RZUEVfQ1YJCQlfTUtfRU5VTV9DT05TVCgweDApDQo+ICsjZGVmaW5lIFBEUF9SRE1B
X0RfU1JDX1JBTV9DRkdfMF9TUkNfUkFNX1RZUEVfTUMJCQlfTUtfRU5VTV9DT05TVCgweDEp
DQo+ICsNCj4gKw0KPiArLy8gUmVnaXN0ZXIgUERQX1JETUFfRF9EQVRBX0ZPUk1BVF8wDQo+
ICsjZGVmaW5lIFBEUF9SRE1BX0RfREFUQV9GT1JNQVRfMAkJCV9NS19BRERSX0NPTlNUKDB4
YTAzMCkNCj4gKyNkZWZpbmUgUERQX1JETUFfRF9EQVRBX0ZPUk1BVF8wX0lOUFVUX0RBVEFf
U0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMCkNCj4gKyNkZWZpbmUgUERQX1JETUFfRF9EQVRB
X0ZPUk1BVF8wX0lOUFVUX0RBVEFfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHgzLCBQRFBf
UkRNQV9EX0RBVEFfRk9STUFUXzBfSU5QVVRfREFUQV9TSElGVCkNCj4gKyNkZWZpbmUgUERQ
X1JETUFfRF9EQVRBX0ZPUk1BVF8wX0lOUFVUX0RBVEFfSU5UOAkJCV9NS19FTlVNX0NPTlNU
KDB4MCkNCj4gKyNkZWZpbmUgUERQX1JETUFfRF9EQVRBX0ZPUk1BVF8wX0lOUFVUX0RBVEFf
SU5UMTYJCQlfTUtfRU5VTV9DT05TVCgweDEpDQo+ICsjZGVmaW5lIFBEUF9SRE1BX0RfREFU
QV9GT1JNQVRfMF9JTlBVVF9EQVRBX0ZQMTYJCQlfTUtfRU5VTV9DT05TVCgweDIpDQo+ICsN
Cj4gKw0KPiArLy8gUmVnaXN0ZXIgUERQX1JETUFfRF9PUEVSQVRJT05fTU9ERV9DRkdfMA0K
PiArI2RlZmluZSBQRFBfUkRNQV9EX09QRVJBVElPTl9NT0RFX0NGR18wCQkJX01LX0FERFJf
Q09OU1QoMHhhMDM0KQ0KPiArI2RlZmluZSBQRFBfUkRNQV9EX09QRVJBVElPTl9NT0RFX0NG
R18wX1NQTElUX05VTV9TSElGVAkJCV9NS19TSElGVF9DT05TVCgwKQ0KPiArI2RlZmluZSBQ
RFBfUkRNQV9EX09QRVJBVElPTl9NT0RFX0NGR18wX1NQTElUX05VTV9GSUVMRAkJCV9NS19G
SUVMRF9DT05TVCgweGZmLCBQRFBfUkRNQV9EX09QRVJBVElPTl9NT0RFX0NGR18wX1NQTElU
X05VTV9TSElGVCkNCj4gKw0KPiArDQo+ICsvLyBSZWdpc3RlciBQRFBfUkRNQV9EX1BPT0xJ
TkdfS0VSTkVMX0NGR18wDQo+ICsjZGVmaW5lIFBEUF9SRE1BX0RfUE9PTElOR19LRVJORUxf
Q0ZHXzAJCQlfTUtfQUREUl9DT05TVCgweGEwMzgpDQo+ICsjZGVmaW5lIFBEUF9SRE1BX0Rf
UE9PTElOR19LRVJORUxfQ0ZHXzBfS0VSTkVMX1dJRFRIX1NISUZUCQkJX01LX1NISUZUX0NP
TlNUKDApDQo+ICsjZGVmaW5lIFBEUF9SRE1BX0RfUE9PTElOR19LRVJORUxfQ0ZHXzBfS0VS
TkVMX1dJRFRIX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4ZiwgUERQX1JETUFfRF9QT09M
SU5HX0tFUk5FTF9DRkdfMF9LRVJORUxfV0lEVEhfU0hJRlQpDQo+ICsjZGVmaW5lIFBEUF9S
RE1BX0RfUE9PTElOR19LRVJORUxfQ0ZHXzBfS0VSTkVMX1dJRFRIX0tFUk5FTF9XSURUSF8x
CQkJX01LX0VOVU1fQ09OU1QoMHgwKQ0KPiArI2RlZmluZSBQRFBfUkRNQV9EX1BPT0xJTkdf
S0VSTkVMX0NGR18wX0tFUk5FTF9XSURUSF9LRVJORUxfV0lEVEhfMgkJCV9NS19FTlVNX0NP
TlNUKDB4MSkNCj4gKyNkZWZpbmUgUERQX1JETUFfRF9QT09MSU5HX0tFUk5FTF9DRkdfMF9L
RVJORUxfV0lEVEhfS0VSTkVMX1dJRFRIXzMJCQlfTUtfRU5VTV9DT05TVCgweDIpDQo+ICsj
ZGVmaW5lIFBEUF9SRE1BX0RfUE9PTElOR19LRVJORUxfQ0ZHXzBfS0VSTkVMX1dJRFRIX0tF
Uk5FTF9XSURUSF80CQkJX01LX0VOVU1fQ09OU1QoMHgzKQ0KPiArI2RlZmluZSBQRFBfUkRN
QV9EX1BPT0xJTkdfS0VSTkVMX0NGR18wX0tFUk5FTF9XSURUSF9LRVJORUxfV0lEVEhfNQkJ
CV9NS19FTlVNX0NPTlNUKDB4NCkNCj4gKyNkZWZpbmUgUERQX1JETUFfRF9QT09MSU5HX0tF
Uk5FTF9DRkdfMF9LRVJORUxfV0lEVEhfS0VSTkVMX1dJRFRIXzYJCQlfTUtfRU5VTV9DT05T
VCgweDUpDQo+ICsjZGVmaW5lIFBEUF9SRE1BX0RfUE9PTElOR19LRVJORUxfQ0ZHXzBfS0VS
TkVMX1dJRFRIX0tFUk5FTF9XSURUSF83CQkJX01LX0VOVU1fQ09OU1QoMHg2KQ0KPiArI2Rl
ZmluZSBQRFBfUkRNQV9EX1BPT0xJTkdfS0VSTkVMX0NGR18wX0tFUk5FTF9XSURUSF9LRVJO
RUxfV0lEVEhfOAkJCV9NS19FTlVNX0NPTlNUKDB4NykNCj4gKyNkZWZpbmUgUERQX1JETUFf
RF9QT09MSU5HX0tFUk5FTF9DRkdfMF9LRVJORUxfU1RSSURFX1dJRFRIX1NISUZUCQkJX01L
X1NISUZUX0NPTlNUKDQpDQo+ICsjZGVmaW5lIFBEUF9SRE1BX0RfUE9PTElOR19LRVJORUxf
Q0ZHXzBfS0VSTkVMX1NUUklERV9XSURUSF9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweGYs
IFBEUF9SRE1BX0RfUE9PTElOR19LRVJORUxfQ0ZHXzBfS0VSTkVMX1NUUklERV9XSURUSF9T
SElGVCkNCj4gKw0KPiArDQo+ICsvLyBSZWdpc3RlciBQRFBfUkRNQV9EX1BPT0xJTkdfUEFE
RElOR19DRkdfMA0KPiArI2RlZmluZSBQRFBfUkRNQV9EX1BPT0xJTkdfUEFERElOR19DRkdf
MAkJCV9NS19BRERSX0NPTlNUKDB4YTAzYykNCj4gKyNkZWZpbmUgUERQX1JETUFfRF9QT09M
SU5HX1BBRERJTkdfQ0ZHXzBfUEFEX1dJRFRIX1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDAp
DQo+ICsjZGVmaW5lIFBEUF9SRE1BX0RfUE9PTElOR19QQURESU5HX0NGR18wX1BBRF9XSURU
SF9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweGYsIFBEUF9SRE1BX0RfUE9PTElOR19QQURE
SU5HX0NGR18wX1BBRF9XSURUSF9TSElGVCkNCj4gKw0KPiArDQo+ICsvLyBSZWdpc3RlciBQ
RFBfUkRNQV9EX1BBUlRJQUxfV0lEVEhfSU5fMA0KPiArI2RlZmluZSBQRFBfUkRNQV9EX1BB
UlRJQUxfV0lEVEhfSU5fMAkJCV9NS19BRERSX0NPTlNUKDB4YTA0MCkNCj4gKyNkZWZpbmUg
UERQX1JETUFfRF9QQVJUSUFMX1dJRFRIX0lOXzBfUEFSVElBTF9XSURUSF9JTl9GSVJTVF9T
SElGVAkJCV9NS19TSElGVF9DT05TVCgwKQ0KPiArI2RlZmluZSBQRFBfUkRNQV9EX1BBUlRJ
QUxfV0lEVEhfSU5fMF9QQVJUSUFMX1dJRFRIX0lOX0ZJUlNUX0ZJRUxECQkJX01LX0ZJRUxE
X0NPTlNUKDB4M2ZmLCBQRFBfUkRNQV9EX1BBUlRJQUxfV0lEVEhfSU5fMF9QQVJUSUFMX1dJ
RFRIX0lOX0ZJUlNUX1NISUZUKQ0KPiArI2RlZmluZSBQRFBfUkRNQV9EX1BBUlRJQUxfV0lE
VEhfSU5fMF9QQVJUSUFMX1dJRFRIX0lOX0xBU1RfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1Qo
MTApDQo+ICsjZGVmaW5lIFBEUF9SRE1BX0RfUEFSVElBTF9XSURUSF9JTl8wX1BBUlRJQUxf
V0lEVEhfSU5fTEFTVF9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweDNmZiwgUERQX1JETUFf
RF9QQVJUSUFMX1dJRFRIX0lOXzBfUEFSVElBTF9XSURUSF9JTl9MQVNUX1NISUZUKQ0KPiAr
I2RlZmluZSBQRFBfUkRNQV9EX1BBUlRJQUxfV0lEVEhfSU5fMF9QQVJUSUFMX1dJRFRIX0lO
X01JRF9TSElGVAkJCV9NS19TSElGVF9DT05TVCgyMCkNCj4gKyNkZWZpbmUgUERQX1JETUFf
RF9QQVJUSUFMX1dJRFRIX0lOXzBfUEFSVElBTF9XSURUSF9JTl9NSURfRklFTEQJCQlfTUtf
RklFTERfQ09OU1QoMHgzZmYsIFBEUF9SRE1BX0RfUEFSVElBTF9XSURUSF9JTl8wX1BBUlRJ
QUxfV0lEVEhfSU5fTUlEX1NISUZUKQ0KPiArDQo+ICsNCj4gKy8vIFJlZ2lzdGVyIFBEUF9S
RE1BX0RfUEVSRl9FTkFCTEVfMA0KPiArI2RlZmluZSBQRFBfUkRNQV9EX1BFUkZfRU5BQkxF
XzAJCQlfTUtfQUREUl9DT05TVCgweGEwNDQpDQo+ICsjZGVmaW5lIFBEUF9SRE1BX0RfUEVS
Rl9FTkFCTEVfMF9ETUFfRU5fU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMCkNCj4gKyNkZWZp
bmUgUERQX1JETUFfRF9QRVJGX0VOQUJMRV8wX0RNQV9FTl9GSUVMRAkJCV9NS19GSUVMRF9D
T05TVCgweDEsIFBEUF9SRE1BX0RfUEVSRl9FTkFCTEVfMF9ETUFfRU5fU0hJRlQpDQo+ICsj
ZGVmaW5lIFBEUF9SRE1BX0RfUEVSRl9FTkFCTEVfMF9ETUFfRU5fRElTQUJMRQkJCV9NS19F
TlVNX0NPTlNUKDB4MCkNCj4gKyNkZWZpbmUgUERQX1JETUFfRF9QRVJGX0VOQUJMRV8wX0RN
QV9FTl9FTkFCTEUJCQlfTUtfRU5VTV9DT05TVCgweDEpDQo+ICsNCj4gKw0KPiArLy8gUmVn
aXN0ZXIgUERQX1JETUFfRF9QRVJGX1JFQURfU1RBTExfMA0KPiArI2RlZmluZSBQRFBfUkRN
QV9EX1BFUkZfUkVBRF9TVEFMTF8wCQkJX01LX0FERFJfQ09OU1QoMHhhMDQ4KQ0KPiArI2Rl
ZmluZSBQRFBfUkRNQV9EX1BFUkZfUkVBRF9TVEFMTF8wX1BFUkZfUkVBRF9TVEFMTF9TSElG
VAkJCV9NS19TSElGVF9DT05TVCgwKQ0KPiArI2RlZmluZSBQRFBfUkRNQV9EX1BFUkZfUkVB
RF9TVEFMTF8wX1BFUkZfUkVBRF9TVEFMTF9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweGZm
ZmZmZmZmLCBQRFBfUkRNQV9EX1BFUkZfUkVBRF9TVEFMTF8wX1BFUkZfUkVBRF9TVEFMTF9T
SElGVCkNCj4gKw0KPiArDQo+ICsvLyBSZWdpc3RlciBQRFBfUkRNQV9EX0NZQV8wDQo+ICsj
ZGVmaW5lIFBEUF9SRE1BX0RfQ1lBXzAJCQlfTUtfQUREUl9DT05TVCgweGEwNGMpDQo+ICsj
ZGVmaW5lIFBEUF9SRE1BX0RfQ1lBXzBfQ1lBX1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDAp
DQo+ICsjZGVmaW5lIFBEUF9SRE1BX0RfQ1lBXzBfQ1lBX0ZJRUxECQkJX01LX0ZJRUxEX0NP
TlNUKDB4ZmZmZmZmZmYsIFBEUF9SRE1BX0RfQ1lBXzBfQ1lBX1NISUZUKQ0KPiArDQo+ICsN
Cj4gKw0KPiArLy8gVG8gc2F0aXNmeSB2YXJpb3VzIGNvbXBpbGVycyBhbmQgcGxhdGZvcm1z
LA0KPiArLy8gd2UgbGV0IHVzZXJzIGNvbnRyb2wgdGhlIHR5cGVzIGFuZCBzeW50YXggb2Yg
Y2VydGFpbiBjb25zdGFudHMsIHVzaW5nIG1hY3Jvcy4NCj4gKyNpZm5kZWYgX01LX1NISUZU
X0NPTlNUDQo+ICsgICNkZWZpbmUgX01LX1NISUZUX0NPTlNUKF9jb25zdGFudF8pIF9jb25z
dGFudF8NCj4gKyNlbmRpZg0KPiArI2lmbmRlZiBfTUtfTUFTS19DT05TVA0KPiArICAjZGVm
aW5lIF9NS19NQVNLX0NPTlNUKF9jb25zdGFudF8pIF9jb25zdGFudF8NCj4gKyNlbmRpZg0K
PiArI2lmbmRlZiBfTUtfRU5VTV9DT05TVA0KPiArICAjZGVmaW5lIF9NS19FTlVNX0NPTlNU
KF9jb25zdGFudF8pIChfY29uc3RhbnRfICMjIFVMKQ0KPiArI2VuZGlmDQo+ICsjaWZuZGVm
IF9NS19BRERSX0NPTlNUDQo+ICsgICNkZWZpbmUgX01LX0FERFJfQ09OU1QoX2NvbnN0YW50
XykgX2NvbnN0YW50Xw0KPiArI2VuZGlmDQo+ICsjaWZuZGVmIF9NS19GSUVMRF9DT05TVA0K
PiArICAjZGVmaW5lIF9NS19GSUVMRF9DT05TVChfbWFza18sIF9zaGlmdF8pIChfTUtfTUFT
S19DT05TVChfbWFza18pIDw8IF9NS19TSElGVF9DT05TVChfc2hpZnRfKSkNCj4gKyNlbmRp
Zg0KPiArDQo+ICsNCj4gKy8vIFJlZ2lzdGVyIFBEUF9TX1NUQVRVU18wDQo+ICsjZGVmaW5l
IFBEUF9TX1NUQVRVU18wCQkJX01LX0FERFJfQ09OU1QoMHhiMDAwKQ0KPiArI2RlZmluZSBQ
RFBfU19TVEFUVVNfMF9TVEFUVVNfMF9TSElGVAkJCV9NS19TSElGVF9DT05TVCgwKQ0KPiAr
I2RlZmluZSBQRFBfU19TVEFUVVNfMF9TVEFUVVNfMF9GSUVMRAkJCV9NS19GSUVMRF9DT05T
VCgweDMsIFBEUF9TX1NUQVRVU18wX1NUQVRVU18wX1NISUZUKQ0KPiArI2RlZmluZSBQRFBf
U19TVEFUVVNfMF9TVEFUVVNfMF9JRExFCQkJX01LX0VOVU1fQ09OU1QoMHgwKQ0KPiArI2Rl
ZmluZSBQRFBfU19TVEFUVVNfMF9TVEFUVVNfMF9SVU5OSU5HCQkJX01LX0VOVU1fQ09OU1Qo
MHgxKQ0KPiArI2RlZmluZSBQRFBfU19TVEFUVVNfMF9TVEFUVVNfMF9QRU5ESU5HCQkJX01L
X0VOVU1fQ09OU1QoMHgyKQ0KPiArI2RlZmluZSBQRFBfU19TVEFUVVNfMF9TVEFUVVNfMV9T
SElGVAkJCV9NS19TSElGVF9DT05TVCgxNikNCj4gKyNkZWZpbmUgUERQX1NfU1RBVFVTXzBf
U1RBVFVTXzFfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHgzLCBQRFBfU19TVEFUVVNfMF9T
VEFUVVNfMV9TSElGVCkNCj4gKyNkZWZpbmUgUERQX1NfU1RBVFVTXzBfU1RBVFVTXzFfSURM
RQkJCV9NS19FTlVNX0NPTlNUKDB4MCkNCj4gKyNkZWZpbmUgUERQX1NfU1RBVFVTXzBfU1RB
VFVTXzFfUlVOTklORwkJCV9NS19FTlVNX0NPTlNUKDB4MSkNCj4gKyNkZWZpbmUgUERQX1Nf
U1RBVFVTXzBfU1RBVFVTXzFfUEVORElORwkJCV9NS19FTlVNX0NPTlNUKDB4MikNCj4gKw0K
PiArDQo+ICsvLyBSZWdpc3RlciBQRFBfU19QT0lOVEVSXzANCj4gKyNkZWZpbmUgUERQX1Nf
UE9JTlRFUl8wCQkJX01LX0FERFJfQ09OU1QoMHhiMDA0KQ0KPiArI2RlZmluZSBQRFBfU19Q
T0lOVEVSXzBfUFJPRFVDRVJfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMCkNCj4gKyNkZWZp
bmUgUERQX1NfUE9JTlRFUl8wX1BST0RVQ0VSX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4
MSwgUERQX1NfUE9JTlRFUl8wX1BST0RVQ0VSX1NISUZUKQ0KPiArI2RlZmluZSBQRFBfU19Q
T0lOVEVSXzBfUFJPRFVDRVJfR1JPVVBfMAkJCV9NS19FTlVNX0NPTlNUKDB4MCkNCj4gKyNk
ZWZpbmUgUERQX1NfUE9JTlRFUl8wX1BST0RVQ0VSX0dST1VQXzEJCQlfTUtfRU5VTV9DT05T
VCgweDEpDQo+ICsjZGVmaW5lIFBEUF9TX1BPSU5URVJfMF9DT05TVU1FUl9TSElGVAkJCV9N
S19TSElGVF9DT05TVCgxNikNCj4gKyNkZWZpbmUgUERQX1NfUE9JTlRFUl8wX0NPTlNVTUVS
X0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4MSwgUERQX1NfUE9JTlRFUl8wX0NPTlNVTUVS
X1NISUZUKQ0KPiArI2RlZmluZSBQRFBfU19QT0lOVEVSXzBfQ09OU1VNRVJfR1JPVVBfMAkJ
CV9NS19FTlVNX0NPTlNUKDB4MCkNCj4gKyNkZWZpbmUgUERQX1NfUE9JTlRFUl8wX0NPTlNV
TUVSX0dST1VQXzEJCQlfTUtfRU5VTV9DT05TVCgweDEpDQo+ICsNCj4gKw0KPiArLy8gUmVn
aXN0ZXIgUERQX0RfT1BfRU5BQkxFXzANCj4gKyNkZWZpbmUgUERQX0RfT1BfRU5BQkxFXzAJ
CQlfTUtfQUREUl9DT05TVCgweGIwMDgpDQo+ICsjZGVmaW5lIFBEUF9EX09QX0VOQUJMRV8w
X09QX0VOX1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDApDQo+ICsjZGVmaW5lIFBEUF9EX09Q
X0VOQUJMRV8wX09QX0VOX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4MSwgUERQX0RfT1Bf
RU5BQkxFXzBfT1BfRU5fU0hJRlQpDQo+ICsjZGVmaW5lIFBEUF9EX09QX0VOQUJMRV8wX09Q
X0VOX0RJU0FCTEUJCQlfTUtfRU5VTV9DT05TVCgweDApDQo+ICsjZGVmaW5lIFBEUF9EX09Q
X0VOQUJMRV8wX09QX0VOX0VOQUJMRQkJCV9NS19FTlVNX0NPTlNUKDB4MSkNCj4gKw0KPiAr
DQo+ICsvLyBSZWdpc3RlciBQRFBfRF9EQVRBX0NVQkVfSU5fV0lEVEhfMA0KPiArI2RlZmlu
ZSBQRFBfRF9EQVRBX0NVQkVfSU5fV0lEVEhfMAkJCV9NS19BRERSX0NPTlNUKDB4YjAwYykN
Cj4gKyNkZWZpbmUgUERQX0RfREFUQV9DVUJFX0lOX1dJRFRIXzBfQ1VCRV9JTl9XSURUSF9T
SElGVAkJCV9NS19TSElGVF9DT05TVCgwKQ0KPiArI2RlZmluZSBQRFBfRF9EQVRBX0NVQkVf
SU5fV0lEVEhfMF9DVUJFX0lOX1dJRFRIX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4MWZm
ZiwgUERQX0RfREFUQV9DVUJFX0lOX1dJRFRIXzBfQ1VCRV9JTl9XSURUSF9TSElGVCkNCj4g
Kw0KPiArDQo+ICsvLyBSZWdpc3RlciBQRFBfRF9EQVRBX0NVQkVfSU5fSEVJR0hUXzANCj4g
KyNkZWZpbmUgUERQX0RfREFUQV9DVUJFX0lOX0hFSUdIVF8wCQkJX01LX0FERFJfQ09OU1Qo
MHhiMDEwKQ0KPiArI2RlZmluZSBQRFBfRF9EQVRBX0NVQkVfSU5fSEVJR0hUXzBfQ1VCRV9J
Tl9IRUlHSFRfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMCkNCj4gKyNkZWZpbmUgUERQX0Rf
REFUQV9DVUJFX0lOX0hFSUdIVF8wX0NVQkVfSU5fSEVJR0hUX0ZJRUxECQkJX01LX0ZJRUxE
X0NPTlNUKDB4MWZmZiwgUERQX0RfREFUQV9DVUJFX0lOX0hFSUdIVF8wX0NVQkVfSU5fSEVJ
R0hUX1NISUZUKQ0KPiArDQo+ICsNCj4gKy8vIFJlZ2lzdGVyIFBEUF9EX0RBVEFfQ1VCRV9J
Tl9DSEFOTkVMXzANCj4gKyNkZWZpbmUgUERQX0RfREFUQV9DVUJFX0lOX0NIQU5ORUxfMAkJ
CV9NS19BRERSX0NPTlNUKDB4YjAxNCkNCj4gKyNkZWZpbmUgUERQX0RfREFUQV9DVUJFX0lO
X0NIQU5ORUxfMF9DVUJFX0lOX0NIQU5ORUxfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMCkN
Cj4gKyNkZWZpbmUgUERQX0RfREFUQV9DVUJFX0lOX0NIQU5ORUxfMF9DVUJFX0lOX0NIQU5O
RUxfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHgxZmZmLCBQRFBfRF9EQVRBX0NVQkVfSU5f
Q0hBTk5FTF8wX0NVQkVfSU5fQ0hBTk5FTF9TSElGVCkNCj4gKw0KPiArDQo+ICsvLyBSZWdp
c3RlciBQRFBfRF9EQVRBX0NVQkVfT1VUX1dJRFRIXzANCj4gKyNkZWZpbmUgUERQX0RfREFU
QV9DVUJFX09VVF9XSURUSF8wCQkJX01LX0FERFJfQ09OU1QoMHhiMDE4KQ0KPiArI2RlZmlu
ZSBQRFBfRF9EQVRBX0NVQkVfT1VUX1dJRFRIXzBfQ1VCRV9PVVRfV0lEVEhfU0hJRlQJCQlf
TUtfU0hJRlRfQ09OU1QoMCkNCj4gKyNkZWZpbmUgUERQX0RfREFUQV9DVUJFX09VVF9XSURU
SF8wX0NVQkVfT1VUX1dJRFRIX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4MWZmZiwgUERQ
X0RfREFUQV9DVUJFX09VVF9XSURUSF8wX0NVQkVfT1VUX1dJRFRIX1NISUZUKQ0KPiArDQo+
ICsNCj4gKy8vIFJlZ2lzdGVyIFBEUF9EX0RBVEFfQ1VCRV9PVVRfSEVJR0hUXzANCj4gKyNk
ZWZpbmUgUERQX0RfREFUQV9DVUJFX09VVF9IRUlHSFRfMAkJCV9NS19BRERSX0NPTlNUKDB4
YjAxYykNCj4gKyNkZWZpbmUgUERQX0RfREFUQV9DVUJFX09VVF9IRUlHSFRfMF9DVUJFX09V
VF9IRUlHSFRfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMCkNCj4gKyNkZWZpbmUgUERQX0Rf
REFUQV9DVUJFX09VVF9IRUlHSFRfMF9DVUJFX09VVF9IRUlHSFRfRklFTEQJCQlfTUtfRklF
TERfQ09OU1QoMHgxZmZmLCBQRFBfRF9EQVRBX0NVQkVfT1VUX0hFSUdIVF8wX0NVQkVfT1VU
X0hFSUdIVF9TSElGVCkNCj4gKw0KPiArDQo+ICsvLyBSZWdpc3RlciBQRFBfRF9EQVRBX0NV
QkVfT1VUX0NIQU5ORUxfMA0KPiArI2RlZmluZSBQRFBfRF9EQVRBX0NVQkVfT1VUX0NIQU5O
RUxfMAkJCV9NS19BRERSX0NPTlNUKDB4YjAyMCkNCj4gKyNkZWZpbmUgUERQX0RfREFUQV9D
VUJFX09VVF9DSEFOTkVMXzBfQ1VCRV9PVVRfQ0hBTk5FTF9TSElGVAkJCV9NS19TSElGVF9D
T05TVCgwKQ0KPiArI2RlZmluZSBQRFBfRF9EQVRBX0NVQkVfT1VUX0NIQU5ORUxfMF9DVUJF
X09VVF9DSEFOTkVMX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4MWZmZiwgUERQX0RfREFU
QV9DVUJFX09VVF9DSEFOTkVMXzBfQ1VCRV9PVVRfQ0hBTk5FTF9TSElGVCkNCj4gKw0KPiAr
DQo+ICsvLyBSZWdpc3RlciBQRFBfRF9PUEVSQVRJT05fTU9ERV9DRkdfMA0KPiArI2RlZmlu
ZSBQRFBfRF9PUEVSQVRJT05fTU9ERV9DRkdfMAkJCV9NS19BRERSX0NPTlNUKDB4YjAyNCkN
Cj4gKyNkZWZpbmUgUERQX0RfT1BFUkFUSU9OX01PREVfQ0ZHXzBfUE9PTElOR19NRVRIT0Rf
U0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMCkNCj4gKyNkZWZpbmUgUERQX0RfT1BFUkFUSU9O
X01PREVfQ0ZHXzBfUE9PTElOR19NRVRIT0RfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHgz
LCBQRFBfRF9PUEVSQVRJT05fTU9ERV9DRkdfMF9QT09MSU5HX01FVEhPRF9TSElGVCkNCj4g
KyNkZWZpbmUgUERQX0RfT1BFUkFUSU9OX01PREVfQ0ZHXzBfUE9PTElOR19NRVRIT0RfUE9P
TElOR19NRVRIT0RfQVZFUkFHRQkJCV9NS19FTlVNX0NPTlNUKDB4MCkNCj4gKyNkZWZpbmUg
UERQX0RfT1BFUkFUSU9OX01PREVfQ0ZHXzBfUE9PTElOR19NRVRIT0RfUE9PTElOR19NRVRI
T0RfTUFYCQkJX01LX0VOVU1fQ09OU1QoMHgxKQ0KPiArI2RlZmluZSBQRFBfRF9PUEVSQVRJ
T05fTU9ERV9DRkdfMF9QT09MSU5HX01FVEhPRF9QT09MSU5HX01FVEhPRF9NSU4JCQlfTUtf
RU5VTV9DT05TVCgweDIpDQo+ICsjZGVmaW5lIFBEUF9EX09QRVJBVElPTl9NT0RFX0NGR18w
X0ZMWUlOR19NT0RFX1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDQpDQo+ICsjZGVmaW5lIFBE
UF9EX09QRVJBVElPTl9NT0RFX0NGR18wX0ZMWUlOR19NT0RFX0ZJRUxECQkJX01LX0ZJRUxE
X0NPTlNUKDB4MSwgUERQX0RfT1BFUkFUSU9OX01PREVfQ0ZHXzBfRkxZSU5HX01PREVfU0hJ
RlQpDQo+ICsjZGVmaW5lIFBEUF9EX09QRVJBVElPTl9NT0RFX0NGR18wX0ZMWUlOR19NT0RF
X09OX0ZMWUlORwkJCV9NS19FTlVNX0NPTlNUKDB4MCkNCj4gKyNkZWZpbmUgUERQX0RfT1BF
UkFUSU9OX01PREVfQ0ZHXzBfRkxZSU5HX01PREVfT0ZGX0ZMWUlORwkJCV9NS19FTlVNX0NP
TlNUKDB4MSkNCj4gKyNkZWZpbmUgUERQX0RfT1BFUkFUSU9OX01PREVfQ0ZHXzBfU1BMSVRf
TlVNX1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDgpDQo+ICsjZGVmaW5lIFBEUF9EX09QRVJB
VElPTl9NT0RFX0NGR18wX1NQTElUX05VTV9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweGZm
LCBQRFBfRF9PUEVSQVRJT05fTU9ERV9DRkdfMF9TUExJVF9OVU1fU0hJRlQpDQo+ICsNCj4g
Kw0KPiArLy8gUmVnaXN0ZXIgUERQX0RfTkFOX0ZMVVNIX1RPX1pFUk9fMA0KPiArI2RlZmlu
ZSBQRFBfRF9OQU5fRkxVU0hfVE9fWkVST18wCQkJX01LX0FERFJfQ09OU1QoMHhiMDI4KQ0K
PiArI2RlZmluZSBQRFBfRF9OQU5fRkxVU0hfVE9fWkVST18wX05BTl9UT19aRVJPX1NISUZU
CQkJX01LX1NISUZUX0NPTlNUKDApDQo+ICsjZGVmaW5lIFBEUF9EX05BTl9GTFVTSF9UT19a
RVJPXzBfTkFOX1RPX1pFUk9fRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHgxLCBQRFBfRF9O
QU5fRkxVU0hfVE9fWkVST18wX05BTl9UT19aRVJPX1NISUZUKQ0KPiArI2RlZmluZSBQRFBf
RF9OQU5fRkxVU0hfVE9fWkVST18wX05BTl9UT19aRVJPX0RJU0FCTEUJCQlfTUtfRU5VTV9D
T05TVCgweDApDQo+ICsjZGVmaW5lIFBEUF9EX05BTl9GTFVTSF9UT19aRVJPXzBfTkFOX1RP
X1pFUk9fRU5BQkxFCQkJX01LX0VOVU1fQ09OU1QoMHgxKQ0KPiArDQo+ICsNCj4gKy8vIFJl
Z2lzdGVyIFBEUF9EX1BBUlRJQUxfV0lEVEhfSU5fMA0KPiArI2RlZmluZSBQRFBfRF9QQVJU
SUFMX1dJRFRIX0lOXzAJCQlfTUtfQUREUl9DT05TVCgweGIwMmMpDQo+ICsjZGVmaW5lIFBE
UF9EX1BBUlRJQUxfV0lEVEhfSU5fMF9QQVJUSUFMX1dJRFRIX0lOX0ZJUlNUX1NISUZUCQkJ
X01LX1NISUZUX0NPTlNUKDApDQo+ICsjZGVmaW5lIFBEUF9EX1BBUlRJQUxfV0lEVEhfSU5f
MF9QQVJUSUFMX1dJRFRIX0lOX0ZJUlNUX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4M2Zm
LCBQRFBfRF9QQVJUSUFMX1dJRFRIX0lOXzBfUEFSVElBTF9XSURUSF9JTl9GSVJTVF9TSElG
VCkNCj4gKyNkZWZpbmUgUERQX0RfUEFSVElBTF9XSURUSF9JTl8wX1BBUlRJQUxfV0lEVEhf
SU5fTEFTVF9TSElGVAkJCV9NS19TSElGVF9DT05TVCgxMCkNCj4gKyNkZWZpbmUgUERQX0Rf
UEFSVElBTF9XSURUSF9JTl8wX1BBUlRJQUxfV0lEVEhfSU5fTEFTVF9GSUVMRAkJCV9NS19G
SUVMRF9DT05TVCgweDNmZiwgUERQX0RfUEFSVElBTF9XSURUSF9JTl8wX1BBUlRJQUxfV0lE
VEhfSU5fTEFTVF9TSElGVCkNCj4gKyNkZWZpbmUgUERQX0RfUEFSVElBTF9XSURUSF9JTl8w
X1BBUlRJQUxfV0lEVEhfSU5fTUlEX1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDIwKQ0KPiAr
I2RlZmluZSBQRFBfRF9QQVJUSUFMX1dJRFRIX0lOXzBfUEFSVElBTF9XSURUSF9JTl9NSURf
RklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHgzZmYsIFBEUF9EX1BBUlRJQUxfV0lEVEhfSU5f
MF9QQVJUSUFMX1dJRFRIX0lOX01JRF9TSElGVCkNCj4gKw0KPiArDQo+ICsvLyBSZWdpc3Rl
ciBQRFBfRF9QQVJUSUFMX1dJRFRIX09VVF8wDQo+ICsjZGVmaW5lIFBEUF9EX1BBUlRJQUxf
V0lEVEhfT1VUXzAJCQlfTUtfQUREUl9DT05TVCgweGIwMzApDQo+ICsjZGVmaW5lIFBEUF9E
X1BBUlRJQUxfV0lEVEhfT1VUXzBfUEFSVElBTF9XSURUSF9PVVRfRklSU1RfU0hJRlQJCQlf
TUtfU0hJRlRfQ09OU1QoMCkNCj4gKyNkZWZpbmUgUERQX0RfUEFSVElBTF9XSURUSF9PVVRf
MF9QQVJUSUFMX1dJRFRIX09VVF9GSVJTVF9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweDNm
ZiwgUERQX0RfUEFSVElBTF9XSURUSF9PVVRfMF9QQVJUSUFMX1dJRFRIX09VVF9GSVJTVF9T
SElGVCkNCj4gKyNkZWZpbmUgUERQX0RfUEFSVElBTF9XSURUSF9PVVRfMF9QQVJUSUFMX1dJ
RFRIX09VVF9MQVNUX1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDEwKQ0KPiArI2RlZmluZSBQ
RFBfRF9QQVJUSUFMX1dJRFRIX09VVF8wX1BBUlRJQUxfV0lEVEhfT1VUX0xBU1RfRklFTEQJ
CQlfTUtfRklFTERfQ09OU1QoMHgzZmYsIFBEUF9EX1BBUlRJQUxfV0lEVEhfT1VUXzBfUEFS
VElBTF9XSURUSF9PVVRfTEFTVF9TSElGVCkNCj4gKyNkZWZpbmUgUERQX0RfUEFSVElBTF9X
SURUSF9PVVRfMF9QQVJUSUFMX1dJRFRIX09VVF9NSURfU0hJRlQJCQlfTUtfU0hJRlRfQ09O
U1QoMjApDQo+ICsjZGVmaW5lIFBEUF9EX1BBUlRJQUxfV0lEVEhfT1VUXzBfUEFSVElBTF9X
SURUSF9PVVRfTUlEX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4M2ZmLCBQRFBfRF9QQVJU
SUFMX1dJRFRIX09VVF8wX1BBUlRJQUxfV0lEVEhfT1VUX01JRF9TSElGVCkNCj4gKw0KPiAr
DQo+ICsvLyBSZWdpc3RlciBQRFBfRF9QT09MSU5HX0tFUk5FTF9DRkdfMA0KPiArI2RlZmlu
ZSBQRFBfRF9QT09MSU5HX0tFUk5FTF9DRkdfMAkJCV9NS19BRERSX0NPTlNUKDB4YjAzNCkN
Cj4gKyNkZWZpbmUgUERQX0RfUE9PTElOR19LRVJORUxfQ0ZHXzBfS0VSTkVMX1dJRFRIX1NI
SUZUCQkJX01LX1NISUZUX0NPTlNUKDApDQo+ICsjZGVmaW5lIFBEUF9EX1BPT0xJTkdfS0VS
TkVMX0NGR18wX0tFUk5FTF9XSURUSF9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweGYsIFBE
UF9EX1BPT0xJTkdfS0VSTkVMX0NGR18wX0tFUk5FTF9XSURUSF9TSElGVCkNCj4gKyNkZWZp
bmUgUERQX0RfUE9PTElOR19LRVJORUxfQ0ZHXzBfS0VSTkVMX1dJRFRIX0tFUk5FTF9XSURU
SF8xCQkJX01LX0VOVU1fQ09OU1QoMHgwKQ0KPiArI2RlZmluZSBQRFBfRF9QT09MSU5HX0tF
Uk5FTF9DRkdfMF9LRVJORUxfV0lEVEhfS0VSTkVMX1dJRFRIXzIJCQlfTUtfRU5VTV9DT05T
VCgweDEpDQo+ICsjZGVmaW5lIFBEUF9EX1BPT0xJTkdfS0VSTkVMX0NGR18wX0tFUk5FTF9X
SURUSF9LRVJORUxfV0lEVEhfMwkJCV9NS19FTlVNX0NPTlNUKDB4MikNCj4gKyNkZWZpbmUg
UERQX0RfUE9PTElOR19LRVJORUxfQ0ZHXzBfS0VSTkVMX1dJRFRIX0tFUk5FTF9XSURUSF80
CQkJX01LX0VOVU1fQ09OU1QoMHgzKQ0KPiArI2RlZmluZSBQRFBfRF9QT09MSU5HX0tFUk5F
TF9DRkdfMF9LRVJORUxfV0lEVEhfS0VSTkVMX1dJRFRIXzUJCQlfTUtfRU5VTV9DT05TVCgw
eDQpDQo+ICsjZGVmaW5lIFBEUF9EX1BPT0xJTkdfS0VSTkVMX0NGR18wX0tFUk5FTF9XSURU
SF9LRVJORUxfV0lEVEhfNgkJCV9NS19FTlVNX0NPTlNUKDB4NSkNCj4gKyNkZWZpbmUgUERQ
X0RfUE9PTElOR19LRVJORUxfQ0ZHXzBfS0VSTkVMX1dJRFRIX0tFUk5FTF9XSURUSF83CQkJ
X01LX0VOVU1fQ09OU1QoMHg2KQ0KPiArI2RlZmluZSBQRFBfRF9QT09MSU5HX0tFUk5FTF9D
RkdfMF9LRVJORUxfV0lEVEhfS0VSTkVMX1dJRFRIXzgJCQlfTUtfRU5VTV9DT05TVCgweDcp
DQo+ICsjZGVmaW5lIFBEUF9EX1BPT0xJTkdfS0VSTkVMX0NGR18wX0tFUk5FTF9IRUlHSFRf
U0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoOCkNCj4gKyNkZWZpbmUgUERQX0RfUE9PTElOR19L
RVJORUxfQ0ZHXzBfS0VSTkVMX0hFSUdIVF9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweGYs
IFBEUF9EX1BPT0xJTkdfS0VSTkVMX0NGR18wX0tFUk5FTF9IRUlHSFRfU0hJRlQpDQo+ICsj
ZGVmaW5lIFBEUF9EX1BPT0xJTkdfS0VSTkVMX0NGR18wX0tFUk5FTF9IRUlHSFRfS0VSTkVM
X0hFSUdIVF8xCQkJX01LX0VOVU1fQ09OU1QoMHgwKQ0KPiArI2RlZmluZSBQRFBfRF9QT09M
SU5HX0tFUk5FTF9DRkdfMF9LRVJORUxfSEVJR0hUX0tFUk5FTF9IRUlHSFRfMgkJCV9NS19F
TlVNX0NPTlNUKDB4MSkNCj4gKyNkZWZpbmUgUERQX0RfUE9PTElOR19LRVJORUxfQ0ZHXzBf
S0VSTkVMX0hFSUdIVF9LRVJORUxfSEVJR0hUXzMJCQlfTUtfRU5VTV9DT05TVCgweDIpDQo+
ICsjZGVmaW5lIFBEUF9EX1BPT0xJTkdfS0VSTkVMX0NGR18wX0tFUk5FTF9IRUlHSFRfS0VS
TkVMX0hFSUdIVF80CQkJX01LX0VOVU1fQ09OU1QoMHgzKQ0KPiArI2RlZmluZSBQRFBfRF9Q
T09MSU5HX0tFUk5FTF9DRkdfMF9LRVJORUxfSEVJR0hUX0tFUk5FTF9IRUlHSFRfNQkJCV9N
S19FTlVNX0NPTlNUKDB4NCkNCj4gKyNkZWZpbmUgUERQX0RfUE9PTElOR19LRVJORUxfQ0ZH
XzBfS0VSTkVMX0hFSUdIVF9LRVJORUxfSEVJR0hUXzYJCQlfTUtfRU5VTV9DT05TVCgweDUp
DQo+ICsjZGVmaW5lIFBEUF9EX1BPT0xJTkdfS0VSTkVMX0NGR18wX0tFUk5FTF9IRUlHSFRf
S0VSTkVMX0hFSUdIVF83CQkJX01LX0VOVU1fQ09OU1QoMHg2KQ0KPiArI2RlZmluZSBQRFBf
RF9QT09MSU5HX0tFUk5FTF9DRkdfMF9LRVJORUxfSEVJR0hUX0tFUk5FTF9IRUlHSFRfOAkJ
CV9NS19FTlVNX0NPTlNUKDB4NykNCj4gKyNkZWZpbmUgUERQX0RfUE9PTElOR19LRVJORUxf
Q0ZHXzBfS0VSTkVMX1NUUklERV9XSURUSF9TSElGVAkJCV9NS19TSElGVF9DT05TVCgxNikN
Cj4gKyNkZWZpbmUgUERQX0RfUE9PTElOR19LRVJORUxfQ0ZHXzBfS0VSTkVMX1NUUklERV9X
SURUSF9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweGYsIFBEUF9EX1BPT0xJTkdfS0VSTkVM
X0NGR18wX0tFUk5FTF9TVFJJREVfV0lEVEhfU0hJRlQpDQo+ICsjZGVmaW5lIFBEUF9EX1BP
T0xJTkdfS0VSTkVMX0NGR18wX0tFUk5FTF9TVFJJREVfSEVJR0hUX1NISUZUCQkJX01LX1NI
SUZUX0NPTlNUKDIwKQ0KPiArI2RlZmluZSBQRFBfRF9QT09MSU5HX0tFUk5FTF9DRkdfMF9L
RVJORUxfU1RSSURFX0hFSUdIVF9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweGYsIFBEUF9E
X1BPT0xJTkdfS0VSTkVMX0NGR18wX0tFUk5FTF9TVFJJREVfSEVJR0hUX1NISUZUKQ0KPiAr
DQo+ICsNCj4gKy8vIFJlZ2lzdGVyIFBEUF9EX1JFQ0lQX0tFUk5FTF9XSURUSF8wDQo+ICsj
ZGVmaW5lIFBEUF9EX1JFQ0lQX0tFUk5FTF9XSURUSF8wCQkJX01LX0FERFJfQ09OU1QoMHhi
MDM4KQ0KPiArI2RlZmluZSBQRFBfRF9SRUNJUF9LRVJORUxfV0lEVEhfMF9SRUNJUF9LRVJO
RUxfV0lEVEhfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMCkNCj4gKyNkZWZpbmUgUERQX0Rf
UkVDSVBfS0VSTkVMX1dJRFRIXzBfUkVDSVBfS0VSTkVMX1dJRFRIX0ZJRUxECQkJX01LX0ZJ
RUxEX0NPTlNUKDB4MWZmZmYsIFBEUF9EX1JFQ0lQX0tFUk5FTF9XSURUSF8wX1JFQ0lQX0tF
Uk5FTF9XSURUSF9TSElGVCkNCj4gKw0KPiArDQo+ICsvLyBSZWdpc3RlciBQRFBfRF9SRUNJ
UF9LRVJORUxfSEVJR0hUXzANCj4gKyNkZWZpbmUgUERQX0RfUkVDSVBfS0VSTkVMX0hFSUdI
VF8wCQkJX01LX0FERFJfQ09OU1QoMHhiMDNjKQ0KPiArI2RlZmluZSBQRFBfRF9SRUNJUF9L
RVJORUxfSEVJR0hUXzBfUkVDSVBfS0VSTkVMX0hFSUdIVF9TSElGVAkJCV9NS19TSElGVF9D
T05TVCgwKQ0KPiArI2RlZmluZSBQRFBfRF9SRUNJUF9LRVJORUxfSEVJR0hUXzBfUkVDSVBf
S0VSTkVMX0hFSUdIVF9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweDFmZmZmLCBQRFBfRF9S
RUNJUF9LRVJORUxfSEVJR0hUXzBfUkVDSVBfS0VSTkVMX0hFSUdIVF9TSElGVCkNCj4gKw0K
PiArDQo+ICsvLyBSZWdpc3RlciBQRFBfRF9QT09MSU5HX1BBRERJTkdfQ0ZHXzANCj4gKyNk
ZWZpbmUgUERQX0RfUE9PTElOR19QQURESU5HX0NGR18wCQkJX01LX0FERFJfQ09OU1QoMHhi
MDQwKQ0KPiArI2RlZmluZSBQRFBfRF9QT09MSU5HX1BBRERJTkdfQ0ZHXzBfUEFEX0xFRlRf
U0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMCkNCj4gKyNkZWZpbmUgUERQX0RfUE9PTElOR19Q
QURESU5HX0NGR18wX1BBRF9MRUZUX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4NywgUERQ
X0RfUE9PTElOR19QQURESU5HX0NGR18wX1BBRF9MRUZUX1NISUZUKQ0KPiArI2RlZmluZSBQ
RFBfRF9QT09MSU5HX1BBRERJTkdfQ0ZHXzBfUEFEX1RPUF9TSElGVAkJCV9NS19TSElGVF9D
T05TVCg0KQ0KPiArI2RlZmluZSBQRFBfRF9QT09MSU5HX1BBRERJTkdfQ0ZHXzBfUEFEX1RP
UF9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweDcsIFBEUF9EX1BPT0xJTkdfUEFERElOR19D
RkdfMF9QQURfVE9QX1NISUZUKQ0KPiArI2RlZmluZSBQRFBfRF9QT09MSU5HX1BBRERJTkdf
Q0ZHXzBfUEFEX1JJR0hUX1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDgpDQo+ICsjZGVmaW5l
IFBEUF9EX1BPT0xJTkdfUEFERElOR19DRkdfMF9QQURfUklHSFRfRklFTEQJCQlfTUtfRklF
TERfQ09OU1QoMHg3LCBQRFBfRF9QT09MSU5HX1BBRERJTkdfQ0ZHXzBfUEFEX1JJR0hUX1NI
SUZUKQ0KPiArI2RlZmluZSBQRFBfRF9QT09MSU5HX1BBRERJTkdfQ0ZHXzBfUEFEX0JPVFRP
TV9TSElGVAkJCV9NS19TSElGVF9DT05TVCgxMikNCj4gKyNkZWZpbmUgUERQX0RfUE9PTElO
R19QQURESU5HX0NGR18wX1BBRF9CT1RUT01fRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHg3
LCBQRFBfRF9QT09MSU5HX1BBRERJTkdfQ0ZHXzBfUEFEX0JPVFRPTV9TSElGVCkNCj4gKw0K
PiArDQo+ICsvLyBSZWdpc3RlciBQRFBfRF9QT09MSU5HX1BBRERJTkdfVkFMVUVfMV9DRkdf
MA0KPiArI2RlZmluZSBQRFBfRF9QT09MSU5HX1BBRERJTkdfVkFMVUVfMV9DRkdfMAkJCV9N
S19BRERSX0NPTlNUKDB4YjA0NCkNCj4gKyNkZWZpbmUgUERQX0RfUE9PTElOR19QQURESU5H
X1ZBTFVFXzFfQ0ZHXzBfUEFEX1ZBTFVFXzFYX1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDAp
DQo+ICsjZGVmaW5lIFBEUF9EX1BPT0xJTkdfUEFERElOR19WQUxVRV8xX0NGR18wX1BBRF9W
QUxVRV8xWF9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweDdmZmZmLCBQRFBfRF9QT09MSU5H
X1BBRERJTkdfVkFMVUVfMV9DRkdfMF9QQURfVkFMVUVfMVhfU0hJRlQpDQo+ICsNCj4gKw0K
PiArLy8gUmVnaXN0ZXIgUERQX0RfUE9PTElOR19QQURESU5HX1ZBTFVFXzJfQ0ZHXzANCj4g
KyNkZWZpbmUgUERQX0RfUE9PTElOR19QQURESU5HX1ZBTFVFXzJfQ0ZHXzAJCQlfTUtfQURE
Ul9DT05TVCgweGIwNDgpDQo+ICsjZGVmaW5lIFBEUF9EX1BPT0xJTkdfUEFERElOR19WQUxV
RV8yX0NGR18wX1BBRF9WQUxVRV8yWF9TSElGVAkJCV9NS19TSElGVF9DT05TVCgwKQ0KPiAr
I2RlZmluZSBQRFBfRF9QT09MSU5HX1BBRERJTkdfVkFMVUVfMl9DRkdfMF9QQURfVkFMVUVf
MlhfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHg3ZmZmZiwgUERQX0RfUE9PTElOR19QQURE
SU5HX1ZBTFVFXzJfQ0ZHXzBfUEFEX1ZBTFVFXzJYX1NISUZUKQ0KPiArDQo+ICsNCj4gKy8v
IFJlZ2lzdGVyIFBEUF9EX1BPT0xJTkdfUEFERElOR19WQUxVRV8zX0NGR18wDQo+ICsjZGVm
aW5lIFBEUF9EX1BPT0xJTkdfUEFERElOR19WQUxVRV8zX0NGR18wCQkJX01LX0FERFJfQ09O
U1QoMHhiMDRjKQ0KPiArI2RlZmluZSBQRFBfRF9QT09MSU5HX1BBRERJTkdfVkFMVUVfM19D
RkdfMF9QQURfVkFMVUVfM1hfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMCkNCj4gKyNkZWZp
bmUgUERQX0RfUE9PTElOR19QQURESU5HX1ZBTFVFXzNfQ0ZHXzBfUEFEX1ZBTFVFXzNYX0ZJ
RUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4N2ZmZmYsIFBEUF9EX1BPT0xJTkdfUEFERElOR19W
QUxVRV8zX0NGR18wX1BBRF9WQUxVRV8zWF9TSElGVCkNCj4gKw0KPiArDQo+ICsvLyBSZWdp
c3RlciBQRFBfRF9QT09MSU5HX1BBRERJTkdfVkFMVUVfNF9DRkdfMA0KPiArI2RlZmluZSBQ
RFBfRF9QT09MSU5HX1BBRERJTkdfVkFMVUVfNF9DRkdfMAkJCV9NS19BRERSX0NPTlNUKDB4
YjA1MCkNCj4gKyNkZWZpbmUgUERQX0RfUE9PTElOR19QQURESU5HX1ZBTFVFXzRfQ0ZHXzBf
UEFEX1ZBTFVFXzRYX1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDApDQo+ICsjZGVmaW5lIFBE
UF9EX1BPT0xJTkdfUEFERElOR19WQUxVRV80X0NGR18wX1BBRF9WQUxVRV80WF9GSUVMRAkJ
CV9NS19GSUVMRF9DT05TVCgweDdmZmZmLCBQRFBfRF9QT09MSU5HX1BBRERJTkdfVkFMVUVf
NF9DRkdfMF9QQURfVkFMVUVfNFhfU0hJRlQpDQo+ICsNCj4gKw0KPiArLy8gUmVnaXN0ZXIg
UERQX0RfUE9PTElOR19QQURESU5HX1ZBTFVFXzVfQ0ZHXzANCj4gKyNkZWZpbmUgUERQX0Rf
UE9PTElOR19QQURESU5HX1ZBTFVFXzVfQ0ZHXzAJCQlfTUtfQUREUl9DT05TVCgweGIwNTQp
DQo+ICsjZGVmaW5lIFBEUF9EX1BPT0xJTkdfUEFERElOR19WQUxVRV81X0NGR18wX1BBRF9W
QUxVRV81WF9TSElGVAkJCV9NS19TSElGVF9DT05TVCgwKQ0KPiArI2RlZmluZSBQRFBfRF9Q
T09MSU5HX1BBRERJTkdfVkFMVUVfNV9DRkdfMF9QQURfVkFMVUVfNVhfRklFTEQJCQlfTUtf
RklFTERfQ09OU1QoMHg3ZmZmZiwgUERQX0RfUE9PTElOR19QQURESU5HX1ZBTFVFXzVfQ0ZH
XzBfUEFEX1ZBTFVFXzVYX1NISUZUKQ0KPiArDQo+ICsNCj4gKy8vIFJlZ2lzdGVyIFBEUF9E
X1BPT0xJTkdfUEFERElOR19WQUxVRV82X0NGR18wDQo+ICsjZGVmaW5lIFBEUF9EX1BPT0xJ
TkdfUEFERElOR19WQUxVRV82X0NGR18wCQkJX01LX0FERFJfQ09OU1QoMHhiMDU4KQ0KPiAr
I2RlZmluZSBQRFBfRF9QT09MSU5HX1BBRERJTkdfVkFMVUVfNl9DRkdfMF9QQURfVkFMVUVf
NlhfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMCkNCj4gKyNkZWZpbmUgUERQX0RfUE9PTElO
R19QQURESU5HX1ZBTFVFXzZfQ0ZHXzBfUEFEX1ZBTFVFXzZYX0ZJRUxECQkJX01LX0ZJRUxE
X0NPTlNUKDB4N2ZmZmYsIFBEUF9EX1BPT0xJTkdfUEFERElOR19WQUxVRV82X0NGR18wX1BB
RF9WQUxVRV82WF9TSElGVCkNCj4gKw0KPiArDQo+ICsvLyBSZWdpc3RlciBQRFBfRF9QT09M
SU5HX1BBRERJTkdfVkFMVUVfN19DRkdfMA0KPiArI2RlZmluZSBQRFBfRF9QT09MSU5HX1BB
RERJTkdfVkFMVUVfN19DRkdfMAkJCV9NS19BRERSX0NPTlNUKDB4YjA1YykNCj4gKyNkZWZp
bmUgUERQX0RfUE9PTElOR19QQURESU5HX1ZBTFVFXzdfQ0ZHXzBfUEFEX1ZBTFVFXzdYX1NI
SUZUCQkJX01LX1NISUZUX0NPTlNUKDApDQo+ICsjZGVmaW5lIFBEUF9EX1BPT0xJTkdfUEFE
RElOR19WQUxVRV83X0NGR18wX1BBRF9WQUxVRV83WF9GSUVMRAkJCV9NS19GSUVMRF9DT05T
VCgweDdmZmZmLCBQRFBfRF9QT09MSU5HX1BBRERJTkdfVkFMVUVfN19DRkdfMF9QQURfVkFM
VUVfN1hfU0hJRlQpDQo+ICsNCj4gKw0KPiArLy8gUmVnaXN0ZXIgUERQX0RfU1JDX0JBU0Vf
QUREUl9MT1dfMA0KPiArI2RlZmluZSBQRFBfRF9TUkNfQkFTRV9BRERSX0xPV18wCQkJX01L
X0FERFJfQ09OU1QoMHhiMDYwKQ0KPiArI2RlZmluZSBQRFBfRF9TUkNfQkFTRV9BRERSX0xP
V18wX1NSQ19CQVNFX0FERFJfTE9XX1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDApDQo+ICsj
ZGVmaW5lIFBEUF9EX1NSQ19CQVNFX0FERFJfTE9XXzBfU1JDX0JBU0VfQUREUl9MT1dfRklF
TEQJCQlfTUtfRklFTERfQ09OU1QoMHhmZmZmZmZmZiwgUERQX0RfU1JDX0JBU0VfQUREUl9M
T1dfMF9TUkNfQkFTRV9BRERSX0xPV19TSElGVCkNCj4gKw0KPiArDQo+ICsvLyBSZWdpc3Rl
ciBQRFBfRF9TUkNfQkFTRV9BRERSX0hJR0hfMA0KPiArI2RlZmluZSBQRFBfRF9TUkNfQkFT
RV9BRERSX0hJR0hfMAkJCV9NS19BRERSX0NPTlNUKDB4YjA2NCkNCj4gKyNkZWZpbmUgUERQ
X0RfU1JDX0JBU0VfQUREUl9ISUdIXzBfU1JDX0JBU0VfQUREUl9ISUdIX1NISUZUCQkJX01L
X1NISUZUX0NPTlNUKDApDQo+ICsjZGVmaW5lIFBEUF9EX1NSQ19CQVNFX0FERFJfSElHSF8w
X1NSQ19CQVNFX0FERFJfSElHSF9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweGZmZmZmZmZm
LCBQRFBfRF9TUkNfQkFTRV9BRERSX0hJR0hfMF9TUkNfQkFTRV9BRERSX0hJR0hfU0hJRlQp
DQo+ICsNCj4gKw0KPiArLy8gUmVnaXN0ZXIgUERQX0RfU1JDX0xJTkVfU1RSSURFXzANCj4g
KyNkZWZpbmUgUERQX0RfU1JDX0xJTkVfU1RSSURFXzAJCQlfTUtfQUREUl9DT05TVCgweGIw
NjgpDQo+ICsjZGVmaW5lIFBEUF9EX1NSQ19MSU5FX1NUUklERV8wX1NSQ19MSU5FX1NUUklE
RV9TSElGVAkJCV9NS19TSElGVF9DT05TVCgwKQ0KPiArI2RlZmluZSBQRFBfRF9TUkNfTElO
RV9TVFJJREVfMF9TUkNfTElORV9TVFJJREVfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHhm
ZmZmZmZmZiwgUERQX0RfU1JDX0xJTkVfU1RSSURFXzBfU1JDX0xJTkVfU1RSSURFX1NISUZU
KQ0KPiArDQo+ICsNCj4gKy8vIFJlZ2lzdGVyIFBEUF9EX1NSQ19TVVJGQUNFX1NUUklERV8w
DQo+ICsjZGVmaW5lIFBEUF9EX1NSQ19TVVJGQUNFX1NUUklERV8wCQkJX01LX0FERFJfQ09O
U1QoMHhiMDZjKQ0KPiArI2RlZmluZSBQRFBfRF9TUkNfU1VSRkFDRV9TVFJJREVfMF9TUkNf
U1VSRkFDRV9TVFJJREVfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMCkNCj4gKyNkZWZpbmUg
UERQX0RfU1JDX1NVUkZBQ0VfU1RSSURFXzBfU1JDX1NVUkZBQ0VfU1RSSURFX0ZJRUxECQkJ
X01LX0ZJRUxEX0NPTlNUKDB4ZmZmZmZmZmYsIFBEUF9EX1NSQ19TVVJGQUNFX1NUUklERV8w
X1NSQ19TVVJGQUNFX1NUUklERV9TSElGVCkNCj4gKw0KPiArDQo+ICsvLyBSZWdpc3RlciBQ
RFBfRF9EU1RfQkFTRV9BRERSX0xPV18wDQo+ICsjZGVmaW5lIFBEUF9EX0RTVF9CQVNFX0FE
RFJfTE9XXzAJCQlfTUtfQUREUl9DT05TVCgweGIwNzApDQo+ICsjZGVmaW5lIFBEUF9EX0RT
VF9CQVNFX0FERFJfTE9XXzBfRFNUX0JBU0VfQUREUl9MT1dfU0hJRlQJCQlfTUtfU0hJRlRf
Q09OU1QoMCkNCj4gKyNkZWZpbmUgUERQX0RfRFNUX0JBU0VfQUREUl9MT1dfMF9EU1RfQkFT
RV9BRERSX0xPV19GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweGZmZmZmZmZmLCBQRFBfRF9E
U1RfQkFTRV9BRERSX0xPV18wX0RTVF9CQVNFX0FERFJfTE9XX1NISUZUKQ0KPiArDQo+ICsN
Cj4gKy8vIFJlZ2lzdGVyIFBEUF9EX0RTVF9CQVNFX0FERFJfSElHSF8wDQo+ICsjZGVmaW5l
IFBEUF9EX0RTVF9CQVNFX0FERFJfSElHSF8wCQkJX01LX0FERFJfQ09OU1QoMHhiMDc0KQ0K
PiArI2RlZmluZSBQRFBfRF9EU1RfQkFTRV9BRERSX0hJR0hfMF9EU1RfQkFTRV9BRERSX0hJ
R0hfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMCkNCj4gKyNkZWZpbmUgUERQX0RfRFNUX0JB
U0VfQUREUl9ISUdIXzBfRFNUX0JBU0VfQUREUl9ISUdIX0ZJRUxECQkJX01LX0ZJRUxEX0NP
TlNUKDB4ZmZmZmZmZmYsIFBEUF9EX0RTVF9CQVNFX0FERFJfSElHSF8wX0RTVF9CQVNFX0FE
RFJfSElHSF9TSElGVCkNCj4gKw0KPiArDQo+ICsvLyBSZWdpc3RlciBQRFBfRF9EU1RfTElO
RV9TVFJJREVfMA0KPiArI2RlZmluZSBQRFBfRF9EU1RfTElORV9TVFJJREVfMAkJCV9NS19B
RERSX0NPTlNUKDB4YjA3OCkNCj4gKyNkZWZpbmUgUERQX0RfRFNUX0xJTkVfU1RSSURFXzBf
RFNUX0xJTkVfU1RSSURFX1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDApDQo+ICsjZGVmaW5l
IFBEUF9EX0RTVF9MSU5FX1NUUklERV8wX0RTVF9MSU5FX1NUUklERV9GSUVMRAkJCV9NS19G
SUVMRF9DT05TVCgweGZmZmZmZmZmLCBQRFBfRF9EU1RfTElORV9TVFJJREVfMF9EU1RfTElO
RV9TVFJJREVfU0hJRlQpDQo+ICsNCj4gKw0KPiArLy8gUmVnaXN0ZXIgUERQX0RfRFNUX1NV
UkZBQ0VfU1RSSURFXzANCj4gKyNkZWZpbmUgUERQX0RfRFNUX1NVUkZBQ0VfU1RSSURFXzAJ
CQlfTUtfQUREUl9DT05TVCgweGIwN2MpDQo+ICsjZGVmaW5lIFBEUF9EX0RTVF9TVVJGQUNF
X1NUUklERV8wX0RTVF9TVVJGQUNFX1NUUklERV9TSElGVAkJCV9NS19TSElGVF9DT05TVCgw
KQ0KPiArI2RlZmluZSBQRFBfRF9EU1RfU1VSRkFDRV9TVFJJREVfMF9EU1RfU1VSRkFDRV9T
VFJJREVfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHhmZmZmZmZmZiwgUERQX0RfRFNUX1NV
UkZBQ0VfU1RSSURFXzBfRFNUX1NVUkZBQ0VfU1RSSURFX1NISUZUKQ0KPiArDQo+ICsNCj4g
Ky8vIFJlZ2lzdGVyIFBEUF9EX0RTVF9SQU1fQ0ZHXzANCj4gKyNkZWZpbmUgUERQX0RfRFNU
X1JBTV9DRkdfMAkJCV9NS19BRERSX0NPTlNUKDB4YjA4MCkNCj4gKyNkZWZpbmUgUERQX0Rf
RFNUX1JBTV9DRkdfMF9EU1RfUkFNX1RZUEVfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMCkN
Cj4gKyNkZWZpbmUgUERQX0RfRFNUX1JBTV9DRkdfMF9EU1RfUkFNX1RZUEVfRklFTEQJCQlf
TUtfRklFTERfQ09OU1QoMHgxLCBQRFBfRF9EU1RfUkFNX0NGR18wX0RTVF9SQU1fVFlQRV9T
SElGVCkNCj4gKyNkZWZpbmUgUERQX0RfRFNUX1JBTV9DRkdfMF9EU1RfUkFNX1RZUEVfQ1YJ
CQlfTUtfRU5VTV9DT05TVCgweDApDQo+ICsjZGVmaW5lIFBEUF9EX0RTVF9SQU1fQ0ZHXzBf
RFNUX1JBTV9UWVBFX01DCQkJX01LX0VOVU1fQ09OU1QoMHgxKQ0KPiArDQo+ICsNCj4gKy8v
IFJlZ2lzdGVyIFBEUF9EX0RBVEFfRk9STUFUXzANCj4gKyNkZWZpbmUgUERQX0RfREFUQV9G
T1JNQVRfMAkJCV9NS19BRERSX0NPTlNUKDB4YjA4NCkNCj4gKyNkZWZpbmUgUERQX0RfREFU
QV9GT1JNQVRfMF9JTlBVVF9EQVRBX1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDApDQo+ICsj
ZGVmaW5lIFBEUF9EX0RBVEFfRk9STUFUXzBfSU5QVVRfREFUQV9GSUVMRAkJCV9NS19GSUVM
RF9DT05TVCgweDMsIFBEUF9EX0RBVEFfRk9STUFUXzBfSU5QVVRfREFUQV9TSElGVCkNCj4g
KyNkZWZpbmUgUERQX0RfREFUQV9GT1JNQVRfMF9JTlBVVF9EQVRBX0lOVDgJCQlfTUtfRU5V
TV9DT05TVCgweDApDQo+ICsjZGVmaW5lIFBEUF9EX0RBVEFfRk9STUFUXzBfSU5QVVRfREFU
QV9JTlQxNgkJCV9NS19FTlVNX0NPTlNUKDB4MSkNCj4gKyNkZWZpbmUgUERQX0RfREFUQV9G
T1JNQVRfMF9JTlBVVF9EQVRBX0ZQMTYJCQlfTUtfRU5VTV9DT05TVCgweDIpDQo+ICsNCj4g
Kw0KPiArLy8gUmVnaXN0ZXIgUERQX0RfSU5GX0lOUFVUX05VTV8wDQo+ICsjZGVmaW5lIFBE
UF9EX0lORl9JTlBVVF9OVU1fMAkJCV9NS19BRERSX0NPTlNUKDB4YjA4OCkNCj4gKyNkZWZp
bmUgUERQX0RfSU5GX0lOUFVUX05VTV8wX0lORl9JTlBVVF9OVU1fU0hJRlQJCQlfTUtfU0hJ
RlRfQ09OU1QoMCkNCj4gKyNkZWZpbmUgUERQX0RfSU5GX0lOUFVUX05VTV8wX0lORl9JTlBV
VF9OVU1fRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHhmZmZmZmZmZiwgUERQX0RfSU5GX0lO
UFVUX05VTV8wX0lORl9JTlBVVF9OVU1fU0hJRlQpDQo+ICsNCj4gKw0KPiArLy8gUmVnaXN0
ZXIgUERQX0RfTkFOX0lOUFVUX05VTV8wDQo+ICsjZGVmaW5lIFBEUF9EX05BTl9JTlBVVF9O
VU1fMAkJCV9NS19BRERSX0NPTlNUKDB4YjA4YykNCj4gKyNkZWZpbmUgUERQX0RfTkFOX0lO
UFVUX05VTV8wX05BTl9JTlBVVF9OVU1fU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMCkNCj4g
KyNkZWZpbmUgUERQX0RfTkFOX0lOUFVUX05VTV8wX05BTl9JTlBVVF9OVU1fRklFTEQJCQlf
TUtfRklFTERfQ09OU1QoMHhmZmZmZmZmZiwgUERQX0RfTkFOX0lOUFVUX05VTV8wX05BTl9J
TlBVVF9OVU1fU0hJRlQpDQo+ICsNCj4gKw0KPiArLy8gUmVnaXN0ZXIgUERQX0RfTkFOX09V
VFBVVF9OVU1fMA0KPiArI2RlZmluZSBQRFBfRF9OQU5fT1VUUFVUX05VTV8wCQkJX01LX0FE
RFJfQ09OU1QoMHhiMDkwKQ0KPiArI2RlZmluZSBQRFBfRF9OQU5fT1VUUFVUX05VTV8wX05B
Tl9PVVRQVVRfTlVNX1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDApDQo+ICsjZGVmaW5lIFBE
UF9EX05BTl9PVVRQVVRfTlVNXzBfTkFOX09VVFBVVF9OVU1fRklFTEQJCQlfTUtfRklFTERf
Q09OU1QoMHhmZmZmZmZmZiwgUERQX0RfTkFOX09VVFBVVF9OVU1fMF9OQU5fT1VUUFVUX05V
TV9TSElGVCkNCj4gKw0KPiArDQo+ICsvLyBSZWdpc3RlciBQRFBfRF9QRVJGX0VOQUJMRV8w
DQo+ICsjZGVmaW5lIFBEUF9EX1BFUkZfRU5BQkxFXzAJCQlfTUtfQUREUl9DT05TVCgweGIw
OTQpDQo+ICsjZGVmaW5lIFBEUF9EX1BFUkZfRU5BQkxFXzBfRE1BX0VOX1NISUZUCQkJX01L
X1NISUZUX0NPTlNUKDApDQo+ICsjZGVmaW5lIFBEUF9EX1BFUkZfRU5BQkxFXzBfRE1BX0VO
X0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4MSwgUERQX0RfUEVSRl9FTkFCTEVfMF9ETUFf
RU5fU0hJRlQpDQo+ICsjZGVmaW5lIFBEUF9EX1BFUkZfRU5BQkxFXzBfRE1BX0VOX0RJU0FC
TEUJCQlfTUtfRU5VTV9DT05TVCgweDApDQo+ICsjZGVmaW5lIFBEUF9EX1BFUkZfRU5BQkxF
XzBfRE1BX0VOX0VOQUJMRQkJCV9NS19FTlVNX0NPTlNUKDB4MSkNCj4gKw0KPiArDQo+ICsv
LyBSZWdpc3RlciBQRFBfRF9QRVJGX1dSSVRFX1NUQUxMXzANCj4gKyNkZWZpbmUgUERQX0Rf
UEVSRl9XUklURV9TVEFMTF8wCQkJX01LX0FERFJfQ09OU1QoMHhiMDk4KQ0KPiArI2RlZmlu
ZSBQRFBfRF9QRVJGX1dSSVRFX1NUQUxMXzBfUEVSRl9XUklURV9TVEFMTF9TSElGVAkJCV9N
S19TSElGVF9DT05TVCgwKQ0KPiArI2RlZmluZSBQRFBfRF9QRVJGX1dSSVRFX1NUQUxMXzBf
UEVSRl9XUklURV9TVEFMTF9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweGZmZmZmZmZmLCBQ
RFBfRF9QRVJGX1dSSVRFX1NUQUxMXzBfUEVSRl9XUklURV9TVEFMTF9TSElGVCkNCj4gKw0K
PiArDQo+ICsvLyBSZWdpc3RlciBQRFBfRF9DWUFfMA0KPiArI2RlZmluZSBQRFBfRF9DWUFf
MAkJCV9NS19BRERSX0NPTlNUKDB4YjA5YykNCj4gKyNkZWZpbmUgUERQX0RfQ1lBXzBfQ1lB
X1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDApDQo+ICsjZGVmaW5lIFBEUF9EX0NZQV8wX0NZ
QV9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweGZmZmZmZmZmLCBQRFBfRF9DWUFfMF9DWUFf
U0hJRlQpDQo+ICsNCj4gKw0KPiArDQo+ICsvLyBUbyBzYXRpc2Z5IHZhcmlvdXMgY29tcGls
ZXJzIGFuZCBwbGF0Zm9ybXMsDQo+ICsvLyB3ZSBsZXQgdXNlcnMgY29udHJvbCB0aGUgdHlw
ZXMgYW5kIHN5bnRheCBvZiBjZXJ0YWluIGNvbnN0YW50cywgdXNpbmcgbWFjcm9zLg0KPiAr
I2lmbmRlZiBfTUtfU0hJRlRfQ09OU1QNCj4gKyAgI2RlZmluZSBfTUtfU0hJRlRfQ09OU1Qo
X2NvbnN0YW50XykgX2NvbnN0YW50Xw0KPiArI2VuZGlmDQo+ICsjaWZuZGVmIF9NS19NQVNL
X0NPTlNUDQo+ICsgICNkZWZpbmUgX01LX01BU0tfQ09OU1QoX2NvbnN0YW50XykgX2NvbnN0
YW50Xw0KPiArI2VuZGlmDQo+ICsjaWZuZGVmIF9NS19FTlVNX0NPTlNUDQo+ICsgICNkZWZp
bmUgX01LX0VOVU1fQ09OU1QoX2NvbnN0YW50XykgKF9jb25zdGFudF8gIyMgVUwpDQo+ICsj
ZW5kaWYNCj4gKyNpZm5kZWYgX01LX0FERFJfQ09OU1QNCj4gKyAgI2RlZmluZSBfTUtfQURE
Ul9DT05TVChfY29uc3RhbnRfKSBfY29uc3RhbnRfDQo+ICsjZW5kaWYNCj4gKyNpZm5kZWYg
X01LX0ZJRUxEX0NPTlNUDQo+ICsgICNkZWZpbmUgX01LX0ZJRUxEX0NPTlNUKF9tYXNrXywg
X3NoaWZ0XykgKF9NS19NQVNLX0NPTlNUKF9tYXNrXykgPDwgX01LX1NISUZUX0NPTlNUKF9z
aGlmdF8pKQ0KPiArI2VuZGlmDQo+ICsNCj4gKw0KPiArLy8gUmVnaXN0ZXIgQ0RQX1JETUFf
U19TVEFUVVNfMA0KPiArI2RlZmluZSBDRFBfUkRNQV9TX1NUQVRVU18wCQkJX01LX0FERFJf
Q09OU1QoMHhjMDAwKQ0KPiArI2RlZmluZSBDRFBfUkRNQV9TX1NUQVRVU18wX1NUQVRVU18w
X1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDApDQo+ICsjZGVmaW5lIENEUF9SRE1BX1NfU1RB
VFVTXzBfU1RBVFVTXzBfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHgzLCBDRFBfUkRNQV9T
X1NUQVRVU18wX1NUQVRVU18wX1NISUZUKQ0KPiArI2RlZmluZSBDRFBfUkRNQV9TX1NUQVRV
U18wX1NUQVRVU18wX0lETEUJCQlfTUtfRU5VTV9DT05TVCgweDApDQo+ICsjZGVmaW5lIENE
UF9SRE1BX1NfU1RBVFVTXzBfU1RBVFVTXzBfUlVOTklORwkJCV9NS19FTlVNX0NPTlNUKDB4
MSkNCj4gKyNkZWZpbmUgQ0RQX1JETUFfU19TVEFUVVNfMF9TVEFUVVNfMF9QRU5ESU5HCQkJ
X01LX0VOVU1fQ09OU1QoMHgyKQ0KPiArI2RlZmluZSBDRFBfUkRNQV9TX1NUQVRVU18wX1NU
QVRVU18xX1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDE2KQ0KPiArI2RlZmluZSBDRFBfUkRN
QV9TX1NUQVRVU18wX1NUQVRVU18xX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4MywgQ0RQ
X1JETUFfU19TVEFUVVNfMF9TVEFUVVNfMV9TSElGVCkNCj4gKyNkZWZpbmUgQ0RQX1JETUFf
U19TVEFUVVNfMF9TVEFUVVNfMV9JRExFCQkJX01LX0VOVU1fQ09OU1QoMHgwKQ0KPiArI2Rl
ZmluZSBDRFBfUkRNQV9TX1NUQVRVU18wX1NUQVRVU18xX1JVTk5JTkcJCQlfTUtfRU5VTV9D
T05TVCgweDEpDQo+ICsjZGVmaW5lIENEUF9SRE1BX1NfU1RBVFVTXzBfU1RBVFVTXzFfUEVO
RElORwkJCV9NS19FTlVNX0NPTlNUKDB4MikNCj4gKw0KPiArDQo+ICsvLyBSZWdpc3RlciBD
RFBfUkRNQV9TX1BPSU5URVJfMA0KPiArI2RlZmluZSBDRFBfUkRNQV9TX1BPSU5URVJfMAkJ
CV9NS19BRERSX0NPTlNUKDB4YzAwNCkNCj4gKyNkZWZpbmUgQ0RQX1JETUFfU19QT0lOVEVS
XzBfUFJPRFVDRVJfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMCkNCj4gKyNkZWZpbmUgQ0RQ
X1JETUFfU19QT0lOVEVSXzBfUFJPRFVDRVJfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHgx
LCBDRFBfUkRNQV9TX1BPSU5URVJfMF9QUk9EVUNFUl9TSElGVCkNCj4gKyNkZWZpbmUgQ0RQ
X1JETUFfU19QT0lOVEVSXzBfUFJPRFVDRVJfR1JPVVBfMAkJCV9NS19FTlVNX0NPTlNUKDB4
MCkNCj4gKyNkZWZpbmUgQ0RQX1JETUFfU19QT0lOVEVSXzBfUFJPRFVDRVJfR1JPVVBfMQkJ
CV9NS19FTlVNX0NPTlNUKDB4MSkNCj4gKyNkZWZpbmUgQ0RQX1JETUFfU19QT0lOVEVSXzBf
Q09OU1VNRVJfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMTYpDQo+ICsjZGVmaW5lIENEUF9S
RE1BX1NfUE9JTlRFUl8wX0NPTlNVTUVSX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4MSwg
Q0RQX1JETUFfU19QT0lOVEVSXzBfQ09OU1VNRVJfU0hJRlQpDQo+ICsjZGVmaW5lIENEUF9S
RE1BX1NfUE9JTlRFUl8wX0NPTlNVTUVSX0dST1VQXzAJCQlfTUtfRU5VTV9DT05TVCgweDAp
DQo+ICsjZGVmaW5lIENEUF9SRE1BX1NfUE9JTlRFUl8wX0NPTlNVTUVSX0dST1VQXzEJCQlf
TUtfRU5VTV9DT05TVCgweDEpDQo+ICsNCj4gKw0KPiArLy8gUmVnaXN0ZXIgQ0RQX1JETUFf
RF9PUF9FTkFCTEVfMA0KPiArI2RlZmluZSBDRFBfUkRNQV9EX09QX0VOQUJMRV8wCQkJX01L
X0FERFJfQ09OU1QoMHhjMDA4KQ0KPiArI2RlZmluZSBDRFBfUkRNQV9EX09QX0VOQUJMRV8w
X09QX0VOX1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDApDQo+ICsjZGVmaW5lIENEUF9SRE1B
X0RfT1BfRU5BQkxFXzBfT1BfRU5fRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHgxLCBDRFBf
UkRNQV9EX09QX0VOQUJMRV8wX09QX0VOX1NISUZUKQ0KPiArI2RlZmluZSBDRFBfUkRNQV9E
X09QX0VOQUJMRV8wX09QX0VOX0RJU0FCTEUJCQlfTUtfRU5VTV9DT05TVCgweDApDQo+ICsj
ZGVmaW5lIENEUF9SRE1BX0RfT1BfRU5BQkxFXzBfT1BfRU5fRU5BQkxFCQkJX01LX0VOVU1f
Q09OU1QoMHgxKQ0KPiArDQo+ICsNCj4gKy8vIFJlZ2lzdGVyIENEUF9SRE1BX0RfREFUQV9D
VUJFX1dJRFRIXzANCj4gKyNkZWZpbmUgQ0RQX1JETUFfRF9EQVRBX0NVQkVfV0lEVEhfMAkJ
CV9NS19BRERSX0NPTlNUKDB4YzAwYykNCj4gKyNkZWZpbmUgQ0RQX1JETUFfRF9EQVRBX0NV
QkVfV0lEVEhfMF9XSURUSF9TSElGVAkJCV9NS19TSElGVF9DT05TVCgwKQ0KPiArI2RlZmlu
ZSBDRFBfUkRNQV9EX0RBVEFfQ1VCRV9XSURUSF8wX1dJRFRIX0ZJRUxECQkJX01LX0ZJRUxE
X0NPTlNUKDB4MWZmZiwgQ0RQX1JETUFfRF9EQVRBX0NVQkVfV0lEVEhfMF9XSURUSF9TSElG
VCkNCj4gKw0KPiArDQo+ICsvLyBSZWdpc3RlciBDRFBfUkRNQV9EX0RBVEFfQ1VCRV9IRUlH
SFRfMA0KPiArI2RlZmluZSBDRFBfUkRNQV9EX0RBVEFfQ1VCRV9IRUlHSFRfMAkJCV9NS19B
RERSX0NPTlNUKDB4YzAxMCkNCj4gKyNkZWZpbmUgQ0RQX1JETUFfRF9EQVRBX0NVQkVfSEVJ
R0hUXzBfSEVJR0hUX1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDApDQo+ICsjZGVmaW5lIENE
UF9SRE1BX0RfREFUQV9DVUJFX0hFSUdIVF8wX0hFSUdIVF9GSUVMRAkJCV9NS19GSUVMRF9D
T05TVCgweDFmZmYsIENEUF9SRE1BX0RfREFUQV9DVUJFX0hFSUdIVF8wX0hFSUdIVF9TSElG
VCkNCj4gKw0KPiArDQo+ICsvLyBSZWdpc3RlciBDRFBfUkRNQV9EX0RBVEFfQ1VCRV9DSEFO
TkVMXzANCj4gKyNkZWZpbmUgQ0RQX1JETUFfRF9EQVRBX0NVQkVfQ0hBTk5FTF8wCQkJX01L
X0FERFJfQ09OU1QoMHhjMDE0KQ0KPiArI2RlZmluZSBDRFBfUkRNQV9EX0RBVEFfQ1VCRV9D
SEFOTkVMXzBfQ0hBTk5FTF9TSElGVAkJCV9NS19TSElGVF9DT05TVCgwKQ0KPiArI2RlZmlu
ZSBDRFBfUkRNQV9EX0RBVEFfQ1VCRV9DSEFOTkVMXzBfQ0hBTk5FTF9GSUVMRAkJCV9NS19G
SUVMRF9DT05TVCgweDFmZmYsIENEUF9SRE1BX0RfREFUQV9DVUJFX0NIQU5ORUxfMF9DSEFO
TkVMX1NISUZUKQ0KPiArDQo+ICsNCj4gKy8vIFJlZ2lzdGVyIENEUF9SRE1BX0RfU1JDX0JB
U0VfQUREUl9MT1dfMA0KPiArI2RlZmluZSBDRFBfUkRNQV9EX1NSQ19CQVNFX0FERFJfTE9X
XzAJCQlfTUtfQUREUl9DT05TVCgweGMwMTgpDQo+ICsjZGVmaW5lIENEUF9SRE1BX0RfU1JD
X0JBU0VfQUREUl9MT1dfMF9TUkNfQkFTRV9BRERSX0xPV19TSElGVAkJCV9NS19TSElGVF9D
T05TVCgwKQ0KPiArI2RlZmluZSBDRFBfUkRNQV9EX1NSQ19CQVNFX0FERFJfTE9XXzBfU1JD
X0JBU0VfQUREUl9MT1dfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHhmZmZmZmZmZiwgQ0RQ
X1JETUFfRF9TUkNfQkFTRV9BRERSX0xPV18wX1NSQ19CQVNFX0FERFJfTE9XX1NISUZUKQ0K
PiArDQo+ICsNCj4gKy8vIFJlZ2lzdGVyIENEUF9SRE1BX0RfU1JDX0JBU0VfQUREUl9ISUdI
XzANCj4gKyNkZWZpbmUgQ0RQX1JETUFfRF9TUkNfQkFTRV9BRERSX0hJR0hfMAkJCV9NS19B
RERSX0NPTlNUKDB4YzAxYykNCj4gKyNkZWZpbmUgQ0RQX1JETUFfRF9TUkNfQkFTRV9BRERS
X0hJR0hfMF9TUkNfQkFTRV9BRERSX0hJR0hfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMCkN
Cj4gKyNkZWZpbmUgQ0RQX1JETUFfRF9TUkNfQkFTRV9BRERSX0hJR0hfMF9TUkNfQkFTRV9B
RERSX0hJR0hfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHhmZmZmZmZmZiwgQ0RQX1JETUFf
RF9TUkNfQkFTRV9BRERSX0hJR0hfMF9TUkNfQkFTRV9BRERSX0hJR0hfU0hJRlQpDQo+ICsN
Cj4gKw0KPiArLy8gUmVnaXN0ZXIgQ0RQX1JETUFfRF9TUkNfTElORV9TVFJJREVfMA0KPiAr
I2RlZmluZSBDRFBfUkRNQV9EX1NSQ19MSU5FX1NUUklERV8wCQkJX01LX0FERFJfQ09OU1Qo
MHhjMDIwKQ0KPiArI2RlZmluZSBDRFBfUkRNQV9EX1NSQ19MSU5FX1NUUklERV8wX1NSQ19M
SU5FX1NUUklERV9TSElGVAkJCV9NS19TSElGVF9DT05TVCgwKQ0KPiArI2RlZmluZSBDRFBf
UkRNQV9EX1NSQ19MSU5FX1NUUklERV8wX1NSQ19MSU5FX1NUUklERV9GSUVMRAkJCV9NS19G
SUVMRF9DT05TVCgweGZmZmZmZmZmLCBDRFBfUkRNQV9EX1NSQ19MSU5FX1NUUklERV8wX1NS
Q19MSU5FX1NUUklERV9TSElGVCkNCj4gKw0KPiArDQo+ICsvLyBSZWdpc3RlciBDRFBfUkRN
QV9EX1NSQ19TVVJGQUNFX1NUUklERV8wDQo+ICsjZGVmaW5lIENEUF9SRE1BX0RfU1JDX1NV
UkZBQ0VfU1RSSURFXzAJCQlfTUtfQUREUl9DT05TVCgweGMwMjQpDQo+ICsjZGVmaW5lIENE
UF9SRE1BX0RfU1JDX1NVUkZBQ0VfU1RSSURFXzBfU1JDX1NVUkZBQ0VfU1RSSURFX1NISUZU
CQkJX01LX1NISUZUX0NPTlNUKDApDQo+ICsjZGVmaW5lIENEUF9SRE1BX0RfU1JDX1NVUkZB
Q0VfU1RSSURFXzBfU1JDX1NVUkZBQ0VfU1RSSURFX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNU
KDB4ZmZmZmZmZmYsIENEUF9SRE1BX0RfU1JDX1NVUkZBQ0VfU1RSSURFXzBfU1JDX1NVUkZB
Q0VfU1RSSURFX1NISUZUKQ0KPiArDQo+ICsNCj4gKy8vIFJlZ2lzdGVyIENEUF9SRE1BX0Rf
U1JDX0RNQV9DRkdfMA0KPiArI2RlZmluZSBDRFBfUkRNQV9EX1NSQ19ETUFfQ0ZHXzAJCQlf
TUtfQUREUl9DT05TVCgweGMwMjgpDQo+ICsjZGVmaW5lIENEUF9SRE1BX0RfU1JDX0RNQV9D
RkdfMF9TUkNfUkFNX1RZUEVfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMCkNCj4gKyNkZWZp
bmUgQ0RQX1JETUFfRF9TUkNfRE1BX0NGR18wX1NSQ19SQU1fVFlQRV9GSUVMRAkJCV9NS19G
SUVMRF9DT05TVCgweDEsIENEUF9SRE1BX0RfU1JDX0RNQV9DRkdfMF9TUkNfUkFNX1RZUEVf
U0hJRlQpDQo+ICsjZGVmaW5lIENEUF9SRE1BX0RfU1JDX0RNQV9DRkdfMF9TUkNfUkFNX1RZ
UEVfQ1YJCQlfTUtfRU5VTV9DT05TVCgweDApDQo+ICsjZGVmaW5lIENEUF9SRE1BX0RfU1JD
X0RNQV9DRkdfMF9TUkNfUkFNX1RZUEVfTUMJCQlfTUtfRU5VTV9DT05TVCgweDEpDQo+ICsN
Cj4gKw0KPiArLy8gUmVnaXN0ZXIgQ0RQX1JETUFfRF9TUkNfQ09NUFJFU1NJT05fRU5fMA0K
PiArI2RlZmluZSBDRFBfUkRNQV9EX1NSQ19DT01QUkVTU0lPTl9FTl8wCQkJX01LX0FERFJf
Q09OU1QoMHhjMDJjKQ0KPiArI2RlZmluZSBDRFBfUkRNQV9EX1NSQ19DT01QUkVTU0lPTl9F
Tl8wX1NSQ19DT01QUkVTU0lPTl9FTl9TSElGVAkJCV9NS19TSElGVF9DT05TVCgwKQ0KPiAr
I2RlZmluZSBDRFBfUkRNQV9EX1NSQ19DT01QUkVTU0lPTl9FTl8wX1NSQ19DT01QUkVTU0lP
Tl9FTl9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweDEsIENEUF9SRE1BX0RfU1JDX0NPTVBS
RVNTSU9OX0VOXzBfU1JDX0NPTVBSRVNTSU9OX0VOX1NISUZUKQ0KPiArI2RlZmluZSBDRFBf
UkRNQV9EX1NSQ19DT01QUkVTU0lPTl9FTl8wX1NSQ19DT01QUkVTU0lPTl9FTl9ESVNBQkxF
CQkJX01LX0VOVU1fQ09OU1QoMHgwKQ0KPiArI2RlZmluZSBDRFBfUkRNQV9EX1NSQ19DT01Q
UkVTU0lPTl9FTl8wX1NSQ19DT01QUkVTU0lPTl9FTl9FTkFCTEUJCQlfTUtfRU5VTV9DT05T
VCgweDEpDQo+ICsNCj4gKw0KPiArLy8gUmVnaXN0ZXIgQ0RQX1JETUFfRF9PUEVSQVRJT05f
TU9ERV8wDQo+ICsjZGVmaW5lIENEUF9SRE1BX0RfT1BFUkFUSU9OX01PREVfMAkJCV9NS19B
RERSX0NPTlNUKDB4YzAzMCkNCj4gKyNkZWZpbmUgQ0RQX1JETUFfRF9PUEVSQVRJT05fTU9E
RV8wX09QRVJBVElPTl9NT0RFX1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDApDQo+ICsjZGVm
aW5lIENEUF9SRE1BX0RfT1BFUkFUSU9OX01PREVfMF9PUEVSQVRJT05fTU9ERV9GSUVMRAkJ
CV9NS19GSUVMRF9DT05TVCgweDMsIENEUF9SRE1BX0RfT1BFUkFUSU9OX01PREVfMF9PUEVS
QVRJT05fTU9ERV9TSElGVCkNCj4gKyNkZWZpbmUgQ0RQX1JETUFfRF9PUEVSQVRJT05fTU9E
RV8wX09QRVJBVElPTl9NT0RFX1JFQURQSElMRQkJCV9NS19FTlVNX0NPTlNUKDB4MCkNCj4g
KyNkZWZpbmUgQ0RQX1JETUFfRF9PUEVSQVRJT05fTU9ERV8wX09QRVJBVElPTl9NT0RFX1dS
SVRFUEhJTEUJCQlfTUtfRU5VTV9DT05TVCgweDEpDQo+ICsjZGVmaW5lIENEUF9SRE1BX0Rf
T1BFUkFUSU9OX01PREVfMF9PUEVSQVRJT05fTU9ERV9PUkRJTkFSWQkJCV9NS19FTlVNX0NP
TlNUKDB4MikNCj4gKw0KPiArDQo+ICsvLyBSZWdpc3RlciBDRFBfUkRNQV9EX0RBVEFfRk9S
TUFUXzANCj4gKyNkZWZpbmUgQ0RQX1JETUFfRF9EQVRBX0ZPUk1BVF8wCQkJX01LX0FERFJf
Q09OU1QoMHhjMDM0KQ0KPiArI2RlZmluZSBDRFBfUkRNQV9EX0RBVEFfRk9STUFUXzBfSU5Q
VVRfREFUQV9TSElGVAkJCV9NS19TSElGVF9DT05TVCgwKQ0KPiArI2RlZmluZSBDRFBfUkRN
QV9EX0RBVEFfRk9STUFUXzBfSU5QVVRfREFUQV9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgw
eDMsIENEUF9SRE1BX0RfREFUQV9GT1JNQVRfMF9JTlBVVF9EQVRBX1NISUZUKQ0KPiArI2Rl
ZmluZSBDRFBfUkRNQV9EX0RBVEFfRk9STUFUXzBfSU5QVVRfREFUQV9JTlQ4CQkJX01LX0VO
VU1fQ09OU1QoMHgwKQ0KPiArI2RlZmluZSBDRFBfUkRNQV9EX0RBVEFfRk9STUFUXzBfSU5Q
VVRfREFUQV9JTlQxNgkJCV9NS19FTlVNX0NPTlNUKDB4MSkNCj4gKyNkZWZpbmUgQ0RQX1JE
TUFfRF9EQVRBX0ZPUk1BVF8wX0lOUFVUX0RBVEFfRlAxNgkJCV9NS19FTlVNX0NPTlNUKDB4
MikNCj4gKw0KPiArDQo+ICsvLyBSZWdpc3RlciBDRFBfUkRNQV9EX1BFUkZfRU5BQkxFXzAN
Cj4gKyNkZWZpbmUgQ0RQX1JETUFfRF9QRVJGX0VOQUJMRV8wCQkJX01LX0FERFJfQ09OU1Qo
MHhjMDM4KQ0KPiArI2RlZmluZSBDRFBfUkRNQV9EX1BFUkZfRU5BQkxFXzBfRE1BX0VOX1NI
SUZUCQkJX01LX1NISUZUX0NPTlNUKDApDQo+ICsjZGVmaW5lIENEUF9SRE1BX0RfUEVSRl9F
TkFCTEVfMF9ETUFfRU5fRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHgxLCBDRFBfUkRNQV9E
X1BFUkZfRU5BQkxFXzBfRE1BX0VOX1NISUZUKQ0KPiArI2RlZmluZSBDRFBfUkRNQV9EX1BF
UkZfRU5BQkxFXzBfRE1BX0VOX0RJU0FCTEUJCQlfTUtfRU5VTV9DT05TVCgweDApDQo+ICsj
ZGVmaW5lIENEUF9SRE1BX0RfUEVSRl9FTkFCTEVfMF9ETUFfRU5fRU5BQkxFCQkJX01LX0VO
VU1fQ09OU1QoMHgxKQ0KPiArDQo+ICsNCj4gKy8vIFJlZ2lzdGVyIENEUF9SRE1BX0RfUEVS
Rl9SRUFEX1NUQUxMXzANCj4gKyNkZWZpbmUgQ0RQX1JETUFfRF9QRVJGX1JFQURfU1RBTExf
MAkJCV9NS19BRERSX0NPTlNUKDB4YzAzYykNCj4gKyNkZWZpbmUgQ0RQX1JETUFfRF9QRVJG
X1JFQURfU1RBTExfMF9QRVJGX1JFQURfU1RBTExfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1Qo
MCkNCj4gKyNkZWZpbmUgQ0RQX1JETUFfRF9QRVJGX1JFQURfU1RBTExfMF9QRVJGX1JFQURf
U1RBTExfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHhmZmZmZmZmZiwgQ0RQX1JETUFfRF9Q
RVJGX1JFQURfU1RBTExfMF9QRVJGX1JFQURfU1RBTExfU0hJRlQpDQo+ICsNCj4gKw0KPiAr
Ly8gUmVnaXN0ZXIgQ0RQX1JETUFfRF9DWUFfMA0KPiArI2RlZmluZSBDRFBfUkRNQV9EX0NZ
QV8wCQkJX01LX0FERFJfQ09OU1QoMHhjMDQwKQ0KPiArI2RlZmluZSBDRFBfUkRNQV9EX0NZ
QV8wX0NZQV9TSElGVAkJCV9NS19TSElGVF9DT05TVCgwKQ0KPiArI2RlZmluZSBDRFBfUkRN
QV9EX0NZQV8wX0NZQV9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweGZmZmZmZmZmLCBDRFBf
UkRNQV9EX0NZQV8wX0NZQV9TSElGVCkNCj4gKw0KPiArDQo+ICsNCj4gKy8vIFRvIHNhdGlz
ZnkgdmFyaW91cyBjb21waWxlcnMgYW5kIHBsYXRmb3JtcywNCj4gKy8vIHdlIGxldCB1c2Vy
cyBjb250cm9sIHRoZSB0eXBlcyBhbmQgc3ludGF4IG9mIGNlcnRhaW4gY29uc3RhbnRzLCB1
c2luZyBtYWNyb3MuDQo+ICsjaWZuZGVmIF9NS19TSElGVF9DT05TVA0KPiArICAjZGVmaW5l
IF9NS19TSElGVF9DT05TVChfY29uc3RhbnRfKSBfY29uc3RhbnRfDQo+ICsjZW5kaWYNCj4g
KyNpZm5kZWYgX01LX01BU0tfQ09OU1QNCj4gKyAgI2RlZmluZSBfTUtfTUFTS19DT05TVChf
Y29uc3RhbnRfKSBfY29uc3RhbnRfDQo+ICsjZW5kaWYNCj4gKyNpZm5kZWYgX01LX0VOVU1f
Q09OU1QNCj4gKyAgI2RlZmluZSBfTUtfRU5VTV9DT05TVChfY29uc3RhbnRfKSAoX2NvbnN0
YW50XyAjIyBVTCkNCj4gKyNlbmRpZg0KPiArI2lmbmRlZiBfTUtfQUREUl9DT05TVA0KPiAr
ICAjZGVmaW5lIF9NS19BRERSX0NPTlNUKF9jb25zdGFudF8pIF9jb25zdGFudF8NCj4gKyNl
bmRpZg0KPiArI2lmbmRlZiBfTUtfRklFTERfQ09OU1QNCj4gKyAgI2RlZmluZSBfTUtfRklF
TERfQ09OU1QoX21hc2tfLCBfc2hpZnRfKSAoX01LX01BU0tfQ09OU1QoX21hc2tfKSA8PCBf
TUtfU0hJRlRfQ09OU1QoX3NoaWZ0XykpDQo+ICsjZW5kaWYNCj4gKw0KPiArDQo+ICsvLyBS
ZWdpc3RlciBDRFBfU19TVEFUVVNfMA0KPiArI2RlZmluZSBDRFBfU19TVEFUVVNfMAkJCV9N
S19BRERSX0NPTlNUKDB4ZDAwMCkNCj4gKyNkZWZpbmUgQ0RQX1NfU1RBVFVTXzBfU1RBVFVT
XzBfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMCkNCj4gKyNkZWZpbmUgQ0RQX1NfU1RBVFVT
XzBfU1RBVFVTXzBfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHgzLCBDRFBfU19TVEFUVVNf
MF9TVEFUVVNfMF9TSElGVCkNCj4gKyNkZWZpbmUgQ0RQX1NfU1RBVFVTXzBfU1RBVFVTXzBf
SURMRQkJCV9NS19FTlVNX0NPTlNUKDB4MCkNCj4gKyNkZWZpbmUgQ0RQX1NfU1RBVFVTXzBf
U1RBVFVTXzBfUlVOTklORwkJCV9NS19FTlVNX0NPTlNUKDB4MSkNCj4gKyNkZWZpbmUgQ0RQ
X1NfU1RBVFVTXzBfU1RBVFVTXzBfUEVORElORwkJCV9NS19FTlVNX0NPTlNUKDB4MikNCj4g
KyNkZWZpbmUgQ0RQX1NfU1RBVFVTXzBfU1RBVFVTXzFfU0hJRlQJCQlfTUtfU0hJRlRfQ09O
U1QoMTYpDQo+ICsjZGVmaW5lIENEUF9TX1NUQVRVU18wX1NUQVRVU18xX0ZJRUxECQkJX01L
X0ZJRUxEX0NPTlNUKDB4MywgQ0RQX1NfU1RBVFVTXzBfU1RBVFVTXzFfU0hJRlQpDQo+ICsj
ZGVmaW5lIENEUF9TX1NUQVRVU18wX1NUQVRVU18xX0lETEUJCQlfTUtfRU5VTV9DT05TVCgw
eDApDQo+ICsjZGVmaW5lIENEUF9TX1NUQVRVU18wX1NUQVRVU18xX1JVTk5JTkcJCQlfTUtf
RU5VTV9DT05TVCgweDEpDQo+ICsjZGVmaW5lIENEUF9TX1NUQVRVU18wX1NUQVRVU18xX1BF
TkRJTkcJCQlfTUtfRU5VTV9DT05TVCgweDIpDQo+ICsNCj4gKw0KPiArLy8gUmVnaXN0ZXIg
Q0RQX1NfUE9JTlRFUl8wDQo+ICsjZGVmaW5lIENEUF9TX1BPSU5URVJfMAkJCV9NS19BRERS
X0NPTlNUKDB4ZDAwNCkNCj4gKyNkZWZpbmUgQ0RQX1NfUE9JTlRFUl8wX1BST0RVQ0VSX1NI
SUZUCQkJX01LX1NISUZUX0NPTlNUKDApDQo+ICsjZGVmaW5lIENEUF9TX1BPSU5URVJfMF9Q
Uk9EVUNFUl9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweDEsIENEUF9TX1BPSU5URVJfMF9Q
Uk9EVUNFUl9TSElGVCkNCj4gKyNkZWZpbmUgQ0RQX1NfUE9JTlRFUl8wX1BST0RVQ0VSX0dS
T1VQXzAJCQlfTUtfRU5VTV9DT05TVCgweDApDQo+ICsjZGVmaW5lIENEUF9TX1BPSU5URVJf
MF9QUk9EVUNFUl9HUk9VUF8xCQkJX01LX0VOVU1fQ09OU1QoMHgxKQ0KPiArI2RlZmluZSBD
RFBfU19QT0lOVEVSXzBfQ09OU1VNRVJfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMTYpDQo+
ICsjZGVmaW5lIENEUF9TX1BPSU5URVJfMF9DT05TVU1FUl9GSUVMRAkJCV9NS19GSUVMRF9D
T05TVCgweDEsIENEUF9TX1BPSU5URVJfMF9DT05TVU1FUl9TSElGVCkNCj4gKyNkZWZpbmUg
Q0RQX1NfUE9JTlRFUl8wX0NPTlNVTUVSX0dST1VQXzAJCQlfTUtfRU5VTV9DT05TVCgweDAp
DQo+ICsjZGVmaW5lIENEUF9TX1BPSU5URVJfMF9DT05TVU1FUl9HUk9VUF8xCQkJX01LX0VO
VU1fQ09OU1QoMHgxKQ0KPiArDQo+ICsNCj4gKy8vIFJlZ2lzdGVyIENEUF9TX0xVVF9BQ0NF
U1NfQ0ZHXzANCj4gKyNkZWZpbmUgQ0RQX1NfTFVUX0FDQ0VTU19DRkdfMAkJCV9NS19BRERS
X0NPTlNUKDB4ZDAwOCkNCj4gKyNkZWZpbmUgQ0RQX1NfTFVUX0FDQ0VTU19DRkdfMF9MVVRf
QUREUl9TSElGVAkJCV9NS19TSElGVF9DT05TVCgwKQ0KPiArI2RlZmluZSBDRFBfU19MVVRf
QUNDRVNTX0NGR18wX0xVVF9BRERSX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4M2ZmLCBD
RFBfU19MVVRfQUNDRVNTX0NGR18wX0xVVF9BRERSX1NISUZUKQ0KPiArI2RlZmluZSBDRFBf
U19MVVRfQUNDRVNTX0NGR18wX0xVVF9UQUJMRV9JRF9TSElGVAkJCV9NS19TSElGVF9DT05T
VCgxNikNCj4gKyNkZWZpbmUgQ0RQX1NfTFVUX0FDQ0VTU19DRkdfMF9MVVRfVEFCTEVfSURf
RklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHgxLCBDRFBfU19MVVRfQUNDRVNTX0NGR18wX0xV
VF9UQUJMRV9JRF9TSElGVCkNCj4gKyNkZWZpbmUgQ0RQX1NfTFVUX0FDQ0VTU19DRkdfMF9M
VVRfVEFCTEVfSURfTEUJCQlfTUtfRU5VTV9DT05TVCgweDApDQo+ICsjZGVmaW5lIENEUF9T
X0xVVF9BQ0NFU1NfQ0ZHXzBfTFVUX1RBQkxFX0lEX0xPCQkJX01LX0VOVU1fQ09OU1QoMHgx
KQ0KPiArI2RlZmluZSBDRFBfU19MVVRfQUNDRVNTX0NGR18wX0xVVF9BQ0NFU1NfVFlQRV9T
SElGVAkJCV9NS19TSElGVF9DT05TVCgxNykNCj4gKyNkZWZpbmUgQ0RQX1NfTFVUX0FDQ0VT
U19DRkdfMF9MVVRfQUNDRVNTX1RZUEVfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHgxLCBD
RFBfU19MVVRfQUNDRVNTX0NGR18wX0xVVF9BQ0NFU1NfVFlQRV9TSElGVCkNCj4gKyNkZWZp
bmUgQ0RQX1NfTFVUX0FDQ0VTU19DRkdfMF9MVVRfQUNDRVNTX1RZUEVfUkVBRAkJCV9NS19F
TlVNX0NPTlNUKDB4MCkNCj4gKyNkZWZpbmUgQ0RQX1NfTFVUX0FDQ0VTU19DRkdfMF9MVVRf
QUNDRVNTX1RZUEVfV1JJVEUJCQlfTUtfRU5VTV9DT05TVCgweDEpDQo+ICsNCj4gKw0KPiAr
Ly8gUmVnaXN0ZXIgQ0RQX1NfTFVUX0FDQ0VTU19EQVRBXzANCj4gKyNkZWZpbmUgQ0RQX1Nf
TFVUX0FDQ0VTU19EQVRBXzAJCQlfTUtfQUREUl9DT05TVCgweGQwMGMpDQo+ICsjZGVmaW5l
IENEUF9TX0xVVF9BQ0NFU1NfREFUQV8wX0xVVF9EQVRBX1NISUZUCQkJX01LX1NISUZUX0NP
TlNUKDApDQo+ICsjZGVmaW5lIENEUF9TX0xVVF9BQ0NFU1NfREFUQV8wX0xVVF9EQVRBX0ZJ
RUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4ZmZmZiwgQ0RQX1NfTFVUX0FDQ0VTU19EQVRBXzBf
TFVUX0RBVEFfU0hJRlQpDQo+ICsNCj4gKw0KPiArLy8gUmVnaXN0ZXIgQ0RQX1NfTFVUX0NG
R18wDQo+ICsjZGVmaW5lIENEUF9TX0xVVF9DRkdfMAkJCV9NS19BRERSX0NPTlNUKDB4ZDAx
MCkNCj4gKyNkZWZpbmUgQ0RQX1NfTFVUX0NGR18wX0xVVF9MRV9GVU5DVElPTl9TSElGVAkJ
CV9NS19TSElGVF9DT05TVCgwKQ0KPiArI2RlZmluZSBDRFBfU19MVVRfQ0ZHXzBfTFVUX0xF
X0ZVTkNUSU9OX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4MSwgQ0RQX1NfTFVUX0NGR18w
X0xVVF9MRV9GVU5DVElPTl9TSElGVCkNCj4gKyNkZWZpbmUgQ0RQX1NfTFVUX0NGR18wX0xV
VF9MRV9GVU5DVElPTl9FWFBPTkVOVAkJCV9NS19FTlVNX0NPTlNUKDB4MCkNCj4gKyNkZWZp
bmUgQ0RQX1NfTFVUX0NGR18wX0xVVF9MRV9GVU5DVElPTl9MSU5FQVIJCQlfTUtfRU5VTV9D
T05TVCgweDEpDQo+ICsjZGVmaW5lIENEUF9TX0xVVF9DRkdfMF9MVVRfVUZMT1dfUFJJT1JJ
VFlfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoNCkNCj4gKyNkZWZpbmUgQ0RQX1NfTFVUX0NG
R18wX0xVVF9VRkxPV19QUklPUklUWV9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweDEsIENE
UF9TX0xVVF9DRkdfMF9MVVRfVUZMT1dfUFJJT1JJVFlfU0hJRlQpDQo+ICsjZGVmaW5lIENE
UF9TX0xVVF9DRkdfMF9MVVRfVUZMT1dfUFJJT1JJVFlfTEUJCQlfTUtfRU5VTV9DT05TVCgw
eDApDQo+ICsjZGVmaW5lIENEUF9TX0xVVF9DRkdfMF9MVVRfVUZMT1dfUFJJT1JJVFlfTE8J
CQlfTUtfRU5VTV9DT05TVCgweDEpDQo+ICsjZGVmaW5lIENEUF9TX0xVVF9DRkdfMF9MVVRf
T0ZMT1dfUFJJT1JJVFlfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoNSkNCj4gKyNkZWZpbmUg
Q0RQX1NfTFVUX0NGR18wX0xVVF9PRkxPV19QUklPUklUWV9GSUVMRAkJCV9NS19GSUVMRF9D
T05TVCgweDEsIENEUF9TX0xVVF9DRkdfMF9MVVRfT0ZMT1dfUFJJT1JJVFlfU0hJRlQpDQo+
ICsjZGVmaW5lIENEUF9TX0xVVF9DRkdfMF9MVVRfT0ZMT1dfUFJJT1JJVFlfTEUJCQlfTUtf
RU5VTV9DT05TVCgweDApDQo+ICsjZGVmaW5lIENEUF9TX0xVVF9DRkdfMF9MVVRfT0ZMT1df
UFJJT1JJVFlfTE8JCQlfTUtfRU5VTV9DT05TVCgweDEpDQo+ICsjZGVmaW5lIENEUF9TX0xV
VF9DRkdfMF9MVVRfSFlCUklEX1BSSU9SSVRZX1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDYp
DQo+ICsjZGVmaW5lIENEUF9TX0xVVF9DRkdfMF9MVVRfSFlCUklEX1BSSU9SSVRZX0ZJRUxE
CQkJX01LX0ZJRUxEX0NPTlNUKDB4MSwgQ0RQX1NfTFVUX0NGR18wX0xVVF9IWUJSSURfUFJJ
T1JJVFlfU0hJRlQpDQo+ICsjZGVmaW5lIENEUF9TX0xVVF9DRkdfMF9MVVRfSFlCUklEX1BS
SU9SSVRZX0xFCQkJX01LX0VOVU1fQ09OU1QoMHgwKQ0KPiArI2RlZmluZSBDRFBfU19MVVRf
Q0ZHXzBfTFVUX0hZQlJJRF9QUklPUklUWV9MTwkJCV9NS19FTlVNX0NPTlNUKDB4MSkNCj4g
Kw0KPiArDQo+ICsvLyBSZWdpc3RlciBDRFBfU19MVVRfSU5GT18wDQo+ICsjZGVmaW5lIENE
UF9TX0xVVF9JTkZPXzAJCQlfTUtfQUREUl9DT05TVCgweGQwMTQpDQo+ICsjZGVmaW5lIENE
UF9TX0xVVF9JTkZPXzBfTFVUX0xFX0lOREVYX09GRlNFVF9TSElGVAkJCV9NS19TSElGVF9D
T05TVCgwKQ0KPiArI2RlZmluZSBDRFBfU19MVVRfSU5GT18wX0xVVF9MRV9JTkRFWF9PRkZT
RVRfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHhmZiwgQ0RQX1NfTFVUX0lORk9fMF9MVVRf
TEVfSU5ERVhfT0ZGU0VUX1NISUZUKQ0KPiArI2RlZmluZSBDRFBfU19MVVRfSU5GT18wX0xV
VF9MRV9JTkRFWF9TRUxFQ1RfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoOCkNCj4gKyNkZWZp
bmUgQ0RQX1NfTFVUX0lORk9fMF9MVVRfTEVfSU5ERVhfU0VMRUNUX0ZJRUxECQkJX01LX0ZJ
RUxEX0NPTlNUKDB4ZmYsIENEUF9TX0xVVF9JTkZPXzBfTFVUX0xFX0lOREVYX1NFTEVDVF9T
SElGVCkNCj4gKyNkZWZpbmUgQ0RQX1NfTFVUX0lORk9fMF9MVVRfTE9fSU5ERVhfU0VMRUNU
X1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDE2KQ0KPiArI2RlZmluZSBDRFBfU19MVVRfSU5G
T18wX0xVVF9MT19JTkRFWF9TRUxFQ1RfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHhmZiwg
Q0RQX1NfTFVUX0lORk9fMF9MVVRfTE9fSU5ERVhfU0VMRUNUX1NISUZUKQ0KPiArDQo+ICsN
Cj4gKy8vIFJlZ2lzdGVyIENEUF9TX0xVVF9MRV9TVEFSVF9MT1dfMA0KPiArI2RlZmluZSBD
RFBfU19MVVRfTEVfU1RBUlRfTE9XXzAJCQlfTUtfQUREUl9DT05TVCgweGQwMTgpDQo+ICsj
ZGVmaW5lIENEUF9TX0xVVF9MRV9TVEFSVF9MT1dfMF9MVVRfTEVfU1RBUlRfTE9XX1NISUZU
CQkJX01LX1NISUZUX0NPTlNUKDApDQo+ICsjZGVmaW5lIENEUF9TX0xVVF9MRV9TVEFSVF9M
T1dfMF9MVVRfTEVfU1RBUlRfTE9XX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4ZmZmZmZm
ZmYsIENEUF9TX0xVVF9MRV9TVEFSVF9MT1dfMF9MVVRfTEVfU1RBUlRfTE9XX1NISUZUKQ0K
PiArDQo+ICsNCj4gKy8vIFJlZ2lzdGVyIENEUF9TX0xVVF9MRV9TVEFSVF9ISUdIXzANCj4g
KyNkZWZpbmUgQ0RQX1NfTFVUX0xFX1NUQVJUX0hJR0hfMAkJCV9NS19BRERSX0NPTlNUKDB4
ZDAxYykNCj4gKyNkZWZpbmUgQ0RQX1NfTFVUX0xFX1NUQVJUX0hJR0hfMF9MVVRfTEVfU1RB
UlRfSElHSF9TSElGVAkJCV9NS19TSElGVF9DT05TVCgwKQ0KPiArI2RlZmluZSBDRFBfU19M
VVRfTEVfU1RBUlRfSElHSF8wX0xVVF9MRV9TVEFSVF9ISUdIX0ZJRUxECQkJX01LX0ZJRUxE
X0NPTlNUKDB4M2YsIENEUF9TX0xVVF9MRV9TVEFSVF9ISUdIXzBfTFVUX0xFX1NUQVJUX0hJ
R0hfU0hJRlQpDQo+ICsNCj4gKw0KPiArLy8gUmVnaXN0ZXIgQ0RQX1NfTFVUX0xFX0VORF9M
T1dfMA0KPiArI2RlZmluZSBDRFBfU19MVVRfTEVfRU5EX0xPV18wCQkJX01LX0FERFJfQ09O
U1QoMHhkMDIwKQ0KPiArI2RlZmluZSBDRFBfU19MVVRfTEVfRU5EX0xPV18wX0xVVF9MRV9F
TkRfTE9XX1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDApDQo+ICsjZGVmaW5lIENEUF9TX0xV
VF9MRV9FTkRfTE9XXzBfTFVUX0xFX0VORF9MT1dfRklFTEQJCQlfTUtfRklFTERfQ09OU1Qo
MHhmZmZmZmZmZiwgQ0RQX1NfTFVUX0xFX0VORF9MT1dfMF9MVVRfTEVfRU5EX0xPV19TSElG
VCkNCj4gKw0KPiArDQo+ICsvLyBSZWdpc3RlciBDRFBfU19MVVRfTEVfRU5EX0hJR0hfMA0K
PiArI2RlZmluZSBDRFBfU19MVVRfTEVfRU5EX0hJR0hfMAkJCV9NS19BRERSX0NPTlNUKDB4
ZDAyNCkNCj4gKyNkZWZpbmUgQ0RQX1NfTFVUX0xFX0VORF9ISUdIXzBfTFVUX0xFX0VORF9I
SUdIX1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDApDQo+ICsjZGVmaW5lIENEUF9TX0xVVF9M
RV9FTkRfSElHSF8wX0xVVF9MRV9FTkRfSElHSF9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgw
eDNmLCBDRFBfU19MVVRfTEVfRU5EX0hJR0hfMF9MVVRfTEVfRU5EX0hJR0hfU0hJRlQpDQo+
ICsNCj4gKw0KPiArLy8gUmVnaXN0ZXIgQ0RQX1NfTFVUX0xPX1NUQVJUX0xPV18wDQo+ICsj
ZGVmaW5lIENEUF9TX0xVVF9MT19TVEFSVF9MT1dfMAkJCV9NS19BRERSX0NPTlNUKDB4ZDAy
OCkNCj4gKyNkZWZpbmUgQ0RQX1NfTFVUX0xPX1NUQVJUX0xPV18wX0xVVF9MT19TVEFSVF9M
T1dfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMCkNCj4gKyNkZWZpbmUgQ0RQX1NfTFVUX0xP
X1NUQVJUX0xPV18wX0xVVF9MT19TVEFSVF9MT1dfRklFTEQJCQlfTUtfRklFTERfQ09OU1Qo
MHhmZmZmZmZmZiwgQ0RQX1NfTFVUX0xPX1NUQVJUX0xPV18wX0xVVF9MT19TVEFSVF9MT1df
U0hJRlQpDQo+ICsNCj4gKw0KPiArLy8gUmVnaXN0ZXIgQ0RQX1NfTFVUX0xPX1NUQVJUX0hJ
R0hfMA0KPiArI2RlZmluZSBDRFBfU19MVVRfTE9fU1RBUlRfSElHSF8wCQkJX01LX0FERFJf
Q09OU1QoMHhkMDJjKQ0KPiArI2RlZmluZSBDRFBfU19MVVRfTE9fU1RBUlRfSElHSF8wX0xV
VF9MT19TVEFSVF9ISUdIX1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDApDQo+ICsjZGVmaW5l
IENEUF9TX0xVVF9MT19TVEFSVF9ISUdIXzBfTFVUX0xPX1NUQVJUX0hJR0hfRklFTEQJCQlf
TUtfRklFTERfQ09OU1QoMHgzZiwgQ0RQX1NfTFVUX0xPX1NUQVJUX0hJR0hfMF9MVVRfTE9f
U1RBUlRfSElHSF9TSElGVCkNCj4gKw0KPiArDQo+ICsvLyBSZWdpc3RlciBDRFBfU19MVVRf
TE9fRU5EX0xPV18wDQo+ICsjZGVmaW5lIENEUF9TX0xVVF9MT19FTkRfTE9XXzAJCQlfTUtf
QUREUl9DT05TVCgweGQwMzApDQo+ICsjZGVmaW5lIENEUF9TX0xVVF9MT19FTkRfTE9XXzBf
TFVUX0xPX0VORF9MT1dfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMCkNCj4gKyNkZWZpbmUg
Q0RQX1NfTFVUX0xPX0VORF9MT1dfMF9MVVRfTE9fRU5EX0xPV19GSUVMRAkJCV9NS19GSUVM
RF9DT05TVCgweGZmZmZmZmZmLCBDRFBfU19MVVRfTE9fRU5EX0xPV18wX0xVVF9MT19FTkRf
TE9XX1NISUZUKQ0KPiArDQo+ICsNCj4gKy8vIFJlZ2lzdGVyIENEUF9TX0xVVF9MT19FTkRf
SElHSF8wDQo+ICsjZGVmaW5lIENEUF9TX0xVVF9MT19FTkRfSElHSF8wCQkJX01LX0FERFJf
Q09OU1QoMHhkMDM0KQ0KPiArI2RlZmluZSBDRFBfU19MVVRfTE9fRU5EX0hJR0hfMF9MVVRf
TE9fRU5EX0hJR0hfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMCkNCj4gKyNkZWZpbmUgQ0RQ
X1NfTFVUX0xPX0VORF9ISUdIXzBfTFVUX0xPX0VORF9ISUdIX0ZJRUxECQkJX01LX0ZJRUxE
X0NPTlNUKDB4M2YsIENEUF9TX0xVVF9MT19FTkRfSElHSF8wX0xVVF9MT19FTkRfSElHSF9T
SElGVCkNCj4gKw0KPiArDQo+ICsvLyBSZWdpc3RlciBDRFBfU19MVVRfTEVfU0xPUEVfU0NB
TEVfMA0KPiArI2RlZmluZSBDRFBfU19MVVRfTEVfU0xPUEVfU0NBTEVfMAkJCV9NS19BRERS
X0NPTlNUKDB4ZDAzOCkNCj4gKyNkZWZpbmUgQ0RQX1NfTFVUX0xFX1NMT1BFX1NDQUxFXzBf
TFVUX0xFX1NMT1BFX1VGTE9XX1NDQUxFX1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDApDQo+
ICsjZGVmaW5lIENEUF9TX0xVVF9MRV9TTE9QRV9TQ0FMRV8wX0xVVF9MRV9TTE9QRV9VRkxP
V19TQ0FMRV9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweGZmZmYsIENEUF9TX0xVVF9MRV9T
TE9QRV9TQ0FMRV8wX0xVVF9MRV9TTE9QRV9VRkxPV19TQ0FMRV9TSElGVCkNCj4gKyNkZWZp
bmUgQ0RQX1NfTFVUX0xFX1NMT1BFX1NDQUxFXzBfTFVUX0xFX1NMT1BFX09GTE9XX1NDQUxF
X1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDE2KQ0KPiArI2RlZmluZSBDRFBfU19MVVRfTEVf
U0xPUEVfU0NBTEVfMF9MVVRfTEVfU0xPUEVfT0ZMT1dfU0NBTEVfRklFTEQJCQlfTUtfRklF
TERfQ09OU1QoMHhmZmZmLCBDRFBfU19MVVRfTEVfU0xPUEVfU0NBTEVfMF9MVVRfTEVfU0xP
UEVfT0ZMT1dfU0NBTEVfU0hJRlQpDQo+ICsNCj4gKw0KPiArLy8gUmVnaXN0ZXIgQ0RQX1Nf
TFVUX0xFX1NMT1BFX1NISUZUXzANCj4gKyNkZWZpbmUgQ0RQX1NfTFVUX0xFX1NMT1BFX1NI
SUZUXzAJCQlfTUtfQUREUl9DT05TVCgweGQwM2MpDQo+ICsjZGVmaW5lIENEUF9TX0xVVF9M
RV9TTE9QRV9TSElGVF8wX0xVVF9MRV9TTE9QRV9VRkxPV19TSElGVF9TSElGVAkJCV9NS19T
SElGVF9DT05TVCgwKQ0KPiArI2RlZmluZSBDRFBfU19MVVRfTEVfU0xPUEVfU0hJRlRfMF9M
VVRfTEVfU0xPUEVfVUZMT1dfU0hJRlRfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHgxZiwg
Q0RQX1NfTFVUX0xFX1NMT1BFX1NISUZUXzBfTFVUX0xFX1NMT1BFX1VGTE9XX1NISUZUX1NI
SUZUKQ0KPiArI2RlZmluZSBDRFBfU19MVVRfTEVfU0xPUEVfU0hJRlRfMF9MVVRfTEVfU0xP
UEVfT0ZMT1dfU0hJRlRfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoNSkNCj4gKyNkZWZpbmUg
Q0RQX1NfTFVUX0xFX1NMT1BFX1NISUZUXzBfTFVUX0xFX1NMT1BFX09GTE9XX1NISUZUX0ZJ
RUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4MWYsIENEUF9TX0xVVF9MRV9TTE9QRV9TSElGVF8w
X0xVVF9MRV9TTE9QRV9PRkxPV19TSElGVF9TSElGVCkNCj4gKw0KPiArDQo+ICsvLyBSZWdp
c3RlciBDRFBfU19MVVRfTE9fU0xPUEVfU0NBTEVfMA0KPiArI2RlZmluZSBDRFBfU19MVVRf
TE9fU0xPUEVfU0NBTEVfMAkJCV9NS19BRERSX0NPTlNUKDB4ZDA0MCkNCj4gKyNkZWZpbmUg
Q0RQX1NfTFVUX0xPX1NMT1BFX1NDQUxFXzBfTFVUX0xPX1NMT1BFX1VGTE9XX1NDQUxFX1NI
SUZUCQkJX01LX1NISUZUX0NPTlNUKDApDQo+ICsjZGVmaW5lIENEUF9TX0xVVF9MT19TTE9Q
RV9TQ0FMRV8wX0xVVF9MT19TTE9QRV9VRkxPV19TQ0FMRV9GSUVMRAkJCV9NS19GSUVMRF9D
T05TVCgweGZmZmYsIENEUF9TX0xVVF9MT19TTE9QRV9TQ0FMRV8wX0xVVF9MT19TTE9QRV9V
RkxPV19TQ0FMRV9TSElGVCkNCj4gKyNkZWZpbmUgQ0RQX1NfTFVUX0xPX1NMT1BFX1NDQUxF
XzBfTFVUX0xPX1NMT1BFX09GTE9XX1NDQUxFX1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDE2
KQ0KPiArI2RlZmluZSBDRFBfU19MVVRfTE9fU0xPUEVfU0NBTEVfMF9MVVRfTE9fU0xPUEVf
T0ZMT1dfU0NBTEVfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHhmZmZmLCBDRFBfU19MVVRf
TE9fU0xPUEVfU0NBTEVfMF9MVVRfTE9fU0xPUEVfT0ZMT1dfU0NBTEVfU0hJRlQpDQo+ICsN
Cj4gKw0KPiArLy8gUmVnaXN0ZXIgQ0RQX1NfTFVUX0xPX1NMT1BFX1NISUZUXzANCj4gKyNk
ZWZpbmUgQ0RQX1NfTFVUX0xPX1NMT1BFX1NISUZUXzAJCQlfTUtfQUREUl9DT05TVCgweGQw
NDQpDQo+ICsjZGVmaW5lIENEUF9TX0xVVF9MT19TTE9QRV9TSElGVF8wX0xVVF9MT19TTE9Q
RV9VRkxPV19TSElGVF9TSElGVAkJCV9NS19TSElGVF9DT05TVCgwKQ0KPiArI2RlZmluZSBD
RFBfU19MVVRfTE9fU0xPUEVfU0hJRlRfMF9MVVRfTE9fU0xPUEVfVUZMT1dfU0hJRlRfRklF
TEQJCQlfTUtfRklFTERfQ09OU1QoMHgxZiwgQ0RQX1NfTFVUX0xPX1NMT1BFX1NISUZUXzBf
TFVUX0xPX1NMT1BFX1VGTE9XX1NISUZUX1NISUZUKQ0KPiArI2RlZmluZSBDRFBfU19MVVRf
TE9fU0xPUEVfU0hJRlRfMF9MVVRfTE9fU0xPUEVfT0ZMT1dfU0hJRlRfU0hJRlQJCQlfTUtf
U0hJRlRfQ09OU1QoNSkNCj4gKyNkZWZpbmUgQ0RQX1NfTFVUX0xPX1NMT1BFX1NISUZUXzBf
TFVUX0xPX1NMT1BFX09GTE9XX1NISUZUX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4MWYs
IENEUF9TX0xVVF9MT19TTE9QRV9TSElGVF8wX0xVVF9MT19TTE9QRV9PRkxPV19TSElGVF9T
SElGVCkNCj4gKw0KPiArDQo+ICsvLyBSZWdpc3RlciBDRFBfRF9PUF9FTkFCTEVfMA0KPiAr
I2RlZmluZSBDRFBfRF9PUF9FTkFCTEVfMAkJCV9NS19BRERSX0NPTlNUKDB4ZDA0OCkNCj4g
KyNkZWZpbmUgQ0RQX0RfT1BfRU5BQkxFXzBfT1BfRU5fU0hJRlQJCQlfTUtfU0hJRlRfQ09O
U1QoMCkNCj4gKyNkZWZpbmUgQ0RQX0RfT1BfRU5BQkxFXzBfT1BfRU5fRklFTEQJCQlfTUtf
RklFTERfQ09OU1QoMHgxLCBDRFBfRF9PUF9FTkFCTEVfMF9PUF9FTl9TSElGVCkNCj4gKyNk
ZWZpbmUgQ0RQX0RfT1BfRU5BQkxFXzBfT1BfRU5fRElTQUJMRQkJCV9NS19FTlVNX0NPTlNU
KDB4MCkNCj4gKyNkZWZpbmUgQ0RQX0RfT1BfRU5BQkxFXzBfT1BfRU5fRU5BQkxFCQkJX01L
X0VOVU1fQ09OU1QoMHgxKQ0KPiArDQo+ICsNCj4gKy8vIFJlZ2lzdGVyIENEUF9EX0ZVTkNf
QllQQVNTXzANCj4gKyNkZWZpbmUgQ0RQX0RfRlVOQ19CWVBBU1NfMAkJCV9NS19BRERSX0NP
TlNUKDB4ZDA0YykNCj4gKyNkZWZpbmUgQ0RQX0RfRlVOQ19CWVBBU1NfMF9TUVNVTV9CWVBB
U1NfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMCkNCj4gKyNkZWZpbmUgQ0RQX0RfRlVOQ19C
WVBBU1NfMF9TUVNVTV9CWVBBU1NfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHgxLCBDRFBf
RF9GVU5DX0JZUEFTU18wX1NRU1VNX0JZUEFTU19TSElGVCkNCj4gKyNkZWZpbmUgQ0RQX0Rf
RlVOQ19CWVBBU1NfMF9TUVNVTV9CWVBBU1NfRElTQUJMRQkJCV9NS19FTlVNX0NPTlNUKDB4
MCkNCj4gKyNkZWZpbmUgQ0RQX0RfRlVOQ19CWVBBU1NfMF9TUVNVTV9CWVBBU1NfRU5BQkxF
CQkJX01LX0VOVU1fQ09OU1QoMHgxKQ0KPiArI2RlZmluZSBDRFBfRF9GVU5DX0JZUEFTU18w
X01VTF9CWVBBU1NfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMSkNCj4gKyNkZWZpbmUgQ0RQ
X0RfRlVOQ19CWVBBU1NfMF9NVUxfQllQQVNTX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4
MSwgQ0RQX0RfRlVOQ19CWVBBU1NfMF9NVUxfQllQQVNTX1NISUZUKQ0KPiArI2RlZmluZSBD
RFBfRF9GVU5DX0JZUEFTU18wX01VTF9CWVBBU1NfRElTQUJMRQkJCV9NS19FTlVNX0NPTlNU
KDB4MCkNCj4gKyNkZWZpbmUgQ0RQX0RfRlVOQ19CWVBBU1NfMF9NVUxfQllQQVNTX0VOQUJM
RQkJCV9NS19FTlVNX0NPTlNUKDB4MSkNCj4gKw0KPiArDQo+ICsvLyBSZWdpc3RlciBDRFBf
RF9EU1RfQkFTRV9BRERSX0xPV18wDQo+ICsjZGVmaW5lIENEUF9EX0RTVF9CQVNFX0FERFJf
TE9XXzAJCQlfTUtfQUREUl9DT05TVCgweGQwNTApDQo+ICsjZGVmaW5lIENEUF9EX0RTVF9C
QVNFX0FERFJfTE9XXzBfRFNUX0JBU0VfQUREUl9MT1dfU0hJRlQJCQlfTUtfU0hJRlRfQ09O
U1QoMCkNCj4gKyNkZWZpbmUgQ0RQX0RfRFNUX0JBU0VfQUREUl9MT1dfMF9EU1RfQkFTRV9B
RERSX0xPV19GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweGZmZmZmZmZmLCBDRFBfRF9EU1Rf
QkFTRV9BRERSX0xPV18wX0RTVF9CQVNFX0FERFJfTE9XX1NISUZUKQ0KPiArDQo+ICsNCj4g
Ky8vIFJlZ2lzdGVyIENEUF9EX0RTVF9CQVNFX0FERFJfSElHSF8wDQo+ICsjZGVmaW5lIENE
UF9EX0RTVF9CQVNFX0FERFJfSElHSF8wCQkJX01LX0FERFJfQ09OU1QoMHhkMDU0KQ0KPiAr
I2RlZmluZSBDRFBfRF9EU1RfQkFTRV9BRERSX0hJR0hfMF9EU1RfQkFTRV9BRERSX0hJR0hf
U0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMCkNCj4gKyNkZWZpbmUgQ0RQX0RfRFNUX0JBU0Vf
QUREUl9ISUdIXzBfRFNUX0JBU0VfQUREUl9ISUdIX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNU
KDB4ZmZmZmZmZmYsIENEUF9EX0RTVF9CQVNFX0FERFJfSElHSF8wX0RTVF9CQVNFX0FERFJf
SElHSF9TSElGVCkNCj4gKw0KPiArDQo+ICsvLyBSZWdpc3RlciBDRFBfRF9EU1RfTElORV9T
VFJJREVfMA0KPiArI2RlZmluZSBDRFBfRF9EU1RfTElORV9TVFJJREVfMAkJCV9NS19BRERS
X0NPTlNUKDB4ZDA1OCkNCj4gKyNkZWZpbmUgQ0RQX0RfRFNUX0xJTkVfU1RSSURFXzBfRFNU
X0xJTkVfU1RSSURFX1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDApDQo+ICsjZGVmaW5lIENE
UF9EX0RTVF9MSU5FX1NUUklERV8wX0RTVF9MSU5FX1NUUklERV9GSUVMRAkJCV9NS19GSUVM
RF9DT05TVCgweGZmZmZmZmZmLCBDRFBfRF9EU1RfTElORV9TVFJJREVfMF9EU1RfTElORV9T
VFJJREVfU0hJRlQpDQo+ICsNCj4gKw0KPiArLy8gUmVnaXN0ZXIgQ0RQX0RfRFNUX1NVUkZB
Q0VfU1RSSURFXzANCj4gKyNkZWZpbmUgQ0RQX0RfRFNUX1NVUkZBQ0VfU1RSSURFXzAJCQlf
TUtfQUREUl9DT05TVCgweGQwNWMpDQo+ICsjZGVmaW5lIENEUF9EX0RTVF9TVVJGQUNFX1NU
UklERV8wX0RTVF9TVVJGQUNFX1NUUklERV9TSElGVAkJCV9NS19TSElGVF9DT05TVCgwKQ0K
PiArI2RlZmluZSBDRFBfRF9EU1RfU1VSRkFDRV9TVFJJREVfMF9EU1RfU1VSRkFDRV9TVFJJ
REVfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHhmZmZmZmZmZiwgQ0RQX0RfRFNUX1NVUkZB
Q0VfU1RSSURFXzBfRFNUX1NVUkZBQ0VfU1RSSURFX1NISUZUKQ0KPiArDQo+ICsNCj4gKy8v
IFJlZ2lzdGVyIENEUF9EX0RTVF9ETUFfQ0ZHXzANCj4gKyNkZWZpbmUgQ0RQX0RfRFNUX0RN
QV9DRkdfMAkJCV9NS19BRERSX0NPTlNUKDB4ZDA2MCkNCj4gKyNkZWZpbmUgQ0RQX0RfRFNU
X0RNQV9DRkdfMF9EU1RfUkFNX1RZUEVfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMCkNCj4g
KyNkZWZpbmUgQ0RQX0RfRFNUX0RNQV9DRkdfMF9EU1RfUkFNX1RZUEVfRklFTEQJCQlfTUtf
RklFTERfQ09OU1QoMHgxLCBDRFBfRF9EU1RfRE1BX0NGR18wX0RTVF9SQU1fVFlQRV9TSElG
VCkNCj4gKyNkZWZpbmUgQ0RQX0RfRFNUX0RNQV9DRkdfMF9EU1RfUkFNX1RZUEVfQ1YJCQlf
TUtfRU5VTV9DT05TVCgweDApDQo+ICsjZGVmaW5lIENEUF9EX0RTVF9ETUFfQ0ZHXzBfRFNU
X1JBTV9UWVBFX01DCQkJX01LX0VOVU1fQ09OU1QoMHgxKQ0KPiArDQo+ICsNCj4gKy8vIFJl
Z2lzdGVyIENEUF9EX0RTVF9DT01QUkVTU0lPTl9FTl8wDQo+ICsjZGVmaW5lIENEUF9EX0RT
VF9DT01QUkVTU0lPTl9FTl8wCQkJX01LX0FERFJfQ09OU1QoMHhkMDY0KQ0KPiArI2RlZmlu
ZSBDRFBfRF9EU1RfQ09NUFJFU1NJT05fRU5fMF9EU1RfQ09NUFJFU1NJT05fRU5fU0hJRlQJ
CQlfTUtfU0hJRlRfQ09OU1QoMCkNCj4gKyNkZWZpbmUgQ0RQX0RfRFNUX0NPTVBSRVNTSU9O
X0VOXzBfRFNUX0NPTVBSRVNTSU9OX0VOX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4MSwg
Q0RQX0RfRFNUX0NPTVBSRVNTSU9OX0VOXzBfRFNUX0NPTVBSRVNTSU9OX0VOX1NISUZUKQ0K
PiArI2RlZmluZSBDRFBfRF9EU1RfQ09NUFJFU1NJT05fRU5fMF9EU1RfQ09NUFJFU1NJT05f
RU5fRElTQUJMRQkJCV9NS19FTlVNX0NPTlNUKDB4MCkNCj4gKyNkZWZpbmUgQ0RQX0RfRFNU
X0NPTVBSRVNTSU9OX0VOXzBfRFNUX0NPTVBSRVNTSU9OX0VOX0VOQUJMRQkJCV9NS19FTlVN
X0NPTlNUKDB4MSkNCj4gKw0KPiArDQo+ICsvLyBSZWdpc3RlciBDRFBfRF9EQVRBX0ZPUk1B
VF8wDQo+ICsjZGVmaW5lIENEUF9EX0RBVEFfRk9STUFUXzAJCQlfTUtfQUREUl9DT05TVCgw
eGQwNjgpDQo+ICsjZGVmaW5lIENEUF9EX0RBVEFfRk9STUFUXzBfSU5QVVRfREFUQV9UWVBF
X1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDApDQo+ICsjZGVmaW5lIENEUF9EX0RBVEFfRk9S
TUFUXzBfSU5QVVRfREFUQV9UWVBFX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4MywgQ0RQ
X0RfREFUQV9GT1JNQVRfMF9JTlBVVF9EQVRBX1RZUEVfU0hJRlQpDQo+ICsjZGVmaW5lIENE
UF9EX0RBVEFfRk9STUFUXzBfSU5QVVRfREFUQV9UWVBFX0lOVDgJCQlfTUtfRU5VTV9DT05T
VCgweDApDQo+ICsjZGVmaW5lIENEUF9EX0RBVEFfRk9STUFUXzBfSU5QVVRfREFUQV9UWVBF
X0lOVDE2CQkJX01LX0VOVU1fQ09OU1QoMHgxKQ0KPiArI2RlZmluZSBDRFBfRF9EQVRBX0ZP
Uk1BVF8wX0lOUFVUX0RBVEFfVFlQRV9GUDE2CQkJX01LX0VOVU1fQ09OU1QoMHgyKQ0KPiAr
DQo+ICsNCj4gKy8vIFJlZ2lzdGVyIENEUF9EX05BTl9GTFVTSF9UT19aRVJPXzANCj4gKyNk
ZWZpbmUgQ0RQX0RfTkFOX0ZMVVNIX1RPX1pFUk9fMAkJCV9NS19BRERSX0NPTlNUKDB4ZDA2
YykNCj4gKyNkZWZpbmUgQ0RQX0RfTkFOX0ZMVVNIX1RPX1pFUk9fMF9OQU5fVE9fWkVST19T
SElGVAkJCV9NS19TSElGVF9DT05TVCgwKQ0KPiArI2RlZmluZSBDRFBfRF9OQU5fRkxVU0hf
VE9fWkVST18wX05BTl9UT19aRVJPX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4MSwgQ0RQ
X0RfTkFOX0ZMVVNIX1RPX1pFUk9fMF9OQU5fVE9fWkVST19TSElGVCkNCj4gKyNkZWZpbmUg
Q0RQX0RfTkFOX0ZMVVNIX1RPX1pFUk9fMF9OQU5fVE9fWkVST19ESVNBQkxFCQkJX01LX0VO
VU1fQ09OU1QoMHgwKQ0KPiArI2RlZmluZSBDRFBfRF9OQU5fRkxVU0hfVE9fWkVST18wX05B
Tl9UT19aRVJPX0VOQUJMRQkJCV9NS19FTlVNX0NPTlNUKDB4MSkNCj4gKw0KPiArDQo+ICsv
LyBSZWdpc3RlciBDRFBfRF9MUk5fQ0ZHXzANCj4gKyNkZWZpbmUgQ0RQX0RfTFJOX0NGR18w
CQkJX01LX0FERFJfQ09OU1QoMHhkMDcwKQ0KPiArI2RlZmluZSBDRFBfRF9MUk5fQ0ZHXzBf
Tk9STUFMWl9MRU5fU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMCkNCj4gKyNkZWZpbmUgQ0RQ
X0RfTFJOX0NGR18wX05PUk1BTFpfTEVOX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4Mywg
Q0RQX0RfTFJOX0NGR18wX05PUk1BTFpfTEVOX1NISUZUKQ0KPiArI2RlZmluZSBDRFBfRF9M
Uk5fQ0ZHXzBfTk9STUFMWl9MRU5fTEVOMwkJCV9NS19FTlVNX0NPTlNUKDB4MCkNCj4gKyNk
ZWZpbmUgQ0RQX0RfTFJOX0NGR18wX05PUk1BTFpfTEVOX0xFTjUJCQlfTUtfRU5VTV9DT05T
VCgweDEpDQo+ICsjZGVmaW5lIENEUF9EX0xSTl9DRkdfMF9OT1JNQUxaX0xFTl9MRU43CQkJ
X01LX0VOVU1fQ09OU1QoMHgyKQ0KPiArI2RlZmluZSBDRFBfRF9MUk5fQ0ZHXzBfTk9STUFM
Wl9MRU5fTEVOOQkJCV9NS19FTlVNX0NPTlNUKDB4MykNCj4gKw0KPiArDQo+ICsvLyBSZWdp
c3RlciBDRFBfRF9EQVRJTl9PRkZTRVRfMA0KPiArI2RlZmluZSBDRFBfRF9EQVRJTl9PRkZT
RVRfMAkJCV9NS19BRERSX0NPTlNUKDB4ZDA3NCkNCj4gKyNkZWZpbmUgQ0RQX0RfREFUSU5f
T0ZGU0VUXzBfREFUSU5fT0ZGU0VUX1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDApDQo+ICsj
ZGVmaW5lIENEUF9EX0RBVElOX09GRlNFVF8wX0RBVElOX09GRlNFVF9GSUVMRAkJCV9NS19G
SUVMRF9DT05TVCgweGZmZmYsIENEUF9EX0RBVElOX09GRlNFVF8wX0RBVElOX09GRlNFVF9T
SElGVCkNCj4gKw0KPiArDQo+ICsvLyBSZWdpc3RlciBDRFBfRF9EQVRJTl9TQ0FMRV8wDQo+
ICsjZGVmaW5lIENEUF9EX0RBVElOX1NDQUxFXzAJCQlfTUtfQUREUl9DT05TVCgweGQwNzgp
DQo+ICsjZGVmaW5lIENEUF9EX0RBVElOX1NDQUxFXzBfREFUSU5fU0NBTEVfU0hJRlQJCQlf
TUtfU0hJRlRfQ09OU1QoMCkNCj4gKyNkZWZpbmUgQ0RQX0RfREFUSU5fU0NBTEVfMF9EQVRJ
Tl9TQ0FMRV9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweGZmZmYsIENEUF9EX0RBVElOX1ND
QUxFXzBfREFUSU5fU0NBTEVfU0hJRlQpDQo+ICsNCj4gKw0KPiArLy8gUmVnaXN0ZXIgQ0RQ
X0RfREFUSU5fU0hJRlRFUl8wDQo+ICsjZGVmaW5lIENEUF9EX0RBVElOX1NISUZURVJfMAkJ
CV9NS19BRERSX0NPTlNUKDB4ZDA3YykNCj4gKyNkZWZpbmUgQ0RQX0RfREFUSU5fU0hJRlRF
Ul8wX0RBVElOX1NISUZURVJfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMCkNCj4gKyNkZWZp
bmUgQ0RQX0RfREFUSU5fU0hJRlRFUl8wX0RBVElOX1NISUZURVJfRklFTEQJCQlfTUtfRklF
TERfQ09OU1QoMHgxZiwgQ0RQX0RfREFUSU5fU0hJRlRFUl8wX0RBVElOX1NISUZURVJfU0hJ
RlQpDQo+ICsNCj4gKw0KPiArLy8gUmVnaXN0ZXIgQ0RQX0RfREFUT1VUX09GRlNFVF8wDQo+
ICsjZGVmaW5lIENEUF9EX0RBVE9VVF9PRkZTRVRfMAkJCV9NS19BRERSX0NPTlNUKDB4ZDA4
MCkNCj4gKyNkZWZpbmUgQ0RQX0RfREFUT1VUX09GRlNFVF8wX0RBVE9VVF9PRkZTRVRfU0hJ
RlQJCQlfTUtfU0hJRlRfQ09OU1QoMCkNCj4gKyNkZWZpbmUgQ0RQX0RfREFUT1VUX09GRlNF
VF8wX0RBVE9VVF9PRkZTRVRfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHhmZmZmZmZmZiwg
Q0RQX0RfREFUT1VUX09GRlNFVF8wX0RBVE9VVF9PRkZTRVRfU0hJRlQpDQo+ICsNCj4gKw0K
PiArLy8gUmVnaXN0ZXIgQ0RQX0RfREFUT1VUX1NDQUxFXzANCj4gKyNkZWZpbmUgQ0RQX0Rf
REFUT1VUX1NDQUxFXzAJCQlfTUtfQUREUl9DT05TVCgweGQwODQpDQo+ICsjZGVmaW5lIENE
UF9EX0RBVE9VVF9TQ0FMRV8wX0RBVE9VVF9TQ0FMRV9TSElGVAkJCV9NS19TSElGVF9DT05T
VCgwKQ0KPiArI2RlZmluZSBDRFBfRF9EQVRPVVRfU0NBTEVfMF9EQVRPVVRfU0NBTEVfRklF
TEQJCQlfTUtfRklFTERfQ09OU1QoMHhmZmZmLCBDRFBfRF9EQVRPVVRfU0NBTEVfMF9EQVRP
VVRfU0NBTEVfU0hJRlQpDQo+ICsNCj4gKw0KPiArLy8gUmVnaXN0ZXIgQ0RQX0RfREFUT1VU
X1NISUZURVJfMA0KPiArI2RlZmluZSBDRFBfRF9EQVRPVVRfU0hJRlRFUl8wCQkJX01LX0FE
RFJfQ09OU1QoMHhkMDg4KQ0KPiArI2RlZmluZSBDRFBfRF9EQVRPVVRfU0hJRlRFUl8wX0RB
VE9VVF9TSElGVEVSX1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDApDQo+ICsjZGVmaW5lIENE
UF9EX0RBVE9VVF9TSElGVEVSXzBfREFUT1VUX1NISUZURVJfRklFTEQJCQlfTUtfRklFTERf
Q09OU1QoMHgzZiwgQ0RQX0RfREFUT1VUX1NISUZURVJfMF9EQVRPVVRfU0hJRlRFUl9TSElG
VCkNCj4gKw0KPiArDQo+ICsvLyBSZWdpc3RlciBDRFBfRF9OQU5fSU5QVVRfTlVNXzANCj4g
KyNkZWZpbmUgQ0RQX0RfTkFOX0lOUFVUX05VTV8wCQkJX01LX0FERFJfQ09OU1QoMHhkMDhj
KQ0KPiArI2RlZmluZSBDRFBfRF9OQU5fSU5QVVRfTlVNXzBfTkFOX0lOUFVUX05VTV9TSElG
VAkJCV9NS19TSElGVF9DT05TVCgwKQ0KPiArI2RlZmluZSBDRFBfRF9OQU5fSU5QVVRfTlVN
XzBfTkFOX0lOUFVUX05VTV9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweGZmZmZmZmZmLCBD
RFBfRF9OQU5fSU5QVVRfTlVNXzBfTkFOX0lOUFVUX05VTV9TSElGVCkNCj4gKw0KPiArDQo+
ICsvLyBSZWdpc3RlciBDRFBfRF9JTkZfSU5QVVRfTlVNXzANCj4gKyNkZWZpbmUgQ0RQX0Rf
SU5GX0lOUFVUX05VTV8wCQkJX01LX0FERFJfQ09OU1QoMHhkMDkwKQ0KPiArI2RlZmluZSBD
RFBfRF9JTkZfSU5QVVRfTlVNXzBfSU5GX0lOUFVUX05VTV9TSElGVAkJCV9NS19TSElGVF9D
T05TVCgwKQ0KPiArI2RlZmluZSBDRFBfRF9JTkZfSU5QVVRfTlVNXzBfSU5GX0lOUFVUX05V
TV9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweGZmZmZmZmZmLCBDRFBfRF9JTkZfSU5QVVRf
TlVNXzBfSU5GX0lOUFVUX05VTV9TSElGVCkNCj4gKw0KPiArDQo+ICsvLyBSZWdpc3RlciBD
RFBfRF9OQU5fT1VUUFVUX05VTV8wDQo+ICsjZGVmaW5lIENEUF9EX05BTl9PVVRQVVRfTlVN
XzAJCQlfTUtfQUREUl9DT05TVCgweGQwOTQpDQo+ICsjZGVmaW5lIENEUF9EX05BTl9PVVRQ
VVRfTlVNXzBfTkFOX09VVFBVVF9OVU1fU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMCkNCj4g
KyNkZWZpbmUgQ0RQX0RfTkFOX09VVFBVVF9OVU1fMF9OQU5fT1VUUFVUX05VTV9GSUVMRAkJ
CV9NS19GSUVMRF9DT05TVCgweGZmZmZmZmZmLCBDRFBfRF9OQU5fT1VUUFVUX05VTV8wX05B
Tl9PVVRQVVRfTlVNX1NISUZUKQ0KPiArDQo+ICsNCj4gKy8vIFJlZ2lzdGVyIENEUF9EX09V
VF9TQVRVUkFUSU9OXzANCj4gKyNkZWZpbmUgQ0RQX0RfT1VUX1NBVFVSQVRJT05fMAkJCV9N
S19BRERSX0NPTlNUKDB4ZDA5OCkNCj4gKyNkZWZpbmUgQ0RQX0RfT1VUX1NBVFVSQVRJT05f
MF9PVVRfU0FUVVJBVElPTl9TSElGVAkJCV9NS19TSElGVF9DT05TVCgwKQ0KPiArI2RlZmlu
ZSBDRFBfRF9PVVRfU0FUVVJBVElPTl8wX09VVF9TQVRVUkFUSU9OX0ZJRUxECQkJX01LX0ZJ
RUxEX0NPTlNUKDB4ZmZmZmZmZmYsIENEUF9EX09VVF9TQVRVUkFUSU9OXzBfT1VUX1NBVFVS
QVRJT05fU0hJRlQpDQo+ICsNCj4gKw0KPiArLy8gUmVnaXN0ZXIgQ0RQX0RfUEVSRl9FTkFC
TEVfMA0KPiArI2RlZmluZSBDRFBfRF9QRVJGX0VOQUJMRV8wCQkJX01LX0FERFJfQ09OU1Qo
MHhkMDljKQ0KPiArI2RlZmluZSBDRFBfRF9QRVJGX0VOQUJMRV8wX0RNQV9FTl9TSElGVAkJ
CV9NS19TSElGVF9DT05TVCgwKQ0KPiArI2RlZmluZSBDRFBfRF9QRVJGX0VOQUJMRV8wX0RN
QV9FTl9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweDEsIENEUF9EX1BFUkZfRU5BQkxFXzBf
RE1BX0VOX1NISUZUKQ0KPiArI2RlZmluZSBDRFBfRF9QRVJGX0VOQUJMRV8wX0RNQV9FTl9E
SVNBQkxFCQkJX01LX0VOVU1fQ09OU1QoMHgwKQ0KPiArI2RlZmluZSBDRFBfRF9QRVJGX0VO
QUJMRV8wX0RNQV9FTl9FTkFCTEUJCQlfTUtfRU5VTV9DT05TVCgweDEpDQo+ICsjZGVmaW5l
IENEUF9EX1BFUkZfRU5BQkxFXzBfTFVUX0VOX1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDEp
DQo+ICsjZGVmaW5lIENEUF9EX1BFUkZfRU5BQkxFXzBfTFVUX0VOX0ZJRUxECQkJX01LX0ZJ
RUxEX0NPTlNUKDB4MSwgQ0RQX0RfUEVSRl9FTkFCTEVfMF9MVVRfRU5fU0hJRlQpDQo+ICsj
ZGVmaW5lIENEUF9EX1BFUkZfRU5BQkxFXzBfTFVUX0VOX0RJU0FCTEUJCQlfTUtfRU5VTV9D
T05TVCgweDApDQo+ICsjZGVmaW5lIENEUF9EX1BFUkZfRU5BQkxFXzBfTFVUX0VOX0VOQUJM
RQkJCV9NS19FTlVNX0NPTlNUKDB4MSkNCj4gKw0KPiArDQo+ICsvLyBSZWdpc3RlciBDRFBf
RF9QRVJGX1dSSVRFX1NUQUxMXzANCj4gKyNkZWZpbmUgQ0RQX0RfUEVSRl9XUklURV9TVEFM
TF8wCQkJX01LX0FERFJfQ09OU1QoMHhkMGEwKQ0KPiArI2RlZmluZSBDRFBfRF9QRVJGX1dS
SVRFX1NUQUxMXzBfUEVSRl9XUklURV9TVEFMTF9TSElGVAkJCV9NS19TSElGVF9DT05TVCgw
KQ0KPiArI2RlZmluZSBDRFBfRF9QRVJGX1dSSVRFX1NUQUxMXzBfUEVSRl9XUklURV9TVEFM
TF9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweGZmZmZmZmZmLCBDRFBfRF9QRVJGX1dSSVRF
X1NUQUxMXzBfUEVSRl9XUklURV9TVEFMTF9TSElGVCkNCj4gKw0KPiArDQo+ICsvLyBSZWdp
c3RlciBDRFBfRF9QRVJGX0xVVF9VRkxPV18wDQo+ICsjZGVmaW5lIENEUF9EX1BFUkZfTFVU
X1VGTE9XXzAJCQlfTUtfQUREUl9DT05TVCgweGQwYTQpDQo+ICsjZGVmaW5lIENEUF9EX1BF
UkZfTFVUX1VGTE9XXzBfUEVSRl9MVVRfVUZMT1dfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1Qo
MCkNCj4gKyNkZWZpbmUgQ0RQX0RfUEVSRl9MVVRfVUZMT1dfMF9QRVJGX0xVVF9VRkxPV19G
SUVMRAkJCV9NS19GSUVMRF9DT05TVCgweGZmZmZmZmZmLCBDRFBfRF9QRVJGX0xVVF9VRkxP
V18wX1BFUkZfTFVUX1VGTE9XX1NISUZUKQ0KPiArDQo+ICsNCj4gKy8vIFJlZ2lzdGVyIENE
UF9EX1BFUkZfTFVUX09GTE9XXzANCj4gKyNkZWZpbmUgQ0RQX0RfUEVSRl9MVVRfT0ZMT1df
MAkJCV9NS19BRERSX0NPTlNUKDB4ZDBhOCkNCj4gKyNkZWZpbmUgQ0RQX0RfUEVSRl9MVVRf
T0ZMT1dfMF9QRVJGX0xVVF9PRkxPV19TSElGVAkJCV9NS19TSElGVF9DT05TVCgwKQ0KPiAr
I2RlZmluZSBDRFBfRF9QRVJGX0xVVF9PRkxPV18wX1BFUkZfTFVUX09GTE9XX0ZJRUxECQkJ
X01LX0ZJRUxEX0NPTlNUKDB4ZmZmZmZmZmYsIENEUF9EX1BFUkZfTFVUX09GTE9XXzBfUEVS
Rl9MVVRfT0ZMT1dfU0hJRlQpDQo+ICsNCj4gKw0KPiArLy8gUmVnaXN0ZXIgQ0RQX0RfUEVS
Rl9MVVRfSFlCUklEXzANCj4gKyNkZWZpbmUgQ0RQX0RfUEVSRl9MVVRfSFlCUklEXzAJCQlf
TUtfQUREUl9DT05TVCgweGQwYWMpDQo+ICsjZGVmaW5lIENEUF9EX1BFUkZfTFVUX0hZQlJJ
RF8wX1BFUkZfTFVUX0hZQlJJRF9TSElGVAkJCV9NS19TSElGVF9DT05TVCgwKQ0KPiArI2Rl
ZmluZSBDRFBfRF9QRVJGX0xVVF9IWUJSSURfMF9QRVJGX0xVVF9IWUJSSURfRklFTEQJCQlf
TUtfRklFTERfQ09OU1QoMHhmZmZmZmZmZiwgQ0RQX0RfUEVSRl9MVVRfSFlCUklEXzBfUEVS
Rl9MVVRfSFlCUklEX1NISUZUKQ0KPiArDQo+ICsNCj4gKy8vIFJlZ2lzdGVyIENEUF9EX1BF
UkZfTFVUX0xFX0hJVF8wDQo+ICsjZGVmaW5lIENEUF9EX1BFUkZfTFVUX0xFX0hJVF8wCQkJ
X01LX0FERFJfQ09OU1QoMHhkMGIwKQ0KPiArI2RlZmluZSBDRFBfRF9QRVJGX0xVVF9MRV9I
SVRfMF9QRVJGX0xVVF9MRV9ISVRfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMCkNCj4gKyNk
ZWZpbmUgQ0RQX0RfUEVSRl9MVVRfTEVfSElUXzBfUEVSRl9MVVRfTEVfSElUX0ZJRUxECQkJ
X01LX0ZJRUxEX0NPTlNUKDB4ZmZmZmZmZmYsIENEUF9EX1BFUkZfTFVUX0xFX0hJVF8wX1BF
UkZfTFVUX0xFX0hJVF9TSElGVCkNCj4gKw0KPiArDQo+ICsvLyBSZWdpc3RlciBDRFBfRF9Q
RVJGX0xVVF9MT19ISVRfMA0KPiArI2RlZmluZSBDRFBfRF9QRVJGX0xVVF9MT19ISVRfMAkJ
CV9NS19BRERSX0NPTlNUKDB4ZDBiNCkNCj4gKyNkZWZpbmUgQ0RQX0RfUEVSRl9MVVRfTE9f
SElUXzBfUEVSRl9MVVRfTE9fSElUX1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDApDQo+ICsj
ZGVmaW5lIENEUF9EX1BFUkZfTFVUX0xPX0hJVF8wX1BFUkZfTFVUX0xPX0hJVF9GSUVMRAkJ
CV9NS19GSUVMRF9DT05TVCgweGZmZmZmZmZmLCBDRFBfRF9QRVJGX0xVVF9MT19ISVRfMF9Q
RVJGX0xVVF9MT19ISVRfU0hJRlQpDQo+ICsNCj4gKw0KPiArLy8gUmVnaXN0ZXIgQ0RQX0Rf
Q1lBXzANCj4gKyNkZWZpbmUgQ0RQX0RfQ1lBXzAJCQlfTUtfQUREUl9DT05TVCgweGQwYjgp
DQo+ICsjZGVmaW5lIENEUF9EX0NZQV8wX0NZQV9TSElGVAkJCV9NS19TSElGVF9DT05TVCgw
KQ0KPiArI2RlZmluZSBDRFBfRF9DWUFfMF9DWUFfRklFTEQJCQlfTUtfRklFTERfQ09OU1Qo
MHhmZmZmZmZmZiwgQ0RQX0RfQ1lBXzBfQ1lBX1NISUZUKQ0KPiArDQo+ICsNCj4gKw0KPiAr
Ly8gVG8gc2F0aXNmeSB2YXJpb3VzIGNvbXBpbGVycyBhbmQgcGxhdGZvcm1zLA0KPiArLy8g
d2UgbGV0IHVzZXJzIGNvbnRyb2wgdGhlIHR5cGVzIGFuZCBzeW50YXggb2YgY2VydGFpbiBj
b25zdGFudHMsIHVzaW5nIG1hY3Jvcy4NCj4gKyNpZm5kZWYgX01LX1NISUZUX0NPTlNUDQo+
ICsgICNkZWZpbmUgX01LX1NISUZUX0NPTlNUKF9jb25zdGFudF8pIF9jb25zdGFudF8NCj4g
KyNlbmRpZg0KPiArI2lmbmRlZiBfTUtfTUFTS19DT05TVA0KPiArICAjZGVmaW5lIF9NS19N
QVNLX0NPTlNUKF9jb25zdGFudF8pIF9jb25zdGFudF8NCj4gKyNlbmRpZg0KPiArI2lmbmRl
ZiBfTUtfRU5VTV9DT05TVA0KPiArICAjZGVmaW5lIF9NS19FTlVNX0NPTlNUKF9jb25zdGFu
dF8pIChfY29uc3RhbnRfICMjIFVMKQ0KPiArI2VuZGlmDQo+ICsjaWZuZGVmIF9NS19BRERS
X0NPTlNUDQo+ICsgICNkZWZpbmUgX01LX0FERFJfQ09OU1QoX2NvbnN0YW50XykgX2NvbnN0
YW50Xw0KPiArI2VuZGlmDQo+ICsjaWZuZGVmIF9NS19GSUVMRF9DT05TVA0KPiArICAjZGVm
aW5lIF9NS19GSUVMRF9DT05TVChfbWFza18sIF9zaGlmdF8pIChfTUtfTUFTS19DT05TVChf
bWFza18pIDw8IF9NS19TSElGVF9DT05TVChfc2hpZnRfKSkNCj4gKyNlbmRpZg0KPiArDQo+
ICsNCj4gKy8vIFJlZ2lzdGVyIE5WRExBX0dFQ19GRUFUVVJFXzANCj4gKyNkZWZpbmUgTlZE
TEFfR0VDX0ZFQVRVUkVfMAkJCV9NS19BRERSX0NPTlNUKDB4ZTAwMCkNCj4gKyNkZWZpbmUg
TlZETEFfR0VDX0ZFQVRVUkVfMF9OVU1fRVJSX1NMSUNFU19TSElGVAkJCV9NS19TSElGVF9D
T05TVCgwKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRkVBVFVSRV8wX05VTV9FUlJfU0xJQ0VT
X0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4M2YsIE5WRExBX0dFQ19GRUFUVVJFXzBfTlVN
X0VSUl9TTElDRVNfU0hJRlQpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19GRUFUVVJFXzBfTlVN
X0VSUl9TSElGVAkJCV9NS19TSElGVF9DT05TVCgxNikNCj4gKyNkZWZpbmUgTlZETEFfR0VD
X0ZFQVRVUkVfMF9OVU1fRVJSX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4ZmZmZiwgTlZE
TEFfR0VDX0ZFQVRVUkVfMF9OVU1fRVJSX1NISUZUKQ0KPiArDQo+ICsNCj4gKy8vIFJlZ2lz
dGVyIE5WRExBX0dFQ19TV1JFU0VUXzANCj4gKyNkZWZpbmUgTlZETEFfR0VDX1NXUkVTRVRf
MAkJCV9NS19BRERSX0NPTlNUKDB4ZTAwNCkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX1NXUkVT
RVRfMF9TV1JTVF9TSElGVAkJCV9NS19TSElGVF9DT05TVCgwKQ0KPiArI2RlZmluZSBOVkRM
QV9HRUNfU1dSRVNFVF8wX1NXUlNUX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4MSwgTlZE
TEFfR0VDX1NXUkVTRVRfMF9TV1JTVF9TSElGVCkNCj4gKw0KPiArDQo+ICsvLyBSZWdpc3Rl
ciBOVkRMQV9HRUNfTUlTU0lPTkVSUl9UWVBFXzANCj4gKyNkZWZpbmUgTlZETEFfR0VDX01J
U1NJT05FUlJfVFlQRV8wCQkJX01LX0FERFJfQ09OU1QoMHhlMDA4KQ0KPiArI2RlZmluZSBO
VkRMQV9HRUNfTUlTU0lPTkVSUl9UWVBFXzBfQ09ERV9TSElGVAkJCV9NS19TSElGVF9DT05T
VCgwKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfTUlTU0lPTkVSUl9UWVBFXzBfQ09ERV9GSUVM
RAkJCV9NS19GSUVMRF9DT05TVCgweDNmLCBOVkRMQV9HRUNfTUlTU0lPTkVSUl9UWVBFXzBf
Q09ERV9TSElGVCkNCj4gKw0KPiArDQo+ICsvLyBSZWdpc3RlciBOVkRMQV9HRUNfQ1VSUkVO
VF9DT1VOVEVSX1ZBTFVFXzANCj4gKyNkZWZpbmUgTlZETEFfR0VDX0NVUlJFTlRfQ09VTlRF
Ul9WQUxVRV8wCQkJX01LX0FERFJfQ09OU1QoMHhlMDBjKQ0KPiArI2RlZmluZSBOVkRMQV9H
RUNfQ1VSUkVOVF9DT1VOVEVSX1ZBTFVFXzBfVkFMVUVfU0hJRlQJCQlfTUtfU0hJRlRfQ09O
U1QoMCkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0NVUlJFTlRfQ09VTlRFUl9WQUxVRV8wX1ZB
TFVFX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4MWZmLCBOVkRMQV9HRUNfQ1VSUkVOVF9D
T1VOVEVSX1ZBTFVFXzBfVkFMVUVfU0hJRlQpDQo+ICsNCj4gKw0KPiArLy8gUmVnaXN0ZXIg
TlZETEFfR0VDX01JU1NJT05FUlJfSU5ERVhfMA0KPiArI2RlZmluZSBOVkRMQV9HRUNfTUlT
U0lPTkVSUl9JTkRFWF8wCQkJX01LX0FERFJfQ09OU1QoMHhlMDE0KQ0KPiArI2RlZmluZSBO
VkRMQV9HRUNfTUlTU0lPTkVSUl9JTkRFWF8wX0lEWF9TSElGVAkJCV9NS19TSElGVF9DT05T
VCgwKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfTUlTU0lPTkVSUl9JTkRFWF8wX0lEWF9GSUVM
RAkJCV9NS19GSUVMRF9DT05TVCgweDdmLCBOVkRMQV9HRUNfTUlTU0lPTkVSUl9JTkRFWF8w
X0lEWF9TSElGVCkNCj4gKw0KPiArDQo+ICsvLyBSZWdpc3RlciBOVkRMQV9HRUNfQ09SUkVD
VEFCTEVfVEhSRVNIT0xEXzANCj4gKyNkZWZpbmUgTlZETEFfR0VDX0NPUlJFQ1RBQkxFX1RI
UkVTSE9MRF8wCQkJX01LX0FERFJfQ09OU1QoMHhlMDE4KQ0KPiArI2RlZmluZSBOVkRMQV9H
RUNfQ09SUkVDVEFCTEVfVEhSRVNIT0xEXzBfQ09VTlRfU0hJRlQJCQlfTUtfU0hJRlRfQ09O
U1QoMCkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0NPUlJFQ1RBQkxFX1RIUkVTSE9MRF8wX0NP
VU5UX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4ZmYsIE5WRExBX0dFQ19DT1JSRUNUQUJM
RV9USFJFU0hPTERfMF9DT1VOVF9TSElGVCkNCj4gKw0KPiArDQo+ICsvLyBSZWdpc3RlciBO
VkRMQV9HRUNfTUlTU0lPTkVSUl9JTkpFQ1RfVU5MT0NLXzANCj4gKyNkZWZpbmUgTlZETEFf
R0VDX01JU1NJT05FUlJfSU5KRUNUX1VOTE9DS18wCQkJX01LX0FERFJfQ09OU1QoMHhlMDFj
KQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfTUlTU0lPTkVSUl9JTkpFQ1RfVU5MT0NLXzBfVkFM
VUVfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMCkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX01J
U1NJT05FUlJfSU5KRUNUX1VOTE9DS18wX1ZBTFVFX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNU
KDB4ZmYsIE5WRExBX0dFQ19NSVNTSU9ORVJSX0lOSkVDVF9VTkxPQ0tfMF9WQUxVRV9TSElG
VCkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX01JU1NJT05FUlJfSU5KRUNUX1VOTE9DS18wX1ZB
TFVFX0xPQ0sJCQlfTUtfRU5VTV9DT05TVCgweDApDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19N
SVNTSU9ORVJSX0lOSkVDVF9VTkxPQ0tfMF9WQUxVRV9VTkxPQ0sJCQlfTUtfRU5VTV9DT05T
VCgweGUxKQ0KPiArDQo+ICsNCj4gKy8vIFJlZ2lzdGVyIE5WRExBX0dFQ19FUlJTTElDRTBf
TUlTU0lPTkVSUl9FTkFCTEVfMA0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UwX01J
U1NJT05FUlJfRU5BQkxFXzAJCQlfTUtfQUREUl9DT05TVCgweGUwMzApDQo+ICsjZGVmaW5l
IE5WRExBX0dFQ19FUlJTTElDRTBfTUlTU0lPTkVSUl9FTkFCTEVfMF9FUlIwX1NISUZUCQkJ
X01LX1NISUZUX0NPTlNUKDApDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTUlT
U0lPTkVSUl9FTkFCTEVfMF9FUlIwX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4MSwgTlZE
TEFfR0VDX0VSUlNMSUNFMF9NSVNTSU9ORVJSX0VOQUJMRV8wX0VSUjBfU0hJRlQpDQo+ICsj
ZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTUlTU0lPTkVSUl9FTkFCTEVfMF9FUlIwX0RJ
U0FCTEUJCQlfTUtfRU5VTV9DT05TVCgweDApDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJT
TElDRTBfTUlTU0lPTkVSUl9FTkFCTEVfMF9FUlIwX0VOQUJMRQkJCV9NS19FTlVNX0NPTlNU
KDB4MSkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMF9NSVNTSU9ORVJSX0VOQUJM
RV8wX0VSUjFfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMSkNCj4gKyNkZWZpbmUgTlZETEFf
R0VDX0VSUlNMSUNFMF9NSVNTSU9ORVJSX0VOQUJMRV8wX0VSUjFfRklFTEQJCQlfTUtfRklF
TERfQ09OU1QoMHgxLCBOVkRMQV9HRUNfRVJSU0xJQ0UwX01JU1NJT05FUlJfRU5BQkxFXzBf
RVJSMV9TSElGVCkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMF9NSVNTSU9ORVJS
X0VOQUJMRV8wX0VSUjFfRElTQUJMRQkJCV9NS19FTlVNX0NPTlNUKDB4MCkNCj4gKyNkZWZp
bmUgTlZETEFfR0VDX0VSUlNMSUNFMF9NSVNTSU9ORVJSX0VOQUJMRV8wX0VSUjFfRU5BQkxF
CQkJX01LX0VOVU1fQ09OU1QoMHgxKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0Uw
X01JU1NJT05FUlJfRU5BQkxFXzBfRVJSMl9TSElGVAkJCV9NS19TSElGVF9DT05TVCgyKQ0K
PiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UwX01JU1NJT05FUlJfRU5BQkxFXzBfRVJS
Ml9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweDEsIE5WRExBX0dFQ19FUlJTTElDRTBfTUlT
U0lPTkVSUl9FTkFCTEVfMF9FUlIyX1NISUZUKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJS
U0xJQ0UwX01JU1NJT05FUlJfRU5BQkxFXzBfRVJSMl9ESVNBQkxFCQkJX01LX0VOVU1fQ09O
U1QoMHgwKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UwX01JU1NJT05FUlJfRU5B
QkxFXzBfRVJSMl9FTkFCTEUJCQlfTUtfRU5VTV9DT05TVCgweDEpDQo+ICsjZGVmaW5lIE5W
RExBX0dFQ19FUlJTTElDRTBfTUlTU0lPTkVSUl9FTkFCTEVfMF9FUlIzX1NISUZUCQkJX01L
X1NISUZUX0NPTlNUKDMpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTUlTU0lP
TkVSUl9FTkFCTEVfMF9FUlIzX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4MSwgTlZETEFf
R0VDX0VSUlNMSUNFMF9NSVNTSU9ORVJSX0VOQUJMRV8wX0VSUjNfU0hJRlQpDQo+ICsjZGVm
aW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTUlTU0lPTkVSUl9FTkFCTEVfMF9FUlIzX0RJU0FC
TEUJCQlfTUtfRU5VTV9DT05TVCgweDApDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElD
RTBfTUlTU0lPTkVSUl9FTkFCTEVfMF9FUlIzX0VOQUJMRQkJCV9NS19FTlVNX0NPTlNUKDB4
MSkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMF9NSVNTSU9ORVJSX0VOQUJMRV8w
X0VSUjRfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoNCkNCj4gKyNkZWZpbmUgTlZETEFfR0VD
X0VSUlNMSUNFMF9NSVNTSU9ORVJSX0VOQUJMRV8wX0VSUjRfRklFTEQJCQlfTUtfRklFTERf
Q09OU1QoMHgxLCBOVkRMQV9HRUNfRVJSU0xJQ0UwX01JU1NJT05FUlJfRU5BQkxFXzBfRVJS
NF9TSElGVCkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMF9NSVNTSU9ORVJSX0VO
QUJMRV8wX0VSUjRfRElTQUJMRQkJCV9NS19FTlVNX0NPTlNUKDB4MCkNCj4gKyNkZWZpbmUg
TlZETEFfR0VDX0VSUlNMSUNFMF9NSVNTSU9ORVJSX0VOQUJMRV8wX0VSUjRfRU5BQkxFCQkJ
X01LX0VOVU1fQ09OU1QoMHgxKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UwX01J
U1NJT05FUlJfRU5BQkxFXzBfRVJSNV9TSElGVAkJCV9NS19TSElGVF9DT05TVCg1KQ0KPiAr
I2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UwX01JU1NJT05FUlJfRU5BQkxFXzBfRVJSNV9G
SUVMRAkJCV9NS19GSUVMRF9DT05TVCgweDEsIE5WRExBX0dFQ19FUlJTTElDRTBfTUlTU0lP
TkVSUl9FTkFCTEVfMF9FUlI1X1NISUZUKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJ
Q0UwX01JU1NJT05FUlJfRU5BQkxFXzBfRVJSNV9ESVNBQkxFCQkJX01LX0VOVU1fQ09OU1Qo
MHgwKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UwX01JU1NJT05FUlJfRU5BQkxF
XzBfRVJSNV9FTkFCTEUJCQlfTUtfRU5VTV9DT05TVCgweDEpDQo+ICsjZGVmaW5lIE5WRExB
X0dFQ19FUlJTTElDRTBfTUlTU0lPTkVSUl9FTkFCTEVfMF9FUlI2X1NISUZUCQkJX01LX1NI
SUZUX0NPTlNUKDYpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTUlTU0lPTkVS
Ul9FTkFCTEVfMF9FUlI2X0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4MSwgTlZETEFfR0VD
X0VSUlNMSUNFMF9NSVNTSU9ORVJSX0VOQUJMRV8wX0VSUjZfU0hJRlQpDQo+ICsjZGVmaW5l
IE5WRExBX0dFQ19FUlJTTElDRTBfTUlTU0lPTkVSUl9FTkFCTEVfMF9FUlI2X0RJU0FCTEUJ
CQlfTUtfRU5VTV9DT05TVCgweDApDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBf
TUlTU0lPTkVSUl9FTkFCTEVfMF9FUlI2X0VOQUJMRQkJCV9NS19FTlVNX0NPTlNUKDB4MSkN
Cj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMF9NSVNTSU9ORVJSX0VOQUJMRV8wX0VS
UjdfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoNykNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VS
UlNMSUNFMF9NSVNTSU9ORVJSX0VOQUJMRV8wX0VSUjdfRklFTEQJCQlfTUtfRklFTERfQ09O
U1QoMHgxLCBOVkRMQV9HRUNfRVJSU0xJQ0UwX01JU1NJT05FUlJfRU5BQkxFXzBfRVJSN19T
SElGVCkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMF9NSVNTSU9ORVJSX0VOQUJM
RV8wX0VSUjdfRElTQUJMRQkJCV9NS19FTlVNX0NPTlNUKDB4MCkNCj4gKyNkZWZpbmUgTlZE
TEFfR0VDX0VSUlNMSUNFMF9NSVNTSU9ORVJSX0VOQUJMRV8wX0VSUjdfRU5BQkxFCQkJX01L
X0VOVU1fQ09OU1QoMHgxKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UwX01JU1NJ
T05FUlJfRU5BQkxFXzBfRVJSOF9TSElGVAkJCV9NS19TSElGVF9DT05TVCg4KQ0KPiArI2Rl
ZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UwX01JU1NJT05FUlJfRU5BQkxFXzBfRVJSOF9GSUVM
RAkJCV9NS19GSUVMRF9DT05TVCgweDEsIE5WRExBX0dFQ19FUlJTTElDRTBfTUlTU0lPTkVS
Ul9FTkFCTEVfMF9FUlI4X1NISUZUKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0Uw
X01JU1NJT05FUlJfRU5BQkxFXzBfRVJSOF9ESVNBQkxFCQkJX01LX0VOVU1fQ09OU1QoMHgw
KQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UwX01JU1NJT05FUlJfRU5BQkxFXzBf
RVJSOF9FTkFCTEUJCQlfTUtfRU5VTV9DT05TVCgweDEpDQo+ICsjZGVmaW5lIE5WRExBX0dF
Q19FUlJTTElDRTBfTUlTU0lPTkVSUl9FTkFCTEVfMF9FUlI5X1NISUZUCQkJX01LX1NISUZU
X0NPTlNUKDkpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTUlTU0lPTkVSUl9F
TkFCTEVfMF9FUlI5X0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4MSwgTlZETEFfR0VDX0VS
UlNMSUNFMF9NSVNTSU9ORVJSX0VOQUJMRV8wX0VSUjlfU0hJRlQpDQo+ICsjZGVmaW5lIE5W
RExBX0dFQ19FUlJTTElDRTBfTUlTU0lPTkVSUl9FTkFCTEVfMF9FUlI5X0RJU0FCTEUJCQlf
TUtfRU5VTV9DT05TVCgweDApDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTUlT
U0lPTkVSUl9FTkFCTEVfMF9FUlI5X0VOQUJMRQkJCV9NS19FTlVNX0NPTlNUKDB4MSkNCj4g
KyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMF9NSVNTSU9ORVJSX0VOQUJMRV8wX0VSUjEw
X1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDEwKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJS
U0xJQ0UwX01JU1NJT05FUlJfRU5BQkxFXzBfRVJSMTBfRklFTEQJCQlfTUtfRklFTERfQ09O
U1QoMHgxLCBOVkRMQV9HRUNfRVJSU0xJQ0UwX01JU1NJT05FUlJfRU5BQkxFXzBfRVJSMTBf
U0hJRlQpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTUlTU0lPTkVSUl9FTkFC
TEVfMF9FUlIxMF9ESVNBQkxFCQkJX01LX0VOVU1fQ09OU1QoMHgwKQ0KPiArI2RlZmluZSBO
VkRMQV9HRUNfRVJSU0xJQ0UwX01JU1NJT05FUlJfRU5BQkxFXzBfRVJSMTBfRU5BQkxFCQkJ
X01LX0VOVU1fQ09OU1QoMHgxKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UwX01J
U1NJT05FUlJfRU5BQkxFXzBfRVJSMTFfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMTEpDQo+
ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTUlTU0lPTkVSUl9FTkFCTEVfMF9FUlIx
MV9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweDEsIE5WRExBX0dFQ19FUlJTTElDRTBfTUlT
U0lPTkVSUl9FTkFCTEVfMF9FUlIxMV9TSElGVCkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VS
UlNMSUNFMF9NSVNTSU9ORVJSX0VOQUJMRV8wX0VSUjExX0RJU0FCTEUJCQlfTUtfRU5VTV9D
T05TVCgweDApDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTUlTU0lPTkVSUl9F
TkFCTEVfMF9FUlIxMV9FTkFCTEUJCQlfTUtfRU5VTV9DT05TVCgweDEpDQo+ICsjZGVmaW5l
IE5WRExBX0dFQ19FUlJTTElDRTBfTUlTU0lPTkVSUl9FTkFCTEVfMF9FUlIxMl9TSElGVAkJ
CV9NS19TSElGVF9DT05TVCgxMikNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMF9N
SVNTSU9ORVJSX0VOQUJMRV8wX0VSUjEyX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4MSwg
TlZETEFfR0VDX0VSUlNMSUNFMF9NSVNTSU9ORVJSX0VOQUJMRV8wX0VSUjEyX1NISUZUKQ0K
PiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UwX01JU1NJT05FUlJfRU5BQkxFXzBfRVJS
MTJfRElTQUJMRQkJCV9NS19FTlVNX0NPTlNUKDB4MCkNCj4gKyNkZWZpbmUgTlZETEFfR0VD
X0VSUlNMSUNFMF9NSVNTSU9ORVJSX0VOQUJMRV8wX0VSUjEyX0VOQUJMRQkJCV9NS19FTlVN
X0NPTlNUKDB4MSkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMF9NSVNTSU9ORVJS
X0VOQUJMRV8wX0VSUjEzX1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDEzKQ0KPiArI2RlZmlu
ZSBOVkRMQV9HRUNfRVJSU0xJQ0UwX01JU1NJT05FUlJfRU5BQkxFXzBfRVJSMTNfRklFTEQJ
CQlfTUtfRklFTERfQ09OU1QoMHgxLCBOVkRMQV9HRUNfRVJSU0xJQ0UwX01JU1NJT05FUlJf
RU5BQkxFXzBfRVJSMTNfU0hJRlQpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBf
TUlTU0lPTkVSUl9FTkFCTEVfMF9FUlIxM19ESVNBQkxFCQkJX01LX0VOVU1fQ09OU1QoMHgw
KQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UwX01JU1NJT05FUlJfRU5BQkxFXzBf
RVJSMTNfRU5BQkxFCQkJX01LX0VOVU1fQ09OU1QoMHgxKQ0KPiArI2RlZmluZSBOVkRMQV9H
RUNfRVJSU0xJQ0UwX01JU1NJT05FUlJfRU5BQkxFXzBfRVJSMTRfU0hJRlQJCQlfTUtfU0hJ
RlRfQ09OU1QoMTQpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTUlTU0lPTkVS
Ul9FTkFCTEVfMF9FUlIxNF9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweDEsIE5WRExBX0dF
Q19FUlJTTElDRTBfTUlTU0lPTkVSUl9FTkFCTEVfMF9FUlIxNF9TSElGVCkNCj4gKyNkZWZp
bmUgTlZETEFfR0VDX0VSUlNMSUNFMF9NSVNTSU9ORVJSX0VOQUJMRV8wX0VSUjE0X0RJU0FC
TEUJCQlfTUtfRU5VTV9DT05TVCgweDApDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElD
RTBfTUlTU0lPTkVSUl9FTkFCTEVfMF9FUlIxNF9FTkFCTEUJCQlfTUtfRU5VTV9DT05TVCgw
eDEpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTUlTU0lPTkVSUl9FTkFCTEVf
MF9FUlIxNV9TSElGVAkJCV9NS19TSElGVF9DT05TVCgxNSkNCj4gKyNkZWZpbmUgTlZETEFf
R0VDX0VSUlNMSUNFMF9NSVNTSU9ORVJSX0VOQUJMRV8wX0VSUjE1X0ZJRUxECQkJX01LX0ZJ
RUxEX0NPTlNUKDB4MSwgTlZETEFfR0VDX0VSUlNMSUNFMF9NSVNTSU9ORVJSX0VOQUJMRV8w
X0VSUjE1X1NISUZUKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UwX01JU1NJT05F
UlJfRU5BQkxFXzBfRVJSMTVfRElTQUJMRQkJCV9NS19FTlVNX0NPTlNUKDB4MCkNCj4gKyNk
ZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMF9NSVNTSU9ORVJSX0VOQUJMRV8wX0VSUjE1X0VO
QUJMRQkJCV9NS19FTlVNX0NPTlNUKDB4MSkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNM
SUNFMF9NSVNTSU9ORVJSX0VOQUJMRV8wX0VSUjE2X1NISUZUCQkJX01LX1NISUZUX0NPTlNU
KDE2KQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UwX01JU1NJT05FUlJfRU5BQkxF
XzBfRVJSMTZfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHgxLCBOVkRMQV9HRUNfRVJSU0xJ
Q0UwX01JU1NJT05FUlJfRU5BQkxFXzBfRVJSMTZfU0hJRlQpDQo+ICsjZGVmaW5lIE5WRExB
X0dFQ19FUlJTTElDRTBfTUlTU0lPTkVSUl9FTkFCTEVfMF9FUlIxNl9ESVNBQkxFCQkJX01L
X0VOVU1fQ09OU1QoMHgwKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UwX01JU1NJ
T05FUlJfRU5BQkxFXzBfRVJSMTZfRU5BQkxFCQkJX01LX0VOVU1fQ09OU1QoMHgxKQ0KPiAr
I2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UwX01JU1NJT05FUlJfRU5BQkxFXzBfRVJSMTdf
U0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMTcpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJT
TElDRTBfTUlTU0lPTkVSUl9FTkFCTEVfMF9FUlIxN19GSUVMRAkJCV9NS19GSUVMRF9DT05T
VCgweDEsIE5WRExBX0dFQ19FUlJTTElDRTBfTUlTU0lPTkVSUl9FTkFCTEVfMF9FUlIxN19T
SElGVCkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMF9NSVNTSU9ORVJSX0VOQUJM
RV8wX0VSUjE3X0RJU0FCTEUJCQlfTUtfRU5VTV9DT05TVCgweDApDQo+ICsjZGVmaW5lIE5W
RExBX0dFQ19FUlJTTElDRTBfTUlTU0lPTkVSUl9FTkFCTEVfMF9FUlIxN19FTkFCTEUJCQlf
TUtfRU5VTV9DT05TVCgweDEpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTUlT
U0lPTkVSUl9FTkFCTEVfMF9FUlIxOF9TSElGVAkJCV9NS19TSElGVF9DT05TVCgxOCkNCj4g
KyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMF9NSVNTSU9ORVJSX0VOQUJMRV8wX0VSUjE4
X0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4MSwgTlZETEFfR0VDX0VSUlNMSUNFMF9NSVNT
SU9ORVJSX0VOQUJMRV8wX0VSUjE4X1NISUZUKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJS
U0xJQ0UwX01JU1NJT05FUlJfRU5BQkxFXzBfRVJSMThfRElTQUJMRQkJCV9NS19FTlVNX0NP
TlNUKDB4MCkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMF9NSVNTSU9ORVJSX0VO
QUJMRV8wX0VSUjE4X0VOQUJMRQkJCV9NS19FTlVNX0NPTlNUKDB4MSkNCj4gKyNkZWZpbmUg
TlZETEFfR0VDX0VSUlNMSUNFMF9NSVNTSU9ORVJSX0VOQUJMRV8wX0VSUjE5X1NISUZUCQkJ
X01LX1NISUZUX0NPTlNUKDE5KQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UwX01J
U1NJT05FUlJfRU5BQkxFXzBfRVJSMTlfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHgxLCBO
VkRMQV9HRUNfRVJSU0xJQ0UwX01JU1NJT05FUlJfRU5BQkxFXzBfRVJSMTlfU0hJRlQpDQo+
ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTUlTU0lPTkVSUl9FTkFCTEVfMF9FUlIx
OV9ESVNBQkxFCQkJX01LX0VOVU1fQ09OU1QoMHgwKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNf
RVJSU0xJQ0UwX01JU1NJT05FUlJfRU5BQkxFXzBfRVJSMTlfRU5BQkxFCQkJX01LX0VOVU1f
Q09OU1QoMHgxKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UwX01JU1NJT05FUlJf
RU5BQkxFXzBfRVJSMjBfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMjApDQo+ICsjZGVmaW5l
IE5WRExBX0dFQ19FUlJTTElDRTBfTUlTU0lPTkVSUl9FTkFCTEVfMF9FUlIyMF9GSUVMRAkJ
CV9NS19GSUVMRF9DT05TVCgweDEsIE5WRExBX0dFQ19FUlJTTElDRTBfTUlTU0lPTkVSUl9F
TkFCTEVfMF9FUlIyMF9TSElGVCkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMF9N
SVNTSU9ORVJSX0VOQUJMRV8wX0VSUjIwX0RJU0FCTEUJCQlfTUtfRU5VTV9DT05TVCgweDAp
DQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTUlTU0lPTkVSUl9FTkFCTEVfMF9F
UlIyMF9FTkFCTEUJCQlfTUtfRU5VTV9DT05TVCgweDEpDQo+ICsjZGVmaW5lIE5WRExBX0dF
Q19FUlJTTElDRTBfTUlTU0lPTkVSUl9FTkFCTEVfMF9FUlIyMV9TSElGVAkJCV9NS19TSElG
VF9DT05TVCgyMSkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMF9NSVNTSU9ORVJS
X0VOQUJMRV8wX0VSUjIxX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4MSwgTlZETEFfR0VD
X0VSUlNMSUNFMF9NSVNTSU9ORVJSX0VOQUJMRV8wX0VSUjIxX1NISUZUKQ0KPiArI2RlZmlu
ZSBOVkRMQV9HRUNfRVJSU0xJQ0UwX01JU1NJT05FUlJfRU5BQkxFXzBfRVJSMjFfRElTQUJM
RQkJCV9NS19FTlVNX0NPTlNUKDB4MCkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNF
MF9NSVNTSU9ORVJSX0VOQUJMRV8wX0VSUjIxX0VOQUJMRQkJCV9NS19FTlVNX0NPTlNUKDB4
MSkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMF9NSVNTSU9ORVJSX0VOQUJMRV8w
X0VSUjIyX1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDIyKQ0KPiArI2RlZmluZSBOVkRMQV9H
RUNfRVJSU0xJQ0UwX01JU1NJT05FUlJfRU5BQkxFXzBfRVJSMjJfRklFTEQJCQlfTUtfRklF
TERfQ09OU1QoMHgxLCBOVkRMQV9HRUNfRVJSU0xJQ0UwX01JU1NJT05FUlJfRU5BQkxFXzBf
RVJSMjJfU0hJRlQpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTUlTU0lPTkVS
Ul9FTkFCTEVfMF9FUlIyMl9ESVNBQkxFCQkJX01LX0VOVU1fQ09OU1QoMHgwKQ0KPiArI2Rl
ZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UwX01JU1NJT05FUlJfRU5BQkxFXzBfRVJSMjJfRU5B
QkxFCQkJX01LX0VOVU1fQ09OU1QoMHgxKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJ
Q0UwX01JU1NJT05FUlJfRU5BQkxFXzBfRVJSMjNfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1Qo
MjMpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTUlTU0lPTkVSUl9FTkFCTEVf
MF9FUlIyM19GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweDEsIE5WRExBX0dFQ19FUlJTTElD
RTBfTUlTU0lPTkVSUl9FTkFCTEVfMF9FUlIyM19TSElGVCkNCj4gKyNkZWZpbmUgTlZETEFf
R0VDX0VSUlNMSUNFMF9NSVNTSU9ORVJSX0VOQUJMRV8wX0VSUjIzX0RJU0FCTEUJCQlfTUtf
RU5VTV9DT05TVCgweDApDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTUlTU0lP
TkVSUl9FTkFCTEVfMF9FUlIyM19FTkFCTEUJCQlfTUtfRU5VTV9DT05TVCgweDEpDQo+ICsj
ZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTUlTU0lPTkVSUl9FTkFCTEVfMF9FUlIyNF9T
SElGVAkJCV9NS19TSElGVF9DT05TVCgyNCkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNM
SUNFMF9NSVNTSU9ORVJSX0VOQUJMRV8wX0VSUjI0X0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNU
KDB4MSwgTlZETEFfR0VDX0VSUlNMSUNFMF9NSVNTSU9ORVJSX0VOQUJMRV8wX0VSUjI0X1NI
SUZUKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UwX01JU1NJT05FUlJfRU5BQkxF
XzBfRVJSMjRfRElTQUJMRQkJCV9NS19FTlVNX0NPTlNUKDB4MCkNCj4gKyNkZWZpbmUgTlZE
TEFfR0VDX0VSUlNMSUNFMF9NSVNTSU9ORVJSX0VOQUJMRV8wX0VSUjI0X0VOQUJMRQkJCV9N
S19FTlVNX0NPTlNUKDB4MSkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMF9NSVNT
SU9ORVJSX0VOQUJMRV8wX0VSUjI1X1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDI1KQ0KPiAr
I2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UwX01JU1NJT05FUlJfRU5BQkxFXzBfRVJSMjVf
RklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHgxLCBOVkRMQV9HRUNfRVJSU0xJQ0UwX01JU1NJ
T05FUlJfRU5BQkxFXzBfRVJSMjVfU0hJRlQpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJT
TElDRTBfTUlTU0lPTkVSUl9FTkFCTEVfMF9FUlIyNV9ESVNBQkxFCQkJX01LX0VOVU1fQ09O
U1QoMHgwKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UwX01JU1NJT05FUlJfRU5B
QkxFXzBfRVJSMjVfRU5BQkxFCQkJX01LX0VOVU1fQ09OU1QoMHgxKQ0KPiArI2RlZmluZSBO
VkRMQV9HRUNfRVJSU0xJQ0UwX01JU1NJT05FUlJfRU5BQkxFXzBfRVJSMjZfU0hJRlQJCQlf
TUtfU0hJRlRfQ09OU1QoMjYpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTUlT
U0lPTkVSUl9FTkFCTEVfMF9FUlIyNl9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweDEsIE5W
RExBX0dFQ19FUlJTTElDRTBfTUlTU0lPTkVSUl9FTkFCTEVfMF9FUlIyNl9TSElGVCkNCj4g
KyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMF9NSVNTSU9ORVJSX0VOQUJMRV8wX0VSUjI2
X0RJU0FCTEUJCQlfTUtfRU5VTV9DT05TVCgweDApDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19F
UlJTTElDRTBfTUlTU0lPTkVSUl9FTkFCTEVfMF9FUlIyNl9FTkFCTEUJCQlfTUtfRU5VTV9D
T05TVCgweDEpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTUlTU0lPTkVSUl9F
TkFCTEVfMF9FUlIyN19TSElGVAkJCV9NS19TSElGVF9DT05TVCgyNykNCj4gKyNkZWZpbmUg
TlZETEFfR0VDX0VSUlNMSUNFMF9NSVNTSU9ORVJSX0VOQUJMRV8wX0VSUjI3X0ZJRUxECQkJ
X01LX0ZJRUxEX0NPTlNUKDB4MSwgTlZETEFfR0VDX0VSUlNMSUNFMF9NSVNTSU9ORVJSX0VO
QUJMRV8wX0VSUjI3X1NISUZUKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UwX01J
U1NJT05FUlJfRU5BQkxFXzBfRVJSMjdfRElTQUJMRQkJCV9NS19FTlVNX0NPTlNUKDB4MCkN
Cj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMF9NSVNTSU9ORVJSX0VOQUJMRV8wX0VS
UjI3X0VOQUJMRQkJCV9NS19FTlVNX0NPTlNUKDB4MSkNCj4gKyNkZWZpbmUgTlZETEFfR0VD
X0VSUlNMSUNFMF9NSVNTSU9ORVJSX0VOQUJMRV8wX0VSUjI4X1NISUZUCQkJX01LX1NISUZU
X0NPTlNUKDI4KQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UwX01JU1NJT05FUlJf
RU5BQkxFXzBfRVJSMjhfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHgxLCBOVkRMQV9HRUNf
RVJSU0xJQ0UwX01JU1NJT05FUlJfRU5BQkxFXzBfRVJSMjhfU0hJRlQpDQo+ICsjZGVmaW5l
IE5WRExBX0dFQ19FUlJTTElDRTBfTUlTU0lPTkVSUl9FTkFCTEVfMF9FUlIyOF9ESVNBQkxF
CQkJX01LX0VOVU1fQ09OU1QoMHgwKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0Uw
X01JU1NJT05FUlJfRU5BQkxFXzBfRVJSMjhfRU5BQkxFCQkJX01LX0VOVU1fQ09OU1QoMHgx
KQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UwX01JU1NJT05FUlJfRU5BQkxFXzBf
RVJSMjlfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMjkpDQo+ICsjZGVmaW5lIE5WRExBX0dF
Q19FUlJTTElDRTBfTUlTU0lPTkVSUl9FTkFCTEVfMF9FUlIyOV9GSUVMRAkJCV9NS19GSUVM
RF9DT05TVCgweDEsIE5WRExBX0dFQ19FUlJTTElDRTBfTUlTU0lPTkVSUl9FTkFCTEVfMF9F
UlIyOV9TSElGVCkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMF9NSVNTSU9ORVJS
X0VOQUJMRV8wX0VSUjI5X0RJU0FCTEUJCQlfTUtfRU5VTV9DT05TVCgweDApDQo+ICsjZGVm
aW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTUlTU0lPTkVSUl9FTkFCTEVfMF9FUlIyOV9FTkFC
TEUJCQlfTUtfRU5VTV9DT05TVCgweDEpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElD
RTBfTUlTU0lPTkVSUl9FTkFCTEVfMF9FUlIzMF9TSElGVAkJCV9NS19TSElGVF9DT05TVCgz
MCkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMF9NSVNTSU9ORVJSX0VOQUJMRV8w
X0VSUjMwX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4MSwgTlZETEFfR0VDX0VSUlNMSUNF
MF9NSVNTSU9ORVJSX0VOQUJMRV8wX0VSUjMwX1NISUZUKQ0KPiArI2RlZmluZSBOVkRMQV9H
RUNfRVJSU0xJQ0UwX01JU1NJT05FUlJfRU5BQkxFXzBfRVJSMzBfRElTQUJMRQkJCV9NS19F
TlVNX0NPTlNUKDB4MCkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMF9NSVNTSU9O
RVJSX0VOQUJMRV8wX0VSUjMwX0VOQUJMRQkJCV9NS19FTlVNX0NPTlNUKDB4MSkNCj4gKyNk
ZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMF9NSVNTSU9ORVJSX0VOQUJMRV8wX0VSUjMxX1NI
SUZUCQkJX01LX1NISUZUX0NPTlNUKDMxKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJ
Q0UwX01JU1NJT05FUlJfRU5BQkxFXzBfRVJSMzFfRklFTEQJCQlfTUtfRklFTERfQ09OU1Qo
MHgxLCBOVkRMQV9HRUNfRVJSU0xJQ0UwX01JU1NJT05FUlJfRU5BQkxFXzBfRVJSMzFfU0hJ
RlQpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTUlTU0lPTkVSUl9FTkFCTEVf
MF9FUlIzMV9ESVNBQkxFCQkJX01LX0VOVU1fQ09OU1QoMHgwKQ0KPiArI2RlZmluZSBOVkRM
QV9HRUNfRVJSU0xJQ0UwX01JU1NJT05FUlJfRU5BQkxFXzBfRVJSMzFfRU5BQkxFCQkJX01L
X0VOVU1fQ09OU1QoMHgxKQ0KPiArDQo+ICsNCj4gKy8vIFJlZ2lzdGVyIE5WRExBX0dFQ19F
UlJTTElDRTBfTUlTU0lPTkVSUl9GT1JDRV8wDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJT
TElDRTBfTUlTU0lPTkVSUl9GT1JDRV8wCQkJX01LX0FERFJfQ09OU1QoMHhlMDM0KQ0KPiAr
I2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UwX01JU1NJT05FUlJfRk9SQ0VfMF9FUlIwX1NI
SUZUCQkJX01LX1NISUZUX0NPTlNUKDApDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElD
RTBfTUlTU0lPTkVSUl9GT1JDRV8wX0VSUjBfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHgx
LCBOVkRMQV9HRUNfRVJSU0xJQ0UwX01JU1NJT05FUlJfRk9SQ0VfMF9FUlIwX1NISUZUKQ0K
PiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UwX01JU1NJT05FUlJfRk9SQ0VfMF9FUlIw
X05PRk9SQ0UJCQlfTUtfRU5VTV9DT05TVCgweDApDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19F
UlJTTElDRTBfTUlTU0lPTkVSUl9GT1JDRV8wX0VSUjBfRk9SQ0UJCQlfTUtfRU5VTV9DT05T
VCgweDEpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTUlTU0lPTkVSUl9GT1JD
RV8wX0VSUjFfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMSkNCj4gKyNkZWZpbmUgTlZETEFf
R0VDX0VSUlNMSUNFMF9NSVNTSU9ORVJSX0ZPUkNFXzBfRVJSMV9GSUVMRAkJCV9NS19GSUVM
RF9DT05TVCgweDEsIE5WRExBX0dFQ19FUlJTTElDRTBfTUlTU0lPTkVSUl9GT1JDRV8wX0VS
UjFfU0hJRlQpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTUlTU0lPTkVSUl9G
T1JDRV8wX0VSUjFfTk9GT1JDRQkJCV9NS19FTlVNX0NPTlNUKDB4MCkNCj4gKyNkZWZpbmUg
TlZETEFfR0VDX0VSUlNMSUNFMF9NSVNTSU9ORVJSX0ZPUkNFXzBfRVJSMV9GT1JDRQkJCV9N
S19FTlVNX0NPTlNUKDB4MSkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMF9NSVNT
SU9ORVJSX0ZPUkNFXzBfRVJSMl9TSElGVAkJCV9NS19TSElGVF9DT05TVCgyKQ0KPiArI2Rl
ZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UwX01JU1NJT05FUlJfRk9SQ0VfMF9FUlIyX0ZJRUxE
CQkJX01LX0ZJRUxEX0NPTlNUKDB4MSwgTlZETEFfR0VDX0VSUlNMSUNFMF9NSVNTSU9ORVJS
X0ZPUkNFXzBfRVJSMl9TSElGVCkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMF9N
SVNTSU9ORVJSX0ZPUkNFXzBfRVJSMl9OT0ZPUkNFCQkJX01LX0VOVU1fQ09OU1QoMHgwKQ0K
PiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UwX01JU1NJT05FUlJfRk9SQ0VfMF9FUlIy
X0ZPUkNFCQkJX01LX0VOVU1fQ09OU1QoMHgxKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJS
U0xJQ0UwX01JU1NJT05FUlJfRk9SQ0VfMF9FUlIzX1NISUZUCQkJX01LX1NISUZUX0NPTlNU
KDMpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTUlTU0lPTkVSUl9GT1JDRV8w
X0VSUjNfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHgxLCBOVkRMQV9HRUNfRVJSU0xJQ0Uw
X01JU1NJT05FUlJfRk9SQ0VfMF9FUlIzX1NISUZUKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNf
RVJSU0xJQ0UwX01JU1NJT05FUlJfRk9SQ0VfMF9FUlIzX05PRk9SQ0UJCQlfTUtfRU5VTV9D
T05TVCgweDApDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTUlTU0lPTkVSUl9G
T1JDRV8wX0VSUjNfRk9SQ0UJCQlfTUtfRU5VTV9DT05TVCgweDEpDQo+ICsjZGVmaW5lIE5W
RExBX0dFQ19FUlJTTElDRTBfTUlTU0lPTkVSUl9GT1JDRV8wX0VSUjRfU0hJRlQJCQlfTUtf
U0hJRlRfQ09OU1QoNCkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMF9NSVNTSU9O
RVJSX0ZPUkNFXzBfRVJSNF9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweDEsIE5WRExBX0dF
Q19FUlJTTElDRTBfTUlTU0lPTkVSUl9GT1JDRV8wX0VSUjRfU0hJRlQpDQo+ICsjZGVmaW5l
IE5WRExBX0dFQ19FUlJTTElDRTBfTUlTU0lPTkVSUl9GT1JDRV8wX0VSUjRfTk9GT1JDRQkJ
CV9NS19FTlVNX0NPTlNUKDB4MCkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMF9N
SVNTSU9ORVJSX0ZPUkNFXzBfRVJSNF9GT1JDRQkJCV9NS19FTlVNX0NPTlNUKDB4MSkNCj4g
KyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMF9NSVNTSU9ORVJSX0ZPUkNFXzBfRVJSNV9T
SElGVAkJCV9NS19TSElGVF9DT05TVCg1KQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJ
Q0UwX01JU1NJT05FUlJfRk9SQ0VfMF9FUlI1X0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4
MSwgTlZETEFfR0VDX0VSUlNMSUNFMF9NSVNTSU9ORVJSX0ZPUkNFXzBfRVJSNV9TSElGVCkN
Cj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMF9NSVNTSU9ORVJSX0ZPUkNFXzBfRVJS
NV9OT0ZPUkNFCQkJX01LX0VOVU1fQ09OU1QoMHgwKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNf
RVJSU0xJQ0UwX01JU1NJT05FUlJfRk9SQ0VfMF9FUlI1X0ZPUkNFCQkJX01LX0VOVU1fQ09O
U1QoMHgxKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UwX01JU1NJT05FUlJfRk9S
Q0VfMF9FUlI2X1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDYpDQo+ICsjZGVmaW5lIE5WRExB
X0dFQ19FUlJTTElDRTBfTUlTU0lPTkVSUl9GT1JDRV8wX0VSUjZfRklFTEQJCQlfTUtfRklF
TERfQ09OU1QoMHgxLCBOVkRMQV9HRUNfRVJSU0xJQ0UwX01JU1NJT05FUlJfRk9SQ0VfMF9F
UlI2X1NISUZUKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UwX01JU1NJT05FUlJf
Rk9SQ0VfMF9FUlI2X05PRk9SQ0UJCQlfTUtfRU5VTV9DT05TVCgweDApDQo+ICsjZGVmaW5l
IE5WRExBX0dFQ19FUlJTTElDRTBfTUlTU0lPTkVSUl9GT1JDRV8wX0VSUjZfRk9SQ0UJCQlf
TUtfRU5VTV9DT05TVCgweDEpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTUlT
U0lPTkVSUl9GT1JDRV8wX0VSUjdfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoNykNCj4gKyNk
ZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMF9NSVNTSU9ORVJSX0ZPUkNFXzBfRVJSN19GSUVM
RAkJCV9NS19GSUVMRF9DT05TVCgweDEsIE5WRExBX0dFQ19FUlJTTElDRTBfTUlTU0lPTkVS
Ul9GT1JDRV8wX0VSUjdfU0hJRlQpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBf
TUlTU0lPTkVSUl9GT1JDRV8wX0VSUjdfTk9GT1JDRQkJCV9NS19FTlVNX0NPTlNUKDB4MCkN
Cj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMF9NSVNTSU9ORVJSX0ZPUkNFXzBfRVJS
N19GT1JDRQkJCV9NS19FTlVNX0NPTlNUKDB4MSkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VS
UlNMSUNFMF9NSVNTSU9ORVJSX0ZPUkNFXzBfRVJSOF9TSElGVAkJCV9NS19TSElGVF9DT05T
VCg4KQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UwX01JU1NJT05FUlJfRk9SQ0Vf
MF9FUlI4X0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4MSwgTlZETEFfR0VDX0VSUlNMSUNF
MF9NSVNTSU9ORVJSX0ZPUkNFXzBfRVJSOF9TSElGVCkNCj4gKyNkZWZpbmUgTlZETEFfR0VD
X0VSUlNMSUNFMF9NSVNTSU9ORVJSX0ZPUkNFXzBfRVJSOF9OT0ZPUkNFCQkJX01LX0VOVU1f
Q09OU1QoMHgwKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UwX01JU1NJT05FUlJf
Rk9SQ0VfMF9FUlI4X0ZPUkNFCQkJX01LX0VOVU1fQ09OU1QoMHgxKQ0KPiArI2RlZmluZSBO
VkRMQV9HRUNfRVJSU0xJQ0UwX01JU1NJT05FUlJfRk9SQ0VfMF9FUlI5X1NISUZUCQkJX01L
X1NISUZUX0NPTlNUKDkpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTUlTU0lP
TkVSUl9GT1JDRV8wX0VSUjlfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHgxLCBOVkRMQV9H
RUNfRVJSU0xJQ0UwX01JU1NJT05FUlJfRk9SQ0VfMF9FUlI5X1NISUZUKQ0KPiArI2RlZmlu
ZSBOVkRMQV9HRUNfRVJSU0xJQ0UwX01JU1NJT05FUlJfRk9SQ0VfMF9FUlI5X05PRk9SQ0UJ
CQlfTUtfRU5VTV9DT05TVCgweDApDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBf
TUlTU0lPTkVSUl9GT1JDRV8wX0VSUjlfRk9SQ0UJCQlfTUtfRU5VTV9DT05TVCgweDEpDQo+
ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTUlTU0lPTkVSUl9GT1JDRV8wX0VSUjEw
X1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDEwKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJS
U0xJQ0UwX01JU1NJT05FUlJfRk9SQ0VfMF9FUlIxMF9GSUVMRAkJCV9NS19GSUVMRF9DT05T
VCgweDEsIE5WRExBX0dFQ19FUlJTTElDRTBfTUlTU0lPTkVSUl9GT1JDRV8wX0VSUjEwX1NI
SUZUKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UwX01JU1NJT05FUlJfRk9SQ0Vf
MF9FUlIxMF9OT0ZPUkNFCQkJX01LX0VOVU1fQ09OU1QoMHgwKQ0KPiArI2RlZmluZSBOVkRM
QV9HRUNfRVJSU0xJQ0UwX01JU1NJT05FUlJfRk9SQ0VfMF9FUlIxMF9GT1JDRQkJCV9NS19F
TlVNX0NPTlNUKDB4MSkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMF9NSVNTSU9O
RVJSX0ZPUkNFXzBfRVJSMTFfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMTEpDQo+ICsjZGVm
aW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTUlTU0lPTkVSUl9GT1JDRV8wX0VSUjExX0ZJRUxE
CQkJX01LX0ZJRUxEX0NPTlNUKDB4MSwgTlZETEFfR0VDX0VSUlNMSUNFMF9NSVNTSU9ORVJS
X0ZPUkNFXzBfRVJSMTFfU0hJRlQpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBf
TUlTU0lPTkVSUl9GT1JDRV8wX0VSUjExX05PRk9SQ0UJCQlfTUtfRU5VTV9DT05TVCgweDAp
DQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTUlTU0lPTkVSUl9GT1JDRV8wX0VS
UjExX0ZPUkNFCQkJX01LX0VOVU1fQ09OU1QoMHgxKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNf
RVJSU0xJQ0UwX01JU1NJT05FUlJfRk9SQ0VfMF9FUlIxMl9TSElGVAkJCV9NS19TSElGVF9D
T05TVCgxMikNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMF9NSVNTSU9ORVJSX0ZP
UkNFXzBfRVJSMTJfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHgxLCBOVkRMQV9HRUNfRVJS
U0xJQ0UwX01JU1NJT05FUlJfRk9SQ0VfMF9FUlIxMl9TSElGVCkNCj4gKyNkZWZpbmUgTlZE
TEFfR0VDX0VSUlNMSUNFMF9NSVNTSU9ORVJSX0ZPUkNFXzBfRVJSMTJfTk9GT1JDRQkJCV9N
S19FTlVNX0NPTlNUKDB4MCkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMF9NSVNT
SU9ORVJSX0ZPUkNFXzBfRVJSMTJfRk9SQ0UJCQlfTUtfRU5VTV9DT05TVCgweDEpDQo+ICsj
ZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTUlTU0lPTkVSUl9GT1JDRV8wX0VSUjEzX1NI
SUZUCQkJX01LX1NISUZUX0NPTlNUKDEzKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJ
Q0UwX01JU1NJT05FUlJfRk9SQ0VfMF9FUlIxM19GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgw
eDEsIE5WRExBX0dFQ19FUlJTTElDRTBfTUlTU0lPTkVSUl9GT1JDRV8wX0VSUjEzX1NISUZU
KQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UwX01JU1NJT05FUlJfRk9SQ0VfMF9F
UlIxM19OT0ZPUkNFCQkJX01LX0VOVU1fQ09OU1QoMHgwKQ0KPiArI2RlZmluZSBOVkRMQV9H
RUNfRVJSU0xJQ0UwX01JU1NJT05FUlJfRk9SQ0VfMF9FUlIxM19GT1JDRQkJCV9NS19FTlVN
X0NPTlNUKDB4MSkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMF9NSVNTSU9ORVJS
X0ZPUkNFXzBfRVJSMTRfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMTQpDQo+ICsjZGVmaW5l
IE5WRExBX0dFQ19FUlJTTElDRTBfTUlTU0lPTkVSUl9GT1JDRV8wX0VSUjE0X0ZJRUxECQkJ
X01LX0ZJRUxEX0NPTlNUKDB4MSwgTlZETEFfR0VDX0VSUlNMSUNFMF9NSVNTSU9ORVJSX0ZP
UkNFXzBfRVJSMTRfU0hJRlQpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTUlT
U0lPTkVSUl9GT1JDRV8wX0VSUjE0X05PRk9SQ0UJCQlfTUtfRU5VTV9DT05TVCgweDApDQo+
ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTUlTU0lPTkVSUl9GT1JDRV8wX0VSUjE0
X0ZPUkNFCQkJX01LX0VOVU1fQ09OU1QoMHgxKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJS
U0xJQ0UwX01JU1NJT05FUlJfRk9SQ0VfMF9FUlIxNV9TSElGVAkJCV9NS19TSElGVF9DT05T
VCgxNSkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMF9NSVNTSU9ORVJSX0ZPUkNF
XzBfRVJSMTVfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHgxLCBOVkRMQV9HRUNfRVJSU0xJ
Q0UwX01JU1NJT05FUlJfRk9SQ0VfMF9FUlIxNV9TSElGVCkNCj4gKyNkZWZpbmUgTlZETEFf
R0VDX0VSUlNMSUNFMF9NSVNTSU9ORVJSX0ZPUkNFXzBfRVJSMTVfTk9GT1JDRQkJCV9NS19F
TlVNX0NPTlNUKDB4MCkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMF9NSVNTSU9O
RVJSX0ZPUkNFXzBfRVJSMTVfRk9SQ0UJCQlfTUtfRU5VTV9DT05TVCgweDEpDQo+ICsjZGVm
aW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTUlTU0lPTkVSUl9GT1JDRV8wX0VSUjE2X1NISUZU
CQkJX01LX1NISUZUX0NPTlNUKDE2KQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0Uw
X01JU1NJT05FUlJfRk9SQ0VfMF9FUlIxNl9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweDEs
IE5WRExBX0dFQ19FUlJTTElDRTBfTUlTU0lPTkVSUl9GT1JDRV8wX0VSUjE2X1NISUZUKQ0K
PiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UwX01JU1NJT05FUlJfRk9SQ0VfMF9FUlIx
Nl9OT0ZPUkNFCQkJX01LX0VOVU1fQ09OU1QoMHgwKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNf
RVJSU0xJQ0UwX01JU1NJT05FUlJfRk9SQ0VfMF9FUlIxNl9GT1JDRQkJCV9NS19FTlVNX0NP
TlNUKDB4MSkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMF9NSVNTSU9ORVJSX0ZP
UkNFXzBfRVJSMTdfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMTcpDQo+ICsjZGVmaW5lIE5W
RExBX0dFQ19FUlJTTElDRTBfTUlTU0lPTkVSUl9GT1JDRV8wX0VSUjE3X0ZJRUxECQkJX01L
X0ZJRUxEX0NPTlNUKDB4MSwgTlZETEFfR0VDX0VSUlNMSUNFMF9NSVNTSU9ORVJSX0ZPUkNF
XzBfRVJSMTdfU0hJRlQpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTUlTU0lP
TkVSUl9GT1JDRV8wX0VSUjE3X05PRk9SQ0UJCQlfTUtfRU5VTV9DT05TVCgweDApDQo+ICsj
ZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTUlTU0lPTkVSUl9GT1JDRV8wX0VSUjE3X0ZP
UkNFCQkJX01LX0VOVU1fQ09OU1QoMHgxKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJ
Q0UwX01JU1NJT05FUlJfRk9SQ0VfMF9FUlIxOF9TSElGVAkJCV9NS19TSElGVF9DT05TVCgx
OCkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMF9NSVNTSU9ORVJSX0ZPUkNFXzBf
RVJSMThfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHgxLCBOVkRMQV9HRUNfRVJSU0xJQ0Uw
X01JU1NJT05FUlJfRk9SQ0VfMF9FUlIxOF9TSElGVCkNCj4gKyNkZWZpbmUgTlZETEFfR0VD
X0VSUlNMSUNFMF9NSVNTSU9ORVJSX0ZPUkNFXzBfRVJSMThfTk9GT1JDRQkJCV9NS19FTlVN
X0NPTlNUKDB4MCkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMF9NSVNTSU9ORVJS
X0ZPUkNFXzBfRVJSMThfRk9SQ0UJCQlfTUtfRU5VTV9DT05TVCgweDEpDQo+ICsjZGVmaW5l
IE5WRExBX0dFQ19FUlJTTElDRTBfTUlTU0lPTkVSUl9GT1JDRV8wX0VSUjE5X1NISUZUCQkJ
X01LX1NISUZUX0NPTlNUKDE5KQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UwX01J
U1NJT05FUlJfRk9SQ0VfMF9FUlIxOV9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweDEsIE5W
RExBX0dFQ19FUlJTTElDRTBfTUlTU0lPTkVSUl9GT1JDRV8wX0VSUjE5X1NISUZUKQ0KPiAr
I2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UwX01JU1NJT05FUlJfRk9SQ0VfMF9FUlIxOV9O
T0ZPUkNFCQkJX01LX0VOVU1fQ09OU1QoMHgwKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJS
U0xJQ0UwX01JU1NJT05FUlJfRk9SQ0VfMF9FUlIxOV9GT1JDRQkJCV9NS19FTlVNX0NPTlNU
KDB4MSkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMF9NSVNTSU9ORVJSX0ZPUkNF
XzBfRVJSMjBfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMjApDQo+ICsjZGVmaW5lIE5WRExB
X0dFQ19FUlJTTElDRTBfTUlTU0lPTkVSUl9GT1JDRV8wX0VSUjIwX0ZJRUxECQkJX01LX0ZJ
RUxEX0NPTlNUKDB4MSwgTlZETEFfR0VDX0VSUlNMSUNFMF9NSVNTSU9ORVJSX0ZPUkNFXzBf
RVJSMjBfU0hJRlQpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTUlTU0lPTkVS
Ul9GT1JDRV8wX0VSUjIwX05PRk9SQ0UJCQlfTUtfRU5VTV9DT05TVCgweDApDQo+ICsjZGVm
aW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTUlTU0lPTkVSUl9GT1JDRV8wX0VSUjIwX0ZPUkNF
CQkJX01LX0VOVU1fQ09OU1QoMHgxKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0Uw
X01JU1NJT05FUlJfRk9SQ0VfMF9FUlIyMV9TSElGVAkJCV9NS19TSElGVF9DT05TVCgyMSkN
Cj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMF9NSVNTSU9ORVJSX0ZPUkNFXzBfRVJS
MjFfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHgxLCBOVkRMQV9HRUNfRVJSU0xJQ0UwX01J
U1NJT05FUlJfRk9SQ0VfMF9FUlIyMV9TSElGVCkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VS
UlNMSUNFMF9NSVNTSU9ORVJSX0ZPUkNFXzBfRVJSMjFfTk9GT1JDRQkJCV9NS19FTlVNX0NP
TlNUKDB4MCkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMF9NSVNTSU9ORVJSX0ZP
UkNFXzBfRVJSMjFfRk9SQ0UJCQlfTUtfRU5VTV9DT05TVCgweDEpDQo+ICsjZGVmaW5lIE5W
RExBX0dFQ19FUlJTTElDRTBfTUlTU0lPTkVSUl9GT1JDRV8wX0VSUjIyX1NISUZUCQkJX01L
X1NISUZUX0NPTlNUKDIyKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UwX01JU1NJ
T05FUlJfRk9SQ0VfMF9FUlIyMl9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweDEsIE5WRExB
X0dFQ19FUlJTTElDRTBfTUlTU0lPTkVSUl9GT1JDRV8wX0VSUjIyX1NISUZUKQ0KPiArI2Rl
ZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UwX01JU1NJT05FUlJfRk9SQ0VfMF9FUlIyMl9OT0ZP
UkNFCQkJX01LX0VOVU1fQ09OU1QoMHgwKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJ
Q0UwX01JU1NJT05FUlJfRk9SQ0VfMF9FUlIyMl9GT1JDRQkJCV9NS19FTlVNX0NPTlNUKDB4
MSkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMF9NSVNTSU9ORVJSX0ZPUkNFXzBf
RVJSMjNfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMjMpDQo+ICsjZGVmaW5lIE5WRExBX0dF
Q19FUlJTTElDRTBfTUlTU0lPTkVSUl9GT1JDRV8wX0VSUjIzX0ZJRUxECQkJX01LX0ZJRUxE
X0NPTlNUKDB4MSwgTlZETEFfR0VDX0VSUlNMSUNFMF9NSVNTSU9ORVJSX0ZPUkNFXzBfRVJS
MjNfU0hJRlQpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTUlTU0lPTkVSUl9G
T1JDRV8wX0VSUjIzX05PRk9SQ0UJCQlfTUtfRU5VTV9DT05TVCgweDApDQo+ICsjZGVmaW5l
IE5WRExBX0dFQ19FUlJTTElDRTBfTUlTU0lPTkVSUl9GT1JDRV8wX0VSUjIzX0ZPUkNFCQkJ
X01LX0VOVU1fQ09OU1QoMHgxKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UwX01J
U1NJT05FUlJfRk9SQ0VfMF9FUlIyNF9TSElGVAkJCV9NS19TSElGVF9DT05TVCgyNCkNCj4g
KyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMF9NSVNTSU9ORVJSX0ZPUkNFXzBfRVJSMjRf
RklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHgxLCBOVkRMQV9HRUNfRVJSU0xJQ0UwX01JU1NJ
T05FUlJfRk9SQ0VfMF9FUlIyNF9TSElGVCkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNM
SUNFMF9NSVNTSU9ORVJSX0ZPUkNFXzBfRVJSMjRfTk9GT1JDRQkJCV9NS19FTlVNX0NPTlNU
KDB4MCkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMF9NSVNTSU9ORVJSX0ZPUkNF
XzBfRVJSMjRfRk9SQ0UJCQlfTUtfRU5VTV9DT05TVCgweDEpDQo+ICsjZGVmaW5lIE5WRExB
X0dFQ19FUlJTTElDRTBfTUlTU0lPTkVSUl9GT1JDRV8wX0VSUjI1X1NISUZUCQkJX01LX1NI
SUZUX0NPTlNUKDI1KQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UwX01JU1NJT05F
UlJfRk9SQ0VfMF9FUlIyNV9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweDEsIE5WRExBX0dF
Q19FUlJTTElDRTBfTUlTU0lPTkVSUl9GT1JDRV8wX0VSUjI1X1NISUZUKQ0KPiArI2RlZmlu
ZSBOVkRMQV9HRUNfRVJSU0xJQ0UwX01JU1NJT05FUlJfRk9SQ0VfMF9FUlIyNV9OT0ZPUkNF
CQkJX01LX0VOVU1fQ09OU1QoMHgwKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0Uw
X01JU1NJT05FUlJfRk9SQ0VfMF9FUlIyNV9GT1JDRQkJCV9NS19FTlVNX0NPTlNUKDB4MSkN
Cj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMF9NSVNTSU9ORVJSX0ZPUkNFXzBfRVJS
MjZfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMjYpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19F
UlJTTElDRTBfTUlTU0lPTkVSUl9GT1JDRV8wX0VSUjI2X0ZJRUxECQkJX01LX0ZJRUxEX0NP
TlNUKDB4MSwgTlZETEFfR0VDX0VSUlNMSUNFMF9NSVNTSU9ORVJSX0ZPUkNFXzBfRVJSMjZf
U0hJRlQpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTUlTU0lPTkVSUl9GT1JD
RV8wX0VSUjI2X05PRk9SQ0UJCQlfTUtfRU5VTV9DT05TVCgweDApDQo+ICsjZGVmaW5lIE5W
RExBX0dFQ19FUlJTTElDRTBfTUlTU0lPTkVSUl9GT1JDRV8wX0VSUjI2X0ZPUkNFCQkJX01L
X0VOVU1fQ09OU1QoMHgxKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UwX01JU1NJ
T05FUlJfRk9SQ0VfMF9FUlIyN19TSElGVAkJCV9NS19TSElGVF9DT05TVCgyNykNCj4gKyNk
ZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMF9NSVNTSU9ORVJSX0ZPUkNFXzBfRVJSMjdfRklF
TEQJCQlfTUtfRklFTERfQ09OU1QoMHgxLCBOVkRMQV9HRUNfRVJSU0xJQ0UwX01JU1NJT05F
UlJfRk9SQ0VfMF9FUlIyN19TSElGVCkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNF
MF9NSVNTSU9ORVJSX0ZPUkNFXzBfRVJSMjdfTk9GT1JDRQkJCV9NS19FTlVNX0NPTlNUKDB4
MCkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMF9NSVNTSU9ORVJSX0ZPUkNFXzBf
RVJSMjdfRk9SQ0UJCQlfTUtfRU5VTV9DT05TVCgweDEpDQo+ICsjZGVmaW5lIE5WRExBX0dF
Q19FUlJTTElDRTBfTUlTU0lPTkVSUl9GT1JDRV8wX0VSUjI4X1NISUZUCQkJX01LX1NISUZU
X0NPTlNUKDI4KQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UwX01JU1NJT05FUlJf
Rk9SQ0VfMF9FUlIyOF9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweDEsIE5WRExBX0dFQ19F
UlJTTElDRTBfTUlTU0lPTkVSUl9GT1JDRV8wX0VSUjI4X1NISUZUKQ0KPiArI2RlZmluZSBO
VkRMQV9HRUNfRVJSU0xJQ0UwX01JU1NJT05FUlJfRk9SQ0VfMF9FUlIyOF9OT0ZPUkNFCQkJ
X01LX0VOVU1fQ09OU1QoMHgwKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UwX01J
U1NJT05FUlJfRk9SQ0VfMF9FUlIyOF9GT1JDRQkJCV9NS19FTlVNX0NPTlNUKDB4MSkNCj4g
KyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMF9NSVNTSU9ORVJSX0ZPUkNFXzBfRVJSMjlf
U0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMjkpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJT
TElDRTBfTUlTU0lPTkVSUl9GT1JDRV8wX0VSUjI5X0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNU
KDB4MSwgTlZETEFfR0VDX0VSUlNMSUNFMF9NSVNTSU9ORVJSX0ZPUkNFXzBfRVJSMjlfU0hJ
RlQpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTUlTU0lPTkVSUl9GT1JDRV8w
X0VSUjI5X05PRk9SQ0UJCQlfTUtfRU5VTV9DT05TVCgweDApDQo+ICsjZGVmaW5lIE5WRExB
X0dFQ19FUlJTTElDRTBfTUlTU0lPTkVSUl9GT1JDRV8wX0VSUjI5X0ZPUkNFCQkJX01LX0VO
VU1fQ09OU1QoMHgxKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UwX01JU1NJT05F
UlJfRk9SQ0VfMF9FUlIzMF9TSElGVAkJCV9NS19TSElGVF9DT05TVCgzMCkNCj4gKyNkZWZp
bmUgTlZETEFfR0VDX0VSUlNMSUNFMF9NSVNTSU9ORVJSX0ZPUkNFXzBfRVJSMzBfRklFTEQJ
CQlfTUtfRklFTERfQ09OU1QoMHgxLCBOVkRMQV9HRUNfRVJSU0xJQ0UwX01JU1NJT05FUlJf
Rk9SQ0VfMF9FUlIzMF9TSElGVCkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMF9N
SVNTSU9ORVJSX0ZPUkNFXzBfRVJSMzBfTk9GT1JDRQkJCV9NS19FTlVNX0NPTlNUKDB4MCkN
Cj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMF9NSVNTSU9ORVJSX0ZPUkNFXzBfRVJS
MzBfRk9SQ0UJCQlfTUtfRU5VTV9DT05TVCgweDEpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19F
UlJTTElDRTBfTUlTU0lPTkVSUl9GT1JDRV8wX0VSUjMxX1NISUZUCQkJX01LX1NISUZUX0NP
TlNUKDMxKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UwX01JU1NJT05FUlJfRk9S
Q0VfMF9FUlIzMV9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweDEsIE5WRExBX0dFQ19FUlJT
TElDRTBfTUlTU0lPTkVSUl9GT1JDRV8wX0VSUjMxX1NISUZUKQ0KPiArI2RlZmluZSBOVkRM
QV9HRUNfRVJSU0xJQ0UwX01JU1NJT05FUlJfRk9SQ0VfMF9FUlIzMV9OT0ZPUkNFCQkJX01L
X0VOVU1fQ09OU1QoMHgwKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UwX01JU1NJ
T05FUlJfRk9SQ0VfMF9FUlIzMV9GT1JDRQkJCV9NS19FTlVNX0NPTlNUKDB4MSkNCj4gKw0K
PiArDQo+ICsvLyBSZWdpc3RlciBOVkRMQV9HRUNfRVJSU0xJQ0UwX01JU1NJT05FUlJfU1RB
VFVTXzANCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMF9NSVNTSU9ORVJSX1NUQVRV
U18wCQkJX01LX0FERFJfQ09OU1QoMHhlMDM4KQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJS
U0xJQ0UwX01JU1NJT05FUlJfU1RBVFVTXzBfRVJSMF9TSElGVAkJCV9NS19TSElGVF9DT05T
VCgwKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UwX01JU1NJT05FUlJfU1RBVFVT
XzBfRVJSMF9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweDEsIE5WRExBX0dFQ19FUlJTTElD
RTBfTUlTU0lPTkVSUl9TVEFUVVNfMF9FUlIwX1NISUZUKQ0KPiArI2RlZmluZSBOVkRMQV9H
RUNfRVJSU0xJQ0UwX01JU1NJT05FUlJfU1RBVFVTXzBfRVJSMV9TSElGVAkJCV9NS19TSElG
VF9DT05TVCgxKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UwX01JU1NJT05FUlJf
U1RBVFVTXzBfRVJSMV9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweDEsIE5WRExBX0dFQ19F
UlJTTElDRTBfTUlTU0lPTkVSUl9TVEFUVVNfMF9FUlIxX1NISUZUKQ0KPiArI2RlZmluZSBO
VkRMQV9HRUNfRVJSU0xJQ0UwX01JU1NJT05FUlJfU1RBVFVTXzBfRVJSMl9TSElGVAkJCV9N
S19TSElGVF9DT05TVCgyKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UwX01JU1NJ
T05FUlJfU1RBVFVTXzBfRVJSMl9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweDEsIE5WRExB
X0dFQ19FUlJTTElDRTBfTUlTU0lPTkVSUl9TVEFUVVNfMF9FUlIyX1NISUZUKQ0KPiArI2Rl
ZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UwX01JU1NJT05FUlJfU1RBVFVTXzBfRVJSM19TSElG
VAkJCV9NS19TSElGVF9DT05TVCgzKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0Uw
X01JU1NJT05FUlJfU1RBVFVTXzBfRVJSM19GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweDEs
IE5WRExBX0dFQ19FUlJTTElDRTBfTUlTU0lPTkVSUl9TVEFUVVNfMF9FUlIzX1NISUZUKQ0K
PiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UwX01JU1NJT05FUlJfU1RBVFVTXzBfRVJS
NF9TSElGVAkJCV9NS19TSElGVF9DT05TVCg0KQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJS
U0xJQ0UwX01JU1NJT05FUlJfU1RBVFVTXzBfRVJSNF9GSUVMRAkJCV9NS19GSUVMRF9DT05T
VCgweDEsIE5WRExBX0dFQ19FUlJTTElDRTBfTUlTU0lPTkVSUl9TVEFUVVNfMF9FUlI0X1NI
SUZUKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UwX01JU1NJT05FUlJfU1RBVFVT
XzBfRVJSNV9TSElGVAkJCV9NS19TSElGVF9DT05TVCg1KQ0KPiArI2RlZmluZSBOVkRMQV9H
RUNfRVJSU0xJQ0UwX01JU1NJT05FUlJfU1RBVFVTXzBfRVJSNV9GSUVMRAkJCV9NS19GSUVM
RF9DT05TVCgweDEsIE5WRExBX0dFQ19FUlJTTElDRTBfTUlTU0lPTkVSUl9TVEFUVVNfMF9F
UlI1X1NISUZUKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UwX01JU1NJT05FUlJf
U1RBVFVTXzBfRVJSNl9TSElGVAkJCV9NS19TSElGVF9DT05TVCg2KQ0KPiArI2RlZmluZSBO
VkRMQV9HRUNfRVJSU0xJQ0UwX01JU1NJT05FUlJfU1RBVFVTXzBfRVJSNl9GSUVMRAkJCV9N
S19GSUVMRF9DT05TVCgweDEsIE5WRExBX0dFQ19FUlJTTElDRTBfTUlTU0lPTkVSUl9TVEFU
VVNfMF9FUlI2X1NISUZUKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UwX01JU1NJ
T05FUlJfU1RBVFVTXzBfRVJSN19TSElGVAkJCV9NS19TSElGVF9DT05TVCg3KQ0KPiArI2Rl
ZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UwX01JU1NJT05FUlJfU1RBVFVTXzBfRVJSN19GSUVM
RAkJCV9NS19GSUVMRF9DT05TVCgweDEsIE5WRExBX0dFQ19FUlJTTElDRTBfTUlTU0lPTkVS
Ul9TVEFUVVNfMF9FUlI3X1NISUZUKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0Uw
X01JU1NJT05FUlJfU1RBVFVTXzBfRVJSOF9TSElGVAkJCV9NS19TSElGVF9DT05TVCg4KQ0K
PiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UwX01JU1NJT05FUlJfU1RBVFVTXzBfRVJS
OF9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweDEsIE5WRExBX0dFQ19FUlJTTElDRTBfTUlT
U0lPTkVSUl9TVEFUVVNfMF9FUlI4X1NISUZUKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJS
U0xJQ0UwX01JU1NJT05FUlJfU1RBVFVTXzBfRVJSOV9TSElGVAkJCV9NS19TSElGVF9DT05T
VCg5KQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UwX01JU1NJT05FUlJfU1RBVFVT
XzBfRVJSOV9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweDEsIE5WRExBX0dFQ19FUlJTTElD
RTBfTUlTU0lPTkVSUl9TVEFUVVNfMF9FUlI5X1NISUZUKQ0KPiArI2RlZmluZSBOVkRMQV9H
RUNfRVJSU0xJQ0UwX01JU1NJT05FUlJfU1RBVFVTXzBfRVJSMTBfU0hJRlQJCQlfTUtfU0hJ
RlRfQ09OU1QoMTApDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTUlTU0lPTkVS
Ul9TVEFUVVNfMF9FUlIxMF9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweDEsIE5WRExBX0dF
Q19FUlJTTElDRTBfTUlTU0lPTkVSUl9TVEFUVVNfMF9FUlIxMF9TSElGVCkNCj4gKyNkZWZp
bmUgTlZETEFfR0VDX0VSUlNMSUNFMF9NSVNTSU9ORVJSX1NUQVRVU18wX0VSUjExX1NISUZU
CQkJX01LX1NISUZUX0NPTlNUKDExKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0Uw
X01JU1NJT05FUlJfU1RBVFVTXzBfRVJSMTFfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHgx
LCBOVkRMQV9HRUNfRVJSU0xJQ0UwX01JU1NJT05FUlJfU1RBVFVTXzBfRVJSMTFfU0hJRlQp
DQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTUlTU0lPTkVSUl9TVEFUVVNfMF9F
UlIxMl9TSElGVAkJCV9NS19TSElGVF9DT05TVCgxMikNCj4gKyNkZWZpbmUgTlZETEFfR0VD
X0VSUlNMSUNFMF9NSVNTSU9ORVJSX1NUQVRVU18wX0VSUjEyX0ZJRUxECQkJX01LX0ZJRUxE
X0NPTlNUKDB4MSwgTlZETEFfR0VDX0VSUlNMSUNFMF9NSVNTSU9ORVJSX1NUQVRVU18wX0VS
UjEyX1NISUZUKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UwX01JU1NJT05FUlJf
U1RBVFVTXzBfRVJSMTNfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMTMpDQo+ICsjZGVmaW5l
IE5WRExBX0dFQ19FUlJTTElDRTBfTUlTU0lPTkVSUl9TVEFUVVNfMF9FUlIxM19GSUVMRAkJ
CV9NS19GSUVMRF9DT05TVCgweDEsIE5WRExBX0dFQ19FUlJTTElDRTBfTUlTU0lPTkVSUl9T
VEFUVVNfMF9FUlIxM19TSElGVCkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMF9N
SVNTSU9ORVJSX1NUQVRVU18wX0VSUjE0X1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDE0KQ0K
PiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UwX01JU1NJT05FUlJfU1RBVFVTXzBfRVJS
MTRfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHgxLCBOVkRMQV9HRUNfRVJSU0xJQ0UwX01J
U1NJT05FUlJfU1RBVFVTXzBfRVJSMTRfU0hJRlQpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19F
UlJTTElDRTBfTUlTU0lPTkVSUl9TVEFUVVNfMF9FUlIxNV9TSElGVAkJCV9NS19TSElGVF9D
T05TVCgxNSkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMF9NSVNTSU9ORVJSX1NU
QVRVU18wX0VSUjE1X0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4MSwgTlZETEFfR0VDX0VS
UlNMSUNFMF9NSVNTSU9ORVJSX1NUQVRVU18wX0VSUjE1X1NISUZUKQ0KPiArI2RlZmluZSBO
VkRMQV9HRUNfRVJSU0xJQ0UwX01JU1NJT05FUlJfU1RBVFVTXzBfRVJSMTZfU0hJRlQJCQlf
TUtfU0hJRlRfQ09OU1QoMTYpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTUlT
U0lPTkVSUl9TVEFUVVNfMF9FUlIxNl9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweDEsIE5W
RExBX0dFQ19FUlJTTElDRTBfTUlTU0lPTkVSUl9TVEFUVVNfMF9FUlIxNl9TSElGVCkNCj4g
KyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMF9NSVNTSU9ORVJSX1NUQVRVU18wX0VSUjE3
X1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDE3KQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJS
U0xJQ0UwX01JU1NJT05FUlJfU1RBVFVTXzBfRVJSMTdfRklFTEQJCQlfTUtfRklFTERfQ09O
U1QoMHgxLCBOVkRMQV9HRUNfRVJSU0xJQ0UwX01JU1NJT05FUlJfU1RBVFVTXzBfRVJSMTdf
U0hJRlQpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTUlTU0lPTkVSUl9TVEFU
VVNfMF9FUlIxOF9TSElGVAkJCV9NS19TSElGVF9DT05TVCgxOCkNCj4gKyNkZWZpbmUgTlZE
TEFfR0VDX0VSUlNMSUNFMF9NSVNTSU9ORVJSX1NUQVRVU18wX0VSUjE4X0ZJRUxECQkJX01L
X0ZJRUxEX0NPTlNUKDB4MSwgTlZETEFfR0VDX0VSUlNMSUNFMF9NSVNTSU9ORVJSX1NUQVRV
U18wX0VSUjE4X1NISUZUKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UwX01JU1NJ
T05FUlJfU1RBVFVTXzBfRVJSMTlfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMTkpDQo+ICsj
ZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTUlTU0lPTkVSUl9TVEFUVVNfMF9FUlIxOV9G
SUVMRAkJCV9NS19GSUVMRF9DT05TVCgweDEsIE5WRExBX0dFQ19FUlJTTElDRTBfTUlTU0lP
TkVSUl9TVEFUVVNfMF9FUlIxOV9TSElGVCkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNM
SUNFMF9NSVNTSU9ORVJSX1NUQVRVU18wX0VSUjIwX1NISUZUCQkJX01LX1NISUZUX0NPTlNU
KDIwKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UwX01JU1NJT05FUlJfU1RBVFVT
XzBfRVJSMjBfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHgxLCBOVkRMQV9HRUNfRVJSU0xJ
Q0UwX01JU1NJT05FUlJfU1RBVFVTXzBfRVJSMjBfU0hJRlQpDQo+ICsjZGVmaW5lIE5WRExB
X0dFQ19FUlJTTElDRTBfTUlTU0lPTkVSUl9TVEFUVVNfMF9FUlIyMV9TSElGVAkJCV9NS19T
SElGVF9DT05TVCgyMSkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMF9NSVNTSU9O
RVJSX1NUQVRVU18wX0VSUjIxX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4MSwgTlZETEFf
R0VDX0VSUlNMSUNFMF9NSVNTSU9ORVJSX1NUQVRVU18wX0VSUjIxX1NISUZUKQ0KPiArI2Rl
ZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UwX01JU1NJT05FUlJfU1RBVFVTXzBfRVJSMjJfU0hJ
RlQJCQlfTUtfU0hJRlRfQ09OU1QoMjIpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElD
RTBfTUlTU0lPTkVSUl9TVEFUVVNfMF9FUlIyMl9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgw
eDEsIE5WRExBX0dFQ19FUlJTTElDRTBfTUlTU0lPTkVSUl9TVEFUVVNfMF9FUlIyMl9TSElG
VCkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMF9NSVNTSU9ORVJSX1NUQVRVU18w
X0VSUjIzX1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDIzKQ0KPiArI2RlZmluZSBOVkRMQV9H
RUNfRVJSU0xJQ0UwX01JU1NJT05FUlJfU1RBVFVTXzBfRVJSMjNfRklFTEQJCQlfTUtfRklF
TERfQ09OU1QoMHgxLCBOVkRMQV9HRUNfRVJSU0xJQ0UwX01JU1NJT05FUlJfU1RBVFVTXzBf
RVJSMjNfU0hJRlQpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTUlTU0lPTkVS
Ul9TVEFUVVNfMF9FUlIyNF9TSElGVAkJCV9NS19TSElGVF9DT05TVCgyNCkNCj4gKyNkZWZp
bmUgTlZETEFfR0VDX0VSUlNMSUNFMF9NSVNTSU9ORVJSX1NUQVRVU18wX0VSUjI0X0ZJRUxE
CQkJX01LX0ZJRUxEX0NPTlNUKDB4MSwgTlZETEFfR0VDX0VSUlNMSUNFMF9NSVNTSU9ORVJS
X1NUQVRVU18wX0VSUjI0X1NISUZUKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0Uw
X01JU1NJT05FUlJfU1RBVFVTXzBfRVJSMjVfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMjUp
DQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTUlTU0lPTkVSUl9TVEFUVVNfMF9F
UlIyNV9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweDEsIE5WRExBX0dFQ19FUlJTTElDRTBf
TUlTU0lPTkVSUl9TVEFUVVNfMF9FUlIyNV9TSElGVCkNCj4gKyNkZWZpbmUgTlZETEFfR0VD
X0VSUlNMSUNFMF9NSVNTSU9ORVJSX1NUQVRVU18wX0VSUjI2X1NISUZUCQkJX01LX1NISUZU
X0NPTlNUKDI2KQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UwX01JU1NJT05FUlJf
U1RBVFVTXzBfRVJSMjZfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHgxLCBOVkRMQV9HRUNf
RVJSU0xJQ0UwX01JU1NJT05FUlJfU1RBVFVTXzBfRVJSMjZfU0hJRlQpDQo+ICsjZGVmaW5l
IE5WRExBX0dFQ19FUlJTTElDRTBfTUlTU0lPTkVSUl9TVEFUVVNfMF9FUlIyN19TSElGVAkJ
CV9NS19TSElGVF9DT05TVCgyNykNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMF9N
SVNTSU9ORVJSX1NUQVRVU18wX0VSUjI3X0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4MSwg
TlZETEFfR0VDX0VSUlNMSUNFMF9NSVNTSU9ORVJSX1NUQVRVU18wX0VSUjI3X1NISUZUKQ0K
PiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UwX01JU1NJT05FUlJfU1RBVFVTXzBfRVJS
MjhfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMjgpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19F
UlJTTElDRTBfTUlTU0lPTkVSUl9TVEFUVVNfMF9FUlIyOF9GSUVMRAkJCV9NS19GSUVMRF9D
T05TVCgweDEsIE5WRExBX0dFQ19FUlJTTElDRTBfTUlTU0lPTkVSUl9TVEFUVVNfMF9FUlIy
OF9TSElGVCkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMF9NSVNTSU9ORVJSX1NU
QVRVU18wX0VSUjI5X1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDI5KQ0KPiArI2RlZmluZSBO
VkRMQV9HRUNfRVJSU0xJQ0UwX01JU1NJT05FUlJfU1RBVFVTXzBfRVJSMjlfRklFTEQJCQlf
TUtfRklFTERfQ09OU1QoMHgxLCBOVkRMQV9HRUNfRVJSU0xJQ0UwX01JU1NJT05FUlJfU1RB
VFVTXzBfRVJSMjlfU0hJRlQpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTUlT
U0lPTkVSUl9TVEFUVVNfMF9FUlIzMF9TSElGVAkJCV9NS19TSElGVF9DT05TVCgzMCkNCj4g
KyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMF9NSVNTSU9ORVJSX1NUQVRVU18wX0VSUjMw
X0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4MSwgTlZETEFfR0VDX0VSUlNMSUNFMF9NSVNT
SU9ORVJSX1NUQVRVU18wX0VSUjMwX1NISUZUKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJS
U0xJQ0UwX01JU1NJT05FUlJfU1RBVFVTXzBfRVJSMzFfU0hJRlQJCQlfTUtfU0hJRlRfQ09O
U1QoMzEpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTUlTU0lPTkVSUl9TVEFU
VVNfMF9FUlIzMV9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweDEsIE5WRExBX0dFQ19FUlJT
TElDRTBfTUlTU0lPTkVSUl9TVEFUVVNfMF9FUlIzMV9TSElGVCkNCj4gKw0KPiArDQo+ICsv
LyBSZWdpc3RlciBOVkRMQV9HRUNfRVJSU0xJQ0UwX01JU1NJT05FUlJfSU5KRUNUXzANCj4g
KyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMF9NSVNTSU9ORVJSX0lOSkVDVF8wCQkJX01L
X0FERFJfQ09OU1QoMHhlMDNjKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UwX01J
U1NJT05FUlJfSU5KRUNUXzBfRVJSMF9TSElGVAkJCV9NS19TSElGVF9DT05TVCgwKQ0KPiAr
I2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UwX01JU1NJT05FUlJfSU5KRUNUXzBfRVJSMF9G
SUVMRAkJCV9NS19GSUVMRF9DT05TVCgweDEsIE5WRExBX0dFQ19FUlJTTElDRTBfTUlTU0lP
TkVSUl9JTkpFQ1RfMF9FUlIwX1NISUZUKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJ
Q0UwX01JU1NJT05FUlJfSU5KRUNUXzBfRVJSMF9ESVNBQkxFCQkJX01LX0VOVU1fQ09OU1Qo
MHgwKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UwX01JU1NJT05FUlJfSU5KRUNU
XzBfRVJSMF9FTkFCTEUJCQlfTUtfRU5VTV9DT05TVCgweDEpDQo+ICsjZGVmaW5lIE5WRExB
X0dFQ19FUlJTTElDRTBfTUlTU0lPTkVSUl9JTkpFQ1RfMF9FUlIxX1NISUZUCQkJX01LX1NI
SUZUX0NPTlNUKDEpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTUlTU0lPTkVS
Ul9JTkpFQ1RfMF9FUlIxX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4MSwgTlZETEFfR0VD
X0VSUlNMSUNFMF9NSVNTSU9ORVJSX0lOSkVDVF8wX0VSUjFfU0hJRlQpDQo+ICsjZGVmaW5l
IE5WRExBX0dFQ19FUlJTTElDRTBfTUlTU0lPTkVSUl9JTkpFQ1RfMF9FUlIxX0RJU0FCTEUJ
CQlfTUtfRU5VTV9DT05TVCgweDApDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBf
TUlTU0lPTkVSUl9JTkpFQ1RfMF9FUlIxX0VOQUJMRQkJCV9NS19FTlVNX0NPTlNUKDB4MSkN
Cj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMF9NSVNTSU9ORVJSX0lOSkVDVF8wX0VS
UjJfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMikNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VS
UlNMSUNFMF9NSVNTSU9ORVJSX0lOSkVDVF8wX0VSUjJfRklFTEQJCQlfTUtfRklFTERfQ09O
U1QoMHgxLCBOVkRMQV9HRUNfRVJSU0xJQ0UwX01JU1NJT05FUlJfSU5KRUNUXzBfRVJSMl9T
SElGVCkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMF9NSVNTSU9ORVJSX0lOSkVD
VF8wX0VSUjJfRElTQUJMRQkJCV9NS19FTlVNX0NPTlNUKDB4MCkNCj4gKyNkZWZpbmUgTlZE
TEFfR0VDX0VSUlNMSUNFMF9NSVNTSU9ORVJSX0lOSkVDVF8wX0VSUjJfRU5BQkxFCQkJX01L
X0VOVU1fQ09OU1QoMHgxKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UwX01JU1NJ
T05FUlJfSU5KRUNUXzBfRVJSM19TSElGVAkJCV9NS19TSElGVF9DT05TVCgzKQ0KPiArI2Rl
ZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UwX01JU1NJT05FUlJfSU5KRUNUXzBfRVJSM19GSUVM
RAkJCV9NS19GSUVMRF9DT05TVCgweDEsIE5WRExBX0dFQ19FUlJTTElDRTBfTUlTU0lPTkVS
Ul9JTkpFQ1RfMF9FUlIzX1NISUZUKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0Uw
X01JU1NJT05FUlJfSU5KRUNUXzBfRVJSM19ESVNBQkxFCQkJX01LX0VOVU1fQ09OU1QoMHgw
KQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UwX01JU1NJT05FUlJfSU5KRUNUXzBf
RVJSM19FTkFCTEUJCQlfTUtfRU5VTV9DT05TVCgweDEpDQo+ICsjZGVmaW5lIE5WRExBX0dF
Q19FUlJTTElDRTBfTUlTU0lPTkVSUl9JTkpFQ1RfMF9FUlI0X1NISUZUCQkJX01LX1NISUZU
X0NPTlNUKDQpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTUlTU0lPTkVSUl9J
TkpFQ1RfMF9FUlI0X0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4MSwgTlZETEFfR0VDX0VS
UlNMSUNFMF9NSVNTSU9ORVJSX0lOSkVDVF8wX0VSUjRfU0hJRlQpDQo+ICsjZGVmaW5lIE5W
RExBX0dFQ19FUlJTTElDRTBfTUlTU0lPTkVSUl9JTkpFQ1RfMF9FUlI0X0RJU0FCTEUJCQlf
TUtfRU5VTV9DT05TVCgweDApDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTUlT
U0lPTkVSUl9JTkpFQ1RfMF9FUlI0X0VOQUJMRQkJCV9NS19FTlVNX0NPTlNUKDB4MSkNCj4g
KyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMF9NSVNTSU9ORVJSX0lOSkVDVF8wX0VSUjVf
U0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoNSkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNM
SUNFMF9NSVNTSU9ORVJSX0lOSkVDVF8wX0VSUjVfRklFTEQJCQlfTUtfRklFTERfQ09OU1Qo
MHgxLCBOVkRMQV9HRUNfRVJSU0xJQ0UwX01JU1NJT05FUlJfSU5KRUNUXzBfRVJSNV9TSElG
VCkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMF9NSVNTSU9ORVJSX0lOSkVDVF8w
X0VSUjVfRElTQUJMRQkJCV9NS19FTlVNX0NPTlNUKDB4MCkNCj4gKyNkZWZpbmUgTlZETEFf
R0VDX0VSUlNMSUNFMF9NSVNTSU9ORVJSX0lOSkVDVF8wX0VSUjVfRU5BQkxFCQkJX01LX0VO
VU1fQ09OU1QoMHgxKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UwX01JU1NJT05F
UlJfSU5KRUNUXzBfRVJSNl9TSElGVAkJCV9NS19TSElGVF9DT05TVCg2KQ0KPiArI2RlZmlu
ZSBOVkRMQV9HRUNfRVJSU0xJQ0UwX01JU1NJT05FUlJfSU5KRUNUXzBfRVJSNl9GSUVMRAkJ
CV9NS19GSUVMRF9DT05TVCgweDEsIE5WRExBX0dFQ19FUlJTTElDRTBfTUlTU0lPTkVSUl9J
TkpFQ1RfMF9FUlI2X1NISUZUKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UwX01J
U1NJT05FUlJfSU5KRUNUXzBfRVJSNl9ESVNBQkxFCQkJX01LX0VOVU1fQ09OU1QoMHgwKQ0K
PiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UwX01JU1NJT05FUlJfSU5KRUNUXzBfRVJS
Nl9FTkFCTEUJCQlfTUtfRU5VTV9DT05TVCgweDEpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19F
UlJTTElDRTBfTUlTU0lPTkVSUl9JTkpFQ1RfMF9FUlI3X1NISUZUCQkJX01LX1NISUZUX0NP
TlNUKDcpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTUlTU0lPTkVSUl9JTkpF
Q1RfMF9FUlI3X0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4MSwgTlZETEFfR0VDX0VSUlNM
SUNFMF9NSVNTSU9ORVJSX0lOSkVDVF8wX0VSUjdfU0hJRlQpDQo+ICsjZGVmaW5lIE5WRExB
X0dFQ19FUlJTTElDRTBfTUlTU0lPTkVSUl9JTkpFQ1RfMF9FUlI3X0RJU0FCTEUJCQlfTUtf
RU5VTV9DT05TVCgweDApDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTUlTU0lP
TkVSUl9JTkpFQ1RfMF9FUlI3X0VOQUJMRQkJCV9NS19FTlVNX0NPTlNUKDB4MSkNCj4gKyNk
ZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMF9NSVNTSU9ORVJSX0lOSkVDVF8wX0VSUjhfU0hJ
RlQJCQlfTUtfU0hJRlRfQ09OU1QoOCkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNF
MF9NSVNTSU9ORVJSX0lOSkVDVF8wX0VSUjhfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHgx
LCBOVkRMQV9HRUNfRVJSU0xJQ0UwX01JU1NJT05FUlJfSU5KRUNUXzBfRVJSOF9TSElGVCkN
Cj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMF9NSVNTSU9ORVJSX0lOSkVDVF8wX0VS
UjhfRElTQUJMRQkJCV9NS19FTlVNX0NPTlNUKDB4MCkNCj4gKyNkZWZpbmUgTlZETEFfR0VD
X0VSUlNMSUNFMF9NSVNTSU9ORVJSX0lOSkVDVF8wX0VSUjhfRU5BQkxFCQkJX01LX0VOVU1f
Q09OU1QoMHgxKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UwX01JU1NJT05FUlJf
SU5KRUNUXzBfRVJSMTVfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMTUpDQo+ICsjZGVmaW5l
IE5WRExBX0dFQ19FUlJTTElDRTBfTUlTU0lPTkVSUl9JTkpFQ1RfMF9FUlIxNV9GSUVMRAkJ
CV9NS19GSUVMRF9DT05TVCgweDEsIE5WRExBX0dFQ19FUlJTTElDRTBfTUlTU0lPTkVSUl9J
TkpFQ1RfMF9FUlIxNV9TSElGVCkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMF9N
SVNTSU9ORVJSX0lOSkVDVF8wX0VSUjE1X0RJU0FCTEUJCQlfTUtfRU5VTV9DT05TVCgweDAp
DQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTUlTU0lPTkVSUl9JTkpFQ1RfMF9F
UlIxNV9FTkFCTEUJCQlfTUtfRU5VTV9DT05TVCgweDEpDQo+ICsjZGVmaW5lIE5WRExBX0dF
Q19FUlJTTElDRTBfTUlTU0lPTkVSUl9JTkpFQ1RfMF9FUlIxNl9TSElGVAkJCV9NS19TSElG
VF9DT05TVCgxNikNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMF9NSVNTSU9ORVJS
X0lOSkVDVF8wX0VSUjE2X0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4MSwgTlZETEFfR0VD
X0VSUlNMSUNFMF9NSVNTSU9ORVJSX0lOSkVDVF8wX0VSUjE2X1NISUZUKQ0KPiArI2RlZmlu
ZSBOVkRMQV9HRUNfRVJSU0xJQ0UwX01JU1NJT05FUlJfSU5KRUNUXzBfRVJSMTZfRElTQUJM
RQkJCV9NS19FTlVNX0NPTlNUKDB4MCkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNF
MF9NSVNTSU9ORVJSX0lOSkVDVF8wX0VSUjE2X0VOQUJMRQkJCV9NS19FTlVNX0NPTlNUKDB4
MSkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMF9NSVNTSU9ORVJSX0lOSkVDVF8w
X0VSUjE3X1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDE3KQ0KPiArI2RlZmluZSBOVkRMQV9H
RUNfRVJSU0xJQ0UwX01JU1NJT05FUlJfSU5KRUNUXzBfRVJSMTdfRklFTEQJCQlfTUtfRklF
TERfQ09OU1QoMHgxLCBOVkRMQV9HRUNfRVJSU0xJQ0UwX01JU1NJT05FUlJfSU5KRUNUXzBf
RVJSMTdfU0hJRlQpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTUlTU0lPTkVS
Ul9JTkpFQ1RfMF9FUlIxN19ESVNBQkxFCQkJX01LX0VOVU1fQ09OU1QoMHgwKQ0KPiArI2Rl
ZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UwX01JU1NJT05FUlJfSU5KRUNUXzBfRVJSMTdfRU5B
QkxFCQkJX01LX0VOVU1fQ09OU1QoMHgxKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJ
Q0UwX01JU1NJT05FUlJfSU5KRUNUXzBfRVJSMThfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1Qo
MTgpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTUlTU0lPTkVSUl9JTkpFQ1Rf
MF9FUlIxOF9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweDEsIE5WRExBX0dFQ19FUlJTTElD
RTBfTUlTU0lPTkVSUl9JTkpFQ1RfMF9FUlIxOF9TSElGVCkNCj4gKyNkZWZpbmUgTlZETEFf
R0VDX0VSUlNMSUNFMF9NSVNTSU9ORVJSX0lOSkVDVF8wX0VSUjE4X0RJU0FCTEUJCQlfTUtf
RU5VTV9DT05TVCgweDApDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTUlTU0lP
TkVSUl9JTkpFQ1RfMF9FUlIxOF9FTkFCTEUJCQlfTUtfRU5VTV9DT05TVCgweDEpDQo+ICsj
ZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTUlTU0lPTkVSUl9JTkpFQ1RfMF9FUlIxOV9T
SElGVAkJCV9NS19TSElGVF9DT05TVCgxOSkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNM
SUNFMF9NSVNTSU9ORVJSX0lOSkVDVF8wX0VSUjE5X0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNU
KDB4MSwgTlZETEFfR0VDX0VSUlNMSUNFMF9NSVNTSU9ORVJSX0lOSkVDVF8wX0VSUjE5X1NI
SUZUKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UwX01JU1NJT05FUlJfSU5KRUNU
XzBfRVJSMTlfRElTQUJMRQkJCV9NS19FTlVNX0NPTlNUKDB4MCkNCj4gKyNkZWZpbmUgTlZE
TEFfR0VDX0VSUlNMSUNFMF9NSVNTSU9ORVJSX0lOSkVDVF8wX0VSUjE5X0VOQUJMRQkJCV9N
S19FTlVNX0NPTlNUKDB4MSkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMF9NSVNT
SU9ORVJSX0lOSkVDVF8wX0VSUjIwX1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDIwKQ0KPiAr
I2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UwX01JU1NJT05FUlJfSU5KRUNUXzBfRVJSMjBf
RklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHgxLCBOVkRMQV9HRUNfRVJSU0xJQ0UwX01JU1NJ
T05FUlJfSU5KRUNUXzBfRVJSMjBfU0hJRlQpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJT
TElDRTBfTUlTU0lPTkVSUl9JTkpFQ1RfMF9FUlIyMF9ESVNBQkxFCQkJX01LX0VOVU1fQ09O
U1QoMHgwKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UwX01JU1NJT05FUlJfSU5K
RUNUXzBfRVJSMjBfRU5BQkxFCQkJX01LX0VOVU1fQ09OU1QoMHgxKQ0KPiArI2RlZmluZSBO
VkRMQV9HRUNfRVJSU0xJQ0UwX01JU1NJT05FUlJfSU5KRUNUXzBfRVJSMjFfU0hJRlQJCQlf
TUtfU0hJRlRfQ09OU1QoMjEpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTUlT
U0lPTkVSUl9JTkpFQ1RfMF9FUlIyMV9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweDEsIE5W
RExBX0dFQ19FUlJTTElDRTBfTUlTU0lPTkVSUl9JTkpFQ1RfMF9FUlIyMV9TSElGVCkNCj4g
KyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMF9NSVNTSU9ORVJSX0lOSkVDVF8wX0VSUjIx
X0RJU0FCTEUJCQlfTUtfRU5VTV9DT05TVCgweDApDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19F
UlJTTElDRTBfTUlTU0lPTkVSUl9JTkpFQ1RfMF9FUlIyMV9FTkFCTEUJCQlfTUtfRU5VTV9D
T05TVCgweDEpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTUlTU0lPTkVSUl9J
TkpFQ1RfMF9FUlIyMl9TSElGVAkJCV9NS19TSElGVF9DT05TVCgyMikNCj4gKyNkZWZpbmUg
TlZETEFfR0VDX0VSUlNMSUNFMF9NSVNTSU9ORVJSX0lOSkVDVF8wX0VSUjIyX0ZJRUxECQkJ
X01LX0ZJRUxEX0NPTlNUKDB4MSwgTlZETEFfR0VDX0VSUlNMSUNFMF9NSVNTSU9ORVJSX0lO
SkVDVF8wX0VSUjIyX1NISUZUKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UwX01J
U1NJT05FUlJfSU5KRUNUXzBfRVJSMjJfRElTQUJMRQkJCV9NS19FTlVNX0NPTlNUKDB4MCkN
Cj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMF9NSVNTSU9ORVJSX0lOSkVDVF8wX0VS
UjIyX0VOQUJMRQkJCV9NS19FTlVNX0NPTlNUKDB4MSkNCj4gKyNkZWZpbmUgTlZETEFfR0VD
X0VSUlNMSUNFMF9NSVNTSU9ORVJSX0lOSkVDVF8wX0VSUjIzX1NISUZUCQkJX01LX1NISUZU
X0NPTlNUKDIzKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UwX01JU1NJT05FUlJf
SU5KRUNUXzBfRVJSMjNfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHgxLCBOVkRMQV9HRUNf
RVJSU0xJQ0UwX01JU1NJT05FUlJfSU5KRUNUXzBfRVJSMjNfU0hJRlQpDQo+ICsjZGVmaW5l
IE5WRExBX0dFQ19FUlJTTElDRTBfTUlTU0lPTkVSUl9JTkpFQ1RfMF9FUlIyM19ESVNBQkxF
CQkJX01LX0VOVU1fQ09OU1QoMHgwKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0Uw
X01JU1NJT05FUlJfSU5KRUNUXzBfRVJSMjNfRU5BQkxFCQkJX01LX0VOVU1fQ09OU1QoMHgx
KQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UwX01JU1NJT05FUlJfSU5KRUNUXzBf
RVJSMjRfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMjQpDQo+ICsjZGVmaW5lIE5WRExBX0dF
Q19FUlJTTElDRTBfTUlTU0lPTkVSUl9JTkpFQ1RfMF9FUlIyNF9GSUVMRAkJCV9NS19GSUVM
RF9DT05TVCgweDEsIE5WRExBX0dFQ19FUlJTTElDRTBfTUlTU0lPTkVSUl9JTkpFQ1RfMF9F
UlIyNF9TSElGVCkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMF9NSVNTSU9ORVJS
X0lOSkVDVF8wX0VSUjI0X0RJU0FCTEUJCQlfTUtfRU5VTV9DT05TVCgweDApDQo+ICsjZGVm
aW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTUlTU0lPTkVSUl9JTkpFQ1RfMF9FUlIyNF9FTkFC
TEUJCQlfTUtfRU5VTV9DT05TVCgweDEpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElD
RTBfTUlTU0lPTkVSUl9JTkpFQ1RfMF9FUlIyNV9TSElGVAkJCV9NS19TSElGVF9DT05TVCgy
NSkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMF9NSVNTSU9ORVJSX0lOSkVDVF8w
X0VSUjI1X0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4MSwgTlZETEFfR0VDX0VSUlNMSUNF
MF9NSVNTSU9ORVJSX0lOSkVDVF8wX0VSUjI1X1NISUZUKQ0KPiArI2RlZmluZSBOVkRMQV9H
RUNfRVJSU0xJQ0UwX01JU1NJT05FUlJfSU5KRUNUXzBfRVJSMjVfRElTQUJMRQkJCV9NS19F
TlVNX0NPTlNUKDB4MCkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMF9NSVNTSU9O
RVJSX0lOSkVDVF8wX0VSUjI1X0VOQUJMRQkJCV9NS19FTlVNX0NPTlNUKDB4MSkNCj4gKyNk
ZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMF9NSVNTSU9ORVJSX0lOSkVDVF8wX0VSUjI2X1NI
SUZUCQkJX01LX1NISUZUX0NPTlNUKDI2KQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJ
Q0UwX01JU1NJT05FUlJfSU5KRUNUXzBfRVJSMjZfRklFTEQJCQlfTUtfRklFTERfQ09OU1Qo
MHgxLCBOVkRMQV9HRUNfRVJSU0xJQ0UwX01JU1NJT05FUlJfSU5KRUNUXzBfRVJSMjZfU0hJ
RlQpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTUlTU0lPTkVSUl9JTkpFQ1Rf
MF9FUlIyNl9ESVNBQkxFCQkJX01LX0VOVU1fQ09OU1QoMHgwKQ0KPiArI2RlZmluZSBOVkRM
QV9HRUNfRVJSU0xJQ0UwX01JU1NJT05FUlJfSU5KRUNUXzBfRVJSMjZfRU5BQkxFCQkJX01L
X0VOVU1fQ09OU1QoMHgxKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UwX01JU1NJ
T05FUlJfSU5KRUNUXzBfRVJSMjdfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMjcpDQo+ICsj
ZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTUlTU0lPTkVSUl9JTkpFQ1RfMF9FUlIyN19G
SUVMRAkJCV9NS19GSUVMRF9DT05TVCgweDEsIE5WRExBX0dFQ19FUlJTTElDRTBfTUlTU0lP
TkVSUl9JTkpFQ1RfMF9FUlIyN19TSElGVCkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNM
SUNFMF9NSVNTSU9ORVJSX0lOSkVDVF8wX0VSUjI3X0RJU0FCTEUJCQlfTUtfRU5VTV9DT05T
VCgweDApDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTUlTU0lPTkVSUl9JTkpF
Q1RfMF9FUlIyN19FTkFCTEUJCQlfTUtfRU5VTV9DT05TVCgweDEpDQo+ICsjZGVmaW5lIE5W
RExBX0dFQ19FUlJTTElDRTBfTUlTU0lPTkVSUl9JTkpFQ1RfMF9FUlIyOF9TSElGVAkJCV9N
S19TSElGVF9DT05TVCgyOCkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMF9NSVNT
SU9ORVJSX0lOSkVDVF8wX0VSUjI4X0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4MSwgTlZE
TEFfR0VDX0VSUlNMSUNFMF9NSVNTSU9ORVJSX0lOSkVDVF8wX0VSUjI4X1NISUZUKQ0KPiAr
I2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UwX01JU1NJT05FUlJfSU5KRUNUXzBfRVJSMjhf
RElTQUJMRQkJCV9NS19FTlVNX0NPTlNUKDB4MCkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VS
UlNMSUNFMF9NSVNTSU9ORVJSX0lOSkVDVF8wX0VSUjI4X0VOQUJMRQkJCV9NS19FTlVNX0NP
TlNUKDB4MSkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMF9NSVNTSU9ORVJSX0lO
SkVDVF8wX0VSUjI5X1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDI5KQ0KPiArI2RlZmluZSBO
VkRMQV9HRUNfRVJSU0xJQ0UwX01JU1NJT05FUlJfSU5KRUNUXzBfRVJSMjlfRklFTEQJCQlf
TUtfRklFTERfQ09OU1QoMHgxLCBOVkRMQV9HRUNfRVJSU0xJQ0UwX01JU1NJT05FUlJfSU5K
RUNUXzBfRVJSMjlfU0hJRlQpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTUlT
U0lPTkVSUl9JTkpFQ1RfMF9FUlIyOV9ESVNBQkxFCQkJX01LX0VOVU1fQ09OU1QoMHgwKQ0K
PiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UwX01JU1NJT05FUlJfSU5KRUNUXzBfRVJS
MjlfRU5BQkxFCQkJX01LX0VOVU1fQ09OU1QoMHgxKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNf
RVJSU0xJQ0UwX01JU1NJT05FUlJfSU5KRUNUXzBfRVJSMzBfU0hJRlQJCQlfTUtfU0hJRlRf
Q09OU1QoMzApDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTUlTU0lPTkVSUl9J
TkpFQ1RfMF9FUlIzMF9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweDEsIE5WRExBX0dFQ19F
UlJTTElDRTBfTUlTU0lPTkVSUl9JTkpFQ1RfMF9FUlIzMF9TSElGVCkNCj4gKyNkZWZpbmUg
TlZETEFfR0VDX0VSUlNMSUNFMF9NSVNTSU9ORVJSX0lOSkVDVF8wX0VSUjMwX0RJU0FCTEUJ
CQlfTUtfRU5VTV9DT05TVCgweDApDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBf
TUlTU0lPTkVSUl9JTkpFQ1RfMF9FUlIzMF9FTkFCTEUJCQlfTUtfRU5VTV9DT05TVCgweDEp
DQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTUlTU0lPTkVSUl9JTkpFQ1RfMF9F
UlIzMV9TSElGVAkJCV9NS19TSElGVF9DT05TVCgzMSkNCj4gKyNkZWZpbmUgTlZETEFfR0VD
X0VSUlNMSUNFMF9NSVNTSU9ORVJSX0lOSkVDVF8wX0VSUjMxX0ZJRUxECQkJX01LX0ZJRUxE
X0NPTlNUKDB4MSwgTlZETEFfR0VDX0VSUlNMSUNFMF9NSVNTSU9ORVJSX0lOSkVDVF8wX0VS
UjMxX1NISUZUKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UwX01JU1NJT05FUlJf
SU5KRUNUXzBfRVJSMzFfRElTQUJMRQkJCV9NS19FTlVNX0NPTlNUKDB4MCkNCj4gKyNkZWZp
bmUgTlZETEFfR0VDX0VSUlNMSUNFMF9NSVNTSU9ORVJSX0lOSkVDVF8wX0VSUjMxX0VOQUJM
RQkJCV9NS19FTlVNX0NPTlNUKDB4MSkNCj4gKw0KPiArDQo+ICsvLyBSZWdpc3RlciBOVkRM
QV9HRUNfRVJSU0xJQ0UwX0xBVEVOVEVSUl9FTkFCTEVfMA0KPiArI2RlZmluZSBOVkRMQV9H
RUNfRVJSU0xJQ0UwX0xBVEVOVEVSUl9FTkFCTEVfMAkJCV9NS19BRERSX0NPTlNUKDB4ZTA0
MCkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMF9MQVRFTlRFUlJfRU5BQkxFXzBf
RVJSMF9TSElGVAkJCV9NS19TSElGVF9DT05TVCgwKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNf
RVJSU0xJQ0UwX0xBVEVOVEVSUl9FTkFCTEVfMF9FUlIwX0ZJRUxECQkJX01LX0ZJRUxEX0NP
TlNUKDB4MSwgTlZETEFfR0VDX0VSUlNMSUNFMF9MQVRFTlRFUlJfRU5BQkxFXzBfRVJSMF9T
SElGVCkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMF9MQVRFTlRFUlJfRU5BQkxF
XzBfRVJSMF9ESVNBQkxFCQkJX01LX0VOVU1fQ09OU1QoMHgwKQ0KPiArI2RlZmluZSBOVkRM
QV9HRUNfRVJSU0xJQ0UwX0xBVEVOVEVSUl9FTkFCTEVfMF9FUlIwX0VOQUJMRQkJCV9NS19F
TlVNX0NPTlNUKDB4MSkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMF9MQVRFTlRF
UlJfRU5BQkxFXzBfRVJSMV9TSElGVAkJCV9NS19TSElGVF9DT05TVCgxKQ0KPiArI2RlZmlu
ZSBOVkRMQV9HRUNfRVJSU0xJQ0UwX0xBVEVOVEVSUl9FTkFCTEVfMF9FUlIxX0ZJRUxECQkJ
X01LX0ZJRUxEX0NPTlNUKDB4MSwgTlZETEFfR0VDX0VSUlNMSUNFMF9MQVRFTlRFUlJfRU5B
QkxFXzBfRVJSMV9TSElGVCkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMF9MQVRF
TlRFUlJfRU5BQkxFXzBfRVJSMV9ESVNBQkxFCQkJX01LX0VOVU1fQ09OU1QoMHgwKQ0KPiAr
I2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UwX0xBVEVOVEVSUl9FTkFCTEVfMF9FUlIxX0VO
QUJMRQkJCV9NS19FTlVNX0NPTlNUKDB4MSkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNM
SUNFMF9MQVRFTlRFUlJfRU5BQkxFXzBfRVJSMl9TSElGVAkJCV9NS19TSElGVF9DT05TVCgy
KQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UwX0xBVEVOVEVSUl9FTkFCTEVfMF9F
UlIyX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4MSwgTlZETEFfR0VDX0VSUlNMSUNFMF9M
QVRFTlRFUlJfRU5BQkxFXzBfRVJSMl9TSElGVCkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VS
UlNMSUNFMF9MQVRFTlRFUlJfRU5BQkxFXzBfRVJSMl9ESVNBQkxFCQkJX01LX0VOVU1fQ09O
U1QoMHgwKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UwX0xBVEVOVEVSUl9FTkFC
TEVfMF9FUlIyX0VOQUJMRQkJCV9NS19FTlVNX0NPTlNUKDB4MSkNCj4gKyNkZWZpbmUgTlZE
TEFfR0VDX0VSUlNMSUNFMF9MQVRFTlRFUlJfRU5BQkxFXzBfRVJSM19TSElGVAkJCV9NS19T
SElGVF9DT05TVCgzKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UwX0xBVEVOVEVS
Ul9FTkFCTEVfMF9FUlIzX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4MSwgTlZETEFfR0VD
X0VSUlNMSUNFMF9MQVRFTlRFUlJfRU5BQkxFXzBfRVJSM19TSElGVCkNCj4gKyNkZWZpbmUg
TlZETEFfR0VDX0VSUlNMSUNFMF9MQVRFTlRFUlJfRU5BQkxFXzBfRVJSM19ESVNBQkxFCQkJ
X01LX0VOVU1fQ09OU1QoMHgwKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UwX0xB
VEVOVEVSUl9FTkFCTEVfMF9FUlIzX0VOQUJMRQkJCV9NS19FTlVNX0NPTlNUKDB4MSkNCj4g
KyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMF9MQVRFTlRFUlJfRU5BQkxFXzBfRVJSNF9T
SElGVAkJCV9NS19TSElGVF9DT05TVCg0KQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJ
Q0UwX0xBVEVOVEVSUl9FTkFCTEVfMF9FUlI0X0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4
MSwgTlZETEFfR0VDX0VSUlNMSUNFMF9MQVRFTlRFUlJfRU5BQkxFXzBfRVJSNF9TSElGVCkN
Cj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMF9MQVRFTlRFUlJfRU5BQkxFXzBfRVJS
NF9ESVNBQkxFCQkJX01LX0VOVU1fQ09OU1QoMHgwKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNf
RVJSU0xJQ0UwX0xBVEVOVEVSUl9FTkFCTEVfMF9FUlI0X0VOQUJMRQkJCV9NS19FTlVNX0NP
TlNUKDB4MSkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMF9MQVRFTlRFUlJfRU5B
QkxFXzBfRVJSNV9TSElGVAkJCV9NS19TSElGVF9DT05TVCg1KQ0KPiArI2RlZmluZSBOVkRM
QV9HRUNfRVJSU0xJQ0UwX0xBVEVOVEVSUl9FTkFCTEVfMF9FUlI1X0ZJRUxECQkJX01LX0ZJ
RUxEX0NPTlNUKDB4MSwgTlZETEFfR0VDX0VSUlNMSUNFMF9MQVRFTlRFUlJfRU5BQkxFXzBf
RVJSNV9TSElGVCkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMF9MQVRFTlRFUlJf
RU5BQkxFXzBfRVJSNV9ESVNBQkxFCQkJX01LX0VOVU1fQ09OU1QoMHgwKQ0KPiArI2RlZmlu
ZSBOVkRMQV9HRUNfRVJSU0xJQ0UwX0xBVEVOVEVSUl9FTkFCTEVfMF9FUlI1X0VOQUJMRQkJ
CV9NS19FTlVNX0NPTlNUKDB4MSkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMF9M
QVRFTlRFUlJfRU5BQkxFXzBfRVJSNl9TSElGVAkJCV9NS19TSElGVF9DT05TVCg2KQ0KPiAr
I2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UwX0xBVEVOVEVSUl9FTkFCTEVfMF9FUlI2X0ZJ
RUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4MSwgTlZETEFfR0VDX0VSUlNMSUNFMF9MQVRFTlRF
UlJfRU5BQkxFXzBfRVJSNl9TSElGVCkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNF
MF9MQVRFTlRFUlJfRU5BQkxFXzBfRVJSNl9ESVNBQkxFCQkJX01LX0VOVU1fQ09OU1QoMHgw
KQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UwX0xBVEVOVEVSUl9FTkFCTEVfMF9F
UlI2X0VOQUJMRQkJCV9NS19FTlVNX0NPTlNUKDB4MSkNCj4gKyNkZWZpbmUgTlZETEFfR0VD
X0VSUlNMSUNFMF9MQVRFTlRFUlJfRU5BQkxFXzBfRVJSN19TSElGVAkJCV9NS19TSElGVF9D
T05TVCg3KQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UwX0xBVEVOVEVSUl9FTkFC
TEVfMF9FUlI3X0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4MSwgTlZETEFfR0VDX0VSUlNM
SUNFMF9MQVRFTlRFUlJfRU5BQkxFXzBfRVJSN19TSElGVCkNCj4gKyNkZWZpbmUgTlZETEFf
R0VDX0VSUlNMSUNFMF9MQVRFTlRFUlJfRU5BQkxFXzBfRVJSN19ESVNBQkxFCQkJX01LX0VO
VU1fQ09OU1QoMHgwKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UwX0xBVEVOVEVS
Ul9FTkFCTEVfMF9FUlI3X0VOQUJMRQkJCV9NS19FTlVNX0NPTlNUKDB4MSkNCj4gKyNkZWZp
bmUgTlZETEFfR0VDX0VSUlNMSUNFMF9MQVRFTlRFUlJfRU5BQkxFXzBfRVJSOF9TSElGVAkJ
CV9NS19TSElGVF9DT05TVCg4KQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UwX0xB
VEVOVEVSUl9FTkFCTEVfMF9FUlI4X0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4MSwgTlZE
TEFfR0VDX0VSUlNMSUNFMF9MQVRFTlRFUlJfRU5BQkxFXzBfRVJSOF9TSElGVCkNCj4gKyNk
ZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMF9MQVRFTlRFUlJfRU5BQkxFXzBfRVJSOF9ESVNB
QkxFCQkJX01LX0VOVU1fQ09OU1QoMHgwKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJ
Q0UwX0xBVEVOVEVSUl9FTkFCTEVfMF9FUlI4X0VOQUJMRQkJCV9NS19FTlVNX0NPTlNUKDB4
MSkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMF9MQVRFTlRFUlJfRU5BQkxFXzBf
RVJSOV9TSElGVAkJCV9NS19TSElGVF9DT05TVCg5KQ0KPiArI2RlZmluZSBOVkRMQV9HRUNf
RVJSU0xJQ0UwX0xBVEVOVEVSUl9FTkFCTEVfMF9FUlI5X0ZJRUxECQkJX01LX0ZJRUxEX0NP
TlNUKDB4MSwgTlZETEFfR0VDX0VSUlNMSUNFMF9MQVRFTlRFUlJfRU5BQkxFXzBfRVJSOV9T
SElGVCkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMF9MQVRFTlRFUlJfRU5BQkxF
XzBfRVJSOV9ESVNBQkxFCQkJX01LX0VOVU1fQ09OU1QoMHgwKQ0KPiArI2RlZmluZSBOVkRM
QV9HRUNfRVJSU0xJQ0UwX0xBVEVOVEVSUl9FTkFCTEVfMF9FUlI5X0VOQUJMRQkJCV9NS19F
TlVNX0NPTlNUKDB4MSkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMF9MQVRFTlRF
UlJfRU5BQkxFXzBfRVJSMTBfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMTApDQo+ICsjZGVm
aW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTEFURU5URVJSX0VOQUJMRV8wX0VSUjEwX0ZJRUxE
CQkJX01LX0ZJRUxEX0NPTlNUKDB4MSwgTlZETEFfR0VDX0VSUlNMSUNFMF9MQVRFTlRFUlJf
RU5BQkxFXzBfRVJSMTBfU0hJRlQpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBf
TEFURU5URVJSX0VOQUJMRV8wX0VSUjEwX0RJU0FCTEUJCQlfTUtfRU5VTV9DT05TVCgweDAp
DQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTEFURU5URVJSX0VOQUJMRV8wX0VS
UjEwX0VOQUJMRQkJCV9NS19FTlVNX0NPTlNUKDB4MSkNCj4gKyNkZWZpbmUgTlZETEFfR0VD
X0VSUlNMSUNFMF9MQVRFTlRFUlJfRU5BQkxFXzBfRVJSMTFfU0hJRlQJCQlfTUtfU0hJRlRf
Q09OU1QoMTEpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTEFURU5URVJSX0VO
QUJMRV8wX0VSUjExX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4MSwgTlZETEFfR0VDX0VS
UlNMSUNFMF9MQVRFTlRFUlJfRU5BQkxFXzBfRVJSMTFfU0hJRlQpDQo+ICsjZGVmaW5lIE5W
RExBX0dFQ19FUlJTTElDRTBfTEFURU5URVJSX0VOQUJMRV8wX0VSUjExX0RJU0FCTEUJCQlf
TUtfRU5VTV9DT05TVCgweDApDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTEFU
RU5URVJSX0VOQUJMRV8wX0VSUjExX0VOQUJMRQkJCV9NS19FTlVNX0NPTlNUKDB4MSkNCj4g
KyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMF9MQVRFTlRFUlJfRU5BQkxFXzBfRVJSMTJf
U0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMTIpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJT
TElDRTBfTEFURU5URVJSX0VOQUJMRV8wX0VSUjEyX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNU
KDB4MSwgTlZETEFfR0VDX0VSUlNMSUNFMF9MQVRFTlRFUlJfRU5BQkxFXzBfRVJSMTJfU0hJ
RlQpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTEFURU5URVJSX0VOQUJMRV8w
X0VSUjEyX0RJU0FCTEUJCQlfTUtfRU5VTV9DT05TVCgweDApDQo+ICsjZGVmaW5lIE5WRExB
X0dFQ19FUlJTTElDRTBfTEFURU5URVJSX0VOQUJMRV8wX0VSUjEyX0VOQUJMRQkJCV9NS19F
TlVNX0NPTlNUKDB4MSkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMF9MQVRFTlRF
UlJfRU5BQkxFXzBfRVJSMTNfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMTMpDQo+ICsjZGVm
aW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTEFURU5URVJSX0VOQUJMRV8wX0VSUjEzX0ZJRUxE
CQkJX01LX0ZJRUxEX0NPTlNUKDB4MSwgTlZETEFfR0VDX0VSUlNMSUNFMF9MQVRFTlRFUlJf
RU5BQkxFXzBfRVJSMTNfU0hJRlQpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBf
TEFURU5URVJSX0VOQUJMRV8wX0VSUjEzX0RJU0FCTEUJCQlfTUtfRU5VTV9DT05TVCgweDAp
DQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTEFURU5URVJSX0VOQUJMRV8wX0VS
UjEzX0VOQUJMRQkJCV9NS19FTlVNX0NPTlNUKDB4MSkNCj4gKyNkZWZpbmUgTlZETEFfR0VD
X0VSUlNMSUNFMF9MQVRFTlRFUlJfRU5BQkxFXzBfRVJSMTRfU0hJRlQJCQlfTUtfU0hJRlRf
Q09OU1QoMTQpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTEFURU5URVJSX0VO
QUJMRV8wX0VSUjE0X0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4MSwgTlZETEFfR0VDX0VS
UlNMSUNFMF9MQVRFTlRFUlJfRU5BQkxFXzBfRVJSMTRfU0hJRlQpDQo+ICsjZGVmaW5lIE5W
RExBX0dFQ19FUlJTTElDRTBfTEFURU5URVJSX0VOQUJMRV8wX0VSUjE0X0RJU0FCTEUJCQlf
TUtfRU5VTV9DT05TVCgweDApDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTEFU
RU5URVJSX0VOQUJMRV8wX0VSUjE0X0VOQUJMRQkJCV9NS19FTlVNX0NPTlNUKDB4MSkNCj4g
KyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMF9MQVRFTlRFUlJfRU5BQkxFXzBfRVJSMTVf
U0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMTUpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJT
TElDRTBfTEFURU5URVJSX0VOQUJMRV8wX0VSUjE1X0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNU
KDB4MSwgTlZETEFfR0VDX0VSUlNMSUNFMF9MQVRFTlRFUlJfRU5BQkxFXzBfRVJSMTVfU0hJ
RlQpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTEFURU5URVJSX0VOQUJMRV8w
X0VSUjE1X0RJU0FCTEUJCQlfTUtfRU5VTV9DT05TVCgweDApDQo+ICsjZGVmaW5lIE5WRExB
X0dFQ19FUlJTTElDRTBfTEFURU5URVJSX0VOQUJMRV8wX0VSUjE1X0VOQUJMRQkJCV9NS19F
TlVNX0NPTlNUKDB4MSkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMF9MQVRFTlRF
UlJfRU5BQkxFXzBfRVJSMTZfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMTYpDQo+ICsjZGVm
aW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTEFURU5URVJSX0VOQUJMRV8wX0VSUjE2X0ZJRUxE
CQkJX01LX0ZJRUxEX0NPTlNUKDB4MSwgTlZETEFfR0VDX0VSUlNMSUNFMF9MQVRFTlRFUlJf
RU5BQkxFXzBfRVJSMTZfU0hJRlQpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBf
TEFURU5URVJSX0VOQUJMRV8wX0VSUjE2X0RJU0FCTEUJCQlfTUtfRU5VTV9DT05TVCgweDAp
DQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTEFURU5URVJSX0VOQUJMRV8wX0VS
UjE2X0VOQUJMRQkJCV9NS19FTlVNX0NPTlNUKDB4MSkNCj4gKyNkZWZpbmUgTlZETEFfR0VD
X0VSUlNMSUNFMF9MQVRFTlRFUlJfRU5BQkxFXzBfRVJSMTdfU0hJRlQJCQlfTUtfU0hJRlRf
Q09OU1QoMTcpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTEFURU5URVJSX0VO
QUJMRV8wX0VSUjE3X0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4MSwgTlZETEFfR0VDX0VS
UlNMSUNFMF9MQVRFTlRFUlJfRU5BQkxFXzBfRVJSMTdfU0hJRlQpDQo+ICsjZGVmaW5lIE5W
RExBX0dFQ19FUlJTTElDRTBfTEFURU5URVJSX0VOQUJMRV8wX0VSUjE3X0RJU0FCTEUJCQlf
TUtfRU5VTV9DT05TVCgweDApDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTEFU
RU5URVJSX0VOQUJMRV8wX0VSUjE3X0VOQUJMRQkJCV9NS19FTlVNX0NPTlNUKDB4MSkNCj4g
KyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMF9MQVRFTlRFUlJfRU5BQkxFXzBfRVJSMThf
U0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMTgpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJT
TElDRTBfTEFURU5URVJSX0VOQUJMRV8wX0VSUjE4X0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNU
KDB4MSwgTlZETEFfR0VDX0VSUlNMSUNFMF9MQVRFTlRFUlJfRU5BQkxFXzBfRVJSMThfU0hJ
RlQpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTEFURU5URVJSX0VOQUJMRV8w
X0VSUjE4X0RJU0FCTEUJCQlfTUtfRU5VTV9DT05TVCgweDApDQo+ICsjZGVmaW5lIE5WRExB
X0dFQ19FUlJTTElDRTBfTEFURU5URVJSX0VOQUJMRV8wX0VSUjE4X0VOQUJMRQkJCV9NS19F
TlVNX0NPTlNUKDB4MSkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMF9MQVRFTlRF
UlJfRU5BQkxFXzBfRVJSMTlfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMTkpDQo+ICsjZGVm
aW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTEFURU5URVJSX0VOQUJMRV8wX0VSUjE5X0ZJRUxE
CQkJX01LX0ZJRUxEX0NPTlNUKDB4MSwgTlZETEFfR0VDX0VSUlNMSUNFMF9MQVRFTlRFUlJf
RU5BQkxFXzBfRVJSMTlfU0hJRlQpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBf
TEFURU5URVJSX0VOQUJMRV8wX0VSUjE5X0RJU0FCTEUJCQlfTUtfRU5VTV9DT05TVCgweDAp
DQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTEFURU5URVJSX0VOQUJMRV8wX0VS
UjE5X0VOQUJMRQkJCV9NS19FTlVNX0NPTlNUKDB4MSkNCj4gKyNkZWZpbmUgTlZETEFfR0VD
X0VSUlNMSUNFMF9MQVRFTlRFUlJfRU5BQkxFXzBfRVJSMjBfU0hJRlQJCQlfTUtfU0hJRlRf
Q09OU1QoMjApDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTEFURU5URVJSX0VO
QUJMRV8wX0VSUjIwX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4MSwgTlZETEFfR0VDX0VS
UlNMSUNFMF9MQVRFTlRFUlJfRU5BQkxFXzBfRVJSMjBfU0hJRlQpDQo+ICsjZGVmaW5lIE5W
RExBX0dFQ19FUlJTTElDRTBfTEFURU5URVJSX0VOQUJMRV8wX0VSUjIwX0RJU0FCTEUJCQlf
TUtfRU5VTV9DT05TVCgweDApDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTEFU
RU5URVJSX0VOQUJMRV8wX0VSUjIwX0VOQUJMRQkJCV9NS19FTlVNX0NPTlNUKDB4MSkNCj4g
KyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMF9MQVRFTlRFUlJfRU5BQkxFXzBfRVJSMjFf
U0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMjEpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJT
TElDRTBfTEFURU5URVJSX0VOQUJMRV8wX0VSUjIxX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNU
KDB4MSwgTlZETEFfR0VDX0VSUlNMSUNFMF9MQVRFTlRFUlJfRU5BQkxFXzBfRVJSMjFfU0hJ
RlQpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTEFURU5URVJSX0VOQUJMRV8w
X0VSUjIxX0RJU0FCTEUJCQlfTUtfRU5VTV9DT05TVCgweDApDQo+ICsjZGVmaW5lIE5WRExB
X0dFQ19FUlJTTElDRTBfTEFURU5URVJSX0VOQUJMRV8wX0VSUjIxX0VOQUJMRQkJCV9NS19F
TlVNX0NPTlNUKDB4MSkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMF9MQVRFTlRF
UlJfRU5BQkxFXzBfRVJSMjJfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMjIpDQo+ICsjZGVm
aW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTEFURU5URVJSX0VOQUJMRV8wX0VSUjIyX0ZJRUxE
CQkJX01LX0ZJRUxEX0NPTlNUKDB4MSwgTlZETEFfR0VDX0VSUlNMSUNFMF9MQVRFTlRFUlJf
RU5BQkxFXzBfRVJSMjJfU0hJRlQpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBf
TEFURU5URVJSX0VOQUJMRV8wX0VSUjIyX0RJU0FCTEUJCQlfTUtfRU5VTV9DT05TVCgweDAp
DQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTEFURU5URVJSX0VOQUJMRV8wX0VS
UjIyX0VOQUJMRQkJCV9NS19FTlVNX0NPTlNUKDB4MSkNCj4gKyNkZWZpbmUgTlZETEFfR0VD
X0VSUlNMSUNFMF9MQVRFTlRFUlJfRU5BQkxFXzBfRVJSMjNfU0hJRlQJCQlfTUtfU0hJRlRf
Q09OU1QoMjMpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTEFURU5URVJSX0VO
QUJMRV8wX0VSUjIzX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4MSwgTlZETEFfR0VDX0VS
UlNMSUNFMF9MQVRFTlRFUlJfRU5BQkxFXzBfRVJSMjNfU0hJRlQpDQo+ICsjZGVmaW5lIE5W
RExBX0dFQ19FUlJTTElDRTBfTEFURU5URVJSX0VOQUJMRV8wX0VSUjIzX0RJU0FCTEUJCQlf
TUtfRU5VTV9DT05TVCgweDApDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTEFU
RU5URVJSX0VOQUJMRV8wX0VSUjIzX0VOQUJMRQkJCV9NS19FTlVNX0NPTlNUKDB4MSkNCj4g
KyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMF9MQVRFTlRFUlJfRU5BQkxFXzBfRVJSMjRf
U0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMjQpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJT
TElDRTBfTEFURU5URVJSX0VOQUJMRV8wX0VSUjI0X0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNU
KDB4MSwgTlZETEFfR0VDX0VSUlNMSUNFMF9MQVRFTlRFUlJfRU5BQkxFXzBfRVJSMjRfU0hJ
RlQpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTEFURU5URVJSX0VOQUJMRV8w
X0VSUjI0X0RJU0FCTEUJCQlfTUtfRU5VTV9DT05TVCgweDApDQo+ICsjZGVmaW5lIE5WRExB
X0dFQ19FUlJTTElDRTBfTEFURU5URVJSX0VOQUJMRV8wX0VSUjI0X0VOQUJMRQkJCV9NS19F
TlVNX0NPTlNUKDB4MSkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMF9MQVRFTlRF
UlJfRU5BQkxFXzBfRVJSMjVfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMjUpDQo+ICsjZGVm
aW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTEFURU5URVJSX0VOQUJMRV8wX0VSUjI1X0ZJRUxE
CQkJX01LX0ZJRUxEX0NPTlNUKDB4MSwgTlZETEFfR0VDX0VSUlNMSUNFMF9MQVRFTlRFUlJf
RU5BQkxFXzBfRVJSMjVfU0hJRlQpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBf
TEFURU5URVJSX0VOQUJMRV8wX0VSUjI1X0RJU0FCTEUJCQlfTUtfRU5VTV9DT05TVCgweDAp
DQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTEFURU5URVJSX0VOQUJMRV8wX0VS
UjI1X0VOQUJMRQkJCV9NS19FTlVNX0NPTlNUKDB4MSkNCj4gKyNkZWZpbmUgTlZETEFfR0VD
X0VSUlNMSUNFMF9MQVRFTlRFUlJfRU5BQkxFXzBfRVJSMjZfU0hJRlQJCQlfTUtfU0hJRlRf
Q09OU1QoMjYpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTEFURU5URVJSX0VO
QUJMRV8wX0VSUjI2X0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4MSwgTlZETEFfR0VDX0VS
UlNMSUNFMF9MQVRFTlRFUlJfRU5BQkxFXzBfRVJSMjZfU0hJRlQpDQo+ICsjZGVmaW5lIE5W
RExBX0dFQ19FUlJTTElDRTBfTEFURU5URVJSX0VOQUJMRV8wX0VSUjI2X0RJU0FCTEUJCQlf
TUtfRU5VTV9DT05TVCgweDApDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTEFU
RU5URVJSX0VOQUJMRV8wX0VSUjI2X0VOQUJMRQkJCV9NS19FTlVNX0NPTlNUKDB4MSkNCj4g
KyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMF9MQVRFTlRFUlJfRU5BQkxFXzBfRVJSMjdf
U0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMjcpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJT
TElDRTBfTEFURU5URVJSX0VOQUJMRV8wX0VSUjI3X0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNU
KDB4MSwgTlZETEFfR0VDX0VSUlNMSUNFMF9MQVRFTlRFUlJfRU5BQkxFXzBfRVJSMjdfU0hJ
RlQpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTEFURU5URVJSX0VOQUJMRV8w
X0VSUjI3X0RJU0FCTEUJCQlfTUtfRU5VTV9DT05TVCgweDApDQo+ICsjZGVmaW5lIE5WRExB
X0dFQ19FUlJTTElDRTBfTEFURU5URVJSX0VOQUJMRV8wX0VSUjI3X0VOQUJMRQkJCV9NS19F
TlVNX0NPTlNUKDB4MSkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMF9MQVRFTlRF
UlJfRU5BQkxFXzBfRVJSMjhfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMjgpDQo+ICsjZGVm
aW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTEFURU5URVJSX0VOQUJMRV8wX0VSUjI4X0ZJRUxE
CQkJX01LX0ZJRUxEX0NPTlNUKDB4MSwgTlZETEFfR0VDX0VSUlNMSUNFMF9MQVRFTlRFUlJf
RU5BQkxFXzBfRVJSMjhfU0hJRlQpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBf
TEFURU5URVJSX0VOQUJMRV8wX0VSUjI4X0RJU0FCTEUJCQlfTUtfRU5VTV9DT05TVCgweDAp
DQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTEFURU5URVJSX0VOQUJMRV8wX0VS
UjI4X0VOQUJMRQkJCV9NS19FTlVNX0NPTlNUKDB4MSkNCj4gKyNkZWZpbmUgTlZETEFfR0VD
X0VSUlNMSUNFMF9MQVRFTlRFUlJfRU5BQkxFXzBfRVJSMjlfU0hJRlQJCQlfTUtfU0hJRlRf
Q09OU1QoMjkpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTEFURU5URVJSX0VO
QUJMRV8wX0VSUjI5X0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4MSwgTlZETEFfR0VDX0VS
UlNMSUNFMF9MQVRFTlRFUlJfRU5BQkxFXzBfRVJSMjlfU0hJRlQpDQo+ICsjZGVmaW5lIE5W
RExBX0dFQ19FUlJTTElDRTBfTEFURU5URVJSX0VOQUJMRV8wX0VSUjI5X0RJU0FCTEUJCQlf
TUtfRU5VTV9DT05TVCgweDApDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTEFU
RU5URVJSX0VOQUJMRV8wX0VSUjI5X0VOQUJMRQkJCV9NS19FTlVNX0NPTlNUKDB4MSkNCj4g
KyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMF9MQVRFTlRFUlJfRU5BQkxFXzBfRVJSMzBf
U0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMzApDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJT
TElDRTBfTEFURU5URVJSX0VOQUJMRV8wX0VSUjMwX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNU
KDB4MSwgTlZETEFfR0VDX0VSUlNMSUNFMF9MQVRFTlRFUlJfRU5BQkxFXzBfRVJSMzBfU0hJ
RlQpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTEFURU5URVJSX0VOQUJMRV8w
X0VSUjMwX0RJU0FCTEUJCQlfTUtfRU5VTV9DT05TVCgweDApDQo+ICsjZGVmaW5lIE5WRExB
X0dFQ19FUlJTTElDRTBfTEFURU5URVJSX0VOQUJMRV8wX0VSUjMwX0VOQUJMRQkJCV9NS19F
TlVNX0NPTlNUKDB4MSkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMF9MQVRFTlRF
UlJfRU5BQkxFXzBfRVJSMzFfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMzEpDQo+ICsjZGVm
aW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTEFURU5URVJSX0VOQUJMRV8wX0VSUjMxX0ZJRUxE
CQkJX01LX0ZJRUxEX0NPTlNUKDB4MSwgTlZETEFfR0VDX0VSUlNMSUNFMF9MQVRFTlRFUlJf
RU5BQkxFXzBfRVJSMzFfU0hJRlQpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBf
TEFURU5URVJSX0VOQUJMRV8wX0VSUjMxX0RJU0FCTEUJCQlfTUtfRU5VTV9DT05TVCgweDAp
DQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTEFURU5URVJSX0VOQUJMRV8wX0VS
UjMxX0VOQUJMRQkJCV9NS19FTlVNX0NPTlNUKDB4MSkNCj4gKw0KPiArDQo+ICsvLyBSZWdp
c3RlciBOVkRMQV9HRUNfRVJSU0xJQ0UwX0xBVEVOVEVSUl9GT1JDRV8wDQo+ICsjZGVmaW5l
IE5WRExBX0dFQ19FUlJTTElDRTBfTEFURU5URVJSX0ZPUkNFXzAJCQlfTUtfQUREUl9DT05T
VCgweGUwNDQpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTEFURU5URVJSX0ZP
UkNFXzBfRVJSMF9TSElGVAkJCV9NS19TSElGVF9DT05TVCgwKQ0KPiArI2RlZmluZSBOVkRM
QV9HRUNfRVJSU0xJQ0UwX0xBVEVOVEVSUl9GT1JDRV8wX0VSUjBfRklFTEQJCQlfTUtfRklF
TERfQ09OU1QoMHgxLCBOVkRMQV9HRUNfRVJSU0xJQ0UwX0xBVEVOVEVSUl9GT1JDRV8wX0VS
UjBfU0hJRlQpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTEFURU5URVJSX0ZP
UkNFXzBfRVJSMF9OT0ZPUkNFCQkJX01LX0VOVU1fQ09OU1QoMHgwKQ0KPiArI2RlZmluZSBO
VkRMQV9HRUNfRVJSU0xJQ0UwX0xBVEVOVEVSUl9GT1JDRV8wX0VSUjBfRk9SQ0UJCQlfTUtf
RU5VTV9DT05TVCgweDEpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTEFURU5U
RVJSX0ZPUkNFXzBfRVJSMV9TSElGVAkJCV9NS19TSElGVF9DT05TVCgxKQ0KPiArI2RlZmlu
ZSBOVkRMQV9HRUNfRVJSU0xJQ0UwX0xBVEVOVEVSUl9GT1JDRV8wX0VSUjFfRklFTEQJCQlf
TUtfRklFTERfQ09OU1QoMHgxLCBOVkRMQV9HRUNfRVJSU0xJQ0UwX0xBVEVOVEVSUl9GT1JD
RV8wX0VSUjFfU0hJRlQpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTEFURU5U
RVJSX0ZPUkNFXzBfRVJSMV9OT0ZPUkNFCQkJX01LX0VOVU1fQ09OU1QoMHgwKQ0KPiArI2Rl
ZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UwX0xBVEVOVEVSUl9GT1JDRV8wX0VSUjFfRk9SQ0UJ
CQlfTUtfRU5VTV9DT05TVCgweDEpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBf
TEFURU5URVJSX0ZPUkNFXzBfRVJSMl9TSElGVAkJCV9NS19TSElGVF9DT05TVCgyKQ0KPiAr
I2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UwX0xBVEVOVEVSUl9GT1JDRV8wX0VSUjJfRklF
TEQJCQlfTUtfRklFTERfQ09OU1QoMHgxLCBOVkRMQV9HRUNfRVJSU0xJQ0UwX0xBVEVOVEVS
Ul9GT1JDRV8wX0VSUjJfU0hJRlQpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBf
TEFURU5URVJSX0ZPUkNFXzBfRVJSMl9OT0ZPUkNFCQkJX01LX0VOVU1fQ09OU1QoMHgwKQ0K
PiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UwX0xBVEVOVEVSUl9GT1JDRV8wX0VSUjJf
Rk9SQ0UJCQlfTUtfRU5VTV9DT05TVCgweDEpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJT
TElDRTBfTEFURU5URVJSX0ZPUkNFXzBfRVJSM19TSElGVAkJCV9NS19TSElGVF9DT05TVCgz
KQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UwX0xBVEVOVEVSUl9GT1JDRV8wX0VS
UjNfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHgxLCBOVkRMQV9HRUNfRVJSU0xJQ0UwX0xB
VEVOVEVSUl9GT1JDRV8wX0VSUjNfU0hJRlQpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJT
TElDRTBfTEFURU5URVJSX0ZPUkNFXzBfRVJSM19OT0ZPUkNFCQkJX01LX0VOVU1fQ09OU1Qo
MHgwKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UwX0xBVEVOVEVSUl9GT1JDRV8w
X0VSUjNfRk9SQ0UJCQlfTUtfRU5VTV9DT05TVCgweDEpDQo+ICsjZGVmaW5lIE5WRExBX0dF
Q19FUlJTTElDRTBfTEFURU5URVJSX0ZPUkNFXzBfRVJSNF9TSElGVAkJCV9NS19TSElGVF9D
T05TVCg0KQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UwX0xBVEVOVEVSUl9GT1JD
RV8wX0VSUjRfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHgxLCBOVkRMQV9HRUNfRVJSU0xJ
Q0UwX0xBVEVOVEVSUl9GT1JDRV8wX0VSUjRfU0hJRlQpDQo+ICsjZGVmaW5lIE5WRExBX0dF
Q19FUlJTTElDRTBfTEFURU5URVJSX0ZPUkNFXzBfRVJSNF9OT0ZPUkNFCQkJX01LX0VOVU1f
Q09OU1QoMHgwKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UwX0xBVEVOVEVSUl9G
T1JDRV8wX0VSUjRfRk9SQ0UJCQlfTUtfRU5VTV9DT05TVCgweDEpDQo+ICsjZGVmaW5lIE5W
RExBX0dFQ19FUlJTTElDRTBfTEFURU5URVJSX0ZPUkNFXzBfRVJSNV9TSElGVAkJCV9NS19T
SElGVF9DT05TVCg1KQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UwX0xBVEVOVEVS
Ul9GT1JDRV8wX0VSUjVfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHgxLCBOVkRMQV9HRUNf
RVJSU0xJQ0UwX0xBVEVOVEVSUl9GT1JDRV8wX0VSUjVfU0hJRlQpDQo+ICsjZGVmaW5lIE5W
RExBX0dFQ19FUlJTTElDRTBfTEFURU5URVJSX0ZPUkNFXzBfRVJSNV9OT0ZPUkNFCQkJX01L
X0VOVU1fQ09OU1QoMHgwKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UwX0xBVEVO
VEVSUl9GT1JDRV8wX0VSUjVfRk9SQ0UJCQlfTUtfRU5VTV9DT05TVCgweDEpDQo+ICsjZGVm
aW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTEFURU5URVJSX0ZPUkNFXzBfRVJSNl9TSElGVAkJ
CV9NS19TSElGVF9DT05TVCg2KQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UwX0xB
VEVOVEVSUl9GT1JDRV8wX0VSUjZfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHgxLCBOVkRM
QV9HRUNfRVJSU0xJQ0UwX0xBVEVOVEVSUl9GT1JDRV8wX0VSUjZfU0hJRlQpDQo+ICsjZGVm
aW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTEFURU5URVJSX0ZPUkNFXzBfRVJSNl9OT0ZPUkNF
CQkJX01LX0VOVU1fQ09OU1QoMHgwKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0Uw
X0xBVEVOVEVSUl9GT1JDRV8wX0VSUjZfRk9SQ0UJCQlfTUtfRU5VTV9DT05TVCgweDEpDQo+
ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTEFURU5URVJSX0ZPUkNFXzBfRVJSN19T
SElGVAkJCV9NS19TSElGVF9DT05TVCg3KQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJ
Q0UwX0xBVEVOVEVSUl9GT1JDRV8wX0VSUjdfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHgx
LCBOVkRMQV9HRUNfRVJSU0xJQ0UwX0xBVEVOVEVSUl9GT1JDRV8wX0VSUjdfU0hJRlQpDQo+
ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTEFURU5URVJSX0ZPUkNFXzBfRVJSN19O
T0ZPUkNFCQkJX01LX0VOVU1fQ09OU1QoMHgwKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJS
U0xJQ0UwX0xBVEVOVEVSUl9GT1JDRV8wX0VSUjdfRk9SQ0UJCQlfTUtfRU5VTV9DT05TVCgw
eDEpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTEFURU5URVJSX0ZPUkNFXzBf
RVJSOF9TSElGVAkJCV9NS19TSElGVF9DT05TVCg4KQ0KPiArI2RlZmluZSBOVkRMQV9HRUNf
RVJSU0xJQ0UwX0xBVEVOVEVSUl9GT1JDRV8wX0VSUjhfRklFTEQJCQlfTUtfRklFTERfQ09O
U1QoMHgxLCBOVkRMQV9HRUNfRVJSU0xJQ0UwX0xBVEVOVEVSUl9GT1JDRV8wX0VSUjhfU0hJ
RlQpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTEFURU5URVJSX0ZPUkNFXzBf
RVJSOF9OT0ZPUkNFCQkJX01LX0VOVU1fQ09OU1QoMHgwKQ0KPiArI2RlZmluZSBOVkRMQV9H
RUNfRVJSU0xJQ0UwX0xBVEVOVEVSUl9GT1JDRV8wX0VSUjhfRk9SQ0UJCQlfTUtfRU5VTV9D
T05TVCgweDEpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTEFURU5URVJSX0ZP
UkNFXzBfRVJSOV9TSElGVAkJCV9NS19TSElGVF9DT05TVCg5KQ0KPiArI2RlZmluZSBOVkRM
QV9HRUNfRVJSU0xJQ0UwX0xBVEVOVEVSUl9GT1JDRV8wX0VSUjlfRklFTEQJCQlfTUtfRklF
TERfQ09OU1QoMHgxLCBOVkRMQV9HRUNfRVJSU0xJQ0UwX0xBVEVOVEVSUl9GT1JDRV8wX0VS
UjlfU0hJRlQpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTEFURU5URVJSX0ZP
UkNFXzBfRVJSOV9OT0ZPUkNFCQkJX01LX0VOVU1fQ09OU1QoMHgwKQ0KPiArI2RlZmluZSBO
VkRMQV9HRUNfRVJSU0xJQ0UwX0xBVEVOVEVSUl9GT1JDRV8wX0VSUjlfRk9SQ0UJCQlfTUtf
RU5VTV9DT05TVCgweDEpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTEFURU5U
RVJSX0ZPUkNFXzBfRVJSMTBfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMTApDQo+ICsjZGVm
aW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTEFURU5URVJSX0ZPUkNFXzBfRVJSMTBfRklFTEQJ
CQlfTUtfRklFTERfQ09OU1QoMHgxLCBOVkRMQV9HRUNfRVJSU0xJQ0UwX0xBVEVOVEVSUl9G
T1JDRV8wX0VSUjEwX1NISUZUKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UwX0xB
VEVOVEVSUl9GT1JDRV8wX0VSUjEwX05PRk9SQ0UJCQlfTUtfRU5VTV9DT05TVCgweDApDQo+
ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTEFURU5URVJSX0ZPUkNFXzBfRVJSMTBf
Rk9SQ0UJCQlfTUtfRU5VTV9DT05TVCgweDEpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJT
TElDRTBfTEFURU5URVJSX0ZPUkNFXzBfRVJSMTFfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1Qo
MTEpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTEFURU5URVJSX0ZPUkNFXzBf
RVJSMTFfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHgxLCBOVkRMQV9HRUNfRVJSU0xJQ0Uw
X0xBVEVOVEVSUl9GT1JDRV8wX0VSUjExX1NISUZUKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNf
RVJSU0xJQ0UwX0xBVEVOVEVSUl9GT1JDRV8wX0VSUjExX05PRk9SQ0UJCQlfTUtfRU5VTV9D
T05TVCgweDApDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTEFURU5URVJSX0ZP
UkNFXzBfRVJSMTFfRk9SQ0UJCQlfTUtfRU5VTV9DT05TVCgweDEpDQo+ICsjZGVmaW5lIE5W
RExBX0dFQ19FUlJTTElDRTBfTEFURU5URVJSX0ZPUkNFXzBfRVJSMTJfU0hJRlQJCQlfTUtf
U0hJRlRfQ09OU1QoMTIpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTEFURU5U
RVJSX0ZPUkNFXzBfRVJSMTJfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHgxLCBOVkRMQV9H
RUNfRVJSU0xJQ0UwX0xBVEVOVEVSUl9GT1JDRV8wX0VSUjEyX1NISUZUKQ0KPiArI2RlZmlu
ZSBOVkRMQV9HRUNfRVJSU0xJQ0UwX0xBVEVOVEVSUl9GT1JDRV8wX0VSUjEyX05PRk9SQ0UJ
CQlfTUtfRU5VTV9DT05TVCgweDApDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBf
TEFURU5URVJSX0ZPUkNFXzBfRVJSMTJfRk9SQ0UJCQlfTUtfRU5VTV9DT05TVCgweDEpDQo+
ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTEFURU5URVJSX0ZPUkNFXzBfRVJSMTNf
U0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMTMpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJT
TElDRTBfTEFURU5URVJSX0ZPUkNFXzBfRVJSMTNfRklFTEQJCQlfTUtfRklFTERfQ09OU1Qo
MHgxLCBOVkRMQV9HRUNfRVJSU0xJQ0UwX0xBVEVOVEVSUl9GT1JDRV8wX0VSUjEzX1NISUZU
KQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UwX0xBVEVOVEVSUl9GT1JDRV8wX0VS
UjEzX05PRk9SQ0UJCQlfTUtfRU5VTV9DT05TVCgweDApDQo+ICsjZGVmaW5lIE5WRExBX0dF
Q19FUlJTTElDRTBfTEFURU5URVJSX0ZPUkNFXzBfRVJSMTNfRk9SQ0UJCQlfTUtfRU5VTV9D
T05TVCgweDEpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTEFURU5URVJSX0ZP
UkNFXzBfRVJSMTRfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMTQpDQo+ICsjZGVmaW5lIE5W
RExBX0dFQ19FUlJTTElDRTBfTEFURU5URVJSX0ZPUkNFXzBfRVJSMTRfRklFTEQJCQlfTUtf
RklFTERfQ09OU1QoMHgxLCBOVkRMQV9HRUNfRVJSU0xJQ0UwX0xBVEVOVEVSUl9GT1JDRV8w
X0VSUjE0X1NISUZUKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UwX0xBVEVOVEVS
Ul9GT1JDRV8wX0VSUjE0X05PRk9SQ0UJCQlfTUtfRU5VTV9DT05TVCgweDApDQo+ICsjZGVm
aW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTEFURU5URVJSX0ZPUkNFXzBfRVJSMTRfRk9SQ0UJ
CQlfTUtfRU5VTV9DT05TVCgweDEpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBf
TEFURU5URVJSX0ZPUkNFXzBfRVJSMTVfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMTUpDQo+
ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTEFURU5URVJSX0ZPUkNFXzBfRVJSMTVf
RklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHgxLCBOVkRMQV9HRUNfRVJSU0xJQ0UwX0xBVEVO
VEVSUl9GT1JDRV8wX0VSUjE1X1NISUZUKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJ
Q0UwX0xBVEVOVEVSUl9GT1JDRV8wX0VSUjE1X05PRk9SQ0UJCQlfTUtfRU5VTV9DT05TVCgw
eDApDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTEFURU5URVJSX0ZPUkNFXzBf
RVJSMTVfRk9SQ0UJCQlfTUtfRU5VTV9DT05TVCgweDEpDQo+ICsjZGVmaW5lIE5WRExBX0dF
Q19FUlJTTElDRTBfTEFURU5URVJSX0ZPUkNFXzBfRVJSMTZfU0hJRlQJCQlfTUtfU0hJRlRf
Q09OU1QoMTYpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTEFURU5URVJSX0ZP
UkNFXzBfRVJSMTZfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHgxLCBOVkRMQV9HRUNfRVJS
U0xJQ0UwX0xBVEVOVEVSUl9GT1JDRV8wX0VSUjE2X1NISUZUKQ0KPiArI2RlZmluZSBOVkRM
QV9HRUNfRVJSU0xJQ0UwX0xBVEVOVEVSUl9GT1JDRV8wX0VSUjE2X05PRk9SQ0UJCQlfTUtf
RU5VTV9DT05TVCgweDApDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTEFURU5U
RVJSX0ZPUkNFXzBfRVJSMTZfRk9SQ0UJCQlfTUtfRU5VTV9DT05TVCgweDEpDQo+ICsjZGVm
aW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTEFURU5URVJSX0ZPUkNFXzBfRVJSMTdfU0hJRlQJ
CQlfTUtfU0hJRlRfQ09OU1QoMTcpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBf
TEFURU5URVJSX0ZPUkNFXzBfRVJSMTdfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHgxLCBO
VkRMQV9HRUNfRVJSU0xJQ0UwX0xBVEVOVEVSUl9GT1JDRV8wX0VSUjE3X1NISUZUKQ0KPiAr
I2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UwX0xBVEVOVEVSUl9GT1JDRV8wX0VSUjE3X05P
Rk9SQ0UJCQlfTUtfRU5VTV9DT05TVCgweDApDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJT
TElDRTBfTEFURU5URVJSX0ZPUkNFXzBfRVJSMTdfRk9SQ0UJCQlfTUtfRU5VTV9DT05TVCgw
eDEpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTEFURU5URVJSX0ZPUkNFXzBf
RVJSMThfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMTgpDQo+ICsjZGVmaW5lIE5WRExBX0dF
Q19FUlJTTElDRTBfTEFURU5URVJSX0ZPUkNFXzBfRVJSMThfRklFTEQJCQlfTUtfRklFTERf
Q09OU1QoMHgxLCBOVkRMQV9HRUNfRVJSU0xJQ0UwX0xBVEVOVEVSUl9GT1JDRV8wX0VSUjE4
X1NISUZUKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UwX0xBVEVOVEVSUl9GT1JD
RV8wX0VSUjE4X05PRk9SQ0UJCQlfTUtfRU5VTV9DT05TVCgweDApDQo+ICsjZGVmaW5lIE5W
RExBX0dFQ19FUlJTTElDRTBfTEFURU5URVJSX0ZPUkNFXzBfRVJSMThfRk9SQ0UJCQlfTUtf
RU5VTV9DT05TVCgweDEpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTEFURU5U
RVJSX0ZPUkNFXzBfRVJSMTlfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMTkpDQo+ICsjZGVm
aW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTEFURU5URVJSX0ZPUkNFXzBfRVJSMTlfRklFTEQJ
CQlfTUtfRklFTERfQ09OU1QoMHgxLCBOVkRMQV9HRUNfRVJSU0xJQ0UwX0xBVEVOVEVSUl9G
T1JDRV8wX0VSUjE5X1NISUZUKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UwX0xB
VEVOVEVSUl9GT1JDRV8wX0VSUjE5X05PRk9SQ0UJCQlfTUtfRU5VTV9DT05TVCgweDApDQo+
ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTEFURU5URVJSX0ZPUkNFXzBfRVJSMTlf
Rk9SQ0UJCQlfTUtfRU5VTV9DT05TVCgweDEpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJT
TElDRTBfTEFURU5URVJSX0ZPUkNFXzBfRVJSMjBfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1Qo
MjApDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTEFURU5URVJSX0ZPUkNFXzBf
RVJSMjBfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHgxLCBOVkRMQV9HRUNfRVJSU0xJQ0Uw
X0xBVEVOVEVSUl9GT1JDRV8wX0VSUjIwX1NISUZUKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNf
RVJSU0xJQ0UwX0xBVEVOVEVSUl9GT1JDRV8wX0VSUjIwX05PRk9SQ0UJCQlfTUtfRU5VTV9D
T05TVCgweDApDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTEFURU5URVJSX0ZP
UkNFXzBfRVJSMjBfRk9SQ0UJCQlfTUtfRU5VTV9DT05TVCgweDEpDQo+ICsjZGVmaW5lIE5W
RExBX0dFQ19FUlJTTElDRTBfTEFURU5URVJSX0ZPUkNFXzBfRVJSMjFfU0hJRlQJCQlfTUtf
U0hJRlRfQ09OU1QoMjEpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTEFURU5U
RVJSX0ZPUkNFXzBfRVJSMjFfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHgxLCBOVkRMQV9H
RUNfRVJSU0xJQ0UwX0xBVEVOVEVSUl9GT1JDRV8wX0VSUjIxX1NISUZUKQ0KPiArI2RlZmlu
ZSBOVkRMQV9HRUNfRVJSU0xJQ0UwX0xBVEVOVEVSUl9GT1JDRV8wX0VSUjIxX05PRk9SQ0UJ
CQlfTUtfRU5VTV9DT05TVCgweDApDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBf
TEFURU5URVJSX0ZPUkNFXzBfRVJSMjFfRk9SQ0UJCQlfTUtfRU5VTV9DT05TVCgweDEpDQo+
ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTEFURU5URVJSX0ZPUkNFXzBfRVJSMjJf
U0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMjIpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJT
TElDRTBfTEFURU5URVJSX0ZPUkNFXzBfRVJSMjJfRklFTEQJCQlfTUtfRklFTERfQ09OU1Qo
MHgxLCBOVkRMQV9HRUNfRVJSU0xJQ0UwX0xBVEVOVEVSUl9GT1JDRV8wX0VSUjIyX1NISUZU
KQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UwX0xBVEVOVEVSUl9GT1JDRV8wX0VS
UjIyX05PRk9SQ0UJCQlfTUtfRU5VTV9DT05TVCgweDApDQo+ICsjZGVmaW5lIE5WRExBX0dF
Q19FUlJTTElDRTBfTEFURU5URVJSX0ZPUkNFXzBfRVJSMjJfRk9SQ0UJCQlfTUtfRU5VTV9D
T05TVCgweDEpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTEFURU5URVJSX0ZP
UkNFXzBfRVJSMjNfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMjMpDQo+ICsjZGVmaW5lIE5W
RExBX0dFQ19FUlJTTElDRTBfTEFURU5URVJSX0ZPUkNFXzBfRVJSMjNfRklFTEQJCQlfTUtf
RklFTERfQ09OU1QoMHgxLCBOVkRMQV9HRUNfRVJSU0xJQ0UwX0xBVEVOVEVSUl9GT1JDRV8w
X0VSUjIzX1NISUZUKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UwX0xBVEVOVEVS
Ul9GT1JDRV8wX0VSUjIzX05PRk9SQ0UJCQlfTUtfRU5VTV9DT05TVCgweDApDQo+ICsjZGVm
aW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTEFURU5URVJSX0ZPUkNFXzBfRVJSMjNfRk9SQ0UJ
CQlfTUtfRU5VTV9DT05TVCgweDEpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBf
TEFURU5URVJSX0ZPUkNFXzBfRVJSMjRfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMjQpDQo+
ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTEFURU5URVJSX0ZPUkNFXzBfRVJSMjRf
RklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHgxLCBOVkRMQV9HRUNfRVJSU0xJQ0UwX0xBVEVO
VEVSUl9GT1JDRV8wX0VSUjI0X1NISUZUKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJ
Q0UwX0xBVEVOVEVSUl9GT1JDRV8wX0VSUjI0X05PRk9SQ0UJCQlfTUtfRU5VTV9DT05TVCgw
eDApDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTEFURU5URVJSX0ZPUkNFXzBf
RVJSMjRfRk9SQ0UJCQlfTUtfRU5VTV9DT05TVCgweDEpDQo+ICsjZGVmaW5lIE5WRExBX0dF
Q19FUlJTTElDRTBfTEFURU5URVJSX0ZPUkNFXzBfRVJSMjVfU0hJRlQJCQlfTUtfU0hJRlRf
Q09OU1QoMjUpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTEFURU5URVJSX0ZP
UkNFXzBfRVJSMjVfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHgxLCBOVkRMQV9HRUNfRVJS
U0xJQ0UwX0xBVEVOVEVSUl9GT1JDRV8wX0VSUjI1X1NISUZUKQ0KPiArI2RlZmluZSBOVkRM
QV9HRUNfRVJSU0xJQ0UwX0xBVEVOVEVSUl9GT1JDRV8wX0VSUjI1X05PRk9SQ0UJCQlfTUtf
RU5VTV9DT05TVCgweDApDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTEFURU5U
RVJSX0ZPUkNFXzBfRVJSMjVfRk9SQ0UJCQlfTUtfRU5VTV9DT05TVCgweDEpDQo+ICsjZGVm
aW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTEFURU5URVJSX0ZPUkNFXzBfRVJSMjZfU0hJRlQJ
CQlfTUtfU0hJRlRfQ09OU1QoMjYpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBf
TEFURU5URVJSX0ZPUkNFXzBfRVJSMjZfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHgxLCBO
VkRMQV9HRUNfRVJSU0xJQ0UwX0xBVEVOVEVSUl9GT1JDRV8wX0VSUjI2X1NISUZUKQ0KPiAr
I2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UwX0xBVEVOVEVSUl9GT1JDRV8wX0VSUjI2X05P
Rk9SQ0UJCQlfTUtfRU5VTV9DT05TVCgweDApDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJT
TElDRTBfTEFURU5URVJSX0ZPUkNFXzBfRVJSMjZfRk9SQ0UJCQlfTUtfRU5VTV9DT05TVCgw
eDEpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTEFURU5URVJSX0ZPUkNFXzBf
RVJSMjdfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMjcpDQo+ICsjZGVmaW5lIE5WRExBX0dF
Q19FUlJTTElDRTBfTEFURU5URVJSX0ZPUkNFXzBfRVJSMjdfRklFTEQJCQlfTUtfRklFTERf
Q09OU1QoMHgxLCBOVkRMQV9HRUNfRVJSU0xJQ0UwX0xBVEVOVEVSUl9GT1JDRV8wX0VSUjI3
X1NISUZUKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UwX0xBVEVOVEVSUl9GT1JD
RV8wX0VSUjI3X05PRk9SQ0UJCQlfTUtfRU5VTV9DT05TVCgweDApDQo+ICsjZGVmaW5lIE5W
RExBX0dFQ19FUlJTTElDRTBfTEFURU5URVJSX0ZPUkNFXzBfRVJSMjdfRk9SQ0UJCQlfTUtf
RU5VTV9DT05TVCgweDEpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTEFURU5U
RVJSX0ZPUkNFXzBfRVJSMjhfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMjgpDQo+ICsjZGVm
aW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTEFURU5URVJSX0ZPUkNFXzBfRVJSMjhfRklFTEQJ
CQlfTUtfRklFTERfQ09OU1QoMHgxLCBOVkRMQV9HRUNfRVJSU0xJQ0UwX0xBVEVOVEVSUl9G
T1JDRV8wX0VSUjI4X1NISUZUKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UwX0xB
VEVOVEVSUl9GT1JDRV8wX0VSUjI4X05PRk9SQ0UJCQlfTUtfRU5VTV9DT05TVCgweDApDQo+
ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTEFURU5URVJSX0ZPUkNFXzBfRVJSMjhf
Rk9SQ0UJCQlfTUtfRU5VTV9DT05TVCgweDEpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJT
TElDRTBfTEFURU5URVJSX0ZPUkNFXzBfRVJSMjlfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1Qo
MjkpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTEFURU5URVJSX0ZPUkNFXzBf
RVJSMjlfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHgxLCBOVkRMQV9HRUNfRVJSU0xJQ0Uw
X0xBVEVOVEVSUl9GT1JDRV8wX0VSUjI5X1NISUZUKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNf
RVJSU0xJQ0UwX0xBVEVOVEVSUl9GT1JDRV8wX0VSUjI5X05PRk9SQ0UJCQlfTUtfRU5VTV9D
T05TVCgweDApDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTEFURU5URVJSX0ZP
UkNFXzBfRVJSMjlfRk9SQ0UJCQlfTUtfRU5VTV9DT05TVCgweDEpDQo+ICsjZGVmaW5lIE5W
RExBX0dFQ19FUlJTTElDRTBfTEFURU5URVJSX0ZPUkNFXzBfRVJSMzBfU0hJRlQJCQlfTUtf
U0hJRlRfQ09OU1QoMzApDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTEFURU5U
RVJSX0ZPUkNFXzBfRVJSMzBfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHgxLCBOVkRMQV9H
RUNfRVJSU0xJQ0UwX0xBVEVOVEVSUl9GT1JDRV8wX0VSUjMwX1NISUZUKQ0KPiArI2RlZmlu
ZSBOVkRMQV9HRUNfRVJSU0xJQ0UwX0xBVEVOVEVSUl9GT1JDRV8wX0VSUjMwX05PRk9SQ0UJ
CQlfTUtfRU5VTV9DT05TVCgweDApDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBf
TEFURU5URVJSX0ZPUkNFXzBfRVJSMzBfRk9SQ0UJCQlfTUtfRU5VTV9DT05TVCgweDEpDQo+
ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTEFURU5URVJSX0ZPUkNFXzBfRVJSMzFf
U0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMzEpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJT
TElDRTBfTEFURU5URVJSX0ZPUkNFXzBfRVJSMzFfRklFTEQJCQlfTUtfRklFTERfQ09OU1Qo
MHgxLCBOVkRMQV9HRUNfRVJSU0xJQ0UwX0xBVEVOVEVSUl9GT1JDRV8wX0VSUjMxX1NISUZU
KQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UwX0xBVEVOVEVSUl9GT1JDRV8wX0VS
UjMxX05PRk9SQ0UJCQlfTUtfRU5VTV9DT05TVCgweDApDQo+ICsjZGVmaW5lIE5WRExBX0dF
Q19FUlJTTElDRTBfTEFURU5URVJSX0ZPUkNFXzBfRVJSMzFfRk9SQ0UJCQlfTUtfRU5VTV9D
T05TVCgweDEpDQo+ICsNCj4gKw0KPiArLy8gUmVnaXN0ZXIgTlZETEFfR0VDX0VSUlNMSUNF
MF9MQVRFTlRFUlJfU1RBVFVTXzANCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMF9M
QVRFTlRFUlJfU1RBVFVTXzAJCQlfTUtfQUREUl9DT05TVCgweGUwNDgpDQo+ICsjZGVmaW5l
IE5WRExBX0dFQ19FUlJTTElDRTBfTEFURU5URVJSX1NUQVRVU18wX0VSUjBfU0hJRlQJCQlf
TUtfU0hJRlRfQ09OU1QoMCkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMF9MQVRF
TlRFUlJfU1RBVFVTXzBfRVJSMF9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweDEsIE5WRExB
X0dFQ19FUlJTTElDRTBfTEFURU5URVJSX1NUQVRVU18wX0VSUjBfU0hJRlQpDQo+ICsjZGVm
aW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTEFURU5URVJSX1NUQVRVU18wX0VSUjFfU0hJRlQJ
CQlfTUtfU0hJRlRfQ09OU1QoMSkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMF9M
QVRFTlRFUlJfU1RBVFVTXzBfRVJSMV9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweDEsIE5W
RExBX0dFQ19FUlJTTElDRTBfTEFURU5URVJSX1NUQVRVU18wX0VSUjFfU0hJRlQpDQo+ICsj
ZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTEFURU5URVJSX1NUQVRVU18wX0VSUjJfU0hJ
RlQJCQlfTUtfU0hJRlRfQ09OU1QoMikNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNF
MF9MQVRFTlRFUlJfU1RBVFVTXzBfRVJSMl9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweDEs
IE5WRExBX0dFQ19FUlJTTElDRTBfTEFURU5URVJSX1NUQVRVU18wX0VSUjJfU0hJRlQpDQo+
ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTEFURU5URVJSX1NUQVRVU18wX0VSUjNf
U0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMykNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNM
SUNFMF9MQVRFTlRFUlJfU1RBVFVTXzBfRVJSM19GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgw
eDEsIE5WRExBX0dFQ19FUlJTTElDRTBfTEFURU5URVJSX1NUQVRVU18wX0VSUjNfU0hJRlQp
DQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTEFURU5URVJSX1NUQVRVU18wX0VS
UjRfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoNCkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VS
UlNMSUNFMF9MQVRFTlRFUlJfU1RBVFVTXzBfRVJSNF9GSUVMRAkJCV9NS19GSUVMRF9DT05T
VCgweDEsIE5WRExBX0dFQ19FUlJTTElDRTBfTEFURU5URVJSX1NUQVRVU18wX0VSUjRfU0hJ
RlQpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTEFURU5URVJSX1NUQVRVU18w
X0VSUjVfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoNSkNCj4gKyNkZWZpbmUgTlZETEFfR0VD
X0VSUlNMSUNFMF9MQVRFTlRFUlJfU1RBVFVTXzBfRVJSNV9GSUVMRAkJCV9NS19GSUVMRF9D
T05TVCgweDEsIE5WRExBX0dFQ19FUlJTTElDRTBfTEFURU5URVJSX1NUQVRVU18wX0VSUjVf
U0hJRlQpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTEFURU5URVJSX1NUQVRV
U18wX0VSUjZfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoNikNCj4gKyNkZWZpbmUgTlZETEFf
R0VDX0VSUlNMSUNFMF9MQVRFTlRFUlJfU1RBVFVTXzBfRVJSNl9GSUVMRAkJCV9NS19GSUVM
RF9DT05TVCgweDEsIE5WRExBX0dFQ19FUlJTTElDRTBfTEFURU5URVJSX1NUQVRVU18wX0VS
UjZfU0hJRlQpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTEFURU5URVJSX1NU
QVRVU18wX0VSUjdfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoNykNCj4gKyNkZWZpbmUgTlZE
TEFfR0VDX0VSUlNMSUNFMF9MQVRFTlRFUlJfU1RBVFVTXzBfRVJSN19GSUVMRAkJCV9NS19G
SUVMRF9DT05TVCgweDEsIE5WRExBX0dFQ19FUlJTTElDRTBfTEFURU5URVJSX1NUQVRVU18w
X0VSUjdfU0hJRlQpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTEFURU5URVJS
X1NUQVRVU18wX0VSUjhfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoOCkNCj4gKyNkZWZpbmUg
TlZETEFfR0VDX0VSUlNMSUNFMF9MQVRFTlRFUlJfU1RBVFVTXzBfRVJSOF9GSUVMRAkJCV9N
S19GSUVMRF9DT05TVCgweDEsIE5WRExBX0dFQ19FUlJTTElDRTBfTEFURU5URVJSX1NUQVRV
U18wX0VSUjhfU0hJRlQpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTEFURU5U
RVJSX1NUQVRVU18wX0VSUjlfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoOSkNCj4gKyNkZWZp
bmUgTlZETEFfR0VDX0VSUlNMSUNFMF9MQVRFTlRFUlJfU1RBVFVTXzBfRVJSOV9GSUVMRAkJ
CV9NS19GSUVMRF9DT05TVCgweDEsIE5WRExBX0dFQ19FUlJTTElDRTBfTEFURU5URVJSX1NU
QVRVU18wX0VSUjlfU0hJRlQpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTEFU
RU5URVJSX1NUQVRVU18wX0VSUjEwX1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDEwKQ0KPiAr
I2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UwX0xBVEVOVEVSUl9TVEFUVVNfMF9FUlIxMF9G
SUVMRAkJCV9NS19GSUVMRF9DT05TVCgweDEsIE5WRExBX0dFQ19FUlJTTElDRTBfTEFURU5U
RVJSX1NUQVRVU18wX0VSUjEwX1NISUZUKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJ
Q0UwX0xBVEVOVEVSUl9TVEFUVVNfMF9FUlIxMV9TSElGVAkJCV9NS19TSElGVF9DT05TVCgx
MSkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMF9MQVRFTlRFUlJfU1RBVFVTXzBf
RVJSMTFfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHgxLCBOVkRMQV9HRUNfRVJSU0xJQ0Uw
X0xBVEVOVEVSUl9TVEFUVVNfMF9FUlIxMV9TSElGVCkNCj4gKyNkZWZpbmUgTlZETEFfR0VD
X0VSUlNMSUNFMF9MQVRFTlRFUlJfU1RBVFVTXzBfRVJSMTJfU0hJRlQJCQlfTUtfU0hJRlRf
Q09OU1QoMTIpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTEFURU5URVJSX1NU
QVRVU18wX0VSUjEyX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4MSwgTlZETEFfR0VDX0VS
UlNMSUNFMF9MQVRFTlRFUlJfU1RBVFVTXzBfRVJSMTJfU0hJRlQpDQo+ICsjZGVmaW5lIE5W
RExBX0dFQ19FUlJTTElDRTBfTEFURU5URVJSX1NUQVRVU18wX0VSUjEzX1NISUZUCQkJX01L
X1NISUZUX0NPTlNUKDEzKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UwX0xBVEVO
VEVSUl9TVEFUVVNfMF9FUlIxM19GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweDEsIE5WRExB
X0dFQ19FUlJTTElDRTBfTEFURU5URVJSX1NUQVRVU18wX0VSUjEzX1NISUZUKQ0KPiArI2Rl
ZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UwX0xBVEVOVEVSUl9TVEFUVVNfMF9FUlIxNF9TSElG
VAkJCV9NS19TSElGVF9DT05TVCgxNCkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNF
MF9MQVRFTlRFUlJfU1RBVFVTXzBfRVJSMTRfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHgx
LCBOVkRMQV9HRUNfRVJSU0xJQ0UwX0xBVEVOVEVSUl9TVEFUVVNfMF9FUlIxNF9TSElGVCkN
Cj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMF9MQVRFTlRFUlJfU1RBVFVTXzBfRVJS
MTVfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMTUpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19F
UlJTTElDRTBfTEFURU5URVJSX1NUQVRVU18wX0VSUjE1X0ZJRUxECQkJX01LX0ZJRUxEX0NP
TlNUKDB4MSwgTlZETEFfR0VDX0VSUlNMSUNFMF9MQVRFTlRFUlJfU1RBVFVTXzBfRVJSMTVf
U0hJRlQpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTEFURU5URVJSX1NUQVRV
U18wX0VSUjE2X1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDE2KQ0KPiArI2RlZmluZSBOVkRM
QV9HRUNfRVJSU0xJQ0UwX0xBVEVOVEVSUl9TVEFUVVNfMF9FUlIxNl9GSUVMRAkJCV9NS19G
SUVMRF9DT05TVCgweDEsIE5WRExBX0dFQ19FUlJTTElDRTBfTEFURU5URVJSX1NUQVRVU18w
X0VSUjE2X1NISUZUKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UwX0xBVEVOVEVS
Ul9TVEFUVVNfMF9FUlIxN19TSElGVAkJCV9NS19TSElGVF9DT05TVCgxNykNCj4gKyNkZWZp
bmUgTlZETEFfR0VDX0VSUlNMSUNFMF9MQVRFTlRFUlJfU1RBVFVTXzBfRVJSMTdfRklFTEQJ
CQlfTUtfRklFTERfQ09OU1QoMHgxLCBOVkRMQV9HRUNfRVJSU0xJQ0UwX0xBVEVOVEVSUl9T
VEFUVVNfMF9FUlIxN19TSElGVCkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMF9M
QVRFTlRFUlJfU1RBVFVTXzBfRVJSMThfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMTgpDQo+
ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTEFURU5URVJSX1NUQVRVU18wX0VSUjE4
X0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4MSwgTlZETEFfR0VDX0VSUlNMSUNFMF9MQVRF
TlRFUlJfU1RBVFVTXzBfRVJSMThfU0hJRlQpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJT
TElDRTBfTEFURU5URVJSX1NUQVRVU18wX0VSUjE5X1NISUZUCQkJX01LX1NISUZUX0NPTlNU
KDE5KQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UwX0xBVEVOVEVSUl9TVEFUVVNf
MF9FUlIxOV9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweDEsIE5WRExBX0dFQ19FUlJTTElD
RTBfTEFURU5URVJSX1NUQVRVU18wX0VSUjE5X1NISUZUKQ0KPiArI2RlZmluZSBOVkRMQV9H
RUNfRVJSU0xJQ0UwX0xBVEVOVEVSUl9TVEFUVVNfMF9FUlIyMF9TSElGVAkJCV9NS19TSElG
VF9DT05TVCgyMCkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMF9MQVRFTlRFUlJf
U1RBVFVTXzBfRVJSMjBfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHgxLCBOVkRMQV9HRUNf
RVJSU0xJQ0UwX0xBVEVOVEVSUl9TVEFUVVNfMF9FUlIyMF9TSElGVCkNCj4gKyNkZWZpbmUg
TlZETEFfR0VDX0VSUlNMSUNFMF9MQVRFTlRFUlJfU1RBVFVTXzBfRVJSMjFfU0hJRlQJCQlf
TUtfU0hJRlRfQ09OU1QoMjEpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTEFU
RU5URVJSX1NUQVRVU18wX0VSUjIxX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4MSwgTlZE
TEFfR0VDX0VSUlNMSUNFMF9MQVRFTlRFUlJfU1RBVFVTXzBfRVJSMjFfU0hJRlQpDQo+ICsj
ZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTEFURU5URVJSX1NUQVRVU18wX0VSUjIyX1NI
SUZUCQkJX01LX1NISUZUX0NPTlNUKDIyKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJ
Q0UwX0xBVEVOVEVSUl9TVEFUVVNfMF9FUlIyMl9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgw
eDEsIE5WRExBX0dFQ19FUlJTTElDRTBfTEFURU5URVJSX1NUQVRVU18wX0VSUjIyX1NISUZU
KQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UwX0xBVEVOVEVSUl9TVEFUVVNfMF9F
UlIyM19TSElGVAkJCV9NS19TSElGVF9DT05TVCgyMykNCj4gKyNkZWZpbmUgTlZETEFfR0VD
X0VSUlNMSUNFMF9MQVRFTlRFUlJfU1RBVFVTXzBfRVJSMjNfRklFTEQJCQlfTUtfRklFTERf
Q09OU1QoMHgxLCBOVkRMQV9HRUNfRVJSU0xJQ0UwX0xBVEVOVEVSUl9TVEFUVVNfMF9FUlIy
M19TSElGVCkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMF9MQVRFTlRFUlJfU1RB
VFVTXzBfRVJSMjRfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMjQpDQo+ICsjZGVmaW5lIE5W
RExBX0dFQ19FUlJTTElDRTBfTEFURU5URVJSX1NUQVRVU18wX0VSUjI0X0ZJRUxECQkJX01L
X0ZJRUxEX0NPTlNUKDB4MSwgTlZETEFfR0VDX0VSUlNMSUNFMF9MQVRFTlRFUlJfU1RBVFVT
XzBfRVJSMjRfU0hJRlQpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTEFURU5U
RVJSX1NUQVRVU18wX0VSUjI1X1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDI1KQ0KPiArI2Rl
ZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UwX0xBVEVOVEVSUl9TVEFUVVNfMF9FUlIyNV9GSUVM
RAkJCV9NS19GSUVMRF9DT05TVCgweDEsIE5WRExBX0dFQ19FUlJTTElDRTBfTEFURU5URVJS
X1NUQVRVU18wX0VSUjI1X1NISUZUKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0Uw
X0xBVEVOVEVSUl9TVEFUVVNfMF9FUlIyNl9TSElGVAkJCV9NS19TSElGVF9DT05TVCgyNikN
Cj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMF9MQVRFTlRFUlJfU1RBVFVTXzBfRVJS
MjZfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHgxLCBOVkRMQV9HRUNfRVJSU0xJQ0UwX0xB
VEVOVEVSUl9TVEFUVVNfMF9FUlIyNl9TSElGVCkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VS
UlNMSUNFMF9MQVRFTlRFUlJfU1RBVFVTXzBfRVJSMjdfU0hJRlQJCQlfTUtfU0hJRlRfQ09O
U1QoMjcpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTEFURU5URVJSX1NUQVRV
U18wX0VSUjI3X0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4MSwgTlZETEFfR0VDX0VSUlNM
SUNFMF9MQVRFTlRFUlJfU1RBVFVTXzBfRVJSMjdfU0hJRlQpDQo+ICsjZGVmaW5lIE5WRExB
X0dFQ19FUlJTTElDRTBfTEFURU5URVJSX1NUQVRVU18wX0VSUjI4X1NISUZUCQkJX01LX1NI
SUZUX0NPTlNUKDI4KQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UwX0xBVEVOVEVS
Ul9TVEFUVVNfMF9FUlIyOF9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweDEsIE5WRExBX0dF
Q19FUlJTTElDRTBfTEFURU5URVJSX1NUQVRVU18wX0VSUjI4X1NISUZUKQ0KPiArI2RlZmlu
ZSBOVkRMQV9HRUNfRVJSU0xJQ0UwX0xBVEVOVEVSUl9TVEFUVVNfMF9FUlIyOV9TSElGVAkJ
CV9NS19TSElGVF9DT05TVCgyOSkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMF9M
QVRFTlRFUlJfU1RBVFVTXzBfRVJSMjlfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHgxLCBO
VkRMQV9HRUNfRVJSU0xJQ0UwX0xBVEVOVEVSUl9TVEFUVVNfMF9FUlIyOV9TSElGVCkNCj4g
KyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMF9MQVRFTlRFUlJfU1RBVFVTXzBfRVJSMzBf
U0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMzApDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJT
TElDRTBfTEFURU5URVJSX1NUQVRVU18wX0VSUjMwX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNU
KDB4MSwgTlZETEFfR0VDX0VSUlNMSUNFMF9MQVRFTlRFUlJfU1RBVFVTXzBfRVJSMzBfU0hJ
RlQpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfTEFURU5URVJSX1NUQVRVU18w
X0VSUjMxX1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDMxKQ0KPiArI2RlZmluZSBOVkRMQV9H
RUNfRVJSU0xJQ0UwX0xBVEVOVEVSUl9TVEFUVVNfMF9FUlIzMV9GSUVMRAkJCV9NS19GSUVM
RF9DT05TVCgweDEsIE5WRExBX0dFQ19FUlJTTElDRTBfTEFURU5URVJSX1NUQVRVU18wX0VS
UjMxX1NISUZUKQ0KPiArDQo+ICsNCj4gKy8vIFJlZ2lzdGVyIE5WRExBX0dFQ19FUlJTTElD
RTBfQ09VTlRFUl9SRUxPQURfMA0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UwX0NP
VU5URVJfUkVMT0FEXzAJCQlfTUtfQUREUl9DT05TVCgweGUwNTApDQo+ICsjZGVmaW5lIE5W
RExBX0dFQ19FUlJTTElDRTBfQ09VTlRFUl9SRUxPQURfMF9FUlIwX1NISUZUCQkJX01LX1NI
SUZUX0NPTlNUKDApDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfQ09VTlRFUl9S
RUxPQURfMF9FUlIwX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4MSwgTlZETEFfR0VDX0VS
UlNMSUNFMF9DT1VOVEVSX1JFTE9BRF8wX0VSUjBfU0hJRlQpDQo+ICsjZGVmaW5lIE5WRExB
X0dFQ19FUlJTTElDRTBfQ09VTlRFUl9SRUxPQURfMF9FUlIwX05PUkVMT0FECQkJX01LX0VO
VU1fQ09OU1QoMHgwKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UwX0NPVU5URVJf
UkVMT0FEXzBfRVJSMF9SRUxPQUQJCQlfTUtfRU5VTV9DT05TVCgweDEpDQo+ICsjZGVmaW5l
IE5WRExBX0dFQ19FUlJTTElDRTBfQ09VTlRFUl9SRUxPQURfMF9FUlIxX1NISUZUCQkJX01L
X1NISUZUX0NPTlNUKDEpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfQ09VTlRF
Ul9SRUxPQURfMF9FUlIxX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4MSwgTlZETEFfR0VD
X0VSUlNMSUNFMF9DT1VOVEVSX1JFTE9BRF8wX0VSUjFfU0hJRlQpDQo+ICsjZGVmaW5lIE5W
RExBX0dFQ19FUlJTTElDRTBfQ09VTlRFUl9SRUxPQURfMF9FUlIxX05PUkVMT0FECQkJX01L
X0VOVU1fQ09OU1QoMHgwKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UwX0NPVU5U
RVJfUkVMT0FEXzBfRVJSMV9SRUxPQUQJCQlfTUtfRU5VTV9DT05TVCgweDEpDQo+ICsjZGVm
aW5lIE5WRExBX0dFQ19FUlJTTElDRTBfQ09VTlRFUl9SRUxPQURfMF9FUlIyX1NISUZUCQkJ
X01LX1NISUZUX0NPTlNUKDIpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfQ09V
TlRFUl9SRUxPQURfMF9FUlIyX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4MSwgTlZETEFf
R0VDX0VSUlNMSUNFMF9DT1VOVEVSX1JFTE9BRF8wX0VSUjJfU0hJRlQpDQo+ICsjZGVmaW5l
IE5WRExBX0dFQ19FUlJTTElDRTBfQ09VTlRFUl9SRUxPQURfMF9FUlIyX05PUkVMT0FECQkJ
X01LX0VOVU1fQ09OU1QoMHgwKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UwX0NP
VU5URVJfUkVMT0FEXzBfRVJSMl9SRUxPQUQJCQlfTUtfRU5VTV9DT05TVCgweDEpDQo+ICsj
ZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfQ09VTlRFUl9SRUxPQURfMF9FUlIzX1NISUZU
CQkJX01LX1NISUZUX0NPTlNUKDMpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBf
Q09VTlRFUl9SRUxPQURfMF9FUlIzX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4MSwgTlZE
TEFfR0VDX0VSUlNMSUNFMF9DT1VOVEVSX1JFTE9BRF8wX0VSUjNfU0hJRlQpDQo+ICsjZGVm
aW5lIE5WRExBX0dFQ19FUlJTTElDRTBfQ09VTlRFUl9SRUxPQURfMF9FUlIzX05PUkVMT0FE
CQkJX01LX0VOVU1fQ09OU1QoMHgwKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0Uw
X0NPVU5URVJfUkVMT0FEXzBfRVJSM19SRUxPQUQJCQlfTUtfRU5VTV9DT05TVCgweDEpDQo+
ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfQ09VTlRFUl9SRUxPQURfMF9FUlI0X1NI
SUZUCQkJX01LX1NISUZUX0NPTlNUKDQpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElD
RTBfQ09VTlRFUl9SRUxPQURfMF9FUlI0X0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4MSwg
TlZETEFfR0VDX0VSUlNMSUNFMF9DT1VOVEVSX1JFTE9BRF8wX0VSUjRfU0hJRlQpDQo+ICsj
ZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfQ09VTlRFUl9SRUxPQURfMF9FUlI0X05PUkVM
T0FECQkJX01LX0VOVU1fQ09OU1QoMHgwKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJ
Q0UwX0NPVU5URVJfUkVMT0FEXzBfRVJSNF9SRUxPQUQJCQlfTUtfRU5VTV9DT05TVCgweDEp
DQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfQ09VTlRFUl9SRUxPQURfMF9FUlI1
X1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDUpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJT
TElDRTBfQ09VTlRFUl9SRUxPQURfMF9FUlI1X0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4
MSwgTlZETEFfR0VDX0VSUlNMSUNFMF9DT1VOVEVSX1JFTE9BRF8wX0VSUjVfU0hJRlQpDQo+
ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfQ09VTlRFUl9SRUxPQURfMF9FUlI1X05P
UkVMT0FECQkJX01LX0VOVU1fQ09OU1QoMHgwKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJS
U0xJQ0UwX0NPVU5URVJfUkVMT0FEXzBfRVJSNV9SRUxPQUQJCQlfTUtfRU5VTV9DT05TVCgw
eDEpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfQ09VTlRFUl9SRUxPQURfMF9F
UlI2X1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDYpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19F
UlJTTElDRTBfQ09VTlRFUl9SRUxPQURfMF9FUlI2X0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNU
KDB4MSwgTlZETEFfR0VDX0VSUlNMSUNFMF9DT1VOVEVSX1JFTE9BRF8wX0VSUjZfU0hJRlQp
DQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfQ09VTlRFUl9SRUxPQURfMF9FUlI2
X05PUkVMT0FECQkJX01LX0VOVU1fQ09OU1QoMHgwKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNf
RVJSU0xJQ0UwX0NPVU5URVJfUkVMT0FEXzBfRVJSNl9SRUxPQUQJCQlfTUtfRU5VTV9DT05T
VCgweDEpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfQ09VTlRFUl9SRUxPQURf
MF9FUlI3X1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDcpDQo+ICsjZGVmaW5lIE5WRExBX0dF
Q19FUlJTTElDRTBfQ09VTlRFUl9SRUxPQURfMF9FUlI3X0ZJRUxECQkJX01LX0ZJRUxEX0NP
TlNUKDB4MSwgTlZETEFfR0VDX0VSUlNMSUNFMF9DT1VOVEVSX1JFTE9BRF8wX0VSUjdfU0hJ
RlQpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfQ09VTlRFUl9SRUxPQURfMF9F
UlI3X05PUkVMT0FECQkJX01LX0VOVU1fQ09OU1QoMHgwKQ0KPiArI2RlZmluZSBOVkRMQV9H
RUNfRVJSU0xJQ0UwX0NPVU5URVJfUkVMT0FEXzBfRVJSN19SRUxPQUQJCQlfTUtfRU5VTV9D
T05TVCgweDEpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfQ09VTlRFUl9SRUxP
QURfMF9FUlI4X1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDgpDQo+ICsjZGVmaW5lIE5WRExB
X0dFQ19FUlJTTElDRTBfQ09VTlRFUl9SRUxPQURfMF9FUlI4X0ZJRUxECQkJX01LX0ZJRUxE
X0NPTlNUKDB4MSwgTlZETEFfR0VDX0VSUlNMSUNFMF9DT1VOVEVSX1JFTE9BRF8wX0VSUjhf
U0hJRlQpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfQ09VTlRFUl9SRUxPQURf
MF9FUlI4X05PUkVMT0FECQkJX01LX0VOVU1fQ09OU1QoMHgwKQ0KPiArI2RlZmluZSBOVkRM
QV9HRUNfRVJSU0xJQ0UwX0NPVU5URVJfUkVMT0FEXzBfRVJSOF9SRUxPQUQJCQlfTUtfRU5V
TV9DT05TVCgweDEpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfQ09VTlRFUl9S
RUxPQURfMF9FUlI5X1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDkpDQo+ICsjZGVmaW5lIE5W
RExBX0dFQ19FUlJTTElDRTBfQ09VTlRFUl9SRUxPQURfMF9FUlI5X0ZJRUxECQkJX01LX0ZJ
RUxEX0NPTlNUKDB4MSwgTlZETEFfR0VDX0VSUlNMSUNFMF9DT1VOVEVSX1JFTE9BRF8wX0VS
UjlfU0hJRlQpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfQ09VTlRFUl9SRUxP
QURfMF9FUlI5X05PUkVMT0FECQkJX01LX0VOVU1fQ09OU1QoMHgwKQ0KPiArI2RlZmluZSBO
VkRMQV9HRUNfRVJSU0xJQ0UwX0NPVU5URVJfUkVMT0FEXzBfRVJSOV9SRUxPQUQJCQlfTUtf
RU5VTV9DT05TVCgweDEpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfQ09VTlRF
Ul9SRUxPQURfMF9FUlIxMF9TSElGVAkJCV9NS19TSElGVF9DT05TVCgxMCkNCj4gKyNkZWZp
bmUgTlZETEFfR0VDX0VSUlNMSUNFMF9DT1VOVEVSX1JFTE9BRF8wX0VSUjEwX0ZJRUxECQkJ
X01LX0ZJRUxEX0NPTlNUKDB4MSwgTlZETEFfR0VDX0VSUlNMSUNFMF9DT1VOVEVSX1JFTE9B
RF8wX0VSUjEwX1NISUZUKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UwX0NPVU5U
RVJfUkVMT0FEXzBfRVJSMTBfTk9SRUxPQUQJCQlfTUtfRU5VTV9DT05TVCgweDApDQo+ICsj
ZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfQ09VTlRFUl9SRUxPQURfMF9FUlIxMF9SRUxP
QUQJCQlfTUtfRU5VTV9DT05TVCgweDEpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElD
RTBfQ09VTlRFUl9SRUxPQURfMF9FUlIxMV9TSElGVAkJCV9NS19TSElGVF9DT05TVCgxMSkN
Cj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMF9DT1VOVEVSX1JFTE9BRF8wX0VSUjEx
X0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4MSwgTlZETEFfR0VDX0VSUlNMSUNFMF9DT1VO
VEVSX1JFTE9BRF8wX0VSUjExX1NISUZUKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJ
Q0UwX0NPVU5URVJfUkVMT0FEXzBfRVJSMTFfTk9SRUxPQUQJCQlfTUtfRU5VTV9DT05TVCgw
eDApDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfQ09VTlRFUl9SRUxPQURfMF9F
UlIxMV9SRUxPQUQJCQlfTUtfRU5VTV9DT05TVCgweDEpDQo+ICsjZGVmaW5lIE5WRExBX0dF
Q19FUlJTTElDRTBfQ09VTlRFUl9SRUxPQURfMF9FUlIxMl9TSElGVAkJCV9NS19TSElGVF9D
T05TVCgxMikNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMF9DT1VOVEVSX1JFTE9B
RF8wX0VSUjEyX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4MSwgTlZETEFfR0VDX0VSUlNM
SUNFMF9DT1VOVEVSX1JFTE9BRF8wX0VSUjEyX1NISUZUKQ0KPiArI2RlZmluZSBOVkRMQV9H
RUNfRVJSU0xJQ0UwX0NPVU5URVJfUkVMT0FEXzBfRVJSMTJfTk9SRUxPQUQJCQlfTUtfRU5V
TV9DT05TVCgweDApDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfQ09VTlRFUl9S
RUxPQURfMF9FUlIxMl9SRUxPQUQJCQlfTUtfRU5VTV9DT05TVCgweDEpDQo+ICsjZGVmaW5l
IE5WRExBX0dFQ19FUlJTTElDRTBfQ09VTlRFUl9SRUxPQURfMF9FUlIxM19TSElGVAkJCV9N
S19TSElGVF9DT05TVCgxMykNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMF9DT1VO
VEVSX1JFTE9BRF8wX0VSUjEzX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4MSwgTlZETEFf
R0VDX0VSUlNMSUNFMF9DT1VOVEVSX1JFTE9BRF8wX0VSUjEzX1NISUZUKQ0KPiArI2RlZmlu
ZSBOVkRMQV9HRUNfRVJSU0xJQ0UwX0NPVU5URVJfUkVMT0FEXzBfRVJSMTNfTk9SRUxPQUQJ
CQlfTUtfRU5VTV9DT05TVCgweDApDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBf
Q09VTlRFUl9SRUxPQURfMF9FUlIxM19SRUxPQUQJCQlfTUtfRU5VTV9DT05TVCgweDEpDQo+
ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfQ09VTlRFUl9SRUxPQURfMF9FUlIxNF9T
SElGVAkJCV9NS19TSElGVF9DT05TVCgxNCkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNM
SUNFMF9DT1VOVEVSX1JFTE9BRF8wX0VSUjE0X0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4
MSwgTlZETEFfR0VDX0VSUlNMSUNFMF9DT1VOVEVSX1JFTE9BRF8wX0VSUjE0X1NISUZUKQ0K
PiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UwX0NPVU5URVJfUkVMT0FEXzBfRVJSMTRf
Tk9SRUxPQUQJCQlfTUtfRU5VTV9DT05TVCgweDApDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19F
UlJTTElDRTBfQ09VTlRFUl9SRUxPQURfMF9FUlIxNF9SRUxPQUQJCQlfTUtfRU5VTV9DT05T
VCgweDEpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfQ09VTlRFUl9SRUxPQURf
MF9FUlIxNV9TSElGVAkJCV9NS19TSElGVF9DT05TVCgxNSkNCj4gKyNkZWZpbmUgTlZETEFf
R0VDX0VSUlNMSUNFMF9DT1VOVEVSX1JFTE9BRF8wX0VSUjE1X0ZJRUxECQkJX01LX0ZJRUxE
X0NPTlNUKDB4MSwgTlZETEFfR0VDX0VSUlNMSUNFMF9DT1VOVEVSX1JFTE9BRF8wX0VSUjE1
X1NISUZUKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UwX0NPVU5URVJfUkVMT0FE
XzBfRVJSMTVfTk9SRUxPQUQJCQlfTUtfRU5VTV9DT05TVCgweDApDQo+ICsjZGVmaW5lIE5W
RExBX0dFQ19FUlJTTElDRTBfQ09VTlRFUl9SRUxPQURfMF9FUlIxNV9SRUxPQUQJCQlfTUtf
RU5VTV9DT05TVCgweDEpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfQ09VTlRF
Ul9SRUxPQURfMF9FUlIxNl9TSElGVAkJCV9NS19TSElGVF9DT05TVCgxNikNCj4gKyNkZWZp
bmUgTlZETEFfR0VDX0VSUlNMSUNFMF9DT1VOVEVSX1JFTE9BRF8wX0VSUjE2X0ZJRUxECQkJ
X01LX0ZJRUxEX0NPTlNUKDB4MSwgTlZETEFfR0VDX0VSUlNMSUNFMF9DT1VOVEVSX1JFTE9B
RF8wX0VSUjE2X1NISUZUKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UwX0NPVU5U
RVJfUkVMT0FEXzBfRVJSMTZfTk9SRUxPQUQJCQlfTUtfRU5VTV9DT05TVCgweDApDQo+ICsj
ZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfQ09VTlRFUl9SRUxPQURfMF9FUlIxNl9SRUxP
QUQJCQlfTUtfRU5VTV9DT05TVCgweDEpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElD
RTBfQ09VTlRFUl9SRUxPQURfMF9FUlIxN19TSElGVAkJCV9NS19TSElGVF9DT05TVCgxNykN
Cj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMF9DT1VOVEVSX1JFTE9BRF8wX0VSUjE3
X0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4MSwgTlZETEFfR0VDX0VSUlNMSUNFMF9DT1VO
VEVSX1JFTE9BRF8wX0VSUjE3X1NISUZUKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJ
Q0UwX0NPVU5URVJfUkVMT0FEXzBfRVJSMTdfTk9SRUxPQUQJCQlfTUtfRU5VTV9DT05TVCgw
eDApDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfQ09VTlRFUl9SRUxPQURfMF9F
UlIxN19SRUxPQUQJCQlfTUtfRU5VTV9DT05TVCgweDEpDQo+ICsjZGVmaW5lIE5WRExBX0dF
Q19FUlJTTElDRTBfQ09VTlRFUl9SRUxPQURfMF9FUlIxOF9TSElGVAkJCV9NS19TSElGVF9D
T05TVCgxOCkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMF9DT1VOVEVSX1JFTE9B
RF8wX0VSUjE4X0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4MSwgTlZETEFfR0VDX0VSUlNM
SUNFMF9DT1VOVEVSX1JFTE9BRF8wX0VSUjE4X1NISUZUKQ0KPiArI2RlZmluZSBOVkRMQV9H
RUNfRVJSU0xJQ0UwX0NPVU5URVJfUkVMT0FEXzBfRVJSMThfTk9SRUxPQUQJCQlfTUtfRU5V
TV9DT05TVCgweDApDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfQ09VTlRFUl9S
RUxPQURfMF9FUlIxOF9SRUxPQUQJCQlfTUtfRU5VTV9DT05TVCgweDEpDQo+ICsjZGVmaW5l
IE5WRExBX0dFQ19FUlJTTElDRTBfQ09VTlRFUl9SRUxPQURfMF9FUlIxOV9TSElGVAkJCV9N
S19TSElGVF9DT05TVCgxOSkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMF9DT1VO
VEVSX1JFTE9BRF8wX0VSUjE5X0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4MSwgTlZETEFf
R0VDX0VSUlNMSUNFMF9DT1VOVEVSX1JFTE9BRF8wX0VSUjE5X1NISUZUKQ0KPiArI2RlZmlu
ZSBOVkRMQV9HRUNfRVJSU0xJQ0UwX0NPVU5URVJfUkVMT0FEXzBfRVJSMTlfTk9SRUxPQUQJ
CQlfTUtfRU5VTV9DT05TVCgweDApDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBf
Q09VTlRFUl9SRUxPQURfMF9FUlIxOV9SRUxPQUQJCQlfTUtfRU5VTV9DT05TVCgweDEpDQo+
ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfQ09VTlRFUl9SRUxPQURfMF9FUlIyMF9T
SElGVAkJCV9NS19TSElGVF9DT05TVCgyMCkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNM
SUNFMF9DT1VOVEVSX1JFTE9BRF8wX0VSUjIwX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4
MSwgTlZETEFfR0VDX0VSUlNMSUNFMF9DT1VOVEVSX1JFTE9BRF8wX0VSUjIwX1NISUZUKQ0K
PiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UwX0NPVU5URVJfUkVMT0FEXzBfRVJSMjBf
Tk9SRUxPQUQJCQlfTUtfRU5VTV9DT05TVCgweDApDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19F
UlJTTElDRTBfQ09VTlRFUl9SRUxPQURfMF9FUlIyMF9SRUxPQUQJCQlfTUtfRU5VTV9DT05T
VCgweDEpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfQ09VTlRFUl9SRUxPQURf
MF9FUlIyMV9TSElGVAkJCV9NS19TSElGVF9DT05TVCgyMSkNCj4gKyNkZWZpbmUgTlZETEFf
R0VDX0VSUlNMSUNFMF9DT1VOVEVSX1JFTE9BRF8wX0VSUjIxX0ZJRUxECQkJX01LX0ZJRUxE
X0NPTlNUKDB4MSwgTlZETEFfR0VDX0VSUlNMSUNFMF9DT1VOVEVSX1JFTE9BRF8wX0VSUjIx
X1NISUZUKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UwX0NPVU5URVJfUkVMT0FE
XzBfRVJSMjFfTk9SRUxPQUQJCQlfTUtfRU5VTV9DT05TVCgweDApDQo+ICsjZGVmaW5lIE5W
RExBX0dFQ19FUlJTTElDRTBfQ09VTlRFUl9SRUxPQURfMF9FUlIyMV9SRUxPQUQJCQlfTUtf
RU5VTV9DT05TVCgweDEpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfQ09VTlRF
Ul9SRUxPQURfMF9FUlIyMl9TSElGVAkJCV9NS19TSElGVF9DT05TVCgyMikNCj4gKyNkZWZp
bmUgTlZETEFfR0VDX0VSUlNMSUNFMF9DT1VOVEVSX1JFTE9BRF8wX0VSUjIyX0ZJRUxECQkJ
X01LX0ZJRUxEX0NPTlNUKDB4MSwgTlZETEFfR0VDX0VSUlNMSUNFMF9DT1VOVEVSX1JFTE9B
RF8wX0VSUjIyX1NISUZUKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UwX0NPVU5U
RVJfUkVMT0FEXzBfRVJSMjJfTk9SRUxPQUQJCQlfTUtfRU5VTV9DT05TVCgweDApDQo+ICsj
ZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfQ09VTlRFUl9SRUxPQURfMF9FUlIyMl9SRUxP
QUQJCQlfTUtfRU5VTV9DT05TVCgweDEpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElD
RTBfQ09VTlRFUl9SRUxPQURfMF9FUlIyM19TSElGVAkJCV9NS19TSElGVF9DT05TVCgyMykN
Cj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMF9DT1VOVEVSX1JFTE9BRF8wX0VSUjIz
X0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4MSwgTlZETEFfR0VDX0VSUlNMSUNFMF9DT1VO
VEVSX1JFTE9BRF8wX0VSUjIzX1NISUZUKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJ
Q0UwX0NPVU5URVJfUkVMT0FEXzBfRVJSMjNfTk9SRUxPQUQJCQlfTUtfRU5VTV9DT05TVCgw
eDApDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfQ09VTlRFUl9SRUxPQURfMF9F
UlIyM19SRUxPQUQJCQlfTUtfRU5VTV9DT05TVCgweDEpDQo+ICsjZGVmaW5lIE5WRExBX0dF
Q19FUlJTTElDRTBfQ09VTlRFUl9SRUxPQURfMF9FUlIyNF9TSElGVAkJCV9NS19TSElGVF9D
T05TVCgyNCkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMF9DT1VOVEVSX1JFTE9B
RF8wX0VSUjI0X0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4MSwgTlZETEFfR0VDX0VSUlNM
SUNFMF9DT1VOVEVSX1JFTE9BRF8wX0VSUjI0X1NISUZUKQ0KPiArI2RlZmluZSBOVkRMQV9H
RUNfRVJSU0xJQ0UwX0NPVU5URVJfUkVMT0FEXzBfRVJSMjRfTk9SRUxPQUQJCQlfTUtfRU5V
TV9DT05TVCgweDApDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfQ09VTlRFUl9S
RUxPQURfMF9FUlIyNF9SRUxPQUQJCQlfTUtfRU5VTV9DT05TVCgweDEpDQo+ICsjZGVmaW5l
IE5WRExBX0dFQ19FUlJTTElDRTBfQ09VTlRFUl9SRUxPQURfMF9FUlIyNV9TSElGVAkJCV9N
S19TSElGVF9DT05TVCgyNSkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMF9DT1VO
VEVSX1JFTE9BRF8wX0VSUjI1X0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4MSwgTlZETEFf
R0VDX0VSUlNMSUNFMF9DT1VOVEVSX1JFTE9BRF8wX0VSUjI1X1NISUZUKQ0KPiArI2RlZmlu
ZSBOVkRMQV9HRUNfRVJSU0xJQ0UwX0NPVU5URVJfUkVMT0FEXzBfRVJSMjVfTk9SRUxPQUQJ
CQlfTUtfRU5VTV9DT05TVCgweDApDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBf
Q09VTlRFUl9SRUxPQURfMF9FUlIyNV9SRUxPQUQJCQlfTUtfRU5VTV9DT05TVCgweDEpDQo+
ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfQ09VTlRFUl9SRUxPQURfMF9FUlIyNl9T
SElGVAkJCV9NS19TSElGVF9DT05TVCgyNikNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNM
SUNFMF9DT1VOVEVSX1JFTE9BRF8wX0VSUjI2X0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4
MSwgTlZETEFfR0VDX0VSUlNMSUNFMF9DT1VOVEVSX1JFTE9BRF8wX0VSUjI2X1NISUZUKQ0K
PiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UwX0NPVU5URVJfUkVMT0FEXzBfRVJSMjZf
Tk9SRUxPQUQJCQlfTUtfRU5VTV9DT05TVCgweDApDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19F
UlJTTElDRTBfQ09VTlRFUl9SRUxPQURfMF9FUlIyNl9SRUxPQUQJCQlfTUtfRU5VTV9DT05T
VCgweDEpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfQ09VTlRFUl9SRUxPQURf
MF9FUlIyN19TSElGVAkJCV9NS19TSElGVF9DT05TVCgyNykNCj4gKyNkZWZpbmUgTlZETEFf
R0VDX0VSUlNMSUNFMF9DT1VOVEVSX1JFTE9BRF8wX0VSUjI3X0ZJRUxECQkJX01LX0ZJRUxE
X0NPTlNUKDB4MSwgTlZETEFfR0VDX0VSUlNMSUNFMF9DT1VOVEVSX1JFTE9BRF8wX0VSUjI3
X1NISUZUKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UwX0NPVU5URVJfUkVMT0FE
XzBfRVJSMjdfTk9SRUxPQUQJCQlfTUtfRU5VTV9DT05TVCgweDApDQo+ICsjZGVmaW5lIE5W
RExBX0dFQ19FUlJTTElDRTBfQ09VTlRFUl9SRUxPQURfMF9FUlIyN19SRUxPQUQJCQlfTUtf
RU5VTV9DT05TVCgweDEpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfQ09VTlRF
Ul9SRUxPQURfMF9FUlIyOF9TSElGVAkJCV9NS19TSElGVF9DT05TVCgyOCkNCj4gKyNkZWZp
bmUgTlZETEFfR0VDX0VSUlNMSUNFMF9DT1VOVEVSX1JFTE9BRF8wX0VSUjI4X0ZJRUxECQkJ
X01LX0ZJRUxEX0NPTlNUKDB4MSwgTlZETEFfR0VDX0VSUlNMSUNFMF9DT1VOVEVSX1JFTE9B
RF8wX0VSUjI4X1NISUZUKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UwX0NPVU5U
RVJfUkVMT0FEXzBfRVJSMjhfTk9SRUxPQUQJCQlfTUtfRU5VTV9DT05TVCgweDApDQo+ICsj
ZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfQ09VTlRFUl9SRUxPQURfMF9FUlIyOF9SRUxP
QUQJCQlfTUtfRU5VTV9DT05TVCgweDEpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElD
RTBfQ09VTlRFUl9SRUxPQURfMF9FUlIyOV9TSElGVAkJCV9NS19TSElGVF9DT05TVCgyOSkN
Cj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMF9DT1VOVEVSX1JFTE9BRF8wX0VSUjI5
X0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4MSwgTlZETEFfR0VDX0VSUlNMSUNFMF9DT1VO
VEVSX1JFTE9BRF8wX0VSUjI5X1NISUZUKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJ
Q0UwX0NPVU5URVJfUkVMT0FEXzBfRVJSMjlfTk9SRUxPQUQJCQlfTUtfRU5VTV9DT05TVCgw
eDApDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfQ09VTlRFUl9SRUxPQURfMF9F
UlIyOV9SRUxPQUQJCQlfTUtfRU5VTV9DT05TVCgweDEpDQo+ICsjZGVmaW5lIE5WRExBX0dF
Q19FUlJTTElDRTBfQ09VTlRFUl9SRUxPQURfMF9FUlIzMF9TSElGVAkJCV9NS19TSElGVF9D
T05TVCgzMCkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMF9DT1VOVEVSX1JFTE9B
RF8wX0VSUjMwX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4MSwgTlZETEFfR0VDX0VSUlNM
SUNFMF9DT1VOVEVSX1JFTE9BRF8wX0VSUjMwX1NISUZUKQ0KPiArI2RlZmluZSBOVkRMQV9H
RUNfRVJSU0xJQ0UwX0NPVU5URVJfUkVMT0FEXzBfRVJSMzBfTk9SRUxPQUQJCQlfTUtfRU5V
TV9DT05TVCgweDApDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBfQ09VTlRFUl9S
RUxPQURfMF9FUlIzMF9SRUxPQUQJCQlfTUtfRU5VTV9DT05TVCgweDEpDQo+ICsjZGVmaW5l
IE5WRExBX0dFQ19FUlJTTElDRTBfQ09VTlRFUl9SRUxPQURfMF9FUlIzMV9TSElGVAkJCV9N
S19TSElGVF9DT05TVCgzMSkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMF9DT1VO
VEVSX1JFTE9BRF8wX0VSUjMxX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4MSwgTlZETEFf
R0VDX0VSUlNMSUNFMF9DT1VOVEVSX1JFTE9BRF8wX0VSUjMxX1NISUZUKQ0KPiArI2RlZmlu
ZSBOVkRMQV9HRUNfRVJSU0xJQ0UwX0NPVU5URVJfUkVMT0FEXzBfRVJSMzFfTk9SRUxPQUQJ
CQlfTUtfRU5VTV9DT05TVCgweDApDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTBf
Q09VTlRFUl9SRUxPQURfMF9FUlIzMV9SRUxPQUQJCQlfTUtfRU5VTV9DT05TVCgweDEpDQo+
ICsNCj4gKw0KPiArLy8gUmVnaXN0ZXIgTlZETEFfR0VDX0VSUlNMSUNFMV9NSVNTSU9ORVJS
X0VOQUJMRV8wDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFfTUlTU0lPTkVSUl9F
TkFCTEVfMAkJCV9NS19BRERSX0NPTlNUKDB4ZTA2MCkNCj4gKyNkZWZpbmUgTlZETEFfR0VD
X0VSUlNMSUNFMV9NSVNTSU9ORVJSX0VOQUJMRV8wX0VSUjMyX1NISUZUCQkJX01LX1NISUZU
X0NPTlNUKDApDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFfTUlTU0lPTkVSUl9F
TkFCTEVfMF9FUlIzMl9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweDEsIE5WRExBX0dFQ19F
UlJTTElDRTFfTUlTU0lPTkVSUl9FTkFCTEVfMF9FUlIzMl9TSElGVCkNCj4gKyNkZWZpbmUg
TlZETEFfR0VDX0VSUlNMSUNFMV9NSVNTSU9ORVJSX0VOQUJMRV8wX0VSUjMyX0RJU0FCTEUJ
CQlfTUtfRU5VTV9DT05TVCgweDApDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFf
TUlTU0lPTkVSUl9FTkFCTEVfMF9FUlIzMl9FTkFCTEUJCQlfTUtfRU5VTV9DT05TVCgweDEp
DQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFfTUlTU0lPTkVSUl9FTkFCTEVfMF9F
UlIzM19TSElGVAkJCV9NS19TSElGVF9DT05TVCgxKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNf
RVJSU0xJQ0UxX01JU1NJT05FUlJfRU5BQkxFXzBfRVJSMzNfRklFTEQJCQlfTUtfRklFTERf
Q09OU1QoMHgxLCBOVkRMQV9HRUNfRVJSU0xJQ0UxX01JU1NJT05FUlJfRU5BQkxFXzBfRVJS
MzNfU0hJRlQpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFfTUlTU0lPTkVSUl9F
TkFCTEVfMF9FUlIzM19ESVNBQkxFCQkJX01LX0VOVU1fQ09OU1QoMHgwKQ0KPiArI2RlZmlu
ZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX01JU1NJT05FUlJfRU5BQkxFXzBfRVJSMzNfRU5BQkxF
CQkJX01LX0VOVU1fQ09OU1QoMHgxKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0Ux
X01JU1NJT05FUlJfRU5BQkxFXzBfRVJSMzRfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMikN
Cj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMV9NSVNTSU9ORVJSX0VOQUJMRV8wX0VS
UjM0X0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4MSwgTlZETEFfR0VDX0VSUlNMSUNFMV9N
SVNTSU9ORVJSX0VOQUJMRV8wX0VSUjM0X1NISUZUKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNf
RVJSU0xJQ0UxX01JU1NJT05FUlJfRU5BQkxFXzBfRVJSMzRfRElTQUJMRQkJCV9NS19FTlVN
X0NPTlNUKDB4MCkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMV9NSVNTSU9ORVJS
X0VOQUJMRV8wX0VSUjM0X0VOQUJMRQkJCV9NS19FTlVNX0NPTlNUKDB4MSkNCj4gKyNkZWZp
bmUgTlZETEFfR0VDX0VSUlNMSUNFMV9NSVNTSU9ORVJSX0VOQUJMRV8wX0VSUjM1X1NISUZU
CQkJX01LX1NISUZUX0NPTlNUKDMpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFf
TUlTU0lPTkVSUl9FTkFCTEVfMF9FUlIzNV9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweDEs
IE5WRExBX0dFQ19FUlJTTElDRTFfTUlTU0lPTkVSUl9FTkFCTEVfMF9FUlIzNV9TSElGVCkN
Cj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMV9NSVNTSU9ORVJSX0VOQUJMRV8wX0VS
UjM1X0RJU0FCTEUJCQlfTUtfRU5VTV9DT05TVCgweDApDQo+ICsjZGVmaW5lIE5WRExBX0dF
Q19FUlJTTElDRTFfTUlTU0lPTkVSUl9FTkFCTEVfMF9FUlIzNV9FTkFCTEUJCQlfTUtfRU5V
TV9DT05TVCgweDEpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFfTUlTU0lPTkVS
Ul9FTkFCTEVfMF9FUlIzNl9TSElGVAkJCV9NS19TSElGVF9DT05TVCg0KQ0KPiArI2RlZmlu
ZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX01JU1NJT05FUlJfRU5BQkxFXzBfRVJSMzZfRklFTEQJ
CQlfTUtfRklFTERfQ09OU1QoMHgxLCBOVkRMQV9HRUNfRVJSU0xJQ0UxX01JU1NJT05FUlJf
RU5BQkxFXzBfRVJSMzZfU0hJRlQpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFf
TUlTU0lPTkVSUl9FTkFCTEVfMF9FUlIzNl9ESVNBQkxFCQkJX01LX0VOVU1fQ09OU1QoMHgw
KQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX01JU1NJT05FUlJfRU5BQkxFXzBf
RVJSMzZfRU5BQkxFCQkJX01LX0VOVU1fQ09OU1QoMHgxKQ0KPiArI2RlZmluZSBOVkRMQV9H
RUNfRVJSU0xJQ0UxX01JU1NJT05FUlJfRU5BQkxFXzBfRVJSMzdfU0hJRlQJCQlfTUtfU0hJ
RlRfQ09OU1QoNSkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMV9NSVNTSU9ORVJS
X0VOQUJMRV8wX0VSUjM3X0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4MSwgTlZETEFfR0VD
X0VSUlNMSUNFMV9NSVNTSU9ORVJSX0VOQUJMRV8wX0VSUjM3X1NISUZUKQ0KPiArI2RlZmlu
ZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX01JU1NJT05FUlJfRU5BQkxFXzBfRVJSMzdfRElTQUJM
RQkJCV9NS19FTlVNX0NPTlNUKDB4MCkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNF
MV9NSVNTSU9ORVJSX0VOQUJMRV8wX0VSUjM3X0VOQUJMRQkJCV9NS19FTlVNX0NPTlNUKDB4
MSkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMV9NSVNTSU9ORVJSX0VOQUJMRV8w
X0VSUjM4X1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDYpDQo+ICsjZGVmaW5lIE5WRExBX0dF
Q19FUlJTTElDRTFfTUlTU0lPTkVSUl9FTkFCTEVfMF9FUlIzOF9GSUVMRAkJCV9NS19GSUVM
RF9DT05TVCgweDEsIE5WRExBX0dFQ19FUlJTTElDRTFfTUlTU0lPTkVSUl9FTkFCTEVfMF9F
UlIzOF9TSElGVCkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMV9NSVNTSU9ORVJS
X0VOQUJMRV8wX0VSUjM4X0RJU0FCTEUJCQlfTUtfRU5VTV9DT05TVCgweDApDQo+ICsjZGVm
aW5lIE5WRExBX0dFQ19FUlJTTElDRTFfTUlTU0lPTkVSUl9FTkFCTEVfMF9FUlIzOF9FTkFC
TEUJCQlfTUtfRU5VTV9DT05TVCgweDEpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElD
RTFfTUlTU0lPTkVSUl9FTkFCTEVfMF9FUlIzOV9TSElGVAkJCV9NS19TSElGVF9DT05TVCg3
KQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX01JU1NJT05FUlJfRU5BQkxFXzBf
RVJSMzlfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHgxLCBOVkRMQV9HRUNfRVJSU0xJQ0Ux
X01JU1NJT05FUlJfRU5BQkxFXzBfRVJSMzlfU0hJRlQpDQo+ICsjZGVmaW5lIE5WRExBX0dF
Q19FUlJTTElDRTFfTUlTU0lPTkVSUl9FTkFCTEVfMF9FUlIzOV9ESVNBQkxFCQkJX01LX0VO
VU1fQ09OU1QoMHgwKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX01JU1NJT05F
UlJfRU5BQkxFXzBfRVJSMzlfRU5BQkxFCQkJX01LX0VOVU1fQ09OU1QoMHgxKQ0KPiArI2Rl
ZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX01JU1NJT05FUlJfRU5BQkxFXzBfRVJSNDBfU0hJ
RlQJCQlfTUtfU0hJRlRfQ09OU1QoOCkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNF
MV9NSVNTSU9ORVJSX0VOQUJMRV8wX0VSUjQwX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4
MSwgTlZETEFfR0VDX0VSUlNMSUNFMV9NSVNTSU9ORVJSX0VOQUJMRV8wX0VSUjQwX1NISUZU
KQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX01JU1NJT05FUlJfRU5BQkxFXzBf
RVJSNDBfRElTQUJMRQkJCV9NS19FTlVNX0NPTlNUKDB4MCkNCj4gKyNkZWZpbmUgTlZETEFf
R0VDX0VSUlNMSUNFMV9NSVNTSU9ORVJSX0VOQUJMRV8wX0VSUjQwX0VOQUJMRQkJCV9NS19F
TlVNX0NPTlNUKDB4MSkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMV9NSVNTSU9O
RVJSX0VOQUJMRV8wX0VSUjQxX1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDkpDQo+ICsjZGVm
aW5lIE5WRExBX0dFQ19FUlJTTElDRTFfTUlTU0lPTkVSUl9FTkFCTEVfMF9FUlI0MV9GSUVM
RAkJCV9NS19GSUVMRF9DT05TVCgweDEsIE5WRExBX0dFQ19FUlJTTElDRTFfTUlTU0lPTkVS
Ul9FTkFCTEVfMF9FUlI0MV9TSElGVCkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNF
MV9NSVNTSU9ORVJSX0VOQUJMRV8wX0VSUjQxX0RJU0FCTEUJCQlfTUtfRU5VTV9DT05TVCgw
eDApDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFfTUlTU0lPTkVSUl9FTkFCTEVf
MF9FUlI0MV9FTkFCTEUJCQlfTUtfRU5VTV9DT05TVCgweDEpDQo+ICsjZGVmaW5lIE5WRExB
X0dFQ19FUlJTTElDRTFfTUlTU0lPTkVSUl9FTkFCTEVfMF9FUlI0Ml9TSElGVAkJCV9NS19T
SElGVF9DT05TVCgxMCkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMV9NSVNTSU9O
RVJSX0VOQUJMRV8wX0VSUjQyX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4MSwgTlZETEFf
R0VDX0VSUlNMSUNFMV9NSVNTSU9ORVJSX0VOQUJMRV8wX0VSUjQyX1NISUZUKQ0KPiArI2Rl
ZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX01JU1NJT05FUlJfRU5BQkxFXzBfRVJSNDJfRElT
QUJMRQkJCV9NS19FTlVNX0NPTlNUKDB4MCkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNM
SUNFMV9NSVNTSU9ORVJSX0VOQUJMRV8wX0VSUjQyX0VOQUJMRQkJCV9NS19FTlVNX0NPTlNU
KDB4MSkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMV9NSVNTSU9ORVJSX0VOQUJM
RV8wX0VSUjQzX1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDExKQ0KPiArI2RlZmluZSBOVkRM
QV9HRUNfRVJSU0xJQ0UxX01JU1NJT05FUlJfRU5BQkxFXzBfRVJSNDNfRklFTEQJCQlfTUtf
RklFTERfQ09OU1QoMHgxLCBOVkRMQV9HRUNfRVJSU0xJQ0UxX01JU1NJT05FUlJfRU5BQkxF
XzBfRVJSNDNfU0hJRlQpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFfTUlTU0lP
TkVSUl9FTkFCTEVfMF9FUlI0M19ESVNBQkxFCQkJX01LX0VOVU1fQ09OU1QoMHgwKQ0KPiAr
I2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX01JU1NJT05FUlJfRU5BQkxFXzBfRVJSNDNf
RU5BQkxFCQkJX01LX0VOVU1fQ09OU1QoMHgxKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJS
U0xJQ0UxX01JU1NJT05FUlJfRU5BQkxFXzBfRVJSNDRfU0hJRlQJCQlfTUtfU0hJRlRfQ09O
U1QoMTIpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFfTUlTU0lPTkVSUl9FTkFC
TEVfMF9FUlI0NF9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweDEsIE5WRExBX0dFQ19FUlJT
TElDRTFfTUlTU0lPTkVSUl9FTkFCTEVfMF9FUlI0NF9TSElGVCkNCj4gKyNkZWZpbmUgTlZE
TEFfR0VDX0VSUlNMSUNFMV9NSVNTSU9ORVJSX0VOQUJMRV8wX0VSUjQ0X0RJU0FCTEUJCQlf
TUtfRU5VTV9DT05TVCgweDApDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFfTUlT
U0lPTkVSUl9FTkFCTEVfMF9FUlI0NF9FTkFCTEUJCQlfTUtfRU5VTV9DT05TVCgweDEpDQo+
ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFfTUlTU0lPTkVSUl9FTkFCTEVfMF9FUlI0
NV9TSElGVAkJCV9NS19TSElGVF9DT05TVCgxMykNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VS
UlNMSUNFMV9NSVNTSU9ORVJSX0VOQUJMRV8wX0VSUjQ1X0ZJRUxECQkJX01LX0ZJRUxEX0NP
TlNUKDB4MSwgTlZETEFfR0VDX0VSUlNMSUNFMV9NSVNTSU9ORVJSX0VOQUJMRV8wX0VSUjQ1
X1NISUZUKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX01JU1NJT05FUlJfRU5B
QkxFXzBfRVJSNDVfRElTQUJMRQkJCV9NS19FTlVNX0NPTlNUKDB4MCkNCj4gKyNkZWZpbmUg
TlZETEFfR0VDX0VSUlNMSUNFMV9NSVNTSU9ORVJSX0VOQUJMRV8wX0VSUjQ1X0VOQUJMRQkJ
CV9NS19FTlVNX0NPTlNUKDB4MSkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMV9N
SVNTSU9ORVJSX0VOQUJMRV8wX0VSUjQ2X1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDE0KQ0K
PiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX01JU1NJT05FUlJfRU5BQkxFXzBfRVJS
NDZfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHgxLCBOVkRMQV9HRUNfRVJSU0xJQ0UxX01J
U1NJT05FUlJfRU5BQkxFXzBfRVJSNDZfU0hJRlQpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19F
UlJTTElDRTFfTUlTU0lPTkVSUl9FTkFCTEVfMF9FUlI0Nl9ESVNBQkxFCQkJX01LX0VOVU1f
Q09OU1QoMHgwKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX01JU1NJT05FUlJf
RU5BQkxFXzBfRVJSNDZfRU5BQkxFCQkJX01LX0VOVU1fQ09OU1QoMHgxKQ0KPiArI2RlZmlu
ZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX01JU1NJT05FUlJfRU5BQkxFXzBfRVJSNDdfU0hJRlQJ
CQlfTUtfU0hJRlRfQ09OU1QoMTUpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFf
TUlTU0lPTkVSUl9FTkFCTEVfMF9FUlI0N19GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweDEs
IE5WRExBX0dFQ19FUlJTTElDRTFfTUlTU0lPTkVSUl9FTkFCTEVfMF9FUlI0N19TSElGVCkN
Cj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMV9NSVNTSU9ORVJSX0VOQUJMRV8wX0VS
UjQ3X0RJU0FCTEUJCQlfTUtfRU5VTV9DT05TVCgweDApDQo+ICsjZGVmaW5lIE5WRExBX0dF
Q19FUlJTTElDRTFfTUlTU0lPTkVSUl9FTkFCTEVfMF9FUlI0N19FTkFCTEUJCQlfTUtfRU5V
TV9DT05TVCgweDEpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFfTUlTU0lPTkVS
Ul9FTkFCTEVfMF9FUlI0OF9TSElGVAkJCV9NS19TSElGVF9DT05TVCgxNikNCj4gKyNkZWZp
bmUgTlZETEFfR0VDX0VSUlNMSUNFMV9NSVNTSU9ORVJSX0VOQUJMRV8wX0VSUjQ4X0ZJRUxE
CQkJX01LX0ZJRUxEX0NPTlNUKDB4MSwgTlZETEFfR0VDX0VSUlNMSUNFMV9NSVNTSU9ORVJS
X0VOQUJMRV8wX0VSUjQ4X1NISUZUKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0Ux
X01JU1NJT05FUlJfRU5BQkxFXzBfRVJSNDhfRElTQUJMRQkJCV9NS19FTlVNX0NPTlNUKDB4
MCkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMV9NSVNTSU9ORVJSX0VOQUJMRV8w
X0VSUjQ4X0VOQUJMRQkJCV9NS19FTlVNX0NPTlNUKDB4MSkNCj4gKyNkZWZpbmUgTlZETEFf
R0VDX0VSUlNMSUNFMV9NSVNTSU9ORVJSX0VOQUJMRV8wX0VSUjQ5X1NISUZUCQkJX01LX1NI
SUZUX0NPTlNUKDE3KQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX01JU1NJT05F
UlJfRU5BQkxFXzBfRVJSNDlfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHgxLCBOVkRMQV9H
RUNfRVJSU0xJQ0UxX01JU1NJT05FUlJfRU5BQkxFXzBfRVJSNDlfU0hJRlQpDQo+ICsjZGVm
aW5lIE5WRExBX0dFQ19FUlJTTElDRTFfTUlTU0lPTkVSUl9FTkFCTEVfMF9FUlI0OV9ESVNB
QkxFCQkJX01LX0VOVU1fQ09OU1QoMHgwKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJ
Q0UxX01JU1NJT05FUlJfRU5BQkxFXzBfRVJSNDlfRU5BQkxFCQkJX01LX0VOVU1fQ09OU1Qo
MHgxKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX01JU1NJT05FUlJfRU5BQkxF
XzBfRVJSNTBfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMTgpDQo+ICsjZGVmaW5lIE5WRExB
X0dFQ19FUlJTTElDRTFfTUlTU0lPTkVSUl9FTkFCTEVfMF9FUlI1MF9GSUVMRAkJCV9NS19G
SUVMRF9DT05TVCgweDEsIE5WRExBX0dFQ19FUlJTTElDRTFfTUlTU0lPTkVSUl9FTkFCTEVf
MF9FUlI1MF9TSElGVCkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMV9NSVNTSU9O
RVJSX0VOQUJMRV8wX0VSUjUwX0RJU0FCTEUJCQlfTUtfRU5VTV9DT05TVCgweDApDQo+ICsj
ZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFfTUlTU0lPTkVSUl9FTkFCTEVfMF9FUlI1MF9F
TkFCTEUJCQlfTUtfRU5VTV9DT05TVCgweDEpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJT
TElDRTFfTUlTU0lPTkVSUl9FTkFCTEVfMF9FUlI1MV9TSElGVAkJCV9NS19TSElGVF9DT05T
VCgxOSkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMV9NSVNTSU9ORVJSX0VOQUJM
RV8wX0VSUjUxX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4MSwgTlZETEFfR0VDX0VSUlNM
SUNFMV9NSVNTSU9ORVJSX0VOQUJMRV8wX0VSUjUxX1NISUZUKQ0KPiArI2RlZmluZSBOVkRM
QV9HRUNfRVJSU0xJQ0UxX01JU1NJT05FUlJfRU5BQkxFXzBfRVJSNTFfRElTQUJMRQkJCV9N
S19FTlVNX0NPTlNUKDB4MCkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMV9NSVNT
SU9ORVJSX0VOQUJMRV8wX0VSUjUxX0VOQUJMRQkJCV9NS19FTlVNX0NPTlNUKDB4MSkNCj4g
KyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMV9NSVNTSU9ORVJSX0VOQUJMRV8wX0VSUjUy
X1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDIwKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJS
U0xJQ0UxX01JU1NJT05FUlJfRU5BQkxFXzBfRVJSNTJfRklFTEQJCQlfTUtfRklFTERfQ09O
U1QoMHgxLCBOVkRMQV9HRUNfRVJSU0xJQ0UxX01JU1NJT05FUlJfRU5BQkxFXzBfRVJSNTJf
U0hJRlQpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFfTUlTU0lPTkVSUl9FTkFC
TEVfMF9FUlI1Ml9ESVNBQkxFCQkJX01LX0VOVU1fQ09OU1QoMHgwKQ0KPiArI2RlZmluZSBO
VkRMQV9HRUNfRVJSU0xJQ0UxX01JU1NJT05FUlJfRU5BQkxFXzBfRVJSNTJfRU5BQkxFCQkJ
X01LX0VOVU1fQ09OU1QoMHgxKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX01J
U1NJT05FUlJfRU5BQkxFXzBfRVJSNTNfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMjEpDQo+
ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFfTUlTU0lPTkVSUl9FTkFCTEVfMF9FUlI1
M19GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweDEsIE5WRExBX0dFQ19FUlJTTElDRTFfTUlT
U0lPTkVSUl9FTkFCTEVfMF9FUlI1M19TSElGVCkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VS
UlNMSUNFMV9NSVNTSU9ORVJSX0VOQUJMRV8wX0VSUjUzX0RJU0FCTEUJCQlfTUtfRU5VTV9D
T05TVCgweDApDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFfTUlTU0lPTkVSUl9F
TkFCTEVfMF9FUlI1M19FTkFCTEUJCQlfTUtfRU5VTV9DT05TVCgweDEpDQo+ICsjZGVmaW5l
IE5WRExBX0dFQ19FUlJTTElDRTFfTUlTU0lPTkVSUl9FTkFCTEVfMF9FUlI1NF9TSElGVAkJ
CV9NS19TSElGVF9DT05TVCgyMikNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMV9N
SVNTSU9ORVJSX0VOQUJMRV8wX0VSUjU0X0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4MSwg
TlZETEFfR0VDX0VSUlNMSUNFMV9NSVNTSU9ORVJSX0VOQUJMRV8wX0VSUjU0X1NISUZUKQ0K
PiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX01JU1NJT05FUlJfRU5BQkxFXzBfRVJS
NTRfRElTQUJMRQkJCV9NS19FTlVNX0NPTlNUKDB4MCkNCj4gKyNkZWZpbmUgTlZETEFfR0VD
X0VSUlNMSUNFMV9NSVNTSU9ORVJSX0VOQUJMRV8wX0VSUjU0X0VOQUJMRQkJCV9NS19FTlVN
X0NPTlNUKDB4MSkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMV9NSVNTSU9ORVJS
X0VOQUJMRV8wX0VSUjU1X1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDIzKQ0KPiArI2RlZmlu
ZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX01JU1NJT05FUlJfRU5BQkxFXzBfRVJSNTVfRklFTEQJ
CQlfTUtfRklFTERfQ09OU1QoMHgxLCBOVkRMQV9HRUNfRVJSU0xJQ0UxX01JU1NJT05FUlJf
RU5BQkxFXzBfRVJSNTVfU0hJRlQpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFf
TUlTU0lPTkVSUl9FTkFCTEVfMF9FUlI1NV9ESVNBQkxFCQkJX01LX0VOVU1fQ09OU1QoMHgw
KQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX01JU1NJT05FUlJfRU5BQkxFXzBf
RVJSNTVfRU5BQkxFCQkJX01LX0VOVU1fQ09OU1QoMHgxKQ0KPiArI2RlZmluZSBOVkRMQV9H
RUNfRVJSU0xJQ0UxX01JU1NJT05FUlJfRU5BQkxFXzBfRVJSNTZfU0hJRlQJCQlfTUtfU0hJ
RlRfQ09OU1QoMjQpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFfTUlTU0lPTkVS
Ul9FTkFCTEVfMF9FUlI1Nl9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweDEsIE5WRExBX0dF
Q19FUlJTTElDRTFfTUlTU0lPTkVSUl9FTkFCTEVfMF9FUlI1Nl9TSElGVCkNCj4gKyNkZWZp
bmUgTlZETEFfR0VDX0VSUlNMSUNFMV9NSVNTSU9ORVJSX0VOQUJMRV8wX0VSUjU2X0RJU0FC
TEUJCQlfTUtfRU5VTV9DT05TVCgweDApDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElD
RTFfTUlTU0lPTkVSUl9FTkFCTEVfMF9FUlI1Nl9FTkFCTEUJCQlfTUtfRU5VTV9DT05TVCgw
eDEpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFfTUlTU0lPTkVSUl9FTkFCTEVf
MF9FUlI1N19TSElGVAkJCV9NS19TSElGVF9DT05TVCgyNSkNCj4gKyNkZWZpbmUgTlZETEFf
R0VDX0VSUlNMSUNFMV9NSVNTSU9ORVJSX0VOQUJMRV8wX0VSUjU3X0ZJRUxECQkJX01LX0ZJ
RUxEX0NPTlNUKDB4MSwgTlZETEFfR0VDX0VSUlNMSUNFMV9NSVNTSU9ORVJSX0VOQUJMRV8w
X0VSUjU3X1NISUZUKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX01JU1NJT05F
UlJfRU5BQkxFXzBfRVJSNTdfRElTQUJMRQkJCV9NS19FTlVNX0NPTlNUKDB4MCkNCj4gKyNk
ZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMV9NSVNTSU9ORVJSX0VOQUJMRV8wX0VSUjU3X0VO
QUJMRQkJCV9NS19FTlVNX0NPTlNUKDB4MSkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNM
SUNFMV9NSVNTSU9ORVJSX0VOQUJMRV8wX0VSUjU4X1NISUZUCQkJX01LX1NISUZUX0NPTlNU
KDI2KQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX01JU1NJT05FUlJfRU5BQkxF
XzBfRVJSNThfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHgxLCBOVkRMQV9HRUNfRVJSU0xJ
Q0UxX01JU1NJT05FUlJfRU5BQkxFXzBfRVJSNThfU0hJRlQpDQo+ICsjZGVmaW5lIE5WRExB
X0dFQ19FUlJTTElDRTFfTUlTU0lPTkVSUl9FTkFCTEVfMF9FUlI1OF9ESVNBQkxFCQkJX01L
X0VOVU1fQ09OU1QoMHgwKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX01JU1NJ
T05FUlJfRU5BQkxFXzBfRVJSNThfRU5BQkxFCQkJX01LX0VOVU1fQ09OU1QoMHgxKQ0KPiAr
I2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX01JU1NJT05FUlJfRU5BQkxFXzBfRVJSNTlf
U0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMjcpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJT
TElDRTFfTUlTU0lPTkVSUl9FTkFCTEVfMF9FUlI1OV9GSUVMRAkJCV9NS19GSUVMRF9DT05T
VCgweDEsIE5WRExBX0dFQ19FUlJTTElDRTFfTUlTU0lPTkVSUl9FTkFCTEVfMF9FUlI1OV9T
SElGVCkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMV9NSVNTSU9ORVJSX0VOQUJM
RV8wX0VSUjU5X0RJU0FCTEUJCQlfTUtfRU5VTV9DT05TVCgweDApDQo+ICsjZGVmaW5lIE5W
RExBX0dFQ19FUlJTTElDRTFfTUlTU0lPTkVSUl9FTkFCTEVfMF9FUlI1OV9FTkFCTEUJCQlf
TUtfRU5VTV9DT05TVCgweDEpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFfTUlT
U0lPTkVSUl9FTkFCTEVfMF9FUlI2MF9TSElGVAkJCV9NS19TSElGVF9DT05TVCgyOCkNCj4g
KyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMV9NSVNTSU9ORVJSX0VOQUJMRV8wX0VSUjYw
X0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4MSwgTlZETEFfR0VDX0VSUlNMSUNFMV9NSVNT
SU9ORVJSX0VOQUJMRV8wX0VSUjYwX1NISUZUKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJS
U0xJQ0UxX01JU1NJT05FUlJfRU5BQkxFXzBfRVJSNjBfRElTQUJMRQkJCV9NS19FTlVNX0NP
TlNUKDB4MCkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMV9NSVNTSU9ORVJSX0VO
QUJMRV8wX0VSUjYwX0VOQUJMRQkJCV9NS19FTlVNX0NPTlNUKDB4MSkNCj4gKyNkZWZpbmUg
TlZETEFfR0VDX0VSUlNMSUNFMV9NSVNTSU9ORVJSX0VOQUJMRV8wX0VSUjYxX1NISUZUCQkJ
X01LX1NISUZUX0NPTlNUKDI5KQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX01J
U1NJT05FUlJfRU5BQkxFXzBfRVJSNjFfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHgxLCBO
VkRMQV9HRUNfRVJSU0xJQ0UxX01JU1NJT05FUlJfRU5BQkxFXzBfRVJSNjFfU0hJRlQpDQo+
ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFfTUlTU0lPTkVSUl9FTkFCTEVfMF9FUlI2
MV9ESVNBQkxFCQkJX01LX0VOVU1fQ09OU1QoMHgwKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNf
RVJSU0xJQ0UxX01JU1NJT05FUlJfRU5BQkxFXzBfRVJSNjFfRU5BQkxFCQkJX01LX0VOVU1f
Q09OU1QoMHgxKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX01JU1NJT05FUlJf
RU5BQkxFXzBfRVJSNjJfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMzApDQo+ICsjZGVmaW5l
IE5WRExBX0dFQ19FUlJTTElDRTFfTUlTU0lPTkVSUl9FTkFCTEVfMF9FUlI2Ml9GSUVMRAkJ
CV9NS19GSUVMRF9DT05TVCgweDEsIE5WRExBX0dFQ19FUlJTTElDRTFfTUlTU0lPTkVSUl9F
TkFCTEVfMF9FUlI2Ml9TSElGVCkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMV9N
SVNTSU9ORVJSX0VOQUJMRV8wX0VSUjYyX0RJU0FCTEUJCQlfTUtfRU5VTV9DT05TVCgweDAp
DQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFfTUlTU0lPTkVSUl9FTkFCTEVfMF9F
UlI2Ml9FTkFCTEUJCQlfTUtfRU5VTV9DT05TVCgweDEpDQo+ICsjZGVmaW5lIE5WRExBX0dF
Q19FUlJTTElDRTFfTUlTU0lPTkVSUl9FTkFCTEVfMF9FUlI2M19TSElGVAkJCV9NS19TSElG
VF9DT05TVCgzMSkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMV9NSVNTSU9ORVJS
X0VOQUJMRV8wX0VSUjYzX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4MSwgTlZETEFfR0VD
X0VSUlNMSUNFMV9NSVNTSU9ORVJSX0VOQUJMRV8wX0VSUjYzX1NISUZUKQ0KPiArI2RlZmlu
ZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX01JU1NJT05FUlJfRU5BQkxFXzBfRVJSNjNfRElTQUJM
RQkJCV9NS19FTlVNX0NPTlNUKDB4MCkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNF
MV9NSVNTSU9ORVJSX0VOQUJMRV8wX0VSUjYzX0VOQUJMRQkJCV9NS19FTlVNX0NPTlNUKDB4
MSkNCj4gKw0KPiArDQo+ICsvLyBSZWdpc3RlciBOVkRMQV9HRUNfRVJSU0xJQ0UxX01JU1NJ
T05FUlJfRk9SQ0VfMA0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX01JU1NJT05F
UlJfRk9SQ0VfMAkJCV9NS19BRERSX0NPTlNUKDB4ZTA2NCkNCj4gKyNkZWZpbmUgTlZETEFf
R0VDX0VSUlNMSUNFMV9NSVNTSU9ORVJSX0ZPUkNFXzBfRVJSMzJfU0hJRlQJCQlfTUtfU0hJ
RlRfQ09OU1QoMCkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMV9NSVNTSU9ORVJS
X0ZPUkNFXzBfRVJSMzJfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHgxLCBOVkRMQV9HRUNf
RVJSU0xJQ0UxX01JU1NJT05FUlJfRk9SQ0VfMF9FUlIzMl9TSElGVCkNCj4gKyNkZWZpbmUg
TlZETEFfR0VDX0VSUlNMSUNFMV9NSVNTSU9ORVJSX0ZPUkNFXzBfRVJSMzJfTk9GT1JDRQkJ
CV9NS19FTlVNX0NPTlNUKDB4MCkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMV9N
SVNTSU9ORVJSX0ZPUkNFXzBfRVJSMzJfRk9SQ0UJCQlfTUtfRU5VTV9DT05TVCgweDEpDQo+
ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFfTUlTU0lPTkVSUl9GT1JDRV8wX0VSUjMz
X1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDEpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJT
TElDRTFfTUlTU0lPTkVSUl9GT1JDRV8wX0VSUjMzX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNU
KDB4MSwgTlZETEFfR0VDX0VSUlNMSUNFMV9NSVNTSU9ORVJSX0ZPUkNFXzBfRVJSMzNfU0hJ
RlQpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFfTUlTU0lPTkVSUl9GT1JDRV8w
X0VSUjMzX05PRk9SQ0UJCQlfTUtfRU5VTV9DT05TVCgweDApDQo+ICsjZGVmaW5lIE5WRExB
X0dFQ19FUlJTTElDRTFfTUlTU0lPTkVSUl9GT1JDRV8wX0VSUjMzX0ZPUkNFCQkJX01LX0VO
VU1fQ09OU1QoMHgxKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX01JU1NJT05F
UlJfRk9SQ0VfMF9FUlIzNF9TSElGVAkJCV9NS19TSElGVF9DT05TVCgyKQ0KPiArI2RlZmlu
ZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX01JU1NJT05FUlJfRk9SQ0VfMF9FUlIzNF9GSUVMRAkJ
CV9NS19GSUVMRF9DT05TVCgweDEsIE5WRExBX0dFQ19FUlJTTElDRTFfTUlTU0lPTkVSUl9G
T1JDRV8wX0VSUjM0X1NISUZUKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX01J
U1NJT05FUlJfRk9SQ0VfMF9FUlIzNF9OT0ZPUkNFCQkJX01LX0VOVU1fQ09OU1QoMHgwKQ0K
PiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX01JU1NJT05FUlJfRk9SQ0VfMF9FUlIz
NF9GT1JDRQkJCV9NS19FTlVNX0NPTlNUKDB4MSkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VS
UlNMSUNFMV9NSVNTSU9ORVJSX0ZPUkNFXzBfRVJSMzVfU0hJRlQJCQlfTUtfU0hJRlRfQ09O
U1QoMykNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMV9NSVNTSU9ORVJSX0ZPUkNF
XzBfRVJSMzVfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHgxLCBOVkRMQV9HRUNfRVJSU0xJ
Q0UxX01JU1NJT05FUlJfRk9SQ0VfMF9FUlIzNV9TSElGVCkNCj4gKyNkZWZpbmUgTlZETEFf
R0VDX0VSUlNMSUNFMV9NSVNTSU9ORVJSX0ZPUkNFXzBfRVJSMzVfTk9GT1JDRQkJCV9NS19F
TlVNX0NPTlNUKDB4MCkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMV9NSVNTSU9O
RVJSX0ZPUkNFXzBfRVJSMzVfRk9SQ0UJCQlfTUtfRU5VTV9DT05TVCgweDEpDQo+ICsjZGVm
aW5lIE5WRExBX0dFQ19FUlJTTElDRTFfTUlTU0lPTkVSUl9GT1JDRV8wX0VSUjM2X1NISUZU
CQkJX01LX1NISUZUX0NPTlNUKDQpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFf
TUlTU0lPTkVSUl9GT1JDRV8wX0VSUjM2X0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4MSwg
TlZETEFfR0VDX0VSUlNMSUNFMV9NSVNTSU9ORVJSX0ZPUkNFXzBfRVJSMzZfU0hJRlQpDQo+
ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFfTUlTU0lPTkVSUl9GT1JDRV8wX0VSUjM2
X05PRk9SQ0UJCQlfTUtfRU5VTV9DT05TVCgweDApDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19F
UlJTTElDRTFfTUlTU0lPTkVSUl9GT1JDRV8wX0VSUjM2X0ZPUkNFCQkJX01LX0VOVU1fQ09O
U1QoMHgxKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX01JU1NJT05FUlJfRk9S
Q0VfMF9FUlIzN19TSElGVAkJCV9NS19TSElGVF9DT05TVCg1KQ0KPiArI2RlZmluZSBOVkRM
QV9HRUNfRVJSU0xJQ0UxX01JU1NJT05FUlJfRk9SQ0VfMF9FUlIzN19GSUVMRAkJCV9NS19G
SUVMRF9DT05TVCgweDEsIE5WRExBX0dFQ19FUlJTTElDRTFfTUlTU0lPTkVSUl9GT1JDRV8w
X0VSUjM3X1NISUZUKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX01JU1NJT05F
UlJfRk9SQ0VfMF9FUlIzN19OT0ZPUkNFCQkJX01LX0VOVU1fQ09OU1QoMHgwKQ0KPiArI2Rl
ZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX01JU1NJT05FUlJfRk9SQ0VfMF9FUlIzN19GT1JD
RQkJCV9NS19FTlVNX0NPTlNUKDB4MSkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNF
MV9NSVNTSU9ORVJSX0ZPUkNFXzBfRVJSMzhfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoNikN
Cj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMV9NSVNTSU9ORVJSX0ZPUkNFXzBfRVJS
MzhfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHgxLCBOVkRMQV9HRUNfRVJSU0xJQ0UxX01J
U1NJT05FUlJfRk9SQ0VfMF9FUlIzOF9TSElGVCkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VS
UlNMSUNFMV9NSVNTSU9ORVJSX0ZPUkNFXzBfRVJSMzhfTk9GT1JDRQkJCV9NS19FTlVNX0NP
TlNUKDB4MCkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMV9NSVNTSU9ORVJSX0ZP
UkNFXzBfRVJSMzhfRk9SQ0UJCQlfTUtfRU5VTV9DT05TVCgweDEpDQo+ICsjZGVmaW5lIE5W
RExBX0dFQ19FUlJTTElDRTFfTUlTU0lPTkVSUl9GT1JDRV8wX0VSUjM5X1NISUZUCQkJX01L
X1NISUZUX0NPTlNUKDcpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFfTUlTU0lP
TkVSUl9GT1JDRV8wX0VSUjM5X0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4MSwgTlZETEFf
R0VDX0VSUlNMSUNFMV9NSVNTSU9ORVJSX0ZPUkNFXzBfRVJSMzlfU0hJRlQpDQo+ICsjZGVm
aW5lIE5WRExBX0dFQ19FUlJTTElDRTFfTUlTU0lPTkVSUl9GT1JDRV8wX0VSUjM5X05PRk9S
Q0UJCQlfTUtfRU5VTV9DT05TVCgweDApDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElD
RTFfTUlTU0lPTkVSUl9GT1JDRV8wX0VSUjM5X0ZPUkNFCQkJX01LX0VOVU1fQ09OU1QoMHgx
KQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX01JU1NJT05FUlJfRk9SQ0VfMF9F
UlI0MF9TSElGVAkJCV9NS19TSElGVF9DT05TVCg4KQ0KPiArI2RlZmluZSBOVkRMQV9HRUNf
RVJSU0xJQ0UxX01JU1NJT05FUlJfRk9SQ0VfMF9FUlI0MF9GSUVMRAkJCV9NS19GSUVMRF9D
T05TVCgweDEsIE5WRExBX0dFQ19FUlJTTElDRTFfTUlTU0lPTkVSUl9GT1JDRV8wX0VSUjQw
X1NISUZUKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX01JU1NJT05FUlJfRk9S
Q0VfMF9FUlI0MF9OT0ZPUkNFCQkJX01LX0VOVU1fQ09OU1QoMHgwKQ0KPiArI2RlZmluZSBO
VkRMQV9HRUNfRVJSU0xJQ0UxX01JU1NJT05FUlJfRk9SQ0VfMF9FUlI0MF9GT1JDRQkJCV9N
S19FTlVNX0NPTlNUKDB4MSkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMV9NSVNT
SU9ORVJSX0ZPUkNFXzBfRVJSNDFfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoOSkNCj4gKyNk
ZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMV9NSVNTSU9ORVJSX0ZPUkNFXzBfRVJSNDFfRklF
TEQJCQlfTUtfRklFTERfQ09OU1QoMHgxLCBOVkRMQV9HRUNfRVJSU0xJQ0UxX01JU1NJT05F
UlJfRk9SQ0VfMF9FUlI0MV9TSElGVCkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNF
MV9NSVNTSU9ORVJSX0ZPUkNFXzBfRVJSNDFfTk9GT1JDRQkJCV9NS19FTlVNX0NPTlNUKDB4
MCkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMV9NSVNTSU9ORVJSX0ZPUkNFXzBf
RVJSNDFfRk9SQ0UJCQlfTUtfRU5VTV9DT05TVCgweDEpDQo+ICsjZGVmaW5lIE5WRExBX0dF
Q19FUlJTTElDRTFfTUlTU0lPTkVSUl9GT1JDRV8wX0VSUjQyX1NISUZUCQkJX01LX1NISUZU
X0NPTlNUKDEwKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX01JU1NJT05FUlJf
Rk9SQ0VfMF9FUlI0Ml9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweDEsIE5WRExBX0dFQ19F
UlJTTElDRTFfTUlTU0lPTkVSUl9GT1JDRV8wX0VSUjQyX1NISUZUKQ0KPiArI2RlZmluZSBO
VkRMQV9HRUNfRVJSU0xJQ0UxX01JU1NJT05FUlJfRk9SQ0VfMF9FUlI0Ml9OT0ZPUkNFCQkJ
X01LX0VOVU1fQ09OU1QoMHgwKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX01J
U1NJT05FUlJfRk9SQ0VfMF9FUlI0Ml9GT1JDRQkJCV9NS19FTlVNX0NPTlNUKDB4MSkNCj4g
KyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMV9NSVNTSU9ORVJSX0ZPUkNFXzBfRVJSNDNf
U0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMTEpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJT
TElDRTFfTUlTU0lPTkVSUl9GT1JDRV8wX0VSUjQzX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNU
KDB4MSwgTlZETEFfR0VDX0VSUlNMSUNFMV9NSVNTSU9ORVJSX0ZPUkNFXzBfRVJSNDNfU0hJ
RlQpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFfTUlTU0lPTkVSUl9GT1JDRV8w
X0VSUjQzX05PRk9SQ0UJCQlfTUtfRU5VTV9DT05TVCgweDApDQo+ICsjZGVmaW5lIE5WRExB
X0dFQ19FUlJTTElDRTFfTUlTU0lPTkVSUl9GT1JDRV8wX0VSUjQzX0ZPUkNFCQkJX01LX0VO
VU1fQ09OU1QoMHgxKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX01JU1NJT05F
UlJfRk9SQ0VfMF9FUlI0NF9TSElGVAkJCV9NS19TSElGVF9DT05TVCgxMikNCj4gKyNkZWZp
bmUgTlZETEFfR0VDX0VSUlNMSUNFMV9NSVNTSU9ORVJSX0ZPUkNFXzBfRVJSNDRfRklFTEQJ
CQlfTUtfRklFTERfQ09OU1QoMHgxLCBOVkRMQV9HRUNfRVJSU0xJQ0UxX01JU1NJT05FUlJf
Rk9SQ0VfMF9FUlI0NF9TSElGVCkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMV9N
SVNTSU9ORVJSX0ZPUkNFXzBfRVJSNDRfTk9GT1JDRQkJCV9NS19FTlVNX0NPTlNUKDB4MCkN
Cj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMV9NSVNTSU9ORVJSX0ZPUkNFXzBfRVJS
NDRfRk9SQ0UJCQlfTUtfRU5VTV9DT05TVCgweDEpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19F
UlJTTElDRTFfTUlTU0lPTkVSUl9GT1JDRV8wX0VSUjQ1X1NISUZUCQkJX01LX1NISUZUX0NP
TlNUKDEzKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX01JU1NJT05FUlJfRk9S
Q0VfMF9FUlI0NV9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweDEsIE5WRExBX0dFQ19FUlJT
TElDRTFfTUlTU0lPTkVSUl9GT1JDRV8wX0VSUjQ1X1NISUZUKQ0KPiArI2RlZmluZSBOVkRM
QV9HRUNfRVJSU0xJQ0UxX01JU1NJT05FUlJfRk9SQ0VfMF9FUlI0NV9OT0ZPUkNFCQkJX01L
X0VOVU1fQ09OU1QoMHgwKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX01JU1NJ
T05FUlJfRk9SQ0VfMF9FUlI0NV9GT1JDRQkJCV9NS19FTlVNX0NPTlNUKDB4MSkNCj4gKyNk
ZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMV9NSVNTSU9ORVJSX0ZPUkNFXzBfRVJSNDZfU0hJ
RlQJCQlfTUtfU0hJRlRfQ09OU1QoMTQpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElD
RTFfTUlTU0lPTkVSUl9GT1JDRV8wX0VSUjQ2X0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4
MSwgTlZETEFfR0VDX0VSUlNMSUNFMV9NSVNTSU9ORVJSX0ZPUkNFXzBfRVJSNDZfU0hJRlQp
DQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFfTUlTU0lPTkVSUl9GT1JDRV8wX0VS
UjQ2X05PRk9SQ0UJCQlfTUtfRU5VTV9DT05TVCgweDApDQo+ICsjZGVmaW5lIE5WRExBX0dF
Q19FUlJTTElDRTFfTUlTU0lPTkVSUl9GT1JDRV8wX0VSUjQ2X0ZPUkNFCQkJX01LX0VOVU1f
Q09OU1QoMHgxKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX01JU1NJT05FUlJf
Rk9SQ0VfMF9FUlI0N19TSElGVAkJCV9NS19TSElGVF9DT05TVCgxNSkNCj4gKyNkZWZpbmUg
TlZETEFfR0VDX0VSUlNMSUNFMV9NSVNTSU9ORVJSX0ZPUkNFXzBfRVJSNDdfRklFTEQJCQlf
TUtfRklFTERfQ09OU1QoMHgxLCBOVkRMQV9HRUNfRVJSU0xJQ0UxX01JU1NJT05FUlJfRk9S
Q0VfMF9FUlI0N19TSElGVCkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMV9NSVNT
SU9ORVJSX0ZPUkNFXzBfRVJSNDdfTk9GT1JDRQkJCV9NS19FTlVNX0NPTlNUKDB4MCkNCj4g
KyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMV9NSVNTSU9ORVJSX0ZPUkNFXzBfRVJSNDdf
Rk9SQ0UJCQlfTUtfRU5VTV9DT05TVCgweDEpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJT
TElDRTFfTUlTU0lPTkVSUl9GT1JDRV8wX0VSUjQ4X1NISUZUCQkJX01LX1NISUZUX0NPTlNU
KDE2KQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX01JU1NJT05FUlJfRk9SQ0Vf
MF9FUlI0OF9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweDEsIE5WRExBX0dFQ19FUlJTTElD
RTFfTUlTU0lPTkVSUl9GT1JDRV8wX0VSUjQ4X1NISUZUKQ0KPiArI2RlZmluZSBOVkRMQV9H
RUNfRVJSU0xJQ0UxX01JU1NJT05FUlJfRk9SQ0VfMF9FUlI0OF9OT0ZPUkNFCQkJX01LX0VO
VU1fQ09OU1QoMHgwKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX01JU1NJT05F
UlJfRk9SQ0VfMF9FUlI0OF9GT1JDRQkJCV9NS19FTlVNX0NPTlNUKDB4MSkNCj4gKyNkZWZp
bmUgTlZETEFfR0VDX0VSUlNMSUNFMV9NSVNTSU9ORVJSX0ZPUkNFXzBfRVJSNDlfU0hJRlQJ
CQlfTUtfU0hJRlRfQ09OU1QoMTcpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFf
TUlTU0lPTkVSUl9GT1JDRV8wX0VSUjQ5X0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4MSwg
TlZETEFfR0VDX0VSUlNMSUNFMV9NSVNTSU9ORVJSX0ZPUkNFXzBfRVJSNDlfU0hJRlQpDQo+
ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFfTUlTU0lPTkVSUl9GT1JDRV8wX0VSUjQ5
X05PRk9SQ0UJCQlfTUtfRU5VTV9DT05TVCgweDApDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19F
UlJTTElDRTFfTUlTU0lPTkVSUl9GT1JDRV8wX0VSUjQ5X0ZPUkNFCQkJX01LX0VOVU1fQ09O
U1QoMHgxKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX01JU1NJT05FUlJfRk9S
Q0VfMF9FUlI1MF9TSElGVAkJCV9NS19TSElGVF9DT05TVCgxOCkNCj4gKyNkZWZpbmUgTlZE
TEFfR0VDX0VSUlNMSUNFMV9NSVNTSU9ORVJSX0ZPUkNFXzBfRVJSNTBfRklFTEQJCQlfTUtf
RklFTERfQ09OU1QoMHgxLCBOVkRMQV9HRUNfRVJSU0xJQ0UxX01JU1NJT05FUlJfRk9SQ0Vf
MF9FUlI1MF9TSElGVCkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMV9NSVNTSU9O
RVJSX0ZPUkNFXzBfRVJSNTBfTk9GT1JDRQkJCV9NS19FTlVNX0NPTlNUKDB4MCkNCj4gKyNk
ZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMV9NSVNTSU9ORVJSX0ZPUkNFXzBfRVJSNTBfRk9S
Q0UJCQlfTUtfRU5VTV9DT05TVCgweDEpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElD
RTFfTUlTU0lPTkVSUl9GT1JDRV8wX0VSUjUxX1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDE5
KQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX01JU1NJT05FUlJfRk9SQ0VfMF9F
UlI1MV9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweDEsIE5WRExBX0dFQ19FUlJTTElDRTFf
TUlTU0lPTkVSUl9GT1JDRV8wX0VSUjUxX1NISUZUKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNf
RVJSU0xJQ0UxX01JU1NJT05FUlJfRk9SQ0VfMF9FUlI1MV9OT0ZPUkNFCQkJX01LX0VOVU1f
Q09OU1QoMHgwKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX01JU1NJT05FUlJf
Rk9SQ0VfMF9FUlI1MV9GT1JDRQkJCV9NS19FTlVNX0NPTlNUKDB4MSkNCj4gKyNkZWZpbmUg
TlZETEFfR0VDX0VSUlNMSUNFMV9NSVNTSU9ORVJSX0ZPUkNFXzBfRVJSNTJfU0hJRlQJCQlf
TUtfU0hJRlRfQ09OU1QoMjApDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFfTUlT
U0lPTkVSUl9GT1JDRV8wX0VSUjUyX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4MSwgTlZE
TEFfR0VDX0VSUlNMSUNFMV9NSVNTSU9ORVJSX0ZPUkNFXzBfRVJSNTJfU0hJRlQpDQo+ICsj
ZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFfTUlTU0lPTkVSUl9GT1JDRV8wX0VSUjUyX05P
Rk9SQ0UJCQlfTUtfRU5VTV9DT05TVCgweDApDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJT
TElDRTFfTUlTU0lPTkVSUl9GT1JDRV8wX0VSUjUyX0ZPUkNFCQkJX01LX0VOVU1fQ09OU1Qo
MHgxKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX01JU1NJT05FUlJfRk9SQ0Vf
MF9FUlI1M19TSElGVAkJCV9NS19TSElGVF9DT05TVCgyMSkNCj4gKyNkZWZpbmUgTlZETEFf
R0VDX0VSUlNMSUNFMV9NSVNTSU9ORVJSX0ZPUkNFXzBfRVJSNTNfRklFTEQJCQlfTUtfRklF
TERfQ09OU1QoMHgxLCBOVkRMQV9HRUNfRVJSU0xJQ0UxX01JU1NJT05FUlJfRk9SQ0VfMF9F
UlI1M19TSElGVCkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMV9NSVNTSU9ORVJS
X0ZPUkNFXzBfRVJSNTNfTk9GT1JDRQkJCV9NS19FTlVNX0NPTlNUKDB4MCkNCj4gKyNkZWZp
bmUgTlZETEFfR0VDX0VSUlNMSUNFMV9NSVNTSU9ORVJSX0ZPUkNFXzBfRVJSNTNfRk9SQ0UJ
CQlfTUtfRU5VTV9DT05TVCgweDEpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFf
TUlTU0lPTkVSUl9GT1JDRV8wX0VSUjU0X1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDIyKQ0K
PiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX01JU1NJT05FUlJfRk9SQ0VfMF9FUlI1
NF9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweDEsIE5WRExBX0dFQ19FUlJTTElDRTFfTUlT
U0lPTkVSUl9GT1JDRV8wX0VSUjU0X1NISUZUKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJS
U0xJQ0UxX01JU1NJT05FUlJfRk9SQ0VfMF9FUlI1NF9OT0ZPUkNFCQkJX01LX0VOVU1fQ09O
U1QoMHgwKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX01JU1NJT05FUlJfRk9S
Q0VfMF9FUlI1NF9GT1JDRQkJCV9NS19FTlVNX0NPTlNUKDB4MSkNCj4gKyNkZWZpbmUgTlZE
TEFfR0VDX0VSUlNMSUNFMV9NSVNTSU9ORVJSX0ZPUkNFXzBfRVJSNTVfU0hJRlQJCQlfTUtf
U0hJRlRfQ09OU1QoMjMpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFfTUlTU0lP
TkVSUl9GT1JDRV8wX0VSUjU1X0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4MSwgTlZETEFf
R0VDX0VSUlNMSUNFMV9NSVNTSU9ORVJSX0ZPUkNFXzBfRVJSNTVfU0hJRlQpDQo+ICsjZGVm
aW5lIE5WRExBX0dFQ19FUlJTTElDRTFfTUlTU0lPTkVSUl9GT1JDRV8wX0VSUjU1X05PRk9S
Q0UJCQlfTUtfRU5VTV9DT05TVCgweDApDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElD
RTFfTUlTU0lPTkVSUl9GT1JDRV8wX0VSUjU1X0ZPUkNFCQkJX01LX0VOVU1fQ09OU1QoMHgx
KQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX01JU1NJT05FUlJfRk9SQ0VfMF9F
UlI1Nl9TSElGVAkJCV9NS19TSElGVF9DT05TVCgyNCkNCj4gKyNkZWZpbmUgTlZETEFfR0VD
X0VSUlNMSUNFMV9NSVNTSU9ORVJSX0ZPUkNFXzBfRVJSNTZfRklFTEQJCQlfTUtfRklFTERf
Q09OU1QoMHgxLCBOVkRMQV9HRUNfRVJSU0xJQ0UxX01JU1NJT05FUlJfRk9SQ0VfMF9FUlI1
Nl9TSElGVCkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMV9NSVNTSU9ORVJSX0ZP
UkNFXzBfRVJSNTZfTk9GT1JDRQkJCV9NS19FTlVNX0NPTlNUKDB4MCkNCj4gKyNkZWZpbmUg
TlZETEFfR0VDX0VSUlNMSUNFMV9NSVNTSU9ORVJSX0ZPUkNFXzBfRVJSNTZfRk9SQ0UJCQlf
TUtfRU5VTV9DT05TVCgweDEpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFfTUlT
U0lPTkVSUl9GT1JDRV8wX0VSUjU3X1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDI1KQ0KPiAr
I2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX01JU1NJT05FUlJfRk9SQ0VfMF9FUlI1N19G
SUVMRAkJCV9NS19GSUVMRF9DT05TVCgweDEsIE5WRExBX0dFQ19FUlJTTElDRTFfTUlTU0lP
TkVSUl9GT1JDRV8wX0VSUjU3X1NISUZUKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJ
Q0UxX01JU1NJT05FUlJfRk9SQ0VfMF9FUlI1N19OT0ZPUkNFCQkJX01LX0VOVU1fQ09OU1Qo
MHgwKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX01JU1NJT05FUlJfRk9SQ0Vf
MF9FUlI1N19GT1JDRQkJCV9NS19FTlVNX0NPTlNUKDB4MSkNCj4gKyNkZWZpbmUgTlZETEFf
R0VDX0VSUlNMSUNFMV9NSVNTSU9ORVJSX0ZPUkNFXzBfRVJSNThfU0hJRlQJCQlfTUtfU0hJ
RlRfQ09OU1QoMjYpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFfTUlTU0lPTkVS
Ul9GT1JDRV8wX0VSUjU4X0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4MSwgTlZETEFfR0VD
X0VSUlNMSUNFMV9NSVNTSU9ORVJSX0ZPUkNFXzBfRVJSNThfU0hJRlQpDQo+ICsjZGVmaW5l
IE5WRExBX0dFQ19FUlJTTElDRTFfTUlTU0lPTkVSUl9GT1JDRV8wX0VSUjU4X05PRk9SQ0UJ
CQlfTUtfRU5VTV9DT05TVCgweDApDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFf
TUlTU0lPTkVSUl9GT1JDRV8wX0VSUjU4X0ZPUkNFCQkJX01LX0VOVU1fQ09OU1QoMHgxKQ0K
PiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX01JU1NJT05FUlJfRk9SQ0VfMF9FUlI1
OV9TSElGVAkJCV9NS19TSElGVF9DT05TVCgyNykNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VS
UlNMSUNFMV9NSVNTSU9ORVJSX0ZPUkNFXzBfRVJSNTlfRklFTEQJCQlfTUtfRklFTERfQ09O
U1QoMHgxLCBOVkRMQV9HRUNfRVJSU0xJQ0UxX01JU1NJT05FUlJfRk9SQ0VfMF9FUlI1OV9T
SElGVCkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMV9NSVNTSU9ORVJSX0ZPUkNF
XzBfRVJSNTlfTk9GT1JDRQkJCV9NS19FTlVNX0NPTlNUKDB4MCkNCj4gKyNkZWZpbmUgTlZE
TEFfR0VDX0VSUlNMSUNFMV9NSVNTSU9ORVJSX0ZPUkNFXzBfRVJSNTlfRk9SQ0UJCQlfTUtf
RU5VTV9DT05TVCgweDEpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFfTUlTU0lP
TkVSUl9GT1JDRV8wX0VSUjYwX1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDI4KQ0KPiArI2Rl
ZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX01JU1NJT05FUlJfRk9SQ0VfMF9FUlI2MF9GSUVM
RAkJCV9NS19GSUVMRF9DT05TVCgweDEsIE5WRExBX0dFQ19FUlJTTElDRTFfTUlTU0lPTkVS
Ul9GT1JDRV8wX0VSUjYwX1NISUZUKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0Ux
X01JU1NJT05FUlJfRk9SQ0VfMF9FUlI2MF9OT0ZPUkNFCQkJX01LX0VOVU1fQ09OU1QoMHgw
KQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX01JU1NJT05FUlJfRk9SQ0VfMF9F
UlI2MF9GT1JDRQkJCV9NS19FTlVNX0NPTlNUKDB4MSkNCj4gKyNkZWZpbmUgTlZETEFfR0VD
X0VSUlNMSUNFMV9NSVNTSU9ORVJSX0ZPUkNFXzBfRVJSNjFfU0hJRlQJCQlfTUtfU0hJRlRf
Q09OU1QoMjkpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFfTUlTU0lPTkVSUl9G
T1JDRV8wX0VSUjYxX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4MSwgTlZETEFfR0VDX0VS
UlNMSUNFMV9NSVNTSU9ORVJSX0ZPUkNFXzBfRVJSNjFfU0hJRlQpDQo+ICsjZGVmaW5lIE5W
RExBX0dFQ19FUlJTTElDRTFfTUlTU0lPTkVSUl9GT1JDRV8wX0VSUjYxX05PRk9SQ0UJCQlf
TUtfRU5VTV9DT05TVCgweDApDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFfTUlT
U0lPTkVSUl9GT1JDRV8wX0VSUjYxX0ZPUkNFCQkJX01LX0VOVU1fQ09OU1QoMHgxKQ0KPiAr
I2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX01JU1NJT05FUlJfRk9SQ0VfMF9FUlI2Ml9T
SElGVAkJCV9NS19TSElGVF9DT05TVCgzMCkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNM
SUNFMV9NSVNTSU9ORVJSX0ZPUkNFXzBfRVJSNjJfRklFTEQJCQlfTUtfRklFTERfQ09OU1Qo
MHgxLCBOVkRMQV9HRUNfRVJSU0xJQ0UxX01JU1NJT05FUlJfRk9SQ0VfMF9FUlI2Ml9TSElG
VCkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMV9NSVNTSU9ORVJSX0ZPUkNFXzBf
RVJSNjJfTk9GT1JDRQkJCV9NS19FTlVNX0NPTlNUKDB4MCkNCj4gKyNkZWZpbmUgTlZETEFf
R0VDX0VSUlNMSUNFMV9NSVNTSU9ORVJSX0ZPUkNFXzBfRVJSNjJfRk9SQ0UJCQlfTUtfRU5V
TV9DT05TVCgweDEpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFfTUlTU0lPTkVS
Ul9GT1JDRV8wX0VSUjYzX1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDMxKQ0KPiArI2RlZmlu
ZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX01JU1NJT05FUlJfRk9SQ0VfMF9FUlI2M19GSUVMRAkJ
CV9NS19GSUVMRF9DT05TVCgweDEsIE5WRExBX0dFQ19FUlJTTElDRTFfTUlTU0lPTkVSUl9G
T1JDRV8wX0VSUjYzX1NISUZUKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX01J
U1NJT05FUlJfRk9SQ0VfMF9FUlI2M19OT0ZPUkNFCQkJX01LX0VOVU1fQ09OU1QoMHgwKQ0K
PiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX01JU1NJT05FUlJfRk9SQ0VfMF9FUlI2
M19GT1JDRQkJCV9NS19FTlVNX0NPTlNUKDB4MSkNCj4gKw0KPiArDQo+ICsvLyBSZWdpc3Rl
ciBOVkRMQV9HRUNfRVJSU0xJQ0UxX01JU1NJT05FUlJfU1RBVFVTXzANCj4gKyNkZWZpbmUg
TlZETEFfR0VDX0VSUlNMSUNFMV9NSVNTSU9ORVJSX1NUQVRVU18wCQkJX01LX0FERFJfQ09O
U1QoMHhlMDY4KQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX01JU1NJT05FUlJf
U1RBVFVTXzBfRVJSMzJfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMCkNCj4gKyNkZWZpbmUg
TlZETEFfR0VDX0VSUlNMSUNFMV9NSVNTSU9ORVJSX1NUQVRVU18wX0VSUjMyX0ZJRUxECQkJ
X01LX0ZJRUxEX0NPTlNUKDB4MSwgTlZETEFfR0VDX0VSUlNMSUNFMV9NSVNTSU9ORVJSX1NU
QVRVU18wX0VSUjMyX1NISUZUKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX01J
U1NJT05FUlJfU1RBVFVTXzBfRVJSMzNfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMSkNCj4g
KyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMV9NSVNTSU9ORVJSX1NUQVRVU18wX0VSUjMz
X0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4MSwgTlZETEFfR0VDX0VSUlNMSUNFMV9NSVNT
SU9ORVJSX1NUQVRVU18wX0VSUjMzX1NISUZUKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJS
U0xJQ0UxX01JU1NJT05FUlJfU1RBVFVTXzBfRVJSMzRfU0hJRlQJCQlfTUtfU0hJRlRfQ09O
U1QoMikNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMV9NSVNTSU9ORVJSX1NUQVRV
U18wX0VSUjM0X0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4MSwgTlZETEFfR0VDX0VSUlNM
SUNFMV9NSVNTSU9ORVJSX1NUQVRVU18wX0VSUjM0X1NISUZUKQ0KPiArI2RlZmluZSBOVkRM
QV9HRUNfRVJSU0xJQ0UxX01JU1NJT05FUlJfU1RBVFVTXzBfRVJSMzVfU0hJRlQJCQlfTUtf
U0hJRlRfQ09OU1QoMykNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMV9NSVNTSU9O
RVJSX1NUQVRVU18wX0VSUjM1X0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4MSwgTlZETEFf
R0VDX0VSUlNMSUNFMV9NSVNTSU9ORVJSX1NUQVRVU18wX0VSUjM1X1NISUZUKQ0KPiArI2Rl
ZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX01JU1NJT05FUlJfU1RBVFVTXzBfRVJSMzZfU0hJ
RlQJCQlfTUtfU0hJRlRfQ09OU1QoNCkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNF
MV9NSVNTSU9ORVJSX1NUQVRVU18wX0VSUjM2X0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4
MSwgTlZETEFfR0VDX0VSUlNMSUNFMV9NSVNTSU9ORVJSX1NUQVRVU18wX0VSUjM2X1NISUZU
KQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX01JU1NJT05FUlJfU1RBVFVTXzBf
RVJSMzdfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoNSkNCj4gKyNkZWZpbmUgTlZETEFfR0VD
X0VSUlNMSUNFMV9NSVNTSU9ORVJSX1NUQVRVU18wX0VSUjM3X0ZJRUxECQkJX01LX0ZJRUxE
X0NPTlNUKDB4MSwgTlZETEFfR0VDX0VSUlNMSUNFMV9NSVNTSU9ORVJSX1NUQVRVU18wX0VS
UjM3X1NISUZUKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX01JU1NJT05FUlJf
U1RBVFVTXzBfRVJSMzhfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoNikNCj4gKyNkZWZpbmUg
TlZETEFfR0VDX0VSUlNMSUNFMV9NSVNTSU9ORVJSX1NUQVRVU18wX0VSUjM4X0ZJRUxECQkJ
X01LX0ZJRUxEX0NPTlNUKDB4MSwgTlZETEFfR0VDX0VSUlNMSUNFMV9NSVNTSU9ORVJSX1NU
QVRVU18wX0VSUjM4X1NISUZUKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX01J
U1NJT05FUlJfU1RBVFVTXzBfRVJSMzlfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoNykNCj4g
KyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMV9NSVNTSU9ORVJSX1NUQVRVU18wX0VSUjM5
X0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4MSwgTlZETEFfR0VDX0VSUlNMSUNFMV9NSVNT
SU9ORVJSX1NUQVRVU18wX0VSUjM5X1NISUZUKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJS
U0xJQ0UxX01JU1NJT05FUlJfU1RBVFVTXzBfRVJSNDBfU0hJRlQJCQlfTUtfU0hJRlRfQ09O
U1QoOCkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMV9NSVNTSU9ORVJSX1NUQVRV
U18wX0VSUjQwX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4MSwgTlZETEFfR0VDX0VSUlNM
SUNFMV9NSVNTSU9ORVJSX1NUQVRVU18wX0VSUjQwX1NISUZUKQ0KPiArI2RlZmluZSBOVkRM
QV9HRUNfRVJSU0xJQ0UxX01JU1NJT05FUlJfU1RBVFVTXzBfRVJSNDFfU0hJRlQJCQlfTUtf
U0hJRlRfQ09OU1QoOSkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMV9NSVNTSU9O
RVJSX1NUQVRVU18wX0VSUjQxX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4MSwgTlZETEFf
R0VDX0VSUlNMSUNFMV9NSVNTSU9ORVJSX1NUQVRVU18wX0VSUjQxX1NISUZUKQ0KPiArI2Rl
ZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX01JU1NJT05FUlJfU1RBVFVTXzBfRVJSNDJfU0hJ
RlQJCQlfTUtfU0hJRlRfQ09OU1QoMTApDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElD
RTFfTUlTU0lPTkVSUl9TVEFUVVNfMF9FUlI0Ml9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgw
eDEsIE5WRExBX0dFQ19FUlJTTElDRTFfTUlTU0lPTkVSUl9TVEFUVVNfMF9FUlI0Ml9TSElG
VCkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMV9NSVNTSU9ORVJSX1NUQVRVU18w
X0VSUjQzX1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDExKQ0KPiArI2RlZmluZSBOVkRMQV9H
RUNfRVJSU0xJQ0UxX01JU1NJT05FUlJfU1RBVFVTXzBfRVJSNDNfRklFTEQJCQlfTUtfRklF
TERfQ09OU1QoMHgxLCBOVkRMQV9HRUNfRVJSU0xJQ0UxX01JU1NJT05FUlJfU1RBVFVTXzBf
RVJSNDNfU0hJRlQpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFfTUlTU0lPTkVS
Ul9TVEFUVVNfMF9FUlI0NF9TSElGVAkJCV9NS19TSElGVF9DT05TVCgxMikNCj4gKyNkZWZp
bmUgTlZETEFfR0VDX0VSUlNMSUNFMV9NSVNTSU9ORVJSX1NUQVRVU18wX0VSUjQ0X0ZJRUxE
CQkJX01LX0ZJRUxEX0NPTlNUKDB4MSwgTlZETEFfR0VDX0VSUlNMSUNFMV9NSVNTSU9ORVJS
X1NUQVRVU18wX0VSUjQ0X1NISUZUKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0Ux
X01JU1NJT05FUlJfU1RBVFVTXzBfRVJSNDVfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMTMp
DQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFfTUlTU0lPTkVSUl9TVEFUVVNfMF9F
UlI0NV9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweDEsIE5WRExBX0dFQ19FUlJTTElDRTFf
TUlTU0lPTkVSUl9TVEFUVVNfMF9FUlI0NV9TSElGVCkNCj4gKyNkZWZpbmUgTlZETEFfR0VD
X0VSUlNMSUNFMV9NSVNTSU9ORVJSX1NUQVRVU18wX0VSUjQ2X1NISUZUCQkJX01LX1NISUZU
X0NPTlNUKDE0KQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX01JU1NJT05FUlJf
U1RBVFVTXzBfRVJSNDZfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHgxLCBOVkRMQV9HRUNf
RVJSU0xJQ0UxX01JU1NJT05FUlJfU1RBVFVTXzBfRVJSNDZfU0hJRlQpDQo+ICsjZGVmaW5l
IE5WRExBX0dFQ19FUlJTTElDRTFfTUlTU0lPTkVSUl9TVEFUVVNfMF9FUlI0N19TSElGVAkJ
CV9NS19TSElGVF9DT05TVCgxNSkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMV9N
SVNTSU9ORVJSX1NUQVRVU18wX0VSUjQ3X0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4MSwg
TlZETEFfR0VDX0VSUlNMSUNFMV9NSVNTSU9ORVJSX1NUQVRVU18wX0VSUjQ3X1NISUZUKQ0K
PiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX01JU1NJT05FUlJfU1RBVFVTXzBfRVJS
NDhfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMTYpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19F
UlJTTElDRTFfTUlTU0lPTkVSUl9TVEFUVVNfMF9FUlI0OF9GSUVMRAkJCV9NS19GSUVMRF9D
T05TVCgweDEsIE5WRExBX0dFQ19FUlJTTElDRTFfTUlTU0lPTkVSUl9TVEFUVVNfMF9FUlI0
OF9TSElGVCkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMV9NSVNTSU9ORVJSX1NU
QVRVU18wX0VSUjQ5X1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDE3KQ0KPiArI2RlZmluZSBO
VkRMQV9HRUNfRVJSU0xJQ0UxX01JU1NJT05FUlJfU1RBVFVTXzBfRVJSNDlfRklFTEQJCQlf
TUtfRklFTERfQ09OU1QoMHgxLCBOVkRMQV9HRUNfRVJSU0xJQ0UxX01JU1NJT05FUlJfU1RB
VFVTXzBfRVJSNDlfU0hJRlQpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFfTUlT
U0lPTkVSUl9TVEFUVVNfMF9FUlI1MF9TSElGVAkJCV9NS19TSElGVF9DT05TVCgxOCkNCj4g
KyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMV9NSVNTSU9ORVJSX1NUQVRVU18wX0VSUjUw
X0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4MSwgTlZETEFfR0VDX0VSUlNMSUNFMV9NSVNT
SU9ORVJSX1NUQVRVU18wX0VSUjUwX1NISUZUKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJS
U0xJQ0UxX01JU1NJT05FUlJfU1RBVFVTXzBfRVJSNTFfU0hJRlQJCQlfTUtfU0hJRlRfQ09O
U1QoMTkpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFfTUlTU0lPTkVSUl9TVEFU
VVNfMF9FUlI1MV9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweDEsIE5WRExBX0dFQ19FUlJT
TElDRTFfTUlTU0lPTkVSUl9TVEFUVVNfMF9FUlI1MV9TSElGVCkNCj4gKyNkZWZpbmUgTlZE
TEFfR0VDX0VSUlNMSUNFMV9NSVNTSU9ORVJSX1NUQVRVU18wX0VSUjUyX1NISUZUCQkJX01L
X1NISUZUX0NPTlNUKDIwKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX01JU1NJ
T05FUlJfU1RBVFVTXzBfRVJSNTJfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHgxLCBOVkRM
QV9HRUNfRVJSU0xJQ0UxX01JU1NJT05FUlJfU1RBVFVTXzBfRVJSNTJfU0hJRlQpDQo+ICsj
ZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFfTUlTU0lPTkVSUl9TVEFUVVNfMF9FUlI1M19T
SElGVAkJCV9NS19TSElGVF9DT05TVCgyMSkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNM
SUNFMV9NSVNTSU9ORVJSX1NUQVRVU18wX0VSUjUzX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNU
KDB4MSwgTlZETEFfR0VDX0VSUlNMSUNFMV9NSVNTSU9ORVJSX1NUQVRVU18wX0VSUjUzX1NI
SUZUKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX01JU1NJT05FUlJfU1RBVFVT
XzBfRVJSNTRfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMjIpDQo+ICsjZGVmaW5lIE5WRExB
X0dFQ19FUlJTTElDRTFfTUlTU0lPTkVSUl9TVEFUVVNfMF9FUlI1NF9GSUVMRAkJCV9NS19G
SUVMRF9DT05TVCgweDEsIE5WRExBX0dFQ19FUlJTTElDRTFfTUlTU0lPTkVSUl9TVEFUVVNf
MF9FUlI1NF9TSElGVCkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMV9NSVNTSU9O
RVJSX1NUQVRVU18wX0VSUjU1X1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDIzKQ0KPiArI2Rl
ZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX01JU1NJT05FUlJfU1RBVFVTXzBfRVJSNTVfRklF
TEQJCQlfTUtfRklFTERfQ09OU1QoMHgxLCBOVkRMQV9HRUNfRVJSU0xJQ0UxX01JU1NJT05F
UlJfU1RBVFVTXzBfRVJSNTVfU0hJRlQpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElD
RTFfTUlTU0lPTkVSUl9TVEFUVVNfMF9FUlI1Nl9TSElGVAkJCV9NS19TSElGVF9DT05TVCgy
NCkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMV9NSVNTSU9ORVJSX1NUQVRVU18w
X0VSUjU2X0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4MSwgTlZETEFfR0VDX0VSUlNMSUNF
MV9NSVNTSU9ORVJSX1NUQVRVU18wX0VSUjU2X1NISUZUKQ0KPiArI2RlZmluZSBOVkRMQV9H
RUNfRVJSU0xJQ0UxX01JU1NJT05FUlJfU1RBVFVTXzBfRVJSNTdfU0hJRlQJCQlfTUtfU0hJ
RlRfQ09OU1QoMjUpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFfTUlTU0lPTkVS
Ul9TVEFUVVNfMF9FUlI1N19GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweDEsIE5WRExBX0dF
Q19FUlJTTElDRTFfTUlTU0lPTkVSUl9TVEFUVVNfMF9FUlI1N19TSElGVCkNCj4gKyNkZWZp
bmUgTlZETEFfR0VDX0VSUlNMSUNFMV9NSVNTSU9ORVJSX1NUQVRVU18wX0VSUjU4X1NISUZU
CQkJX01LX1NISUZUX0NPTlNUKDI2KQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0Ux
X01JU1NJT05FUlJfU1RBVFVTXzBfRVJSNThfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHgx
LCBOVkRMQV9HRUNfRVJSU0xJQ0UxX01JU1NJT05FUlJfU1RBVFVTXzBfRVJSNThfU0hJRlQp
DQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFfTUlTU0lPTkVSUl9TVEFUVVNfMF9F
UlI1OV9TSElGVAkJCV9NS19TSElGVF9DT05TVCgyNykNCj4gKyNkZWZpbmUgTlZETEFfR0VD
X0VSUlNMSUNFMV9NSVNTSU9ORVJSX1NUQVRVU18wX0VSUjU5X0ZJRUxECQkJX01LX0ZJRUxE
X0NPTlNUKDB4MSwgTlZETEFfR0VDX0VSUlNMSUNFMV9NSVNTSU9ORVJSX1NUQVRVU18wX0VS
UjU5X1NISUZUKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX01JU1NJT05FUlJf
U1RBVFVTXzBfRVJSNjBfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMjgpDQo+ICsjZGVmaW5l
IE5WRExBX0dFQ19FUlJTTElDRTFfTUlTU0lPTkVSUl9TVEFUVVNfMF9FUlI2MF9GSUVMRAkJ
CV9NS19GSUVMRF9DT05TVCgweDEsIE5WRExBX0dFQ19FUlJTTElDRTFfTUlTU0lPTkVSUl9T
VEFUVVNfMF9FUlI2MF9TSElGVCkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMV9N
SVNTSU9ORVJSX1NUQVRVU18wX0VSUjYxX1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDI5KQ0K
PiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX01JU1NJT05FUlJfU1RBVFVTXzBfRVJS
NjFfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHgxLCBOVkRMQV9HRUNfRVJSU0xJQ0UxX01J
U1NJT05FUlJfU1RBVFVTXzBfRVJSNjFfU0hJRlQpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19F
UlJTTElDRTFfTUlTU0lPTkVSUl9TVEFUVVNfMF9FUlI2Ml9TSElGVAkJCV9NS19TSElGVF9D
T05TVCgzMCkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMV9NSVNTSU9ORVJSX1NU
QVRVU18wX0VSUjYyX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4MSwgTlZETEFfR0VDX0VS
UlNMSUNFMV9NSVNTSU9ORVJSX1NUQVRVU18wX0VSUjYyX1NISUZUKQ0KPiArI2RlZmluZSBO
VkRMQV9HRUNfRVJSU0xJQ0UxX01JU1NJT05FUlJfU1RBVFVTXzBfRVJSNjNfU0hJRlQJCQlf
TUtfU0hJRlRfQ09OU1QoMzEpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFfTUlT
U0lPTkVSUl9TVEFUVVNfMF9FUlI2M19GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweDEsIE5W
RExBX0dFQ19FUlJTTElDRTFfTUlTU0lPTkVSUl9TVEFUVVNfMF9FUlI2M19TSElGVCkNCj4g
Kw0KPiArDQo+ICsvLyBSZWdpc3RlciBOVkRMQV9HRUNfRVJSU0xJQ0UxX01JU1NJT05FUlJf
SU5KRUNUXzANCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMV9NSVNTSU9ORVJSX0lO
SkVDVF8wCQkJX01LX0FERFJfQ09OU1QoMHhlMDZjKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNf
RVJSU0xJQ0UxX01JU1NJT05FUlJfSU5KRUNUXzBfRVJSMzJfU0hJRlQJCQlfTUtfU0hJRlRf
Q09OU1QoMCkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMV9NSVNTSU9ORVJSX0lO
SkVDVF8wX0VSUjMyX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4MSwgTlZETEFfR0VDX0VS
UlNMSUNFMV9NSVNTSU9ORVJSX0lOSkVDVF8wX0VSUjMyX1NISUZUKQ0KPiArI2RlZmluZSBO
VkRMQV9HRUNfRVJSU0xJQ0UxX01JU1NJT05FUlJfSU5KRUNUXzBfRVJSMzJfRElTQUJMRQkJ
CV9NS19FTlVNX0NPTlNUKDB4MCkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMV9N
SVNTSU9ORVJSX0lOSkVDVF8wX0VSUjMyX0VOQUJMRQkJCV9NS19FTlVNX0NPTlNUKDB4MSkN
Cj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMV9NSVNTSU9ORVJSX0lOSkVDVF8wX0VS
UjMzX1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDEpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19F
UlJTTElDRTFfTUlTU0lPTkVSUl9JTkpFQ1RfMF9FUlIzM19GSUVMRAkJCV9NS19GSUVMRF9D
T05TVCgweDEsIE5WRExBX0dFQ19FUlJTTElDRTFfTUlTU0lPTkVSUl9JTkpFQ1RfMF9FUlIz
M19TSElGVCkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMV9NSVNTSU9ORVJSX0lO
SkVDVF8wX0VSUjMzX0RJU0FCTEUJCQlfTUtfRU5VTV9DT05TVCgweDApDQo+ICsjZGVmaW5l
IE5WRExBX0dFQ19FUlJTTElDRTFfTUlTU0lPTkVSUl9JTkpFQ1RfMF9FUlIzM19FTkFCTEUJ
CQlfTUtfRU5VTV9DT05TVCgweDEpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFf
TUlTU0lPTkVSUl9JTkpFQ1RfMF9FUlIzNF9TSElGVAkJCV9NS19TSElGVF9DT05TVCgyKQ0K
PiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX01JU1NJT05FUlJfSU5KRUNUXzBfRVJS
MzRfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHgxLCBOVkRMQV9HRUNfRVJSU0xJQ0UxX01J
U1NJT05FUlJfSU5KRUNUXzBfRVJSMzRfU0hJRlQpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19F
UlJTTElDRTFfTUlTU0lPTkVSUl9JTkpFQ1RfMF9FUlIzNF9ESVNBQkxFCQkJX01LX0VOVU1f
Q09OU1QoMHgwKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX01JU1NJT05FUlJf
SU5KRUNUXzBfRVJSMzRfRU5BQkxFCQkJX01LX0VOVU1fQ09OU1QoMHgxKQ0KPiArI2RlZmlu
ZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX01JU1NJT05FUlJfSU5KRUNUXzBfRVJSMzVfU0hJRlQJ
CQlfTUtfU0hJRlRfQ09OU1QoMykNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMV9N
SVNTSU9ORVJSX0lOSkVDVF8wX0VSUjM1X0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4MSwg
TlZETEFfR0VDX0VSUlNMSUNFMV9NSVNTSU9ORVJSX0lOSkVDVF8wX0VSUjM1X1NISUZUKQ0K
PiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX01JU1NJT05FUlJfSU5KRUNUXzBfRVJS
MzVfRElTQUJMRQkJCV9NS19FTlVNX0NPTlNUKDB4MCkNCj4gKyNkZWZpbmUgTlZETEFfR0VD
X0VSUlNMSUNFMV9NSVNTSU9ORVJSX0lOSkVDVF8wX0VSUjM1X0VOQUJMRQkJCV9NS19FTlVN
X0NPTlNUKDB4MSkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMV9NSVNTSU9ORVJS
X0lOSkVDVF8wX0VSUjM2X1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDQpDQo+ICsjZGVmaW5l
IE5WRExBX0dFQ19FUlJTTElDRTFfTUlTU0lPTkVSUl9JTkpFQ1RfMF9FUlIzNl9GSUVMRAkJ
CV9NS19GSUVMRF9DT05TVCgweDEsIE5WRExBX0dFQ19FUlJTTElDRTFfTUlTU0lPTkVSUl9J
TkpFQ1RfMF9FUlIzNl9TSElGVCkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMV9N
SVNTSU9ORVJSX0lOSkVDVF8wX0VSUjM2X0RJU0FCTEUJCQlfTUtfRU5VTV9DT05TVCgweDAp
DQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFfTUlTU0lPTkVSUl9JTkpFQ1RfMF9F
UlIzNl9FTkFCTEUJCQlfTUtfRU5VTV9DT05TVCgweDEpDQo+ICsjZGVmaW5lIE5WRExBX0dF
Q19FUlJTTElDRTFfTUlTU0lPTkVSUl9JTkpFQ1RfMF9FUlIzN19TSElGVAkJCV9NS19TSElG
VF9DT05TVCg1KQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX01JU1NJT05FUlJf
SU5KRUNUXzBfRVJSMzdfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHgxLCBOVkRMQV9HRUNf
RVJSU0xJQ0UxX01JU1NJT05FUlJfSU5KRUNUXzBfRVJSMzdfU0hJRlQpDQo+ICsjZGVmaW5l
IE5WRExBX0dFQ19FUlJTTElDRTFfTUlTU0lPTkVSUl9JTkpFQ1RfMF9FUlIzN19ESVNBQkxF
CQkJX01LX0VOVU1fQ09OU1QoMHgwKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0Ux
X01JU1NJT05FUlJfSU5KRUNUXzBfRVJSMzdfRU5BQkxFCQkJX01LX0VOVU1fQ09OU1QoMHgx
KQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX01JU1NJT05FUlJfSU5KRUNUXzBf
RVJSMzhfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoNikNCj4gKyNkZWZpbmUgTlZETEFfR0VD
X0VSUlNMSUNFMV9NSVNTSU9ORVJSX0lOSkVDVF8wX0VSUjM4X0ZJRUxECQkJX01LX0ZJRUxE
X0NPTlNUKDB4MSwgTlZETEFfR0VDX0VSUlNMSUNFMV9NSVNTSU9ORVJSX0lOSkVDVF8wX0VS
UjM4X1NISUZUKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX01JU1NJT05FUlJf
SU5KRUNUXzBfRVJSMzhfRElTQUJMRQkJCV9NS19FTlVNX0NPTlNUKDB4MCkNCj4gKyNkZWZp
bmUgTlZETEFfR0VDX0VSUlNMSUNFMV9NSVNTSU9ORVJSX0lOSkVDVF8wX0VSUjM4X0VOQUJM
RQkJCV9NS19FTlVNX0NPTlNUKDB4MSkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNF
MV9NSVNTSU9ORVJSX0lOSkVDVF8wX0VSUjM5X1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDcp
DQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFfTUlTU0lPTkVSUl9JTkpFQ1RfMF9F
UlIzOV9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweDEsIE5WRExBX0dFQ19FUlJTTElDRTFf
TUlTU0lPTkVSUl9JTkpFQ1RfMF9FUlIzOV9TSElGVCkNCj4gKyNkZWZpbmUgTlZETEFfR0VD
X0VSUlNMSUNFMV9NSVNTSU9ORVJSX0lOSkVDVF8wX0VSUjM5X0RJU0FCTEUJCQlfTUtfRU5V
TV9DT05TVCgweDApDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFfTUlTU0lPTkVS
Ul9JTkpFQ1RfMF9FUlIzOV9FTkFCTEUJCQlfTUtfRU5VTV9DT05TVCgweDEpDQo+ICsjZGVm
aW5lIE5WRExBX0dFQ19FUlJTTElDRTFfTUlTU0lPTkVSUl9JTkpFQ1RfMF9FUlI0MF9TSElG
VAkJCV9NS19TSElGVF9DT05TVCg4KQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0Ux
X01JU1NJT05FUlJfSU5KRUNUXzBfRVJSNDBfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHgx
LCBOVkRMQV9HRUNfRVJSU0xJQ0UxX01JU1NJT05FUlJfSU5KRUNUXzBfRVJSNDBfU0hJRlQp
DQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFfTUlTU0lPTkVSUl9JTkpFQ1RfMF9F
UlI0MF9ESVNBQkxFCQkJX01LX0VOVU1fQ09OU1QoMHgwKQ0KPiArI2RlZmluZSBOVkRMQV9H
RUNfRVJSU0xJQ0UxX01JU1NJT05FUlJfSU5KRUNUXzBfRVJSNDBfRU5BQkxFCQkJX01LX0VO
VU1fQ09OU1QoMHgxKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX01JU1NJT05F
UlJfSU5KRUNUXzBfRVJSNDFfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoOSkNCj4gKyNkZWZp
bmUgTlZETEFfR0VDX0VSUlNMSUNFMV9NSVNTSU9ORVJSX0lOSkVDVF8wX0VSUjQxX0ZJRUxE
CQkJX01LX0ZJRUxEX0NPTlNUKDB4MSwgTlZETEFfR0VDX0VSUlNMSUNFMV9NSVNTSU9ORVJS
X0lOSkVDVF8wX0VSUjQxX1NISUZUKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0Ux
X01JU1NJT05FUlJfSU5KRUNUXzBfRVJSNDFfRElTQUJMRQkJCV9NS19FTlVNX0NPTlNUKDB4
MCkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMV9NSVNTSU9ORVJSX0lOSkVDVF8w
X0VSUjQxX0VOQUJMRQkJCV9NS19FTlVNX0NPTlNUKDB4MSkNCj4gKyNkZWZpbmUgTlZETEFf
R0VDX0VSUlNMSUNFMV9NSVNTSU9ORVJSX0lOSkVDVF8wX0VSUjQyX1NISUZUCQkJX01LX1NI
SUZUX0NPTlNUKDEwKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX01JU1NJT05F
UlJfSU5KRUNUXzBfRVJSNDJfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHgxLCBOVkRMQV9H
RUNfRVJSU0xJQ0UxX01JU1NJT05FUlJfSU5KRUNUXzBfRVJSNDJfU0hJRlQpDQo+ICsjZGVm
aW5lIE5WRExBX0dFQ19FUlJTTElDRTFfTUlTU0lPTkVSUl9JTkpFQ1RfMF9FUlI0Ml9ESVNB
QkxFCQkJX01LX0VOVU1fQ09OU1QoMHgwKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJ
Q0UxX01JU1NJT05FUlJfSU5KRUNUXzBfRVJSNDJfRU5BQkxFCQkJX01LX0VOVU1fQ09OU1Qo
MHgxKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX01JU1NJT05FUlJfSU5KRUNU
XzBfRVJSNDNfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMTEpDQo+ICsjZGVmaW5lIE5WRExB
X0dFQ19FUlJTTElDRTFfTUlTU0lPTkVSUl9JTkpFQ1RfMF9FUlI0M19GSUVMRAkJCV9NS19G
SUVMRF9DT05TVCgweDEsIE5WRExBX0dFQ19FUlJTTElDRTFfTUlTU0lPTkVSUl9JTkpFQ1Rf
MF9FUlI0M19TSElGVCkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMV9NSVNTSU9O
RVJSX0lOSkVDVF8wX0VSUjQzX0RJU0FCTEUJCQlfTUtfRU5VTV9DT05TVCgweDApDQo+ICsj
ZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFfTUlTU0lPTkVSUl9JTkpFQ1RfMF9FUlI0M19F
TkFCTEUJCQlfTUtfRU5VTV9DT05TVCgweDEpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJT
TElDRTFfTUlTU0lPTkVSUl9JTkpFQ1RfMF9FUlI0NF9TSElGVAkJCV9NS19TSElGVF9DT05T
VCgxMikNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMV9NSVNTSU9ORVJSX0lOSkVD
VF8wX0VSUjQ0X0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4MSwgTlZETEFfR0VDX0VSUlNM
SUNFMV9NSVNTSU9ORVJSX0lOSkVDVF8wX0VSUjQ0X1NISUZUKQ0KPiArI2RlZmluZSBOVkRM
QV9HRUNfRVJSU0xJQ0UxX01JU1NJT05FUlJfSU5KRUNUXzBfRVJSNDRfRElTQUJMRQkJCV9N
S19FTlVNX0NPTlNUKDB4MCkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMV9NSVNT
SU9ORVJSX0lOSkVDVF8wX0VSUjQ0X0VOQUJMRQkJCV9NS19FTlVNX0NPTlNUKDB4MSkNCj4g
KyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMV9NSVNTSU9ORVJSX0lOSkVDVF8wX0VSUjQ1
X1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDEzKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJS
U0xJQ0UxX01JU1NJT05FUlJfSU5KRUNUXzBfRVJSNDVfRklFTEQJCQlfTUtfRklFTERfQ09O
U1QoMHgxLCBOVkRMQV9HRUNfRVJSU0xJQ0UxX01JU1NJT05FUlJfSU5KRUNUXzBfRVJSNDVf
U0hJRlQpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFfTUlTU0lPTkVSUl9JTkpF
Q1RfMF9FUlI0NV9ESVNBQkxFCQkJX01LX0VOVU1fQ09OU1QoMHgwKQ0KPiArI2RlZmluZSBO
VkRMQV9HRUNfRVJSU0xJQ0UxX01JU1NJT05FUlJfSU5KRUNUXzBfRVJSNDVfRU5BQkxFCQkJ
X01LX0VOVU1fQ09OU1QoMHgxKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX01J
U1NJT05FUlJfSU5KRUNUXzBfRVJSNDZfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMTQpDQo+
ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFfTUlTU0lPTkVSUl9JTkpFQ1RfMF9FUlI0
Nl9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweDEsIE5WRExBX0dFQ19FUlJTTElDRTFfTUlT
U0lPTkVSUl9JTkpFQ1RfMF9FUlI0Nl9TSElGVCkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VS
UlNMSUNFMV9NSVNTSU9ORVJSX0lOSkVDVF8wX0VSUjQ2X0RJU0FCTEUJCQlfTUtfRU5VTV9D
T05TVCgweDApDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFfTUlTU0lPTkVSUl9J
TkpFQ1RfMF9FUlI0Nl9FTkFCTEUJCQlfTUtfRU5VTV9DT05TVCgweDEpDQo+ICsjZGVmaW5l
IE5WRExBX0dFQ19FUlJTTElDRTFfTUlTU0lPTkVSUl9JTkpFQ1RfMF9FUlI0N19TSElGVAkJ
CV9NS19TSElGVF9DT05TVCgxNSkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMV9N
SVNTSU9ORVJSX0lOSkVDVF8wX0VSUjQ3X0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4MSwg
TlZETEFfR0VDX0VSUlNMSUNFMV9NSVNTSU9ORVJSX0lOSkVDVF8wX0VSUjQ3X1NISUZUKQ0K
PiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX01JU1NJT05FUlJfSU5KRUNUXzBfRVJS
NDdfRElTQUJMRQkJCV9NS19FTlVNX0NPTlNUKDB4MCkNCj4gKyNkZWZpbmUgTlZETEFfR0VD
X0VSUlNMSUNFMV9NSVNTSU9ORVJSX0lOSkVDVF8wX0VSUjQ3X0VOQUJMRQkJCV9NS19FTlVN
X0NPTlNUKDB4MSkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMV9NSVNTSU9ORVJS
X0lOSkVDVF8wX0VSUjQ4X1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDE2KQ0KPiArI2RlZmlu
ZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX01JU1NJT05FUlJfSU5KRUNUXzBfRVJSNDhfRklFTEQJ
CQlfTUtfRklFTERfQ09OU1QoMHgxLCBOVkRMQV9HRUNfRVJSU0xJQ0UxX01JU1NJT05FUlJf
SU5KRUNUXzBfRVJSNDhfU0hJRlQpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFf
TUlTU0lPTkVSUl9JTkpFQ1RfMF9FUlI0OF9ESVNBQkxFCQkJX01LX0VOVU1fQ09OU1QoMHgw
KQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX01JU1NJT05FUlJfSU5KRUNUXzBf
RVJSNDhfRU5BQkxFCQkJX01LX0VOVU1fQ09OU1QoMHgxKQ0KPiArI2RlZmluZSBOVkRMQV9H
RUNfRVJSU0xJQ0UxX01JU1NJT05FUlJfSU5KRUNUXzBfRVJSNDlfU0hJRlQJCQlfTUtfU0hJ
RlRfQ09OU1QoMTcpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFfTUlTU0lPTkVS
Ul9JTkpFQ1RfMF9FUlI0OV9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweDEsIE5WRExBX0dF
Q19FUlJTTElDRTFfTUlTU0lPTkVSUl9JTkpFQ1RfMF9FUlI0OV9TSElGVCkNCj4gKyNkZWZp
bmUgTlZETEFfR0VDX0VSUlNMSUNFMV9NSVNTSU9ORVJSX0lOSkVDVF8wX0VSUjQ5X0RJU0FC
TEUJCQlfTUtfRU5VTV9DT05TVCgweDApDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElD
RTFfTUlTU0lPTkVSUl9JTkpFQ1RfMF9FUlI0OV9FTkFCTEUJCQlfTUtfRU5VTV9DT05TVCgw
eDEpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFfTUlTU0lPTkVSUl9JTkpFQ1Rf
MF9FUlI1MF9TSElGVAkJCV9NS19TSElGVF9DT05TVCgxOCkNCj4gKyNkZWZpbmUgTlZETEFf
R0VDX0VSUlNMSUNFMV9NSVNTSU9ORVJSX0lOSkVDVF8wX0VSUjUwX0ZJRUxECQkJX01LX0ZJ
RUxEX0NPTlNUKDB4MSwgTlZETEFfR0VDX0VSUlNMSUNFMV9NSVNTSU9ORVJSX0lOSkVDVF8w
X0VSUjUwX1NISUZUKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX01JU1NJT05F
UlJfSU5KRUNUXzBfRVJSNTBfRElTQUJMRQkJCV9NS19FTlVNX0NPTlNUKDB4MCkNCj4gKyNk
ZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMV9NSVNTSU9ORVJSX0lOSkVDVF8wX0VSUjUwX0VO
QUJMRQkJCV9NS19FTlVNX0NPTlNUKDB4MSkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNM
SUNFMV9NSVNTSU9ORVJSX0lOSkVDVF8wX0VSUjUxX1NISUZUCQkJX01LX1NISUZUX0NPTlNU
KDE5KQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX01JU1NJT05FUlJfSU5KRUNU
XzBfRVJSNTFfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHgxLCBOVkRMQV9HRUNfRVJSU0xJ
Q0UxX01JU1NJT05FUlJfSU5KRUNUXzBfRVJSNTFfU0hJRlQpDQo+ICsjZGVmaW5lIE5WRExB
X0dFQ19FUlJTTElDRTFfTUlTU0lPTkVSUl9JTkpFQ1RfMF9FUlI1MV9ESVNBQkxFCQkJX01L
X0VOVU1fQ09OU1QoMHgwKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX01JU1NJ
T05FUlJfSU5KRUNUXzBfRVJSNTFfRU5BQkxFCQkJX01LX0VOVU1fQ09OU1QoMHgxKQ0KPiAr
I2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX01JU1NJT05FUlJfSU5KRUNUXzBfRVJSNTJf
U0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMjApDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJT
TElDRTFfTUlTU0lPTkVSUl9JTkpFQ1RfMF9FUlI1Ml9GSUVMRAkJCV9NS19GSUVMRF9DT05T
VCgweDEsIE5WRExBX0dFQ19FUlJTTElDRTFfTUlTU0lPTkVSUl9JTkpFQ1RfMF9FUlI1Ml9T
SElGVCkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMV9NSVNTSU9ORVJSX0lOSkVD
VF8wX0VSUjUyX0RJU0FCTEUJCQlfTUtfRU5VTV9DT05TVCgweDApDQo+ICsjZGVmaW5lIE5W
RExBX0dFQ19FUlJTTElDRTFfTUlTU0lPTkVSUl9JTkpFQ1RfMF9FUlI1Ml9FTkFCTEUJCQlf
TUtfRU5VTV9DT05TVCgweDEpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFfTUlT
U0lPTkVSUl9JTkpFQ1RfMF9FUlI1M19TSElGVAkJCV9NS19TSElGVF9DT05TVCgyMSkNCj4g
KyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMV9NSVNTSU9ORVJSX0lOSkVDVF8wX0VSUjUz
X0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4MSwgTlZETEFfR0VDX0VSUlNMSUNFMV9NSVNT
SU9ORVJSX0lOSkVDVF8wX0VSUjUzX1NISUZUKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJS
U0xJQ0UxX01JU1NJT05FUlJfSU5KRUNUXzBfRVJSNTNfRElTQUJMRQkJCV9NS19FTlVNX0NP
TlNUKDB4MCkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMV9NSVNTSU9ORVJSX0lO
SkVDVF8wX0VSUjUzX0VOQUJMRQkJCV9NS19FTlVNX0NPTlNUKDB4MSkNCj4gKyNkZWZpbmUg
TlZETEFfR0VDX0VSUlNMSUNFMV9NSVNTSU9ORVJSX0lOSkVDVF8wX0VSUjU0X1NISUZUCQkJ
X01LX1NISUZUX0NPTlNUKDIyKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX01J
U1NJT05FUlJfSU5KRUNUXzBfRVJSNTRfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHgxLCBO
VkRMQV9HRUNfRVJSU0xJQ0UxX01JU1NJT05FUlJfSU5KRUNUXzBfRVJSNTRfU0hJRlQpDQo+
ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFfTUlTU0lPTkVSUl9JTkpFQ1RfMF9FUlI1
NF9ESVNBQkxFCQkJX01LX0VOVU1fQ09OU1QoMHgwKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNf
RVJSU0xJQ0UxX01JU1NJT05FUlJfSU5KRUNUXzBfRVJSNTRfRU5BQkxFCQkJX01LX0VOVU1f
Q09OU1QoMHgxKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX01JU1NJT05FUlJf
SU5KRUNUXzBfRVJSNTVfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMjMpDQo+ICsjZGVmaW5l
IE5WRExBX0dFQ19FUlJTTElDRTFfTUlTU0lPTkVSUl9JTkpFQ1RfMF9FUlI1NV9GSUVMRAkJ
CV9NS19GSUVMRF9DT05TVCgweDEsIE5WRExBX0dFQ19FUlJTTElDRTFfTUlTU0lPTkVSUl9J
TkpFQ1RfMF9FUlI1NV9TSElGVCkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMV9N
SVNTSU9ORVJSX0lOSkVDVF8wX0VSUjU1X0RJU0FCTEUJCQlfTUtfRU5VTV9DT05TVCgweDAp
DQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFfTUlTU0lPTkVSUl9JTkpFQ1RfMF9F
UlI1NV9FTkFCTEUJCQlfTUtfRU5VTV9DT05TVCgweDEpDQo+ICsjZGVmaW5lIE5WRExBX0dF
Q19FUlJTTElDRTFfTUlTU0lPTkVSUl9JTkpFQ1RfMF9FUlI1Nl9TSElGVAkJCV9NS19TSElG
VF9DT05TVCgyNCkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMV9NSVNTSU9ORVJS
X0lOSkVDVF8wX0VSUjU2X0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4MSwgTlZETEFfR0VD
X0VSUlNMSUNFMV9NSVNTSU9ORVJSX0lOSkVDVF8wX0VSUjU2X1NISUZUKQ0KPiArI2RlZmlu
ZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX01JU1NJT05FUlJfSU5KRUNUXzBfRVJSNTZfRElTQUJM
RQkJCV9NS19FTlVNX0NPTlNUKDB4MCkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNF
MV9NSVNTSU9ORVJSX0lOSkVDVF8wX0VSUjU2X0VOQUJMRQkJCV9NS19FTlVNX0NPTlNUKDB4
MSkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMV9NSVNTSU9ORVJSX0lOSkVDVF8w
X0VSUjU3X1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDI1KQ0KPiArI2RlZmluZSBOVkRMQV9H
RUNfRVJSU0xJQ0UxX01JU1NJT05FUlJfSU5KRUNUXzBfRVJSNTdfRklFTEQJCQlfTUtfRklF
TERfQ09OU1QoMHgxLCBOVkRMQV9HRUNfRVJSU0xJQ0UxX01JU1NJT05FUlJfSU5KRUNUXzBf
RVJSNTdfU0hJRlQpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFfTUlTU0lPTkVS
Ul9JTkpFQ1RfMF9FUlI1N19ESVNBQkxFCQkJX01LX0VOVU1fQ09OU1QoMHgwKQ0KPiArI2Rl
ZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX01JU1NJT05FUlJfSU5KRUNUXzBfRVJSNTdfRU5B
QkxFCQkJX01LX0VOVU1fQ09OU1QoMHgxKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJ
Q0UxX01JU1NJT05FUlJfSU5KRUNUXzBfRVJSNThfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1Qo
MjYpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFfTUlTU0lPTkVSUl9JTkpFQ1Rf
MF9FUlI1OF9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweDEsIE5WRExBX0dFQ19FUlJTTElD
RTFfTUlTU0lPTkVSUl9JTkpFQ1RfMF9FUlI1OF9TSElGVCkNCj4gKyNkZWZpbmUgTlZETEFf
R0VDX0VSUlNMSUNFMV9NSVNTSU9ORVJSX0lOSkVDVF8wX0VSUjU4X0RJU0FCTEUJCQlfTUtf
RU5VTV9DT05TVCgweDApDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFfTUlTU0lP
TkVSUl9JTkpFQ1RfMF9FUlI1OF9FTkFCTEUJCQlfTUtfRU5VTV9DT05TVCgweDEpDQo+ICsj
ZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFfTUlTU0lPTkVSUl9JTkpFQ1RfMF9FUlI1OV9T
SElGVAkJCV9NS19TSElGVF9DT05TVCgyNykNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNM
SUNFMV9NSVNTSU9ORVJSX0lOSkVDVF8wX0VSUjU5X0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNU
KDB4MSwgTlZETEFfR0VDX0VSUlNMSUNFMV9NSVNTSU9ORVJSX0lOSkVDVF8wX0VSUjU5X1NI
SUZUKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX01JU1NJT05FUlJfSU5KRUNU
XzBfRVJSNTlfRElTQUJMRQkJCV9NS19FTlVNX0NPTlNUKDB4MCkNCj4gKyNkZWZpbmUgTlZE
TEFfR0VDX0VSUlNMSUNFMV9NSVNTSU9ORVJSX0lOSkVDVF8wX0VSUjU5X0VOQUJMRQkJCV9N
S19FTlVNX0NPTlNUKDB4MSkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMV9NSVNT
SU9ORVJSX0lOSkVDVF8wX0VSUjYwX1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDI4KQ0KPiAr
I2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX01JU1NJT05FUlJfSU5KRUNUXzBfRVJSNjBf
RklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHgxLCBOVkRMQV9HRUNfRVJSU0xJQ0UxX01JU1NJ
T05FUlJfSU5KRUNUXzBfRVJSNjBfU0hJRlQpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJT
TElDRTFfTUlTU0lPTkVSUl9JTkpFQ1RfMF9FUlI2MF9ESVNBQkxFCQkJX01LX0VOVU1fQ09O
U1QoMHgwKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX01JU1NJT05FUlJfSU5K
RUNUXzBfRVJSNjBfRU5BQkxFCQkJX01LX0VOVU1fQ09OU1QoMHgxKQ0KPiArI2RlZmluZSBO
VkRMQV9HRUNfRVJSU0xJQ0UxX01JU1NJT05FUlJfSU5KRUNUXzBfRVJSNjFfU0hJRlQJCQlf
TUtfU0hJRlRfQ09OU1QoMjkpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFfTUlT
U0lPTkVSUl9JTkpFQ1RfMF9FUlI2MV9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweDEsIE5W
RExBX0dFQ19FUlJTTElDRTFfTUlTU0lPTkVSUl9JTkpFQ1RfMF9FUlI2MV9TSElGVCkNCj4g
KyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMV9NSVNTSU9ORVJSX0lOSkVDVF8wX0VSUjYx
X0RJU0FCTEUJCQlfTUtfRU5VTV9DT05TVCgweDApDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19F
UlJTTElDRTFfTUlTU0lPTkVSUl9JTkpFQ1RfMF9FUlI2MV9FTkFCTEUJCQlfTUtfRU5VTV9D
T05TVCgweDEpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFfTUlTU0lPTkVSUl9J
TkpFQ1RfMF9FUlI2Ml9TSElGVAkJCV9NS19TSElGVF9DT05TVCgzMCkNCj4gKyNkZWZpbmUg
TlZETEFfR0VDX0VSUlNMSUNFMV9NSVNTSU9ORVJSX0lOSkVDVF8wX0VSUjYyX0ZJRUxECQkJ
X01LX0ZJRUxEX0NPTlNUKDB4MSwgTlZETEFfR0VDX0VSUlNMSUNFMV9NSVNTSU9ORVJSX0lO
SkVDVF8wX0VSUjYyX1NISUZUKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX01J
U1NJT05FUlJfSU5KRUNUXzBfRVJSNjJfRElTQUJMRQkJCV9NS19FTlVNX0NPTlNUKDB4MCkN
Cj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMV9NSVNTSU9ORVJSX0lOSkVDVF8wX0VS
UjYyX0VOQUJMRQkJCV9NS19FTlVNX0NPTlNUKDB4MSkNCj4gKyNkZWZpbmUgTlZETEFfR0VD
X0VSUlNMSUNFMV9NSVNTSU9ORVJSX0lOSkVDVF8wX0VSUjYzX1NISUZUCQkJX01LX1NISUZU
X0NPTlNUKDMxKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX01JU1NJT05FUlJf
SU5KRUNUXzBfRVJSNjNfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHgxLCBOVkRMQV9HRUNf
RVJSU0xJQ0UxX01JU1NJT05FUlJfSU5KRUNUXzBfRVJSNjNfU0hJRlQpDQo+ICsjZGVmaW5l
IE5WRExBX0dFQ19FUlJTTElDRTFfTUlTU0lPTkVSUl9JTkpFQ1RfMF9FUlI2M19ESVNBQkxF
CQkJX01LX0VOVU1fQ09OU1QoMHgwKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0Ux
X01JU1NJT05FUlJfSU5KRUNUXzBfRVJSNjNfRU5BQkxFCQkJX01LX0VOVU1fQ09OU1QoMHgx
KQ0KPiArDQo+ICsNCj4gKy8vIFJlZ2lzdGVyIE5WRExBX0dFQ19FUlJTTElDRTFfTEFURU5U
RVJSX0VOQUJMRV8wDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFfTEFURU5URVJS
X0VOQUJMRV8wCQkJX01LX0FERFJfQ09OU1QoMHhlMDcwKQ0KPiArI2RlZmluZSBOVkRMQV9H
RUNfRVJSU0xJQ0UxX0xBVEVOVEVSUl9FTkFCTEVfMF9FUlIzMl9TSElGVAkJCV9NS19TSElG
VF9DT05TVCgwKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX0xBVEVOVEVSUl9F
TkFCTEVfMF9FUlIzMl9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweDEsIE5WRExBX0dFQ19F
UlJTTElDRTFfTEFURU5URVJSX0VOQUJMRV8wX0VSUjMyX1NISUZUKQ0KPiArI2RlZmluZSBO
VkRMQV9HRUNfRVJSU0xJQ0UxX0xBVEVOVEVSUl9FTkFCTEVfMF9FUlIzMl9ESVNBQkxFCQkJ
X01LX0VOVU1fQ09OU1QoMHgwKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX0xB
VEVOVEVSUl9FTkFCTEVfMF9FUlIzMl9FTkFCTEUJCQlfTUtfRU5VTV9DT05TVCgweDEpDQo+
ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFfTEFURU5URVJSX0VOQUJMRV8wX0VSUjMz
X1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDEpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJT
TElDRTFfTEFURU5URVJSX0VOQUJMRV8wX0VSUjMzX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNU
KDB4MSwgTlZETEFfR0VDX0VSUlNMSUNFMV9MQVRFTlRFUlJfRU5BQkxFXzBfRVJSMzNfU0hJ
RlQpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFfTEFURU5URVJSX0VOQUJMRV8w
X0VSUjMzX0RJU0FCTEUJCQlfTUtfRU5VTV9DT05TVCgweDApDQo+ICsjZGVmaW5lIE5WRExB
X0dFQ19FUlJTTElDRTFfTEFURU5URVJSX0VOQUJMRV8wX0VSUjMzX0VOQUJMRQkJCV9NS19F
TlVNX0NPTlNUKDB4MSkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMV9MQVRFTlRF
UlJfRU5BQkxFXzBfRVJSMzRfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMikNCj4gKyNkZWZp
bmUgTlZETEFfR0VDX0VSUlNMSUNFMV9MQVRFTlRFUlJfRU5BQkxFXzBfRVJSMzRfRklFTEQJ
CQlfTUtfRklFTERfQ09OU1QoMHgxLCBOVkRMQV9HRUNfRVJSU0xJQ0UxX0xBVEVOVEVSUl9F
TkFCTEVfMF9FUlIzNF9TSElGVCkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMV9M
QVRFTlRFUlJfRU5BQkxFXzBfRVJSMzRfRElTQUJMRQkJCV9NS19FTlVNX0NPTlNUKDB4MCkN
Cj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMV9MQVRFTlRFUlJfRU5BQkxFXzBfRVJS
MzRfRU5BQkxFCQkJX01LX0VOVU1fQ09OU1QoMHgxKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNf
RVJSU0xJQ0UxX0xBVEVOVEVSUl9FTkFCTEVfMF9FUlIzNV9TSElGVAkJCV9NS19TSElGVF9D
T05TVCgzKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX0xBVEVOVEVSUl9FTkFC
TEVfMF9FUlIzNV9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweDEsIE5WRExBX0dFQ19FUlJT
TElDRTFfTEFURU5URVJSX0VOQUJMRV8wX0VSUjM1X1NISUZUKQ0KPiArI2RlZmluZSBOVkRM
QV9HRUNfRVJSU0xJQ0UxX0xBVEVOVEVSUl9FTkFCTEVfMF9FUlIzNV9ESVNBQkxFCQkJX01L
X0VOVU1fQ09OU1QoMHgwKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX0xBVEVO
VEVSUl9FTkFCTEVfMF9FUlIzNV9FTkFCTEUJCQlfTUtfRU5VTV9DT05TVCgweDEpDQo+ICsj
ZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFfTEFURU5URVJSX0VOQUJMRV8wX0VSUjM2X1NI
SUZUCQkJX01LX1NISUZUX0NPTlNUKDQpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElD
RTFfTEFURU5URVJSX0VOQUJMRV8wX0VSUjM2X0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4
MSwgTlZETEFfR0VDX0VSUlNMSUNFMV9MQVRFTlRFUlJfRU5BQkxFXzBfRVJSMzZfU0hJRlQp
DQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFfTEFURU5URVJSX0VOQUJMRV8wX0VS
UjM2X0RJU0FCTEUJCQlfTUtfRU5VTV9DT05TVCgweDApDQo+ICsjZGVmaW5lIE5WRExBX0dF
Q19FUlJTTElDRTFfTEFURU5URVJSX0VOQUJMRV8wX0VSUjM2X0VOQUJMRQkJCV9NS19FTlVN
X0NPTlNUKDB4MSkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMV9MQVRFTlRFUlJf
RU5BQkxFXzBfRVJSMzdfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoNSkNCj4gKyNkZWZpbmUg
TlZETEFfR0VDX0VSUlNMSUNFMV9MQVRFTlRFUlJfRU5BQkxFXzBfRVJSMzdfRklFTEQJCQlf
TUtfRklFTERfQ09OU1QoMHgxLCBOVkRMQV9HRUNfRVJSU0xJQ0UxX0xBVEVOVEVSUl9FTkFC
TEVfMF9FUlIzN19TSElGVCkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMV9MQVRF
TlRFUlJfRU5BQkxFXzBfRVJSMzdfRElTQUJMRQkJCV9NS19FTlVNX0NPTlNUKDB4MCkNCj4g
KyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMV9MQVRFTlRFUlJfRU5BQkxFXzBfRVJSMzdf
RU5BQkxFCQkJX01LX0VOVU1fQ09OU1QoMHgxKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJS
U0xJQ0UxX0xBVEVOVEVSUl9FTkFCTEVfMF9FUlIzOF9TSElGVAkJCV9NS19TSElGVF9DT05T
VCg2KQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX0xBVEVOVEVSUl9FTkFCTEVf
MF9FUlIzOF9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweDEsIE5WRExBX0dFQ19FUlJTTElD
RTFfTEFURU5URVJSX0VOQUJMRV8wX0VSUjM4X1NISUZUKQ0KPiArI2RlZmluZSBOVkRMQV9H
RUNfRVJSU0xJQ0UxX0xBVEVOVEVSUl9FTkFCTEVfMF9FUlIzOF9ESVNBQkxFCQkJX01LX0VO
VU1fQ09OU1QoMHgwKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX0xBVEVOVEVS
Ul9FTkFCTEVfMF9FUlIzOF9FTkFCTEUJCQlfTUtfRU5VTV9DT05TVCgweDEpDQo+ICsjZGVm
aW5lIE5WRExBX0dFQ19FUlJTTElDRTFfTEFURU5URVJSX0VOQUJMRV8wX0VSUjM5X1NISUZU
CQkJX01LX1NISUZUX0NPTlNUKDcpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFf
TEFURU5URVJSX0VOQUJMRV8wX0VSUjM5X0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4MSwg
TlZETEFfR0VDX0VSUlNMSUNFMV9MQVRFTlRFUlJfRU5BQkxFXzBfRVJSMzlfU0hJRlQpDQo+
ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFfTEFURU5URVJSX0VOQUJMRV8wX0VSUjM5
X0RJU0FCTEUJCQlfTUtfRU5VTV9DT05TVCgweDApDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19F
UlJTTElDRTFfTEFURU5URVJSX0VOQUJMRV8wX0VSUjM5X0VOQUJMRQkJCV9NS19FTlVNX0NP
TlNUKDB4MSkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMV9MQVRFTlRFUlJfRU5B
QkxFXzBfRVJSNDBfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoOCkNCj4gKyNkZWZpbmUgTlZE
TEFfR0VDX0VSUlNMSUNFMV9MQVRFTlRFUlJfRU5BQkxFXzBfRVJSNDBfRklFTEQJCQlfTUtf
RklFTERfQ09OU1QoMHgxLCBOVkRMQV9HRUNfRVJSU0xJQ0UxX0xBVEVOVEVSUl9FTkFCTEVf
MF9FUlI0MF9TSElGVCkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMV9MQVRFTlRF
UlJfRU5BQkxFXzBfRVJSNDBfRElTQUJMRQkJCV9NS19FTlVNX0NPTlNUKDB4MCkNCj4gKyNk
ZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMV9MQVRFTlRFUlJfRU5BQkxFXzBfRVJSNDBfRU5B
QkxFCQkJX01LX0VOVU1fQ09OU1QoMHgxKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJ
Q0UxX0xBVEVOVEVSUl9FTkFCTEVfMF9FUlI0MV9TSElGVAkJCV9NS19TSElGVF9DT05TVCg5
KQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX0xBVEVOVEVSUl9FTkFCTEVfMF9F
UlI0MV9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweDEsIE5WRExBX0dFQ19FUlJTTElDRTFf
TEFURU5URVJSX0VOQUJMRV8wX0VSUjQxX1NISUZUKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNf
RVJSU0xJQ0UxX0xBVEVOVEVSUl9FTkFCTEVfMF9FUlI0MV9ESVNBQkxFCQkJX01LX0VOVU1f
Q09OU1QoMHgwKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX0xBVEVOVEVSUl9F
TkFCTEVfMF9FUlI0MV9FTkFCTEUJCQlfTUtfRU5VTV9DT05TVCgweDEpDQo+ICsjZGVmaW5l
IE5WRExBX0dFQ19FUlJTTElDRTFfTEFURU5URVJSX0VOQUJMRV8wX0VSUjQyX1NISUZUCQkJ
X01LX1NISUZUX0NPTlNUKDEwKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX0xB
VEVOVEVSUl9FTkFCTEVfMF9FUlI0Ml9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweDEsIE5W
RExBX0dFQ19FUlJTTElDRTFfTEFURU5URVJSX0VOQUJMRV8wX0VSUjQyX1NISUZUKQ0KPiAr
I2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX0xBVEVOVEVSUl9FTkFCTEVfMF9FUlI0Ml9E
SVNBQkxFCQkJX01LX0VOVU1fQ09OU1QoMHgwKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJS
U0xJQ0UxX0xBVEVOVEVSUl9FTkFCTEVfMF9FUlI0Ml9FTkFCTEUJCQlfTUtfRU5VTV9DT05T
VCgweDEpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFfTEFURU5URVJSX0VOQUJM
RV8wX0VSUjQzX1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDExKQ0KPiArI2RlZmluZSBOVkRM
QV9HRUNfRVJSU0xJQ0UxX0xBVEVOVEVSUl9FTkFCTEVfMF9FUlI0M19GSUVMRAkJCV9NS19G
SUVMRF9DT05TVCgweDEsIE5WRExBX0dFQ19FUlJTTElDRTFfTEFURU5URVJSX0VOQUJMRV8w
X0VSUjQzX1NISUZUKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX0xBVEVOVEVS
Ul9FTkFCTEVfMF9FUlI0M19ESVNBQkxFCQkJX01LX0VOVU1fQ09OU1QoMHgwKQ0KPiArI2Rl
ZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX0xBVEVOVEVSUl9FTkFCTEVfMF9FUlI0M19FTkFC
TEUJCQlfTUtfRU5VTV9DT05TVCgweDEpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElD
RTFfTEFURU5URVJSX0VOQUJMRV8wX0VSUjQ0X1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDEy
KQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX0xBVEVOVEVSUl9FTkFCTEVfMF9F
UlI0NF9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweDEsIE5WRExBX0dFQ19FUlJTTElDRTFf
TEFURU5URVJSX0VOQUJMRV8wX0VSUjQ0X1NISUZUKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNf
RVJSU0xJQ0UxX0xBVEVOVEVSUl9FTkFCTEVfMF9FUlI0NF9ESVNBQkxFCQkJX01LX0VOVU1f
Q09OU1QoMHgwKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX0xBVEVOVEVSUl9F
TkFCTEVfMF9FUlI0NF9FTkFCTEUJCQlfTUtfRU5VTV9DT05TVCgweDEpDQo+ICsjZGVmaW5l
IE5WRExBX0dFQ19FUlJTTElDRTFfTEFURU5URVJSX0VOQUJMRV8wX0VSUjQ1X1NISUZUCQkJ
X01LX1NISUZUX0NPTlNUKDEzKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX0xB
VEVOVEVSUl9FTkFCTEVfMF9FUlI0NV9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweDEsIE5W
RExBX0dFQ19FUlJTTElDRTFfTEFURU5URVJSX0VOQUJMRV8wX0VSUjQ1X1NISUZUKQ0KPiAr
I2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX0xBVEVOVEVSUl9FTkFCTEVfMF9FUlI0NV9E
SVNBQkxFCQkJX01LX0VOVU1fQ09OU1QoMHgwKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJS
U0xJQ0UxX0xBVEVOVEVSUl9FTkFCTEVfMF9FUlI0NV9FTkFCTEUJCQlfTUtfRU5VTV9DT05T
VCgweDEpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFfTEFURU5URVJSX0VOQUJM
RV8wX0VSUjQ2X1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDE0KQ0KPiArI2RlZmluZSBOVkRM
QV9HRUNfRVJSU0xJQ0UxX0xBVEVOVEVSUl9FTkFCTEVfMF9FUlI0Nl9GSUVMRAkJCV9NS19G
SUVMRF9DT05TVCgweDEsIE5WRExBX0dFQ19FUlJTTElDRTFfTEFURU5URVJSX0VOQUJMRV8w
X0VSUjQ2X1NISUZUKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX0xBVEVOVEVS
Ul9FTkFCTEVfMF9FUlI0Nl9ESVNBQkxFCQkJX01LX0VOVU1fQ09OU1QoMHgwKQ0KPiArI2Rl
ZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX0xBVEVOVEVSUl9FTkFCTEVfMF9FUlI0Nl9FTkFC
TEUJCQlfTUtfRU5VTV9DT05TVCgweDEpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElD
RTFfTEFURU5URVJSX0VOQUJMRV8wX0VSUjQ3X1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDE1
KQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX0xBVEVOVEVSUl9FTkFCTEVfMF9F
UlI0N19GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweDEsIE5WRExBX0dFQ19FUlJTTElDRTFf
TEFURU5URVJSX0VOQUJMRV8wX0VSUjQ3X1NISUZUKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNf
RVJSU0xJQ0UxX0xBVEVOVEVSUl9FTkFCTEVfMF9FUlI0N19ESVNBQkxFCQkJX01LX0VOVU1f
Q09OU1QoMHgwKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX0xBVEVOVEVSUl9F
TkFCTEVfMF9FUlI0N19FTkFCTEUJCQlfTUtfRU5VTV9DT05TVCgweDEpDQo+ICsjZGVmaW5l
IE5WRExBX0dFQ19FUlJTTElDRTFfTEFURU5URVJSX0VOQUJMRV8wX0VSUjQ4X1NISUZUCQkJ
X01LX1NISUZUX0NPTlNUKDE2KQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX0xB
VEVOVEVSUl9FTkFCTEVfMF9FUlI0OF9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweDEsIE5W
RExBX0dFQ19FUlJTTElDRTFfTEFURU5URVJSX0VOQUJMRV8wX0VSUjQ4X1NISUZUKQ0KPiAr
I2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX0xBVEVOVEVSUl9FTkFCTEVfMF9FUlI0OF9E
SVNBQkxFCQkJX01LX0VOVU1fQ09OU1QoMHgwKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJS
U0xJQ0UxX0xBVEVOVEVSUl9FTkFCTEVfMF9FUlI0OF9FTkFCTEUJCQlfTUtfRU5VTV9DT05T
VCgweDEpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFfTEFURU5URVJSX0VOQUJM
RV8wX0VSUjQ5X1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDE3KQ0KPiArI2RlZmluZSBOVkRM
QV9HRUNfRVJSU0xJQ0UxX0xBVEVOVEVSUl9FTkFCTEVfMF9FUlI0OV9GSUVMRAkJCV9NS19G
SUVMRF9DT05TVCgweDEsIE5WRExBX0dFQ19FUlJTTElDRTFfTEFURU5URVJSX0VOQUJMRV8w
X0VSUjQ5X1NISUZUKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX0xBVEVOVEVS
Ul9FTkFCTEVfMF9FUlI0OV9ESVNBQkxFCQkJX01LX0VOVU1fQ09OU1QoMHgwKQ0KPiArI2Rl
ZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX0xBVEVOVEVSUl9FTkFCTEVfMF9FUlI0OV9FTkFC
TEUJCQlfTUtfRU5VTV9DT05TVCgweDEpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElD
RTFfTEFURU5URVJSX0VOQUJMRV8wX0VSUjUwX1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDE4
KQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX0xBVEVOVEVSUl9FTkFCTEVfMF9F
UlI1MF9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweDEsIE5WRExBX0dFQ19FUlJTTElDRTFf
TEFURU5URVJSX0VOQUJMRV8wX0VSUjUwX1NISUZUKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNf
RVJSU0xJQ0UxX0xBVEVOVEVSUl9FTkFCTEVfMF9FUlI1MF9ESVNBQkxFCQkJX01LX0VOVU1f
Q09OU1QoMHgwKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX0xBVEVOVEVSUl9F
TkFCTEVfMF9FUlI1MF9FTkFCTEUJCQlfTUtfRU5VTV9DT05TVCgweDEpDQo+ICsjZGVmaW5l
IE5WRExBX0dFQ19FUlJTTElDRTFfTEFURU5URVJSX0VOQUJMRV8wX0VSUjUxX1NISUZUCQkJ
X01LX1NISUZUX0NPTlNUKDE5KQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX0xB
VEVOVEVSUl9FTkFCTEVfMF9FUlI1MV9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweDEsIE5W
RExBX0dFQ19FUlJTTElDRTFfTEFURU5URVJSX0VOQUJMRV8wX0VSUjUxX1NISUZUKQ0KPiAr
I2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX0xBVEVOVEVSUl9FTkFCTEVfMF9FUlI1MV9E
SVNBQkxFCQkJX01LX0VOVU1fQ09OU1QoMHgwKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJS
U0xJQ0UxX0xBVEVOVEVSUl9FTkFCTEVfMF9FUlI1MV9FTkFCTEUJCQlfTUtfRU5VTV9DT05T
VCgweDEpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFfTEFURU5URVJSX0VOQUJM
RV8wX0VSUjUyX1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDIwKQ0KPiArI2RlZmluZSBOVkRM
QV9HRUNfRVJSU0xJQ0UxX0xBVEVOVEVSUl9FTkFCTEVfMF9FUlI1Ml9GSUVMRAkJCV9NS19G
SUVMRF9DT05TVCgweDEsIE5WRExBX0dFQ19FUlJTTElDRTFfTEFURU5URVJSX0VOQUJMRV8w
X0VSUjUyX1NISUZUKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX0xBVEVOVEVS
Ul9FTkFCTEVfMF9FUlI1Ml9ESVNBQkxFCQkJX01LX0VOVU1fQ09OU1QoMHgwKQ0KPiArI2Rl
ZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX0xBVEVOVEVSUl9FTkFCTEVfMF9FUlI1Ml9FTkFC
TEUJCQlfTUtfRU5VTV9DT05TVCgweDEpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElD
RTFfTEFURU5URVJSX0VOQUJMRV8wX0VSUjUzX1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDIx
KQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX0xBVEVOVEVSUl9FTkFCTEVfMF9F
UlI1M19GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweDEsIE5WRExBX0dFQ19FUlJTTElDRTFf
TEFURU5URVJSX0VOQUJMRV8wX0VSUjUzX1NISUZUKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNf
RVJSU0xJQ0UxX0xBVEVOVEVSUl9FTkFCTEVfMF9FUlI1M19ESVNBQkxFCQkJX01LX0VOVU1f
Q09OU1QoMHgwKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX0xBVEVOVEVSUl9F
TkFCTEVfMF9FUlI1M19FTkFCTEUJCQlfTUtfRU5VTV9DT05TVCgweDEpDQo+ICsjZGVmaW5l
IE5WRExBX0dFQ19FUlJTTElDRTFfTEFURU5URVJSX0VOQUJMRV8wX0VSUjU0X1NISUZUCQkJ
X01LX1NISUZUX0NPTlNUKDIyKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX0xB
VEVOVEVSUl9FTkFCTEVfMF9FUlI1NF9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweDEsIE5W
RExBX0dFQ19FUlJTTElDRTFfTEFURU5URVJSX0VOQUJMRV8wX0VSUjU0X1NISUZUKQ0KPiAr
I2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX0xBVEVOVEVSUl9FTkFCTEVfMF9FUlI1NF9E
SVNBQkxFCQkJX01LX0VOVU1fQ09OU1QoMHgwKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJS
U0xJQ0UxX0xBVEVOVEVSUl9FTkFCTEVfMF9FUlI1NF9FTkFCTEUJCQlfTUtfRU5VTV9DT05T
VCgweDEpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFfTEFURU5URVJSX0VOQUJM
RV8wX0VSUjU1X1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDIzKQ0KPiArI2RlZmluZSBOVkRM
QV9HRUNfRVJSU0xJQ0UxX0xBVEVOVEVSUl9FTkFCTEVfMF9FUlI1NV9GSUVMRAkJCV9NS19G
SUVMRF9DT05TVCgweDEsIE5WRExBX0dFQ19FUlJTTElDRTFfTEFURU5URVJSX0VOQUJMRV8w
X0VSUjU1X1NISUZUKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX0xBVEVOVEVS
Ul9FTkFCTEVfMF9FUlI1NV9ESVNBQkxFCQkJX01LX0VOVU1fQ09OU1QoMHgwKQ0KPiArI2Rl
ZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX0xBVEVOVEVSUl9FTkFCTEVfMF9FUlI1NV9FTkFC
TEUJCQlfTUtfRU5VTV9DT05TVCgweDEpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElD
RTFfTEFURU5URVJSX0VOQUJMRV8wX0VSUjU2X1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDI0
KQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX0xBVEVOVEVSUl9FTkFCTEVfMF9F
UlI1Nl9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweDEsIE5WRExBX0dFQ19FUlJTTElDRTFf
TEFURU5URVJSX0VOQUJMRV8wX0VSUjU2X1NISUZUKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNf
RVJSU0xJQ0UxX0xBVEVOVEVSUl9FTkFCTEVfMF9FUlI1Nl9ESVNBQkxFCQkJX01LX0VOVU1f
Q09OU1QoMHgwKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX0xBVEVOVEVSUl9F
TkFCTEVfMF9FUlI1Nl9FTkFCTEUJCQlfTUtfRU5VTV9DT05TVCgweDEpDQo+ICsjZGVmaW5l
IE5WRExBX0dFQ19FUlJTTElDRTFfTEFURU5URVJSX0VOQUJMRV8wX0VSUjU3X1NISUZUCQkJ
X01LX1NISUZUX0NPTlNUKDI1KQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX0xB
VEVOVEVSUl9FTkFCTEVfMF9FUlI1N19GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweDEsIE5W
RExBX0dFQ19FUlJTTElDRTFfTEFURU5URVJSX0VOQUJMRV8wX0VSUjU3X1NISUZUKQ0KPiAr
I2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX0xBVEVOVEVSUl9FTkFCTEVfMF9FUlI1N19E
SVNBQkxFCQkJX01LX0VOVU1fQ09OU1QoMHgwKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJS
U0xJQ0UxX0xBVEVOVEVSUl9FTkFCTEVfMF9FUlI1N19FTkFCTEUJCQlfTUtfRU5VTV9DT05T
VCgweDEpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFfTEFURU5URVJSX0VOQUJM
RV8wX0VSUjU4X1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDI2KQ0KPiArI2RlZmluZSBOVkRM
QV9HRUNfRVJSU0xJQ0UxX0xBVEVOVEVSUl9FTkFCTEVfMF9FUlI1OF9GSUVMRAkJCV9NS19G
SUVMRF9DT05TVCgweDEsIE5WRExBX0dFQ19FUlJTTElDRTFfTEFURU5URVJSX0VOQUJMRV8w
X0VSUjU4X1NISUZUKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX0xBVEVOVEVS
Ul9FTkFCTEVfMF9FUlI1OF9ESVNBQkxFCQkJX01LX0VOVU1fQ09OU1QoMHgwKQ0KPiArI2Rl
ZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX0xBVEVOVEVSUl9FTkFCTEVfMF9FUlI1OF9FTkFC
TEUJCQlfTUtfRU5VTV9DT05TVCgweDEpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElD
RTFfTEFURU5URVJSX0VOQUJMRV8wX0VSUjU5X1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDI3
KQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX0xBVEVOVEVSUl9FTkFCTEVfMF9F
UlI1OV9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweDEsIE5WRExBX0dFQ19FUlJTTElDRTFf
TEFURU5URVJSX0VOQUJMRV8wX0VSUjU5X1NISUZUKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNf
RVJSU0xJQ0UxX0xBVEVOVEVSUl9FTkFCTEVfMF9FUlI1OV9ESVNBQkxFCQkJX01LX0VOVU1f
Q09OU1QoMHgwKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX0xBVEVOVEVSUl9F
TkFCTEVfMF9FUlI1OV9FTkFCTEUJCQlfTUtfRU5VTV9DT05TVCgweDEpDQo+ICsjZGVmaW5l
IE5WRExBX0dFQ19FUlJTTElDRTFfTEFURU5URVJSX0VOQUJMRV8wX0VSUjYwX1NISUZUCQkJ
X01LX1NISUZUX0NPTlNUKDI4KQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX0xB
VEVOVEVSUl9FTkFCTEVfMF9FUlI2MF9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweDEsIE5W
RExBX0dFQ19FUlJTTElDRTFfTEFURU5URVJSX0VOQUJMRV8wX0VSUjYwX1NISUZUKQ0KPiAr
I2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX0xBVEVOVEVSUl9FTkFCTEVfMF9FUlI2MF9E
SVNBQkxFCQkJX01LX0VOVU1fQ09OU1QoMHgwKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJS
U0xJQ0UxX0xBVEVOVEVSUl9FTkFCTEVfMF9FUlI2MF9FTkFCTEUJCQlfTUtfRU5VTV9DT05T
VCgweDEpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFfTEFURU5URVJSX0VOQUJM
RV8wX0VSUjYxX1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDI5KQ0KPiArI2RlZmluZSBOVkRM
QV9HRUNfRVJSU0xJQ0UxX0xBVEVOVEVSUl9FTkFCTEVfMF9FUlI2MV9GSUVMRAkJCV9NS19G
SUVMRF9DT05TVCgweDEsIE5WRExBX0dFQ19FUlJTTElDRTFfTEFURU5URVJSX0VOQUJMRV8w
X0VSUjYxX1NISUZUKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX0xBVEVOVEVS
Ul9FTkFCTEVfMF9FUlI2MV9ESVNBQkxFCQkJX01LX0VOVU1fQ09OU1QoMHgwKQ0KPiArI2Rl
ZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX0xBVEVOVEVSUl9FTkFCTEVfMF9FUlI2MV9FTkFC
TEUJCQlfTUtfRU5VTV9DT05TVCgweDEpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElD
RTFfTEFURU5URVJSX0VOQUJMRV8wX0VSUjYyX1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDMw
KQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX0xBVEVOVEVSUl9FTkFCTEVfMF9F
UlI2Ml9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweDEsIE5WRExBX0dFQ19FUlJTTElDRTFf
TEFURU5URVJSX0VOQUJMRV8wX0VSUjYyX1NISUZUKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNf
RVJSU0xJQ0UxX0xBVEVOVEVSUl9FTkFCTEVfMF9FUlI2Ml9ESVNBQkxFCQkJX01LX0VOVU1f
Q09OU1QoMHgwKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX0xBVEVOVEVSUl9F
TkFCTEVfMF9FUlI2Ml9FTkFCTEUJCQlfTUtfRU5VTV9DT05TVCgweDEpDQo+ICsjZGVmaW5l
IE5WRExBX0dFQ19FUlJTTElDRTFfTEFURU5URVJSX0VOQUJMRV8wX0VSUjYzX1NISUZUCQkJ
X01LX1NISUZUX0NPTlNUKDMxKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX0xB
VEVOVEVSUl9FTkFCTEVfMF9FUlI2M19GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweDEsIE5W
RExBX0dFQ19FUlJTTElDRTFfTEFURU5URVJSX0VOQUJMRV8wX0VSUjYzX1NISUZUKQ0KPiAr
I2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX0xBVEVOVEVSUl9FTkFCTEVfMF9FUlI2M19E
SVNBQkxFCQkJX01LX0VOVU1fQ09OU1QoMHgwKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJS
U0xJQ0UxX0xBVEVOVEVSUl9FTkFCTEVfMF9FUlI2M19FTkFCTEUJCQlfTUtfRU5VTV9DT05T
VCgweDEpDQo+ICsNCj4gKw0KPiArLy8gUmVnaXN0ZXIgTlZETEFfR0VDX0VSUlNMSUNFMV9M
QVRFTlRFUlJfRk9SQ0VfMA0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX0xBVEVO
VEVSUl9GT1JDRV8wCQkJX01LX0FERFJfQ09OU1QoMHhlMDc0KQ0KPiArI2RlZmluZSBOVkRM
QV9HRUNfRVJSU0xJQ0UxX0xBVEVOVEVSUl9GT1JDRV8wX0VSUjMyX1NISUZUCQkJX01LX1NI
SUZUX0NPTlNUKDApDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFfTEFURU5URVJS
X0ZPUkNFXzBfRVJSMzJfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHgxLCBOVkRMQV9HRUNf
RVJSU0xJQ0UxX0xBVEVOVEVSUl9GT1JDRV8wX0VSUjMyX1NISUZUKQ0KPiArI2RlZmluZSBO
VkRMQV9HRUNfRVJSU0xJQ0UxX0xBVEVOVEVSUl9GT1JDRV8wX0VSUjMyX05PRk9SQ0UJCQlf
TUtfRU5VTV9DT05TVCgweDApDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFfTEFU
RU5URVJSX0ZPUkNFXzBfRVJSMzJfRk9SQ0UJCQlfTUtfRU5VTV9DT05TVCgweDEpDQo+ICsj
ZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFfTEFURU5URVJSX0ZPUkNFXzBfRVJSMzNfU0hJ
RlQJCQlfTUtfU0hJRlRfQ09OU1QoMSkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNF
MV9MQVRFTlRFUlJfRk9SQ0VfMF9FUlIzM19GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweDEs
IE5WRExBX0dFQ19FUlJTTElDRTFfTEFURU5URVJSX0ZPUkNFXzBfRVJSMzNfU0hJRlQpDQo+
ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFfTEFURU5URVJSX0ZPUkNFXzBfRVJSMzNf
Tk9GT1JDRQkJCV9NS19FTlVNX0NPTlNUKDB4MCkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VS
UlNMSUNFMV9MQVRFTlRFUlJfRk9SQ0VfMF9FUlIzM19GT1JDRQkJCV9NS19FTlVNX0NPTlNU
KDB4MSkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMV9MQVRFTlRFUlJfRk9SQ0Vf
MF9FUlIzNF9TSElGVAkJCV9NS19TSElGVF9DT05TVCgyKQ0KPiArI2RlZmluZSBOVkRMQV9H
RUNfRVJSU0xJQ0UxX0xBVEVOVEVSUl9GT1JDRV8wX0VSUjM0X0ZJRUxECQkJX01LX0ZJRUxE
X0NPTlNUKDB4MSwgTlZETEFfR0VDX0VSUlNMSUNFMV9MQVRFTlRFUlJfRk9SQ0VfMF9FUlIz
NF9TSElGVCkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMV9MQVRFTlRFUlJfRk9S
Q0VfMF9FUlIzNF9OT0ZPUkNFCQkJX01LX0VOVU1fQ09OU1QoMHgwKQ0KPiArI2RlZmluZSBO
VkRMQV9HRUNfRVJSU0xJQ0UxX0xBVEVOVEVSUl9GT1JDRV8wX0VSUjM0X0ZPUkNFCQkJX01L
X0VOVU1fQ09OU1QoMHgxKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX0xBVEVO
VEVSUl9GT1JDRV8wX0VSUjM1X1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDMpDQo+ICsjZGVm
aW5lIE5WRExBX0dFQ19FUlJTTElDRTFfTEFURU5URVJSX0ZPUkNFXzBfRVJSMzVfRklFTEQJ
CQlfTUtfRklFTERfQ09OU1QoMHgxLCBOVkRMQV9HRUNfRVJSU0xJQ0UxX0xBVEVOVEVSUl9G
T1JDRV8wX0VSUjM1X1NISUZUKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX0xB
VEVOVEVSUl9GT1JDRV8wX0VSUjM1X05PRk9SQ0UJCQlfTUtfRU5VTV9DT05TVCgweDApDQo+
ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFfTEFURU5URVJSX0ZPUkNFXzBfRVJSMzVf
Rk9SQ0UJCQlfTUtfRU5VTV9DT05TVCgweDEpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJT
TElDRTFfTEFURU5URVJSX0ZPUkNFXzBfRVJSMzZfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1Qo
NCkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMV9MQVRFTlRFUlJfRk9SQ0VfMF9F
UlIzNl9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweDEsIE5WRExBX0dFQ19FUlJTTElDRTFf
TEFURU5URVJSX0ZPUkNFXzBfRVJSMzZfU0hJRlQpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19F
UlJTTElDRTFfTEFURU5URVJSX0ZPUkNFXzBfRVJSMzZfTk9GT1JDRQkJCV9NS19FTlVNX0NP
TlNUKDB4MCkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMV9MQVRFTlRFUlJfRk9S
Q0VfMF9FUlIzNl9GT1JDRQkJCV9NS19FTlVNX0NPTlNUKDB4MSkNCj4gKyNkZWZpbmUgTlZE
TEFfR0VDX0VSUlNMSUNFMV9MQVRFTlRFUlJfRk9SQ0VfMF9FUlIzN19TSElGVAkJCV9NS19T
SElGVF9DT05TVCg1KQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX0xBVEVOVEVS
Ul9GT1JDRV8wX0VSUjM3X0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4MSwgTlZETEFfR0VD
X0VSUlNMSUNFMV9MQVRFTlRFUlJfRk9SQ0VfMF9FUlIzN19TSElGVCkNCj4gKyNkZWZpbmUg
TlZETEFfR0VDX0VSUlNMSUNFMV9MQVRFTlRFUlJfRk9SQ0VfMF9FUlIzN19OT0ZPUkNFCQkJ
X01LX0VOVU1fQ09OU1QoMHgwKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX0xB
VEVOVEVSUl9GT1JDRV8wX0VSUjM3X0ZPUkNFCQkJX01LX0VOVU1fQ09OU1QoMHgxKQ0KPiAr
I2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX0xBVEVOVEVSUl9GT1JDRV8wX0VSUjM4X1NI
SUZUCQkJX01LX1NISUZUX0NPTlNUKDYpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElD
RTFfTEFURU5URVJSX0ZPUkNFXzBfRVJSMzhfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHgx
LCBOVkRMQV9HRUNfRVJSU0xJQ0UxX0xBVEVOVEVSUl9GT1JDRV8wX0VSUjM4X1NISUZUKQ0K
PiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX0xBVEVOVEVSUl9GT1JDRV8wX0VSUjM4
X05PRk9SQ0UJCQlfTUtfRU5VTV9DT05TVCgweDApDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19F
UlJTTElDRTFfTEFURU5URVJSX0ZPUkNFXzBfRVJSMzhfRk9SQ0UJCQlfTUtfRU5VTV9DT05T
VCgweDEpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFfTEFURU5URVJSX0ZPUkNF
XzBfRVJSMzlfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoNykNCj4gKyNkZWZpbmUgTlZETEFf
R0VDX0VSUlNMSUNFMV9MQVRFTlRFUlJfRk9SQ0VfMF9FUlIzOV9GSUVMRAkJCV9NS19GSUVM
RF9DT05TVCgweDEsIE5WRExBX0dFQ19FUlJTTElDRTFfTEFURU5URVJSX0ZPUkNFXzBfRVJS
MzlfU0hJRlQpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFfTEFURU5URVJSX0ZP
UkNFXzBfRVJSMzlfTk9GT1JDRQkJCV9NS19FTlVNX0NPTlNUKDB4MCkNCj4gKyNkZWZpbmUg
TlZETEFfR0VDX0VSUlNMSUNFMV9MQVRFTlRFUlJfRk9SQ0VfMF9FUlIzOV9GT1JDRQkJCV9N
S19FTlVNX0NPTlNUKDB4MSkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMV9MQVRF
TlRFUlJfRk9SQ0VfMF9FUlI0MF9TSElGVAkJCV9NS19TSElGVF9DT05TVCg4KQ0KPiArI2Rl
ZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX0xBVEVOVEVSUl9GT1JDRV8wX0VSUjQwX0ZJRUxE
CQkJX01LX0ZJRUxEX0NPTlNUKDB4MSwgTlZETEFfR0VDX0VSUlNMSUNFMV9MQVRFTlRFUlJf
Rk9SQ0VfMF9FUlI0MF9TSElGVCkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMV9M
QVRFTlRFUlJfRk9SQ0VfMF9FUlI0MF9OT0ZPUkNFCQkJX01LX0VOVU1fQ09OU1QoMHgwKQ0K
PiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX0xBVEVOVEVSUl9GT1JDRV8wX0VSUjQw
X0ZPUkNFCQkJX01LX0VOVU1fQ09OU1QoMHgxKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJS
U0xJQ0UxX0xBVEVOVEVSUl9GT1JDRV8wX0VSUjQxX1NISUZUCQkJX01LX1NISUZUX0NPTlNU
KDkpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFfTEFURU5URVJSX0ZPUkNFXzBf
RVJSNDFfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHgxLCBOVkRMQV9HRUNfRVJSU0xJQ0Ux
X0xBVEVOVEVSUl9GT1JDRV8wX0VSUjQxX1NISUZUKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNf
RVJSU0xJQ0UxX0xBVEVOVEVSUl9GT1JDRV8wX0VSUjQxX05PRk9SQ0UJCQlfTUtfRU5VTV9D
T05TVCgweDApDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFfTEFURU5URVJSX0ZP
UkNFXzBfRVJSNDFfRk9SQ0UJCQlfTUtfRU5VTV9DT05TVCgweDEpDQo+ICsjZGVmaW5lIE5W
RExBX0dFQ19FUlJTTElDRTFfTEFURU5URVJSX0ZPUkNFXzBfRVJSNDJfU0hJRlQJCQlfTUtf
U0hJRlRfQ09OU1QoMTApDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFfTEFURU5U
RVJSX0ZPUkNFXzBfRVJSNDJfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHgxLCBOVkRMQV9H
RUNfRVJSU0xJQ0UxX0xBVEVOVEVSUl9GT1JDRV8wX0VSUjQyX1NISUZUKQ0KPiArI2RlZmlu
ZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX0xBVEVOVEVSUl9GT1JDRV8wX0VSUjQyX05PRk9SQ0UJ
CQlfTUtfRU5VTV9DT05TVCgweDApDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFf
TEFURU5URVJSX0ZPUkNFXzBfRVJSNDJfRk9SQ0UJCQlfTUtfRU5VTV9DT05TVCgweDEpDQo+
ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFfTEFURU5URVJSX0ZPUkNFXzBfRVJSNDNf
U0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMTEpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJT
TElDRTFfTEFURU5URVJSX0ZPUkNFXzBfRVJSNDNfRklFTEQJCQlfTUtfRklFTERfQ09OU1Qo
MHgxLCBOVkRMQV9HRUNfRVJSU0xJQ0UxX0xBVEVOVEVSUl9GT1JDRV8wX0VSUjQzX1NISUZU
KQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX0xBVEVOVEVSUl9GT1JDRV8wX0VS
UjQzX05PRk9SQ0UJCQlfTUtfRU5VTV9DT05TVCgweDApDQo+ICsjZGVmaW5lIE5WRExBX0dF
Q19FUlJTTElDRTFfTEFURU5URVJSX0ZPUkNFXzBfRVJSNDNfRk9SQ0UJCQlfTUtfRU5VTV9D
T05TVCgweDEpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFfTEFURU5URVJSX0ZP
UkNFXzBfRVJSNDRfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMTIpDQo+ICsjZGVmaW5lIE5W
RExBX0dFQ19FUlJTTElDRTFfTEFURU5URVJSX0ZPUkNFXzBfRVJSNDRfRklFTEQJCQlfTUtf
RklFTERfQ09OU1QoMHgxLCBOVkRMQV9HRUNfRVJSU0xJQ0UxX0xBVEVOVEVSUl9GT1JDRV8w
X0VSUjQ0X1NISUZUKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX0xBVEVOVEVS
Ul9GT1JDRV8wX0VSUjQ0X05PRk9SQ0UJCQlfTUtfRU5VTV9DT05TVCgweDApDQo+ICsjZGVm
aW5lIE5WRExBX0dFQ19FUlJTTElDRTFfTEFURU5URVJSX0ZPUkNFXzBfRVJSNDRfRk9SQ0UJ
CQlfTUtfRU5VTV9DT05TVCgweDEpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFf
TEFURU5URVJSX0ZPUkNFXzBfRVJSNDVfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMTMpDQo+
ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFfTEFURU5URVJSX0ZPUkNFXzBfRVJSNDVf
RklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHgxLCBOVkRMQV9HRUNfRVJSU0xJQ0UxX0xBVEVO
VEVSUl9GT1JDRV8wX0VSUjQ1X1NISUZUKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJ
Q0UxX0xBVEVOVEVSUl9GT1JDRV8wX0VSUjQ1X05PRk9SQ0UJCQlfTUtfRU5VTV9DT05TVCgw
eDApDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFfTEFURU5URVJSX0ZPUkNFXzBf
RVJSNDVfRk9SQ0UJCQlfTUtfRU5VTV9DT05TVCgweDEpDQo+ICsjZGVmaW5lIE5WRExBX0dF
Q19FUlJTTElDRTFfTEFURU5URVJSX0ZPUkNFXzBfRVJSNDZfU0hJRlQJCQlfTUtfU0hJRlRf
Q09OU1QoMTQpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFfTEFURU5URVJSX0ZP
UkNFXzBfRVJSNDZfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHgxLCBOVkRMQV9HRUNfRVJS
U0xJQ0UxX0xBVEVOVEVSUl9GT1JDRV8wX0VSUjQ2X1NISUZUKQ0KPiArI2RlZmluZSBOVkRM
QV9HRUNfRVJSU0xJQ0UxX0xBVEVOVEVSUl9GT1JDRV8wX0VSUjQ2X05PRk9SQ0UJCQlfTUtf
RU5VTV9DT05TVCgweDApDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFfTEFURU5U
RVJSX0ZPUkNFXzBfRVJSNDZfRk9SQ0UJCQlfTUtfRU5VTV9DT05TVCgweDEpDQo+ICsjZGVm
aW5lIE5WRExBX0dFQ19FUlJTTElDRTFfTEFURU5URVJSX0ZPUkNFXzBfRVJSNDdfU0hJRlQJ
CQlfTUtfU0hJRlRfQ09OU1QoMTUpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFf
TEFURU5URVJSX0ZPUkNFXzBfRVJSNDdfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHgxLCBO
VkRMQV9HRUNfRVJSU0xJQ0UxX0xBVEVOVEVSUl9GT1JDRV8wX0VSUjQ3X1NISUZUKQ0KPiAr
I2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX0xBVEVOVEVSUl9GT1JDRV8wX0VSUjQ3X05P
Rk9SQ0UJCQlfTUtfRU5VTV9DT05TVCgweDApDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJT
TElDRTFfTEFURU5URVJSX0ZPUkNFXzBfRVJSNDdfRk9SQ0UJCQlfTUtfRU5VTV9DT05TVCgw
eDEpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFfTEFURU5URVJSX0ZPUkNFXzBf
RVJSNDhfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMTYpDQo+ICsjZGVmaW5lIE5WRExBX0dF
Q19FUlJTTElDRTFfTEFURU5URVJSX0ZPUkNFXzBfRVJSNDhfRklFTEQJCQlfTUtfRklFTERf
Q09OU1QoMHgxLCBOVkRMQV9HRUNfRVJSU0xJQ0UxX0xBVEVOVEVSUl9GT1JDRV8wX0VSUjQ4
X1NISUZUKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX0xBVEVOVEVSUl9GT1JD
RV8wX0VSUjQ4X05PRk9SQ0UJCQlfTUtfRU5VTV9DT05TVCgweDApDQo+ICsjZGVmaW5lIE5W
RExBX0dFQ19FUlJTTElDRTFfTEFURU5URVJSX0ZPUkNFXzBfRVJSNDhfRk9SQ0UJCQlfTUtf
RU5VTV9DT05TVCgweDEpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFfTEFURU5U
RVJSX0ZPUkNFXzBfRVJSNDlfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMTcpDQo+ICsjZGVm
aW5lIE5WRExBX0dFQ19FUlJTTElDRTFfTEFURU5URVJSX0ZPUkNFXzBfRVJSNDlfRklFTEQJ
CQlfTUtfRklFTERfQ09OU1QoMHgxLCBOVkRMQV9HRUNfRVJSU0xJQ0UxX0xBVEVOVEVSUl9G
T1JDRV8wX0VSUjQ5X1NISUZUKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX0xB
VEVOVEVSUl9GT1JDRV8wX0VSUjQ5X05PRk9SQ0UJCQlfTUtfRU5VTV9DT05TVCgweDApDQo+
ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFfTEFURU5URVJSX0ZPUkNFXzBfRVJSNDlf
Rk9SQ0UJCQlfTUtfRU5VTV9DT05TVCgweDEpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJT
TElDRTFfTEFURU5URVJSX0ZPUkNFXzBfRVJSNTBfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1Qo
MTgpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFfTEFURU5URVJSX0ZPUkNFXzBf
RVJSNTBfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHgxLCBOVkRMQV9HRUNfRVJSU0xJQ0Ux
X0xBVEVOVEVSUl9GT1JDRV8wX0VSUjUwX1NISUZUKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNf
RVJSU0xJQ0UxX0xBVEVOVEVSUl9GT1JDRV8wX0VSUjUwX05PRk9SQ0UJCQlfTUtfRU5VTV9D
T05TVCgweDApDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFfTEFURU5URVJSX0ZP
UkNFXzBfRVJSNTBfRk9SQ0UJCQlfTUtfRU5VTV9DT05TVCgweDEpDQo+ICsjZGVmaW5lIE5W
RExBX0dFQ19FUlJTTElDRTFfTEFURU5URVJSX0ZPUkNFXzBfRVJSNTFfU0hJRlQJCQlfTUtf
U0hJRlRfQ09OU1QoMTkpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFfTEFURU5U
RVJSX0ZPUkNFXzBfRVJSNTFfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHgxLCBOVkRMQV9H
RUNfRVJSU0xJQ0UxX0xBVEVOVEVSUl9GT1JDRV8wX0VSUjUxX1NISUZUKQ0KPiArI2RlZmlu
ZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX0xBVEVOVEVSUl9GT1JDRV8wX0VSUjUxX05PRk9SQ0UJ
CQlfTUtfRU5VTV9DT05TVCgweDApDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFf
TEFURU5URVJSX0ZPUkNFXzBfRVJSNTFfRk9SQ0UJCQlfTUtfRU5VTV9DT05TVCgweDEpDQo+
ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFfTEFURU5URVJSX0ZPUkNFXzBfRVJSNTJf
U0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMjApDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJT
TElDRTFfTEFURU5URVJSX0ZPUkNFXzBfRVJSNTJfRklFTEQJCQlfTUtfRklFTERfQ09OU1Qo
MHgxLCBOVkRMQV9HRUNfRVJSU0xJQ0UxX0xBVEVOVEVSUl9GT1JDRV8wX0VSUjUyX1NISUZU
KQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX0xBVEVOVEVSUl9GT1JDRV8wX0VS
UjUyX05PRk9SQ0UJCQlfTUtfRU5VTV9DT05TVCgweDApDQo+ICsjZGVmaW5lIE5WRExBX0dF
Q19FUlJTTElDRTFfTEFURU5URVJSX0ZPUkNFXzBfRVJSNTJfRk9SQ0UJCQlfTUtfRU5VTV9D
T05TVCgweDEpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFfTEFURU5URVJSX0ZP
UkNFXzBfRVJSNTNfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMjEpDQo+ICsjZGVmaW5lIE5W
RExBX0dFQ19FUlJTTElDRTFfTEFURU5URVJSX0ZPUkNFXzBfRVJSNTNfRklFTEQJCQlfTUtf
RklFTERfQ09OU1QoMHgxLCBOVkRMQV9HRUNfRVJSU0xJQ0UxX0xBVEVOVEVSUl9GT1JDRV8w
X0VSUjUzX1NISUZUKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX0xBVEVOVEVS
Ul9GT1JDRV8wX0VSUjUzX05PRk9SQ0UJCQlfTUtfRU5VTV9DT05TVCgweDApDQo+ICsjZGVm
aW5lIE5WRExBX0dFQ19FUlJTTElDRTFfTEFURU5URVJSX0ZPUkNFXzBfRVJSNTNfRk9SQ0UJ
CQlfTUtfRU5VTV9DT05TVCgweDEpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFf
TEFURU5URVJSX0ZPUkNFXzBfRVJSNTRfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMjIpDQo+
ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFfTEFURU5URVJSX0ZPUkNFXzBfRVJSNTRf
RklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHgxLCBOVkRMQV9HRUNfRVJSU0xJQ0UxX0xBVEVO
VEVSUl9GT1JDRV8wX0VSUjU0X1NISUZUKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJ
Q0UxX0xBVEVOVEVSUl9GT1JDRV8wX0VSUjU0X05PRk9SQ0UJCQlfTUtfRU5VTV9DT05TVCgw
eDApDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFfTEFURU5URVJSX0ZPUkNFXzBf
RVJSNTRfRk9SQ0UJCQlfTUtfRU5VTV9DT05TVCgweDEpDQo+ICsjZGVmaW5lIE5WRExBX0dF
Q19FUlJTTElDRTFfTEFURU5URVJSX0ZPUkNFXzBfRVJSNTVfU0hJRlQJCQlfTUtfU0hJRlRf
Q09OU1QoMjMpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFfTEFURU5URVJSX0ZP
UkNFXzBfRVJSNTVfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHgxLCBOVkRMQV9HRUNfRVJS
U0xJQ0UxX0xBVEVOVEVSUl9GT1JDRV8wX0VSUjU1X1NISUZUKQ0KPiArI2RlZmluZSBOVkRM
QV9HRUNfRVJSU0xJQ0UxX0xBVEVOVEVSUl9GT1JDRV8wX0VSUjU1X05PRk9SQ0UJCQlfTUtf
RU5VTV9DT05TVCgweDApDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFfTEFURU5U
RVJSX0ZPUkNFXzBfRVJSNTVfRk9SQ0UJCQlfTUtfRU5VTV9DT05TVCgweDEpDQo+ICsjZGVm
aW5lIE5WRExBX0dFQ19FUlJTTElDRTFfTEFURU5URVJSX0ZPUkNFXzBfRVJSNTZfU0hJRlQJ
CQlfTUtfU0hJRlRfQ09OU1QoMjQpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFf
TEFURU5URVJSX0ZPUkNFXzBfRVJSNTZfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHgxLCBO
VkRMQV9HRUNfRVJSU0xJQ0UxX0xBVEVOVEVSUl9GT1JDRV8wX0VSUjU2X1NISUZUKQ0KPiAr
I2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX0xBVEVOVEVSUl9GT1JDRV8wX0VSUjU2X05P
Rk9SQ0UJCQlfTUtfRU5VTV9DT05TVCgweDApDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJT
TElDRTFfTEFURU5URVJSX0ZPUkNFXzBfRVJSNTZfRk9SQ0UJCQlfTUtfRU5VTV9DT05TVCgw
eDEpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFfTEFURU5URVJSX0ZPUkNFXzBf
RVJSNTdfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMjUpDQo+ICsjZGVmaW5lIE5WRExBX0dF
Q19FUlJTTElDRTFfTEFURU5URVJSX0ZPUkNFXzBfRVJSNTdfRklFTEQJCQlfTUtfRklFTERf
Q09OU1QoMHgxLCBOVkRMQV9HRUNfRVJSU0xJQ0UxX0xBVEVOVEVSUl9GT1JDRV8wX0VSUjU3
X1NISUZUKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX0xBVEVOVEVSUl9GT1JD
RV8wX0VSUjU3X05PRk9SQ0UJCQlfTUtfRU5VTV9DT05TVCgweDApDQo+ICsjZGVmaW5lIE5W
RExBX0dFQ19FUlJTTElDRTFfTEFURU5URVJSX0ZPUkNFXzBfRVJSNTdfRk9SQ0UJCQlfTUtf
RU5VTV9DT05TVCgweDEpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFfTEFURU5U
RVJSX0ZPUkNFXzBfRVJSNThfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMjYpDQo+ICsjZGVm
aW5lIE5WRExBX0dFQ19FUlJTTElDRTFfTEFURU5URVJSX0ZPUkNFXzBfRVJSNThfRklFTEQJ
CQlfTUtfRklFTERfQ09OU1QoMHgxLCBOVkRMQV9HRUNfRVJSU0xJQ0UxX0xBVEVOVEVSUl9G
T1JDRV8wX0VSUjU4X1NISUZUKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX0xB
VEVOVEVSUl9GT1JDRV8wX0VSUjU4X05PRk9SQ0UJCQlfTUtfRU5VTV9DT05TVCgweDApDQo+
ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFfTEFURU5URVJSX0ZPUkNFXzBfRVJSNThf
Rk9SQ0UJCQlfTUtfRU5VTV9DT05TVCgweDEpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJT
TElDRTFfTEFURU5URVJSX0ZPUkNFXzBfRVJSNTlfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1Qo
MjcpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFfTEFURU5URVJSX0ZPUkNFXzBf
RVJSNTlfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHgxLCBOVkRMQV9HRUNfRVJSU0xJQ0Ux
X0xBVEVOVEVSUl9GT1JDRV8wX0VSUjU5X1NISUZUKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNf
RVJSU0xJQ0UxX0xBVEVOVEVSUl9GT1JDRV8wX0VSUjU5X05PRk9SQ0UJCQlfTUtfRU5VTV9D
T05TVCgweDApDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFfTEFURU5URVJSX0ZP
UkNFXzBfRVJSNTlfRk9SQ0UJCQlfTUtfRU5VTV9DT05TVCgweDEpDQo+ICsjZGVmaW5lIE5W
RExBX0dFQ19FUlJTTElDRTFfTEFURU5URVJSX0ZPUkNFXzBfRVJSNjBfU0hJRlQJCQlfTUtf
U0hJRlRfQ09OU1QoMjgpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFfTEFURU5U
RVJSX0ZPUkNFXzBfRVJSNjBfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHgxLCBOVkRMQV9H
RUNfRVJSU0xJQ0UxX0xBVEVOVEVSUl9GT1JDRV8wX0VSUjYwX1NISUZUKQ0KPiArI2RlZmlu
ZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX0xBVEVOVEVSUl9GT1JDRV8wX0VSUjYwX05PRk9SQ0UJ
CQlfTUtfRU5VTV9DT05TVCgweDApDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFf
TEFURU5URVJSX0ZPUkNFXzBfRVJSNjBfRk9SQ0UJCQlfTUtfRU5VTV9DT05TVCgweDEpDQo+
ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFfTEFURU5URVJSX0ZPUkNFXzBfRVJSNjFf
U0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMjkpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJT
TElDRTFfTEFURU5URVJSX0ZPUkNFXzBfRVJSNjFfRklFTEQJCQlfTUtfRklFTERfQ09OU1Qo
MHgxLCBOVkRMQV9HRUNfRVJSU0xJQ0UxX0xBVEVOVEVSUl9GT1JDRV8wX0VSUjYxX1NISUZU
KQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX0xBVEVOVEVSUl9GT1JDRV8wX0VS
UjYxX05PRk9SQ0UJCQlfTUtfRU5VTV9DT05TVCgweDApDQo+ICsjZGVmaW5lIE5WRExBX0dF
Q19FUlJTTElDRTFfTEFURU5URVJSX0ZPUkNFXzBfRVJSNjFfRk9SQ0UJCQlfTUtfRU5VTV9D
T05TVCgweDEpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFfTEFURU5URVJSX0ZP
UkNFXzBfRVJSNjJfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMzApDQo+ICsjZGVmaW5lIE5W
RExBX0dFQ19FUlJTTElDRTFfTEFURU5URVJSX0ZPUkNFXzBfRVJSNjJfRklFTEQJCQlfTUtf
RklFTERfQ09OU1QoMHgxLCBOVkRMQV9HRUNfRVJSU0xJQ0UxX0xBVEVOVEVSUl9GT1JDRV8w
X0VSUjYyX1NISUZUKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX0xBVEVOVEVS
Ul9GT1JDRV8wX0VSUjYyX05PRk9SQ0UJCQlfTUtfRU5VTV9DT05TVCgweDApDQo+ICsjZGVm
aW5lIE5WRExBX0dFQ19FUlJTTElDRTFfTEFURU5URVJSX0ZPUkNFXzBfRVJSNjJfRk9SQ0UJ
CQlfTUtfRU5VTV9DT05TVCgweDEpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFf
TEFURU5URVJSX0ZPUkNFXzBfRVJSNjNfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMzEpDQo+
ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFfTEFURU5URVJSX0ZPUkNFXzBfRVJSNjNf
RklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHgxLCBOVkRMQV9HRUNfRVJSU0xJQ0UxX0xBVEVO
VEVSUl9GT1JDRV8wX0VSUjYzX1NISUZUKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJ
Q0UxX0xBVEVOVEVSUl9GT1JDRV8wX0VSUjYzX05PRk9SQ0UJCQlfTUtfRU5VTV9DT05TVCgw
eDApDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFfTEFURU5URVJSX0ZPUkNFXzBf
RVJSNjNfRk9SQ0UJCQlfTUtfRU5VTV9DT05TVCgweDEpDQo+ICsNCj4gKw0KPiArLy8gUmVn
aXN0ZXIgTlZETEFfR0VDX0VSUlNMSUNFMV9MQVRFTlRFUlJfU1RBVFVTXzANCj4gKyNkZWZp
bmUgTlZETEFfR0VDX0VSUlNMSUNFMV9MQVRFTlRFUlJfU1RBVFVTXzAJCQlfTUtfQUREUl9D
T05TVCgweGUwNzgpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFfTEFURU5URVJS
X1NUQVRVU18wX0VSUjMyX1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDApDQo+ICsjZGVmaW5l
IE5WRExBX0dFQ19FUlJTTElDRTFfTEFURU5URVJSX1NUQVRVU18wX0VSUjMyX0ZJRUxECQkJ
X01LX0ZJRUxEX0NPTlNUKDB4MSwgTlZETEFfR0VDX0VSUlNMSUNFMV9MQVRFTlRFUlJfU1RB
VFVTXzBfRVJSMzJfU0hJRlQpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFfTEFU
RU5URVJSX1NUQVRVU18wX0VSUjMzX1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDEpDQo+ICsj
ZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFfTEFURU5URVJSX1NUQVRVU18wX0VSUjMzX0ZJ
RUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4MSwgTlZETEFfR0VDX0VSUlNMSUNFMV9MQVRFTlRF
UlJfU1RBVFVTXzBfRVJSMzNfU0hJRlQpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElD
RTFfTEFURU5URVJSX1NUQVRVU18wX0VSUjM0X1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDIp
DQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFfTEFURU5URVJSX1NUQVRVU18wX0VS
UjM0X0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4MSwgTlZETEFfR0VDX0VSUlNMSUNFMV9M
QVRFTlRFUlJfU1RBVFVTXzBfRVJSMzRfU0hJRlQpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19F
UlJTTElDRTFfTEFURU5URVJSX1NUQVRVU18wX0VSUjM1X1NISUZUCQkJX01LX1NISUZUX0NP
TlNUKDMpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFfTEFURU5URVJSX1NUQVRV
U18wX0VSUjM1X0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4MSwgTlZETEFfR0VDX0VSUlNM
SUNFMV9MQVRFTlRFUlJfU1RBVFVTXzBfRVJSMzVfU0hJRlQpDQo+ICsjZGVmaW5lIE5WRExB
X0dFQ19FUlJTTElDRTFfTEFURU5URVJSX1NUQVRVU18wX0VSUjM2X1NISUZUCQkJX01LX1NI
SUZUX0NPTlNUKDQpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFfTEFURU5URVJS
X1NUQVRVU18wX0VSUjM2X0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4MSwgTlZETEFfR0VD
X0VSUlNMSUNFMV9MQVRFTlRFUlJfU1RBVFVTXzBfRVJSMzZfU0hJRlQpDQo+ICsjZGVmaW5l
IE5WRExBX0dFQ19FUlJTTElDRTFfTEFURU5URVJSX1NUQVRVU18wX0VSUjM3X1NISUZUCQkJ
X01LX1NISUZUX0NPTlNUKDUpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFfTEFU
RU5URVJSX1NUQVRVU18wX0VSUjM3X0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4MSwgTlZE
TEFfR0VDX0VSUlNMSUNFMV9MQVRFTlRFUlJfU1RBVFVTXzBfRVJSMzdfU0hJRlQpDQo+ICsj
ZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFfTEFURU5URVJSX1NUQVRVU18wX0VSUjM4X1NI
SUZUCQkJX01LX1NISUZUX0NPTlNUKDYpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElD
RTFfTEFURU5URVJSX1NUQVRVU18wX0VSUjM4X0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4
MSwgTlZETEFfR0VDX0VSUlNMSUNFMV9MQVRFTlRFUlJfU1RBVFVTXzBfRVJSMzhfU0hJRlQp
DQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFfTEFURU5URVJSX1NUQVRVU18wX0VS
UjM5X1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDcpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19F
UlJTTElDRTFfTEFURU5URVJSX1NUQVRVU18wX0VSUjM5X0ZJRUxECQkJX01LX0ZJRUxEX0NP
TlNUKDB4MSwgTlZETEFfR0VDX0VSUlNMSUNFMV9MQVRFTlRFUlJfU1RBVFVTXzBfRVJSMzlf
U0hJRlQpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFfTEFURU5URVJSX1NUQVRV
U18wX0VSUjQwX1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDgpDQo+ICsjZGVmaW5lIE5WRExB
X0dFQ19FUlJTTElDRTFfTEFURU5URVJSX1NUQVRVU18wX0VSUjQwX0ZJRUxECQkJX01LX0ZJ
RUxEX0NPTlNUKDB4MSwgTlZETEFfR0VDX0VSUlNMSUNFMV9MQVRFTlRFUlJfU1RBVFVTXzBf
RVJSNDBfU0hJRlQpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFfTEFURU5URVJS
X1NUQVRVU18wX0VSUjQxX1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDkpDQo+ICsjZGVmaW5l
IE5WRExBX0dFQ19FUlJTTElDRTFfTEFURU5URVJSX1NUQVRVU18wX0VSUjQxX0ZJRUxECQkJ
X01LX0ZJRUxEX0NPTlNUKDB4MSwgTlZETEFfR0VDX0VSUlNMSUNFMV9MQVRFTlRFUlJfU1RB
VFVTXzBfRVJSNDFfU0hJRlQpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFfTEFU
RU5URVJSX1NUQVRVU18wX0VSUjQyX1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDEwKQ0KPiAr
I2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX0xBVEVOVEVSUl9TVEFUVVNfMF9FUlI0Ml9G
SUVMRAkJCV9NS19GSUVMRF9DT05TVCgweDEsIE5WRExBX0dFQ19FUlJTTElDRTFfTEFURU5U
RVJSX1NUQVRVU18wX0VSUjQyX1NISUZUKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJ
Q0UxX0xBVEVOVEVSUl9TVEFUVVNfMF9FUlI0M19TSElGVAkJCV9NS19TSElGVF9DT05TVCgx
MSkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMV9MQVRFTlRFUlJfU1RBVFVTXzBf
RVJSNDNfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHgxLCBOVkRMQV9HRUNfRVJSU0xJQ0Ux
X0xBVEVOVEVSUl9TVEFUVVNfMF9FUlI0M19TSElGVCkNCj4gKyNkZWZpbmUgTlZETEFfR0VD
X0VSUlNMSUNFMV9MQVRFTlRFUlJfU1RBVFVTXzBfRVJSNDRfU0hJRlQJCQlfTUtfU0hJRlRf
Q09OU1QoMTIpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFfTEFURU5URVJSX1NU
QVRVU18wX0VSUjQ0X0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4MSwgTlZETEFfR0VDX0VS
UlNMSUNFMV9MQVRFTlRFUlJfU1RBVFVTXzBfRVJSNDRfU0hJRlQpDQo+ICsjZGVmaW5lIE5W
RExBX0dFQ19FUlJTTElDRTFfTEFURU5URVJSX1NUQVRVU18wX0VSUjQ1X1NISUZUCQkJX01L
X1NISUZUX0NPTlNUKDEzKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX0xBVEVO
VEVSUl9TVEFUVVNfMF9FUlI0NV9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweDEsIE5WRExB
X0dFQ19FUlJTTElDRTFfTEFURU5URVJSX1NUQVRVU18wX0VSUjQ1X1NISUZUKQ0KPiArI2Rl
ZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX0xBVEVOVEVSUl9TVEFUVVNfMF9FUlI0Nl9TSElG
VAkJCV9NS19TSElGVF9DT05TVCgxNCkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNF
MV9MQVRFTlRFUlJfU1RBVFVTXzBfRVJSNDZfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHgx
LCBOVkRMQV9HRUNfRVJSU0xJQ0UxX0xBVEVOVEVSUl9TVEFUVVNfMF9FUlI0Nl9TSElGVCkN
Cj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMV9MQVRFTlRFUlJfU1RBVFVTXzBfRVJS
NDdfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMTUpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19F
UlJTTElDRTFfTEFURU5URVJSX1NUQVRVU18wX0VSUjQ3X0ZJRUxECQkJX01LX0ZJRUxEX0NP
TlNUKDB4MSwgTlZETEFfR0VDX0VSUlNMSUNFMV9MQVRFTlRFUlJfU1RBVFVTXzBfRVJSNDdf
U0hJRlQpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFfTEFURU5URVJSX1NUQVRV
U18wX0VSUjQ4X1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDE2KQ0KPiArI2RlZmluZSBOVkRM
QV9HRUNfRVJSU0xJQ0UxX0xBVEVOVEVSUl9TVEFUVVNfMF9FUlI0OF9GSUVMRAkJCV9NS19G
SUVMRF9DT05TVCgweDEsIE5WRExBX0dFQ19FUlJTTElDRTFfTEFURU5URVJSX1NUQVRVU18w
X0VSUjQ4X1NISUZUKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX0xBVEVOVEVS
Ul9TVEFUVVNfMF9FUlI0OV9TSElGVAkJCV9NS19TSElGVF9DT05TVCgxNykNCj4gKyNkZWZp
bmUgTlZETEFfR0VDX0VSUlNMSUNFMV9MQVRFTlRFUlJfU1RBVFVTXzBfRVJSNDlfRklFTEQJ
CQlfTUtfRklFTERfQ09OU1QoMHgxLCBOVkRMQV9HRUNfRVJSU0xJQ0UxX0xBVEVOVEVSUl9T
VEFUVVNfMF9FUlI0OV9TSElGVCkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMV9M
QVRFTlRFUlJfU1RBVFVTXzBfRVJSNTBfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMTgpDQo+
ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFfTEFURU5URVJSX1NUQVRVU18wX0VSUjUw
X0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4MSwgTlZETEFfR0VDX0VSUlNMSUNFMV9MQVRF
TlRFUlJfU1RBVFVTXzBfRVJSNTBfU0hJRlQpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJT
TElDRTFfTEFURU5URVJSX1NUQVRVU18wX0VSUjUxX1NISUZUCQkJX01LX1NISUZUX0NPTlNU
KDE5KQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX0xBVEVOVEVSUl9TVEFUVVNf
MF9FUlI1MV9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweDEsIE5WRExBX0dFQ19FUlJTTElD
RTFfTEFURU5URVJSX1NUQVRVU18wX0VSUjUxX1NISUZUKQ0KPiArI2RlZmluZSBOVkRMQV9H
RUNfRVJSU0xJQ0UxX0xBVEVOVEVSUl9TVEFUVVNfMF9FUlI1Ml9TSElGVAkJCV9NS19TSElG
VF9DT05TVCgyMCkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMV9MQVRFTlRFUlJf
U1RBVFVTXzBfRVJSNTJfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHgxLCBOVkRMQV9HRUNf
RVJSU0xJQ0UxX0xBVEVOVEVSUl9TVEFUVVNfMF9FUlI1Ml9TSElGVCkNCj4gKyNkZWZpbmUg
TlZETEFfR0VDX0VSUlNMSUNFMV9MQVRFTlRFUlJfU1RBVFVTXzBfRVJSNTNfU0hJRlQJCQlf
TUtfU0hJRlRfQ09OU1QoMjEpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFfTEFU
RU5URVJSX1NUQVRVU18wX0VSUjUzX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4MSwgTlZE
TEFfR0VDX0VSUlNMSUNFMV9MQVRFTlRFUlJfU1RBVFVTXzBfRVJSNTNfU0hJRlQpDQo+ICsj
ZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFfTEFURU5URVJSX1NUQVRVU18wX0VSUjU0X1NI
SUZUCQkJX01LX1NISUZUX0NPTlNUKDIyKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJ
Q0UxX0xBVEVOVEVSUl9TVEFUVVNfMF9FUlI1NF9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgw
eDEsIE5WRExBX0dFQ19FUlJTTElDRTFfTEFURU5URVJSX1NUQVRVU18wX0VSUjU0X1NISUZU
KQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX0xBVEVOVEVSUl9TVEFUVVNfMF9F
UlI1NV9TSElGVAkJCV9NS19TSElGVF9DT05TVCgyMykNCj4gKyNkZWZpbmUgTlZETEFfR0VD
X0VSUlNMSUNFMV9MQVRFTlRFUlJfU1RBVFVTXzBfRVJSNTVfRklFTEQJCQlfTUtfRklFTERf
Q09OU1QoMHgxLCBOVkRMQV9HRUNfRVJSU0xJQ0UxX0xBVEVOVEVSUl9TVEFUVVNfMF9FUlI1
NV9TSElGVCkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMV9MQVRFTlRFUlJfU1RB
VFVTXzBfRVJSNTZfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMjQpDQo+ICsjZGVmaW5lIE5W
RExBX0dFQ19FUlJTTElDRTFfTEFURU5URVJSX1NUQVRVU18wX0VSUjU2X0ZJRUxECQkJX01L
X0ZJRUxEX0NPTlNUKDB4MSwgTlZETEFfR0VDX0VSUlNMSUNFMV9MQVRFTlRFUlJfU1RBVFVT
XzBfRVJSNTZfU0hJRlQpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFfTEFURU5U
RVJSX1NUQVRVU18wX0VSUjU3X1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDI1KQ0KPiArI2Rl
ZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX0xBVEVOVEVSUl9TVEFUVVNfMF9FUlI1N19GSUVM
RAkJCV9NS19GSUVMRF9DT05TVCgweDEsIE5WRExBX0dFQ19FUlJTTElDRTFfTEFURU5URVJS
X1NUQVRVU18wX0VSUjU3X1NISUZUKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0Ux
X0xBVEVOVEVSUl9TVEFUVVNfMF9FUlI1OF9TSElGVAkJCV9NS19TSElGVF9DT05TVCgyNikN
Cj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMV9MQVRFTlRFUlJfU1RBVFVTXzBfRVJS
NThfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHgxLCBOVkRMQV9HRUNfRVJSU0xJQ0UxX0xB
VEVOVEVSUl9TVEFUVVNfMF9FUlI1OF9TSElGVCkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VS
UlNMSUNFMV9MQVRFTlRFUlJfU1RBVFVTXzBfRVJSNTlfU0hJRlQJCQlfTUtfU0hJRlRfQ09O
U1QoMjcpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFfTEFURU5URVJSX1NUQVRV
U18wX0VSUjU5X0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4MSwgTlZETEFfR0VDX0VSUlNM
SUNFMV9MQVRFTlRFUlJfU1RBVFVTXzBfRVJSNTlfU0hJRlQpDQo+ICsjZGVmaW5lIE5WRExB
X0dFQ19FUlJTTElDRTFfTEFURU5URVJSX1NUQVRVU18wX0VSUjYwX1NISUZUCQkJX01LX1NI
SUZUX0NPTlNUKDI4KQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX0xBVEVOVEVS
Ul9TVEFUVVNfMF9FUlI2MF9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweDEsIE5WRExBX0dF
Q19FUlJTTElDRTFfTEFURU5URVJSX1NUQVRVU18wX0VSUjYwX1NISUZUKQ0KPiArI2RlZmlu
ZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX0xBVEVOVEVSUl9TVEFUVVNfMF9FUlI2MV9TSElGVAkJ
CV9NS19TSElGVF9DT05TVCgyOSkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMV9M
QVRFTlRFUlJfU1RBVFVTXzBfRVJSNjFfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHgxLCBO
VkRMQV9HRUNfRVJSU0xJQ0UxX0xBVEVOVEVSUl9TVEFUVVNfMF9FUlI2MV9TSElGVCkNCj4g
KyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMV9MQVRFTlRFUlJfU1RBVFVTXzBfRVJSNjJf
U0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMzApDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJT
TElDRTFfTEFURU5URVJSX1NUQVRVU18wX0VSUjYyX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNU
KDB4MSwgTlZETEFfR0VDX0VSUlNMSUNFMV9MQVRFTlRFUlJfU1RBVFVTXzBfRVJSNjJfU0hJ
RlQpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFfTEFURU5URVJSX1NUQVRVU18w
X0VSUjYzX1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDMxKQ0KPiArI2RlZmluZSBOVkRMQV9H
RUNfRVJSU0xJQ0UxX0xBVEVOVEVSUl9TVEFUVVNfMF9FUlI2M19GSUVMRAkJCV9NS19GSUVM
RF9DT05TVCgweDEsIE5WRExBX0dFQ19FUlJTTElDRTFfTEFURU5URVJSX1NUQVRVU18wX0VS
UjYzX1NISUZUKQ0KPiArDQo+ICsNCj4gKy8vIFJlZ2lzdGVyIE5WRExBX0dFQ19FUlJTTElD
RTFfQ09VTlRFUl9SRUxPQURfMA0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX0NP
VU5URVJfUkVMT0FEXzAJCQlfTUtfQUREUl9DT05TVCgweGUwODApDQo+ICsjZGVmaW5lIE5W
RExBX0dFQ19FUlJTTElDRTFfQ09VTlRFUl9SRUxPQURfMF9FUlIzMl9TSElGVAkJCV9NS19T
SElGVF9DT05TVCgwKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX0NPVU5URVJf
UkVMT0FEXzBfRVJSMzJfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHgxLCBOVkRMQV9HRUNf
RVJSU0xJQ0UxX0NPVU5URVJfUkVMT0FEXzBfRVJSMzJfU0hJRlQpDQo+ICsjZGVmaW5lIE5W
RExBX0dFQ19FUlJTTElDRTFfQ09VTlRFUl9SRUxPQURfMF9FUlIzMl9OT1JFTE9BRAkJCV9N
S19FTlVNX0NPTlNUKDB4MCkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMV9DT1VO
VEVSX1JFTE9BRF8wX0VSUjMyX1JFTE9BRAkJCV9NS19FTlVNX0NPTlNUKDB4MSkNCj4gKyNk
ZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMV9DT1VOVEVSX1JFTE9BRF8wX0VSUjMzX1NISUZU
CQkJX01LX1NISUZUX0NPTlNUKDEpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFf
Q09VTlRFUl9SRUxPQURfMF9FUlIzM19GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweDEsIE5W
RExBX0dFQ19FUlJTTElDRTFfQ09VTlRFUl9SRUxPQURfMF9FUlIzM19TSElGVCkNCj4gKyNk
ZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMV9DT1VOVEVSX1JFTE9BRF8wX0VSUjMzX05PUkVM
T0FECQkJX01LX0VOVU1fQ09OU1QoMHgwKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJ
Q0UxX0NPVU5URVJfUkVMT0FEXzBfRVJSMzNfUkVMT0FECQkJX01LX0VOVU1fQ09OU1QoMHgx
KQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX0NPVU5URVJfUkVMT0FEXzBfRVJS
MzRfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMikNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VS
UlNMSUNFMV9DT1VOVEVSX1JFTE9BRF8wX0VSUjM0X0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNU
KDB4MSwgTlZETEFfR0VDX0VSUlNMSUNFMV9DT1VOVEVSX1JFTE9BRF8wX0VSUjM0X1NISUZU
KQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX0NPVU5URVJfUkVMT0FEXzBfRVJS
MzRfTk9SRUxPQUQJCQlfTUtfRU5VTV9DT05TVCgweDApDQo+ICsjZGVmaW5lIE5WRExBX0dF
Q19FUlJTTElDRTFfQ09VTlRFUl9SRUxPQURfMF9FUlIzNF9SRUxPQUQJCQlfTUtfRU5VTV9D
T05TVCgweDEpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFfQ09VTlRFUl9SRUxP
QURfMF9FUlIzNV9TSElGVAkJCV9NS19TSElGVF9DT05TVCgzKQ0KPiArI2RlZmluZSBOVkRM
QV9HRUNfRVJSU0xJQ0UxX0NPVU5URVJfUkVMT0FEXzBfRVJSMzVfRklFTEQJCQlfTUtfRklF
TERfQ09OU1QoMHgxLCBOVkRMQV9HRUNfRVJSU0xJQ0UxX0NPVU5URVJfUkVMT0FEXzBfRVJS
MzVfU0hJRlQpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFfQ09VTlRFUl9SRUxP
QURfMF9FUlIzNV9OT1JFTE9BRAkJCV9NS19FTlVNX0NPTlNUKDB4MCkNCj4gKyNkZWZpbmUg
TlZETEFfR0VDX0VSUlNMSUNFMV9DT1VOVEVSX1JFTE9BRF8wX0VSUjM1X1JFTE9BRAkJCV9N
S19FTlVNX0NPTlNUKDB4MSkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMV9DT1VO
VEVSX1JFTE9BRF8wX0VSUjM2X1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDQpDQo+ICsjZGVm
aW5lIE5WRExBX0dFQ19FUlJTTElDRTFfQ09VTlRFUl9SRUxPQURfMF9FUlIzNl9GSUVMRAkJ
CV9NS19GSUVMRF9DT05TVCgweDEsIE5WRExBX0dFQ19FUlJTTElDRTFfQ09VTlRFUl9SRUxP
QURfMF9FUlIzNl9TSElGVCkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMV9DT1VO
VEVSX1JFTE9BRF8wX0VSUjM2X05PUkVMT0FECQkJX01LX0VOVU1fQ09OU1QoMHgwKQ0KPiAr
I2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX0NPVU5URVJfUkVMT0FEXzBfRVJSMzZfUkVM
T0FECQkJX01LX0VOVU1fQ09OU1QoMHgxKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJ
Q0UxX0NPVU5URVJfUkVMT0FEXzBfRVJSMzdfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoNSkN
Cj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMV9DT1VOVEVSX1JFTE9BRF8wX0VSUjM3
X0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4MSwgTlZETEFfR0VDX0VSUlNMSUNFMV9DT1VO
VEVSX1JFTE9BRF8wX0VSUjM3X1NISUZUKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJ
Q0UxX0NPVU5URVJfUkVMT0FEXzBfRVJSMzdfTk9SRUxPQUQJCQlfTUtfRU5VTV9DT05TVCgw
eDApDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFfQ09VTlRFUl9SRUxPQURfMF9F
UlIzN19SRUxPQUQJCQlfTUtfRU5VTV9DT05TVCgweDEpDQo+ICsjZGVmaW5lIE5WRExBX0dF
Q19FUlJTTElDRTFfQ09VTlRFUl9SRUxPQURfMF9FUlIzOF9TSElGVAkJCV9NS19TSElGVF9D
T05TVCg2KQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX0NPVU5URVJfUkVMT0FE
XzBfRVJSMzhfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHgxLCBOVkRMQV9HRUNfRVJSU0xJ
Q0UxX0NPVU5URVJfUkVMT0FEXzBfRVJSMzhfU0hJRlQpDQo+ICsjZGVmaW5lIE5WRExBX0dF
Q19FUlJTTElDRTFfQ09VTlRFUl9SRUxPQURfMF9FUlIzOF9OT1JFTE9BRAkJCV9NS19FTlVN
X0NPTlNUKDB4MCkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMV9DT1VOVEVSX1JF
TE9BRF8wX0VSUjM4X1JFTE9BRAkJCV9NS19FTlVNX0NPTlNUKDB4MSkNCj4gKyNkZWZpbmUg
TlZETEFfR0VDX0VSUlNMSUNFMV9DT1VOVEVSX1JFTE9BRF8wX0VSUjM5X1NISUZUCQkJX01L
X1NISUZUX0NPTlNUKDcpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFfQ09VTlRF
Ul9SRUxPQURfMF9FUlIzOV9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweDEsIE5WRExBX0dF
Q19FUlJTTElDRTFfQ09VTlRFUl9SRUxPQURfMF9FUlIzOV9TSElGVCkNCj4gKyNkZWZpbmUg
TlZETEFfR0VDX0VSUlNMSUNFMV9DT1VOVEVSX1JFTE9BRF8wX0VSUjM5X05PUkVMT0FECQkJ
X01LX0VOVU1fQ09OU1QoMHgwKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX0NP
VU5URVJfUkVMT0FEXzBfRVJSMzlfUkVMT0FECQkJX01LX0VOVU1fQ09OU1QoMHgxKQ0KPiAr
I2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX0NPVU5URVJfUkVMT0FEXzBfRVJSNDBfU0hJ
RlQJCQlfTUtfU0hJRlRfQ09OU1QoOCkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNF
MV9DT1VOVEVSX1JFTE9BRF8wX0VSUjQwX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4MSwg
TlZETEFfR0VDX0VSUlNMSUNFMV9DT1VOVEVSX1JFTE9BRF8wX0VSUjQwX1NISUZUKQ0KPiAr
I2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX0NPVU5URVJfUkVMT0FEXzBfRVJSNDBfTk9S
RUxPQUQJCQlfTUtfRU5VTV9DT05TVCgweDApDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJT
TElDRTFfQ09VTlRFUl9SRUxPQURfMF9FUlI0MF9SRUxPQUQJCQlfTUtfRU5VTV9DT05TVCgw
eDEpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFfQ09VTlRFUl9SRUxPQURfMF9F
UlI0MV9TSElGVAkJCV9NS19TSElGVF9DT05TVCg5KQ0KPiArI2RlZmluZSBOVkRMQV9HRUNf
RVJSU0xJQ0UxX0NPVU5URVJfUkVMT0FEXzBfRVJSNDFfRklFTEQJCQlfTUtfRklFTERfQ09O
U1QoMHgxLCBOVkRMQV9HRUNfRVJSU0xJQ0UxX0NPVU5URVJfUkVMT0FEXzBfRVJSNDFfU0hJ
RlQpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFfQ09VTlRFUl9SRUxPQURfMF9F
UlI0MV9OT1JFTE9BRAkJCV9NS19FTlVNX0NPTlNUKDB4MCkNCj4gKyNkZWZpbmUgTlZETEFf
R0VDX0VSUlNMSUNFMV9DT1VOVEVSX1JFTE9BRF8wX0VSUjQxX1JFTE9BRAkJCV9NS19FTlVN
X0NPTlNUKDB4MSkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMV9DT1VOVEVSX1JF
TE9BRF8wX0VSUjQyX1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDEwKQ0KPiArI2RlZmluZSBO
VkRMQV9HRUNfRVJSU0xJQ0UxX0NPVU5URVJfUkVMT0FEXzBfRVJSNDJfRklFTEQJCQlfTUtf
RklFTERfQ09OU1QoMHgxLCBOVkRMQV9HRUNfRVJSU0xJQ0UxX0NPVU5URVJfUkVMT0FEXzBf
RVJSNDJfU0hJRlQpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFfQ09VTlRFUl9S
RUxPQURfMF9FUlI0Ml9OT1JFTE9BRAkJCV9NS19FTlVNX0NPTlNUKDB4MCkNCj4gKyNkZWZp
bmUgTlZETEFfR0VDX0VSUlNMSUNFMV9DT1VOVEVSX1JFTE9BRF8wX0VSUjQyX1JFTE9BRAkJ
CV9NS19FTlVNX0NPTlNUKDB4MSkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMV9D
T1VOVEVSX1JFTE9BRF8wX0VSUjQzX1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDExKQ0KPiAr
I2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX0NPVU5URVJfUkVMT0FEXzBfRVJSNDNfRklF
TEQJCQlfTUtfRklFTERfQ09OU1QoMHgxLCBOVkRMQV9HRUNfRVJSU0xJQ0UxX0NPVU5URVJf
UkVMT0FEXzBfRVJSNDNfU0hJRlQpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFf
Q09VTlRFUl9SRUxPQURfMF9FUlI0M19OT1JFTE9BRAkJCV9NS19FTlVNX0NPTlNUKDB4MCkN
Cj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMV9DT1VOVEVSX1JFTE9BRF8wX0VSUjQz
X1JFTE9BRAkJCV9NS19FTlVNX0NPTlNUKDB4MSkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VS
UlNMSUNFMV9DT1VOVEVSX1JFTE9BRF8wX0VSUjQ0X1NISUZUCQkJX01LX1NISUZUX0NPTlNU
KDEyKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX0NPVU5URVJfUkVMT0FEXzBf
RVJSNDRfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHgxLCBOVkRMQV9HRUNfRVJSU0xJQ0Ux
X0NPVU5URVJfUkVMT0FEXzBfRVJSNDRfU0hJRlQpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19F
UlJTTElDRTFfQ09VTlRFUl9SRUxPQURfMF9FUlI0NF9OT1JFTE9BRAkJCV9NS19FTlVNX0NP
TlNUKDB4MCkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMV9DT1VOVEVSX1JFTE9B
RF8wX0VSUjQ0X1JFTE9BRAkJCV9NS19FTlVNX0NPTlNUKDB4MSkNCj4gKyNkZWZpbmUgTlZE
TEFfR0VDX0VSUlNMSUNFMV9DT1VOVEVSX1JFTE9BRF8wX0VSUjQ1X1NISUZUCQkJX01LX1NI
SUZUX0NPTlNUKDEzKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX0NPVU5URVJf
UkVMT0FEXzBfRVJSNDVfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHgxLCBOVkRMQV9HRUNf
RVJSU0xJQ0UxX0NPVU5URVJfUkVMT0FEXzBfRVJSNDVfU0hJRlQpDQo+ICsjZGVmaW5lIE5W
RExBX0dFQ19FUlJTTElDRTFfQ09VTlRFUl9SRUxPQURfMF9FUlI0NV9OT1JFTE9BRAkJCV9N
S19FTlVNX0NPTlNUKDB4MCkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMV9DT1VO
VEVSX1JFTE9BRF8wX0VSUjQ1X1JFTE9BRAkJCV9NS19FTlVNX0NPTlNUKDB4MSkNCj4gKyNk
ZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMV9DT1VOVEVSX1JFTE9BRF8wX0VSUjQ2X1NISUZU
CQkJX01LX1NISUZUX0NPTlNUKDE0KQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0Ux
X0NPVU5URVJfUkVMT0FEXzBfRVJSNDZfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHgxLCBO
VkRMQV9HRUNfRVJSU0xJQ0UxX0NPVU5URVJfUkVMT0FEXzBfRVJSNDZfU0hJRlQpDQo+ICsj
ZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFfQ09VTlRFUl9SRUxPQURfMF9FUlI0Nl9OT1JF
TE9BRAkJCV9NS19FTlVNX0NPTlNUKDB4MCkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNM
SUNFMV9DT1VOVEVSX1JFTE9BRF8wX0VSUjQ2X1JFTE9BRAkJCV9NS19FTlVNX0NPTlNUKDB4
MSkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMV9DT1VOVEVSX1JFTE9BRF8wX0VS
UjQ3X1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDE1KQ0KPiArI2RlZmluZSBOVkRMQV9HRUNf
RVJSU0xJQ0UxX0NPVU5URVJfUkVMT0FEXzBfRVJSNDdfRklFTEQJCQlfTUtfRklFTERfQ09O
U1QoMHgxLCBOVkRMQV9HRUNfRVJSU0xJQ0UxX0NPVU5URVJfUkVMT0FEXzBfRVJSNDdfU0hJ
RlQpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFfQ09VTlRFUl9SRUxPQURfMF9F
UlI0N19OT1JFTE9BRAkJCV9NS19FTlVNX0NPTlNUKDB4MCkNCj4gKyNkZWZpbmUgTlZETEFf
R0VDX0VSUlNMSUNFMV9DT1VOVEVSX1JFTE9BRF8wX0VSUjQ3X1JFTE9BRAkJCV9NS19FTlVN
X0NPTlNUKDB4MSkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMV9DT1VOVEVSX1JF
TE9BRF8wX0VSUjQ4X1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDE2KQ0KPiArI2RlZmluZSBO
VkRMQV9HRUNfRVJSU0xJQ0UxX0NPVU5URVJfUkVMT0FEXzBfRVJSNDhfRklFTEQJCQlfTUtf
RklFTERfQ09OU1QoMHgxLCBOVkRMQV9HRUNfRVJSU0xJQ0UxX0NPVU5URVJfUkVMT0FEXzBf
RVJSNDhfU0hJRlQpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFfQ09VTlRFUl9S
RUxPQURfMF9FUlI0OF9OT1JFTE9BRAkJCV9NS19FTlVNX0NPTlNUKDB4MCkNCj4gKyNkZWZp
bmUgTlZETEFfR0VDX0VSUlNMSUNFMV9DT1VOVEVSX1JFTE9BRF8wX0VSUjQ4X1JFTE9BRAkJ
CV9NS19FTlVNX0NPTlNUKDB4MSkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMV9D
T1VOVEVSX1JFTE9BRF8wX0VSUjQ5X1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDE3KQ0KPiAr
I2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX0NPVU5URVJfUkVMT0FEXzBfRVJSNDlfRklF
TEQJCQlfTUtfRklFTERfQ09OU1QoMHgxLCBOVkRMQV9HRUNfRVJSU0xJQ0UxX0NPVU5URVJf
UkVMT0FEXzBfRVJSNDlfU0hJRlQpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFf
Q09VTlRFUl9SRUxPQURfMF9FUlI0OV9OT1JFTE9BRAkJCV9NS19FTlVNX0NPTlNUKDB4MCkN
Cj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMV9DT1VOVEVSX1JFTE9BRF8wX0VSUjQ5
X1JFTE9BRAkJCV9NS19FTlVNX0NPTlNUKDB4MSkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VS
UlNMSUNFMV9DT1VOVEVSX1JFTE9BRF8wX0VSUjUwX1NISUZUCQkJX01LX1NISUZUX0NPTlNU
KDE4KQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX0NPVU5URVJfUkVMT0FEXzBf
RVJSNTBfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHgxLCBOVkRMQV9HRUNfRVJSU0xJQ0Ux
X0NPVU5URVJfUkVMT0FEXzBfRVJSNTBfU0hJRlQpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19F
UlJTTElDRTFfQ09VTlRFUl9SRUxPQURfMF9FUlI1MF9OT1JFTE9BRAkJCV9NS19FTlVNX0NP
TlNUKDB4MCkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMV9DT1VOVEVSX1JFTE9B
RF8wX0VSUjUwX1JFTE9BRAkJCV9NS19FTlVNX0NPTlNUKDB4MSkNCj4gKyNkZWZpbmUgTlZE
TEFfR0VDX0VSUlNMSUNFMV9DT1VOVEVSX1JFTE9BRF8wX0VSUjUxX1NISUZUCQkJX01LX1NI
SUZUX0NPTlNUKDE5KQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX0NPVU5URVJf
UkVMT0FEXzBfRVJSNTFfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHgxLCBOVkRMQV9HRUNf
RVJSU0xJQ0UxX0NPVU5URVJfUkVMT0FEXzBfRVJSNTFfU0hJRlQpDQo+ICsjZGVmaW5lIE5W
RExBX0dFQ19FUlJTTElDRTFfQ09VTlRFUl9SRUxPQURfMF9FUlI1MV9OT1JFTE9BRAkJCV9N
S19FTlVNX0NPTlNUKDB4MCkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMV9DT1VO
VEVSX1JFTE9BRF8wX0VSUjUxX1JFTE9BRAkJCV9NS19FTlVNX0NPTlNUKDB4MSkNCj4gKyNk
ZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMV9DT1VOVEVSX1JFTE9BRF8wX0VSUjUyX1NISUZU
CQkJX01LX1NISUZUX0NPTlNUKDIwKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0Ux
X0NPVU5URVJfUkVMT0FEXzBfRVJSNTJfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHgxLCBO
VkRMQV9HRUNfRVJSU0xJQ0UxX0NPVU5URVJfUkVMT0FEXzBfRVJSNTJfU0hJRlQpDQo+ICsj
ZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFfQ09VTlRFUl9SRUxPQURfMF9FUlI1Ml9OT1JF
TE9BRAkJCV9NS19FTlVNX0NPTlNUKDB4MCkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNM
SUNFMV9DT1VOVEVSX1JFTE9BRF8wX0VSUjUyX1JFTE9BRAkJCV9NS19FTlVNX0NPTlNUKDB4
MSkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMV9DT1VOVEVSX1JFTE9BRF8wX0VS
UjUzX1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDIxKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNf
RVJSU0xJQ0UxX0NPVU5URVJfUkVMT0FEXzBfRVJSNTNfRklFTEQJCQlfTUtfRklFTERfQ09O
U1QoMHgxLCBOVkRMQV9HRUNfRVJSU0xJQ0UxX0NPVU5URVJfUkVMT0FEXzBfRVJSNTNfU0hJ
RlQpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFfQ09VTlRFUl9SRUxPQURfMF9F
UlI1M19OT1JFTE9BRAkJCV9NS19FTlVNX0NPTlNUKDB4MCkNCj4gKyNkZWZpbmUgTlZETEFf
R0VDX0VSUlNMSUNFMV9DT1VOVEVSX1JFTE9BRF8wX0VSUjUzX1JFTE9BRAkJCV9NS19FTlVN
X0NPTlNUKDB4MSkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMV9DT1VOVEVSX1JF
TE9BRF8wX0VSUjU0X1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDIyKQ0KPiArI2RlZmluZSBO
VkRMQV9HRUNfRVJSU0xJQ0UxX0NPVU5URVJfUkVMT0FEXzBfRVJSNTRfRklFTEQJCQlfTUtf
RklFTERfQ09OU1QoMHgxLCBOVkRMQV9HRUNfRVJSU0xJQ0UxX0NPVU5URVJfUkVMT0FEXzBf
RVJSNTRfU0hJRlQpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFfQ09VTlRFUl9S
RUxPQURfMF9FUlI1NF9OT1JFTE9BRAkJCV9NS19FTlVNX0NPTlNUKDB4MCkNCj4gKyNkZWZp
bmUgTlZETEFfR0VDX0VSUlNMSUNFMV9DT1VOVEVSX1JFTE9BRF8wX0VSUjU0X1JFTE9BRAkJ
CV9NS19FTlVNX0NPTlNUKDB4MSkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMV9D
T1VOVEVSX1JFTE9BRF8wX0VSUjU1X1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDIzKQ0KPiAr
I2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX0NPVU5URVJfUkVMT0FEXzBfRVJSNTVfRklF
TEQJCQlfTUtfRklFTERfQ09OU1QoMHgxLCBOVkRMQV9HRUNfRVJSU0xJQ0UxX0NPVU5URVJf
UkVMT0FEXzBfRVJSNTVfU0hJRlQpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFf
Q09VTlRFUl9SRUxPQURfMF9FUlI1NV9OT1JFTE9BRAkJCV9NS19FTlVNX0NPTlNUKDB4MCkN
Cj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMV9DT1VOVEVSX1JFTE9BRF8wX0VSUjU1
X1JFTE9BRAkJCV9NS19FTlVNX0NPTlNUKDB4MSkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VS
UlNMSUNFMV9DT1VOVEVSX1JFTE9BRF8wX0VSUjU2X1NISUZUCQkJX01LX1NISUZUX0NPTlNU
KDI0KQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX0NPVU5URVJfUkVMT0FEXzBf
RVJSNTZfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHgxLCBOVkRMQV9HRUNfRVJSU0xJQ0Ux
X0NPVU5URVJfUkVMT0FEXzBfRVJSNTZfU0hJRlQpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19F
UlJTTElDRTFfQ09VTlRFUl9SRUxPQURfMF9FUlI1Nl9OT1JFTE9BRAkJCV9NS19FTlVNX0NP
TlNUKDB4MCkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMV9DT1VOVEVSX1JFTE9B
RF8wX0VSUjU2X1JFTE9BRAkJCV9NS19FTlVNX0NPTlNUKDB4MSkNCj4gKyNkZWZpbmUgTlZE
TEFfR0VDX0VSUlNMSUNFMV9DT1VOVEVSX1JFTE9BRF8wX0VSUjU3X1NISUZUCQkJX01LX1NI
SUZUX0NPTlNUKDI1KQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX0NPVU5URVJf
UkVMT0FEXzBfRVJSNTdfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHgxLCBOVkRMQV9HRUNf
RVJSU0xJQ0UxX0NPVU5URVJfUkVMT0FEXzBfRVJSNTdfU0hJRlQpDQo+ICsjZGVmaW5lIE5W
RExBX0dFQ19FUlJTTElDRTFfQ09VTlRFUl9SRUxPQURfMF9FUlI1N19OT1JFTE9BRAkJCV9N
S19FTlVNX0NPTlNUKDB4MCkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMV9DT1VO
VEVSX1JFTE9BRF8wX0VSUjU3X1JFTE9BRAkJCV9NS19FTlVNX0NPTlNUKDB4MSkNCj4gKyNk
ZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMV9DT1VOVEVSX1JFTE9BRF8wX0VSUjU4X1NISUZU
CQkJX01LX1NISUZUX0NPTlNUKDI2KQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0Ux
X0NPVU5URVJfUkVMT0FEXzBfRVJSNThfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHgxLCBO
VkRMQV9HRUNfRVJSU0xJQ0UxX0NPVU5URVJfUkVMT0FEXzBfRVJSNThfU0hJRlQpDQo+ICsj
ZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFfQ09VTlRFUl9SRUxPQURfMF9FUlI1OF9OT1JF
TE9BRAkJCV9NS19FTlVNX0NPTlNUKDB4MCkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNM
SUNFMV9DT1VOVEVSX1JFTE9BRF8wX0VSUjU4X1JFTE9BRAkJCV9NS19FTlVNX0NPTlNUKDB4
MSkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMV9DT1VOVEVSX1JFTE9BRF8wX0VS
UjU5X1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDI3KQ0KPiArI2RlZmluZSBOVkRMQV9HRUNf
RVJSU0xJQ0UxX0NPVU5URVJfUkVMT0FEXzBfRVJSNTlfRklFTEQJCQlfTUtfRklFTERfQ09O
U1QoMHgxLCBOVkRMQV9HRUNfRVJSU0xJQ0UxX0NPVU5URVJfUkVMT0FEXzBfRVJSNTlfU0hJ
RlQpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFfQ09VTlRFUl9SRUxPQURfMF9F
UlI1OV9OT1JFTE9BRAkJCV9NS19FTlVNX0NPTlNUKDB4MCkNCj4gKyNkZWZpbmUgTlZETEFf
R0VDX0VSUlNMSUNFMV9DT1VOVEVSX1JFTE9BRF8wX0VSUjU5X1JFTE9BRAkJCV9NS19FTlVN
X0NPTlNUKDB4MSkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMV9DT1VOVEVSX1JF
TE9BRF8wX0VSUjYwX1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDI4KQ0KPiArI2RlZmluZSBO
VkRMQV9HRUNfRVJSU0xJQ0UxX0NPVU5URVJfUkVMT0FEXzBfRVJSNjBfRklFTEQJCQlfTUtf
RklFTERfQ09OU1QoMHgxLCBOVkRMQV9HRUNfRVJSU0xJQ0UxX0NPVU5URVJfUkVMT0FEXzBf
RVJSNjBfU0hJRlQpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFfQ09VTlRFUl9S
RUxPQURfMF9FUlI2MF9OT1JFTE9BRAkJCV9NS19FTlVNX0NPTlNUKDB4MCkNCj4gKyNkZWZp
bmUgTlZETEFfR0VDX0VSUlNMSUNFMV9DT1VOVEVSX1JFTE9BRF8wX0VSUjYwX1JFTE9BRAkJ
CV9NS19FTlVNX0NPTlNUKDB4MSkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMV9D
T1VOVEVSX1JFTE9BRF8wX0VSUjYxX1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDI5KQ0KPiAr
I2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX0NPVU5URVJfUkVMT0FEXzBfRVJSNjFfRklF
TEQJCQlfTUtfRklFTERfQ09OU1QoMHgxLCBOVkRMQV9HRUNfRVJSU0xJQ0UxX0NPVU5URVJf
UkVMT0FEXzBfRVJSNjFfU0hJRlQpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTFf
Q09VTlRFUl9SRUxPQURfMF9FUlI2MV9OT1JFTE9BRAkJCV9NS19FTlVNX0NPTlNUKDB4MCkN
Cj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMV9DT1VOVEVSX1JFTE9BRF8wX0VSUjYx
X1JFTE9BRAkJCV9NS19FTlVNX0NPTlNUKDB4MSkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VS
UlNMSUNFMV9DT1VOVEVSX1JFTE9BRF8wX0VSUjYyX1NISUZUCQkJX01LX1NISUZUX0NPTlNU
KDMwKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX0NPVU5URVJfUkVMT0FEXzBf
RVJSNjJfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHgxLCBOVkRMQV9HRUNfRVJSU0xJQ0Ux
X0NPVU5URVJfUkVMT0FEXzBfRVJSNjJfU0hJRlQpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19F
UlJTTElDRTFfQ09VTlRFUl9SRUxPQURfMF9FUlI2Ml9OT1JFTE9BRAkJCV9NS19FTlVNX0NP
TlNUKDB4MCkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMV9DT1VOVEVSX1JFTE9B
RF8wX0VSUjYyX1JFTE9BRAkJCV9NS19FTlVNX0NPTlNUKDB4MSkNCj4gKyNkZWZpbmUgTlZE
TEFfR0VDX0VSUlNMSUNFMV9DT1VOVEVSX1JFTE9BRF8wX0VSUjYzX1NISUZUCQkJX01LX1NI
SUZUX0NPTlNUKDMxKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX0NPVU5URVJf
UkVMT0FEXzBfRVJSNjNfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHgxLCBOVkRMQV9HRUNf
RVJSU0xJQ0UxX0NPVU5URVJfUkVMT0FEXzBfRVJSNjNfU0hJRlQpDQo+ICsjZGVmaW5lIE5W
RExBX0dFQ19FUlJTTElDRTFfQ09VTlRFUl9SRUxPQURfMF9FUlI2M19OT1JFTE9BRAkJCV9N
S19FTlVNX0NPTlNUKDB4MCkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMV9DT1VO
VEVSX1JFTE9BRF8wX0VSUjYzX1JFTE9BRAkJCV9NS19FTlVNX0NPTlNUKDB4MSkNCj4gKw0K
PiArDQo+ICsvLyBSZWdpc3RlciBOVkRMQV9HRUNfRVJSU0xJQ0UxX01JU1NJT05FUlJfRUND
X0NPUlJFQ1RJT05fRElTXzANCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMV9NSVNT
SU9ORVJSX0VDQ19DT1JSRUNUSU9OX0RJU18wCQkJX01LX0FERFJfQ09OU1QoMHhlMDg0KQ0K
PiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UxX01JU1NJT05FUlJfRUNDX0NPUlJFQ1RJ
T05fRElTXzBfRVJSNjNfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMzEpDQo+ICsjZGVmaW5l
IE5WRExBX0dFQ19FUlJTTElDRTFfTUlTU0lPTkVSUl9FQ0NfQ09SUkVDVElPTl9ESVNfMF9F
UlI2M19GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweDEsIE5WRExBX0dFQ19FUlJTTElDRTFf
TUlTU0lPTkVSUl9FQ0NfQ09SUkVDVElPTl9ESVNfMF9FUlI2M19TSElGVCkNCj4gKyNkZWZp
bmUgTlZETEFfR0VDX0VSUlNMSUNFMV9NSVNTSU9ORVJSX0VDQ19DT1JSRUNUSU9OX0RJU18w
X0VSUjYzX0RJU0FCTEUJCQlfTUtfRU5VTV9DT05TVCgweDApDQo+ICsjZGVmaW5lIE5WRExB
X0dFQ19FUlJTTElDRTFfTUlTU0lPTkVSUl9FQ0NfQ09SUkVDVElPTl9ESVNfMF9FUlI2M19F
TkFCTEUJCQlfTUtfRU5VTV9DT05TVCgweDEpDQo+ICsNCj4gKw0KPiArLy8gUmVnaXN0ZXIg
TlZETEFfR0VDX0VSUlNMSUNFMl9NSVNTSU9ORVJSX0VOQUJMRV8wDQo+ICsjZGVmaW5lIE5W
RExBX0dFQ19FUlJTTElDRTJfTUlTU0lPTkVSUl9FTkFCTEVfMAkJCV9NS19BRERSX0NPTlNU
KDB4ZTA5MCkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMl9NSVNTSU9ORVJSX0VO
QUJMRV8wX0VSUjY0X1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDApDQo+ICsjZGVmaW5lIE5W
RExBX0dFQ19FUlJTTElDRTJfTUlTU0lPTkVSUl9FTkFCTEVfMF9FUlI2NF9GSUVMRAkJCV9N
S19GSUVMRF9DT05TVCgweDEsIE5WRExBX0dFQ19FUlJTTElDRTJfTUlTU0lPTkVSUl9FTkFC
TEVfMF9FUlI2NF9TSElGVCkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMl9NSVNT
SU9ORVJSX0VOQUJMRV8wX0VSUjY0X0RJU0FCTEUJCQlfTUtfRU5VTV9DT05TVCgweDApDQo+
ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTJfTUlTU0lPTkVSUl9FTkFCTEVfMF9FUlI2
NF9FTkFCTEUJCQlfTUtfRU5VTV9DT05TVCgweDEpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19F
UlJTTElDRTJfTUlTU0lPTkVSUl9FTkFCTEVfMF9FUlI2NV9TSElGVAkJCV9NS19TSElGVF9D
T05TVCgxKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UyX01JU1NJT05FUlJfRU5B
QkxFXzBfRVJSNjVfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHgxLCBOVkRMQV9HRUNfRVJS
U0xJQ0UyX01JU1NJT05FUlJfRU5BQkxFXzBfRVJSNjVfU0hJRlQpDQo+ICsjZGVmaW5lIE5W
RExBX0dFQ19FUlJTTElDRTJfTUlTU0lPTkVSUl9FTkFCTEVfMF9FUlI2NV9ESVNBQkxFCQkJ
X01LX0VOVU1fQ09OU1QoMHgwKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UyX01J
U1NJT05FUlJfRU5BQkxFXzBfRVJSNjVfRU5BQkxFCQkJX01LX0VOVU1fQ09OU1QoMHgxKQ0K
PiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UyX01JU1NJT05FUlJfRU5BQkxFXzBfRVJS
NjZfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMikNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VS
UlNMSUNFMl9NSVNTSU9ORVJSX0VOQUJMRV8wX0VSUjY2X0ZJRUxECQkJX01LX0ZJRUxEX0NP
TlNUKDB4MSwgTlZETEFfR0VDX0VSUlNMSUNFMl9NSVNTSU9ORVJSX0VOQUJMRV8wX0VSUjY2
X1NISUZUKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UyX01JU1NJT05FUlJfRU5B
QkxFXzBfRVJSNjZfRElTQUJMRQkJCV9NS19FTlVNX0NPTlNUKDB4MCkNCj4gKyNkZWZpbmUg
TlZETEFfR0VDX0VSUlNMSUNFMl9NSVNTSU9ORVJSX0VOQUJMRV8wX0VSUjY2X0VOQUJMRQkJ
CV9NS19FTlVNX0NPTlNUKDB4MSkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMl9N
SVNTSU9ORVJSX0VOQUJMRV8wX0VSUjY3X1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDMpDQo+
ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTJfTUlTU0lPTkVSUl9FTkFCTEVfMF9FUlI2
N19GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweDEsIE5WRExBX0dFQ19FUlJTTElDRTJfTUlT
U0lPTkVSUl9FTkFCTEVfMF9FUlI2N19TSElGVCkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VS
UlNMSUNFMl9NSVNTSU9ORVJSX0VOQUJMRV8wX0VSUjY3X0RJU0FCTEUJCQlfTUtfRU5VTV9D
T05TVCgweDApDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTJfTUlTU0lPTkVSUl9F
TkFCTEVfMF9FUlI2N19FTkFCTEUJCQlfTUtfRU5VTV9DT05TVCgweDEpDQo+ICsNCj4gKw0K
PiArLy8gUmVnaXN0ZXIgTlZETEFfR0VDX0VSUlNMSUNFMl9NSVNTSU9ORVJSX0ZPUkNFXzAN
Cj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMl9NSVNTSU9ORVJSX0ZPUkNFXzAJCQlf
TUtfQUREUl9DT05TVCgweGUwOTQpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTJf
TUlTU0lPTkVSUl9GT1JDRV8wX0VSUjY0X1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDApDQo+
ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTJfTUlTU0lPTkVSUl9GT1JDRV8wX0VSUjY0
X0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4MSwgTlZETEFfR0VDX0VSUlNMSUNFMl9NSVNT
SU9ORVJSX0ZPUkNFXzBfRVJSNjRfU0hJRlQpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJT
TElDRTJfTUlTU0lPTkVSUl9GT1JDRV8wX0VSUjY0X05PRk9SQ0UJCQlfTUtfRU5VTV9DT05T
VCgweDApDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTJfTUlTU0lPTkVSUl9GT1JD
RV8wX0VSUjY0X0ZPUkNFCQkJX01LX0VOVU1fQ09OU1QoMHgxKQ0KPiArI2RlZmluZSBOVkRM
QV9HRUNfRVJSU0xJQ0UyX01JU1NJT05FUlJfRk9SQ0VfMF9FUlI2NV9TSElGVAkJCV9NS19T
SElGVF9DT05TVCgxKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UyX01JU1NJT05F
UlJfRk9SQ0VfMF9FUlI2NV9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweDEsIE5WRExBX0dF
Q19FUlJTTElDRTJfTUlTU0lPTkVSUl9GT1JDRV8wX0VSUjY1X1NISUZUKQ0KPiArI2RlZmlu
ZSBOVkRMQV9HRUNfRVJSU0xJQ0UyX01JU1NJT05FUlJfRk9SQ0VfMF9FUlI2NV9OT0ZPUkNF
CQkJX01LX0VOVU1fQ09OU1QoMHgwKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0Uy
X01JU1NJT05FUlJfRk9SQ0VfMF9FUlI2NV9GT1JDRQkJCV9NS19FTlVNX0NPTlNUKDB4MSkN
Cj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMl9NSVNTSU9ORVJSX0ZPUkNFXzBfRVJS
NjZfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMikNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VS
UlNMSUNFMl9NSVNTSU9ORVJSX0ZPUkNFXzBfRVJSNjZfRklFTEQJCQlfTUtfRklFTERfQ09O
U1QoMHgxLCBOVkRMQV9HRUNfRVJSU0xJQ0UyX01JU1NJT05FUlJfRk9SQ0VfMF9FUlI2Nl9T
SElGVCkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMl9NSVNTSU9ORVJSX0ZPUkNF
XzBfRVJSNjZfTk9GT1JDRQkJCV9NS19FTlVNX0NPTlNUKDB4MCkNCj4gKyNkZWZpbmUgTlZE
TEFfR0VDX0VSUlNMSUNFMl9NSVNTSU9ORVJSX0ZPUkNFXzBfRVJSNjZfRk9SQ0UJCQlfTUtf
RU5VTV9DT05TVCgweDEpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTJfTUlTU0lP
TkVSUl9GT1JDRV8wX0VSUjY3X1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDMpDQo+ICsjZGVm
aW5lIE5WRExBX0dFQ19FUlJTTElDRTJfTUlTU0lPTkVSUl9GT1JDRV8wX0VSUjY3X0ZJRUxE
CQkJX01LX0ZJRUxEX0NPTlNUKDB4MSwgTlZETEFfR0VDX0VSUlNMSUNFMl9NSVNTSU9ORVJS
X0ZPUkNFXzBfRVJSNjdfU0hJRlQpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTJf
TUlTU0lPTkVSUl9GT1JDRV8wX0VSUjY3X05PRk9SQ0UJCQlfTUtfRU5VTV9DT05TVCgweDAp
DQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTJfTUlTU0lPTkVSUl9GT1JDRV8wX0VS
UjY3X0ZPUkNFCQkJX01LX0VOVU1fQ09OU1QoMHgxKQ0KPiArDQo+ICsNCj4gKy8vIFJlZ2lz
dGVyIE5WRExBX0dFQ19FUlJTTElDRTJfTUlTU0lPTkVSUl9TVEFUVVNfMA0KPiArI2RlZmlu
ZSBOVkRMQV9HRUNfRVJSU0xJQ0UyX01JU1NJT05FUlJfU1RBVFVTXzAJCQlfTUtfQUREUl9D
T05TVCgweGUwOTgpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTJfTUlTU0lPTkVS
Ul9TVEFUVVNfMF9FUlI2NF9TSElGVAkJCV9NS19TSElGVF9DT05TVCgwKQ0KPiArI2RlZmlu
ZSBOVkRMQV9HRUNfRVJSU0xJQ0UyX01JU1NJT05FUlJfU1RBVFVTXzBfRVJSNjRfRklFTEQJ
CQlfTUtfRklFTERfQ09OU1QoMHgxLCBOVkRMQV9HRUNfRVJSU0xJQ0UyX01JU1NJT05FUlJf
U1RBVFVTXzBfRVJSNjRfU0hJRlQpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTJf
TUlTU0lPTkVSUl9TVEFUVVNfMF9FUlI2NV9TSElGVAkJCV9NS19TSElGVF9DT05TVCgxKQ0K
PiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UyX01JU1NJT05FUlJfU1RBVFVTXzBfRVJS
NjVfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHgxLCBOVkRMQV9HRUNfRVJSU0xJQ0UyX01J
U1NJT05FUlJfU1RBVFVTXzBfRVJSNjVfU0hJRlQpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19F
UlJTTElDRTJfTUlTU0lPTkVSUl9TVEFUVVNfMF9FUlI2Nl9TSElGVAkJCV9NS19TSElGVF9D
T05TVCgyKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UyX01JU1NJT05FUlJfU1RB
VFVTXzBfRVJSNjZfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHgxLCBOVkRMQV9HRUNfRVJS
U0xJQ0UyX01JU1NJT05FUlJfU1RBVFVTXzBfRVJSNjZfU0hJRlQpDQo+ICsjZGVmaW5lIE5W
RExBX0dFQ19FUlJTTElDRTJfTUlTU0lPTkVSUl9TVEFUVVNfMF9FUlI2N19TSElGVAkJCV9N
S19TSElGVF9DT05TVCgzKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UyX01JU1NJ
T05FUlJfU1RBVFVTXzBfRVJSNjdfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHgxLCBOVkRM
QV9HRUNfRVJSU0xJQ0UyX01JU1NJT05FUlJfU1RBVFVTXzBfRVJSNjdfU0hJRlQpDQo+ICsN
Cj4gKw0KPiArLy8gUmVnaXN0ZXIgTlZETEFfR0VDX0VSUlNMSUNFMl9NSVNTSU9ORVJSX0lO
SkVDVF8wDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTJfTUlTU0lPTkVSUl9JTkpF
Q1RfMAkJCV9NS19BRERSX0NPTlNUKDB4ZTA5YykNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VS
UlNMSUNFMl9NSVNTSU9ORVJSX0lOSkVDVF8wX0VSUjY0X1NISUZUCQkJX01LX1NISUZUX0NP
TlNUKDApDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTJfTUlTU0lPTkVSUl9JTkpF
Q1RfMF9FUlI2NF9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweDEsIE5WRExBX0dFQ19FUlJT
TElDRTJfTUlTU0lPTkVSUl9JTkpFQ1RfMF9FUlI2NF9TSElGVCkNCj4gKyNkZWZpbmUgTlZE
TEFfR0VDX0VSUlNMSUNFMl9NSVNTSU9ORVJSX0lOSkVDVF8wX0VSUjY0X0RJU0FCTEUJCQlf
TUtfRU5VTV9DT05TVCgweDApDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTJfTUlT
U0lPTkVSUl9JTkpFQ1RfMF9FUlI2NF9FTkFCTEUJCQlfTUtfRU5VTV9DT05TVCgweDEpDQo+
ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTJfTUlTU0lPTkVSUl9JTkpFQ1RfMF9FUlI2
NV9TSElGVAkJCV9NS19TSElGVF9DT05TVCgxKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJS
U0xJQ0UyX01JU1NJT05FUlJfSU5KRUNUXzBfRVJSNjVfRklFTEQJCQlfTUtfRklFTERfQ09O
U1QoMHgxLCBOVkRMQV9HRUNfRVJSU0xJQ0UyX01JU1NJT05FUlJfSU5KRUNUXzBfRVJSNjVf
U0hJRlQpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTJfTUlTU0lPTkVSUl9JTkpF
Q1RfMF9FUlI2NV9ESVNBQkxFCQkJX01LX0VOVU1fQ09OU1QoMHgwKQ0KPiArI2RlZmluZSBO
VkRMQV9HRUNfRVJSU0xJQ0UyX01JU1NJT05FUlJfSU5KRUNUXzBfRVJSNjVfRU5BQkxFCQkJ
X01LX0VOVU1fQ09OU1QoMHgxKQ0KPiArDQo+ICsNCj4gKy8vIFJlZ2lzdGVyIE5WRExBX0dF
Q19FUlJTTElDRTJfTEFURU5URVJSX0VOQUJMRV8wDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19F
UlJTTElDRTJfTEFURU5URVJSX0VOQUJMRV8wCQkJX01LX0FERFJfQ09OU1QoMHhlMGEwKQ0K
PiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UyX0xBVEVOVEVSUl9FTkFCTEVfMF9FUlI2
NF9TSElGVAkJCV9NS19TSElGVF9DT05TVCgwKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJS
U0xJQ0UyX0xBVEVOVEVSUl9FTkFCTEVfMF9FUlI2NF9GSUVMRAkJCV9NS19GSUVMRF9DT05T
VCgweDEsIE5WRExBX0dFQ19FUlJTTElDRTJfTEFURU5URVJSX0VOQUJMRV8wX0VSUjY0X1NI
SUZUKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UyX0xBVEVOVEVSUl9FTkFCTEVf
MF9FUlI2NF9ESVNBQkxFCQkJX01LX0VOVU1fQ09OU1QoMHgwKQ0KPiArI2RlZmluZSBOVkRM
QV9HRUNfRVJSU0xJQ0UyX0xBVEVOVEVSUl9FTkFCTEVfMF9FUlI2NF9FTkFCTEUJCQlfTUtf
RU5VTV9DT05TVCgweDEpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTJfTEFURU5U
RVJSX0VOQUJMRV8wX0VSUjY1X1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDEpDQo+ICsjZGVm
aW5lIE5WRExBX0dFQ19FUlJTTElDRTJfTEFURU5URVJSX0VOQUJMRV8wX0VSUjY1X0ZJRUxE
CQkJX01LX0ZJRUxEX0NPTlNUKDB4MSwgTlZETEFfR0VDX0VSUlNMSUNFMl9MQVRFTlRFUlJf
RU5BQkxFXzBfRVJSNjVfU0hJRlQpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTJf
TEFURU5URVJSX0VOQUJMRV8wX0VSUjY1X0RJU0FCTEUJCQlfTUtfRU5VTV9DT05TVCgweDAp
DQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTJfTEFURU5URVJSX0VOQUJMRV8wX0VS
UjY1X0VOQUJMRQkJCV9NS19FTlVNX0NPTlNUKDB4MSkNCj4gKyNkZWZpbmUgTlZETEFfR0VD
X0VSUlNMSUNFMl9MQVRFTlRFUlJfRU5BQkxFXzBfRVJSNjZfU0hJRlQJCQlfTUtfU0hJRlRf
Q09OU1QoMikNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMl9MQVRFTlRFUlJfRU5B
QkxFXzBfRVJSNjZfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHgxLCBOVkRMQV9HRUNfRVJS
U0xJQ0UyX0xBVEVOVEVSUl9FTkFCTEVfMF9FUlI2Nl9TSElGVCkNCj4gKyNkZWZpbmUgTlZE
TEFfR0VDX0VSUlNMSUNFMl9MQVRFTlRFUlJfRU5BQkxFXzBfRVJSNjZfRElTQUJMRQkJCV9N
S19FTlVNX0NPTlNUKDB4MCkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMl9MQVRF
TlRFUlJfRU5BQkxFXzBfRVJSNjZfRU5BQkxFCQkJX01LX0VOVU1fQ09OU1QoMHgxKQ0KPiAr
I2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UyX0xBVEVOVEVSUl9FTkFCTEVfMF9FUlI2N19T
SElGVAkJCV9NS19TSElGVF9DT05TVCgzKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJ
Q0UyX0xBVEVOVEVSUl9FTkFCTEVfMF9FUlI2N19GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgw
eDEsIE5WRExBX0dFQ19FUlJTTElDRTJfTEFURU5URVJSX0VOQUJMRV8wX0VSUjY3X1NISUZU
KQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UyX0xBVEVOVEVSUl9FTkFCTEVfMF9F
UlI2N19ESVNBQkxFCQkJX01LX0VOVU1fQ09OU1QoMHgwKQ0KPiArI2RlZmluZSBOVkRMQV9H
RUNfRVJSU0xJQ0UyX0xBVEVOVEVSUl9FTkFCTEVfMF9FUlI2N19FTkFCTEUJCQlfTUtfRU5V
TV9DT05TVCgweDEpDQo+ICsNCj4gKw0KPiArLy8gUmVnaXN0ZXIgTlZETEFfR0VDX0VSUlNM
SUNFMl9MQVRFTlRFUlJfRk9SQ0VfMA0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0Uy
X0xBVEVOVEVSUl9GT1JDRV8wCQkJX01LX0FERFJfQ09OU1QoMHhlMGE0KQ0KPiArI2RlZmlu
ZSBOVkRMQV9HRUNfRVJSU0xJQ0UyX0xBVEVOVEVSUl9GT1JDRV8wX0VSUjY0X1NISUZUCQkJ
X01LX1NISUZUX0NPTlNUKDApDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTJfTEFU
RU5URVJSX0ZPUkNFXzBfRVJSNjRfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHgxLCBOVkRM
QV9HRUNfRVJSU0xJQ0UyX0xBVEVOVEVSUl9GT1JDRV8wX0VSUjY0X1NISUZUKQ0KPiArI2Rl
ZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UyX0xBVEVOVEVSUl9GT1JDRV8wX0VSUjY0X05PRk9S
Q0UJCQlfTUtfRU5VTV9DT05TVCgweDApDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElD
RTJfTEFURU5URVJSX0ZPUkNFXzBfRVJSNjRfRk9SQ0UJCQlfTUtfRU5VTV9DT05TVCgweDEp
DQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTJfTEFURU5URVJSX0ZPUkNFXzBfRVJS
NjVfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMSkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VS
UlNMSUNFMl9MQVRFTlRFUlJfRk9SQ0VfMF9FUlI2NV9GSUVMRAkJCV9NS19GSUVMRF9DT05T
VCgweDEsIE5WRExBX0dFQ19FUlJTTElDRTJfTEFURU5URVJSX0ZPUkNFXzBfRVJSNjVfU0hJ
RlQpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTJfTEFURU5URVJSX0ZPUkNFXzBf
RVJSNjVfTk9GT1JDRQkJCV9NS19FTlVNX0NPTlNUKDB4MCkNCj4gKyNkZWZpbmUgTlZETEFf
R0VDX0VSUlNMSUNFMl9MQVRFTlRFUlJfRk9SQ0VfMF9FUlI2NV9GT1JDRQkJCV9NS19FTlVN
X0NPTlNUKDB4MSkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMl9MQVRFTlRFUlJf
Rk9SQ0VfMF9FUlI2Nl9TSElGVAkJCV9NS19TSElGVF9DT05TVCgyKQ0KPiArI2RlZmluZSBO
VkRMQV9HRUNfRVJSU0xJQ0UyX0xBVEVOVEVSUl9GT1JDRV8wX0VSUjY2X0ZJRUxECQkJX01L
X0ZJRUxEX0NPTlNUKDB4MSwgTlZETEFfR0VDX0VSUlNMSUNFMl9MQVRFTlRFUlJfRk9SQ0Vf
MF9FUlI2Nl9TSElGVCkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMl9MQVRFTlRF
UlJfRk9SQ0VfMF9FUlI2Nl9OT0ZPUkNFCQkJX01LX0VOVU1fQ09OU1QoMHgwKQ0KPiArI2Rl
ZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UyX0xBVEVOVEVSUl9GT1JDRV8wX0VSUjY2X0ZPUkNF
CQkJX01LX0VOVU1fQ09OU1QoMHgxKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0Uy
X0xBVEVOVEVSUl9GT1JDRV8wX0VSUjY3X1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDMpDQo+
ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTJfTEFURU5URVJSX0ZPUkNFXzBfRVJSNjdf
RklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHgxLCBOVkRMQV9HRUNfRVJSU0xJQ0UyX0xBVEVO
VEVSUl9GT1JDRV8wX0VSUjY3X1NISUZUKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJ
Q0UyX0xBVEVOVEVSUl9GT1JDRV8wX0VSUjY3X05PRk9SQ0UJCQlfTUtfRU5VTV9DT05TVCgw
eDApDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTJfTEFURU5URVJSX0ZPUkNFXzBf
RVJSNjdfRk9SQ0UJCQlfTUtfRU5VTV9DT05TVCgweDEpDQo+ICsNCj4gKw0KPiArLy8gUmVn
aXN0ZXIgTlZETEFfR0VDX0VSUlNMSUNFMl9MQVRFTlRFUlJfU1RBVFVTXzANCj4gKyNkZWZp
bmUgTlZETEFfR0VDX0VSUlNMSUNFMl9MQVRFTlRFUlJfU1RBVFVTXzAJCQlfTUtfQUREUl9D
T05TVCgweGUwYTgpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTJfTEFURU5URVJS
X1NUQVRVU18wX0VSUjY0X1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDApDQo+ICsjZGVmaW5l
IE5WRExBX0dFQ19FUlJTTElDRTJfTEFURU5URVJSX1NUQVRVU18wX0VSUjY0X0ZJRUxECQkJ
X01LX0ZJRUxEX0NPTlNUKDB4MSwgTlZETEFfR0VDX0VSUlNMSUNFMl9MQVRFTlRFUlJfU1RB
VFVTXzBfRVJSNjRfU0hJRlQpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTJfTEFU
RU5URVJSX1NUQVRVU18wX0VSUjY1X1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDEpDQo+ICsj
ZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTJfTEFURU5URVJSX1NUQVRVU18wX0VSUjY1X0ZJ
RUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4MSwgTlZETEFfR0VDX0VSUlNMSUNFMl9MQVRFTlRF
UlJfU1RBVFVTXzBfRVJSNjVfU0hJRlQpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElD
RTJfTEFURU5URVJSX1NUQVRVU18wX0VSUjY2X1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDIp
DQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTJfTEFURU5URVJSX1NUQVRVU18wX0VS
UjY2X0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4MSwgTlZETEFfR0VDX0VSUlNMSUNFMl9M
QVRFTlRFUlJfU1RBVFVTXzBfRVJSNjZfU0hJRlQpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19F
UlJTTElDRTJfTEFURU5URVJSX1NUQVRVU18wX0VSUjY3X1NISUZUCQkJX01LX1NISUZUX0NP
TlNUKDMpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTJfTEFURU5URVJSX1NUQVRV
U18wX0VSUjY3X0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4MSwgTlZETEFfR0VDX0VSUlNM
SUNFMl9MQVRFTlRFUlJfU1RBVFVTXzBfRVJSNjdfU0hJRlQpDQo+ICsNCj4gKw0KPiArLy8g
UmVnaXN0ZXIgTlZETEFfR0VDX0VSUlNMSUNFMl9DT1VOVEVSX1JFTE9BRF8wDQo+ICsjZGVm
aW5lIE5WRExBX0dFQ19FUlJTTElDRTJfQ09VTlRFUl9SRUxPQURfMAkJCV9NS19BRERSX0NP
TlNUKDB4ZTBiMCkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMl9DT1VOVEVSX1JF
TE9BRF8wX0VSUjY0X1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDApDQo+ICsjZGVmaW5lIE5W
RExBX0dFQ19FUlJTTElDRTJfQ09VTlRFUl9SRUxPQURfMF9FUlI2NF9GSUVMRAkJCV9NS19G
SUVMRF9DT05TVCgweDEsIE5WRExBX0dFQ19FUlJTTElDRTJfQ09VTlRFUl9SRUxPQURfMF9F
UlI2NF9TSElGVCkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMl9DT1VOVEVSX1JF
TE9BRF8wX0VSUjY0X05PUkVMT0FECQkJX01LX0VOVU1fQ09OU1QoMHgwKQ0KPiArI2RlZmlu
ZSBOVkRMQV9HRUNfRVJSU0xJQ0UyX0NPVU5URVJfUkVMT0FEXzBfRVJSNjRfUkVMT0FECQkJ
X01LX0VOVU1fQ09OU1QoMHgxKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UyX0NP
VU5URVJfUkVMT0FEXzBfRVJSNjVfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMSkNCj4gKyNk
ZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMl9DT1VOVEVSX1JFTE9BRF8wX0VSUjY1X0ZJRUxE
CQkJX01LX0ZJRUxEX0NPTlNUKDB4MSwgTlZETEFfR0VDX0VSUlNMSUNFMl9DT1VOVEVSX1JF
TE9BRF8wX0VSUjY1X1NISUZUKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UyX0NP
VU5URVJfUkVMT0FEXzBfRVJSNjVfTk9SRUxPQUQJCQlfTUtfRU5VTV9DT05TVCgweDApDQo+
ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTJfQ09VTlRFUl9SRUxPQURfMF9FUlI2NV9S
RUxPQUQJCQlfTUtfRU5VTV9DT05TVCgweDEpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJT
TElDRTJfQ09VTlRFUl9SRUxPQURfMF9FUlI2Nl9TSElGVAkJCV9NS19TSElGVF9DT05TVCgy
KQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UyX0NPVU5URVJfUkVMT0FEXzBfRVJS
NjZfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHgxLCBOVkRMQV9HRUNfRVJSU0xJQ0UyX0NP
VU5URVJfUkVMT0FEXzBfRVJSNjZfU0hJRlQpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJT
TElDRTJfQ09VTlRFUl9SRUxPQURfMF9FUlI2Nl9OT1JFTE9BRAkJCV9NS19FTlVNX0NPTlNU
KDB4MCkNCj4gKyNkZWZpbmUgTlZETEFfR0VDX0VSUlNMSUNFMl9DT1VOVEVSX1JFTE9BRF8w
X0VSUjY2X1JFTE9BRAkJCV9NS19FTlVNX0NPTlNUKDB4MSkNCj4gKyNkZWZpbmUgTlZETEFf
R0VDX0VSUlNMSUNFMl9DT1VOVEVSX1JFTE9BRF8wX0VSUjY3X1NISUZUCQkJX01LX1NISUZU
X0NPTlNUKDMpDQo+ICsjZGVmaW5lIE5WRExBX0dFQ19FUlJTTElDRTJfQ09VTlRFUl9SRUxP
QURfMF9FUlI2N19GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweDEsIE5WRExBX0dFQ19FUlJT
TElDRTJfQ09VTlRFUl9SRUxPQURfMF9FUlI2N19TSElGVCkNCj4gKyNkZWZpbmUgTlZETEFf
R0VDX0VSUlNMSUNFMl9DT1VOVEVSX1JFTE9BRF8wX0VSUjY3X05PUkVMT0FECQkJX01LX0VO
VU1fQ09OU1QoMHgwKQ0KPiArI2RlZmluZSBOVkRMQV9HRUNfRVJSU0xJQ0UyX0NPVU5URVJf
UkVMT0FEXzBfRVJSNjdfUkVMT0FECQkJX01LX0VOVU1fQ09OU1QoMHgxKQ0KPiArDQo+ICsN
Cj4gKw0KPiArLy8gVG8gc2F0aXNmeSB2YXJpb3VzIGNvbXBpbGVycyBhbmQgcGxhdGZvcm1z
LA0KPiArLy8gd2UgbGV0IHVzZXJzIGNvbnRyb2wgdGhlIHR5cGVzIGFuZCBzeW50YXggb2Yg
Y2VydGFpbiBjb25zdGFudHMsIHVzaW5nIG1hY3Jvcy4NCj4gKyNpZm5kZWYgX01LX1NISUZU
X0NPTlNUDQo+ICsgICNkZWZpbmUgX01LX1NISUZUX0NPTlNUKF9jb25zdGFudF8pIF9jb25z
dGFudF8NCj4gKyNlbmRpZg0KPiArI2lmbmRlZiBfTUtfTUFTS19DT05TVA0KPiArICAjZGVm
aW5lIF9NS19NQVNLX0NPTlNUKF9jb25zdGFudF8pIF9jb25zdGFudF8NCj4gKyNlbmRpZg0K
PiArI2lmbmRlZiBfTUtfRU5VTV9DT05TVA0KPiArICAjZGVmaW5lIF9NS19FTlVNX0NPTlNU
KF9jb25zdGFudF8pIChfY29uc3RhbnRfICMjIFVMKQ0KPiArI2VuZGlmDQo+ICsjaWZuZGVm
IF9NS19BRERSX0NPTlNUDQo+ICsgICNkZWZpbmUgX01LX0FERFJfQ09OU1QoX2NvbnN0YW50
XykgX2NvbnN0YW50Xw0KPiArI2VuZGlmDQo+ICsjaWZuZGVmIF9NS19GSUVMRF9DT05TVA0K
PiArICAjZGVmaW5lIF9NS19GSUVMRF9DT05TVChfbWFza18sIF9zaGlmdF8pIChfTUtfTUFT
S19DT05TVChfbWFza18pIDw8IF9NS19TSElGVF9DT05TVChfc2hpZnRfKSkNCj4gKyNlbmRp
Zg0KPiArDQo+ICsNCj4gKy8vIFJlZ2lzdGVyIE5WRExBX0NWSUZfQ0ZHX1JEX1dFSUdIVF8w
XzANCj4gKyNkZWZpbmUgTlZETEFfQ1ZJRl9DRkdfUkRfV0VJR0hUXzBfMAkJCV9NS19BRERS
X0NPTlNUKDB4ZjAwMCkNCj4gKyNkZWZpbmUgTlZETEFfQ1ZJRl9DRkdfUkRfV0VJR0hUXzBf
MF9SRF9XRUlHSFRfQkRNQV9TSElGVAkJCV9NS19TSElGVF9DT05TVCgwKQ0KPiArI2RlZmlu
ZSBOVkRMQV9DVklGX0NGR19SRF9XRUlHSFRfMF8wX1JEX1dFSUdIVF9CRE1BX0ZJRUxECQkJ
X01LX0ZJRUxEX0NPTlNUKDB4ZmYsIE5WRExBX0NWSUZfQ0ZHX1JEX1dFSUdIVF8wXzBfUkRf
V0VJR0hUX0JETUFfU0hJRlQpDQo+ICsjZGVmaW5lIE5WRExBX0NWSUZfQ0ZHX1JEX1dFSUdI
VF8wXzBfUkRfV0VJR0hUX1NEUF9TSElGVAkJCV9NS19TSElGVF9DT05TVCg4KQ0KPiArI2Rl
ZmluZSBOVkRMQV9DVklGX0NGR19SRF9XRUlHSFRfMF8wX1JEX1dFSUdIVF9TRFBfRklFTEQJ
CQlfTUtfRklFTERfQ09OU1QoMHhmZiwgTlZETEFfQ1ZJRl9DRkdfUkRfV0VJR0hUXzBfMF9S
RF9XRUlHSFRfU0RQX1NISUZUKQ0KPiArI2RlZmluZSBOVkRMQV9DVklGX0NGR19SRF9XRUlH
SFRfMF8wX1JEX1dFSUdIVF9QRFBfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMTYpDQo+ICsj
ZGVmaW5lIE5WRExBX0NWSUZfQ0ZHX1JEX1dFSUdIVF8wXzBfUkRfV0VJR0hUX1BEUF9GSUVM
RAkJCV9NS19GSUVMRF9DT05TVCgweGZmLCBOVkRMQV9DVklGX0NGR19SRF9XRUlHSFRfMF8w
X1JEX1dFSUdIVF9QRFBfU0hJRlQpDQo+ICsjZGVmaW5lIE5WRExBX0NWSUZfQ0ZHX1JEX1dF
SUdIVF8wXzBfUkRfV0VJR0hUX0NEUF9TSElGVAkJCV9NS19TSElGVF9DT05TVCgyNCkNCj4g
KyNkZWZpbmUgTlZETEFfQ1ZJRl9DRkdfUkRfV0VJR0hUXzBfMF9SRF9XRUlHSFRfQ0RQX0ZJ
RUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4ZmYsIE5WRExBX0NWSUZfQ0ZHX1JEX1dFSUdIVF8w
XzBfUkRfV0VJR0hUX0NEUF9TSElGVCkNCj4gKw0KPiArDQo+ICsvLyBSZWdpc3RlciBOVkRM
QV9DVklGX0NGR19SRF9XRUlHSFRfMV8wDQo+ICsjZGVmaW5lIE5WRExBX0NWSUZfQ0ZHX1JE
X1dFSUdIVF8xXzAJCQlfTUtfQUREUl9DT05TVCgweGYwMDQpDQo+ICsjZGVmaW5lIE5WRExB
X0NWSUZfQ0ZHX1JEX1dFSUdIVF8xXzBfUkRfV0VJR0hUX1NEUF9CX1NISUZUCQkJX01LX1NI
SUZUX0NPTlNUKDApDQo+ICsjZGVmaW5lIE5WRExBX0NWSUZfQ0ZHX1JEX1dFSUdIVF8xXzBf
UkRfV0VJR0hUX1NEUF9CX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4ZmYsIE5WRExBX0NW
SUZfQ0ZHX1JEX1dFSUdIVF8xXzBfUkRfV0VJR0hUX1NEUF9CX1NISUZUKQ0KPiArI2RlZmlu
ZSBOVkRMQV9DVklGX0NGR19SRF9XRUlHSFRfMV8wX1JEX1dFSUdIVF9TRFBfTl9TSElGVAkJ
CV9NS19TSElGVF9DT05TVCg4KQ0KPiArI2RlZmluZSBOVkRMQV9DVklGX0NGR19SRF9XRUlH
SFRfMV8wX1JEX1dFSUdIVF9TRFBfTl9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweGZmLCBO
VkRMQV9DVklGX0NGR19SRF9XRUlHSFRfMV8wX1JEX1dFSUdIVF9TRFBfTl9TSElGVCkNCj4g
KyNkZWZpbmUgTlZETEFfQ1ZJRl9DRkdfUkRfV0VJR0hUXzFfMF9SRF9XRUlHSFRfU0RQX0Vf
U0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMTYpDQo+ICsjZGVmaW5lIE5WRExBX0NWSUZfQ0ZH
X1JEX1dFSUdIVF8xXzBfUkRfV0VJR0hUX1NEUF9FX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNU
KDB4ZmYsIE5WRExBX0NWSUZfQ0ZHX1JEX1dFSUdIVF8xXzBfUkRfV0VJR0hUX1NEUF9FX1NI
SUZUKQ0KPiArI2RlZmluZSBOVkRMQV9DVklGX0NGR19SRF9XRUlHSFRfMV8wX1JEX1dFSUdI
VF9DRE1BX0RBVF9TSElGVAkJCV9NS19TSElGVF9DT05TVCgyNCkNCj4gKyNkZWZpbmUgTlZE
TEFfQ1ZJRl9DRkdfUkRfV0VJR0hUXzFfMF9SRF9XRUlHSFRfQ0RNQV9EQVRfRklFTEQJCQlf
TUtfRklFTERfQ09OU1QoMHhmZiwgTlZETEFfQ1ZJRl9DRkdfUkRfV0VJR0hUXzFfMF9SRF9X
RUlHSFRfQ0RNQV9EQVRfU0hJRlQpDQo+ICsNCj4gKw0KPiArLy8gUmVnaXN0ZXIgTlZETEFf
Q1ZJRl9DRkdfUkRfV0VJR0hUXzJfMA0KPiArI2RlZmluZSBOVkRMQV9DVklGX0NGR19SRF9X
RUlHSFRfMl8wCQkJX01LX0FERFJfQ09OU1QoMHhmMDA4KQ0KPiArI2RlZmluZSBOVkRMQV9D
VklGX0NGR19SRF9XRUlHSFRfMl8wX1JEX1dFSUdIVF9DRE1BX1dUX1NISUZUCQkJX01LX1NI
SUZUX0NPTlNUKDApDQo+ICsjZGVmaW5lIE5WRExBX0NWSUZfQ0ZHX1JEX1dFSUdIVF8yXzBf
UkRfV0VJR0hUX0NETUFfV1RfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHhmZiwgTlZETEFf
Q1ZJRl9DRkdfUkRfV0VJR0hUXzJfMF9SRF9XRUlHSFRfQ0RNQV9XVF9TSElGVCkNCj4gKyNk
ZWZpbmUgTlZETEFfQ1ZJRl9DRkdfUkRfV0VJR0hUXzJfMF9SRF9XRUlHSFRfUkJLX1NISUZU
CQkJX01LX1NISUZUX0NPTlNUKDgpDQo+ICsjZGVmaW5lIE5WRExBX0NWSUZfQ0ZHX1JEX1dF
SUdIVF8yXzBfUkRfV0VJR0hUX1JCS19GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweGZmLCBO
VkRMQV9DVklGX0NGR19SRF9XRUlHSFRfMl8wX1JEX1dFSUdIVF9SQktfU0hJRlQpDQo+ICsj
ZGVmaW5lIE5WRExBX0NWSUZfQ0ZHX1JEX1dFSUdIVF8yXzBfUkRfV0VJR0hUX1JTVl8xX1NI
SUZUCQkJX01LX1NISUZUX0NPTlNUKDE2KQ0KPiArI2RlZmluZSBOVkRMQV9DVklGX0NGR19S
RF9XRUlHSFRfMl8wX1JEX1dFSUdIVF9SU1ZfMV9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgw
eGZmLCBOVkRMQV9DVklGX0NGR19SRF9XRUlHSFRfMl8wX1JEX1dFSUdIVF9SU1ZfMV9TSElG
VCkNCj4gKyNkZWZpbmUgTlZETEFfQ1ZJRl9DRkdfUkRfV0VJR0hUXzJfMF9SRF9XRUlHSFRf
UlNWXzBfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMjQpDQo+ICsjZGVmaW5lIE5WRExBX0NW
SUZfQ0ZHX1JEX1dFSUdIVF8yXzBfUkRfV0VJR0hUX1JTVl8wX0ZJRUxECQkJX01LX0ZJRUxE
X0NPTlNUKDB4ZmYsIE5WRExBX0NWSUZfQ0ZHX1JEX1dFSUdIVF8yXzBfUkRfV0VJR0hUX1JT
Vl8wX1NISUZUKQ0KPiArDQo+ICsNCj4gKy8vIFJlZ2lzdGVyIE5WRExBX0NWSUZfQ0ZHX1dS
X1dFSUdIVF8wXzANCj4gKyNkZWZpbmUgTlZETEFfQ1ZJRl9DRkdfV1JfV0VJR0hUXzBfMAkJ
CV9NS19BRERSX0NPTlNUKDB4ZjAwYykNCj4gKyNkZWZpbmUgTlZETEFfQ1ZJRl9DRkdfV1Jf
V0VJR0hUXzBfMF9XUl9XRUlHSFRfQkRNQV9TSElGVAkJCV9NS19TSElGVF9DT05TVCgwKQ0K
PiArI2RlZmluZSBOVkRMQV9DVklGX0NGR19XUl9XRUlHSFRfMF8wX1dSX1dFSUdIVF9CRE1B
X0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4ZmYsIE5WRExBX0NWSUZfQ0ZHX1dSX1dFSUdI
VF8wXzBfV1JfV0VJR0hUX0JETUFfU0hJRlQpDQo+ICsjZGVmaW5lIE5WRExBX0NWSUZfQ0ZH
X1dSX1dFSUdIVF8wXzBfV1JfV0VJR0hUX1NEUF9TSElGVAkJCV9NS19TSElGVF9DT05TVCg4
KQ0KPiArI2RlZmluZSBOVkRMQV9DVklGX0NGR19XUl9XRUlHSFRfMF8wX1dSX1dFSUdIVF9T
RFBfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHhmZiwgTlZETEFfQ1ZJRl9DRkdfV1JfV0VJ
R0hUXzBfMF9XUl9XRUlHSFRfU0RQX1NISUZUKQ0KPiArI2RlZmluZSBOVkRMQV9DVklGX0NG
R19XUl9XRUlHSFRfMF8wX1dSX1dFSUdIVF9QRFBfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1Qo
MTYpDQo+ICsjZGVmaW5lIE5WRExBX0NWSUZfQ0ZHX1dSX1dFSUdIVF8wXzBfV1JfV0VJR0hU
X1BEUF9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweGZmLCBOVkRMQV9DVklGX0NGR19XUl9X
RUlHSFRfMF8wX1dSX1dFSUdIVF9QRFBfU0hJRlQpDQo+ICsjZGVmaW5lIE5WRExBX0NWSUZf
Q0ZHX1dSX1dFSUdIVF8wXzBfV1JfV0VJR0hUX0NEUF9TSElGVAkJCV9NS19TSElGVF9DT05T
VCgyNCkNCj4gKyNkZWZpbmUgTlZETEFfQ1ZJRl9DRkdfV1JfV0VJR0hUXzBfMF9XUl9XRUlH
SFRfQ0RQX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4ZmYsIE5WRExBX0NWSUZfQ0ZHX1dS
X1dFSUdIVF8wXzBfV1JfV0VJR0hUX0NEUF9TSElGVCkNCj4gKw0KPiArDQo+ICsvLyBSZWdp
c3RlciBOVkRMQV9DVklGX0NGR19XUl9XRUlHSFRfMV8wDQo+ICsjZGVmaW5lIE5WRExBX0NW
SUZfQ0ZHX1dSX1dFSUdIVF8xXzAJCQlfTUtfQUREUl9DT05TVCgweGYwMTApDQo+ICsjZGVm
aW5lIE5WRExBX0NWSUZfQ0ZHX1dSX1dFSUdIVF8xXzBfV1JfV0VJR0hUX1JCS19TSElGVAkJ
CV9NS19TSElGVF9DT05TVCgwKQ0KPiArI2RlZmluZSBOVkRMQV9DVklGX0NGR19XUl9XRUlH
SFRfMV8wX1dSX1dFSUdIVF9SQktfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHhmZiwgTlZE
TEFfQ1ZJRl9DRkdfV1JfV0VJR0hUXzFfMF9XUl9XRUlHSFRfUkJLX1NISUZUKQ0KPiArI2Rl
ZmluZSBOVkRMQV9DVklGX0NGR19XUl9XRUlHSFRfMV8wX1dSX1dFSUdIVF9SU1ZfMl9TSElG
VAkJCV9NS19TSElGVF9DT05TVCg4KQ0KPiArI2RlZmluZSBOVkRMQV9DVklGX0NGR19XUl9X
RUlHSFRfMV8wX1dSX1dFSUdIVF9SU1ZfMl9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweGZm
LCBOVkRMQV9DVklGX0NGR19XUl9XRUlHSFRfMV8wX1dSX1dFSUdIVF9SU1ZfMl9TSElGVCkN
Cj4gKyNkZWZpbmUgTlZETEFfQ1ZJRl9DRkdfV1JfV0VJR0hUXzFfMF9XUl9XRUlHSFRfUlNW
XzFfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMTYpDQo+ICsjZGVmaW5lIE5WRExBX0NWSUZf
Q0ZHX1dSX1dFSUdIVF8xXzBfV1JfV0VJR0hUX1JTVl8xX0ZJRUxECQkJX01LX0ZJRUxEX0NP
TlNUKDB4ZmYsIE5WRExBX0NWSUZfQ0ZHX1dSX1dFSUdIVF8xXzBfV1JfV0VJR0hUX1JTVl8x
X1NISUZUKQ0KPiArI2RlZmluZSBOVkRMQV9DVklGX0NGR19XUl9XRUlHSFRfMV8wX1dSX1dF
SUdIVF9SU1ZfMF9TSElGVAkJCV9NS19TSElGVF9DT05TVCgyNCkNCj4gKyNkZWZpbmUgTlZE
TEFfQ1ZJRl9DRkdfV1JfV0VJR0hUXzFfMF9XUl9XRUlHSFRfUlNWXzBfRklFTEQJCQlfTUtf
RklFTERfQ09OU1QoMHhmZiwgTlZETEFfQ1ZJRl9DRkdfV1JfV0VJR0hUXzFfMF9XUl9XRUlH
SFRfUlNWXzBfU0hJRlQpDQo+ICsNCj4gKw0KPiArLy8gUmVnaXN0ZXIgTlZETEFfQ1ZJRl9D
RkdfT1VUU1RBTkRJTkdfQ05UXzANCj4gKyNkZWZpbmUgTlZETEFfQ1ZJRl9DRkdfT1VUU1RB
TkRJTkdfQ05UXzAJCQlfTUtfQUREUl9DT05TVCgweGYwMTQpDQo+ICsjZGVmaW5lIE5WRExB
X0NWSUZfQ0ZHX09VVFNUQU5ESU5HX0NOVF8wX1JEX09TX0NOVF9TSElGVAkJCV9NS19TSElG
VF9DT05TVCgwKQ0KPiArI2RlZmluZSBOVkRMQV9DVklGX0NGR19PVVRTVEFORElOR19DTlRf
MF9SRF9PU19DTlRfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHhmZiwgTlZETEFfQ1ZJRl9D
RkdfT1VUU1RBTkRJTkdfQ05UXzBfUkRfT1NfQ05UX1NISUZUKQ0KPiArI2RlZmluZSBOVkRM
QV9DVklGX0NGR19PVVRTVEFORElOR19DTlRfMF9XUl9PU19DTlRfU0hJRlQJCQlfTUtfU0hJ
RlRfQ09OU1QoOCkNCj4gKyNkZWZpbmUgTlZETEFfQ1ZJRl9DRkdfT1VUU1RBTkRJTkdfQ05U
XzBfV1JfT1NfQ05UX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4ZmYsIE5WRExBX0NWSUZf
Q0ZHX09VVFNUQU5ESU5HX0NOVF8wX1dSX09TX0NOVF9TSElGVCkNCj4gKw0KPiArDQo+ICsv
LyBSZWdpc3RlciBOVkRMQV9DVklGX1NUQVRVU18wDQo+ICsjZGVmaW5lIE5WRExBX0NWSUZf
U1RBVFVTXzAJCQlfTUtfQUREUl9DT05TVCgweGYwMTgpDQo+ICsjZGVmaW5lIE5WRExBX0NW
SUZfU1RBVFVTXzBfSURMRV9TSElGVAkJCV9NS19TSElGVF9DT05TVCg4KQ0KPiArI2RlZmlu
ZSBOVkRMQV9DVklGX1NUQVRVU18wX0lETEVfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHgx
LCBOVkRMQV9DVklGX1NUQVRVU18wX0lETEVfU0hJRlQpDQo+ICsjZGVmaW5lIE5WRExBX0NW
SUZfU1RBVFVTXzBfSURMRV9OTwkJCV9NS19FTlVNX0NPTlNUKDB4MCkNCj4gKyNkZWZpbmUg
TlZETEFfQ1ZJRl9TVEFUVVNfMF9JRExFX1lFUwkJCV9NS19FTlVNX0NPTlNUKDB4MSkNCj4g
Kw0KPiArDQo+ICsNCj4gKy8vIFRvIHNhdGlzZnkgdmFyaW91cyBjb21waWxlcnMgYW5kIHBs
YXRmb3JtcywNCj4gKy8vIHdlIGxldCB1c2VycyBjb250cm9sIHRoZSB0eXBlcyBhbmQgc3lu
dGF4IG9mIGNlcnRhaW4gY29uc3RhbnRzLCB1c2luZyBtYWNyb3MuDQo+ICsjaWZuZGVmIF9N
S19TSElGVF9DT05TVA0KPiArICAjZGVmaW5lIF9NS19TSElGVF9DT05TVChfY29uc3RhbnRf
KSBfY29uc3RhbnRfDQo+ICsjZW5kaWYNCj4gKyNpZm5kZWYgX01LX01BU0tfQ09OU1QNCj4g
KyAgI2RlZmluZSBfTUtfTUFTS19DT05TVChfY29uc3RhbnRfKSBfY29uc3RhbnRfDQo+ICsj
ZW5kaWYNCj4gKyNpZm5kZWYgX01LX0VOVU1fQ09OU1QNCj4gKyAgI2RlZmluZSBfTUtfRU5V
TV9DT05TVChfY29uc3RhbnRfKSAoX2NvbnN0YW50XyAjIyBVTCkNCj4gKyNlbmRpZg0KPiAr
I2lmbmRlZiBfTUtfQUREUl9DT05TVA0KPiArICAjZGVmaW5lIF9NS19BRERSX0NPTlNUKF9j
b25zdGFudF8pIF9jb25zdGFudF8NCj4gKyNlbmRpZg0KPiArI2lmbmRlZiBfTUtfRklFTERf
Q09OU1QNCj4gKyAgI2RlZmluZSBfTUtfRklFTERfQ09OU1QoX21hc2tfLCBfc2hpZnRfKSAo
X01LX01BU0tfQ09OU1QoX21hc2tfKSA8PCBfTUtfU0hJRlRfQ09OU1QoX3NoaWZ0XykpDQo+
ICsjZW5kaWYNCj4gKw0KPiArDQo+ICsvLyBSZWdpc3RlciBCRE1BX0NGR19TUkNfQUREUl9M
T1dfMA0KPiArI2RlZmluZSBCRE1BX0NGR19TUkNfQUREUl9MT1dfMAkJCV9NS19BRERSX0NP
TlNUKDB4MTAwMDApDQo+ICsjZGVmaW5lIEJETUFfQ0ZHX1NSQ19BRERSX0xPV18wX1YzMl9T
SElGVAkJCV9NS19TSElGVF9DT05TVCg1KQ0KPiArI2RlZmluZSBCRE1BX0NGR19TUkNfQURE
Ul9MT1dfMF9WMzJfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHg3ZmZmZmZmLCBCRE1BX0NG
R19TUkNfQUREUl9MT1dfMF9WMzJfU0hJRlQpDQo+ICsNCj4gKw0KPiArLy8gUmVnaXN0ZXIg
QkRNQV9DRkdfU1JDX0FERFJfSElHSF8wDQo+ICsjZGVmaW5lIEJETUFfQ0ZHX1NSQ19BRERS
X0hJR0hfMAkJCV9NS19BRERSX0NPTlNUKDB4MTAwMDQpDQo+ICsjZGVmaW5lIEJETUFfQ0ZH
X1NSQ19BRERSX0hJR0hfMF9WOF9TSElGVAkJCV9NS19TSElGVF9DT05TVCgwKQ0KPiArI2Rl
ZmluZSBCRE1BX0NGR19TUkNfQUREUl9ISUdIXzBfVjhfRklFTEQJCQlfTUtfRklFTERfQ09O
U1QoMHhmZmZmZmZmZiwgQkRNQV9DRkdfU1JDX0FERFJfSElHSF8wX1Y4X1NISUZUKQ0KPiAr
DQo+ICsNCj4gKy8vIFJlZ2lzdGVyIEJETUFfQ0ZHX0RTVF9BRERSX0xPV18wDQo+ICsjZGVm
aW5lIEJETUFfQ0ZHX0RTVF9BRERSX0xPV18wCQkJX01LX0FERFJfQ09OU1QoMHgxMDAwOCkN
Cj4gKyNkZWZpbmUgQkRNQV9DRkdfRFNUX0FERFJfTE9XXzBfVjMyX1NISUZUCQkJX01LX1NI
SUZUX0NPTlNUKDUpDQo+ICsjZGVmaW5lIEJETUFfQ0ZHX0RTVF9BRERSX0xPV18wX1YzMl9G
SUVMRAkJCV9NS19GSUVMRF9DT05TVCgweDdmZmZmZmYsIEJETUFfQ0ZHX0RTVF9BRERSX0xP
V18wX1YzMl9TSElGVCkNCj4gKw0KPiArDQo+ICsvLyBSZWdpc3RlciBCRE1BX0NGR19EU1Rf
QUREUl9ISUdIXzANCj4gKyNkZWZpbmUgQkRNQV9DRkdfRFNUX0FERFJfSElHSF8wCQkJX01L
X0FERFJfQ09OU1QoMHgxMDAwYykNCj4gKyNkZWZpbmUgQkRNQV9DRkdfRFNUX0FERFJfSElH
SF8wX1Y4X1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDApDQo+ICsjZGVmaW5lIEJETUFfQ0ZH
X0RTVF9BRERSX0hJR0hfMF9WOF9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweGZmZmZmZmZm
LCBCRE1BX0NGR19EU1RfQUREUl9ISUdIXzBfVjhfU0hJRlQpDQo+ICsNCj4gKw0KPiArLy8g
UmVnaXN0ZXIgQkRNQV9DRkdfTElORV8wDQo+ICsjZGVmaW5lIEJETUFfQ0ZHX0xJTkVfMAkJ
CV9NS19BRERSX0NPTlNUKDB4MTAwMTApDQo+ICsjZGVmaW5lIEJETUFfQ0ZHX0xJTkVfMF9T
SVpFX1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDApDQo+ICsjZGVmaW5lIEJETUFfQ0ZHX0xJ
TkVfMF9TSVpFX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4MWZmZiwgQkRNQV9DRkdfTElO
RV8wX1NJWkVfU0hJRlQpDQo+ICsNCj4gKw0KPiArLy8gUmVnaXN0ZXIgQkRNQV9DRkdfQ01E
XzANCj4gKyNkZWZpbmUgQkRNQV9DRkdfQ01EXzAJCQlfTUtfQUREUl9DT05TVCgweDEwMDE0
KQ0KPiArI2RlZmluZSBCRE1BX0NGR19DTURfMF9TUkNfUkFNX1RZUEVfU0hJRlQJCQlfTUtf
U0hJRlRfQ09OU1QoMCkNCj4gKyNkZWZpbmUgQkRNQV9DRkdfQ01EXzBfU1JDX1JBTV9UWVBF
X0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4MSwgQkRNQV9DRkdfQ01EXzBfU1JDX1JBTV9U
WVBFX1NISUZUKQ0KPiArI2RlZmluZSBCRE1BX0NGR19DTURfMF9TUkNfUkFNX1RZUEVfQ1ZT
UkFNCQkJX01LX0VOVU1fQ09OU1QoMHgwKQ0KPiArI2RlZmluZSBCRE1BX0NGR19DTURfMF9T
UkNfUkFNX1RZUEVfTUMJCQlfTUtfRU5VTV9DT05TVCgweDEpDQo+ICsjZGVmaW5lIEJETUFf
Q0ZHX0NNRF8wX0RTVF9SQU1fVFlQRV9TSElGVAkJCV9NS19TSElGVF9DT05TVCgxKQ0KPiAr
I2RlZmluZSBCRE1BX0NGR19DTURfMF9EU1RfUkFNX1RZUEVfRklFTEQJCQlfTUtfRklFTERf
Q09OU1QoMHgxLCBCRE1BX0NGR19DTURfMF9EU1RfUkFNX1RZUEVfU0hJRlQpDQo+ICsjZGVm
aW5lIEJETUFfQ0ZHX0NNRF8wX0RTVF9SQU1fVFlQRV9DVlNSQU0JCQlfTUtfRU5VTV9DT05T
VCgweDApDQo+ICsjZGVmaW5lIEJETUFfQ0ZHX0NNRF8wX0RTVF9SQU1fVFlQRV9NQwkJCV9N
S19FTlVNX0NPTlNUKDB4MSkNCj4gKw0KPiArDQo+ICsvLyBSZWdpc3RlciBCRE1BX0NGR19M
SU5FX1JFUEVBVF8wDQo+ICsjZGVmaW5lIEJETUFfQ0ZHX0xJTkVfUkVQRUFUXzAJCQlfTUtf
QUREUl9DT05TVCgweDEwMDE4KQ0KPiArI2RlZmluZSBCRE1BX0NGR19MSU5FX1JFUEVBVF8w
X05VTUJFUl9TSElGVAkJCV9NS19TSElGVF9DT05TVCgwKQ0KPiArI2RlZmluZSBCRE1BX0NG
R19MSU5FX1JFUEVBVF8wX05VTUJFUl9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweGZmZmZm
ZiwgQkRNQV9DRkdfTElORV9SRVBFQVRfMF9OVU1CRVJfU0hJRlQpDQo+ICsNCj4gKw0KPiAr
Ly8gUmVnaXN0ZXIgQkRNQV9DRkdfU1JDX0xJTkVfMA0KPiArI2RlZmluZSBCRE1BX0NGR19T
UkNfTElORV8wCQkJX01LX0FERFJfQ09OU1QoMHgxMDAxYykNCj4gKyNkZWZpbmUgQkRNQV9D
RkdfU1JDX0xJTkVfMF9TVFJJREVfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoNSkNCj4gKyNk
ZWZpbmUgQkRNQV9DRkdfU1JDX0xJTkVfMF9TVFJJREVfRklFTEQJCQlfTUtfRklFTERfQ09O
U1QoMHg3ZmZmZmZmLCBCRE1BX0NGR19TUkNfTElORV8wX1NUUklERV9TSElGVCkNCj4gKw0K
PiArDQo+ICsvLyBSZWdpc3RlciBCRE1BX0NGR19EU1RfTElORV8wDQo+ICsjZGVmaW5lIEJE
TUFfQ0ZHX0RTVF9MSU5FXzAJCQlfTUtfQUREUl9DT05TVCgweDEwMDIwKQ0KPiArI2RlZmlu
ZSBCRE1BX0NGR19EU1RfTElORV8wX1NUUklERV9TSElGVAkJCV9NS19TSElGVF9DT05TVCg1
KQ0KPiArI2RlZmluZSBCRE1BX0NGR19EU1RfTElORV8wX1NUUklERV9GSUVMRAkJCV9NS19G
SUVMRF9DT05TVCgweDdmZmZmZmYsIEJETUFfQ0ZHX0RTVF9MSU5FXzBfU1RSSURFX1NISUZU
KQ0KPiArDQo+ICsNCj4gKy8vIFJlZ2lzdGVyIEJETUFfQ0ZHX1NVUkZfUkVQRUFUXzANCj4g
KyNkZWZpbmUgQkRNQV9DRkdfU1VSRl9SRVBFQVRfMAkJCV9NS19BRERSX0NPTlNUKDB4MTAw
MjQpDQo+ICsjZGVmaW5lIEJETUFfQ0ZHX1NVUkZfUkVQRUFUXzBfTlVNQkVSX1NISUZUCQkJ
X01LX1NISUZUX0NPTlNUKDApDQo+ICsjZGVmaW5lIEJETUFfQ0ZHX1NVUkZfUkVQRUFUXzBf
TlVNQkVSX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4ZmZmZmZmLCBCRE1BX0NGR19TVVJG
X1JFUEVBVF8wX05VTUJFUl9TSElGVCkNCj4gKw0KPiArDQo+ICsvLyBSZWdpc3RlciBCRE1B
X0NGR19TUkNfU1VSRl8wDQo+ICsjZGVmaW5lIEJETUFfQ0ZHX1NSQ19TVVJGXzAJCQlfTUtf
QUREUl9DT05TVCgweDEwMDI4KQ0KPiArI2RlZmluZSBCRE1BX0NGR19TUkNfU1VSRl8wX1NU
UklERV9TSElGVAkJCV9NS19TSElGVF9DT05TVCg1KQ0KPiArI2RlZmluZSBCRE1BX0NGR19T
UkNfU1VSRl8wX1NUUklERV9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweDdmZmZmZmYsIEJE
TUFfQ0ZHX1NSQ19TVVJGXzBfU1RSSURFX1NISUZUKQ0KPiArDQo+ICsNCj4gKy8vIFJlZ2lz
dGVyIEJETUFfQ0ZHX0RTVF9TVVJGXzANCj4gKyNkZWZpbmUgQkRNQV9DRkdfRFNUX1NVUkZf
MAkJCV9NS19BRERSX0NPTlNUKDB4MTAwMmMpDQo+ICsjZGVmaW5lIEJETUFfQ0ZHX0RTVF9T
VVJGXzBfU1RSSURFX1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDUpDQo+ICsjZGVmaW5lIEJE
TUFfQ0ZHX0RTVF9TVVJGXzBfU1RSSURFX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4N2Zm
ZmZmZiwgQkRNQV9DRkdfRFNUX1NVUkZfMF9TVFJJREVfU0hJRlQpDQo+ICsNCj4gKw0KPiAr
Ly8gUmVnaXN0ZXIgQkRNQV9DRkdfT1BfMA0KPiArI2RlZmluZSBCRE1BX0NGR19PUF8wCQkJ
X01LX0FERFJfQ09OU1QoMHgxMDAzMCkNCj4gKyNkZWZpbmUgQkRNQV9DRkdfT1BfMF9FTl9T
SElGVAkJCV9NS19TSElGVF9DT05TVCgwKQ0KPiArI2RlZmluZSBCRE1BX0NGR19PUF8wX0VO
X0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4MSwgQkRNQV9DRkdfT1BfMF9FTl9TSElGVCkN
Cj4gKyNkZWZpbmUgQkRNQV9DRkdfT1BfMF9FTl9ESVNBQkxFCQkJX01LX0VOVU1fQ09OU1Qo
MHgwKQ0KPiArI2RlZmluZSBCRE1BX0NGR19PUF8wX0VOX0VOQUJMRQkJCV9NS19FTlVNX0NP
TlNUKDB4MSkNCj4gKw0KPiArDQo+ICsvLyBSZWdpc3RlciBCRE1BX0NGR19MQVVOQ0gwXzAN
Cj4gKyNkZWZpbmUgQkRNQV9DRkdfTEFVTkNIMF8wCQkJX01LX0FERFJfQ09OU1QoMHgxMDAz
NCkNCj4gKyNkZWZpbmUgQkRNQV9DRkdfTEFVTkNIMF8wX0dSUDBfTEFVTkNIX1NISUZUCQkJ
X01LX1NISUZUX0NPTlNUKDApDQo+ICsjZGVmaW5lIEJETUFfQ0ZHX0xBVU5DSDBfMF9HUlAw
X0xBVU5DSF9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweDEsIEJETUFfQ0ZHX0xBVU5DSDBf
MF9HUlAwX0xBVU5DSF9TSElGVCkNCj4gKyNkZWZpbmUgQkRNQV9DRkdfTEFVTkNIMF8wX0dS
UDBfTEFVTkNIX05PCQkJX01LX0VOVU1fQ09OU1QoMHgwKQ0KPiArI2RlZmluZSBCRE1BX0NG
R19MQVVOQ0gwXzBfR1JQMF9MQVVOQ0hfWUVTCQkJX01LX0VOVU1fQ09OU1QoMHgxKQ0KPiAr
DQo+ICsNCj4gKy8vIFJlZ2lzdGVyIEJETUFfQ0ZHX0xBVU5DSDFfMA0KPiArI2RlZmluZSBC
RE1BX0NGR19MQVVOQ0gxXzAJCQlfTUtfQUREUl9DT05TVCgweDEwMDM4KQ0KPiArI2RlZmlu
ZSBCRE1BX0NGR19MQVVOQ0gxXzBfR1JQMV9MQVVOQ0hfU0hJRlQJCQlfTUtfU0hJRlRfQ09O
U1QoMCkNCj4gKyNkZWZpbmUgQkRNQV9DRkdfTEFVTkNIMV8wX0dSUDFfTEFVTkNIX0ZJRUxE
CQkJX01LX0ZJRUxEX0NPTlNUKDB4MSwgQkRNQV9DRkdfTEFVTkNIMV8wX0dSUDFfTEFVTkNI
X1NISUZUKQ0KPiArI2RlZmluZSBCRE1BX0NGR19MQVVOQ0gxXzBfR1JQMV9MQVVOQ0hfTk8J
CQlfTUtfRU5VTV9DT05TVCgweDApDQo+ICsjZGVmaW5lIEJETUFfQ0ZHX0xBVU5DSDFfMF9H
UlAxX0xBVU5DSF9ZRVMJCQlfTUtfRU5VTV9DT05TVCgweDEpDQo+ICsNCj4gKw0KPiArLy8g
UmVnaXN0ZXIgQkRNQV9DRkdfU1RBVFVTXzANCj4gKyNkZWZpbmUgQkRNQV9DRkdfU1RBVFVT
XzAJCQlfTUtfQUREUl9DT05TVCgweDEwMDNjKQ0KPiArI2RlZmluZSBCRE1BX0NGR19TVEFU
VVNfMF9TVEFMTF9DT1VOVF9FTl9TSElGVAkJCV9NS19TSElGVF9DT05TVCgwKQ0KPiArI2Rl
ZmluZSBCRE1BX0NGR19TVEFUVVNfMF9TVEFMTF9DT1VOVF9FTl9GSUVMRAkJCV9NS19GSUVM
RF9DT05TVCgweDEsIEJETUFfQ0ZHX1NUQVRVU18wX1NUQUxMX0NPVU5UX0VOX1NISUZUKQ0K
PiArI2RlZmluZSBCRE1BX0NGR19TVEFUVVNfMF9TVEFMTF9DT1VOVF9FTl9OTwkJCV9NS19F
TlVNX0NPTlNUKDB4MCkNCj4gKyNkZWZpbmUgQkRNQV9DRkdfU1RBVFVTXzBfU1RBTExfQ09V
TlRfRU5fWUVTCQkJX01LX0VOVU1fQ09OU1QoMHgxKQ0KPiArDQo+ICsNCj4gKy8vIFJlZ2lz
dGVyIEJETUFfU1RBVFVTXzANCj4gKyNkZWZpbmUgQkRNQV9TVEFUVVNfMAkJCV9NS19BRERS
X0NPTlNUKDB4MTAwNDApDQo+ICsjZGVmaW5lIEJETUFfU1RBVFVTXzBfRlJFRV9TTE9UX1NI
SUZUCQkJX01LX1NISUZUX0NPTlNUKDApDQo+ICsjZGVmaW5lIEJETUFfU1RBVFVTXzBfRlJF
RV9TTE9UX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4ZmYsIEJETUFfU1RBVFVTXzBfRlJF
RV9TTE9UX1NISUZUKQ0KPiArI2RlZmluZSBCRE1BX1NUQVRVU18wX0lETEVfU0hJRlQJCQlf
TUtfU0hJRlRfQ09OU1QoOCkNCj4gKyNkZWZpbmUgQkRNQV9TVEFUVVNfMF9JRExFX0ZJRUxE
CQkJX01LX0ZJRUxEX0NPTlNUKDB4MSwgQkRNQV9TVEFUVVNfMF9JRExFX1NISUZUKQ0KPiAr
I2RlZmluZSBCRE1BX1NUQVRVU18wX0lETEVfTk8JCQlfTUtfRU5VTV9DT05TVCgweDApDQo+
ICsjZGVmaW5lIEJETUFfU1RBVFVTXzBfSURMRV9ZRVMJCQlfTUtfRU5VTV9DT05TVCgweDEp
DQo+ICsjZGVmaW5lIEJETUFfU1RBVFVTXzBfR1JQMF9CVVNZX1NISUZUCQkJX01LX1NISUZU
X0NPTlNUKDkpDQo+ICsjZGVmaW5lIEJETUFfU1RBVFVTXzBfR1JQMF9CVVNZX0ZJRUxECQkJ
X01LX0ZJRUxEX0NPTlNUKDB4MSwgQkRNQV9TVEFUVVNfMF9HUlAwX0JVU1lfU0hJRlQpDQo+
ICsjZGVmaW5lIEJETUFfU1RBVFVTXzBfR1JQMF9CVVNZX05PCQkJX01LX0VOVU1fQ09OU1Qo
MHgwKQ0KPiArI2RlZmluZSBCRE1BX1NUQVRVU18wX0dSUDBfQlVTWV9ZRVMJCQlfTUtfRU5V
TV9DT05TVCgweDEpDQo+ICsjZGVmaW5lIEJETUFfU1RBVFVTXzBfR1JQMV9CVVNZX1NISUZU
CQkJX01LX1NISUZUX0NPTlNUKDEwKQ0KPiArI2RlZmluZSBCRE1BX1NUQVRVU18wX0dSUDFf
QlVTWV9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweDEsIEJETUFfU1RBVFVTXzBfR1JQMV9C
VVNZX1NISUZUKQ0KPiArI2RlZmluZSBCRE1BX1NUQVRVU18wX0dSUDFfQlVTWV9OTwkJCV9N
S19FTlVNX0NPTlNUKDB4MCkNCj4gKyNkZWZpbmUgQkRNQV9TVEFUVVNfMF9HUlAxX0JVU1lf
WUVTCQkJX01LX0VOVU1fQ09OU1QoMHgxKQ0KPiArDQo+ICsNCj4gKy8vIFJlZ2lzdGVyIEJE
TUFfU1RBVFVTX0dSUDBfUkVBRF9TVEFMTF8wDQo+ICsjZGVmaW5lIEJETUFfU1RBVFVTX0dS
UDBfUkVBRF9TVEFMTF8wCQkJX01LX0FERFJfQ09OU1QoMHgxMDA0NCkNCj4gKyNkZWZpbmUg
QkRNQV9TVEFUVVNfR1JQMF9SRUFEX1NUQUxMXzBfQ09VTlRfU0hJRlQJCQlfTUtfU0hJRlRf
Q09OU1QoMCkNCj4gKyNkZWZpbmUgQkRNQV9TVEFUVVNfR1JQMF9SRUFEX1NUQUxMXzBfQ09V
TlRfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHhmZmZmZmZmZiwgQkRNQV9TVEFUVVNfR1JQ
MF9SRUFEX1NUQUxMXzBfQ09VTlRfU0hJRlQpDQo+ICsNCj4gKw0KPiArLy8gUmVnaXN0ZXIg
QkRNQV9TVEFUVVNfR1JQMF9XUklURV9TVEFMTF8wDQo+ICsjZGVmaW5lIEJETUFfU1RBVFVT
X0dSUDBfV1JJVEVfU1RBTExfMAkJCV9NS19BRERSX0NPTlNUKDB4MTAwNDgpDQo+ICsjZGVm
aW5lIEJETUFfU1RBVFVTX0dSUDBfV1JJVEVfU1RBTExfMF9DT1VOVF9TSElGVAkJCV9NS19T
SElGVF9DT05TVCgwKQ0KPiArI2RlZmluZSBCRE1BX1NUQVRVU19HUlAwX1dSSVRFX1NUQUxM
XzBfQ09VTlRfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHhmZmZmZmZmZiwgQkRNQV9TVEFU
VVNfR1JQMF9XUklURV9TVEFMTF8wX0NPVU5UX1NISUZUKQ0KPiArDQo+ICsNCj4gKy8vIFJl
Z2lzdGVyIEJETUFfU1RBVFVTX0dSUDFfUkVBRF9TVEFMTF8wDQo+ICsjZGVmaW5lIEJETUFf
U1RBVFVTX0dSUDFfUkVBRF9TVEFMTF8wCQkJX01LX0FERFJfQ09OU1QoMHgxMDA0YykNCj4g
KyNkZWZpbmUgQkRNQV9TVEFUVVNfR1JQMV9SRUFEX1NUQUxMXzBfQ09VTlRfU0hJRlQJCQlf
TUtfU0hJRlRfQ09OU1QoMCkNCj4gKyNkZWZpbmUgQkRNQV9TVEFUVVNfR1JQMV9SRUFEX1NU
QUxMXzBfQ09VTlRfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHhmZmZmZmZmZiwgQkRNQV9T
VEFUVVNfR1JQMV9SRUFEX1NUQUxMXzBfQ09VTlRfU0hJRlQpDQo+ICsNCj4gKw0KPiArLy8g
UmVnaXN0ZXIgQkRNQV9TVEFUVVNfR1JQMV9XUklURV9TVEFMTF8wDQo+ICsjZGVmaW5lIEJE
TUFfU1RBVFVTX0dSUDFfV1JJVEVfU1RBTExfMAkJCV9NS19BRERSX0NPTlNUKDB4MTAwNTAp
DQo+ICsjZGVmaW5lIEJETUFfU1RBVFVTX0dSUDFfV1JJVEVfU1RBTExfMF9DT1VOVF9TSElG
VAkJCV9NS19TSElGVF9DT05TVCgwKQ0KPiArI2RlZmluZSBCRE1BX1NUQVRVU19HUlAxX1dS
SVRFX1NUQUxMXzBfQ09VTlRfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHhmZmZmZmZmZiwg
QkRNQV9TVEFUVVNfR1JQMV9XUklURV9TVEFMTF8wX0NPVU5UX1NISUZUKQ0KPiArDQo+ICsN
Cj4gKw0KPiArLy8gVG8gc2F0aXNmeSB2YXJpb3VzIGNvbXBpbGVycyBhbmQgcGxhdGZvcm1z
LA0KPiArLy8gd2UgbGV0IHVzZXJzIGNvbnRyb2wgdGhlIHR5cGVzIGFuZCBzeW50YXggb2Yg
Y2VydGFpbiBjb25zdGFudHMsIHVzaW5nIG1hY3Jvcy4NCj4gKyNpZm5kZWYgX01LX1NISUZU
X0NPTlNUDQo+ICsgICNkZWZpbmUgX01LX1NISUZUX0NPTlNUKF9jb25zdGFudF8pIF9jb25z
dGFudF8NCj4gKyNlbmRpZg0KPiArI2lmbmRlZiBfTUtfTUFTS19DT05TVA0KPiArICAjZGVm
aW5lIF9NS19NQVNLX0NPTlNUKF9jb25zdGFudF8pIF9jb25zdGFudF8NCj4gKyNlbmRpZg0K
PiArI2lmbmRlZiBfTUtfRU5VTV9DT05TVA0KPiArICAjZGVmaW5lIF9NS19FTlVNX0NPTlNU
KF9jb25zdGFudF8pIChfY29uc3RhbnRfICMjIFVMKQ0KPiArI2VuZGlmDQo+ICsjaWZuZGVm
IF9NS19BRERSX0NPTlNUDQo+ICsgICNkZWZpbmUgX01LX0FERFJfQ09OU1QoX2NvbnN0YW50
XykgX2NvbnN0YW50Xw0KPiArI2VuZGlmDQo+ICsjaWZuZGVmIF9NS19GSUVMRF9DT05TVA0K
PiArICAjZGVmaW5lIF9NS19GSUVMRF9DT05TVChfbWFza18sIF9zaGlmdF8pIChfTUtfTUFT
S19DT05TVChfbWFza18pIDw8IF9NS19TSElGVF9DT05TVChfc2hpZnRfKSkNCj4gKyNlbmRp
Zg0KPiArDQo+ICsNCj4gKy8vIFJlZ2lzdGVyIFJCS19TX1NUQVRVU18wDQo+ICsjZGVmaW5l
IFJCS19TX1NUQVRVU18wCQkJX01LX0FERFJfQ09OU1QoMHgxMTAwMCkNCj4gKyNkZWZpbmUg
UkJLX1NfU1RBVFVTXzBfU1RBVFVTXzBfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMCkNCj4g
KyNkZWZpbmUgUkJLX1NfU1RBVFVTXzBfU1RBVFVTXzBfRklFTEQJCQlfTUtfRklFTERfQ09O
U1QoMHgzLCBSQktfU19TVEFUVVNfMF9TVEFUVVNfMF9TSElGVCkNCj4gKyNkZWZpbmUgUkJL
X1NfU1RBVFVTXzBfU1RBVFVTXzBfSURMRQkJCV9NS19FTlVNX0NPTlNUKDB4MCkNCj4gKyNk
ZWZpbmUgUkJLX1NfU1RBVFVTXzBfU1RBVFVTXzBfUlVOTklORwkJCV9NS19FTlVNX0NPTlNU
KDB4MSkNCj4gKyNkZWZpbmUgUkJLX1NfU1RBVFVTXzBfU1RBVFVTXzBfUEVORElORwkJCV9N
S19FTlVNX0NPTlNUKDB4MikNCj4gKyNkZWZpbmUgUkJLX1NfU1RBVFVTXzBfU1RBVFVTXzFf
U0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMTYpDQo+ICsjZGVmaW5lIFJCS19TX1NUQVRVU18w
X1NUQVRVU18xX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4MywgUkJLX1NfU1RBVFVTXzBf
U1RBVFVTXzFfU0hJRlQpDQo+ICsjZGVmaW5lIFJCS19TX1NUQVRVU18wX1NUQVRVU18xX0lE
TEUJCQlfTUtfRU5VTV9DT05TVCgweDApDQo+ICsjZGVmaW5lIFJCS19TX1NUQVRVU18wX1NU
QVRVU18xX1JVTk5JTkcJCQlfTUtfRU5VTV9DT05TVCgweDEpDQo+ICsjZGVmaW5lIFJCS19T
X1NUQVRVU18wX1NUQVRVU18xX1BFTkRJTkcJCQlfTUtfRU5VTV9DT05TVCgweDIpDQo+ICsN
Cj4gKw0KPiArLy8gUmVnaXN0ZXIgUkJLX1NfUE9JTlRFUl8wDQo+ICsjZGVmaW5lIFJCS19T
X1BPSU5URVJfMAkJCV9NS19BRERSX0NPTlNUKDB4MTEwMDQpDQo+ICsjZGVmaW5lIFJCS19T
X1BPSU5URVJfMF9QUk9EVUNFUl9TSElGVAkJCV9NS19TSElGVF9DT05TVCgwKQ0KPiArI2Rl
ZmluZSBSQktfU19QT0lOVEVSXzBfUFJPRFVDRVJfRklFTEQJCQlfTUtfRklFTERfQ09OU1Qo
MHgxLCBSQktfU19QT0lOVEVSXzBfUFJPRFVDRVJfU0hJRlQpDQo+ICsjZGVmaW5lIFJCS19T
X1BPSU5URVJfMF9QUk9EVUNFUl9HUk9VUF8wCQkJX01LX0VOVU1fQ09OU1QoMHgwKQ0KPiAr
I2RlZmluZSBSQktfU19QT0lOVEVSXzBfUFJPRFVDRVJfR1JPVVBfMQkJCV9NS19FTlVNX0NP
TlNUKDB4MSkNCj4gKyNkZWZpbmUgUkJLX1NfUE9JTlRFUl8wX0NPTlNVTUVSX1NISUZUCQkJ
X01LX1NISUZUX0NPTlNUKDE2KQ0KPiArI2RlZmluZSBSQktfU19QT0lOVEVSXzBfQ09OU1VN
RVJfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHgxLCBSQktfU19QT0lOVEVSXzBfQ09OU1VN
RVJfU0hJRlQpDQo+ICsjZGVmaW5lIFJCS19TX1BPSU5URVJfMF9DT05TVU1FUl9HUk9VUF8w
CQkJX01LX0VOVU1fQ09OU1QoMHgwKQ0KPiArI2RlZmluZSBSQktfU19QT0lOVEVSXzBfQ09O
U1VNRVJfR1JPVVBfMQkJCV9NS19FTlVNX0NPTlNUKDB4MSkNCj4gKw0KPiArDQo+ICsvLyBS
ZWdpc3RlciBSQktfRF9PUF9FTkFCTEVfMA0KPiArI2RlZmluZSBSQktfRF9PUF9FTkFCTEVf
MAkJCV9NS19BRERSX0NPTlNUKDB4MTEwMDgpDQo+ICsjZGVmaW5lIFJCS19EX09QX0VOQUJM
RV8wX09QX0VOX1NISUZUCQkJX01LX1NISUZUX0NPTlNUKDApDQo+ICsjZGVmaW5lIFJCS19E
X09QX0VOQUJMRV8wX09QX0VOX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4MSwgUkJLX0Rf
T1BfRU5BQkxFXzBfT1BfRU5fU0hJRlQpDQo+ICsjZGVmaW5lIFJCS19EX09QX0VOQUJMRV8w
X09QX0VOX0RJU0FCTEUJCQlfTUtfRU5VTV9DT05TVCgweDApDQo+ICsjZGVmaW5lIFJCS19E
X09QX0VOQUJMRV8wX09QX0VOX0VOQUJMRQkJCV9NS19FTlVNX0NPTlNUKDB4MSkNCj4gKw0K
PiArDQo+ICsvLyBSZWdpc3RlciBSQktfRF9NSVNDX0NGR18wDQo+ICsjZGVmaW5lIFJCS19E
X01JU0NfQ0ZHXzAJCQlfTUtfQUREUl9DT05TVCgweDExMDBjKQ0KPiArI2RlZmluZSBSQktf
RF9NSVNDX0NGR18wX1JVQklLX01PREVfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMCkNCj4g
KyNkZWZpbmUgUkJLX0RfTUlTQ19DRkdfMF9SVUJJS19NT0RFX0ZJRUxECQkJX01LX0ZJRUxE
X0NPTlNUKDB4MywgUkJLX0RfTUlTQ19DRkdfMF9SVUJJS19NT0RFX1NISUZUKQ0KPiArI2Rl
ZmluZSBSQktfRF9NSVNDX0NGR18wX1JVQklLX01PREVfQ09OVFJBQ1QJCQlfTUtfRU5VTV9D
T05TVCgweDApDQo+ICsjZGVmaW5lIFJCS19EX01JU0NfQ0ZHXzBfUlVCSUtfTU9ERV9TUExJ
VAkJCV9NS19FTlVNX0NPTlNUKDB4MSkNCj4gKyNkZWZpbmUgUkJLX0RfTUlTQ19DRkdfMF9S
VUJJS19NT0RFX01FUkdFCQkJX01LX0VOVU1fQ09OU1QoMHgyKQ0KPiArI2RlZmluZSBSQktf
RF9NSVNDX0NGR18wX0lOX1BSRUNJU0lPTl9TSElGVAkJCV9NS19TSElGVF9DT05TVCg4KQ0K
PiArI2RlZmluZSBSQktfRF9NSVNDX0NGR18wX0lOX1BSRUNJU0lPTl9GSUVMRAkJCV9NS19G
SUVMRF9DT05TVCgweDMsIFJCS19EX01JU0NfQ0ZHXzBfSU5fUFJFQ0lTSU9OX1NISUZUKQ0K
PiArI2RlZmluZSBSQktfRF9NSVNDX0NGR18wX0lOX1BSRUNJU0lPTl9JTlQ4CQkJX01LX0VO
VU1fQ09OU1QoMHgwKQ0KPiArI2RlZmluZSBSQktfRF9NSVNDX0NGR18wX0lOX1BSRUNJU0lP
Tl9JTlQxNgkJCV9NS19FTlVNX0NPTlNUKDB4MSkNCj4gKyNkZWZpbmUgUkJLX0RfTUlTQ19D
RkdfMF9JTl9QUkVDSVNJT05fRlAxNgkJCV9NS19FTlVNX0NPTlNUKDB4MikNCj4gKw0KPiAr
DQo+ICsvLyBSZWdpc3RlciBSQktfRF9EQUlOX1JBTV9UWVBFXzANCj4gKyNkZWZpbmUgUkJL
X0RfREFJTl9SQU1fVFlQRV8wCQkJX01LX0FERFJfQ09OU1QoMHgxMTAxMCkNCj4gKyNkZWZp
bmUgUkJLX0RfREFJTl9SQU1fVFlQRV8wX0RBVEFJTl9SQU1fVFlQRV9TSElGVAkJCV9NS19T
SElGVF9DT05TVCgwKQ0KPiArI2RlZmluZSBSQktfRF9EQUlOX1JBTV9UWVBFXzBfREFUQUlO
X1JBTV9UWVBFX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4MSwgUkJLX0RfREFJTl9SQU1f
VFlQRV8wX0RBVEFJTl9SQU1fVFlQRV9TSElGVCkNCj4gKyNkZWZpbmUgUkJLX0RfREFJTl9S
QU1fVFlQRV8wX0RBVEFJTl9SQU1fVFlQRV9DVklGCQkJX01LX0VOVU1fQ09OU1QoMHgwKQ0K
PiArI2RlZmluZSBSQktfRF9EQUlOX1JBTV9UWVBFXzBfREFUQUlOX1JBTV9UWVBFX01DSUYJ
CQlfTUtfRU5VTV9DT05TVCgweDEpDQo+ICsNCj4gKw0KPiArLy8gUmVnaXN0ZXIgUkJLX0Rf
REFUQUlOX1NJWkVfMF8wDQo+ICsjZGVmaW5lIFJCS19EX0RBVEFJTl9TSVpFXzBfMAkJCV9N
S19BRERSX0NPTlNUKDB4MTEwMTQpDQo+ICsjZGVmaW5lIFJCS19EX0RBVEFJTl9TSVpFXzBf
MF9EQVRBSU5fV0lEVEhfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMCkNCj4gKyNkZWZpbmUg
UkJLX0RfREFUQUlOX1NJWkVfMF8wX0RBVEFJTl9XSURUSF9GSUVMRAkJCV9NS19GSUVMRF9D
T05TVCgweDFmZmYsIFJCS19EX0RBVEFJTl9TSVpFXzBfMF9EQVRBSU5fV0lEVEhfU0hJRlQp
DQo+ICsjZGVmaW5lIFJCS19EX0RBVEFJTl9TSVpFXzBfMF9EQVRBSU5fSEVJR0hUX1NISUZU
CQkJX01LX1NISUZUX0NPTlNUKDE2KQ0KPiArI2RlZmluZSBSQktfRF9EQVRBSU5fU0laRV8w
XzBfREFUQUlOX0hFSUdIVF9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweDFmZmYsIFJCS19E
X0RBVEFJTl9TSVpFXzBfMF9EQVRBSU5fSEVJR0hUX1NISUZUKQ0KPiArDQo+ICsNCj4gKy8v
IFJlZ2lzdGVyIFJCS19EX0RBVEFJTl9TSVpFXzFfMA0KPiArI2RlZmluZSBSQktfRF9EQVRB
SU5fU0laRV8xXzAJCQlfTUtfQUREUl9DT05TVCgweDExMDE4KQ0KPiArI2RlZmluZSBSQktf
RF9EQVRBSU5fU0laRV8xXzBfREFUQUlOX0NIQU5ORUxfU0hJRlQJCQlfTUtfU0hJRlRfQ09O
U1QoMCkNCj4gKyNkZWZpbmUgUkJLX0RfREFUQUlOX1NJWkVfMV8wX0RBVEFJTl9DSEFOTkVM
X0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4MWZmZiwgUkJLX0RfREFUQUlOX1NJWkVfMV8w
X0RBVEFJTl9DSEFOTkVMX1NISUZUKQ0KPiArDQo+ICsNCj4gKy8vIFJlZ2lzdGVyIFJCS19E
X0RBSU5fQUREUl9ISUdIXzANCj4gKyNkZWZpbmUgUkJLX0RfREFJTl9BRERSX0hJR0hfMAkJ
CV9NS19BRERSX0NPTlNUKDB4MTEwMWMpDQo+ICsjZGVmaW5lIFJCS19EX0RBSU5fQUREUl9I
SUdIXzBfREFJTl9BRERSX0hJR0hfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMCkNCj4gKyNk
ZWZpbmUgUkJLX0RfREFJTl9BRERSX0hJR0hfMF9EQUlOX0FERFJfSElHSF9GSUVMRAkJCV9N
S19GSUVMRF9DT05TVCgweGZmZmZmZmZmLCBSQktfRF9EQUlOX0FERFJfSElHSF8wX0RBSU5f
QUREUl9ISUdIX1NISUZUKQ0KPiArDQo+ICsNCj4gKy8vIFJlZ2lzdGVyIFJCS19EX0RBSU5f
QUREUl9MT1dfMA0KPiArI2RlZmluZSBSQktfRF9EQUlOX0FERFJfTE9XXzAJCQlfTUtfQURE
Ul9DT05TVCgweDExMDIwKQ0KPiArI2RlZmluZSBSQktfRF9EQUlOX0FERFJfTE9XXzBfREFJ
Tl9BRERSX0xPV19TSElGVAkJCV9NS19TSElGVF9DT05TVCg1KQ0KPiArI2RlZmluZSBSQktf
RF9EQUlOX0FERFJfTE9XXzBfREFJTl9BRERSX0xPV19GSUVMRAkJCV9NS19GSUVMRF9DT05T
VCgweDdmZmZmZmYsIFJCS19EX0RBSU5fQUREUl9MT1dfMF9EQUlOX0FERFJfTE9XX1NISUZU
KQ0KPiArDQo+ICsNCj4gKy8vIFJlZ2lzdGVyIFJCS19EX0RBSU5fTElORV9TVFJJREVfMA0K
PiArI2RlZmluZSBSQktfRF9EQUlOX0xJTkVfU1RSSURFXzAJCQlfTUtfQUREUl9DT05TVCgw
eDExMDI0KQ0KPiArI2RlZmluZSBSQktfRF9EQUlOX0xJTkVfU1RSSURFXzBfREFJTl9MSU5F
X1NUUklERV9TSElGVAkJCV9NS19TSElGVF9DT05TVCg1KQ0KPiArI2RlZmluZSBSQktfRF9E
QUlOX0xJTkVfU1RSSURFXzBfREFJTl9MSU5FX1NUUklERV9GSUVMRAkJCV9NS19GSUVMRF9D
T05TVCgweDdmZmZmZmYsIFJCS19EX0RBSU5fTElORV9TVFJJREVfMF9EQUlOX0xJTkVfU1RS
SURFX1NISUZUKQ0KPiArDQo+ICsNCj4gKy8vIFJlZ2lzdGVyIFJCS19EX0RBSU5fU1VSRl9T
VFJJREVfMA0KPiArI2RlZmluZSBSQktfRF9EQUlOX1NVUkZfU1RSSURFXzAJCQlfTUtfQURE
Ul9DT05TVCgweDExMDI4KQ0KPiArI2RlZmluZSBSQktfRF9EQUlOX1NVUkZfU1RSSURFXzBf
REFJTl9TVVJGX1NUUklERV9TSElGVAkJCV9NS19TSElGVF9DT05TVCg1KQ0KPiArI2RlZmlu
ZSBSQktfRF9EQUlOX1NVUkZfU1RSSURFXzBfREFJTl9TVVJGX1NUUklERV9GSUVMRAkJCV9N
S19GSUVMRF9DT05TVCgweDdmZmZmZmYsIFJCS19EX0RBSU5fU1VSRl9TVFJJREVfMF9EQUlO
X1NVUkZfU1RSSURFX1NISUZUKQ0KPiArDQo+ICsNCj4gKy8vIFJlZ2lzdGVyIFJCS19EX0RB
SU5fUExBTkFSX1NUUklERV8wDQo+ICsjZGVmaW5lIFJCS19EX0RBSU5fUExBTkFSX1NUUklE
RV8wCQkJX01LX0FERFJfQ09OU1QoMHgxMTAyYykNCj4gKyNkZWZpbmUgUkJLX0RfREFJTl9Q
TEFOQVJfU1RSSURFXzBfREFJTl9QTEFOQVJfU1RSSURFX1NISUZUCQkJX01LX1NISUZUX0NP
TlNUKDUpDQo+ICsjZGVmaW5lIFJCS19EX0RBSU5fUExBTkFSX1NUUklERV8wX0RBSU5fUExB
TkFSX1NUUklERV9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweDdmZmZmZmYsIFJCS19EX0RB
SU5fUExBTkFSX1NUUklERV8wX0RBSU5fUExBTkFSX1NUUklERV9TSElGVCkNCj4gKw0KPiAr
DQo+ICsvLyBSZWdpc3RlciBSQktfRF9EQU9VVF9SQU1fVFlQRV8wDQo+ICsjZGVmaW5lIFJC
S19EX0RBT1VUX1JBTV9UWVBFXzAJCQlfTUtfQUREUl9DT05TVCgweDExMDMwKQ0KPiArI2Rl
ZmluZSBSQktfRF9EQU9VVF9SQU1fVFlQRV8wX0RBVEFPVVRfUkFNX1RZUEVfU0hJRlQJCQlf
TUtfU0hJRlRfQ09OU1QoMCkNCj4gKyNkZWZpbmUgUkJLX0RfREFPVVRfUkFNX1RZUEVfMF9E
QVRBT1VUX1JBTV9UWVBFX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4MSwgUkJLX0RfREFP
VVRfUkFNX1RZUEVfMF9EQVRBT1VUX1JBTV9UWVBFX1NISUZUKQ0KPiArI2RlZmluZSBSQktf
RF9EQU9VVF9SQU1fVFlQRV8wX0RBVEFPVVRfUkFNX1RZUEVfQ1ZJRgkJCV9NS19FTlVNX0NP
TlNUKDB4MCkNCj4gKyNkZWZpbmUgUkJLX0RfREFPVVRfUkFNX1RZUEVfMF9EQVRBT1VUX1JB
TV9UWVBFX01DSUYJCQlfTUtfRU5VTV9DT05TVCgweDEpDQo+ICsNCj4gKw0KPiArLy8gUmVn
aXN0ZXIgUkJLX0RfREFUQU9VVF9TSVpFXzFfMA0KPiArI2RlZmluZSBSQktfRF9EQVRBT1VU
X1NJWkVfMV8wCQkJX01LX0FERFJfQ09OU1QoMHgxMTAzNCkNCj4gKyNkZWZpbmUgUkJLX0Rf
REFUQU9VVF9TSVpFXzFfMF9EQVRBT1VUX0NIQU5ORUxfU0hJRlQJCQlfTUtfU0hJRlRfQ09O
U1QoMCkNCj4gKyNkZWZpbmUgUkJLX0RfREFUQU9VVF9TSVpFXzFfMF9EQVRBT1VUX0NIQU5O
RUxfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHgxZmZmLCBSQktfRF9EQVRBT1VUX1NJWkVf
MV8wX0RBVEFPVVRfQ0hBTk5FTF9TSElGVCkNCj4gKw0KPiArDQo+ICsvLyBSZWdpc3RlciBS
QktfRF9EQU9VVF9BRERSX0hJR0hfMA0KPiArI2RlZmluZSBSQktfRF9EQU9VVF9BRERSX0hJ
R0hfMAkJCV9NS19BRERSX0NPTlNUKDB4MTEwMzgpDQo+ICsjZGVmaW5lIFJCS19EX0RBT1VU
X0FERFJfSElHSF8wX0RBT1VUX0FERFJfSElHSF9TSElGVAkJCV9NS19TSElGVF9DT05TVCgw
KQ0KPiArI2RlZmluZSBSQktfRF9EQU9VVF9BRERSX0hJR0hfMF9EQU9VVF9BRERSX0hJR0hf
RklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHhmZmZmZmZmZiwgUkJLX0RfREFPVVRfQUREUl9I
SUdIXzBfREFPVVRfQUREUl9ISUdIX1NISUZUKQ0KPiArDQo+ICsNCj4gKy8vIFJlZ2lzdGVy
IFJCS19EX0RBT1VUX0FERFJfTE9XXzANCj4gKyNkZWZpbmUgUkJLX0RfREFPVVRfQUREUl9M
T1dfMAkJCV9NS19BRERSX0NPTlNUKDB4MTEwM2MpDQo+ICsjZGVmaW5lIFJCS19EX0RBT1VU
X0FERFJfTE9XXzBfREFPVVRfQUREUl9MT1dfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoNSkN
Cj4gKyNkZWZpbmUgUkJLX0RfREFPVVRfQUREUl9MT1dfMF9EQU9VVF9BRERSX0xPV19GSUVM
RAkJCV9NS19GSUVMRF9DT05TVCgweDdmZmZmZmYsIFJCS19EX0RBT1VUX0FERFJfTE9XXzBf
REFPVVRfQUREUl9MT1dfU0hJRlQpDQo+ICsNCj4gKw0KPiArLy8gUmVnaXN0ZXIgUkJLX0Rf
REFPVVRfTElORV9TVFJJREVfMA0KPiArI2RlZmluZSBSQktfRF9EQU9VVF9MSU5FX1NUUklE
RV8wCQkJX01LX0FERFJfQ09OU1QoMHgxMTA0MCkNCj4gKyNkZWZpbmUgUkJLX0RfREFPVVRf
TElORV9TVFJJREVfMF9EQU9VVF9MSU5FX1NUUklERV9TSElGVAkJCV9NS19TSElGVF9DT05T
VCg1KQ0KPiArI2RlZmluZSBSQktfRF9EQU9VVF9MSU5FX1NUUklERV8wX0RBT1VUX0xJTkVf
U1RSSURFX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4N2ZmZmZmZiwgUkJLX0RfREFPVVRf
TElORV9TVFJJREVfMF9EQU9VVF9MSU5FX1NUUklERV9TSElGVCkNCj4gKw0KPiArDQo+ICsv
LyBSZWdpc3RlciBSQktfRF9DT05UUkFDVF9TVFJJREVfMF8wDQo+ICsjZGVmaW5lIFJCS19E
X0NPTlRSQUNUX1NUUklERV8wXzAJCQlfTUtfQUREUl9DT05TVCgweDExMDQ0KQ0KPiArI2Rl
ZmluZSBSQktfRF9DT05UUkFDVF9TVFJJREVfMF8wX0NPTlRSQUNUX1NUUklERV8wX1NISUZU
CQkJX01LX1NISUZUX0NPTlNUKDUpDQo+ICsjZGVmaW5lIFJCS19EX0NPTlRSQUNUX1NUUklE
RV8wXzBfQ09OVFJBQ1RfU1RSSURFXzBfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHg3ZmZm
ZmZmLCBSQktfRF9DT05UUkFDVF9TVFJJREVfMF8wX0NPTlRSQUNUX1NUUklERV8wX1NISUZU
KQ0KPiArDQo+ICsNCj4gKy8vIFJlZ2lzdGVyIFJCS19EX0NPTlRSQUNUX1NUUklERV8xXzAN
Cj4gKyNkZWZpbmUgUkJLX0RfQ09OVFJBQ1RfU1RSSURFXzFfMAkJCV9NS19BRERSX0NPTlNU
KDB4MTEwNDgpDQo+ICsjZGVmaW5lIFJCS19EX0NPTlRSQUNUX1NUUklERV8xXzBfQ09OVFJB
Q1RfU1RSSURFXzFfU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoNSkNCj4gKyNkZWZpbmUgUkJL
X0RfQ09OVFJBQ1RfU1RSSURFXzFfMF9DT05UUkFDVF9TVFJJREVfMV9GSUVMRAkJCV9NS19G
SUVMRF9DT05TVCgweDdmZmZmZmYsIFJCS19EX0NPTlRSQUNUX1NUUklERV8xXzBfQ09OVFJB
Q1RfU1RSSURFXzFfU0hJRlQpDQo+ICsNCj4gKw0KPiArLy8gUmVnaXN0ZXIgUkJLX0RfREFP
VVRfU1VSRl9TVFJJREVfMA0KPiArI2RlZmluZSBSQktfRF9EQU9VVF9TVVJGX1NUUklERV8w
CQkJX01LX0FERFJfQ09OU1QoMHgxMTA0YykNCj4gKyNkZWZpbmUgUkJLX0RfREFPVVRfU1VS
Rl9TVFJJREVfMF9EQU9VVF9TVVJGX1NUUklERV9TSElGVAkJCV9NS19TSElGVF9DT05TVCg1
KQ0KPiArI2RlZmluZSBSQktfRF9EQU9VVF9TVVJGX1NUUklERV8wX0RBT1VUX1NVUkZfU1RS
SURFX0ZJRUxECQkJX01LX0ZJRUxEX0NPTlNUKDB4N2ZmZmZmZiwgUkJLX0RfREFPVVRfU1VS
Rl9TVFJJREVfMF9EQU9VVF9TVVJGX1NUUklERV9TSElGVCkNCj4gKw0KPiArDQo+ICsvLyBS
ZWdpc3RlciBSQktfRF9EQU9VVF9QTEFOQVJfU1RSSURFXzANCj4gKyNkZWZpbmUgUkJLX0Rf
REFPVVRfUExBTkFSX1NUUklERV8wCQkJX01LX0FERFJfQ09OU1QoMHgxMTA1MCkNCj4gKyNk
ZWZpbmUgUkJLX0RfREFPVVRfUExBTkFSX1NUUklERV8wX0RBT1VUX1BMQU5BUl9TVFJJREVf
U0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoNSkNCj4gKyNkZWZpbmUgUkJLX0RfREFPVVRfUExB
TkFSX1NUUklERV8wX0RBT1VUX1BMQU5BUl9TVFJJREVfRklFTEQJCQlfTUtfRklFTERfQ09O
U1QoMHg3ZmZmZmZmLCBSQktfRF9EQU9VVF9QTEFOQVJfU1RSSURFXzBfREFPVVRfUExBTkFS
X1NUUklERV9TSElGVCkNCj4gKw0KPiArDQo+ICsvLyBSZWdpc3RlciBSQktfRF9ERUNPTlZf
U1RSSURFXzANCj4gKyNkZWZpbmUgUkJLX0RfREVDT05WX1NUUklERV8wCQkJX01LX0FERFJf
Q09OU1QoMHgxMTA1NCkNCj4gKyNkZWZpbmUgUkJLX0RfREVDT05WX1NUUklERV8wX0RFQ09O
Vl9YX1NUUklERV9TSElGVAkJCV9NS19TSElGVF9DT05TVCgwKQ0KPiArI2RlZmluZSBSQktf
RF9ERUNPTlZfU1RSSURFXzBfREVDT05WX1hfU1RSSURFX0ZJRUxECQkJX01LX0ZJRUxEX0NP
TlNUKDB4MWYsIFJCS19EX0RFQ09OVl9TVFJJREVfMF9ERUNPTlZfWF9TVFJJREVfU0hJRlQp
DQo+ICsjZGVmaW5lIFJCS19EX0RFQ09OVl9TVFJJREVfMF9ERUNPTlZfWV9TVFJJREVfU0hJ
RlQJCQlfTUtfU0hJRlRfQ09OU1QoMTYpDQo+ICsjZGVmaW5lIFJCS19EX0RFQ09OVl9TVFJJ
REVfMF9ERUNPTlZfWV9TVFJJREVfRklFTEQJCQlfTUtfRklFTERfQ09OU1QoMHgxZiwgUkJL
X0RfREVDT05WX1NUUklERV8wX0RFQ09OVl9ZX1NUUklERV9TSElGVCkNCj4gKw0KPiArDQo+
ICsvLyBSZWdpc3RlciBSQktfRF9QRVJGX0VOQUJMRV8wDQo+ICsjZGVmaW5lIFJCS19EX1BF
UkZfRU5BQkxFXzAJCQlfTUtfQUREUl9DT05TVCgweDExMDU4KQ0KPiArI2RlZmluZSBSQktf
RF9QRVJGX0VOQUJMRV8wX1BFUkZfRU5fU0hJRlQJCQlfTUtfU0hJRlRfQ09OU1QoMCkNCj4g
KyNkZWZpbmUgUkJLX0RfUEVSRl9FTkFCTEVfMF9QRVJGX0VOX0ZJRUxECQkJX01LX0ZJRUxE
X0NPTlNUKDB4MSwgUkJLX0RfUEVSRl9FTkFCTEVfMF9QRVJGX0VOX1NISUZUKQ0KPiArDQo+
ICsNCj4gKy8vIFJlZ2lzdGVyIFJCS19EX1BFUkZfUkVBRF9TVEFMTF8wDQo+ICsjZGVmaW5l
IFJCS19EX1BFUkZfUkVBRF9TVEFMTF8wCQkJX01LX0FERFJfQ09OU1QoMHgxMTA1YykNCj4g
KyNkZWZpbmUgUkJLX0RfUEVSRl9SRUFEX1NUQUxMXzBfUkRfU1RBTExfQ05UX1NISUZUCQkJ
X01LX1NISUZUX0NPTlNUKDApDQo+ICsjZGVmaW5lIFJCS19EX1BFUkZfUkVBRF9TVEFMTF8w
X1JEX1NUQUxMX0NOVF9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweGZmZmZmZmZmLCBSQktf
RF9QRVJGX1JFQURfU1RBTExfMF9SRF9TVEFMTF9DTlRfU0hJRlQpDQo+ICsNCj4gKw0KPiAr
Ly8gUmVnaXN0ZXIgUkJLX0RfUEVSRl9XUklURV9TVEFMTF8wDQo+ICsjZGVmaW5lIFJCS19E
X1BFUkZfV1JJVEVfU1RBTExfMAkJCV9NS19BRERSX0NPTlNUKDB4MTEwNjApDQo+ICsjZGVm
aW5lIFJCS19EX1BFUkZfV1JJVEVfU1RBTExfMF9XUl9TVEFMTF9DTlRfU0hJRlQJCQlfTUtf
U0hJRlRfQ09OU1QoMCkNCj4gKyNkZWZpbmUgUkJLX0RfUEVSRl9XUklURV9TVEFMTF8wX1dS
X1NUQUxMX0NOVF9GSUVMRAkJCV9NS19GSUVMRF9DT05TVCgweGZmZmZmZmZmLCBSQktfRF9Q
RVJGX1dSSVRFX1NUQUxMXzBfV1JfU1RBTExfQ05UX1NISUZUKQ0KPiArDQo+ICsNCj4gKw0K
PiArLy8gVG8gc2F0aXNmeSB2YXJpb3VzIGNvbXBpbGVycyBhbmQgcGxhdGZvcm1zLA0KPiAr
Ly8gd2UgbGV0IHVzZXJzIGNvbnRyb2wgdGhlIHR5cGVzIGFuZCBzeW50YXggb2YgY2VydGFp
biBjb25zdGFudHMsIHVzaW5nIG1hY3Jvcy4NCj4gKyNpZm5kZWYgX01LX1NISUZUX0NPTlNU
DQo+ICsgICNkZWZpbmUgX01LX1NISUZUX0NPTlNUKF9jb25zdGFudF8pIF9jb25zdGFudF8N
Cj4gKyNlbmRpZg0KPiArI2lmbmRlZiBfTUtfTUFTS19DT05TVA0KPiArICAjZGVmaW5lIF9N
S19NQVNLX0NPTlNUKF9jb25zdGFudF8pIF9jb25zdGFudF8NCj4gKyNlbmRpZg0KPiArI2lm
bmRlZiBfTUtfRU5VTV9DT05TVA0KPiArICAjZGVmaW5lIF9NS19FTlVNX0NPTlNUKF9jb25z
dGFudF8pIChfY29uc3RhbnRfICMjIFVMKQ0KPiArI2VuZGlmDQo+ICsjaWZuZGVmIF9NS19B
RERSX0NPTlNUDQo+ICsgICNkZWZpbmUgX01LX0FERFJfQ09OU1QoX2NvbnN0YW50XykgX2Nv
bnN0YW50Xw0KPiArI2VuZGlmDQo+ICsjaWZuZGVmIF9NS19GSUVMRF9DT05TVA0KPiArICAj
ZGVmaW5lIF9NS19GSUVMRF9DT05TVChfbWFza18sIF9zaGlmdF8pIChfTUtfTUFTS19DT05T
VChfbWFza18pIDw8IF9NS19TSElGVF9DT05TVChfc2hpZnRfKSkNCj4gKyNlbmRpZg0KPiAr
DQo+ICsNCj4gKw0KPiArLy8NCj4gKy8vIEFERFJFU1MgU1BBQ0VTDQo+ICsvLw0KPiArDQo+
ICsjZGVmaW5lIEJBU0VfQUREUkVTU19OVkRMQV9DRkdST00JMHgwDQo+ICsjZGVmaW5lIEJB
U0VfQUREUkVTU19OVkRMQV9HTEIJMHgxMDAwDQo+ICsjZGVmaW5lIEJBU0VfQUREUkVTU19O
VkRMQV9NQ0lGCTB4MjAwMA0KPiArI2RlZmluZSBCQVNFX0FERFJFU1NfTlZETEFfQ0RNQQkw
eDMwMDANCj4gKyNkZWZpbmUgQkFTRV9BRERSRVNTX05WRExBX0NTQwkweDQwMDANCj4gKyNk
ZWZpbmUgQkFTRV9BRERSRVNTX05WRExBX0NNQUNfQQkweDUwMDANCj4gKyNkZWZpbmUgQkFT
RV9BRERSRVNTX05WRExBX0NNQUNfQgkweDYwMDANCj4gKyNkZWZpbmUgQkFTRV9BRERSRVNT
X05WRExBX0NBQ0MJMHg3MDAwDQo+ICsjZGVmaW5lIEJBU0VfQUREUkVTU19OVkRMQV9TRFBf
UkRNQQkweDgwMDANCj4gKyNkZWZpbmUgQkFTRV9BRERSRVNTX05WRExBX1NEUAkweDkwMDAN
Cj4gKyNkZWZpbmUgQkFTRV9BRERSRVNTX05WRExBX1BEUF9SRE1BCTB4YTAwMA0KPiArI2Rl
ZmluZSBCQVNFX0FERFJFU1NfTlZETEFfUERQCTB4YjAwMA0KPiArI2RlZmluZSBCQVNFX0FE
RFJFU1NfTlZETEFfQ0RQX1JETUEJMHhjMDAwDQo+ICsjZGVmaW5lIEJBU0VfQUREUkVTU19O
VkRMQV9DRFAJMHhkMDAwDQo+ICsjZGVmaW5lIEJBU0VfQUREUkVTU19OVkRMQV9HRUMJMHhl
MDAwDQo+ICsjZGVmaW5lIEJBU0VfQUREUkVTU19OVkRMQV9DVklGCTB4ZjAwMA0KPiArI2Rl
ZmluZSBCQVNFX0FERFJFU1NfTlZETEFfQkRNQQkweDEwMDAwDQo+ICsjZGVmaW5lIEJBU0Vf
QUREUkVTU19OVkRMQV9SQksJMHgxMTAwMA0KPiArDQo+ICsjZW5kaWYNCj4gZGlmZiAtLWdp
dCBhL2RyaXZlcnMvZ3B1L2RybS9udmRsYS9udmRsYV9ydWJpay5jIGIvZHJpdmVycy9ncHUv
ZHJtL252ZGxhL252ZGxhX3J1YmlrLmMNCj4gbmV3IGZpbGUgbW9kZSAxMDA2NDQNCj4gaW5k
ZXggMDAwMDAwMDAwMDAwLi4zYmZiM2IwY2I3ODYNCj4gLS0tIC9kZXYvbnVsbA0KPiArKysg
Yi9kcml2ZXJzL2dwdS9kcm0vbnZkbGEvbnZkbGFfcnViaWsuYw0KPiBAQCAtMCwwICsxLDIx
NyBAQA0KPiArLy8gU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEJTRC0zLUNsYXVzZSBPUiBH
UEwtMi4wDQo+ICsvKg0KPiArICogQ29weXJpZ2h0IChDKSAyMDE3LTIwMTggTlZJRElBIENP
UlBPUkFUSU9ODQo+ICsgKiBDb3B5cmlnaHQgKEMpIDIwMjIgQ2FpIEh1b3FpbmcNCj4gKyAq
Lw0KPiArDQo+ICsjaW5jbHVkZSAibnZkbGFfY29tbW9uLmgiDQo+ICsjaW5jbHVkZSAibnZk
bGFfZHJtLmgiDQo+ICsjaW5jbHVkZSAibnZkbGFfcmVnLmgiDQo+ICsjaW5jbHVkZSAibnZk
bGFfZW5naW5lLmgiDQo+ICsNCj4gK3N0YXRpYyB1aW50OF90IG1hcF9ydWJpa19tb2RlW10g
PSB7DQo+ICsJRklFTERfRU5VTShSQktfRF9NSVNDX0NGR18wLCBSVUJJS19NT0RFLCBDT05U
UkFDVCksDQo+ICsJRklFTERfRU5VTShSQktfRF9NSVNDX0NGR18wLCBSVUJJS19NT0RFLCBT
UExJVCksDQo+ICsJRklFTERfRU5VTShSQktfRF9NSVNDX0NGR18wLCBSVUJJS19NT0RFLCBN
RVJHRSksDQo+ICt9Ow0KPiArDQo+ICtzdGF0aWMgdWludDhfdCAgbWFwX3JhbV90eXBlW10g
PSB7DQo+ICsJRklFTERfRU5VTShSQktfRF9EQUlOX1JBTV9UWVBFXzAsIERBVEFJTl9SQU1f
VFlQRSwgTUNJRiksDQo+ICsJRklFTERfRU5VTShSQktfRF9EQUlOX1JBTV9UWVBFXzAsIERB
VEFJTl9SQU1fVFlQRSwgQ1ZJRiksDQo+ICt9Ow0KPiArDQo+ICtzdGF0aWMgdWludDhfdCAg
bWFwX3ByZWNpc2lvbltdID0gew0KPiArCUZJRUxEX0VOVU0oUkJLX0RfTUlTQ19DRkdfMCwg
SU5fUFJFQ0lTSU9OLCBJTlQ4KSwNCj4gKwlGSUVMRF9FTlVNKFJCS19EX01JU0NfQ0ZHXzAs
IElOX1BSRUNJU0lPTiwgSU5UMTYpLA0KPiArCUZJRUxEX0VOVU0oUkJLX0RfTUlTQ19DRkdf
MCwgSU5fUFJFQ0lTSU9OLCBGUDE2KSwNCj4gK307DQo+ICsNCj4gK3N0YXRpYyB1aW50OF90
IG1hcF9icGVbXSA9IHsNCj4gKwlCUEVfUFJFQ0lTSU9OX0lOVDgsDQo+ICsJQlBFX1BSRUNJ
U0lPTl9JTlQxNiwNCj4gKwlCUEVfUFJFQ0lTSU9OX0ZQMTYsDQo+ICt9Ow0KPiArDQo+ICt2
b2lkDQo+ICtkbGFfcnViaWtfc2V0X3Byb2R1Y2VyKHN0cnVjdCBkbGFfZW5naW5lICplbmdp
bmUsIGludDMyX3QgZ3JvdXBfaWQsIGludDMyX3QgX191bnVzZWQpDQo+ICt7DQo+ICsJdWlu
dDMyX3QgcmVnOw0KPiArDQo+ICsJLyoqDQo+ICsJICogc2V0IHByb2R1Y2VyIHBvaW50ZXIg
Zm9yIGFsbCBzdWItbW9kdWxlcw0KPiArCSAqLw0KPiArCXJlZyA9IGdyb3VwX2lkIDw8IFNI
SUZUKFJCS19TX1BPSU5URVJfMCwgUFJPRFVDRVIpOw0KPiArCXJ1YmlrX3JlZ193cml0ZShl
bmdpbmUsIFNfUE9JTlRFUiwgcmVnKTsNCj4gK30NCj4gKw0KPiAraW50DQo+ICtkbGFfcnVi
aWtfZW5hYmxlKHN0cnVjdCBkbGFfZW5naW5lICplbmdpbmUsIHN0cnVjdCBkbGFfcHJvY2Vz
c29yX2dyb3VwICpncm91cCkNCj4gK3sNCj4gKwl1aW50MzJfdCByZWc7DQo+ICsNCj4gKwkv
KioNCj4gKwkgKiBlbmFibGUgYWxsIHN1Yi1tb2R1bGVzDQo+ICsJICovDQo+ICsJcmVnID0g
RklFTERfRU5VTShSQktfRF9PUF9FTkFCTEVfMCwgT1BfRU4sIEVOQUJMRSk7DQo+ICsJcnVi
aWtfcmVnX3dyaXRlKGVuZ2luZSwgRF9PUF9FTkFCTEUsIHJlZyk7DQo+ICsNCj4gKwlyZXR1
cm4gMDsNCj4gK30NCj4gKw0KPiArdm9pZA0KPiArZGxhX3J1YmlrX3JkbWFfY2hlY2soc3Ry
dWN0IGRsYV9wcm9jZXNzb3JfZ3JvdXAgKmdyb3VwKQ0KPiArew0KPiArCWdyb3VwLT5pc19y
ZG1hX25lZWRlZCA9IDA7DQo+ICt9DQo+ICsNCj4gK3N0YXRpYyBpbnQzMl90DQo+ICtwcm9j
ZXNzb3JfcnViaWtfcHJvZ3JhbShzdHJ1Y3QgZGxhX2VuZ2luZSAqZW5naW5lLCBzdHJ1Y3Qg
ZGxhX3Byb2Nlc3Nvcl9ncm91cCAqZ3JvdXApDQo+ICt7DQo+ICsJaW50MzJfdCByZXQgPSAw
Ow0KPiArCXVpbnQzMl90IHJlZywgaGlnaCwgbG93Ow0KPiArCXVpbnQ2NF90IGlucHV0X2Fk
ZHJlc3MgPSAwOw0KPiArCXVpbnQ2NF90IG91dHB1dF9hZGRyZXNzID0gMDsNCj4gKwlzdHJ1
Y3QgZGxhX3J1YmlrX29wX2Rlc2MgKnJ1YmlrX29wOw0KPiArCXN0cnVjdCBkbGFfcnViaWtf
c3VyZmFjZV9kZXNjICpydWJpa19zdXJmYWNlOw0KPiArDQo+ICsJcnViaWtfb3AgPSAmZ3Jv
dXAtPm9wZXJhdGlvbl9kZXNjLT5ydWJpa19vcDsNCj4gKwlydWJpa19zdXJmYWNlID0gJmdy
b3VwLT5zdXJmYWNlX2Rlc2MtPnJ1YmlrX3N1cmZhY2U7DQo+ICsNCj4gKwkvKiBBcmd1bWVu
dCBjaGVjayAqLw0KPiArCUFTU0VSVF9HT1RPKChydWJpa19zdXJmYWNlLT5zcmNfZGF0YS50
eXBlICE9IERMQV9NRU1fSFcpLA0KPiArCQlyZXQsIC1FSU5WQUwsIGV4aXQpOw0KPiArCUFT
U0VSVF9HT1RPKChydWJpa19zdXJmYWNlLT5kc3RfZGF0YS50eXBlICE9IERMQV9NRU1fSFcp
LA0KPiArCQlyZXQsIC1FSU5WQUwsIGV4aXQpOw0KPiArDQo+ICsJLyogZ2V0IHRoZSBhZGRy
ZXNzZXMgZnJvbSB0YXNrIGRlc2NyaXB0b3IgKi8NCj4gKwlyZXQgPSBkbGFfcmVhZF9pbnB1
dF9hZGRyZXNzKGVuZ2luZSwgJnJ1YmlrX3N1cmZhY2UtPnNyY19kYXRhLA0KPiArCQkJCQkJ
JmlucHV0X2FkZHJlc3MsDQo+ICsJCQkJCQlncm91cC0+b3BfZGVzYy0+aW5kZXgsDQo+ICsJ
CQkJCQlncm91cC0+cm9pX2luZGV4LA0KPiArCQkJCQkJMSk7DQo+ICsJaWYgKHJldCkNCj4g
KwkJZ290byBleGl0Ow0KPiArDQo+ICsJZGxhX2dldF9kbWFfY3ViZV9hZGRyZXNzKGVuZ2lu
ZS0+ZHJpdmVyX2NvbnRleHQsDQo+ICsJCQkJZW5naW5lLT50YXNrLT50YXNrX2RhdGEsDQo+
ICsJCQkJcnViaWtfc3VyZmFjZS0+ZHN0X2RhdGEuYWRkcmVzcywNCj4gKwkJCQlydWJpa19z
dXJmYWNlLT5kc3RfZGF0YS5vZmZzZXQsDQo+ICsJCQkJKHZvaWQgKikmb3V0cHV0X2FkZHJl
c3MsDQo+ICsJCQkJREVTVElOQVRJT05fRE1BKTsNCj4gKw0KPiArCS8qIGNvbmZpZyBydWJp
ayAqLw0KPiArCXJlZyA9ICgoKHVpbnQzMl90KW1hcF9ydWJpa19tb2RlW3J1YmlrX29wLT5t
b2RlXSkgPDwNCj4gKwkJCVNISUZUKFJCS19EX01JU0NfQ0ZHXzAsIFJVQklLX01PREUpKSB8
DQo+ICsJCQkoKCh1aW50MzJfdCltYXBfcHJlY2lzaW9uW3J1YmlrX29wLT5wcmVjaXNpb25d
KSA8PA0KPiArCQkJU0hJRlQoUkJLX0RfTUlTQ19DRkdfMCwgSU5fUFJFQ0lTSU9OKSk7DQo+
ICsJcnViaWtfcmVnX3dyaXRlKGVuZ2luZSwgRF9NSVNDX0NGRywgcmVnKTsNCj4gKwlyZWcg
PSAoKCh1aW50MzJfdCltYXBfcmFtX3R5cGVbcnViaWtfc3VyZmFjZS0+c3JjX2RhdGEudHlw
ZV0pIDw8DQo+ICsJCQlTSElGVChSQktfRF9EQUlOX1JBTV9UWVBFXzAsIERBVEFJTl9SQU1f
VFlQRSkpOw0KPiArCXJ1YmlrX3JlZ193cml0ZShlbmdpbmUsIERfREFJTl9SQU1fVFlQRSwg
cmVnKTsNCj4gKwlyZWcgPSAgKChydWJpa19zdXJmYWNlLT5zcmNfZGF0YS53aWR0aC0xKSA8
PA0KPiArCQkJU0hJRlQoUkJLX0RfREFUQUlOX1NJWkVfMF8wLCBEQVRBSU5fV0lEVEgpKSB8
DQo+ICsJCQkoKHJ1YmlrX3N1cmZhY2UtPnNyY19kYXRhLmhlaWdodC0xKSA8PA0KPiArCQkJ
U0hJRlQoUkJLX0RfREFUQUlOX1NJWkVfMF8wLCBEQVRBSU5fSEVJR0hUKSk7DQo+ICsJcnVi
aWtfcmVnX3dyaXRlKGVuZ2luZSwgRF9EQVRBSU5fU0laRV8wLCByZWcpOw0KPiArCXJlZyA9
ICAoKHJ1YmlrX3N1cmZhY2UtPnNyY19kYXRhLmNoYW5uZWwtMSkgPDwNCj4gKwkJCVNISUZU
KFJCS19EX0RBVEFJTl9TSVpFXzFfMCwgREFUQUlOX0NIQU5ORUwpKTsNCj4gKwlydWJpa19y
ZWdfd3JpdGUoZW5naW5lLCBEX0RBVEFJTl9TSVpFXzEsIHJlZyk7DQo+ICsNCj4gKwloaWdo
ID0gdXBwZXJfMzJfYml0cyhpbnB1dF9hZGRyZXNzKTsNCj4gKwlsb3cgPSBsb3dlcl8zMl9i
aXRzKGlucHV0X2FkZHJlc3MpOw0KPiArCXJ1YmlrX3JlZ193cml0ZShlbmdpbmUsIERfREFJ
Tl9BRERSX0xPVywgbG93KTsNCj4gKwlydWJpa19yZWdfd3JpdGUoZW5naW5lLCBEX0RBSU5f
QUREUl9ISUdILCBoaWdoKTsNCj4gKwlpZiAocnViaWtfb3AtPm1vZGUgPT0gUlVCSUtfTU9E
RV9NRVJHRSkgew0KPiArCQlBU1NFUlRfR09UTygocnViaWtfc3VyZmFjZS0+c3JjX2RhdGEu
cGxhbmVfc3RyaWRlICE9IDApLA0KPiArCQkJcmV0LCAtRUlOVkFMLCBleGl0KTsNCj4gKwkJ
QVNTRVJUX0dPVE8oKChydWJpa19zdXJmYWNlLT5zcmNfZGF0YS5wbGFuZV9zdHJpZGUmMHgx
RikgPT0gMCksDQo+ICsJCQlyZXQsIC1FSU5WQUwsIGV4aXQpOw0KPiArCQlydWJpa19yZWdf
d3JpdGUoZW5naW5lLCBEX0RBSU5fUExBTkFSX1NUUklERSwNCj4gKwkJCXJ1YmlrX3N1cmZh
Y2UtPnNyY19kYXRhLnBsYW5lX3N0cmlkZSk7DQo+ICsJfSBlbHNlIHsNCj4gKwkJcnViaWtf
cmVnX3dyaXRlKGVuZ2luZSwgRF9EQUlOX1NVUkZfU1RSSURFLA0KPiArCQkJcnViaWtfc3Vy
ZmFjZS0+c3JjX2RhdGEuc3VyZl9zdHJpZGUpOw0KPiArCX0NCj4gKwlydWJpa19yZWdfd3Jp
dGUoZW5naW5lLCBEX0RBSU5fTElORV9TVFJJREUsDQo+ICsJCQkJcnViaWtfc3VyZmFjZS0+
c3JjX2RhdGEubGluZV9zdHJpZGUpOw0KPiArDQo+ICsJcmVnID0gKCgodWludDMyX3QpbWFw
X3JhbV90eXBlW3J1YmlrX3N1cmZhY2UtPmRzdF9kYXRhLnR5cGVdKSA8PA0KPiArCQkJU0hJ
RlQoUkJLX0RfREFPVVRfUkFNX1RZUEVfMCwgREFUQU9VVF9SQU1fVFlQRSkpOw0KPiArCXJ1
YmlrX3JlZ193cml0ZShlbmdpbmUsIERfREFPVVRfUkFNX1RZUEUsIHJlZyk7DQo+ICsJcmVn
ID0gICgocnViaWtfc3VyZmFjZS0+ZHN0X2RhdGEuY2hhbm5lbC0xKSA8PA0KPiArCQkJU0hJ
RlQoUkJLX0RfREFUQU9VVF9TSVpFXzFfMCwgREFUQU9VVF9DSEFOTkVMKSk7DQo+ICsJcnVi
aWtfcmVnX3dyaXRlKGVuZ2luZSwgRF9EQVRBT1VUX1NJWkVfMSwgcmVnKTsNCj4gKw0KPiAr
CWhpZ2ggPSB1cHBlcl8zMl9iaXRzKG91dHB1dF9hZGRyZXNzKTsNCj4gKwlsb3cgPSBsb3dl
cl8zMl9iaXRzKG91dHB1dF9hZGRyZXNzKTsNCj4gKwlydWJpa19yZWdfd3JpdGUoZW5naW5l
LCBEX0RBT1VUX0FERFJfTE9XLCBsb3cpOw0KPiArCXJ1YmlrX3JlZ193cml0ZShlbmdpbmUs
IERfREFPVVRfQUREUl9ISUdILCBoaWdoKTsNCj4gKw0KPiArCXJ1YmlrX3JlZ193cml0ZShl
bmdpbmUsIERfREFPVVRfTElORV9TVFJJREUsDQo+ICsJCQlydWJpa19zdXJmYWNlLT5kc3Rf
ZGF0YS5saW5lX3N0cmlkZSk7DQo+ICsJaWYgKHJ1YmlrX29wLT5tb2RlICE9IFJVQklLX01P
REVfU1BMSVQpIHsNCj4gKwkJcnViaWtfcmVnX3dyaXRlKGVuZ2luZSwgRF9EQU9VVF9TVVJG
X1NUUklERSwNCj4gKwkJCQlydWJpa19zdXJmYWNlLT5kc3RfZGF0YS5zdXJmX3N0cmlkZSk7
DQo+ICsJCWlmIChydWJpa19vcC0+bW9kZSA9PSBSVUJJS19NT0RFX0NPTlRSQUNUKSB7DQo+
ICsJCQlyZWcgPSAoKHJ1YmlrX3N1cmZhY2UtPmRzdF9kYXRhLmNoYW5uZWwgKg0KPiArCQkJ
CW1hcF9icGVbcnViaWtfb3AtPnByZWNpc2lvbl0gKyAzMSkgPj4gNSkgKg0KPiArCQkJCXJ1
YmlrX3N1cmZhY2UtPnNyY19kYXRhLnN1cmZfc3RyaWRlOw0KPiArCQkJcnViaWtfcmVnX3dy
aXRlKGVuZ2luZSwgRF9DT05UUkFDVF9TVFJJREVfMCwgcmVnKTsNCj4gKw0KPiArCQkJcmVn
ID0gcnViaWtfb3AtPnN0cmlkZV95ICoNCj4gKwkJCQlydWJpa19zdXJmYWNlLT5kc3RfZGF0
YS5saW5lX3N0cmlkZTsNCj4gKwkJCXJ1YmlrX3JlZ193cml0ZShlbmdpbmUsIERfQ09OVFJB
Q1RfU1RSSURFXzEsIHJlZyk7DQo+ICsNCj4gKwkJCXJlZyA9ICgoKHVpbnQzMl90KShydWJp
a19vcC0+c3RyaWRlX3gtMSkpIDw8DQo+ICsJCQlTSElGVChSQktfRF9ERUNPTlZfU1RSSURF
XzAsIERFQ09OVl9YX1NUUklERSkpIHwNCj4gKwkJCQkoKCh1aW50MzJfdCkocnViaWtfb3At
PnN0cmlkZV95LTEpKSA8PA0KPiArCQkJU0hJRlQoUkJLX0RfREVDT05WX1NUUklERV8wLCBE
RUNPTlZfWV9TVFJJREUpKTsNCj4gKwkJCXJ1YmlrX3JlZ193cml0ZShlbmdpbmUsIERfREVD
T05WX1NUUklERSwgcmVnKTsNCj4gKwkJfQ0KPiArCX0gZWxzZSB7DQo+ICsJCXJ1YmlrX3Jl
Z193cml0ZShlbmdpbmUsIERfREFPVVRfUExBTkFSX1NUUklERSwNCj4gKwkJCQlydWJpa19z
dXJmYWNlLT5kc3RfZGF0YS5wbGFuZV9zdHJpZGUpOw0KPiArCX0NCj4gKw0KPiArZXhpdDoN
Cj4gKwlyZXR1cm4gcmV0Ow0KPiArfQ0KPiArDQo+ICtpbnQNCj4gK2RsYV9ydWJpa19pc19y
ZWFkeShzdHJ1Y3QgZGxhX3Byb2Nlc3NvciAqcHJvY2Vzc29yLA0KPiArCQkJICAgICBzdHJ1
Y3QgZGxhX3Byb2Nlc3Nvcl9ncm91cCAqZ3JvdXApDQo+ICt7DQo+ICsJcmV0dXJuIDE7DQo+
ICt9DQo+ICsNCj4gK3ZvaWQNCj4gK2RsYV9ydWJpa19kdW1wX2NvbmZpZyhzdHJ1Y3QgZGxh
X3Byb2Nlc3Nvcl9ncm91cCAqZ3JvdXApDQo+ICt7DQo+ICsJc3RydWN0IGRsYV9ydWJpa19v
cF9kZXNjICpydWJpa19vcDsNCj4gKwlzdHJ1Y3QgZGxhX3J1YmlrX3N1cmZhY2VfZGVzYyAq
cnViaWtfc3VyZmFjZTsNCj4gKw0KPiArCXJ1YmlrX3N1cmZhY2UgPSAmZ3JvdXAtPnN1cmZh
Y2VfZGVzYy0+cnViaWtfc3VyZmFjZTsNCj4gKwlydWJpa19vcCA9ICZncm91cC0+b3BlcmF0
aW9uX2Rlc2MtPnJ1YmlrX29wOw0KPiArfQ0KPiArDQo+ICtpbnQNCj4gK2RsYV9ydWJpa19w
cm9ncmFtKHN0cnVjdCBkbGFfZW5naW5lICplbmdpbmUsIHN0cnVjdCBkbGFfcHJvY2Vzc29y
X2dyb3VwICpncm91cCkNCj4gK3sNCj4gKwlpbnQzMl90IHJldCA9IDA7DQo+ICsNCj4gKwlp
ZiAoIWVuZ2luZS0+Y29uZmlnX2RhdGEtPnJ1YmlrX2VuYWJsZSkgew0KPiArCQlwcl9lcnIo
IlJVQklLIGlzIG5vdCBzdXBwb3J0ZWQgZm9yIHRoaXMgY29uZmlndXJhdGlvblxuIik7DQo+
ICsJCXJldCA9IC1FSU5WQUw7DQo+ICsJCWdvdG8gZXhpdDsNCj4gKwl9DQo+ICsNCj4gKwlk
bGFfZW5hYmxlX2ludHIoZW5naW5lLCBNQVNLKEdMQl9TX0lOVFJfTUFTS18wLCBSVUJJS19E
T05FX01BU0sxKSB8DQo+ICsJCQlNQVNLKEdMQl9TX0lOVFJfTUFTS18wLCBSVUJJS19ET05F
X01BU0swKSk7DQo+ICsNCj4gKwlyZXQgPSBwcm9jZXNzb3JfcnViaWtfcHJvZ3JhbShlbmdp
bmUsIGdyb3VwKTsNCj4gKwlpZiAocmV0KQ0KPiArCQlnb3RvIGV4aXQ7DQo+ICsNCj4gK2V4
aXQ6DQo+ICsJcmV0dXJuIHJldDsNCj4gK30NCj4gZGlmZiAtLWdpdCBhL2RyaXZlcnMvZ3B1
L2RybS9udmRsYS9udmRsYV9zY2hlZC5oIGIvZHJpdmVycy9ncHUvZHJtL252ZGxhL252ZGxh
X3NjaGVkLmgNCj4gbmV3IGZpbGUgbW9kZSAxMDA2NDQNCj4gaW5kZXggMDAwMDAwMDAwMDAw
Li5kM2ExOTgxMjcwMDYNCj4gLS0tIC9kZXYvbnVsbA0KPiArKysgYi9kcml2ZXJzL2dwdS9k
cm0vbnZkbGEvbnZkbGFfc2NoZWQuaA0KPiBAQCAtMCwwICsxLDUyIEBADQo+ICsvKiBTUERY
LUxpY2Vuc2UtSWRlbnRpZmllcjogR1BMLTIuMCBPUiBCU0QtMy1DbGF1c2UgKi8NCj4gKy8q
DQo+ICsgKiBDb3B5cmlnaHQgKEMpIDIwMTctMjAxOCBOVklESUEgQ09SUE9SQVRJT04uDQo+
ICsgKiBDb3B5cmlnaHQgKEMpIDIwMjIgQ2FpIEh1b3FpbmcNCj4gKyAqLw0KPiArDQo+ICsj
aWZuZGVmIF9fTlZETEFfU0NIRURfSF8NCj4gKyNkZWZpbmUgX19OVkRMQV9TQ0hFRF9IXw0K
PiArDQo+ICtzdHJ1Y3QgZGxhX3Rhc2sgew0KPiArCS8qIHBsYXRmb3JtIHNwZWNpZmljIGRh
dGEgdG8gY29tbXVuaWNhdGUgd2l0aCBwb3J0YWJpbGl0eSBsYXllciAqLw0KPiArCXZvaWQg
KnRhc2tfZGF0YTsNCj4gKwkvKiB0YXNrIHN0YXRlICovDQo+ICsJdWludDMyX3Qgc3RhdGU7
DQo+ICsJLyogVGFzayBiYXNlIGFkZHJlc3MgKi8NCj4gKwl1aW50NjRfdCBiYXNlOw0KPiAr
CS8qIHN0YXJ0IGFkZHJlc3Mgb2YgYSBsaXN0IG9mIGRsYV9vcGVyYXRpb25fY29udGFpbmVy
ICovDQo+ICsJdWludDY0X3Qgb3BlcmF0aW9uX2Rlc2NfYWRkcjsNCj4gKwkvKiBzdGFydCBh
ZGRyZXNzIG9mIGEgbGlzdCBvZiBkbGFfc3VyZmFjZV9jb250YWluZXIgKi8NCj4gKwl1aW50
NjRfdCBzdXJmYWNlX2Rlc2NfYWRkcjsNCj4gKwkvKiBzdGFydCBhZGRyZXNzIG9mIGEgbGlz
dCBvZiBkbGFfY29tbW9uX29wX2Rlc2MgKi8NCj4gKwl1aW50NjRfdCBkZXBlbmRlbmN5X2dy
YXBoX2FkZHI7DQo+ICsJLyogc3RhcnQgYWRkcmVzcyBvZiBhIGxpc3Qgb2YgZGxhX2x1dF9w
YXJhbSAqLw0KPiArCXVpbnQ2NF90IGx1dF9kYXRhX2FkZHI7DQo+ICsJLyoNCj4gKwkgKiBz
dGFydCBhZGRyZXNzIG9mIGEgbGlzdCBvZiBkbGFfcm9pX2Rlc2MsDQo+ICsJICogdGhlIGZp
cnN0IG9uZSBpcyBkbGFfcm9pX2FycmF5X2Rlc2MNCj4gKwkgKiB2YWxpZCB3aGVuIG5ldHdv
cmsuZHluYW1pY19yb2kgaXMgdHJ1ZQ0KPiArCSAqLw0KPiArCXVpbnQ2NF90IHJvaV9hcnJh
eV9hZGRyOw0KPiArCS8qIHN0YXJ0IGFkZHJlc3Mgb2YgYSBsaXN0IG9mIGRsYV9zdXJmYWNl
X2NvbnRhaW5lciAqLw0KPiArCXVpbnQ2NF90IHN1cmZhY2VfYWRkcjsNCj4gKwkvKiBzdGFy
dCBhZGRyZXNzIG9mIGEgbGlzdCBvZiBkbGFfc3RhdF9jb250YWluZXIgKi8NCj4gKwl1aW50
NjRfdCBzdGF0X2RhdGFfYWRkcjsNCj4gK30gX19wYWNrZWQgX19hbGlnbmVkKDI1Nik7DQo+
ICsNCj4gKy8qKg0KPiArICogQGJyaWVmCQkJQ29uZmlndXJhdGlvbiBwYXJhbWV0ZXJzIHN1
cHBvcnRlZCBieSB0aGUgZW5naW5lDQo+ICsgKg0KPiArICogYXRvbV9zaXplCQkJTWVtb3J5
IHNtYWxsZXN0IGFjY2VzcyBzaXplDQo+ICsgKiBiZG1hX2VuYWJsZQkJCURlZmluZXMgd2hl
dGhlciBiZG1hIGlzIHN1cHBvcnRlZA0KPiArICogcnViaWtfZW5hYmxlCQkJRGVmaW5lcyB3
aGV0aGVyIHJ1YmlrIGlzIHN1cHBvcnRlZA0KPiArICogd2VpZ2h0X2NvbXByZXNzX3N1cHBv
cnQJRGVmaW5lcyB3aGV0aGVyIHdlaWdodCBkYXRhIGNvbXByZXNzaW9uIGlzIHN1cHBvcnRl
ZA0KPiArICovDQo+ICtzdHJ1Y3QgZGxhX2NvbmZpZyB7DQo+ICsJdWludDMyX3QgYXRvbV9z
aXplOw0KPiArCWJvb2wgYmRtYV9lbmFibGU7DQo+ICsJYm9vbCBydWJpa19lbmFibGU7DQo+
ICsJYm9vbCB3ZWlnaHRfY29tcHJlc3Nfc3VwcG9ydDsNCj4gK307DQo+ICsNCj4gKyNlbmRp
Zg0KPiBkaWZmIC0tZ2l0IGEvZHJpdmVycy9ncHUvZHJtL252ZGxhL252ZGxhX3NjaGVkdWxl
ci5jIGIvZHJpdmVycy9ncHUvZHJtL252ZGxhL252ZGxhX3NjaGVkdWxlci5jDQo+IG5ldyBm
aWxlIG1vZGUgMTAwNjQ0DQo+IGluZGV4IDAwMDAwMDAwMDAwMC4uYjgxNDA3NzQ3OGM2DQo+
IC0tLSAvZGV2L251bGwNCj4gKysrIGIvZHJpdmVycy9ncHUvZHJtL252ZGxhL252ZGxhX3Nj
aGVkdWxlci5jDQo+IEBAIC0wLDAgKzEsMTAwNSBAQA0KPiArLy8gU1BEWC1MaWNlbnNlLUlk
ZW50aWZpZXI6IEJTRC0zLUNsYXVzZSBPUiBHUEwtMi4wDQo+ICsvKg0KPiArICogQ29weXJp
Z2h0IChDKSAyMDE3LTIwMTggTlZJRElBIENPUlBPUkFUSU9ODQo+ICsgKiBDb3B5cmlnaHQg
KEMpIDIwMjIgQ2FpIEh1b3FpbmcNCj4gKyAqLw0KPiArDQo+ICsjaW5jbHVkZSAibnZkbGFf
Y29tbW9uLmgiDQo+ICsjaW5jbHVkZSAibnZkbGFfZHJtLmgiDQo+ICsjaW5jbHVkZSAibnZk
bGFfcmVnLmgiDQo+ICsjaW5jbHVkZSAibnZkbGFfZW5naW5lLmgiDQo+ICsNCj4gKyNkZWZp
bmUgTUFYX05VTV9BRERSRVNTRVMJMjU2DQo+ICsNCj4gK3N0YXRpYyB1aW50NjRfdCByb2lf
YXJyYXlfbGVuZ3RoIF9fYWxpZ25lZCg4KTsNCj4gK3N0YXRpYyBzdHJ1Y3QgZGxhX25ldHdv
cmtfZGVzYyBuZXR3b3JrOw0KPiArDQo+ICtzdGF0aWMgaW50DQo+ICtkbGFfdXBkYXRlX2Nv
bnN1bWVycyhzdHJ1Y3QgZGxhX2VuZ2luZSAqZW5naW5lLA0KPiArCQkJCQkgc3RydWN0IGRs
YV9wcm9jZXNzb3JfZ3JvdXAgKmdyb3VwLA0KPiArCQkJCQkgc3RydWN0IGRsYV9jb21tb25f
b3BfZGVzYyAqb3AsIHVpbnQ4X3QgZXZlbnQpOw0KPiArDQo+ICtzdGF0aWMgaW50MzJfdA0K
PiArZGxhX3JlYWRfYWRkcmVzc19saXN0KHN0cnVjdCBkbGFfZW5naW5lICplbmdpbmUpDQo+
ICt7DQo+ICsJcmV0dXJuIDA7DQo+ICt9DQo+ICsNCj4gK2ludDMyX3QNCj4gK2RsYV9yZWFk
X2x1dChzdHJ1Y3QgZGxhX2VuZ2luZSAqZW5naW5lLCBpbnQxNl90IGluZGV4LCB2b2lkICpk
c3QpDQo+ICt7DQo+ICsJaW50MzJfdCByZXQgPSAwOw0KPiArCXVpbnQ2NF90IHNyY19hZGRy
Ow0KPiArDQo+ICsJaWYgKGluZGV4ID09IC0xKSB7DQo+ICsJCXJldCA9IC1FSU5WQUw7DQo+
ICsJCWdvdG8gZXhpdDsNCj4gKwl9DQo+ICsNCj4gKwlzcmNfYWRkciA9IGVuZ2luZS0+dGFz
ay0+bHV0X2RhdGFfYWRkcjsNCj4gKw0KPiArCXJldCA9IGRsYV9kYXRhX3JlYWQoZW5naW5l
LT5kcml2ZXJfY29udGV4dCwNCj4gKwkJCWVuZ2luZS0+dGFzay0+dGFza19kYXRhLA0KPiAr
CQkJc3JjX2FkZHIsICh2b2lkICopZHN0LA0KPiArCQkJc2l6ZW9mKHN0cnVjdCBkbGFfbHV0
X3BhcmFtKSwNCj4gKwkJCShzaXplb2Yoc3RydWN0IGRsYV9sdXRfcGFyYW0pICogKHVpbnQ2
NF90KWluZGV4KSk7DQo+ICsNCj4gK2V4aXQ6DQo+ICsJcmV0dXJuIHJldDsNCj4gK30NCj4g
Kw0KPiArc3RhdGljIGludA0KPiArZGxhX29wX2VuYWJsZWQoc3RydWN0IGRsYV9lbmdpbmUg
KmVuZ2luZSwgc3RydWN0IGRsYV9wcm9jZXNzb3JfZ3JvdXAgKmdyb3VwKQ0KPiArew0KPiAr
CWludDMyX3QgcmV0Ow0KPiArCXN0cnVjdCBkbGFfY29tbW9uX29wX2Rlc2MgKm9wX2Rlc2M7
DQo+ICsNCj4gKwlvcF9kZXNjID0gZ3JvdXAtPm9wX2Rlc2M7DQo+ICsNCj4gKwlncm91cC0+
YWN0aXZlID0gMTsNCj4gKw0KPiArCS8qIHVwZGF0ZSBkZXBlbmRlbmN5IGdyYXBoIGZvciB0
aGlzIHRhc2sgKi8NCj4gKwlyZXQgPSBkbGFfdXBkYXRlX2NvbnN1bWVycyhlbmdpbmUsIGdy
b3VwLCBvcF9kZXNjLCBETEFfRVZFTlRfT1BfRU5BQkxFRCk7DQo+ICsNCj4gKwlyZXR1cm4g
cmV0Ow0KPiArfQ0KPiArDQo+ICtzdGF0aWMgaW50DQo+ICtkbGFfb3BfcHJvZ3JhbW1lZChz
dHJ1Y3QgZGxhX2VuZ2luZSAqZW5naW5lLCBzdHJ1Y3QgZGxhX3Byb2Nlc3NvciAqcHJvY2Vz
c29yLA0KPiArCQkgIHN0cnVjdCBkbGFfcHJvY2Vzc29yX2dyb3VwICpncm91cCwNCj4gKwkJ
ICB1aW50OF90IHJkbWFfaWQpDQo+ICt7DQo+ICsJaW50MzJfdCByZXQ7DQo+ICsJc3RydWN0
IGRsYV9jb21tb25fb3BfZGVzYyAqb3BfZGVzYzsNCj4gKw0KPiArCW9wX2Rlc2MgPSBncm91
cC0+b3BfZGVzYzsNCj4gKw0KPiArCWdyb3VwLT5wZW5kaW5nID0gMDsNCj4gKw0KPiArCS8q
IHVwZGF0ZSBkZXBlbmRlbmN5IGdyYXBoIGZvciB0aGlzIHRhc2sgKi8NCj4gKwlyZXQgPSBk
bGFfdXBkYXRlX2NvbnN1bWVycyhlbmdpbmUsIGdyb3VwLCBvcF9kZXNjLCBETEFfRVZFTlRf
T1BfUFJPR1JBTU1FRCk7DQo+ICsNCj4gKwlyZXR1cm4gcmV0Ow0KPiArfQ0KPiArDQo+ICtz
dGF0aWMgaW50MzJfdA0KPiArZGxhX3JlYWRfY29uZmlnKHN0cnVjdCBkbGFfZW5naW5lICpl
bmdpbmUsIHN0cnVjdCBkbGFfdGFzayAqdGFzaywNCj4gKwkJCQlzdHJ1Y3QgZGxhX3Byb2Nl
c3NvciAqcHJvY2Vzc29yLA0KPiArCQkJCXN0cnVjdCBkbGFfcHJvY2Vzc29yX2dyb3VwICpn
cm91cCkNCj4gK3sNCj4gKwlpbnQzMl90IHJldDsNCj4gKwl1aW50NjRfdCBiYXNlOw0KPiAr
CWludDE2X3QgaW5kZXg7DQo+ICsJdWludDhfdCByb2lfaW5kZXg7DQo+ICsNCj4gKwlyb2lf
aW5kZXggPSBncm91cC0+cm9pX2luZGV4Ow0KPiArCWluZGV4ID0gZ3JvdXAtPm9wX2Rlc2Mt
PmluZGV4Ow0KPiArDQo+ICsJYmFzZSA9IChzaXplb2YodW5pb24gZGxhX29wZXJhdGlvbl9j
b250YWluZXIpICoNCj4gKwkJCSh1aW50NjRfdCllbmdpbmUtPm5ldHdvcmstPm51bV9vcGVy
YXRpb25zICoNCj4gKwkJCSh1aW50NjRfdClyb2lfaW5kZXgpOw0KPiArCWJhc2UgPSBiYXNl
ICsgKHNpemVvZih1bmlvbiBkbGFfb3BlcmF0aW9uX2NvbnRhaW5lcikgKg0KPiArCQkJKHVp
bnQ2NF90KWluZGV4KTsNCj4gKw0KPiArCXJldCA9IGRsYV9kYXRhX3JlYWQoZW5naW5lLT5k
cml2ZXJfY29udGV4dCwgdGFzay0+dGFza19kYXRhLA0KPiArCQkJCXRhc2stPm9wZXJhdGlv
bl9kZXNjX2FkZHIsDQo+ICsJCQkJKHZvaWQgKilncm91cC0+b3BlcmF0aW9uX2Rlc2MsDQo+
ICsJCQkJc2l6ZW9mKHVuaW9uIGRsYV9vcGVyYXRpb25fY29udGFpbmVyKSwNCj4gKwkJCQli
YXNlKTsNCj4gKwlpZiAocmV0KQ0KPiArCQlnb3RvIGV4aXQ7DQo+ICsNCj4gKwliYXNlID0g
KHNpemVvZih1bmlvbiBkbGFfc3VyZmFjZV9jb250YWluZXIpICoNCj4gKwkJCSh1aW50NjRf
dCllbmdpbmUtPm5ldHdvcmstPm51bV9vcGVyYXRpb25zICoNCj4gKwkJCSh1aW50NjRfdCly
b2lfaW5kZXgpOw0KPiArDQo+ICsJYmFzZSA9IGJhc2UgKyAoc2l6ZW9mKHVuaW9uIGRsYV9z
dXJmYWNlX2NvbnRhaW5lcikgKg0KPiArCQkJKHVpbnQ2NF90KWluZGV4KTsNCj4gKw0KPiAr
CXJldCA9IGRsYV9kYXRhX3JlYWQoZW5naW5lLT5kcml2ZXJfY29udGV4dCwgdGFzay0+dGFz
a19kYXRhLA0KPiArCQkJCXRhc2stPnN1cmZhY2VfZGVzY19hZGRyLA0KPiArCQkJCSh2b2lk
ICopZ3JvdXAtPnN1cmZhY2VfZGVzYywNCj4gKwkJCQlzaXplb2YodW5pb24gZGxhX3N1cmZh
Y2VfY29udGFpbmVyKSwgYmFzZSk7DQo+ICsJaWYgKHJldCkNCj4gKwkJZ290byBleGl0Ow0K
PiArDQo+ICsJcHJvY2Vzc29yLT5kdW1wX2NvbmZpZyhncm91cCk7DQo+ICsNCj4gK2V4aXQ6
DQo+ICsJcmV0dXJuIHJldDsNCj4gK30NCj4gKw0KPiArc3RhdGljIHZvaWQNCj4gK2RsYV9y
ZXNldF9ncm91cChzdHJ1Y3QgZGxhX2VuZ2luZSAqZW5naW5lLCBzdHJ1Y3QgZGxhX3Byb2Nl
c3Nvcl9ncm91cCAqZ3JvdXApDQo+ICt7DQo+ICsJaW50MzJfdCBpOw0KPiArDQo+ICsJZm9y
IChpID0gMDsgaSA8IERMQV9PUF9OVU07IGkrKykgew0KPiArCQlkbGFfcHV0X29wX2Rlc2Mo
ZW5naW5lLCBncm91cC0+Y29uc3VtZXJzW2ldKTsNCj4gKwkJZ3JvdXAtPmNvbnN1bWVyc1tp
XSA9IE5VTEw7DQo+ICsJfQ0KPiArDQo+ICsJZGxhX3B1dF9vcF9kZXNjKGVuZ2luZSwgZ3Jv
dXAtPmZ1c2VkX3BhcmVudCk7DQo+ICsJZ3JvdXAtPmZ1c2VkX3BhcmVudCA9IE5VTEw7DQo+
ICsNCj4gKwlkbGFfcHV0X29wX2Rlc2MoZW5naW5lLCBncm91cC0+b3BfZGVzYyk7DQo+ICsJ
Z3JvdXAtPm9wX2Rlc2MgPSBOVUxMOw0KPiArfQ0KPiArDQo+ICtzdGF0aWMgaW50DQo+ICtk
bGFfcHJlcGFyZV9vcGVyYXRpb24oc3RydWN0IGRsYV9lbmdpbmUgKmVuZ2luZSwNCj4gKwkJ
CQkJICBzdHJ1Y3QgZGxhX3Byb2Nlc3NvciAqcHJvY2Vzc29yLA0KPiArCQkJCQkgIHN0cnVj
dCBkbGFfY29tbW9uX29wX2Rlc2MgKm9wX2Rlc2MsDQo+ICsJCQkJCSAgdWludDhfdCByb2lf
aW5kZXgsIHVpbnQzMl90ICpncm91cF9udW1iZXIpDQo+ICt7DQo+ICsJaW50MzJfdCByZXQg
PSAwOw0KPiArCXVpbnQ4X3QgZ3JvdXBfaWQ7DQo+ICsJdWludDhfdCByZG1hX2lkOw0KPiAr
CXN0cnVjdCBkbGFfcHJvY2Vzc29yX2dyb3VwICpncm91cDsNCj4gKw0KPiArCS8qDQo+ICsJ
ICogSWYgbm90IGFscmVhZHkgcHJvZ3JhbW1lZCB0aGVuIGZpbmQgb3V0IGlmDQo+ICsJICog
cHJvY2Vzc29yIGlzIGZyZWUgYW5kIHdoaWNoIGdyb3VwIGlzIGZyZWUNCj4gKwkgKi8NCj4g
KwlyZXQgPSB1dGlsc19nZXRfZnJlZV9ncm91cChlbmdpbmUsIHByb2Nlc3NvciwgJmdyb3Vw
X2lkLCAmcmRtYV9pZCk7DQo+ICsJaWYgKHJldCkgew0KPiArCQlwcl9kZWJ1ZygicHJvY2Vz
c29yOiVzIHJlZ2lzdGVyIGdyb3VwcyBhcmUgYnVzeVxuIiwNCj4gKwkJCXByb2Nlc3Nvci0+
bmFtZSk7DQo+ICsJCWdvdG8gZXhpdDsNCj4gKwl9IGVsc2Ugew0KPiArCQlwcl9pbmZvKCJw
cm9jZXNzb3I6JXMgZ3JvdXA6JWQsIHJkbWFfZ3JvdXA6JWQgYXZhaWxhYmxlXG4iLA0KPiAr
CQkJCXByb2Nlc3Nvci0+bmFtZSwgZ3JvdXBfaWQsIHJkbWFfaWQpOw0KPiArCX0NCj4gKwkq
Z3JvdXBfbnVtYmVyID0gZ3JvdXBfaWQ7DQo+ICsJZ3JvdXAgPSAmcHJvY2Vzc29yLT5ncm91
cHNbZ3JvdXBfaWRdOw0KPiArDQo+ICsJLyoNCj4gKwkgKiB1cGRhdGUgb3BlcmF0aW9uIGRl
c2NyaXB0b3INCj4gKwkgKi8NCj4gKwlncm91cC0+b3BfZGVzYyA9IG9wX2Rlc2M7DQo+ICsJ
ZGxhX2dldF9yZWZjb3VudChvcF9kZXNjKTsNCj4gKwlncm91cC0+aWQgPSBncm91cF9pZDsN
Cj4gKwlncm91cC0+cm9pX2luZGV4ID0gcm9pX2luZGV4Ow0KPiArCWdyb3VwLT5yZG1hX2lk
ID0gcmRtYV9pZDsNCj4gKw0KPiArCXJldCA9IGRsYV9yZWFkX2NvbmZpZyhlbmdpbmUsIGVu
Z2luZS0+dGFzaywgcHJvY2Vzc29yLCBncm91cCk7DQo+ICsJaWYgKHJldCkNCj4gKwkJZ290
byBleGl0Ow0KPiArDQo+ICsJZ3JvdXAtPnBlbmRpbmcgPSAxOw0KPiArDQo+ICsJcHJvY2Vz
c29yLT5ncm91cF9zdGF0dXMgfD0gKDEgPDwgZ3JvdXAtPmlkKTsNCj4gKw0KPiArCXByb2Nl
c3Nvci0+cmRtYV9jaGVjayhncm91cCk7DQo+ICsJaWYgKGdyb3VwLT5pc19yZG1hX25lZWRl
ZCkgew0KPiArCQlncm91cC0+cmRtYV9pZCA9IHJkbWFfaWQ7DQo+ICsJCXByb2Nlc3Nvci0+
cmRtYV9zdGF0dXMgfD0gKDEgPDwgcmRtYV9pZCk7DQo+ICsJfQ0KPiArDQo+ICsJcHJvY2Vz
c29yLT50YWlsX29wID0gb3BfZGVzYzsNCj4gK2V4aXQ6DQo+ICsJcmV0dXJuIHJldDsNCj4g
K30NCj4gKw0KPiArc3RhdGljIGludA0KPiArZGxhX3Byb2dyYW1fb3BlcmF0aW9uKHN0cnVj
dCBkbGFfZW5naW5lICplbmdpbmUsDQo+ICsJCQkJCSAgc3RydWN0IGRsYV9wcm9jZXNzb3Ig
KnByb2Nlc3NvciwNCj4gKwkJCQkJICBzdHJ1Y3QgZGxhX3Byb2Nlc3Nvcl9ncm91cCAqZ3Jv
dXApDQo+ICt7DQo+ICsJaW50MzJfdCBpOw0KPiArCWludDMyX3QgcmV0ID0gMDsNCj4gKwlz
dHJ1Y3QgZGxhX2NvbW1vbl9vcF9kZXNjICpvcF9kZXNjOw0KPiArDQo+ICsJcHJfaW5mbygi
UHJvZ3JhbSAlcyBvcGVyYXRpb24gaW5kZXggJWQgUk9JICVkIEdyb3VwWyVkXVxuIiwNCj4g
KwkJCQkJcHJvY2Vzc29yLT5uYW1lLA0KPiArCQkJCQlncm91cC0+b3BfZGVzYy0+aW5kZXgs
DQo+ICsJCQkJCWdyb3VwLT5yb2lfaW5kZXgsDQo+ICsJCQkJCWdyb3VwLT5pZCk7DQo+ICsN
Cj4gKwlncm91cC0+cHJvZ3JhbW1pbmcgPSAxOw0KPiArDQo+ICsJb3BfZGVzYyA9IGdyb3Vw
LT5vcF9kZXNjOw0KPiArDQo+ICsJcHJvY2Vzc29yLT5zZXRfcHJvZHVjZXIoZW5naW5lLCBn
cm91cC0+aWQsIGdyb3VwLT5yZG1hX2lkKTsNCj4gKw0KPiArCXJldCA9IHByb2Nlc3Nvci0+
cHJvZ3JhbShlbmdpbmUsIGdyb3VwKTsNCj4gKwlpZiAocmV0KQ0KPiArCQlnb3RvIGV4aXQ7
DQo+ICsNCj4gKwkvKioNCj4gKwkgKiBQcmUtZmV0Y2ggY29uc3VtZXJzDQo+ICsJICovDQo+
ICsJZm9yIChpID0gMDsgaSA8IERMQV9PUF9OVU07IGkrKykgew0KPiArCQlncm91cC0+Y29u
c3VtZXJzW2ldID0gZGxhX2dldF9vcF9kZXNjKGVuZ2luZSwgZW5naW5lLT50YXNrLA0KPiAr
CQkJCQlvcF9kZXNjLT5jb25zdW1lcnNbaV0uaW5kZXgsIGksDQo+ICsJCQkJCWdyb3VwLT5y
b2lfaW5kZXgpOw0KPiArCX0NCj4gKw0KPiArCWdyb3VwLT5mdXNlZF9wYXJlbnQgPSBkbGFf
Z2V0X29wX2Rlc2MoZW5naW5lLCBlbmdpbmUtPnRhc2ssDQo+ICsJCQkJCW9wX2Rlc2MtPmZ1
c2VkX3BhcmVudC5pbmRleCwNCj4gKwkJCQkJb3BfZGVzYy0+b3BfdHlwZSAtIDEsDQo+ICsJ
CQkJCWdyb3VwLT5yb2lfaW5kZXgpOw0KPiArDQo+ICsJaWYgKGdyb3VwLT5mdXNlZF9wYXJl
bnQgIT0gTlVMTCkgew0KPiArCQlpZiAoZ3JvdXAtPmZ1c2VkX3BhcmVudC0+b3BfdHlwZSAh
PSAob3BfZGVzYy0+b3BfdHlwZSAtIDEpKSB7DQo+ICsJCQlyZXQgPSAtRUlOVkFMOw0KPiAr
CQkJZ290byBleGl0Ow0KPiArCQl9DQo+ICsJfQ0KPiArDQo+ICsJcmV0ID0gZGxhX29wX3By
b2dyYW1tZWQoZW5naW5lLCBwcm9jZXNzb3IsIGdyb3VwLCBncm91cC0+cmRtYV9pZCk7DQo+
ICsJaWYgKCFyZXQpDQo+ICsJCWdvdG8gZXhpdDsNCj4gKw0KPiArZXhpdDoNCj4gKwlncm91
cC0+cHJvZ3JhbW1pbmcgPSAwOw0KPiArCXJldHVybiByZXQ7DQo+ICt9DQo+ICsNCj4gK3N0
YXRpYyBpbnQNCj4gK2RsYV9lbmFibGVfb3BlcmF0aW9uKHN0cnVjdCBkbGFfZW5naW5lICpl
bmdpbmUsDQo+ICsJCQkJCSBzdHJ1Y3QgZGxhX3Byb2Nlc3NvciAqcHJvY2Vzc29yLA0KPiAr
CQkJCQkgc3RydWN0IGRsYV9jb21tb25fb3BfZGVzYyAqb3BfZGVzYykNCj4gK3sNCj4gKwlp
bnQzMl90IHJldCA9IDA7DQo+ICsJaW50MzJfdCBncm91cF9pZDsNCj4gKwlzdHJ1Y3QgZGxh
X3Byb2Nlc3Nvcl9ncm91cCAqZ3JvdXA7DQo+ICsNCj4gKwkvKioNCj4gKwkgKiBJZiBzb21l
IG9wZXJhdGlvbiBoYXMgcmVwb3J0ZWQgZXJyb3IgdGhlbiBza2lwDQo+ICsJICogZW5hYmxp
bmcgbmV4dCBvcGVyYXRpb25zDQo+ICsJICovDQo+ICsJaWYgKGVuZ2luZS0+c3RhdHVzKQ0K
PiArCQlnb3RvIGV4aXQ7DQo+ICsNCj4gKwkvKioNCj4gKwkgKiBGaW5kIG91dCBpZiBvcGVy
YXRpb24gaXMgYWxyZWFkeSBwcm9ncmFtbWVkDQo+ICsJICovDQo+ICsJZ3JvdXBfaWQgPSAw
Ow0KPiArCWdyb3VwID0gJnByb2Nlc3Nvci0+Z3JvdXBzW2dyb3VwX2lkXTsNCj4gKwlpZiAo
KHByb2Nlc3Nvci0+Z3JvdXBfc3RhdHVzICYgKDEgPDwgZ3JvdXBfaWQpKSAmJg0KPiArCQkJ
Z3JvdXAtPm9wX2Rlc2MtPmluZGV4ID09IG9wX2Rlc2MtPmluZGV4ICYmDQo+ICsJCQlncm91
cC0+cm9pX2luZGV4ID09IG9wX2Rlc2MtPnJvaV9pbmRleCAmJg0KPiArCQkJIWdyb3VwLT5w
ZW5kaW5nKQ0KPiArCQlnb3RvIGVuYWJsZV9vcDsNCj4gKw0KPiArCWdyb3VwX2lkID0gMTsN
Cj4gKwlncm91cCA9ICZwcm9jZXNzb3ItPmdyb3Vwc1tncm91cF9pZF07DQo+ICsJaWYgKChw
cm9jZXNzb3ItPmdyb3VwX3N0YXR1cyAmICgxIDw8IGdyb3VwX2lkKSkgJiYNCj4gKwkJCWdy
b3VwLT5vcF9kZXNjLT5pbmRleCA9PSBvcF9kZXNjLT5pbmRleCAmJg0KPiArCQkJZ3JvdXAt
PnJvaV9pbmRleCA9PSBvcF9kZXNjLT5yb2lfaW5kZXggJiYNCj4gKwkJCSFncm91cC0+cGVu
ZGluZykNCj4gKwkJZ290byBlbmFibGVfb3A7DQo+ICsNCj4gKwkvKioNCj4gKwkgKiBPcGVy
YXRpb24gaXMgbm90IHByb2dyYW1tZWQgeWV0LCBpZ25vcmUNCj4gKwkgKi8NCj4gKwlwcl9k
ZWJ1ZygiZXhpdCAlcyB3aXRob3V0IGFjdHVhbCBlbmFibGUgZHVlIHRvIHByb2Nlc3NvciAi
DQo+ICsJCQkJImhhc24ndCBiZWVuIHByb2dyYW1tZWRcbiIsIF9fZnVuY19fKTsNCj4gKwln
b3RvIGV4aXQ7DQo+ICsNCj4gK2VuYWJsZV9vcDoNCj4gKwkvKioNCj4gKwkgKiBJZiB0aGlz
IGV2ZW50IGlzIHRyaWdnZXJlZCBhcyBwYXJ0IG9mIHByb2dyYW1taW5nIHNhbWUNCj4gKwkg
KiBncm91cCB0aGVuIHNraXAgZW5hYmxlLCBpdCB3aWxsIGdldCBlbmFibGVkIGFmdGVyIHBy
b2dyYW1taW5nDQo+ICsJICogaXMgY29tcGxldGUNCj4gKwkgKi8NCj4gKwlpZiAoZ3JvdXAt
PnByb2dyYW1taW5nKQ0KPiArCQlnb3RvIGV4aXQ7DQo+ICsNCj4gKwlpZiAoZ3JvdXAtPmFj
dGl2ZSkgew0KPiArCQlwcl9kZWJ1ZygiUHJvY2Vzc29yOiVzIGFscmVhZHkgZW5hYmxlZCBv
biBncm91cDolZFxuIiwNCj4gKwkJCXByb2Nlc3Nvci0+bmFtZSwgZ3JvdXBfaWQpOw0KPiAr
CQlnb3RvIGV4aXQ7DQo+ICsJfQ0KPiArDQo+ICsJcHJfaW5mbygiRW5hYmxlICVzIG9wZXJh
dGlvbiBpbmRleCAlZCBST0kgJWRcbiIsDQo+ICsJCQkJCXByb2Nlc3Nvci0+bmFtZSwNCj4g
KwkJCQkJZ3JvdXAtPm9wX2Rlc2MtPmluZGV4LA0KPiArCQkJCQlncm91cC0+cm9pX2luZGV4
KTsNCj4gKw0KPiArCXByb2Nlc3Nvci0+c2V0X3Byb2R1Y2VyKGVuZ2luZSwgZ3JvdXAtPmlk
LCBncm91cC0+cmRtYV9pZCk7DQo+ICsNCj4gKwlyZXQgPSBwcm9jZXNzb3ItPmVuYWJsZShl
bmdpbmUsIGdyb3VwKTsNCj4gKwlpZiAocmV0KQ0KPiArCQlnb3RvIGV4aXQ7DQo+ICsNCj4g
KwlyZXQgPSBkbGFfb3BfZW5hYmxlZChlbmdpbmUsIGdyb3VwKTsNCj4gK2V4aXQ6DQo+ICsJ
cmV0dXJuIHJldDsNCj4gK30NCj4gKw0KPiArc3RhdGljIGludA0KPiArZGxhX3N1Ym1pdF9v
cGVyYXRpb24oc3RydWN0IGRsYV9lbmdpbmUgKmVuZ2luZSwNCj4gKwkJCQkJIHN0cnVjdCBk
bGFfcHJvY2Vzc29yICpwcm9jZXNzb3IsDQo+ICsJCQkJCSBzdHJ1Y3QgZGxhX2NvbW1vbl9v
cF9kZXNjICpvcF9kZXNjLA0KPiArCQkJCQkgdWludDhfdCByb2lfaW5kZXgpDQo+ICt7DQo+
ICsJaW50MzJfdCBlcnI7DQo+ICsJdWludDMyX3QgZ3JvdXBfaWQgPSAwOw0KPiArDQo+ICsJ
cHJfaW5mbygiUHJlcGFyZSAlcyBvcGVyYXRpb24gaW5kZXggJWQgUk9JICVkIGRlcF9jb3Vu
dCAlZFxuIiwNCj4gKwkJCXByb2Nlc3Nvci0+bmFtZSwgb3BfZGVzYy0+aW5kZXgsIHJvaV9p
bmRleCwNCj4gKwkJCW9wX2Rlc2MtPmRlcGVuZGVuY3lfY291bnQpOw0KPiArCWVyciA9IGRs
YV9wcmVwYXJlX29wZXJhdGlvbihlbmdpbmUsIHByb2Nlc3Nvciwgb3BfZGVzYywgcm9pX2lu
ZGV4LCAmZ3JvdXBfaWQpOw0KPiArCWlmIChlcnIpDQo+ICsJCWdvdG8gZXhpdDsNCj4gKw0K
PiArCWlmICghcHJvY2Vzc29yLT5pc19yZWFkeShwcm9jZXNzb3IsICZwcm9jZXNzb3ItPmdy
b3Vwc1tncm91cF9pZF0pKQ0KPiArCQlnb3RvIGV4aXQ7DQo+ICsNCj4gKwllcnIgPSBkbGFf
cHJvZ3JhbV9vcGVyYXRpb24oZW5naW5lLCBwcm9jZXNzb3IsICZwcm9jZXNzb3ItPmdyb3Vw
c1tncm91cF9pZF0pOw0KPiArCWlmIChlcnIpDQo+ICsJCWdvdG8gZXhpdDsNCj4gKw0KPiAr
CWlmIChvcF9kZXNjLT5kZXBlbmRlbmN5X2NvdW50ID09IDApDQo+ICsJCWVyciA9IGRsYV9l
bmFibGVfb3BlcmF0aW9uKGVuZ2luZSwgcHJvY2Vzc29yLCBvcF9kZXNjKTsNCj4gKw0KPiAr
ZXhpdDoNCj4gKwlyZXR1cm4gZXJyOw0KPiArfQ0KPiArDQo+ICsvKioNCj4gKyAqIERlcXVl
dWUgbmV4dCBvcGVyYXRpb24gb2Ygc2FtZSB0eXBlIGZyb20gbGlzdCBvZiBvcGVyYXRpb25z
DQo+ICsgKi8NCj4gK3N0YXRpYyBpbnQzMl90DQo+ICtkbGFfZGVxdWV1ZV9vcGVyYXRpb24o
c3RydWN0IGRsYV9lbmdpbmUgKmVuZ2luZSwNCj4gKwkJCQkJICBzdHJ1Y3QgZGxhX3Byb2Nl
c3NvciAqcHJvY2Vzc29yKQ0KPiArew0KPiArCWludDMyX3QgcmV0ID0gMDsNCj4gKwlpbnQx
Nl90IGluZGV4Ow0KPiArCXN0cnVjdCBkbGFfY29tbW9uX29wX2Rlc2MgKmNvbnN1bWVyOw0K
PiArDQo+ICsJaWYgKGVuZ2luZS0+c3RhdHVzKSB7DQo+ICsJCXByX2RlYnVnKCJTa2lwIGRl
cXVldWUgb3AgYXMgZW5naW5lIGhhcyByZXBvcnRlZCBlcnJvclxuIik7DQo+ICsJCWdvdG8g
ZXhpdDsNCj4gKwl9DQo+ICsNCj4gKwkvKioNCj4gKwkgKiBJZiB3ZSBhcmUgZG9uZSBwcm9j
ZXNzaW5nIGFsbCBST0lzIGZvciBjdXJyZW50IG9wIHRoZW4NCj4gKwkgKiBsb2FkIG5leHQg
b3Agb2Ygc2FtZSB0eXBlIG90aGVyd2lzZSByZWxvYWQgc2FtZSBvcCBmb3INCj4gKwkgKiBu
ZXh0IFJPSS4NCj4gKwkgKi8NCj4gKwlpZiAocHJvY2Vzc29yLT5yb2lfaW5kZXggPT0gKGVu
Z2luZS0+bmV0d29yay0+bnVtX3JvaXMgLSAxKSkgew0KPiArCQlpbmRleCA9IHByb2Nlc3Nv
ci0+dGFpbF9vcC0+Y29uc3VtZXJzW3Byb2Nlc3Nvci0+b3BfdHlwZV0uaW5kZXg7DQo+ICsJ
CWlmICgtMSA9PSBpbmRleCkgew0KPiArCQkJLyoqDQo+ICsJCQkgKiBJdCBtZWFucyB3ZSBh
cmUgZG9uZSBwcm9jZXNzaW5nDQo+ICsJCQkgKiBhbGwgb3BzIG9mIHRoaXMgdHlwZQ0KPiAr
CQkJICovDQo+ICsJCQlwcl9kZWJ1ZygiZXhpdCAlcyBhcyB0aGVyZSdzIG5vIGZ1cnRoZXIg
b3BlcmF0aW9uXG4iLA0KPiArCQkJCXByb2Nlc3Nvci0+bmFtZSk7DQo+ICsJCQlnb3RvIGV4
aXQ7DQo+ICsJCX0NCj4gKwkJcHJvY2Vzc29yLT5yb2lfaW5kZXggPSAwOw0KPiArCX0gZWxz
ZSB7DQo+ICsJCXByb2Nlc3Nvci0+cm9pX2luZGV4Kys7DQo+ICsJCWluZGV4ID0gcHJvY2Vz
c29yLT50YWlsX29wLT5pbmRleDsNCj4gKwl9DQo+ICsNCj4gKwlwcl9kZWJ1ZygiRGVxdWV1
ZSBvcCBmcm9tICVzIHByb2Nlc3NvciwgaW5kZXg9JWQgUk9JPSVkXG4iLA0KPiArCQkJcHJv
Y2Vzc29yLT5uYW1lLCBpbmRleCwgcHJvY2Vzc29yLT5yb2lfaW5kZXgpOw0KPiArDQo+ICsJ
LyoqDQo+ICsJICogR2V0IG9wZXJhdGlvbiBkZXNjcmlwdG9yDQo+ICsJICovDQo+ICsJY29u
c3VtZXIgPSBkbGFfZ2V0X29wX2Rlc2MoZW5naW5lLCBlbmdpbmUtPnRhc2ssIGluZGV4LA0K
PiArCQkJCXByb2Nlc3Nvci0+b3BfdHlwZSwgcHJvY2Vzc29yLT5yb2lfaW5kZXgpOw0KPiAr
CWlmIChjb25zdW1lciA9PSBOVUxMKSB7DQo+ICsJCXJldCA9IC1FTk9NRU07DQo+ICsJCXBy
X2VycigiRmFpbGVkIHRvIGFsbG9jYXRlIG9wX2Rlc2MiKTsNCj4gKwkJZ290byBleGl0Ow0K
PiArCX0NCj4gKw0KPiArCXJldCA9IGRsYV9zdWJtaXRfb3BlcmF0aW9uKGVuZ2luZSwgcHJv
Y2Vzc29yLCBjb25zdW1lciwgcHJvY2Vzc29yLT5yb2lfaW5kZXgpOw0KPiArCWRsYV9wdXRf
b3BfZGVzYyhlbmdpbmUsIGNvbnN1bWVyKTsNCj4gKw0KPiArZXhpdDoNCj4gKwlyZXR1cm4g
cmV0Ow0KPiArfQ0KPiArDQo+ICtzdGF0aWMgaW50DQo+ICtkbGFfdXBkYXRlX2RlcGVuZGVu
Y3koc3RydWN0IGRsYV9lbmdpbmUgKmVuZ2luZSwNCj4gKwkJCQkJICBzdHJ1Y3QgZGxhX2Nv
bnN1bWVyICpjb25zdW1lciwNCj4gKwkJCQkJICBzdHJ1Y3QgZGxhX2NvbW1vbl9vcF9kZXNj
ICpvcF9kZXNjLA0KPiArCQkJCQkgIHVpbnQ4X3QgZXZlbnQsIHVpbnQ4X3Qgcm9pX2luZGV4
KQ0KPiArew0KPiArCWludDMyX3QgcmV0ID0gMDsNCj4gKwlzdHJ1Y3QgZGxhX3Byb2Nlc3Nv
ciAqcHJvY2Vzc29yOw0KPiArDQo+ICsJaWYgKGNvbnN1bWVyLT5pbmRleCA9PSAtMSkNCj4g
KwkJZ290byBleGl0Ow0KPiArDQo+ICsJLyogVXBkYXRlIGRlcGVuZGVuY3kgb25seSBpZiBl
dmVudCBtYXRjaGVzICovDQo+ICsJaWYgKGV2ZW50ICE9IGNvbnN1bWVyLT5ldmVudCkNCj4g
KwkJZ290byBleGl0Ow0KPiArDQo+ICsJLyoqDQo+ICsJICogSWYgY29uc3VtZXIgaW5kZXgg
aXMgdmFsaWQgYnV0IG9wIGRlc2MgaXMgTlVMTCBtZWFucw0KPiArCSAqIG9wIGRlc2MgZm9y
IGNvbnN1bWVyIHdhcyBub3QgcHJlLWZldGNoZWQNCj4gKwkgKi8NCj4gKwlpZiAob3BfZGVz
YyA9PSBOVUxMKSB7DQo+ICsJCXJldCA9IC1FSU5WQUw7DQo+ICsJCXByX2VycigiT3BlcmF0
aW9uIGRlc2NyaXB0b3IgaXMgTlVMTCwgY29uc3VtZXIgaW5kZXggJWQiLA0KPiArCQkJCWNv
bnN1bWVyLT5pbmRleCk7DQo+ICsJCWdvdG8gZXhpdDsNCj4gKwl9DQo+ICsNCj4gKwlwcl9k
ZWJ1ZygiVXBkYXRlIGRlcGVuZGVuY3kgb3BlcmF0aW9uIGluZGV4ICVkIFJPSSAlZCBERVBf
Q09VTlQ9JWRcbiIsDQo+ICsJCQkJCW9wX2Rlc2MtPmluZGV4LCBvcF9kZXNjLT5yb2lfaW5k
ZXgsDQo+ICsJCQkJCW9wX2Rlc2MtPmRlcGVuZGVuY3lfY291bnQpOw0KPiArCW9wX2Rlc2Mt
PmRlcGVuZGVuY3lfY291bnQtLTsNCj4gKw0KPiArCWlmIChvcF9kZXNjLT5kZXBlbmRlbmN5
X2NvdW50ID09IDApIHsNCj4gKwkJcHJvY2Vzc29yID0gJmVuZ2luZS0+cHJvY2Vzc29yc1tv
cF9kZXNjLT5vcF90eXBlXTsNCj4gKwkJcHJfZGVidWcoImVuYWJsZSAlcyBpbiAlcyBhcyBk
ZXBkZW5jeSBhcmUgcmVzb2x2ZWRcbiIsDQo+ICsJCQlwcm9jZXNzb3ItPm5hbWUsIF9fZnVu
Y19fKTsNCj4gKw0KPiArCQlyZXQgPSBkbGFfZW5hYmxlX29wZXJhdGlvbihlbmdpbmUsIHBy
b2Nlc3Nvciwgb3BfZGVzYyk7DQo+ICsJCWlmIChyZXQpDQo+ICsJCQlnb3RvIGV4aXQ7DQo+
ICsJfQ0KPiArZXhpdDoNCj4gKwlyZXR1cm4gcmV0Ow0KPiArfQ0KPiArDQo+ICtzdGF0aWMg
aW50DQo+ICtkbGFfdXBkYXRlX2NvbnN1bWVycyhzdHJ1Y3QgZGxhX2VuZ2luZSAqZW5naW5l
LA0KPiArCQkJCQkgc3RydWN0IGRsYV9wcm9jZXNzb3JfZ3JvdXAgKmdyb3VwLA0KPiArCQkJ
CQkgc3RydWN0IGRsYV9jb21tb25fb3BfZGVzYyAqb3AsDQo+ICsJCQkJCSB1aW50OF90IGV2
ZW50KQ0KPiArew0KPiArCWludDMyX3QgaTsNCj4gKwlpbnQzMl90IHJldCA9IDA7DQo+ICsN
Cj4gKwlpZiAoZW5naW5lLT5zdGF0dXMpIHsNCj4gKwkJcHJfZGVidWcoIlNraXAgdXBkYXRl
IGFzIGVuZ2luZSBoYXMgcmVwb3J0ZWQgZXJyb3JcbiIpOw0KPiArCQlnb3RvIGV4aXQ7DQo+
ICsJfQ0KPiArDQo+ICsJZm9yIChpID0gMDsgaSA8IERMQV9PUF9OVU07IGkrKykgew0KPiAr
CQlyZXQgPSBkbGFfdXBkYXRlX2RlcGVuZGVuY3koZW5naW5lLCAmb3AtPmNvbnN1bWVyc1tp
XSwNCj4gKwkJCQkJCWdyb3VwLT5jb25zdW1lcnNbaV0sDQo+ICsJCQkJCQlldmVudCwgZ3Jv
dXAtPnJvaV9pbmRleCk7DQo+ICsJCWlmIChyZXQpIHsNCj4gKwkJCXByX2VycigiRmFpbGVk
IHRvIHVwZGF0ZSBkZXBlbmRlbmN5IGZvciBjb25zdW1lciAlZCwgUk9JICVkIiwNCj4gKwkJ
CQkgICBpLCBncm91cC0+cm9pX2luZGV4KTsNCj4gKwkJCWdvdG8gZXhpdDsNCj4gKwkJfQ0K
PiArCX0NCj4gKw0KPiArCXJldCA9IGRsYV91cGRhdGVfZGVwZW5kZW5jeShlbmdpbmUsICZv
cC0+ZnVzZWRfcGFyZW50LA0KPiArCQkJCQlncm91cC0+ZnVzZWRfcGFyZW50LA0KPiArCQkJ
CQlldmVudCwgZ3JvdXAtPnJvaV9pbmRleCk7DQo+ICsJaWYgKHJldCkgew0KPiArCQlwcl9l
cnIoIkZhaWxlZCB0byB1cGRhdGUgZGVwZW5kZW5jeSBmb3IgIg0KPiArCQkJImZ1c2VkIHBh
cmVudCwgUk9JICVkIiwgZ3JvdXAtPnJvaV9pbmRleCk7DQo+ICsJCWdvdG8gZXhpdDsNCj4g
Kwl9DQo+ICsNCj4gK2V4aXQ6DQo+ICsJcmV0dXJuIHJldDsNCj4gK30NCj4gKw0KPiArLyoq
DQo+ICsgKiBIYW5kbGUgb3BlcmF0aW9uIGNvbXBsZXRpb24gbm90aWZpY2F0aW9uDQo+ICsg
Ki8NCj4gK2ludA0KPiArZGxhX29wX2NvbXBsZXRpb24oc3RydWN0IGRsYV9lbmdpbmUgKmVu
Z2luZSwNCj4gKwkJCQkgIHN0cnVjdCBkbGFfcHJvY2Vzc29yICpwcm9jZXNzb3IsDQo+ICsJ
CQkJICBzdHJ1Y3QgZGxhX3Byb2Nlc3Nvcl9ncm91cCAqZ3JvdXApDQo+ICt7DQo+ICsJaW50
MzJfdCByZXQ7DQo+ICsJc3RydWN0IGRsYV90YXNrICp0YXNrOw0KPiArCXN0cnVjdCBkbGFf
Y29tbW9uX29wX2Rlc2MgKm9wX2Rlc2M7DQo+ICsJc3RydWN0IGRsYV9wcm9jZXNzb3JfZ3Jv
dXAgKm5leHRfZ3JvdXA7DQo+ICsNCj4gKwlwcl9pbmZvKCJDb21wbGV0ZWQgJXMgb3BlcmF0
aW9uIGluZGV4ICVkIFJPSSAlZFxuIiwNCj4gKwkJCXByb2Nlc3Nvci0+bmFtZSwgZ3JvdXAt
Pm9wX2Rlc2MtPmluZGV4LA0KPiArCQkJZ3JvdXAtPnJvaV9pbmRleCk7DQo+ICsNCj4gKwl0
YXNrID0gZW5naW5lLT50YXNrOw0KPiArDQo+ICsJLyoqDQo+ICsJICogTWFyayBPUCBhcyBk
b25lIG9ubHkgd2hlbiBhbGwgUk9JcyBhcmUgZG9uZSBmb3IgdGhhdA0KPiArCSAqIG9wZXJh
dGlvbg0KPiArCSAqLw0KPiArCWlmIChncm91cC0+cm9pX2luZGV4ID09IChlbmdpbmUtPm5l
dHdvcmstPm51bV9yb2lzIC0gMSkpDQo+ICsJCWVuZ2luZS0+bnVtX3Byb2NfaHdsKys7DQo+
ICsNCj4gKwlvcF9kZXNjID0gZ3JvdXAtPm9wX2Rlc2M7DQo+ICsNCj4gKwkvKioNCj4gKwkg
KiBHZXQgYW4gZXh0cmEgcmVmZXJlbmNlIGNvdW50IHRvIGtlZXAgb3AgZGVzY3JpcHRvcg0K
PiArCSAqIGluIGNhY2hlIHVudGlsIHRoaXMgb3BlcmF0aW9uIGNvbXBsZXRlcw0KPiArCSAq
Lw0KPiArCWRsYV9nZXRfcmVmY291bnQob3BfZGVzYyk7DQo+ICsNCj4gKwlwcm9jZXNzb3It
Pmdyb3VwX3N0YXR1cyAmPSB+KDEgPDwgZ3JvdXAtPmlkKTsNCj4gKwlpZiAoZ3JvdXAtPmlz
X3JkbWFfbmVlZGVkKSB7DQo+ICsJCWdyb3VwLT5pc19yZG1hX25lZWRlZCA9IDA7DQo+ICsJ
CXByb2Nlc3Nvci0+cmRtYV9zdGF0dXMgJj0gfigxIDw8IGdyb3VwLT5yZG1hX2lkKTsNCj4g
KwkJZ3JvdXAtPnJkbWFfaWQgPSAwOw0KPiArCX0NCj4gKwlncm91cC0+YWN0aXZlID0gMDsN
Cj4gKwlncm91cC0+bHV0X2luZGV4ID0gLTE7DQo+ICsJcHJvY2Vzc29yLT5sYXN0X2dyb3Vw
ID0gZ3JvdXAtPmlkOw0KPiArDQo+ICsJLyoqDQo+ICsJICogU3dpdGNoIGNvbnN1bWVyIHBv
aW50ZXIgdG8gbmV4dCBncm91cA0KPiArCSAqLw0KPiArCXByb2Nlc3Nvci0+Y29uc3VtZXJf
cHRyID0gIWdyb3VwLT5pZDsNCj4gKw0KPiArCS8qKg0KPiArCSAqIHVwZGF0ZSBkZXBlbmRl
bmN5IGdyYXBoIGZvciB0aGlzIHRhc2sNCj4gKwkgKiBUT0RPOiBBZGQgcHJvcGVyIGVycm9y
IGhhbmRsaW5nDQo+ICsJICovDQo+ICsJcmV0ID0gZGxhX3VwZGF0ZV9jb25zdW1lcnMoZW5n
aW5lLCBncm91cCwgb3BfZGVzYywgRExBX0VWRU5UX09QX0NPTVBMRVRFRCk7DQo+ICsJaWYg
KHJldCkNCj4gKwkJZ290byBleGl0Ow0KPiArDQo+ICsJcHJfaW5mbygiJWQgSFdMcyBkb25l
LCB0b3RhbGx5ICVkIGxheWVyc1xuIiwNCj4gKwkJCQllbmdpbmUtPm51bV9wcm9jX2h3bCwN
Cj4gKwkJCQllbmdpbmUtPm5ldHdvcmstPm51bV9vcGVyYXRpb25zKTsNCj4gKw0KPiArCS8q
IGZyZWUgb3BlcmF0aW9uIGRlc2NyaXB0b3IgZnJvbSBjYWNoZSAqLw0KPiArCWRsYV9yZXNl
dF9ncm91cChlbmdpbmUsIGdyb3VwKTsNCj4gKw0KPiArCS8qIGlmIG5vdCBod2wgcGVuZGlu
ZywgbWVhbnMgbmV0d29yayBjb21wbGV0ZWQgKi8NCj4gKwlpZiAoZW5naW5lLT5uZXR3b3Jr
LT5udW1fb3BlcmF0aW9ucyA9PSBlbmdpbmUtPm51bV9wcm9jX2h3bCkgew0KPiArCQlkbGFf
cHV0X29wX2Rlc2MoZW5naW5lLCBvcF9kZXNjKTsNCj4gKwkJZ290byBleGl0Ow0KPiArCX0N
Cj4gKw0KPiArCW5leHRfZ3JvdXAgPSAmcHJvY2Vzc29yLT5ncm91cHNbIWdyb3VwLT5pZF07
DQo+ICsJaWYgKG5leHRfZ3JvdXAtPnBlbmRpbmcgJiYgIWVuZ2luZS0+c3RhdHVzKSB7DQo+
ICsJCS8qKg0KPiArCQkgKiBOZXh0IGdyb3VwIG11c3QgYmUgcmVhZHkgaGVyZSBmb3IgcHJv
Z3JhbW1pbmcsDQo+ICsJCSAqIGlmIG5vdCBtZWFucyBpdCBpcyBhbiBlcnJvcg0KPiArCQkg
Ki8NCj4gKwkJaWYgKCFwcm9jZXNzb3ItPmlzX3JlYWR5KHByb2Nlc3NvciwgbmV4dF9ncm91
cCkpDQo+ICsJCQlnb3RvIGRlcXVldWVfb3A7DQo+ICsNCj4gKwkJcmV0ID0gZGxhX3Byb2dy
YW1fb3BlcmF0aW9uKGVuZ2luZSwgcHJvY2Vzc29yLCBuZXh0X2dyb3VwKTsNCj4gKwkJaWYg
KHJldCkNCj4gKwkJCWdvdG8gZXhpdDsNCj4gKw0KPiArCQlpZiAobmV4dF9ncm91cC0+b3Bf
ZGVzYy0+ZGVwZW5kZW5jeV9jb3VudCAhPSAwKQ0KPiArCQkJZ290byBkZXF1ZXVlX29wOw0K
PiArDQo+ICsJCXJldCA9IGRsYV9lbmFibGVfb3BlcmF0aW9uKGVuZ2luZSwgcHJvY2Vzc29y
LA0KPiArCQkJCQkgICBuZXh0X2dyb3VwLT5vcF9kZXNjKTsNCj4gKwkJaWYgKHJldCkNCj4g
KwkJCWdvdG8gZXhpdDsNCj4gKwl9DQo+ICsNCj4gK2RlcXVldWVfb3A6DQo+ICsJLyogZGVx
dWV1ZSBvcGVyYXRpb24gZnJvbSB0aGlzIHByb2Nlc3NvciAqLw0KPiArCXJldCA9IGRsYV9k
ZXF1ZXVlX29wZXJhdGlvbihlbmdpbmUsIHByb2Nlc3Nvcik7DQo+ICsNCj4gK2V4aXQ6DQo+
ICsJZGxhX3B1dF9vcF9kZXNjKGVuZ2luZSwgb3BfZGVzYyk7DQo+ICsJcHJfZGVidWcoIkV4
aXQ6JXMgcHJvY2Vzc29yICVzIGdyb3VwJXUgc3RhdHVzPSVkXG4iLA0KPiArCQkJCV9fZnVu
Y19fLCBwcm9jZXNzb3ItPm5hbWUsDQo+ICsJCQkJZ3JvdXAtPmlkLCByZXQpOw0KPiArDQo+
ICsJcmV0dXJuIHJldDsNCj4gK30NCj4gKw0KPiArLyoqDQo+ICsgKiBSZWFkIG5ldHdvcmsg
Y29uZmlndXJhdGlvbiBmcm9tIERSQU0sIG5ldHdvcmsgZGVzY3JpcHRvciBhZGRyZXNzDQo+
ICsgKiBpcyBhbHdheXMgZmlyc3QgaW4gdGhlIGFkZHJlc3MgbGlzdC4gTmV0d29yayBjb25m
aWd1cmF0aW9uIGNvbnRhaW5zDQo+ICsgKiBvZmZzZXQgaW4gYWRkcmVzcyBsaXN0IGZvciBh
ZGRyZXNzZXMgb2Ygb3RoZXIgbGlzdHMgdXNlZCB0bw0KPiArICogZXhlY3V0ZSBuZXR3b3Jr
DQo+ICsgKg0KPiArICogQGVuZ2luZTogRW5naW5lIGluc3RhbmNlDQo+ICsgKiBAcmV0dXJu
OiAwIGZvciBzdWNjZXNzDQo+ICsgKi8NCj4gK3N0YXRpYyBpbnQNCj4gK2RsYV9yZWFkX25l
dHdvcmtfY29uZmlnKHN0cnVjdCBkbGFfZW5naW5lICplbmdpbmUpDQo+ICt7DQo+ICsJaW50
MzJfdCByZXQ7DQo+ICsJdWludDY0X3QgbmV0d29ya19hZGRyOw0KPiArCXN0cnVjdCBkbGFf
dGFzayAqdGFzayA9IGVuZ2luZS0+dGFzazsNCj4gKw0KPiArCS8qKg0KPiArCSAqIFJlYWQg
YWRkcmVzcyBsaXN0IGZyb20gRFJBTSB0byBETUVNDQo+ICsJICovDQo+ICsJcmV0ID0gZGxh
X3JlYWRfYWRkcmVzc19saXN0KGVuZ2luZSk7DQo+ICsJaWYgKHJldCkgew0KPiArCQlwcl9l
cnIoIkZhaWxlZCB0byByZWFkIGFkZHJlc3MgbGlzdCIpOw0KPiArCQlnb3RvIGV4aXQ7DQo+
ICsJfQ0KPiArDQo+ICsJLyoqDQo+ICsJICogUmVhZCBuZXR3b3JrIGRlc2NyaXB0b3IgYWRk
cmVzcyBmcm9tIGFkZHJlc3MgbGlzdC4gSXQgaXMgYWx3YXlzDQo+ICsJICogYXQgaW5kZXgg
MC4NCj4gKwkgKi8NCj4gKwlyZXQgPSBkbGFfZ2V0X2RtYV9hZGRyZXNzKGVuZ2luZS0+ZHJp
dmVyX2NvbnRleHQsIHRhc2stPnRhc2tfZGF0YSwNCj4gKwkJCQkJCQkgIDAsICh2b2lkICop
Jm5ldHdvcmtfYWRkciwNCj4gKwkJCQkJCQkgIERFU1RJTkFUSU9OX1BST0NFU1NPUik7DQo+
ICsJaWYgKHJldCkgew0KPiArCQlwcl9lcnIoIkZhaWxlZCB0byByZWFkIG5ldHdvcmsgZGVz
YyBhZGRyZXNzIik7DQo+ICsJCWdvdG8gZXhpdDsNCj4gKwl9DQo+ICsNCj4gKwkvKioNCj4g
KwkgKiBSZWFkIG5ldHdvcmsgZGVzY3JpcHRvciwgaXQgaGFzIGluZm9ybWF0aW9uIGZvciBh
IG5ldHdvcmsNCj4gKwkgKiBzdWNoIGFzIGFsbCBhZGRyZXNzIGluZGV4ZXMuDQo+ICsJICov
DQo+ICsJcmV0ID0gZGxhX2RhdGFfcmVhZChlbmdpbmUtPmRyaXZlcl9jb250ZXh0LCB0YXNr
LT50YXNrX2RhdGEsDQo+ICsJCQkJCQluZXR3b3JrX2FkZHIsICh2b2lkICopJm5ldHdvcmss
DQo+ICsJCQkJCQlzaXplb2Yoc3RydWN0IGRsYV9uZXR3b3JrX2Rlc2MpLCAwKTsNCj4gKwlp
ZiAocmV0KSB7DQo+ICsJCXByX2VycigiRmFpbGVkIHRvIHJlYWQgbmV0d29yayBkZXNjcmlw
dG9yIik7DQo+ICsJCWdvdG8gZXhpdDsNCj4gKwl9DQo+ICsNCj4gKwlpZiAobmV0d29yay5u
dW1fb3BlcmF0aW9ucyA9PSAwKQ0KPiArCQlnb3RvIGV4aXQ7DQo+ICsNCj4gKwkvKioNCj4g
KwkgKiBSZWFkIG9wZXJhdGlvbiBkZXNjcmlwdG9yIGxpc3QgYWRkcmVzcyBmcm9tIGFkZHJl
c3MgbGlzdA0KPiArCSAqLw0KPiArCXJldCA9IGRsYV9nZXRfZG1hX2FkZHJlc3MoZW5naW5l
LT5kcml2ZXJfY29udGV4dCwgdGFzay0+dGFza19kYXRhLA0KPiArCQkJCQkJCSAgbmV0d29y
ay5vcGVyYXRpb25fZGVzY19pbmRleCwNCj4gKwkJCQkJCQkgICh2b2lkICopJnRhc2stPm9w
ZXJhdGlvbl9kZXNjX2FkZHIsDQo+ICsJCQkJCQkJICBERVNUSU5BVElPTl9QUk9DRVNTT1Ip
Ow0KPiArCWlmIChyZXQpIHsNCj4gKwkJcHJfZXJyKCJGYWlsZWQgdG8gcmVhZCBvcGVyYXRp
b24gZGVzYyBsaXN0IGFkZHJlc3MiKTsNCj4gKwkJZ290byBleGl0Ow0KPiArCX0NCj4gKw0K
PiArCS8qKg0KPiArCSAqIFJlYWQgc3VyZmFjZSBkZXNjcmlwdG9yIGxpc3QgYWRkcmVzcyBm
cm9tIGFkZHJlc3MgbGlzdA0KPiArCSAqLw0KPiArCXJldCA9IGRsYV9nZXRfZG1hX2FkZHJl
c3MoZW5naW5lLT5kcml2ZXJfY29udGV4dCwgdGFzay0+dGFza19kYXRhLA0KPiArCQkJCQkJ
CSAgbmV0d29yay5zdXJmYWNlX2Rlc2NfaW5kZXgsDQo+ICsJCQkJCQkJICAodm9pZCAqKSZ0
YXNrLT5zdXJmYWNlX2Rlc2NfYWRkciwNCj4gKwkJCQkJCQkgIERFU1RJTkFUSU9OX1BST0NF
U1NPUik7DQo+ICsJaWYgKHJldCkgew0KPiArCQlwcl9lcnIoIkZhaWxlZCB0byByZWFkIHN1
cmZhY2UgZGVzYyBsaXN0IGFkZHJlc3MiKTsNCj4gKwkJZ290byBleGl0Ow0KPiArCX0NCj4g
Kw0KPiArCS8qKg0KPiArCSAqIFJlYWQgZGVwZW5kZW5jeSBncmFwaCBhZGRyZXNzIGZyb20g
YWRkcmVzcyBsaXN0DQo+ICsJICovDQo+ICsJcmV0ID0gZGxhX2dldF9kbWFfYWRkcmVzcyhl
bmdpbmUtPmRyaXZlcl9jb250ZXh0LCB0YXNrLT50YXNrX2RhdGEsDQo+ICsJCQkJCQkJICBu
ZXR3b3JrLmRlcGVuZGVuY3lfZ3JhcGhfaW5kZXgsDQo+ICsJCQkJCQkJICAodm9pZCAqKSZ0
YXNrLT5kZXBlbmRlbmN5X2dyYXBoX2FkZHIsDQo+ICsJCQkJCQkJICBERVNUSU5BVElPTl9Q
Uk9DRVNTT1IpOw0KPiArCWlmIChyZXQpIHsNCj4gKwkJcHJfZXJyKCJGYWlsZWQgdG8gcmVh
ZHkgZGVwZW5kZW5jeSBncmFwaCBhZGRyZXNzIik7DQo+ICsJCWdvdG8gZXhpdDsNCj4gKwl9
DQo+ICsNCj4gKwkvKioNCj4gKwkgKiBSZWFkIExVVCBkYXRhIGxpc3QgYWRkcmVzcyBmcm9t
IGFkZHJlc3MgbGlzdA0KPiArCSAqLw0KPiArCWlmIChuZXR3b3JrLm51bV9sdXRzKSB7DQo+
ICsJCXJldCA9IGRsYV9nZXRfZG1hX2FkZHJlc3MoZW5naW5lLT5kcml2ZXJfY29udGV4dCwN
Cj4gKwkJCQkJCQkJICB0YXNrLT50YXNrX2RhdGEsDQo+ICsJCQkJCQkJCSAgbmV0d29yay5s
dXRfZGF0YV9pbmRleCwNCj4gKwkJCQkJCQkJICAodm9pZCAqKSZ0YXNrLT5sdXRfZGF0YV9h
ZGRyLA0KPiArCQkJCQkJCQkgIERFU1RJTkFUSU9OX1BST0NFU1NPUik7DQo+ICsJCWlmIChy
ZXQpIHsNCj4gKwkJCXByX2VycigiRmFpbGVkIHRvIHJlYWQgTFVUIGxpc3QgYWRkcmVzcyIp
Ow0KPiArCQkJZ290byBleGl0Ow0KPiArCQl9DQo+ICsJfQ0KPiArDQo+ICsJLyoqDQo+ICsJ
ICogUmVhZCBhZGRyZXNzIGZvciBST0kgaW5mb3JtYXRpb24NCj4gKwkgKi8NCj4gKwlpZiAo
bmV0d29yay5keW5hbWljX3JvaSkgew0KPiArCQkvKioNCj4gKwkJICogUmVhZCBST0kgYXJy
YXkgYWRkcmVzcyBmcm9tIGFkZHJlc3MgbGlzdA0KPiArCQkgKi8NCj4gKwkJcmV0ID0gZGxh
X2dldF9kbWFfYWRkcmVzcyhlbmdpbmUtPmRyaXZlcl9jb250ZXh0LA0KPiArCQkJCQkJCQkg
IHRhc2stPnRhc2tfZGF0YSwNCj4gKwkJCQkJCQkJICBuZXR3b3JrLnJvaV9hcnJheV9pbmRl
eCwNCj4gKwkJCQkJCQkJICAodm9pZCAqKSZ0YXNrLT5yb2lfYXJyYXlfYWRkciwNCj4gKwkJ
CQkJCQkJICBERVNUSU5BVElPTl9QUk9DRVNTT1IpOw0KPiArCQlpZiAocmV0KSB7DQo+ICsJ
CQlwcl9lcnIoIkZhaWxlZCB0byByZWFkIFJPSSBhcnJheSBhZGRyZXNzIik7DQo+ICsJCQln
b3RvIGV4aXQ7DQo+ICsJCX0NCj4gKw0KPiArCQlyZXQgPSBkbGFfZGF0YV9yZWFkKGVuZ2lu
ZS0+ZHJpdmVyX2NvbnRleHQsIHRhc2stPnRhc2tfZGF0YSwNCj4gKwkJCQkJCQl0YXNrLT5y
b2lfYXJyYXlfYWRkciwNCj4gKwkJCQkJCQkodm9pZCAqKSZyb2lfYXJyYXlfbGVuZ3RoLA0K
PiArCQkJCQkJCXNpemVvZih1aW50NjRfdCksIDApOw0KPiArCQlpZiAocmV0KSB7DQo+ICsJ
CQlwcl9lcnIoIkZhaWxlZCB0byByZWFkIFJPSSBhcnJheSBsZW5ndGgiKTsNCj4gKwkJCWdv
dG8gZXhpdDsNCj4gKwkJfQ0KPiArDQo+ICsJCS8qKg0KPiArCQkgKiBOdW1iZXIgb2YgUk9J
cyBkZXRlY3RlZCBjYW4ndCBiZSBncmVhdGVyIHRoYW4gbWF4aW11bSBudW1iZXINCj4gKwkJ
ICogUk9JcyB0aGlzIG5ldHdvcmsgY2FuIHByb2Nlc3MNCj4gKwkJICovDQo+ICsJCWlmIChy
b2lfYXJyYXlfbGVuZ3RoID4gbmV0d29yay5udW1fcm9pcykgew0KPiArCQkJcHJfZXJyKCJJ
bnZhbGlkIG51bWJlciBvZiBST0lzIGRldGVjdGVkIik7DQo+ICsJCQlyZXQgPSAtRUlOVkFM
Ow0KPiArCQkJZ290byBleGl0Ow0KPiArCQl9DQo+ICsNCj4gKwkJbmV0d29yay5udW1fcm9p
cyA9IHJvaV9hcnJheV9sZW5ndGg7DQo+ICsNCj4gKwkJLyoqDQo+ICsJCSAqIFJlYWQgc3Vy
ZmFjZSBhZGRyZXNzIGZyb20gYWRkcmVzcyBsaXN0DQo+ICsJCSAqLw0KPiArCQlyZXQgPSBk
bGFfZ2V0X2RtYV9hZGRyZXNzKGVuZ2luZS0+ZHJpdmVyX2NvbnRleHQsDQo+ICsJCQkJCQkJ
CSAgdGFzay0+dGFza19kYXRhLA0KPiArCQkJCQkJCQkgIG5ldHdvcmsuc3VyZmFjZV9pbmRl
eCwNCj4gKwkJCQkJCQkJICAodm9pZCAqKSZ0YXNrLT5zdXJmYWNlX2FkZHIsDQo+ICsJCQkJ
CQkJCSAgREVTVElOQVRJT05fRE1BKTsNCj4gKwkJaWYgKHJldCkgew0KPiArCQkJcHJfZXJy
KCJGYWlsZWQgdG8gcmVhZCBzdXJmYWNlIGFkZHJlc3MiKTsNCj4gKwkJCWdvdG8gZXhpdDsN
Cj4gKwkJfQ0KPiArCX0NCj4gKw0KPiArZXhpdDoNCj4gKwlyZXR1cm4gcmV0Ow0KPiArfQ0K
PiArDQo+ICtzdGF0aWMgaW50DQo+ICtkbGFfaW5pdGlhdGVfcHJvY2Vzc29ycyhzdHJ1Y3Qg
ZGxhX2VuZ2luZSAqZW5naW5lKQ0KPiArew0KPiArCWludDMyX3QgaTsNCj4gKwlpbnQzMl90
IHJldCA9IDA7DQo+ICsJaW50MTZfdCBpbmRleDsNCj4gKwlzdHJ1Y3QgZGxhX3Byb2Nlc3Nv
ciAqcHJvY2Vzc29yOw0KPiArCXN0cnVjdCBkbGFfY29tbW9uX29wX2Rlc2MgKmNvbnN1bWVy
Ow0KPiArCXN0cnVjdCBkbGFfbmV0d29ya19kZXNjICpudzsNCj4gKw0KPiArCWlmICghZW5n
aW5lKSB7DQo+ICsJCXJldCA9IC1FSU5WQUw7DQo+ICsJCWdvdG8gZXhpdDsNCj4gKwl9DQo+
ICsNCj4gKwludyA9IGVuZ2luZS0+bmV0d29yazsNCj4gKw0KPiArCS8qIFZhbGlkYXRlIG9w
ZXJhdGlvbiBoZWFkcyBiZWZvcmUgaW5pdGlhdGluZyBwcm9jZXNzb3JzICovDQo+ICsJZm9y
IChpID0gMDsgaSA8IERMQV9PUF9OVU07IGkrKykgew0KPiArCQlpZiAobnctPm9wX2hlYWRb
aV0gPj0gbnctPm51bV9vcGVyYXRpb25zKSB7DQo+ICsJCQlyZXQgPSAtRUlOVkFMOw0KPiAr
CQkJcHJfZXJyKCJJbnZhbGlkIG9wX2hlYWQgJWQgZm9yIG9wICVkIiwNCj4gKwkJCQkJCW53
LT5vcF9oZWFkW2ldLCBpKTsNCj4gKwkJCWdvdG8gZXhpdDsNCj4gKwkJfQ0KPiArCX0NCj4g
Kw0KPiArCWZvciAoaSA9IDA7IGkgPCBETEFfT1BfTlVNOyBpKyspIHsNCj4gKwkJaW5kZXgg
PSBudy0+b3BfaGVhZFtpXTsNCj4gKw0KPiArCQkvKiBJZiB0aGVyZSBpcyBubyBvcCBmb3Ig
dGhpcyB0eXBlIHRoZW4gY29udGludWUgKi8NCj4gKwkJaWYgKC0xID09IGluZGV4KQ0KPiAr
CQkJY29udGludWU7DQo+ICsNCj4gKwkJY29uc3VtZXIgPSBkbGFfZ2V0X29wX2Rlc2MoZW5n
aW5lLCBlbmdpbmUtPnRhc2ssIGluZGV4LCBpLCAwKTsNCj4gKwkJLyoNCj4gKwkJICogaWYg
Y29uc3VtZXIgaXMgTlVMTCwgaXQgbWVhbnMgZWl0aGVyIGRhdGEgY29weSBlcnJvcg0KPiAr
CQkgKiBvciBjYWNoZSBpbnN1ZmZpY2llbnQgLSB3ZSBzaG91bGQgZml4IGl0DQo+ICsJCSAq
Ki8NCj4gKwkJaWYgKGNvbnN1bWVyID09IE5VTEwpIHsNCj4gKwkJCXByX2VycigiRmFpbGVk
IHRvIGFsbG9jYXRlIG1lbW9yeSBmb3Igb3BfaGVhZFslZF09JWQiLA0KPiArCQkJCQkJCWks
IGluZGV4KTsNCj4gKwkJCXJldCA9IC1FTk9NRU07DQo+ICsJCQlnb3RvIGV4aXQ7DQo+ICsJ
CX0NCj4gKw0KPiArCQlwcm9jZXNzb3IgPSAmZW5naW5lLT5wcm9jZXNzb3JzW2NvbnN1bWVy
LT5vcF90eXBlXTsNCj4gKw0KPiArCQlyZXQgPSBkbGFfc3VibWl0X29wZXJhdGlvbihlbmdp
bmUsIHByb2Nlc3NvciwgY29uc3VtZXIsIDApOw0KPiArCQlkbGFfcHV0X29wX2Rlc2MoZW5n
aW5lLCBjb25zdW1lcik7DQo+ICsJCWlmIChyZXQgJiYgcmV0ICE9IC1FQlVTWSkgew0KPiAr
CQkJcHJfZXJyKCJGYWlsZWQgdG8gc3VibWl0ICVzIG9wIGZyb20gaW5kZXggJXVcbiIsDQo+
ICsJCQkJCQlwcm9jZXNzb3ItPm5hbWUsIGluZGV4KTsNCj4gKwkJCWdvdG8gZXhpdDsNCj4g
KwkJfQ0KPiArDQo+ICsJCXJldCA9IGRsYV9kZXF1ZXVlX29wZXJhdGlvbihlbmdpbmUsIHBy
b2Nlc3Nvcik7DQo+ICsJCWlmIChyZXQpIHsNCj4gKwkJCXByX2VycigiRmFpbGVkIHRvIGRl
cXVldWUgb3AgZm9yICVzIHByb2Nlc3NvciIsDQo+ICsJCQkJCQkJcHJvY2Vzc29yLT5uYW1l
KTsNCj4gKwkJCWdvdG8gZXhpdDsNCj4gKwkJfQ0KPiArCX0NCj4gK2V4aXQ6DQo+ICsJcmV0
dXJuIHJldDsNCj4gK30NCj4gKw0KPiArc3RhdGljIGludA0KPiArZGxhX2hhbmRsZV9ldmVu
dHMoc3RydWN0IGRsYV9lbmdpbmUgKmVuZ2luZSwgc3RydWN0IGRsYV9wcm9jZXNzb3IgKnBy
b2Nlc3NvcikNCj4gK3sNCj4gKwlpbnQzMl90IGo7DQo+ICsJaW50MzJfdCByZXQgPSAwOw0K
PiArCXVpbnQ4X3QgZ3JvdXBfaWQ7DQo+ICsJc3RydWN0IGRsYV9wcm9jZXNzb3JfZ3JvdXAg
Kmdyb3VwOw0KPiArDQo+ICsJcHJfZGVidWcoIkVudGVyOiVzLCBwcm9jZXNzb3I6JXNcbiIs
IF9fZnVuY19fLCBwcm9jZXNzb3ItPm5hbWUpOw0KPiArDQo+ICsJZ3JvdXBfaWQgPSAhcHJv
Y2Vzc29yLT5sYXN0X2dyb3VwOw0KPiArDQo+ICsJZm9yIChqID0gMDsgaiA8IERMQV9OVU1f
R1JPVVBTOyBqKyspIHsNCj4gKwkJZ3JvdXAgPSAmcHJvY2Vzc29yLT5ncm91cHNbZ3JvdXBf
aWRdOw0KPiArDQo+ICsJCWlmICgoMSA8PCBETEFfRVZFTlRfQ0RNQV9XVF9ET05FKSAmIGdy
b3VwLT5ldmVudHMpIHsNCj4gKwkJCXByX2luZm8oIkhhbmRsZSBjZG1hIHdlaWdodCBkb25l
IGV2ZW50LCBwcm9jZXNzb3IgJXMgZ3JvdXAgJXVcbiIsDQo+ICsJCQkJCXByb2Nlc3Nvci0+
bmFtZSwgZ3JvdXAtPmlkKTsNCj4gKw0KPiArCQkJcmV0ID0gZGxhX3VwZGF0ZV9jb25zdW1l
cnMoZW5naW5lLCBncm91cCwgZ3JvdXAtPm9wX2Rlc2MsDQo+ICsJCQkJCQkJCQkgICBETEFf
RVZFTlRfQ0RNQV9XVF9ET05FKTsNCj4gKwkJCWlmIChyZXQpDQo+ICsJCQkJZ290byBleGl0
Ow0KPiArCQl9DQo+ICsNCj4gKwkJaWYgKCgxIDw8IERMQV9FVkVOVF9DRE1BX0RUX0RPTkUp
ICYgZ3JvdXAtPmV2ZW50cykgew0KPiArCQkJcHJfaW5mbygiSGFuZGxlIGNkbWEgZGF0YSBk
b25lIGV2ZW50LCBwcm9jZXNzb3IgJXMgZ3JvdXAgJXVcbiIsDQo+ICsJCQkJCXByb2Nlc3Nv
ci0+bmFtZSwgZ3JvdXAtPmlkKTsNCj4gKw0KPiArCQkJcmV0ID0gZGxhX3VwZGF0ZV9jb25z
dW1lcnMoZW5naW5lLCBncm91cCwNCj4gKwkJCQkJCQkJCSAgIGdyb3VwLT5vcF9kZXNjLA0K
PiArCQkJCQkJCQkJICAgRExBX0VWRU5UX0NETUFfRFRfRE9ORSk7DQo+ICsJCQlpZiAocmV0
KQ0KPiArCQkJCWdvdG8gZXhpdDsNCj4gKwkJfQ0KPiArDQo+ICsJCS8qKg0KPiArCQkgKiBI
YW5kbGUgY29tcGxldGUgYWZ0ZXIgYWxsIG90aGVyIGV2ZW50cw0KPiArCQkgKi8NCj4gKwkJ
aWYgKCgxIDw8IERMQV9FVkVOVF9PUF9DT01QTEVURUQpICYgZ3JvdXAtPmV2ZW50cykgew0K
PiArCQkJcHJfaW5mbygiSGFuZGxlIG9wIGNvbXBsZXRlIGV2ZW50LCBwcm9jZXNzb3IgJXMg
Z3JvdXAgJXVcbiIsDQo+ICsJCQkJCXByb2Nlc3Nvci0+bmFtZSwgZ3JvdXAtPmlkKTsNCj4g
Kw0KPiArCQkJcmV0ID0gZGxhX29wX2NvbXBsZXRpb24oZW5naW5lLCBwcm9jZXNzb3IsIGdy
b3VwKTsNCj4gKwkJCWlmIChyZXQpDQo+ICsJCQkJZ290byBleGl0Ow0KPiArCQl9DQo+ICsN
Cj4gKwkJLyoqDQo+ICsJCSAqIENsZWFyIGFsbCBldmVudHMNCj4gKwkJICovDQo+ICsJCWdy
b3VwLT5ldmVudHMgPSAwOw0KPiArCQlncm91cF9pZCA9ICFncm91cF9pZDsNCj4gKwl9DQo+
ICtleGl0Og0KPiArCXJldHVybiByZXQ7DQo+ICt9DQo+ICsNCj4gK2ludA0KPiArZGxhX3By
b2Nlc3NfZXZlbnRzKHN0cnVjdCBkbGFfZW5naW5lICplbmdpbmUsIHVpbnQzMl90ICp0YXNr
X2NvbXBsZXRlKQ0KPiArew0KPiArCWludDMyX3QgaTsNCj4gKwlpbnQzMl90IHJldCA9IDA7
DQo+ICsNCj4gKwlmb3IgKGkgPSAwOyBpIDwgRExBX09QX05VTTsgaSsrKSB7DQo+ICsJCXN0
cnVjdCBkbGFfcHJvY2Vzc29yICpwcm9jZXNzb3I7DQo+ICsNCj4gKwkJcHJvY2Vzc29yID0g
JmVuZ2luZS0+cHJvY2Vzc29yc1tpXTsNCj4gKwkJcmV0ID0gZGxhX2hhbmRsZV9ldmVudHMo
ZW5naW5lLCBwcm9jZXNzb3IpOw0KPiArCQkvKioNCj4gKwkJICogSW5jYXNlIGVuZ2luZSBz
dGF0dXMgaXMgbm9uLXplcm8sIHRoZW4gZG9uJ3QNCj4gKwkJICogdXBkYXRlIHRoZSBlbmdp
bmUgc3RhdHVzLiBXZSBzaG91bGQga2VlcCBpdHMNCj4gKwkJICogc3RhdHVzIGZvciBsYXRl
ciBjbGVhbmluZyBvZiBlbmdpbmUuDQo+ICsJCSAqLw0KPiArCQlpZiAoIWVuZ2luZS0+c3Rh
dHVzKQ0KPiArCQkJZW5naW5lLT5zdGF0dXMgPSByZXQ7DQo+ICsJfQ0KPiArDQo+ICsJaWYg
KGVuZ2luZS0+bmV0d29yay0+bnVtX29wZXJhdGlvbnMgPT0gZW5naW5lLT5udW1fcHJvY19o
d2wpDQo+ICsJCSp0YXNrX2NvbXBsZXRlID0gMTsNCj4gKw0KPiArCXJldHVybiByZXQ7DQo+
ICt9DQo+ICsNCj4gKy8qKg0KPiArICogRXhlY3V0ZSB0YXNrIHNlbGVjdGVkIGJ5IHRhc2sg
c2NoZWR1bGVyDQo+ICsgKg0KPiArICogMS4gUmVhZCBuZXR3b3JrIGNvbmZpZ3VyYXRpb24g
Zm9yIHRoZSB0YXNrDQo+ICsgKiAyLiBJbml0aWF0ZSBwcm9jZXNzb3JzIHdpdGggaGVhZCBv
ZiBsaXN0IGZvciBzYW1lIG9wDQo+ICsgKiAzLiBTdGFydCBwcm9jZXNzaW5nIGV2ZW50cyBy
ZWNlaXZlZA0KPiArICovDQo+ICtpbnQNCj4gK2RsYV9leGVjdXRlX3Rhc2soc3RydWN0IGRs
YV9lbmdpbmUgKmVuZ2luZV9jb250ZXh0LCB2b2lkICp0YXNrX2RhdGEsIHZvaWQgKmNvbmZp
Z19kYXRhKQ0KPiArew0KPiArCWludDMyX3QgcmV0Ow0KPiArCXN0cnVjdCBkbGFfZW5naW5l
ICplbmdpbmUgPSBlbmdpbmVfY29udGV4dDsNCj4gKw0KPiArCWlmIChlbmdpbmUgPT0gTlVM
TCkgew0KPiArCQlwcl9lcnIoImVuZ2luZSBpcyBOVUxMXG4iKTsNCj4gKwkJcmV0ID0gLUVJ
TlZBTDsNCj4gKwkJZ290byBjb21wbGV0ZTsNCj4gKwl9DQo+ICsNCj4gKwlpZiAoZW5naW5l
LT50YXNrID09IE5VTEwpIHsNCj4gKwkJcHJfZXJyKCJ0YXNrIGlzIE5VTExcbiIpOw0KPiAr
CQlyZXQgPSAtRUlOVkFMOw0KPiArCQlnb3RvIGNvbXBsZXRlOw0KPiArCX0NCj4gKw0KPiAr
CWlmIChlbmdpbmUtPnRhc2stPnRhc2tfZGF0YSAhPSBOVUxMKSB7DQo+ICsJCS8qIFdlIGhh
dmUgb24gdGhlIGZseSB0YXNrcyBydW5uaW5nICovDQo+ICsJCXByX3dhcm4oIkFscmVhZHkg
c29tZSB0YXNrIGluIHByb2dyZXNzIik7DQo+ICsJCXJldCA9IC1FQlVTWTsNCj4gKwkJZ290
byBjb21wbGV0ZTsNCj4gKwl9DQo+ICsNCj4gKwllbmdpbmUtPnRhc2stPnRhc2tfZGF0YSA9
IHRhc2tfZGF0YTsNCj4gKwllbmdpbmUtPmNvbmZpZ19kYXRhID0gY29uZmlnX2RhdGE7DQo+
ICsJZW5naW5lLT5uZXR3b3JrID0gJm5ldHdvcms7DQo+ICsJZW5naW5lLT5udW1fcHJvY19o
d2wgPSAwOw0KPiArDQo+ICsJcmV0ID0gZGxhX3JlYWRfbmV0d29ya19jb25maWcoZW5naW5l
KTsNCj4gKwlpZiAocmV0KQ0KPiArCQlnb3RvIGNvbXBsZXRlOw0KPiArDQo+ICsJLyogSWYg
bm8gb3BlcmF0aW9ucyBpbiBhIHRhc2sgbWVhbnMgbm90aGluZyB0byBkbywgTlVMTCB0YXNr
ICovDQo+ICsJaWYgKGVuZ2luZS0+bmV0d29yay0+bnVtX29wZXJhdGlvbnMgPT0gMCkNCj4g
KwkJZ290byBjb21wbGV0ZTsNCj4gKw0KPiArCXJldCA9IGRsYV9pbml0aWF0ZV9wcm9jZXNz
b3JzKGVuZ2luZSk7DQo+ICsJZW5naW5lLT5zdGF0dXMgPSByZXQ7DQo+ICsNCj4gK2NvbXBs
ZXRlOg0KPiArCXJldHVybiByZXQ7DQo+ICt9DQo+ICsNCj4gK3ZvaWQNCj4gK2RsYV9jbGVh
cl90YXNrKHN0cnVjdCBkbGFfZW5naW5lICplbmdpbmVfY29udGV4dCkNCj4gK3sNCj4gKwlp
bnQzMl90IGksIGo7DQo+ICsJc3RydWN0IGRsYV9lbmdpbmUgKmVuZ2luZSA9IGVuZ2luZV9j
b250ZXh0Ow0KPiArDQo+ICsJZm9yIChpID0gMDsgaSA8IERMQV9PUF9OVU07IGkrKykgew0K
PiArCQlzdHJ1Y3QgZGxhX3Byb2Nlc3NvciAqcHJvY2Vzc29yID0gJmVuZ2luZS0+cHJvY2Vz
c29yc1tpXTsNCj4gKw0KPiArCQlwcm9jZXNzb3ItPnJvaV9pbmRleCA9IDA7DQo+ICsJCXBy
b2Nlc3Nvci0+Z3JvdXBfc3RhdHVzID0gMDsNCj4gKwkJcHJvY2Vzc29yLT5yZG1hX3N0YXR1
cyA9IDA7DQo+ICsNCj4gKwkJcHJvY2Vzc29yLT50YWlsX29wID0gTlVMTDsNCj4gKw0KPiAr
CQlmb3IgKGogPSAwOyBqIDwgRExBX05VTV9HUk9VUFM7IGorKykgew0KPiArCQkJc3RydWN0
IGRsYV9wcm9jZXNzb3JfZ3JvdXAgKmdyb3VwID0NCj4gKwkJCQkJCSZwcm9jZXNzb3ItPmdy
b3Vwc1tqXTsNCj4gKw0KPiArCQkJZ3JvdXAtPnJkbWFfaWQgPSBncm91cC0+aWQ7DQo+ICsJ
CQlncm91cC0+YWN0aXZlID0gMDsNCj4gKwkJCWdyb3VwLT5ldmVudHMgPSAwOw0KPiArCQkJ
Z3JvdXAtPnJvaV9pbmRleCA9IDA7DQo+ICsJCQlncm91cC0+aXNfcmRtYV9uZWVkZWQgPSAw
Ow0KPiArCQkJZ3JvdXAtPmx1dF9pbmRleCA9IC0xOw0KPiArCQl9DQo+ICsJfQ0KPiArDQo+
ICsJZW5naW5lLT50YXNrLT50YXNrX2RhdGEgPSBOVUxMOw0KPiArCWVuZ2luZS0+bmV0d29y
ayA9IE5VTEw7DQo+ICsJZW5naW5lLT5udW1fcHJvY19od2wgPSAwOw0KPiArCWVuZ2luZS0+
c3RhdHVzID0gMDsNCj4gKw0KPiArCXByX2luZm8oInJlc2V0IGVuZ2luZSBkb25lXG4iKTsN
Cj4gK30NCj4gZGlmZiAtLWdpdCBhL2RyaXZlcnMvZ3B1L2RybS9udmRsYS9udmRsYV9zZHAu
YyBiL2RyaXZlcnMvZ3B1L2RybS9udmRsYS9udmRsYV9zZHAuYw0KPiBuZXcgZmlsZSBtb2Rl
IDEwMDY0NA0KPiBpbmRleCAwMDAwMDAwMDAwMDAuLjY1NWVjNzE5NWVlOQ0KPiAtLS0gL2Rl
di9udWxsDQo+ICsrKyBiL2RyaXZlcnMvZ3B1L2RybS9udmRsYS9udmRsYV9zZHAuYw0KPiBA
QCAtMCwwICsxLDcyOCBAQA0KPiArLy8gU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEJTRC0z
LUNsYXVzZSBPUiBHUEwtMi4wDQo+ICsvKg0KPiArICogQ29weXJpZ2h0IChDKSAyMDE3LTIw
MTggTlZJRElBIENPUlBPUkFUSU9ODQo+ICsgKiBDb3B5cmlnaHQgKEMpIDIwMjIgQ2FpIEh1
b3FpbmcNCj4gKyAqLw0KPiArDQo+ICsjaW5jbHVkZSAibnZkbGFfZHJtLmgiDQo+ICsjaW5j
bHVkZSAibnZkbGFfcmVnLmgiDQo+ICsjaW5jbHVkZSAibnZkbGFfY29tbW9uLmgiDQo+ICsj
aW5jbHVkZSAibnZkbGFfZW5naW5lLmgiDQo+ICsNCj4gK3N0YXRpYyBjb25zdCB1aW50OF90
IG1hcF9lbmFbXSA9IHsNCj4gKwlGSUVMRF9FTlVNKFNEUF9SRE1BX0RfQlJETUFfQ0ZHXzAs
IEJSRE1BX0RJU0FCTEUsIFlFUyksDQo+ICsJRklFTERfRU5VTShTRFBfUkRNQV9EX0JSRE1B
X0NGR18wLCBCUkRNQV9ESVNBQkxFLCBOTyksDQo+ICt9Ow0KPiArDQo+ICtzdGF0aWMgY29u
c3QgdWludDhfdCBtYXBfcHJlbHVbXSA9IHsNCj4gKwlGSUVMRF9FTlVNKFNEUF9EX0RQX0JT
X0NGR18wLCBCU19NVUxfUFJFTFUsIE5PKSwNCj4gKwlGSUVMRF9FTlVNKFNEUF9EX0RQX0JT
X0NGR18wLCBCU19NVUxfUFJFTFUsIFlFUyksDQo+ICt9Ow0KPiArDQo+ICtzdGF0aWMgY29u
c3QgdWludDhfdCBtYXBfYnlwYXNzW10gPSB7DQo+ICsJRklFTERfRU5VTShTRFBfRF9EUF9C
U19DRkdfMCwgQlNfQllQQVNTLCBZRVMpLA0KPiArCUZJRUxEX0VOVU0oU0RQX0RfRFBfQlNf
Q0ZHXzAsIEJTX0JZUEFTUywgTk8pLA0KPiArfTsNCj4gKw0KPiArc3RhdGljIGNvbnN0IHVp
bnQ4X3QgbWFwX2FsdV9vcFtdID0gew0KPiArCUZJRUxEX0VOVU0oU0RQX0RfRFBfRVdfQ0ZH
XzAsIEVXX0FMVV9BTEdPLCBNQVgpLA0KPiArCUZJRUxEX0VOVU0oU0RQX0RfRFBfRVdfQ0ZH
XzAsIEVXX0FMVV9BTEdPLCBNSU4pLA0KPiArCUZJRUxEX0VOVU0oU0RQX0RfRFBfRVdfQ0ZH
XzAsIEVXX0FMVV9BTEdPLCBTVU0pLA0KPiArCUZJRUxEX0VOVU0oU0RQX0RfRFBfRVdfQ0ZH
XzAsIEVXX0FMVV9BTEdPLCBFUUwpLA0KPiArfTsNCj4gKw0KPiArc3RhdGljIGNvbnN0IHVp
bnQ4X3QgbWFwX2FsdV9zcmNbXSA9IHsNCj4gKwlGSUVMRF9FTlVNKFNEUF9EX0RQX0JTX0FM
VV9DRkdfMCwgQlNfQUxVX1NSQywgTUVNKSwNCj4gKwlGSUVMRF9FTlVNKFNEUF9EX0RQX0JT
X0FMVV9DRkdfMCwgQlNfQUxVX1NSQywgUkVHKSwNCj4gK307DQo+ICsNCj4gK3N0YXRpYyBj
b25zdCB1aW50OF90IG1hcF9mbHlbXSA9IHsNCj4gKwlGSUVMRF9FTlVNKFNEUF9EX0ZFQVRV
UkVfTU9ERV9DRkdfMCwgRkxZSU5HX01PREUsIE9GRiksDQo+ICsJRklFTERfRU5VTShTRFBf
RF9GRUFUVVJFX01PREVfQ0ZHXzAsIEZMWUlOR19NT0RFLCBPTiksDQo+ICt9Ow0KPiArDQo+
ICtzdGF0aWMgY29uc3QgdWludDhfdCBtYXBfZHN0W10gPSB7DQo+ICsJRklFTERfRU5VTShT
RFBfRF9GRUFUVVJFX01PREVfQ0ZHXzAsIE9VVFBVVF9EU1QsIE1FTSksDQo+ICsJRklFTERf
RU5VTShTRFBfRF9GRUFUVVJFX01PREVfQ0ZHXzAsIE9VVFBVVF9EU1QsIFBEUCksDQo+ICt9
Ow0KPiArDQo+ICsNCj4gK3N0YXRpYyBjb25zdCB1aW50OF90IG1hcF93Z1tdID0gew0KPiAr
CUZJRUxEX0VOVU0oU0RQX0RfRkVBVFVSRV9NT0RFX0NGR18wLCBXSU5PR1JBRCwgT0ZGKSwN
Cj4gKwlGSUVMRF9FTlVNKFNEUF9EX0ZFQVRVUkVfTU9ERV9DRkdfMCwgV0lOT0dSQUQsIE9O
KSwNCj4gK307DQo+ICsNCj4gK3N0YXRpYyBjb25zdCB1aW50OF90IG1hcF9wcmVjaXNpb25b
XSA9IHsNCj4gKwlGSUVMRF9FTlVNKFNEUF9SRE1BX0RfRkVBVFVSRV9NT0RFX0NGR18wLCBJ
Tl9QUkVDSVNJT04sIElOVDgpLA0KPiArCUZJRUxEX0VOVU0oU0RQX1JETUFfRF9GRUFUVVJF
X01PREVfQ0ZHXzAsIElOX1BSRUNJU0lPTiwgSU5UMTYpLA0KPiArCUZJRUxEX0VOVU0oU0RQ
X1JETUFfRF9GRUFUVVJFX01PREVfQ0ZHXzAsIElOX1BSRUNJU0lPTiwgRlAxNiksDQo+ICt9
Ow0KPiArDQo+ICtzdGF0aWMgY29uc3QgdWludDMyX3QgbWFwX3Byb2NfcHJlY2lzaW9uWzNd
WzNdID0gew0KPiArCXsNCj4gKwkJRklFTERfRU5VTShTRFBfUkRNQV9EX0ZFQVRVUkVfTU9E
RV9DRkdfMCwgSU5fUFJFQ0lTSU9OLCBJTlQ4KSwNCj4gKwkJRklFTERfRU5VTShTRFBfUkRN
QV9EX0ZFQVRVUkVfTU9ERV9DRkdfMCwgSU5fUFJFQ0lTSU9OLCBJTlQ4KSwNCj4gKwkJRklF
TERfRU5VTShTRFBfUkRNQV9EX0ZFQVRVUkVfTU9ERV9DRkdfMCwgSU5fUFJFQ0lTSU9OLCBG
UDE2KSwNCj4gKwl9LA0KPiArCXsNCj4gKwkJRklFTERfRU5VTShTRFBfUkRNQV9EX0ZFQVRV
UkVfTU9ERV9DRkdfMCwgSU5fUFJFQ0lTSU9OLCBJTlQ4KSwNCj4gKwkJRklFTERfRU5VTShT
RFBfUkRNQV9EX0ZFQVRVUkVfTU9ERV9DRkdfMCwgSU5fUFJFQ0lTSU9OLCBJTlQxNiksDQo+
ICsJCUZJRUxEX0VOVU0oU0RQX1JETUFfRF9GRUFUVVJFX01PREVfQ0ZHXzAsIElOX1BSRUNJ
U0lPTiwgRlAxNiksDQo+ICsJfSwNCj4gKwl7DQo+ICsJCUZJRUxEX0VOVU0oU0RQX1JETUFf
RF9GRUFUVVJFX01PREVfQ0ZHXzAsIElOX1BSRUNJU0lPTiwgSU5UOCksDQo+ICsJCUZJRUxE
X0VOVU0oU0RQX1JETUFfRF9GRUFUVVJFX01PREVfQ0ZHXzAsIElOX1BSRUNJU0lPTiwgSU5U
MTYpLA0KPiArCQlGSUVMRF9FTlVNKFNEUF9SRE1BX0RfRkVBVFVSRV9NT0RFX0NGR18wLCBJ
Tl9QUkVDSVNJT04sIEZQMTYpLA0KPiArCX0sDQo+ICt9Ow0KPiArDQo+ICtzdGF0aWMgY29u
c3QgdWludDhfdCBtYXBfb3BfdHlwZVtdID0gew0KPiArCUZJRUxEX0VOVU0oU0RQX1JETUFf
RF9CUkRNQV9DRkdfMCwgQlJETUFfREFUQV9VU0UsIE1VTCksDQo+ICsJRklFTERfRU5VTShT
RFBfUkRNQV9EX0JSRE1BX0NGR18wLCBCUkRNQV9EQVRBX1VTRSwgTVVMKSwNCj4gKwlGSUVM
RF9FTlVNKFNEUF9SRE1BX0RfQlJETUFfQ0ZHXzAsIEJSRE1BX0RBVEFfVVNFLCBBTFUpLA0K
PiArCUZJRUxEX0VOVU0oU0RQX1JETUFfRF9CUkRNQV9DRkdfMCwgQlJETUFfREFUQV9VU0Us
IEJPVEgpLA0KPiArfTsNCj4gKw0KPiArc3RhdGljIGNvbnN0IHVpbnQ4X3QgbWFwX2VsZW1l
bnRfc2l6ZVtdID0gew0KPiArCUZJRUxEX0VOVU0oU0RQX1JETUFfRF9CUkRNQV9DRkdfMCwg
QlJETUFfREFUQV9TSVpFLCBPTkVfQllURSksDQo+ICsJRklFTERfRU5VTShTRFBfUkRNQV9E
X0JSRE1BX0NGR18wLCBCUkRNQV9EQVRBX1NJWkUsIFRXT19CWVRFKSwNCj4gKwlGSUVMRF9F
TlVNKFNEUF9SRE1BX0RfQlJETUFfQ0ZHXzAsIEJSRE1BX0RBVEFfU0laRSwgVFdPX0JZVEUp
LA0KPiArfTsNCj4gKw0KPiArc3RhdGljIGNvbnN0IHVpbnQ4X3QgbWFwX29wX21vZGVbXSA9
IHsNCj4gKwlGSUVMRF9FTlVNKFNEUF9SRE1BX0RfQlJETUFfQ0ZHXzAsIEJSRE1BX0RBVEFf
TU9ERSwgUEVSX0VMRU1FTlQpLA0KPiArCUZJRUxEX0VOVU0oU0RQX1JETUFfRF9CUkRNQV9D
RkdfMCwgQlJETUFfREFUQV9NT0RFLCBQRVJfS0VSTkVMKSwNCj4gKwlGSUVMRF9FTlVNKFNE
UF9SRE1BX0RfQlJETUFfQ0ZHXzAsIEJSRE1BX0RBVEFfTU9ERSwgUEVSX0VMRU1FTlQpLA0K
PiArfTsNCj4gKw0KPiArc3RhdGljIGNvbnN0IHVpbnQ4X3QgbWFwX3JhbV90eXBlW10gPSB7
DQo+ICsJRklFTERfRU5VTShTRFBfUkRNQV9EX0JSRE1BX0NGR18wLCBCUkRNQV9SQU1fVFlQ
RSwgTUMpLA0KPiArCUZJRUxEX0VOVU0oU0RQX1JETUFfRF9CUkRNQV9DRkdfMCwgQlJETUFf
UkFNX1RZUEUsIENWKSwNCj4gK307DQo+ICsNCj4gK3N0YXRpYyBjb25zdCB1aW50OF90IG1h
cF9wZXJmX2RtYVtdID0gew0KPiArCUZJRUxEX0VOVU0oU0RQX0RfUEVSRl9FTkFCTEVfMCwg
UEVSRl9ETUFfRU4sIE5PKSwNCj4gKwlGSUVMRF9FTlVNKFNEUF9EX1BFUkZfRU5BQkxFXzAs
IFBFUkZfRE1BX0VOLCBZRVMpLA0KPiArfTsNCj4gKw0KPiArc3RhdGljIGNvbnN0IHVpbnQ4
X3QgbWFwX3BlcmZfbHV0W10gPSB7DQo+ICsJRklFTERfRU5VTShTRFBfRF9QRVJGX0VOQUJM
RV8wLCBQRVJGX0xVVF9FTiwgTk8pLA0KPiArCUZJRUxEX0VOVU0oU0RQX0RfUEVSRl9FTkFC
TEVfMCwgUEVSRl9MVVRfRU4sIFlFUyksDQo+ICt9Ow0KPiArDQo+ICtzdGF0aWMgY29uc3Qg
dWludDhfdCBtYXBfcGVyZl9zYXRbXSA9IHsNCj4gKwlGSUVMRF9FTlVNKFNEUF9EX1BFUkZf
RU5BQkxFXzAsIFBFUkZfU0FUX0VOLCBOTyksDQo+ICsJRklFTERfRU5VTShTRFBfRF9QRVJG
X0VOQUJMRV8wLCBQRVJGX1NBVF9FTiwgWUVTKSwNCj4gK307DQo+ICsNCj4gK3N0YXRpYyBj
b25zdCB1aW50OF90IG1hcF9wZXJmX25hbl9pbmZbXSA9IHsNCj4gKwlGSUVMRF9FTlVNKFNE
UF9EX1BFUkZfRU5BQkxFXzAsIFBFUkZfTkFOX0lORl9DT1VOVF9FTiwgTk8pLA0KPiArCUZJ
RUxEX0VOVU0oU0RQX0RfUEVSRl9FTkFCTEVfMCwgUEVSRl9OQU5fSU5GX0NPVU5UX0VOLCBZ
RVMpLA0KPiArfTsNCj4gKw0KPiArdm9pZA0KPiArZGxhX3NkcF9zZXRfcHJvZHVjZXIoc3Ry
dWN0IGRsYV9lbmdpbmUgKmVuZ2luZSwgaW50MzJfdCBncm91cF9pZCwgaW50MzJfdCByZG1h
X2dyb3VwX2lkKQ0KPiArew0KPiArCXVpbnQzMl90IHJlZzsNCj4gKw0KPiArCS8qKg0KPiAr
CSAqIHNldCBwcm9kdWNlciBwb2ludGVyIGZvciBhbGwgc3ViLW1vZHVsZXMNCj4gKwkgKi8N
Cj4gKwlyZWcgPSBncm91cF9pZCA8PCBTSElGVChTRFBfU19QT0lOVEVSXzAsIFBST0RVQ0VS
KTsNCj4gKwlzZHBfcmVnX3dyaXRlKGVuZ2luZSwgU19QT0lOVEVSLCByZWcpOw0KPiArCXJl
ZyA9IHJkbWFfZ3JvdXBfaWQgPDwgU0hJRlQoU0RQX1JETUFfU19QT0lOVEVSXzAsIFBST0RV
Q0VSKTsNCj4gKwlzZHBfcmRtYV9yZWdfd3JpdGUoZW5naW5lLCBTX1BPSU5URVIsIHJlZyk7
DQo+ICt9DQo+ICsNCj4gK2ludA0KPiArZGxhX3NkcF9lbmFibGUoc3RydWN0IGRsYV9lbmdp
bmUgKmVuZ2luZSwgc3RydWN0IGRsYV9wcm9jZXNzb3JfZ3JvdXAgKmdyb3VwKQ0KPiArew0K
PiArCXVpbnQzMl90IHJlZzsNCj4gKw0KPiArCS8qKg0KPiArCSAqIGVuYWJsZSBhbGwgc3Vi
LW1vZHVsZXMNCj4gKwkgKi8NCj4gKwlpZiAoZ3JvdXAtPmlzX3JkbWFfbmVlZGVkKSB7DQo+
ICsJCXJlZyA9IEZJRUxEX0VOVU0oU0RQX1JETUFfRF9PUF9FTkFCTEVfMCwgT1BfRU4sIEVO
QUJMRSk7DQo+ICsJCXNkcF9yZG1hX3JlZ193cml0ZShlbmdpbmUsIERfT1BfRU5BQkxFLCBy
ZWcpOw0KPiArCX0NCj4gKwlyZWcgPSBGSUVMRF9FTlVNKFNEUF9EX09QX0VOQUJMRV8wLCBP
UF9FTiwgRU5BQkxFKTsNCj4gKwlzZHBfcmVnX3dyaXRlKGVuZ2luZSwgRF9PUF9FTkFCTEUs
IHJlZyk7DQo+ICsNCj4gKwlyZXR1cm4gMDsNCj4gK30NCj4gKw0KPiArdm9pZA0KPiArZGxh
X3NkcF9yZG1hX2NoZWNrKHN0cnVjdCBkbGFfcHJvY2Vzc29yX2dyb3VwICpncm91cCkNCj4g
K3sNCj4gKwl1aW50OF90IHgxX3JkbWFfZW5hOw0KPiArCXVpbnQ4X3QgeDJfcmRtYV9lbmE7
DQo+ICsJdWludDhfdCB5X3JkbWFfZW5hOw0KPiArCXVpbnQ4X3QgZmx5Ow0KPiArCXN0cnVj
dCBkbGFfc2RwX29wX2Rlc2MgKnNkcF9vcDsNCj4gKwlzdHJ1Y3QgZGxhX3NkcF9zdXJmYWNl
X2Rlc2MgKnNkcF9zdXJmYWNlOw0KPiArDQo+ICsJc2RwX29wID0gJmdyb3VwLT5vcGVyYXRp
b25fZGVzYy0+c2RwX29wOw0KPiArCXNkcF9zdXJmYWNlID0gJmdyb3VwLT5zdXJmYWNlX2Rl
c2MtPnNkcF9zdXJmYWNlOw0KPiArDQo+ICsJeDFfcmRtYV9lbmEgPSBzZHBfb3AtPngxX29w
LmVuYWJsZTsNCj4gKwl4Ml9yZG1hX2VuYSA9IHNkcF9vcC0+eDJfb3AuZW5hYmxlOw0KPiAr
CXlfcmRtYV9lbmEgID0gc2RwX29wLT55X29wLmVuYWJsZTsNCj4gKw0KPiArCXgxX3JkbWFf
ZW5hICY9IChzZHBfb3AtPngxX29wLm1vZGUgIT0gU0RQX09QX1BFUl9MQVlFUik7DQo+ICsJ
eDJfcmRtYV9lbmEgJj0gKHNkcF9vcC0+eDJfb3AubW9kZSAhPSBTRFBfT1BfUEVSX0xBWUVS
KTsNCj4gKwl5X3JkbWFfZW5hICY9IChzZHBfb3AtPnlfb3AubW9kZSAhPSBTRFBfT1BfUEVS
X0xBWUVSKTsNCj4gKw0KPiArCWZseSA9IHNkcF9zdXJmYWNlLT5zcmNfZGF0YS50eXBlID09
IERMQV9NRU1fSFc7DQo+ICsNCj4gKwlncm91cC0+aXNfcmRtYV9uZWVkZWQgPSAoIWZseSkg
fHwgKHgxX3JkbWFfZW5hIHx8DQo+ICsJCQkJCXgyX3JkbWFfZW5hIHx8IHlfcmRtYV9lbmEp
Ow0KPiArfQ0KPiArDQo+ICtzdGF0aWMgaW50MzJfdA0KPiArcHJvY2Vzc29yX3NkcF9wcm9n
cmFtKHN0cnVjdCBkbGFfZW5naW5lICplbmdpbmUsIHN0cnVjdCBkbGFfcHJvY2Vzc29yX2dy
b3VwICpncm91cCkNCj4gK3sNCj4gKwlpbnQzMl90IHJldCA9IDA7DQo+ICsJdWludDY0X3Qg
c3JjX2FkZHIgPSAtMSwgeDFfYWRkciA9IC0xLCB4Ml9hZGRyID0gLTE7DQo+ICsJdWludDY0
X3QgIHlfYWRkciA9IC0xLCBkc3RfYWRkciA9IC0xOw0KPiArCXVpbnQzMl90IHJlZywgaGln
aCwgbG93Ow0KPiArCXVpbnQ4X3QgZmx5Ow0KPiArCXVpbnQzMl90IGF0b21fc2l6ZTsNCj4g
KwlzdHJ1Y3QgZGxhX3NkcF9vcCAqeDFfb3A7DQo+ICsJc3RydWN0IGRsYV9zZHBfb3AgKngy
X29wOw0KPiArCXN0cnVjdCBkbGFfc2RwX29wICp5X29wOw0KPiArCXVpbnQ4X3QgeDFfcmRt
YV9lbmE7DQo+ICsJdWludDhfdCB4Ml9yZG1hX2VuYTsNCj4gKwl1aW50OF90IHlfcmRtYV9l
bmE7DQo+ICsJdWludDhfdCBvdXRfZG1hX2VuYTsNCj4gKwlzdHJ1Y3QgZGxhX2x1dF9wYXJh
bSBsdXQ7DQo+ICsJc3RydWN0IGRsYV9zZHBfb3BfZGVzYyAqc2RwX29wOw0KPiArCXN0cnVj
dCBkbGFfc2RwX3N1cmZhY2VfZGVzYyAqc2RwX3N1cmZhY2U7DQo+ICsNCj4gKwlhdG9tX3Np
emUgPSBlbmdpbmUtPmNvbmZpZ19kYXRhLT5hdG9tX3NpemU7DQo+ICsNCj4gKwlzZHBfb3Ag
PSAmZ3JvdXAtPm9wZXJhdGlvbl9kZXNjLT5zZHBfb3A7DQo+ICsJc2RwX3N1cmZhY2UgPSAm
Z3JvdXAtPnN1cmZhY2VfZGVzYy0+c2RwX3N1cmZhY2U7DQo+ICsNCj4gKwlmbHkgPSBzZHBf
c3VyZmFjZS0+c3JjX2RhdGEudHlwZSA9PSBETEFfTUVNX0hXOw0KPiArCW91dF9kbWFfZW5h
ID0gc2RwX3N1cmZhY2UtPmRzdF9kYXRhLnR5cGUgIT0gRExBX01FTV9IVzsNCj4gKwl4MV9v
cCA9ICZzZHBfb3AtPngxX29wOw0KPiArCXgyX29wID0gJnNkcF9vcC0+eDJfb3A7DQo+ICsJ
eV9vcCA9ICZzZHBfb3AtPnlfb3A7DQo+ICsJeDFfcmRtYV9lbmEgPSB4MV9vcC0+ZW5hYmxl
ICYmIHgxX29wLT50eXBlICE9IFNEUF9PUF9OT05FOw0KPiArCXgyX3JkbWFfZW5hID0geDJf
b3AtPmVuYWJsZSAmJiB4Ml9vcC0+dHlwZSAhPSBTRFBfT1BfTk9ORTsNCj4gKwl5X3JkbWFf
ZW5hICA9IHlfb3AtPmVuYWJsZSAmJiB5X29wLT50eXBlICE9IFNEUF9PUF9OT05FOw0KPiAr
DQo+ICsJLyogbG9hZCBhZGRyZXNzICovDQo+ICsJaWYgKCFmbHkpIHsNCj4gKwkJcmV0ID0g
ZGxhX3JlYWRfaW5wdXRfYWRkcmVzcyhlbmdpbmUsICZzZHBfc3VyZmFjZS0+c3JjX2RhdGEs
DQo+ICsJCQkJCQkmc3JjX2FkZHIsDQo+ICsJCQkJCQlncm91cC0+b3BfZGVzYy0+aW5kZXgs
DQo+ICsJCQkJCQlncm91cC0+cm9pX2luZGV4LA0KPiArCQkJCQkgICAgMSk7DQo+ICsJCWlm
IChyZXQpDQo+ICsJCQlnb3RvIGV4aXQ7DQo+ICsJfQ0KPiArDQo+ICsJaWYgKG91dF9kbWFf
ZW5hKSB7DQo+ICsJCWRsYV9nZXRfZG1hX2N1YmVfYWRkcmVzcyhlbmdpbmUtPmRyaXZlcl9j
b250ZXh0LA0KPiArCQkJCQllbmdpbmUtPnRhc2stPnRhc2tfZGF0YSwNCj4gKwkJCQkJc2Rw
X3N1cmZhY2UtPmRzdF9kYXRhLmFkZHJlc3MsDQo+ICsJCQkJCXNkcF9zdXJmYWNlLT5kc3Rf
ZGF0YS5vZmZzZXQsDQo+ICsJCQkJCSh2b2lkICopJmRzdF9hZGRyLA0KPiArCQkJCQlERVNU
SU5BVElPTl9ETUEpOw0KPiArCX0NCj4gKw0KPiArCWlmIChzZHBfb3AtPmx1dF9pbmRleCA+
PSAwKSB7DQo+ICsJCWdyb3VwLT5sdXRfaW5kZXggPSBzZHBfb3AtPmx1dF9pbmRleDsNCj4g
KwkJZGxhX3JlYWRfbHV0KGVuZ2luZSwgc2RwX29wLT5sdXRfaW5kZXgsICh2b2lkICopJmx1
dCk7DQo+ICsJfQ0KPiArDQo+ICsNCj4gKwl4MV9yZG1hX2VuYSAmPSAoeDFfb3AtPm1vZGUg
IT0gU0RQX09QX1BFUl9MQVlFUik7DQo+ICsJeDJfcmRtYV9lbmEgJj0gKHgyX29wLT5tb2Rl
ICE9IFNEUF9PUF9QRVJfTEFZRVIpOw0KPiArCXlfcmRtYV9lbmEgJj0gKHlfb3AtPm1vZGUg
IT0gU0RQX09QX1BFUl9MQVlFUik7DQo+ICsNCj4gKwlpZiAoeDFfcmRtYV9lbmEpIHsNCj4g
KwkJZGxhX2dldF9kbWFfY3ViZV9hZGRyZXNzKGVuZ2luZS0+ZHJpdmVyX2NvbnRleHQsDQo+
ICsJCQkJCWVuZ2luZS0+dGFzay0+dGFza19kYXRhLA0KPiArCQkJCQlzZHBfc3VyZmFjZS0+
eDFfZGF0YS5hZGRyZXNzLA0KPiArCQkJCQlzZHBfc3VyZmFjZS0+eDFfZGF0YS5vZmZzZXQs
DQo+ICsJCQkJCSh2b2lkICopJngxX2FkZHIsDQo+ICsJCQkJCURFU1RJTkFUSU9OX0RNQSk7
DQo+ICsJfQ0KPiArCWlmICh4Ml9yZG1hX2VuYSkgew0KPiArCQlkbGFfZ2V0X2RtYV9jdWJl
X2FkZHJlc3MoZW5naW5lLT5kcml2ZXJfY29udGV4dCwNCj4gKwkJCQkJZW5naW5lLT50YXNr
LT50YXNrX2RhdGEsDQo+ICsJCQkJCXNkcF9zdXJmYWNlLT54Ml9kYXRhLmFkZHJlc3MsDQo+
ICsJCQkJCXNkcF9zdXJmYWNlLT54Ml9kYXRhLm9mZnNldCwNCj4gKwkJCQkJKHZvaWQgKikm
eDJfYWRkciwNCj4gKwkJCQkJREVTVElOQVRJT05fRE1BKTsNCj4gKwl9DQo+ICsJaWYgKHlf
cmRtYV9lbmEpIHsNCj4gKwkJZGxhX2dldF9kbWFfY3ViZV9hZGRyZXNzKGVuZ2luZS0+ZHJp
dmVyX2NvbnRleHQsDQo+ICsJCQkJCWVuZ2luZS0+dGFzay0+dGFza19kYXRhLA0KPiArCQkJ
CQlzZHBfc3VyZmFjZS0+eV9kYXRhLmFkZHJlc3MsDQo+ICsJCQkJCXNkcF9zdXJmYWNlLT55
X2RhdGEub2Zmc2V0LA0KPiArCQkJCQkodm9pZCAqKSZ5X2FkZHIsDQo+ICsJCQkJCURFU1RJ
TkFUSU9OX0RNQSk7DQo+ICsJfQ0KPiArDQo+ICsJcmVnID0gKG1hcF9mbHlbMF0gPDwgU0hJ
RlQoU0RQX1JETUFfRF9GRUFUVVJFX01PREVfQ0ZHXzAsIEZMWUlOR19NT0RFKSk7DQo+ICsJ
c2RwX3JkbWFfcmVnX3dyaXRlKGVuZ2luZSwgRF9GRUFUVVJFX01PREVfQ0ZHLCByZWcpOw0K
PiArDQo+ICsJcmVnID0gKG1hcF9lbmFbMV0gPDwgU0hJRlQoU0RQX1JETUFfRF9CUkRNQV9D
RkdfMCwgQlJETUFfRElTQUJMRSkpOw0KPiArCXNkcF9yZG1hX3JlZ193cml0ZShlbmdpbmUs
IERfQlJETUFfQ0ZHLCByZWcpOw0KPiArCXJlZyA9IChtYXBfZW5hWzFdIDw8IFNISUZUKFNE
UF9SRE1BX0RfTlJETUFfQ0ZHXzAsIE5SRE1BX0RJU0FCTEUpKTsNCj4gKwlzZHBfcmRtYV9y
ZWdfd3JpdGUoZW5naW5lLCBEX05SRE1BX0NGRywgcmVnKTsNCj4gKwlyZWcgPSAobWFwX2Vu
YVsxXSA8PCBTSElGVChTRFBfUkRNQV9EX0VSRE1BX0NGR18wLCBFUkRNQV9ESVNBQkxFKSk7
DQo+ICsJc2RwX3JkbWFfcmVnX3dyaXRlKGVuZ2luZSwgRF9FUkRNQV9DRkcsIHJlZyk7DQo+
ICsNCj4gKwlyZWcgPSAobWFwX2ZseVtmbHldIDw8DQo+ICsJCQlTSElGVChTRFBfUkRNQV9E
X0ZFQVRVUkVfTU9ERV9DRkdfMCwgRkxZSU5HX01PREUpKSB8DQo+ICsJKG1hcF93Z1tzZHBf
b3AtPmNvbnZfbW9kZSA9PSBDT05WX01PREVfV0lOT0dSQURdIDw8DQo+ICsJCQlTSElGVChT
RFBfUkRNQV9EX0ZFQVRVUkVfTU9ERV9DRkdfMCwgV0lOT0dSQUQpKSB8DQo+ICsJKG1hcF9w
cmVjaXNpb25bc2RwX29wLT5zcmNfcHJlY2lzaW9uXSA8PA0KPiArCQkJU0hJRlQoU0RQX1JE
TUFfRF9GRUFUVVJFX01PREVfQ0ZHXzAsIElOX1BSRUNJU0lPTikpIHwNCj4gKwkobWFwX3By
ZWNpc2lvbltzZHBfb3AtPmRzdF9wcmVjaXNpb25dIDw8DQo+ICsJCQlTSElGVChTRFBfUkRN
QV9EX0ZFQVRVUkVfTU9ERV9DRkdfMCwgT1VUX1BSRUNJU0lPTikpIHwNCj4gKwkobWFwX3By
b2NfcHJlY2lzaW9uW3NkcF9vcC0+ZHN0X3ByZWNpc2lvbl1bc2RwX29wLT5zcmNfcHJlY2lz
aW9uXSA8PA0KPiArCQkJU0hJRlQoU0RQX1JETUFfRF9GRUFUVVJFX01PREVfQ0ZHXzAsIFBS
T0NfUFJFQ0lTSU9OKSkgfA0KPiArCSgoc2RwX29wLT5iYXRjaF9udW0tMSkgPDwNCj4gKwkJ
CVNISUZUKFNEUF9SRE1BX0RfRkVBVFVSRV9NT0RFX0NGR18wLCBCQVRDSF9OVU1CRVIpKTsN
Cj4gKwlzZHBfcmRtYV9yZWdfd3JpdGUoZW5naW5lLCBEX0ZFQVRVUkVfTU9ERV9DRkcsIHJl
Zyk7DQo+ICsNCj4gKwlpZiAoZ3JvdXAtPmlzX3JkbWFfbmVlZGVkKSB7DQo+ICsNCj4gKwkJ
c2RwX3JkbWFfcmVnX3dyaXRlKGVuZ2luZSwgRF9EQVRBX0NVQkVfV0lEVEgsDQo+ICsJCQkJ
CXNkcF9zdXJmYWNlLT5zcmNfZGF0YS53aWR0aCAtIDEpOw0KPiArCQlzZHBfcmRtYV9yZWdf
d3JpdGUoZW5naW5lLCBEX0RBVEFfQ1VCRV9IRUlHSFQsDQo+ICsJCQkJCXNkcF9zdXJmYWNl
LT5zcmNfZGF0YS5oZWlnaHQgLSAxKTsNCj4gKwkJc2RwX3JkbWFfcmVnX3dyaXRlKGVuZ2lu
ZSwgRF9EQVRBX0NVQkVfQ0hBTk5FTCwNCj4gKwkJCQkJc2RwX3N1cmZhY2UtPnNyY19kYXRh
LmNoYW5uZWwgLSAxKTsNCj4gKw0KPiArCQkvKiBjb25maWcgU0RQIHNvdXJjZSBpbmZvICov
DQo+ICsJCWlmICghZmx5KSB7DQo+ICsJCQkvKioNCj4gKwkJCSAqIGlmIG5vdCBvbi10aGUt
Zmx5LCB3ZSBoYXZlIHRvIGNvbmZpZw0KPiArCQkJICogdGhlIHNvdXJjZSBjdWJlIGluZm8N
Cj4gKwkJCSAqLw0KPiArCQkJaGlnaCA9IHVwcGVyXzMyX2JpdHMoc3JjX2FkZHIpOw0KPiAr
CQkJbG93ID0gbG93ZXJfMzJfYml0cyhzcmNfYWRkcik7DQo+ICsJCQlzZHBfcmRtYV9yZWdf
d3JpdGUoZW5naW5lLCBEX1NSQ19CQVNFX0FERFJfTE9XLCBsb3cpOw0KPiArCQkJc2RwX3Jk
bWFfcmVnX3dyaXRlKGVuZ2luZSwgRF9TUkNfQkFTRV9BRERSX0hJR0gsIGhpZ2gpOw0KPiAr
CQkJc2RwX3JkbWFfcmVnX3dyaXRlKGVuZ2luZSwgRF9TUkNfTElORV9TVFJJREUsDQo+ICsJ
CQkJCXNkcF9zdXJmYWNlLT5zcmNfZGF0YS5saW5lX3N0cmlkZSk7DQo+ICsJCQlzZHBfcmRt
YV9yZWdfd3JpdGUoZW5naW5lLCBEX1NSQ19TVVJGQUNFX1NUUklERSwNCj4gKwkJCQkJc2Rw
X3N1cmZhY2UtPnNyY19kYXRhLnN1cmZfc3RyaWRlKTsNCj4gKwkJCXNkcF9yZG1hX3JlZ193
cml0ZShlbmdpbmUsIERfU1JDX0RNQV9DRkcsDQo+ICsJCQkJbWFwX3JhbV90eXBlW3NkcF9z
dXJmYWNlLT5zcmNfZGF0YS50eXBlXSk7DQo+ICsJCX0NCj4gKw0KPiArCQkvKiBjb25maWcg
eDEgc291cmNlIGluZm8gKi8NCj4gKwkJcmVnID0gKG1hcF9lbmFbeDFfcmRtYV9lbmFdIDw8
DQo+ICsJCQkJU0hJRlQoU0RQX1JETUFfRF9CUkRNQV9DRkdfMCwNCj4gKwkJCQlCUkRNQV9E
SVNBQkxFKSkgfA0KPiArCQkJKG1hcF9vcF90eXBlW3gxX29wLT50eXBlXSA8PA0KPiArCQkJ
CVNISUZUKFNEUF9SRE1BX0RfQlJETUFfQ0ZHXzAsDQo+ICsJCQkJQlJETUFfREFUQV9VU0Up
KSB8DQo+ICsJCQkobWFwX2VsZW1lbnRfc2l6ZVt4MV9vcC0+cHJlY2lzaW9uXSA8PA0KPiAr
CQkJCVNISUZUKFNEUF9SRE1BX0RfQlJETUFfQ0ZHXzAsDQo+ICsJCQkJQlJETUFfREFUQV9T
SVpFKSkgfA0KPiArCQkJKG1hcF9vcF9tb2RlW3gxX29wLT5tb2RlXSA8PA0KPiArCQkJCVNI
SUZUKFNEUF9SRE1BX0RfQlJETUFfQ0ZHXzAsDQo+ICsJCQkJQlJETUFfREFUQV9NT0RFKSkg
fA0KPiArCQkJKG1hcF9yYW1fdHlwZVtzZHBfc3VyZmFjZS0+eDFfZGF0YS50eXBlXSA8PA0K
PiArCQkJCVNISUZUKFNEUF9SRE1BX0RfQlJETUFfQ0ZHXzAsDQo+ICsJCQkJQlJETUFfUkFN
X1RZUEUpKTsNCj4gKwkJc2RwX3JkbWFfcmVnX3dyaXRlKGVuZ2luZSwgRF9CUkRNQV9DRkcs
IHJlZyk7DQo+ICsNCj4gKwkJaWYgKHgxX3JkbWFfZW5hKSB7DQo+ICsJCQloaWdoID0gdXBw
ZXJfMzJfYml0cyh4MV9hZGRyKTsNCj4gKwkJCWxvdyA9IGxvd2VyXzMyX2JpdHMoeDFfYWRk
cik7DQo+ICsJCQlzZHBfcmRtYV9yZWdfd3JpdGUoZW5naW5lLCBEX0JTX0JBU0VfQUREUl9M
T1csDQo+ICsJCQkJCWxvdyk7DQo+ICsJCQlzZHBfcmRtYV9yZWdfd3JpdGUoZW5naW5lLCBE
X0JTX0JBU0VfQUREUl9ISUdILA0KPiArCQkJCQloaWdoKTsNCj4gKwkJCXNkcF9yZG1hX3Jl
Z193cml0ZShlbmdpbmUsIERfQlNfTElORV9TVFJJREUsDQo+ICsJCQkJCXNkcF9zdXJmYWNl
LT54MV9kYXRhLmxpbmVfc3RyaWRlKTsNCj4gKwkJCXNkcF9yZG1hX3JlZ193cml0ZShlbmdp
bmUsIERfQlNfU1VSRkFDRV9TVFJJREUsDQo+ICsJCQkJCXNkcF9zdXJmYWNlLT54MV9kYXRh
LnN1cmZfc3RyaWRlKTsNCj4gKwkJfQ0KPiArDQo+ICsJCS8qIGNvbmZpZyB4MiBzb3VyY2Ug
aW5mbyAqLw0KPiArCQlyZWcgPSAobWFwX2VuYVt4Ml9yZG1hX2VuYV0gPDwNCj4gKwkJCQkJ
U0hJRlQoU0RQX1JETUFfRF9OUkRNQV9DRkdfMCwNCj4gKwkJCQkJTlJETUFfRElTQUJMRSkp
IHwNCj4gKwkJCShtYXBfb3BfdHlwZVt4Ml9vcC0+dHlwZV0gPDwNCj4gKwkJCQkJU0hJRlQo
U0RQX1JETUFfRF9OUkRNQV9DRkdfMCwNCj4gKwkJCQkJTlJETUFfREFUQV9VU0UpKSB8DQo+
ICsJCQkobWFwX2VsZW1lbnRfc2l6ZVt4Ml9vcC0+cHJlY2lzaW9uXSA8PA0KPiArCQkJCQlT
SElGVChTRFBfUkRNQV9EX05SRE1BX0NGR18wLA0KPiArCQkJCQlOUkRNQV9EQVRBX1NJWkUp
KSB8DQo+ICsJCQkobWFwX29wX21vZGVbeDJfb3AtPm1vZGVdIDw8DQo+ICsJCQkJCVNISUZU
KFNEUF9SRE1BX0RfTlJETUFfQ0ZHXzAsDQo+ICsJCQkJCU5SRE1BX0RBVEFfTU9ERSkpIHwN
Cj4gKwkJCShtYXBfcmFtX3R5cGVbc2RwX3N1cmZhY2UtPngyX2RhdGEudHlwZV0gPDwNCj4g
KwkJCQkJU0hJRlQoU0RQX1JETUFfRF9OUkRNQV9DRkdfMCwNCj4gKwkJCQkJTlJETUFfUkFN
X1RZUEUpKTsNCj4gKw0KPiArCQlzZHBfcmRtYV9yZWdfd3JpdGUoZW5naW5lLCBEX05SRE1B
X0NGRywgcmVnKTsNCj4gKw0KPiArCQlpZiAoeDJfcmRtYV9lbmEpIHsNCj4gKwkJCWhpZ2gg
PSB1cHBlcl8zMl9iaXRzKHgyX2FkZHIpOw0KPiArCQkJbG93ID0gbG93ZXJfMzJfYml0cyh4
Ml9hZGRyKTsNCj4gKwkJCXNkcF9yZG1hX3JlZ193cml0ZShlbmdpbmUsIERfQk5fQkFTRV9B
RERSX0xPVywNCj4gKwkJCQkJbG93KTsNCj4gKwkJCXNkcF9yZG1hX3JlZ193cml0ZShlbmdp
bmUsIERfQk5fQkFTRV9BRERSX0hJR0gsDQo+ICsJCQkJCWhpZ2gpOw0KPiArCQkJc2RwX3Jk
bWFfcmVnX3dyaXRlKGVuZ2luZSwgRF9CTl9MSU5FX1NUUklERSwNCj4gKwkJCQkJc2RwX3N1
cmZhY2UtPngyX2RhdGEubGluZV9zdHJpZGUpOw0KPiArCQkJc2RwX3JkbWFfcmVnX3dyaXRl
KGVuZ2luZSwgRF9CTl9TVVJGQUNFX1NUUklERSwNCj4gKwkJCQkJc2RwX3N1cmZhY2UtPngy
X2RhdGEuc3VyZl9zdHJpZGUpOw0KPiArCQl9DQo+ICsNCj4gKwkJLyogY29uZmlnIHkgc291
cmNlIGluZm8gKi8NCj4gKwkJcmVnID0gKG1hcF9lbmFbeV9yZG1hX2VuYV0gPDwNCj4gKwkJ
CQlTSElGVChTRFBfUkRNQV9EX0VSRE1BX0NGR18wLA0KPiArCQkJCUVSRE1BX0RJU0FCTEUp
KSB8DQo+ICsJCQkobWFwX29wX3R5cGVbeV9vcC0+dHlwZV0gPDwNCj4gKwkJCQlTSElGVChT
RFBfUkRNQV9EX0VSRE1BX0NGR18wLA0KPiArCQkJCUVSRE1BX0RBVEFfVVNFKSkgfA0KPiAr
CQkJKG1hcF9lbGVtZW50X3NpemVbeV9vcC0+cHJlY2lzaW9uXSA8PA0KPiArCQkJCVNISUZU
KFNEUF9SRE1BX0RfRVJETUFfQ0ZHXzAsDQo+ICsJCQkJRVJETUFfREFUQV9TSVpFKSkgfA0K
PiArCQkJKG1hcF9vcF9tb2RlW3lfb3AtPm1vZGVdIDw8DQo+ICsJCQkJU0hJRlQoU0RQX1JE
TUFfRF9FUkRNQV9DRkdfMCwNCj4gKwkJCQlFUkRNQV9EQVRBX01PREUpKSB8DQo+ICsJCQko
bWFwX3JhbV90eXBlW3NkcF9zdXJmYWNlLT55X2RhdGEudHlwZV0gPDwNCj4gKwkJCQlTSElG
VChTRFBfUkRNQV9EX0VSRE1BX0NGR18wLA0KPiArCQkJCUVSRE1BX1JBTV9UWVBFKSk7DQo+
ICsNCj4gKwkJc2RwX3JkbWFfcmVnX3dyaXRlKGVuZ2luZSwgRF9FUkRNQV9DRkcsIHJlZyk7
DQo+ICsJCWlmICh5X3JkbWFfZW5hKSB7DQo+ICsJCQloaWdoID0gdXBwZXJfMzJfYml0cyh5
X2FkZHIpOw0KPiArCQkJbG93ID0gbG93ZXJfMzJfYml0cyh5X2FkZHIpOw0KPiArCQkJc2Rw
X3JkbWFfcmVnX3dyaXRlKGVuZ2luZSwgRF9FV19CQVNFX0FERFJfTE9XLA0KPiArCQkJCQls
b3cpOw0KPiArCQkJc2RwX3JkbWFfcmVnX3dyaXRlKGVuZ2luZSwgRF9FV19CQVNFX0FERFJf
SElHSCwNCj4gKwkJCQkJaGlnaCk7DQo+ICsJCQlzZHBfcmRtYV9yZWdfd3JpdGUoZW5naW5l
LCBEX0VXX0xJTkVfU1RSSURFLA0KPiArCQkJCQlzZHBfc3VyZmFjZS0+eV9kYXRhLmxpbmVf
c3RyaWRlKTsNCj4gKwkJCXNkcF9yZG1hX3JlZ193cml0ZShlbmdpbmUsIERfRVdfU1VSRkFD
RV9TVFJJREUsDQo+ICsJCQkJCXNkcF9zdXJmYWNlLT55X2RhdGEuc3VyZl9zdHJpZGUpOw0K
PiArCQl9DQo+ICsJfQ0KPiArDQo+ICsJaWYgKHNkcF9vcC0+bHV0X2luZGV4ID49IDApDQo+
ICsJCXVwZGF0ZV9sdXQoZW5naW5lLCBTRFBfU19MVVRfQUNDRVNTX0NGR18wLCAmbHV0LA0K
PiArCQkJCQlzZHBfb3AtPnNyY19wcmVjaXNpb24pOw0KPiArDQo+ICsJc2RwX3JlZ193cml0
ZShlbmdpbmUsIERfREFUQV9DVUJFX1dJRFRILCBzZHBfc3VyZmFjZS0+c3JjX2RhdGEud2lk
dGggLSAxKTsNCj4gKwlzZHBfcmVnX3dyaXRlKGVuZ2luZSwgRF9EQVRBX0NVQkVfSEVJR0hU
LCBzZHBfc3VyZmFjZS0+c3JjX2RhdGEuaGVpZ2h0IC0gMSk7DQo+ICsJc2RwX3JlZ193cml0
ZShlbmdpbmUsIERfREFUQV9DVUJFX0NIQU5ORUwsIHNkcF9zdXJmYWNlLT5zcmNfZGF0YS5j
aGFubmVsIC0gMSk7DQo+ICsNCj4gKwlpZiAob3V0X2RtYV9lbmEpIHsNCj4gKwkJaGlnaCA9
IHVwcGVyXzMyX2JpdHMoZHN0X2FkZHIpOw0KPiArCQlsb3cgPSBsb3dlcl8zMl9iaXRzKGRz
dF9hZGRyKTsNCj4gKwkJc2RwX3JlZ193cml0ZShlbmdpbmUsIERfRFNUX0JBU0VfQUREUl9I
SUdILA0KPiArCQkJCWhpZ2gpOw0KPiArCQlzZHBfcmVnX3dyaXRlKGVuZ2luZSwgRF9EU1Rf
QkFTRV9BRERSX0xPVywNCj4gKwkJCQlsb3cpOw0KPiArCQlzZHBfcmVnX3dyaXRlKGVuZ2lu
ZSwgRF9EU1RfTElORV9TVFJJREUsDQo+ICsJCQkJc2RwX3N1cmZhY2UtPmRzdF9kYXRhLmxp
bmVfc3RyaWRlKTsNCj4gKwkJc2RwX3JlZ193cml0ZShlbmdpbmUsIERfRFNUX1NVUkZBQ0Vf
U1RSSURFLA0KPiArCQkJCXNkcF9zdXJmYWNlLT5kc3RfZGF0YS5zdXJmX3N0cmlkZSk7DQo+
ICsJfQ0KPiArDQo+ICsJLyogQ29uZmlnIEJTIG1vZHVsZSAqLw0KPiArCXJlZyA9IChtYXBf
YnlwYXNzW3gxX29wLT5lbmFibGVdIDw8DQo+ICsJCQlTSElGVChTRFBfRF9EUF9CU19DRkdf
MCwNCj4gKwkJCUJTX0JZUEFTUykpIHwNCj4gKwkJKG1hcF9ieXBhc3NbeDFfb3AtPnR5cGUg
IT0gU0RQX09QX01VTCAmJg0KPiArCQkJCXgxX29wLT50eXBlICE9IFNEUF9PUF9OT05FXSA8
PA0KPiArCQkJU0hJRlQoU0RQX0RfRFBfQlNfQ0ZHXzAsDQo+ICsJCQlCU19BTFVfQllQQVNT
KSkgfA0KPiArCQkobWFwX2FsdV9vcFt4MV9vcC0+YWx1X3R5cGVdIDw8DQo+ICsJCQlTSElG
VChTRFBfRF9EUF9CU19DRkdfMCwNCj4gKwkJCUJTX0FMVV9BTEdPKSkgfA0KPiArCQkobWFw
X2J5cGFzc1t4MV9vcC0+dHlwZSAhPSBTRFBfT1BfQUREICYmDQo+ICsJCQl4MV9vcC0+dHlw
ZSAhPSBTRFBfT1BfTk9ORV0gPDwNCj4gKwkJCVNISUZUKFNEUF9EX0RQX0JTX0NGR18wLA0K
PiArCQkJQlNfTVVMX0JZUEFTUykpIHwNCj4gKwkJKG1hcF9wcmVsdVt4MV9vcC0+YWN0ID09
IEFDVElWQVRJT05fUFJFTFVdDQo+ICsJCQk8PCBTSElGVChTRFBfRF9EUF9CU19DRkdfMCwN
Cj4gKwkJCUJTX01VTF9QUkVMVSkpIHwNCj4gKwkJKG1hcF9ieXBhc3NbeDFfb3AtPmFjdCA9
PSBBQ1RJVkFUSU9OX1JFTFVdIDw8DQo+ICsJCQlTSElGVChTRFBfRF9EUF9CU19DRkdfMCwN
Cj4gKwkJCUJTX1JFTFVfQllQQVNTKSk7DQo+ICsJc2RwX3JlZ193cml0ZShlbmdpbmUsIERf
RFBfQlNfQ0ZHLCByZWcpOw0KPiArDQo+ICsJaWYgKHgxX29wLT5lbmFibGUpIHsNCj4gKwkJ
aWYgKHgxX29wLT50eXBlID09IFNEUF9PUF9BREQgfHwNCj4gKwkJCQl4MV9vcC0+dHlwZSA9
PSBTRFBfT1BfQk9USCkgew0KPiArCQkJcmVnID0gKG1hcF9hbHVfc3JjW3gxX29wLT5tb2Rl
ID09IFNEUF9PUF9QRVJfTEFZRVJdIDw8DQo+ICsJCQkJCVNISUZUKFNEUF9EX0RQX0JTX0FM
VV9DRkdfMCwNCj4gKwkJCQkJQlNfQUxVX1NSQykpIHwNCj4gKwkJCQkoeDFfb3AtPnNoaWZ0
X3ZhbHVlIDw8DQo+ICsJCQkJCVNISUZUKFNEUF9EX0RQX0JTX0FMVV9DRkdfMCwNCj4gKwkJ
CQkJQlNfQUxVX1NISUZUX1ZBTFVFKSk7DQo+ICsJCQlzZHBfcmVnX3dyaXRlKGVuZ2luZSwg
RF9EUF9CU19BTFVfQ0ZHLCByZWcpOw0KPiArCQl9DQo+ICsNCj4gKwkJaWYgKHgxX29wLT5t
b2RlID09IFNEUF9PUF9QRVJfTEFZRVIpIHsNCj4gKwkJCXNkcF9yZWdfd3JpdGUoZW5naW5l
LCBEX0RQX0JTX0FMVV9TUkNfVkFMVUUsDQo+ICsJCQkJCXgxX29wLT5hbHVfb3BlcmFuZCk7
DQo+ICsJCQlzZHBfcmVnX3dyaXRlKGVuZ2luZSwgRF9EUF9CU19NVUxfU1JDX1ZBTFVFLA0K
PiArCQkJCQl4MV9vcC0+bXVsX29wZXJhbmQpOw0KPiArCQl9DQo+ICsNCj4gKwkJLyoqDQo+
ICsJCSAqIE1VTCB0cnVuY2F0ZSB3aWxsIHRha2UgZWZmZWN0IG5vIG1hdHRlcg0KPiArCQkg
KiBNVUwgaXMgYnlwYXNzZWQgb3Igbm90DQo+ICsJCSAqLw0KPiArCQlyZWcgPSAobWFwX2Fs
dV9zcmNbeDFfb3AtPm1vZGUgPT0gU0RQX09QX1BFUl9MQVlFUl0gPDwNCj4gKwkJCVNISUZU
KFNEUF9EX0RQX0JTX01VTF9DRkdfMCwNCj4gKwkJCUJTX01VTF9TUkMpKSB8DQo+ICsJCSh4
MV9vcC0+dHJ1bmNhdGUgPDwNCj4gKwkJCVNISUZUKFNEUF9EX0RQX0JTX01VTF9DRkdfMCwN
Cj4gKwkJCUJTX01VTF9TSElGVF9WQUxVRSkpOw0KPiArCQlzZHBfcmVnX3dyaXRlKGVuZ2lu
ZSwgRF9EUF9CU19NVUxfQ0ZHLCByZWcpOw0KPiArCX0NCj4gKw0KPiArCS8qIENvbmZpZyBC
TiBtb2R1bGUgKi8NCj4gKwlyZWcgPSAobWFwX2J5cGFzc1t4Ml9vcC0+ZW5hYmxlXSA8PA0K
PiArCQkJU0hJRlQoU0RQX0RfRFBfQk5fQ0ZHXzAsDQo+ICsJCQlCTl9CWVBBU1MpKSB8DQo+
ICsJCShtYXBfYnlwYXNzW3gyX29wLT50eXBlICE9IFNEUF9PUF9NVUwgJiYNCj4gKwkJCXgy
X29wLT50eXBlICE9IFNEUF9PUF9OT05FXSA8PA0KPiArCQkJU0hJRlQoU0RQX0RfRFBfQk5f
Q0ZHXzAsDQo+ICsJCQlCTl9BTFVfQllQQVNTKSkgfA0KPiArCQkobWFwX2FsdV9vcFt4Ml9v
cC0+YWx1X3R5cGVdIDw8DQo+ICsJCQlTSElGVChTRFBfRF9EUF9CTl9DRkdfMCwNCj4gKwkJ
CUJOX0FMVV9BTEdPKSkgfA0KPiArCQkobWFwX2J5cGFzc1t4Ml9vcC0+dHlwZSAhPSBTRFBf
T1BfQUREICYmDQo+ICsJCQl4Ml9vcC0+dHlwZSAhPSBTRFBfT1BfTk9ORV0gPDwNCj4gKwkJ
CVNISUZUKFNEUF9EX0RQX0JOX0NGR18wLA0KPiArCQkJQk5fTVVMX0JZUEFTUykpIHwNCj4g
KwkJKG1hcF9wcmVsdVt4Ml9vcC0+YWN0ID09IEFDVElWQVRJT05fUFJFTFVdDQo+ICsJCQk8
PCBTSElGVChTRFBfRF9EUF9CTl9DRkdfMCwNCj4gKwkJCUJOX01VTF9QUkVMVSkpIHwNCj4g
KwkJKG1hcF9ieXBhc3NbeDJfb3AtPmFjdCA9PSBBQ1RJVkFUSU9OX1JFTFVdDQo+ICsJCQk8
PCBTSElGVChTRFBfRF9EUF9CTl9DRkdfMCwNCj4gKwkJCUJOX1JFTFVfQllQQVNTKSk7DQo+
ICsJc2RwX3JlZ193cml0ZShlbmdpbmUsIERfRFBfQk5fQ0ZHLCByZWcpOw0KPiArDQo+ICsJ
aWYgKHgyX29wLT5lbmFibGUpIHsNCj4gKwkJaWYgKHgyX29wLT50eXBlID09IFNEUF9PUF9B
REQgfHwNCj4gKwkJCXgyX29wLT50eXBlID09IFNEUF9PUF9CT1RIKSB7DQo+ICsJCQlyZWcg
PSAobWFwX2FsdV9zcmNbeDJfb3AtPm1vZGUgPT0gU0RQX09QX1BFUl9MQVlFUl0gPDwNCj4g
KwkJCQkJU0hJRlQoU0RQX0RfRFBfQk5fQUxVX0NGR18wLA0KPiArCQkJCQlCTl9BTFVfU1JD
KSkgfA0KPiArCQkJCSh4Ml9vcC0+c2hpZnRfdmFsdWUgPDwNCj4gKwkJCQkJU0hJRlQoU0RQ
X0RfRFBfQk5fQUxVX0NGR18wLA0KPiArCQkJCQlCTl9BTFVfU0hJRlRfVkFMVUUpKTsNCj4g
KwkJCXNkcF9yZWdfd3JpdGUoZW5naW5lLCBEX0RQX0JOX0FMVV9DRkcsIHJlZyk7DQo+ICsJ
CX0NCj4gKw0KPiArCQlpZiAoeDJfb3AtPm1vZGUgPT0gU0RQX09QX1BFUl9MQVlFUikgew0K
PiArCQkJc2RwX3JlZ193cml0ZShlbmdpbmUsIERfRFBfQk5fQUxVX1NSQ19WQUxVRSwNCj4g
KwkJCQkJeDJfb3AtPmFsdV9vcGVyYW5kKTsNCj4gKwkJCXNkcF9yZWdfd3JpdGUoZW5naW5l
LCBEX0RQX0JOX01VTF9TUkNfVkFMVUUsDQo+ICsJCQkJCXgyX29wLT5tdWxfb3BlcmFuZCk7
DQo+ICsJCX0NCj4gKw0KPiArCQlyZWcgPSAobWFwX2FsdV9zcmNbeDJfb3AtPm1vZGUgPT0g
U0RQX09QX1BFUl9MQVlFUl0gPDwNCj4gKwkJCQlTSElGVChTRFBfRF9EUF9CTl9NVUxfQ0ZH
XzAsDQo+ICsJCQkJQk5fTVVMX1NSQykpIHwNCj4gKwkJCSh4Ml9vcC0+dHJ1bmNhdGUgPDwN
Cj4gKwkJCQlTSElGVChTRFBfRF9EUF9CTl9NVUxfQ0ZHXzAsDQo+ICsJCQkJQk5fTVVMX1NI
SUZUX1ZBTFVFKSk7DQo+ICsJCXNkcF9yZWdfd3JpdGUoZW5naW5lLCBEX0RQX0JOX01VTF9D
RkcsIHJlZyk7DQo+ICsJfQ0KPiArDQo+ICsJLyogQ29uZmlnIEVXIG1vZHVsZSAqLw0KPiAr
CXJlZyA9IChtYXBfYnlwYXNzW3lfb3AtPmVuYWJsZV0gPDwNCj4gKwkJCVNISUZUKFNEUF9E
X0RQX0VXX0NGR18wLA0KPiArCQkJRVdfQllQQVNTKSkgfA0KPiArCQkobWFwX2J5cGFzc1t5
X29wLT50eXBlICE9IFNEUF9PUF9NVUwgJiYNCj4gKwkJCXlfb3AtPnR5cGUgIT0gU0RQX09Q
X05PTkVdIDw8DQo+ICsJCQlTSElGVChTRFBfRF9EUF9FV19DRkdfMCwNCj4gKwkJCUVXX0FM
VV9CWVBBU1MpKSB8DQo+ICsJCShtYXBfYWx1X29wW3lfb3AtPmFsdV90eXBlXSA8PA0KPiAr
CQkJU0hJRlQoU0RQX0RfRFBfRVdfQ0ZHXzAsDQo+ICsJCQlFV19BTFVfQUxHTykpIHwNCj4g
KwkJKG1hcF9ieXBhc3NbeV9vcC0+dHlwZSAhPSBTRFBfT1BfQUREICYmDQo+ICsJCQl5X29w
LT50eXBlICE9IFNEUF9PUF9OT05FXSA8PA0KPiArCQkJU0hJRlQoU0RQX0RfRFBfRVdfQ0ZH
XzAsDQo+ICsJCQlFV19NVUxfQllQQVNTKSkgfA0KPiArCQkoKG1hcF9wcmVsdVt5X29wLT5h
Y3QgPT0gQUNUSVZBVElPTl9QUkVMVV0pIDw8DQo+ICsJCQlTSElGVChTRFBfRF9EUF9FV19D
RkdfMCwNCj4gKwkJCUVXX01VTF9QUkVMVSkpIHwNCj4gKwkJKG1hcF9ieXBhc3NbeV9vcC0+
YWN0ID09IEFDVElWQVRJT05fTFVUXSA8PA0KPiArCQkJU0hJRlQoU0RQX0RfRFBfRVdfQ0ZH
XzAsDQo+ICsJCQlFV19MVVRfQllQQVNTKSk7DQo+ICsJc2RwX3JlZ193cml0ZShlbmdpbmUs
IERfRFBfRVdfQ0ZHLCByZWcpOw0KPiArDQo+ICsJaWYgKHlfb3AtPmVuYWJsZSkgew0KPiAr
CQlpZiAoeV9vcC0+dHlwZSA9PSBTRFBfT1BfQUREIHx8IHlfb3AtPnR5cGUgPT0gU0RQX09Q
X0JPVEgpIHsNCj4gKwkJCXJlZyA9IChtYXBfYWx1X3NyY1t5X29wLT5tb2RlID09IFNEUF9P
UF9QRVJfTEFZRVJdIDw8DQo+ICsJCQkJCVNISUZUKFNEUF9EX0RQX0VXX0FMVV9DRkdfMCwN
Cj4gKwkJCQkJRVdfQUxVX1NSQykpIHwNCj4gKwkJCQkobWFwX2J5cGFzc1t5X29wLT5jdnQu
YWx1X2N2dC5lbmFibGVdIDw8DQo+ICsJCQkJCVNISUZUKFNEUF9EX0RQX0VXX0FMVV9DRkdf
MCwNCj4gKwkJCQkJRVdfQUxVX0NWVF9CWVBBU1MpKTsNCj4gKwkJCXNkcF9yZWdfd3JpdGUo
ZW5naW5lLCBEX0RQX0VXX0FMVV9DRkcsIHJlZyk7DQo+ICsNCj4gKwkJCWlmICh5X29wLT5t
b2RlID09IFNEUF9PUF9QRVJfTEFZRVIpIHsNCj4gKwkJCQlzZHBfcmVnX3dyaXRlKGVuZ2lu
ZSwgRF9EUF9FV19BTFVfU1JDX1ZBTFVFLA0KPiArCQkJCQkJeV9vcC0+YWx1X29wZXJhbmQp
Ow0KPiArCQkJfSBlbHNlIHsNCj4gKwkJCQlzZHBfcmVnX3dyaXRlKGVuZ2luZSwgRF9EUF9F
V19BTFVfQ1ZUX09GRlNFVF9WQUxVRSwNCj4gKwkJCQkJCXlfb3AtPmN2dC5hbHVfY3Z0Lm9m
ZnNldCk7DQo+ICsJCQkJc2RwX3JlZ193cml0ZShlbmdpbmUsIERfRFBfRVdfQUxVX0NWVF9T
Q0FMRV9WQUxVRSwNCj4gKwkJCQkJCXlfb3AtPmN2dC5hbHVfY3Z0LnNjYWxlKTsNCj4gKwkJ
CQlzZHBfcmVnX3dyaXRlKGVuZ2luZSwgRF9EUF9FV19BTFVfQ1ZUX1RSVU5DQVRFX1ZBTFVF
LA0KPiArCQkJCQkJeV9vcC0+Y3Z0LmFsdV9jdnQudHJ1bmNhdGUpOw0KPiArCQkJfQ0KPiAr
CQl9DQo+ICsNCj4gKwkJaWYgKHlfb3AtPnR5cGUgPT0gU0RQX09QX01VTCB8fCB5X29wLT50
eXBlID09IFNEUF9PUF9CT1RIKSB7DQo+ICsJCQlyZWcgPSAobWFwX2FsdV9zcmNbeV9vcC0+
bW9kZSA9PSBTRFBfT1BfUEVSX0xBWUVSXSA8PA0KPiArCQkJCQlTSElGVChTRFBfRF9EUF9F
V19NVUxfQ0ZHXzAsDQo+ICsJCQkJCUVXX01VTF9TUkMpKSB8DQo+ICsJCQkJKG1hcF9ieXBh
c3NbeV9vcC0+Y3Z0Lm11bF9jdnQuZW5hYmxlXSA8PA0KPiArCQkJCQlTSElGVChTRFBfRF9E
UF9FV19NVUxfQ0ZHXzAsDQo+ICsJCQkJCUVXX01VTF9DVlRfQllQQVNTKSk7DQo+ICsJCQlz
ZHBfcmVnX3dyaXRlKGVuZ2luZSwgRF9EUF9FV19NVUxfQ0ZHLCByZWcpOw0KPiArDQo+ICsJ
CQlpZiAoeV9vcC0+bW9kZSA9PSBTRFBfT1BfUEVSX0xBWUVSKSB7DQo+ICsJCQkJc2RwX3Jl
Z193cml0ZShlbmdpbmUsIERfRFBfRVdfTVVMX1NSQ19WQUxVRSwNCj4gKwkJCQkJCXlfb3At
Pm11bF9vcGVyYW5kKTsNCj4gKwkJCX0gZWxzZSB7DQo+ICsJCQkJc2RwX3JlZ193cml0ZShl
bmdpbmUsIERfRFBfRVdfTVVMX0NWVF9PRkZTRVRfVkFMVUUsDQo+ICsJCQkJCQl5X29wLT5j
dnQubXVsX2N2dC5vZmZzZXQpOw0KPiArCQkJCXNkcF9yZWdfd3JpdGUoZW5naW5lLCBEX0RQ
X0VXX01VTF9DVlRfU0NBTEVfVkFMVUUsDQo+ICsJCQkJCQl5X29wLT5jdnQubXVsX2N2dC5z
Y2FsZSk7DQo+ICsJCQkJc2RwX3JlZ193cml0ZShlbmdpbmUsIERfRFBfRVdfTVVMX0NWVF9U
UlVOQ0FURV9WQUxVRSwNCj4gKwkJCQkJCXlfb3AtPmN2dC5tdWxfY3Z0LnRydW5jYXRlKTsN
Cj4gKwkJCX0NCj4gKwkJfQ0KPiArDQo+ICsJCXNkcF9yZWdfd3JpdGUoZW5naW5lLCBEX0RQ
X0VXX1RSVU5DQVRFX1ZBTFVFLCB5X29wLT50cnVuY2F0ZSk7DQo+ICsJfQ0KPiArDQo+ICsJ
cmVnID0gKG1hcF9mbHlbc2RwX3N1cmZhY2UtPnNyY19kYXRhLnR5cGUgPT0gRExBX01FTV9I
V10gPDwNCj4gKwkJCVNISUZUKFNEUF9EX0ZFQVRVUkVfTU9ERV9DRkdfMCwNCj4gKwkJCUZM
WUlOR19NT0RFKSkgfA0KPiArCQkobWFwX2RzdFtzZHBfc3VyZmFjZS0+ZHN0X2RhdGEudHlw
ZSA9PSBETEFfTUVNX0hXXSA8PA0KPiArCQkJU0hJRlQoU0RQX0RfRkVBVFVSRV9NT0RFX0NG
R18wLA0KPiArCQkJT1VUUFVUX0RTVCkpIHwNCj4gKwkJKG1hcF93Z1tzZHBfb3AtPmNvbnZf
bW9kZSA9PSBDT05WX01PREVfV0lOT0dSQURdIDw8DQo+ICsJCQlTSElGVChTRFBfRF9GRUFU
VVJFX01PREVfQ0ZHXzAsDQo+ICsJCQlXSU5PR1JBRCkpIHwNCj4gKwkJKChzZHBfb3AtPmJh
dGNoX251bSAtIDEpIDw8DQo+ICsJCQlTSElGVChTRFBfRF9GRUFUVVJFX01PREVfQ0ZHXzAs
DQo+ICsJCQlCQVRDSF9OVU1CRVIpKTsNCj4gKwlzZHBfcmVnX3dyaXRlKGVuZ2luZSwgRF9G
RUFUVVJFX01PREVfQ0ZHLCByZWcpOw0KPiArCXNkcF9yZWdfd3JpdGUoZW5naW5lLCBEX0RT
VF9ETUFfQ0ZHLA0KPiArCQkJbWFwX3JhbV90eXBlW3NkcF9zdXJmYWNlLT5kc3RfZGF0YS50
eXBlXSk7DQo+ICsJaWYgKHNkcF9vcC0+YmF0Y2hfbnVtID4gMSkNCj4gKwkJc2RwX3JlZ193
cml0ZShlbmdpbmUsIERfRFNUX0JBVENIX1NUUklERSwgc2RwX29wLT5iYXRjaF9zdHJpZGUp
Ow0KPiArDQo+ICsJcmVnID0NCj4gKwkobWFwX3Byb2NfcHJlY2lzaW9uW3NkcF9vcC0+ZHN0
X3ByZWNpc2lvbl1bc2RwX29wLT5zcmNfcHJlY2lzaW9uXSA8PA0KPiArCQkJU0hJRlQoU0RQ
X0RfREFUQV9GT1JNQVRfMCwNCj4gKwkJCVBST0NfUFJFQ0lTSU9OKSkgfA0KPiArCQkobWFw
X3ByZWNpc2lvbltzZHBfb3AtPmRzdF9wcmVjaXNpb25dIDw8DQo+ICsJCQlTSElGVChTRFBf
RF9EQVRBX0ZPUk1BVF8wLA0KPiArCQkJT1VUX1BSRUNJU0lPTikpOw0KPiArCXNkcF9yZWdf
d3JpdGUoZW5naW5lLCBEX0RBVEFfRk9STUFULCByZWcpOw0KPiArCXNkcF9yZWdfd3JpdGUo
ZW5naW5lLCBEX0NWVF9PRkZTRVQsIHNkcF9vcC0+b3V0X2N2dC5vZmZzZXQpOw0KPiArCXNk
cF9yZWdfd3JpdGUoZW5naW5lLCBEX0NWVF9TQ0FMRSwgc2RwX29wLT5vdXRfY3Z0LnNjYWxl
KTsNCj4gKwlzZHBfcmVnX3dyaXRlKGVuZ2luZSwgRF9DVlRfU0hJRlQsIHNkcF9vcC0+b3V0
X2N2dC50cnVuY2F0ZSk7DQo+ICsNCj4gK2V4aXQ6DQo+ICsJcmV0dXJuIHJldDsNCj4gK30N
Cj4gKw0KPiAraW50DQo+ICtkbGFfc2RwX2lzX3JlYWR5KHN0cnVjdCBkbGFfcHJvY2Vzc29y
ICpwcm9jZXNzb3IsDQo+ICsJCQkgICBzdHJ1Y3QgZGxhX3Byb2Nlc3Nvcl9ncm91cCAqZ3Jv
dXApDQo+ICt7DQo+ICsJc3RydWN0IGRsYV9wcm9jZXNzb3JfZ3JvdXAgKm5leHRfZ3JvdXA7
DQo+ICsJc3RydWN0IGRsYV9zZHBfb3BfZGVzYyAqc2RwX29wOw0KPiArDQo+ICsJc2RwX29w
ID0gJmdyb3VwLT5vcGVyYXRpb25fZGVzYy0+c2RwX29wOw0KPiArCW5leHRfZ3JvdXAgPSAm
cHJvY2Vzc29yLT5ncm91cHNbIWdyb3VwLT5pZF07DQo+ICsNCj4gKwkvKioNCj4gKwkgKiBT
aW5nbGUgTFVUIGlzIHNoYXJlZCBiZXR3ZWVuIHR3byBTRFAgZ3JvdXBzLCBuZWVkIHRvIG1h
a2UNCj4gKwkgKiBzdXJlIHRoYXQgdXNhZ2UgZG9lcyBub3QgY29uZmxpY3QuIEFsc28sIExV
VCB3cml0ZQ0KPiArCSAqIGFjY2VzcyBpcyBsb2NrZWQgd2hlbiBTRFAgc3ViLWVuZ2luZSBp
cyBhY3RpdmUsIHNvIGRlbGF5DQo+ICsJICogd3JpdGluZyBMVVQgd2hlbiBhbm90aGVyIGdy
b3VwIGlzIGFjdGl2ZS4NCj4gKwkgKi8NCj4gKw0KPiArCS8qKg0KPiArCSAqIGlmIG5vIExV
VCByZXF1aXJlZCBmb3IgY3VycmVudCBncm91cCB0aGVuIGl0IGNhbiBiZSBwcm9ncmFtbWVk
DQo+ICsJICogd2l0aG91dCBmdXJ0aGVyIGNoZWNrcw0KPiArCSAqLw0KPiArCWlmIChzZHBf
b3AtPmx1dF9pbmRleCA9PSAtMSkNCj4gKwkJcmV0dXJuIDE7DQo+ICsNCj4gKwkvKioNCj4g
KwkgKiBpZiBzYW1lIExVVCBpcyB1c2VkIGZvciBib3RoIGdyb3VwcyB0aGVuIGl0IGNhbiBi
ZSBwcm9ncmFtbWVkDQo+ICsJICogd2l0aG91dCBtb3JlIGNoZWNrcy4gRXZlbiBpZiBhbm90
aGVyIGdyb3VwIGlzIGFjdGl2ZSBhbmQgTFVUDQo+ICsJICogaXMgbG9ja2VkLCBpdCB3b3Vs
ZCBoYXZlIGJlZW4gcHJvZ3JhbW1lZCBieSBhbm90aGVyIGdyb3VwLg0KPiArCSAqLw0KPiAr
CWlmIChuZXh0X2dyb3VwLT5sdXRfaW5kZXggPT0gc2RwX29wLT5sdXRfaW5kZXgpDQo+ICsJ
CXJldHVybiAxOw0KPiArDQo+ICsJLyoqDQo+ICsJICogaWYgTFVUIGluZGV4IG9mIGFub3Ro
ZXIgZ3JvdXAgaXMgbm90IC0xIG1lYW5zIHNvbWUgTFVUIGlzIHByb2dyYW1tZWQsDQo+ICsJ
ICogdGhlbiBkbyBub3QgcHJvZ3JhbSBjdXJyZW50IExVVCBhcyB3ZSBhbHJlYWR5IGtub3cg
Y3VycmVudCBMVVQgaXMgbm90DQo+ICsJICogLTEgYW5kIG5laXRoZXIgc2FtZSBhcyBhbm90
aGVyIGdyb3VwLg0KPiArCSAqLw0KPiArCWlmIChuZXh0X2dyb3VwLT5sdXRfaW5kZXggIT0g
LTEpDQo+ICsJCXJldHVybiAwOw0KPiArDQo+ICsJLyoqDQo+ICsJICogaWYgY3VycmVudCBn
cm91cCBuZWVkcyBMVVQgZGlmZmVyZW50IHRoYW4gYW5vdGhlciBncm91cCBhbmQgdGhhdA0K
PiArCSAqIGdyb3VwIGlzIG5vdCBhY3RpdmUgdGhlbiBwcm9ncmFtIGl0Lg0KPiArCSAqLw0K
PiArCWlmICghbmV4dF9ncm91cC0+YWN0aXZlKQ0KPiArCQlyZXR1cm4gMTsNCj4gKw0KPiAr
CS8qKg0KPiArCSAqIGlmIGNvbnRyb2wgaXMgaGVyZSBpdCBtZWFucyBjdXJyZW50IGdyb3Vw
IGlzIHVzaW5nIExVVCBkaWZmZXJlbnQgdGhhbg0KPiArCSAqIGFub3RoZXIgZ3JvdXAgYW5k
IHRoYXQgZ3JvdXAgaXMgYWN0aXZlLiBXYWl0IGZvciBhbm90aGVyIGdyb3VwIHRvDQo+ICsJ
ICogYmVjb21lIGlkbGUuDQo+ICsJICovDQo+ICsJcmV0dXJuIDA7DQo+ICt9DQo+ICsNCj4g
K3ZvaWQNCj4gK2RsYV9zZHBfZHVtcF9jb25maWcoc3RydWN0IGRsYV9wcm9jZXNzb3JfZ3Jv
dXAgKmdyb3VwKQ0KPiArew0KPiArCXN0cnVjdCBkbGFfc2RwX29wX2Rlc2MgKnNkcF9vcDsN
Cj4gKwlzdHJ1Y3QgZGxhX3NkcF9zdXJmYWNlX2Rlc2MgKnNkcF9zdXJmYWNlOw0KPiArDQo+
ICsJc2RwX3N1cmZhY2UgPSAmZ3JvdXAtPnN1cmZhY2VfZGVzYy0+c2RwX3N1cmZhY2U7DQo+
ICsJc2RwX29wID0gJmdyb3VwLT5vcGVyYXRpb25fZGVzYy0+c2RwX29wOw0KPiArfQ0KPiAr
DQo+ICtpbnQNCj4gK2RsYV9zZHBfcHJvZ3JhbShzdHJ1Y3QgZGxhX2VuZ2luZSAqZW5naW5l
LCBzdHJ1Y3QgZGxhX3Byb2Nlc3Nvcl9ncm91cCAqZ3JvdXApDQo+ICt7DQo+ICsJaW50MzJf
dCByZXQ7DQo+ICsNCj4gKwlkbGFfZW5hYmxlX2ludHIoZW5naW5lLCBNQVNLKEdMQl9TX0lO
VFJfTUFTS18wLCBTRFBfRE9ORV9NQVNLMSkgfA0KPiArCQkJTUFTSyhHTEJfU19JTlRSX01B
U0tfMCwgU0RQX0RPTkVfTUFTSzApKTsNCj4gKw0KPiArCXJldCA9IHByb2Nlc3Nvcl9zZHBf
cHJvZ3JhbShlbmdpbmUsIGdyb3VwKTsNCj4gKwlpZiAocmV0KQ0KPiArCQlnb3RvIGV4aXQ7
DQo+ICsNCj4gK2V4aXQ6DQo+ICsJcmV0dXJuIHJldDsNCj4gK30NCg0KLS0gDQpUaG9tYXMg
WmltbWVybWFubg0KR3JhcGhpY3MgRHJpdmVyIERldmVsb3Blcg0KU1VTRSBTb2Z0d2FyZSBT
b2x1dGlvbnMgR2VybWFueSBHbWJIDQpNYXhmZWxkc3RyLiA1LCA5MDQwOSBOw7xybmJlcmcs
IEdlcm1hbnkNCihIUkIgMzY4MDksIEFHIE7DvHJuYmVyZykNCkdlc2Now6RmdHNmw7xocmVy
OiBJdm8gVG90ZXYNCg==

--------------EjlnCHdLvB1p6d6ci3UZ9Wpr--

--------------m0ARHsd0M9RHtk7nhgLvgANu
Content-Type: application/pgp-signature; name="OpenPGP_signature.asc"
Content-Description: OpenPGP digital signature
Content-Disposition: attachment; filename="OpenPGP_signature"

-----BEGIN PGP SIGNATURE-----

wsF5BAABCAAjFiEExndm/fpuMUdwYFFolh/E3EQov+AFAmJf3+EFAwAAAAAACgkQlh/E3EQov+Aw
uBAAgtX4CPP/eImfoXLrIv/ifIk9cEXmHGMh1D2DtDnNFYed82fcPPuD4OTD+bEx398lE6OoWvgs
hyGGe0Pinit1OfCZRZ1onapkTlzyVUZTX2Xj9DmoU69XS0F6bHKed3lbPxt2Rs7+3gBWIQSP9ecj
A2AqMxsWzKRCNKySTfKAMT4zd+luVobNpSSJp0QVyL/v7YTwRGxAbOM5aQBRh8giWGqCVvVzNihG
IlDZL+5V/bnavpYxz7jOTKkruiQNK22aSfIzK1ePixhtgQZkzl0W/bJ9CwQsOoX5jR8iDnW9/uER
Nhg0QJeXL2UCB7ssrCCR6+SZ5ao5juNUpq6lM4dIAXYG0WSZyoAWC7FpkYugPQuV1rCyTHnVJVqn
Q99zgQkro7H0Cu6wSeOFeiHgubM/fVHyf/QV2qUG3K1knL1ifbegA1r9Dm0ERzDtGWsza4ahuWiZ
AblGlsLK6iwQfuMZIz4MM2AClEhqnui3tU5OWXnfArOceVjwZwDTg9gwzKPHMtuRLCYajAkgQ0/L
CgP/Kc5pJ83Y5kRLZKdzC9pqljRHb0LyhgS6YmqXnn+DBVh1/xq8Y1GWG1I8kaBLUuTfI4mPfkeF
oGJZD4zGsMEHOJIkgFAXVjxNVPJOMC9dAmBSDL+hL0RLJOrERznhrqywG6A1vNFMLAhF/XWLacid
dvU=
=xX5g
-----END PGP SIGNATURE-----

--------------m0ARHsd0M9RHtk7nhgLvgANu--

From mboxrd@z Thu Jan  1 00:00:00 1970
Return-Path: <linux-kernel-owner@kernel.org>
Received: from vger.kernel.org (vger.kernel.org [23.128.96.18])
	by smtp.lore.kernel.org (Postfix) with ESMTP id 07D9CC433F5
	for <linux-kernel@archiver.kernel.org>; Thu, 21 Apr 2022 08:11:03 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1386493AbiDUINo (ORCPT
        <rfc822;linux-kernel@archiver.kernel.org>);
        Thu, 21 Apr 2022 04:13:44 -0400
Received: from lindbergh.monkeyblade.net ([23.128.96.19]:60976 "EHLO
        lindbergh.monkeyblade.net" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1386568AbiDUINK (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Thu, 21 Apr 2022 04:13:10 -0400
Received: from out0.migadu.com (out0.migadu.com [94.23.1.103])
        by lindbergh.monkeyblade.net (Postfix) with ESMTPS id 09CAF1E3F5;
        Thu, 21 Apr 2022 01:10:20 -0700 (PDT)
Date:   Thu, 21 Apr 2022 16:09:49 +0800
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=linux.dev; s=key1;
        t=1650528618;
        h=from:from:reply-to:subject:subject:date:date:message-id:message-id:
         to:to:cc:mime-version:mime-version:content-type:content-type:
         content-transfer-encoding:content-transfer-encoding:
         in-reply-to:in-reply-to:references:references;
        bh=5ylkQC8AQGej/qRGHD1Dt01jNs8Cy39jNPlKaSnuhNs=;
        b=JWEvY6tXB39ovl+j4TEsCv9tEJJzSxWaPQ8uE1Wxox5icqyQUvoSH7UPuUcocTVpAl1DwV
        pen2Rc+fiyBeWKVh65Mh+ptrbwkBYhVBFsIj9c2Qfa/dh1vx88ZiroX/pYUSxzvkTGONLX
        mF/VTNzOaGhKai+7X76JqunA3TwiOIA=
X-Report-Abuse: Please report any abuse attempt to abuse@migadu.com and include these headers.
From:   Cai Huoqing <cai.huoqing@linux.dev>
To:     Maarten Lankhorst <maarten.lankhorst@linux.intel.com>,
        Maxime Ripard <mripard@kernel.org>,
        Thomas Zimmermann <tzimmermann@suse.de>,
        David Airlie <airlied@linux.ie>,
        Daniel Vetter <daniel@ffwll.ch>,
        Sumit Semwal <sumit.semwal@linaro.org>,
        Christian =?utf-8?B?S8O2bmln?= <christian.koenig@amd.com>,
        linux-kernel@vger.kernel.org, dri-devel@lists.freedesktop.org,
        linux-media@vger.kernel.org, linaro-mm-sig@lists.linaro.org
Subject: Re: [PATCH 2/2] drm/nvdla: Add driver support for NVDLA
Message-ID: <20220421080949.GA10151@chq-T47>
References: <20220419135908.39606-1-cai.huoqing@linux.dev>
 <20220419135908.39606-3-cai.huoqing@linux.dev>
MIME-Version: 1.0
Content-Type: text/plain; charset=utf-8
Content-Disposition: inline
Content-Transfer-Encoding: 8bit
In-Reply-To: <20220419135908.39606-3-cai.huoqing@linux.dev>
X-Migadu-Flow: FLOW_OUT
X-Migadu-Auth-User: linux.dev
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On 19 4月 22 21:59:00, Cai Huoqing wrote:
> The NVIDIA Deep Learning Accelerator (NVDLA) is an open source IP
> which is integrated into NVIDIA Jetson AGX Xavier,
> so add driver support for this accelerator.
> 
> Signed-off-by: Cai Huoqing <cai.huoqing@linux.dev>
Hi, all
requests for more comments

many thanks
CAI
> ---
>  drivers/gpu/drm/Kconfig                 |    2 +
>  drivers/gpu/drm/Makefile                |    1 +
>  drivers/gpu/drm/nvdla/Kconfig           |    8 +
>  drivers/gpu/drm/nvdla/Makefile          |   19 +
>  drivers/gpu/drm/nvdla/nvdla_bdma.c      |  200 +
>  drivers/gpu/drm/nvdla/nvdla_cache.c     |  215 +
>  drivers/gpu/drm/nvdla/nvdla_cdp.c       |  300 ++
>  drivers/gpu/drm/nvdla/nvdla_common.c    |  295 ++
>  drivers/gpu/drm/nvdla/nvdla_common.h    |  835 +++
>  drivers/gpu/drm/nvdla/nvdla_conv.c      |  683 +++
>  drivers/gpu/drm/nvdla/nvdla_drm.c       |  695 +++
>  drivers/gpu/drm/nvdla/nvdla_drm.h       |  127 +
>  drivers/gpu/drm/nvdla/nvdla_engine.c    |  233 +
>  drivers/gpu/drm/nvdla/nvdla_engine.h    |  272 +
>  drivers/gpu/drm/nvdla/nvdla_gem.c       |  393 ++
>  drivers/gpu/drm/nvdla/nvdla_ioctl.h     |   99 +
>  drivers/gpu/drm/nvdla/nvdla_pdp.c       |  446 ++
>  drivers/gpu/drm/nvdla/nvdla_reg.h       | 6411 +++++++++++++++++++++++
>  drivers/gpu/drm/nvdla/nvdla_rubik.c     |  217 +
>  drivers/gpu/drm/nvdla/nvdla_sched.h     |   52 +
>  drivers/gpu/drm/nvdla/nvdla_scheduler.c | 1005 ++++
>  drivers/gpu/drm/nvdla/nvdla_sdp.c       |  728 +++
>  22 files changed, 13236 insertions(+)
>  create mode 100644 drivers/gpu/drm/nvdla/Kconfig
>  create mode 100644 drivers/gpu/drm/nvdla/Makefile
>  create mode 100644 drivers/gpu/drm/nvdla/nvdla_bdma.c
>  create mode 100644 drivers/gpu/drm/nvdla/nvdla_cache.c
>  create mode 100644 drivers/gpu/drm/nvdla/nvdla_cdp.c
>  create mode 100644 drivers/gpu/drm/nvdla/nvdla_common.c
>  create mode 100644 drivers/gpu/drm/nvdla/nvdla_common.h
>  create mode 100644 drivers/gpu/drm/nvdla/nvdla_conv.c
>  create mode 100644 drivers/gpu/drm/nvdla/nvdla_drm.c
>  create mode 100644 drivers/gpu/drm/nvdla/nvdla_drm.h
>  create mode 100644 drivers/gpu/drm/nvdla/nvdla_engine.c
>  create mode 100644 drivers/gpu/drm/nvdla/nvdla_engine.h
>  create mode 100644 drivers/gpu/drm/nvdla/nvdla_gem.c
>  create mode 100644 drivers/gpu/drm/nvdla/nvdla_ioctl.h
>  create mode 100644 drivers/gpu/drm/nvdla/nvdla_pdp.c
>  create mode 100644 drivers/gpu/drm/nvdla/nvdla_reg.h
>  create mode 100644 drivers/gpu/drm/nvdla/nvdla_rubik.c
>  create mode 100644 drivers/gpu/drm/nvdla/nvdla_sched.h
>  create mode 100644 drivers/gpu/drm/nvdla/nvdla_scheduler.c
>  create mode 100644 drivers/gpu/drm/nvdla/nvdla_sdp.c
> 
> diff --git a/drivers/gpu/drm/Kconfig b/drivers/gpu/drm/Kconfig
> index 5133c3f028ab..a55cff374abd 100644
> --- a/drivers/gpu/drm/Kconfig
> +++ b/drivers/gpu/drm/Kconfig
> @@ -409,6 +409,8 @@ source "drivers/gpu/drm/solomon/Kconfig"
>  
>  source "drivers/gpu/drm/sprd/Kconfig"
>  
> +source "drivers/gpu/drm/nvdla/Kconfig"
> +
>  config DRM_HYPERV
>  	tristate "DRM Support for Hyper-V synthetic video device"
>  	depends on DRM && PCI && MMU && HYPERV
> diff --git a/drivers/gpu/drm/Makefile b/drivers/gpu/drm/Makefile
> index c2ef5f9fce54..8fa3537f308a 100644
> --- a/drivers/gpu/drm/Makefile
> +++ b/drivers/gpu/drm/Makefile
> @@ -134,3 +134,4 @@ obj-y			+= gud/
>  obj-$(CONFIG_DRM_HYPERV) += hyperv/
>  obj-y			+= solomon/
>  obj-$(CONFIG_DRM_SPRD) += sprd/
> +obj-$(CONFIG_DRM_NVDLA) += nvdla/
> diff --git a/drivers/gpu/drm/nvdla/Kconfig b/drivers/gpu/drm/nvdla/Kconfig
> new file mode 100644
> index 000000000000..11c04f5da877
> --- /dev/null
> +++ b/drivers/gpu/drm/nvdla/Kconfig
> @@ -0,0 +1,8 @@
> +# SPDX-License-Identifier: GPL-2.0-only
> +config DRM_NVDLA
> +	tristate "NVDLA DRM"
> +	depends on DRM
> +	select DRM_GEM_CMA_HELPER
> +	help
> +	  Choose this option for open-source NVIDIA DLA support.
> +	  If M is selected the module will be called nvdla-drm.
> diff --git a/drivers/gpu/drm/nvdla/Makefile b/drivers/gpu/drm/nvdla/Makefile
> new file mode 100644
> index 000000000000..74f37d258f8d
> --- /dev/null
> +++ b/drivers/gpu/drm/nvdla/Makefile
> @@ -0,0 +1,19 @@
> +
> +# SPDX-License-Identifier: GPL-2.0
> +nvdla-drm-y := \
> +	nvdla_drm.o \
> +	nvdla_gem.o \
> +	nvdla_scheduler.o \
> +	nvdla_engine.o \
> +	nvdla_bdma.o \
> +	nvdla_conv.o \
> +	nvdla_sdp.o \
> +	nvdla_cdp.o \
> +	nvdla_pdp.o \
> +	nvdla_rubik.o \
> +	nvdla_cache.o \
> +	nvdla_common.o \
> +	nvdla_engine_data.o \
> +	nvdla_engine_debug.o \
> +
> +obj-$(CONFIG_DRM_NVDLA) += nvdla-drm.o
> diff --git a/drivers/gpu/drm/nvdla/nvdla_bdma.c b/drivers/gpu/drm/nvdla/nvdla_bdma.c
> new file mode 100644
> index 000000000000..225613f27acf
> --- /dev/null
> +++ b/drivers/gpu/drm/nvdla/nvdla_bdma.c
> @@ -0,0 +1,200 @@
> +// SPDX-License-Identifier: BSD-3-Clause OR GPL-2.0
> +/*
> + * Copyright (C) 2017-2018 NVIDIA CORPORATION
> + * Copyright (C) 2022 Cai Huoqing
> + */
> +
> +#include "nvdla_common.h"
> +#include "nvdla_drm.h"
> +#include "nvdla_reg.h"
> +#include "nvdla_engine.h"
> +
> +static const uint8_t map_mem[] = {
> +	FIELD_ENUM(BDMA_CFG_CMD_0, SRC_RAM_TYPE, MC),
> +	FIELD_ENUM(BDMA_CFG_CMD_0, SRC_RAM_TYPE, CVSRAM),
> +};
> +
> +void
> +dla_bdma_set_producer(struct dla_engine *engine, int32_t group_id, int32_t rdma_group_id)
> +{
> +	/**
> +	 * There is no producer bit for BDMA operation,
> +	 * interrupt pointer decides which outstanding request
> +	 * to use for this BDMA operation
> +	 */
> +}
> +
> +int
> +dla_bdma_enable(struct dla_engine *engine, struct dla_processor_group *group)
> +{
> +	if (group->surface_desc->bdma_surface.num_transfers == (uint16_t)0) {
> +		group->events |= ((uint8_t)1 << DLA_EVENT_OP_COMPLETED);
> +		goto exit;
> +	}
> +
> +	/**
> +	 * Launch BDMA transfer
> +	 */
> +	if (group->id == 0)
> +		bdma_reg_write(engine, CFG_LAUNCH0, FIELD_ENUM(BDMA_CFG_LAUNCH0_0,
> +							GRP0_LAUNCH, YES));
> +	else
> +		bdma_reg_write(engine, CFG_LAUNCH1, FIELD_ENUM(BDMA_CFG_LAUNCH1_0,
> +							GRP1_LAUNCH, YES));
> +
> +exit:
> +	return 0;
> +}
> +
> +void
> +dla_bdma_rdma_check(struct dla_processor_group *group)
> +{
> +	group->is_rdma_needed = 0;
> +}
> +
> +/**
> + * Program BDMA slot for transfer
> + */
> +static int32_t
> +processor_bdma_program_slot(struct dla_engine *engine,
> +							struct dla_bdma_surface_desc *bdma_surface,
> +							struct dla_bdma_transfer_desc *transfer)
> +{
> +	int32_t ret = 0;
> +	uint64_t source_addr = 0;
> +	uint64_t destination_addr = 0;
> +	uint32_t high, low, reg;
> +	uint8_t  bdma_free_slots = 0;
> +
> +	/* make sure there're enough free slots */
> +	if (bdma_free_slots <= 0) {
> +		do {
> +			reg = bdma_reg_read(engine, STATUS);
> +			reg = (reg & MASK(BDMA_STATUS_0, FREE_SLOT)) >>
> +					SHIFT(BDMA_STATUS_0, FREE_SLOT);
> +		} while (reg == 0);
> +		bdma_free_slots = (uint8_t)reg;
> +	}
> +
> +	dla_get_dma_address(engine->driver_context, engine->task->task_data,
> +						transfer->source_address,
> +						(void *)&source_addr,
> +						DESTINATION_DMA);
> +	dla_get_dma_address(engine->driver_context, engine->task->task_data,
> +						transfer->destination_address,
> +						(void *)&destination_addr,
> +						DESTINATION_DMA);
> +
> +	ASSERT_GOTO((transfer->line_repeat <= 8192),
> +				ret, -EINVAL, exit);
> +	ASSERT_GOTO((transfer->surface_repeat <= 8192),
> +				ret, -EINVAL, exit);
> +	ASSERT_GOTO((transfer->line_size % 32) == 0,
> +				ret, -EINVAL, exit);
> +	ASSERT_GOTO(transfer->source_line >= transfer->line_size,
> +				ret, -EINVAL, exit);
> +	ASSERT_GOTO(transfer->destination_line >= transfer->line_size,
> +				ret, -EINVAL, exit);
> +	ASSERT_GOTO(transfer->source_surface >=
> +			(transfer->source_line * transfer->line_repeat),
> +				ret, -EINVAL, exit);
> +	ASSERT_GOTO(transfer->destination_surface >=
> +			(transfer->destination_line * transfer->line_repeat),
> +				ret, -EINVAL, exit);
> +
> +	/* config registers */
> +	high = upper_32_bits(source_addr);
> +	low = lower_32_bits(source_addr);
> +	bdma_reg_write(engine, CFG_SRC_ADDR_LOW, low);
> +	bdma_reg_write(engine, CFG_SRC_ADDR_HIGH, high);
> +	high = upper_32_bits(destination_addr);
> +	low = lower_32_bits(destination_addr);
> +	bdma_reg_write(engine, CFG_DST_ADDR_LOW, low);
> +	bdma_reg_write(engine, CFG_DST_ADDR_HIGH, high);
> +	bdma_reg_write(engine, CFG_LINE, (transfer->line_size >> 5) - 1);
> +	reg = (map_mem[bdma_surface->source_type] <<
> +				SHIFT(BDMA_CFG_CMD_0, SRC_RAM_TYPE)) |
> +		(map_mem[bdma_surface->destination_type] <<
> +				SHIFT(BDMA_CFG_CMD_0, DST_RAM_TYPE));
> +	bdma_reg_write(engine, CFG_CMD, reg);
> +	bdma_reg_write(engine, CFG_LINE_REPEAT, transfer->line_repeat - 1);
> +	bdma_reg_write(engine, CFG_SRC_LINE, transfer->source_line);
> +	bdma_reg_write(engine, CFG_DST_LINE, transfer->destination_line);
> +	bdma_reg_write(engine, CFG_SURF_REPEAT, transfer->surface_repeat - 1);
> +	bdma_reg_write(engine, CFG_SRC_SURF, transfer->source_surface);
> +	bdma_reg_write(engine, CFG_DST_SURF, transfer->destination_surface);
> +	bdma_reg_write(engine, CFG_OP, FIELD_ENUM(BDMA_CFG_OP_0, EN, ENABLE));
> +
> +exit:
> +	return ret;
> +}
> +
> +int
> +dla_bdma_is_ready(struct dla_processor *processor,
> +				  struct dla_processor_group *group)
> +{
> +	struct dla_processor_group *next_group;
> +
> +	next_group = &processor->groups[!group->id];
> +
> +	/**
> +	 * If another group is already programmed but not active then
> +	 * do not program this operation as BDMA does not really
> +	 * have shadow copies for groups. It will end programming
> +	 * same group. Wait for another group to get enabled.
> +	 */
> +	if ((processor->group_status & (1 << next_group->id)) &&
> +						!next_group->active)
> +		return 0;
> +
> +	return 1;
> +}
> +
> +void
> +dla_bdma_dump_config(struct dla_processor_group *group)
> +{
> +	struct dla_bdma_op_desc *bdma_op;
> +	struct dla_bdma_surface_desc *bdma_surface;
> +
> +	bdma_surface = &group->surface_desc->bdma_surface;
> +	bdma_op = &group->operation_desc->bdma_op;
> +}
> +
> +int
> +dla_bdma_program(struct dla_engine *engine, struct dla_processor_group *group)
> +{
> +	int32_t i;
> +	int32_t ret = 0;
> +	struct dla_bdma_surface_desc *bdma_surface;
> +
> +	if (!engine->config_data->bdma_enable) {
> +		pr_err("BDMA is not supported for this configuration\n");
> +		ret = -EINVAL;
> +		goto exit;
> +	}
> +
> +	bdma_surface = &group->surface_desc->bdma_surface;
> +
> +	pr_debug("Num of transfers %u\n", bdma_surface->num_transfers);
> +	if (bdma_surface->num_transfers == (uint16_t)0)
> +		goto exit;
> +
> +	if (bdma_surface->num_transfers > NUM_MAX_BDMA_OPS) {
> +		pr_err("Invalid number of transfers\n");
> +		ret = -EINVAL;
> +		goto exit;
> +	}
> +
> +	for (i = 0; i < bdma_surface->num_transfers; i++) {
> +		ret = processor_bdma_program_slot(engine, bdma_surface,
> +					&bdma_surface->transfers[i]);
> +		if (ret)
> +			goto exit;
> +	}
> +
> +	dla_enable_intr(engine, MASK(GLB_S_INTR_MASK_0, BDMA_DONE_MASK1) |
> +			MASK(GLB_S_INTR_MASK_0, BDMA_DONE_MASK0));
> +
> +exit:
> +	return ret;
> +}
> diff --git a/drivers/gpu/drm/nvdla/nvdla_cache.c b/drivers/gpu/drm/nvdla/nvdla_cache.c
> new file mode 100644
> index 000000000000..f8bd7b514aab
> --- /dev/null
> +++ b/drivers/gpu/drm/nvdla/nvdla_cache.c
> @@ -0,0 +1,215 @@
> +// SPDX-License-Identifier: BSD-3-Clause OR GPL-2.0
> +/*
> + * Copyright (C) 2017-2018 NVIDIA CORPORATION
> + * Copyright (C) 2022 Cai Huoqing
> + */
> +
> +#include "nvdla_common.h"
> +#include "nvdla_drm.h"
> +#include "nvdla_reg.h"
> +#include "nvdla_engine.h"
> +
> +#define DLA_OP_CACHE_SIZE (DLA_NUM_GROUPS * ((DLA_OP_NUM + 2) * 2))
> +
> +static struct dla_common_op_desc desc_cache[DLA_OP_NUM][DLA_OP_CACHE_SIZE];
> +static int32_t desc_refcount[DLA_OP_NUM][DLA_OP_CACHE_SIZE];
> +
> +void
> +dla_get_refcount(struct dla_common_op_desc *op_desc)
> +{
> +	int32_t i;
> +	struct dla_common_op_desc *desc = NULL;
> +
> +	if (op_desc == NULL)
> +		return;
> +
> +	if (op_desc->index == -1)
> +		return;
> +
> +	desc = &desc_cache[op_desc->op_type][0];
> +
> +	for (i = 0; i < DLA_OP_CACHE_SIZE; i++, desc++) {
> +		if (desc->index == op_desc->index &&
> +				desc->roi_index == op_desc->roi_index) {
> +			desc_refcount[op_desc->op_type][i]++;
> +			return;
> +		}
> +	}
> +}
> +
> +struct dla_common_op_desc *
> +dla_get_op_desc(struct dla_engine *engine,
> +				struct dla_task *task, int16_t index,
> +				uint8_t op_type, uint8_t roi_index)
> +{
> +	int32_t i;
> +	int32_t ret;
> +	uint64_t op_base;
> +	uint64_t dep_graph_addr;
> +	struct dla_common_op_desc *desc = NULL;
> +
> +	if (index == -1) {
> +		pr_debug("no desc get due to index==-1\n");
> +		goto exit;
> +	}
> +
> +	dep_graph_addr = (sizeof(struct dla_common_op_desc) *
> +				engine->network->num_operations * roi_index);
> +
> +	desc = &desc_cache[op_type][0];
> +
> +	for (i = 0; i < DLA_OP_CACHE_SIZE; i++, desc++) {
> +		if (desc->index == index && desc->roi_index == roi_index) {
> +			if (desc->op_type != op_type) {
> +				pr_err("op_cache[op=%u] contains incorrect entry of op[%u]\n",
> +					   op_type, desc->op_type);
> +				continue;
> +			}
> +			desc_refcount[op_type][i]++;
> +			goto exit;
> +		}
> +	}
> +
> +	desc = &desc_cache[op_type][0];
> +
> +	for (i = 0; i < DLA_OP_CACHE_SIZE; i++, desc++) {
> +		if (desc->index == -1) {
> +			op_base = dep_graph_addr +
> +					(sizeof(struct dla_common_op_desc) *
> +					(uint64_t)index);
> +			ret = dla_data_read(engine->driver_context,
> +					task->task_data,
> +					task->dependency_graph_addr,
> +					(void *)(desc),
> +					sizeof(struct dla_common_op_desc),
> +					op_base);
> +			if (ret) {
> +				desc = NULL;
> +				goto exit;
> +			}
> +
> +			if (op_type != desc->op_type) {
> +				/*
> +				 * op_type of entry read from DRAM should not
> +				 * mismatch with given op_type. If they
> +				 * mismatches, then wrong entry is fetched, so
> +				 * report this issue by throwing error.
> +				 */
> +				pr_err("Fetched [op_type=%u] from DRAM doesn't match with op_type[%u]\n",
> +					   desc->op_type, op_type);
> +				desc->op_type = op_type;
> +				desc->index = -1;
> +				desc->roi_index = -1;
> +				desc = NULL;
> +				goto exit;
> +			}
> +
> +			desc->index = index;
> +			desc->roi_index = roi_index;
> +
> +			desc_refcount[op_type][i]++;
> +			goto exit;
> +		}
> +	}
> +
> +exit:
> +	return desc;
> +}
> +
> +static void
> +dla_free_op_desc(struct dla_engine *engine, struct dla_common_op_desc *op_desc)
> +{
> +	uint64_t op_base;
> +	uint64_t dep_graph_addr;
> +	struct dla_task *task;
> +
> +	pr_debug("Enter: %s op desc index %u ROI %d\n", __func__,
> +				op_desc->index, op_desc->roi_index);
> +
> +	task = engine->task;
> +	dep_graph_addr = (sizeof(struct dla_common_op_desc) *
> +				engine->network->num_operations *
> +				op_desc->roi_index);
> +
> +	if (op_desc->index == -1)
> +		goto exit;
> +
> +	if (op_desc == NULL)
> +		goto exit;
> +
> +	/**
> +	 * TODO: keeping the depth value hardcoded as 0 for now,
> +	 * need to replace it once corresponding implementation is done.
> +	 */
> +	op_base = (dep_graph_addr +
> +			(sizeof(struct dla_common_op_desc) *
> +			(uint64_t)op_desc->index));
> +
> +	/**
> +	 * Flush descriptor to DRAM
> +	 */
> +	dla_data_write(engine->driver_context,
> +			task->task_data,
> +			(void *)op_desc,
> +			task->dependency_graph_addr,
> +			sizeof(struct dla_common_op_desc),
> +			op_base);
> +
> +	/**
> +	 * Release it
> +	 */
> +	op_desc->index = -1;
> +	op_desc->roi_index = -1;
> +exit:
> +	return;
> +}
> +
> +void
> +dla_put_op_desc(struct dla_engine *engine, struct dla_common_op_desc *op_desc)
> +{
> +	int32_t i;
> +	struct dla_common_op_desc *desc;
> +
> +	if (op_desc == NULL)
> +		return;
> +
> +	if (op_desc->index == -1)
> +		return;
> +
> +	desc = &desc_cache[op_desc->op_type][0];
> +
> +	for (i = 0; i < DLA_OP_CACHE_SIZE; i++, desc++) {
> +		if (desc->index == op_desc->index &&
> +				desc->roi_index == op_desc->roi_index) {
> +
> +			desc_refcount[op_desc->op_type][i]--;
> +
> +			/**
> +			 * Free desc if refcount is 0
> +			 */
> +			if (desc_refcount[op_desc->op_type][i] == 0)
> +				dla_free_op_desc(engine, op_desc);
> +
> +			return;
> +		}
> +	}
> +}
> +
> +void
> +dla_init_op_cache(struct dla_engine *engine)
> +{
> +	int32_t i, j;
> +	struct dla_common_op_desc *desc = &desc_cache[0][0];
> +
> +	memset((uint8_t *)&desc_cache[0][0], 0, sizeof(desc_cache));
> +	memset((uint8_t *)&desc_refcount[0][0], 0, sizeof(desc_refcount));
> +
> +	for (i = 0; i < DLA_OP_NUM; i++) {
> +		for (j = 0; j < DLA_OP_CACHE_SIZE; j++) {
> +			desc->index = -1;
> +			desc->roi_index = -1;
> +			desc->op_type = (uint8_t)i;
> +			desc++;
> +		}
> +	}
> +}
> diff --git a/drivers/gpu/drm/nvdla/nvdla_cdp.c b/drivers/gpu/drm/nvdla/nvdla_cdp.c
> new file mode 100644
> index 000000000000..793161e50b1c
> --- /dev/null
> +++ b/drivers/gpu/drm/nvdla/nvdla_cdp.c
> @@ -0,0 +1,300 @@
> +// SPDX-License-Identifier: BSD-3-Clause OR GPL-2.0
> +/*
> + * Copyright (C) 2017-2018 NVIDIA CORPORATION
> + * Copyright (C) 2022 Cai Huoqing
> + */
> +
> +#include "nvdla_common.h"
> +#include "nvdla_drm.h"
> +#include "nvdla_reg.h"
> +#include "nvdla_engine.h"
> +
> +static const uint8_t map_ram[] = {
> +	FIELD_ENUM(CDP_RDMA_D_SRC_DMA_CFG_0, SRC_RAM_TYPE, MC),
> +	FIELD_ENUM(CDP_RDMA_D_SRC_DMA_CFG_0, SRC_RAM_TYPE, CV),
> +};
> +
> +static const uint8_t map_precision[] = {
> +	FIELD_ENUM(CDP_RDMA_D_DATA_FORMAT_0, INPUT_DATA, INT8),
> +	FIELD_ENUM(CDP_RDMA_D_DATA_FORMAT_0, INPUT_DATA, INT16),
> +	FIELD_ENUM(CDP_RDMA_D_DATA_FORMAT_0, INPUT_DATA, FP16),
> +};
> +
> +static const uint8_t map_perf_dma[] = {
> +	FIELD_ENUM(CDP_D_PERF_ENABLE_0, DMA_EN, DISABLE),
> +	FIELD_ENUM(CDP_D_PERF_ENABLE_0, DMA_EN, ENABLE),
> +};
> +
> +static const uint8_t map_perf_lut[] = {
> +	FIELD_ENUM(CDP_D_PERF_ENABLE_0, LUT_EN, DISABLE),
> +	FIELD_ENUM(CDP_D_PERF_ENABLE_0, LUT_EN, ENABLE),
> +};
> +
> +
> +static uint32_t
> +map_local_size(uint8_t local_size)
> +{
> +	return ((local_size-1)/2)-1;
> +}
> +
> +void
> +dla_cdp_set_producer(struct dla_engine *engine, int32_t group_id, int32_t rdma_group_id)
> +{
> +	uint32_t reg;
> +
> +	/**
> +	 * set producer pointer for all sub-modules
> +	 */
> +	reg = group_id << SHIFT(CDP_S_POINTER_0, PRODUCER);
> +	cdp_reg_write(engine, S_POINTER, reg);
> +	reg = group_id << SHIFT(CDP_RDMA_S_POINTER_0, PRODUCER);
> +	cdp_rdma_reg_write(engine, S_POINTER, reg);
> +}
> +
> +int
> +dla_cdp_enable(struct dla_engine *engine, struct dla_processor_group *group)
> +{
> +	uint32_t reg;
> +
> +	/**
> +	 * enable all sub-modules
> +	 */
> +	reg = FIELD_ENUM(CDP_RDMA_D_OP_ENABLE_0, OP_EN, ENABLE);
> +	cdp_rdma_reg_write(engine, D_OP_ENABLE, reg);
> +	reg = FIELD_ENUM(CDP_D_OP_ENABLE_0, OP_EN, ENABLE);
> +	cdp_reg_write(engine, D_OP_ENABLE, reg);
> +
> +	return 0;
> +}
> +
> +void
> +dla_cdp_rdma_check(struct dla_processor_group *group)
> +{
> +	group->is_rdma_needed = 1;
> +}
> +
> +static int32_t
> +processor_cdp_program(struct dla_engine *engine, struct dla_processor_group *group)
> +{
> +	int32_t ret = 0;
> +	uint32_t reg, high, low;
> +	uint64_t input_address = 0;
> +	uint64_t output_address = 0;
> +	struct dla_lut_param lut;
> +	struct dla_cdp_op_desc *cdp_op;
> +	struct dla_cdp_surface_desc *cdp_surface;
> +
> +	cdp_op = &group->operation_desc->cdp_op;
> +	cdp_surface = &group->surface_desc->cdp_surface;
> +
> +	/* Argument check */
> +	if (cdp_surface->src_data.type == DLA_MEM_HW) {
> +		pr_err("Invalid source memory type\n");
> +		ret = -EINVAL;
> +		goto exit;
> +	}
> +	if (cdp_surface->dst_data.type == DLA_MEM_HW) {
> +		pr_err("Invalid destination memory type\n");
> +		ret = -EINVAL;
> +		goto exit;
> +	}
> +
> +	if (cdp_op->in_precision != cdp_op->out_precision) {
> +		pr_err("CDP does not support precision conversion\n");
> +		ret = -EINVAL;
> +		goto exit;
> +	}
> +
> +	/* get the addresses from task descriptor */
> +	ret = dla_read_input_address(engine, &cdp_surface->src_data,
> +								 &input_address,
> +								 group->op_desc->index,
> +								 group->roi_index, 1);
> +	if (ret)
> +		goto exit;
> +
> +	dla_get_dma_cube_address(engine->driver_context,
> +							 engine->task->task_data,
> +							 cdp_surface->dst_data.address,
> +							 cdp_surface->dst_data.offset,
> +							 (void *)&output_address,
> +							 DESTINATION_DMA);
> +	if (cdp_op->lut_index >= 0) {
> +		group->lut_index = cdp_op->lut_index;
> +		dla_read_lut(engine, cdp_op->lut_index, (void *)&lut);
> +	}
> +
> +	/* config CDP RDMA registers */
> +	reg = ((cdp_surface->src_data.width - 1)
> +		<< SHIFT(CDP_RDMA_D_DATA_CUBE_WIDTH_0, WIDTH));
> +	cdp_rdma_reg_write(engine, D_DATA_CUBE_WIDTH, reg);
> +
> +	reg = ((cdp_surface->src_data.height - 1)
> +		<< SHIFT(CDP_RDMA_D_DATA_CUBE_HEIGHT_0, HEIGHT));
> +	cdp_rdma_reg_write(engine, D_DATA_CUBE_HEIGHT, reg);
> +
> +	reg = ((cdp_surface->src_data.channel - 1)
> +		<< SHIFT(CDP_RDMA_D_DATA_CUBE_CHANNEL_0, CHANNEL));
> +	cdp_rdma_reg_write(engine, D_DATA_CUBE_CHANNEL, reg);
> +
> +	high = upper_32_bits(input_address);
> +	low = lower_32_bits(input_address);
> +	cdp_rdma_reg_write(engine, D_SRC_BASE_ADDR_LOW, low);
> +	cdp_rdma_reg_write(engine, D_SRC_BASE_ADDR_HIGH, high);
> +
> +	cdp_rdma_reg_write(engine, D_SRC_LINE_STRIDE,
> +			cdp_surface->src_data.line_stride);
> +	cdp_rdma_reg_write(engine, D_SRC_SURFACE_STRIDE,
> +			cdp_surface->src_data.surf_stride);
> +
> +	reg = (map_ram[cdp_surface->src_data.type]
> +		<< SHIFT(CDP_RDMA_D_SRC_DMA_CFG_0, SRC_RAM_TYPE));
> +	cdp_rdma_reg_write(engine, D_SRC_DMA_CFG, reg);
> +
> +	reg = (map_precision[cdp_op->in_precision]
> +		<< SHIFT(CDP_RDMA_D_DATA_FORMAT_0, INPUT_DATA));
> +	cdp_rdma_reg_write(engine, D_DATA_FORMAT, reg);
> +
> +	/* config CDP */
> +	if (cdp_op->lut_index >= 0)
> +		update_lut(engine, CDP_S_LUT_ACCESS_CFG_0, &lut, cdp_op->in_precision);
> +
> +	high = upper_32_bits(output_address);
> +	low = lower_32_bits(output_address);
> +	cdp_reg_write(engine, D_DST_BASE_ADDR_LOW, low);
> +	cdp_reg_write(engine, D_DST_BASE_ADDR_HIGH, high);
> +
> +	cdp_reg_write(engine, D_DST_LINE_STRIDE, cdp_surface->dst_data.line_stride);
> +	cdp_reg_write(engine, D_DST_SURFACE_STRIDE, cdp_surface->dst_data.surf_stride);
> +
> +	reg = (map_ram[cdp_surface->dst_data.type]
> +		<< SHIFT(CDP_D_DST_DMA_CFG_0, DST_RAM_TYPE));
> +	cdp_reg_write(engine, D_DST_DMA_CFG, reg);
> +
> +	reg = (map_precision[cdp_op->in_precision]
> +		<< SHIFT(CDP_D_DATA_FORMAT_0, INPUT_DATA_TYPE));
> +	cdp_reg_write(engine, D_DATA_FORMAT, reg);
> +
> +	reg = (map_local_size(cdp_op->local_size)
> +		<< SHIFT(CDP_D_LRN_CFG_0, NORMALZ_LEN));
> +	cdp_reg_write(engine, D_LRN_CFG, reg);
> +
> +	reg = (cdp_op->in_cvt.offset
> +		<< SHIFT(CDP_D_DATIN_OFFSET_0, DATIN_OFFSET));
> +	cdp_reg_write(engine, D_DATIN_OFFSET, reg);
> +
> +	reg = (cdp_op->in_cvt.scale
> +		<< SHIFT(CDP_D_DATIN_SCALE_0, DATIN_SCALE));
> +	cdp_reg_write(engine, D_DATIN_SCALE, reg);
> +
> +	reg = (cdp_op->in_cvt.truncate
> +		<< SHIFT(CDP_D_DATIN_SHIFTER_0, DATIN_SHIFTER));
> +	cdp_reg_write(engine, D_DATIN_SHIFTER, reg);
> +
> +	reg = (cdp_op->out_cvt.offset
> +		<< SHIFT(CDP_D_DATOUT_OFFSET_0, DATOUT_OFFSET));
> +	cdp_reg_write(engine, D_DATOUT_OFFSET, reg);
> +
> +	reg = (cdp_op->out_cvt.scale
> +		<< SHIFT(CDP_D_DATOUT_SCALE_0, DATOUT_SCALE));
> +	cdp_reg_write(engine, D_DATOUT_SCALE, reg);
> +
> +	reg = (cdp_op->out_cvt.truncate
> +		<< SHIFT(CDP_D_DATOUT_SHIFTER_0, DATOUT_SHIFTER));
> +	cdp_reg_write(engine, D_DATOUT_SHIFTER, reg);
> +
> +	reg = ((cdp_op->bypass_sqsum ?
> +		FIELD_ENUM(CDP_D_FUNC_BYPASS_0, SQSUM_BYPASS, ENABLE) :
> +		FIELD_ENUM(CDP_D_FUNC_BYPASS_0, SQSUM_BYPASS, DISABLE)) <<
> +		SHIFT(CDP_D_FUNC_BYPASS_0, SQSUM_BYPASS)) |
> +		((cdp_op->bypass_out_mul ?
> +		FIELD_ENUM(CDP_D_FUNC_BYPASS_0, MUL_BYPASS, ENABLE) :
> +		FIELD_ENUM(CDP_D_FUNC_BYPASS_0, MUL_BYPASS, DISABLE)) <<
> +		SHIFT(CDP_D_FUNC_BYPASS_0, MUL_BYPASS));
> +	cdp_reg_write(engine, D_FUNC_BYPASS, reg);
> +
> +exit:
> +	return ret;
> +}
> +
> +int
> +dla_cdp_is_ready(struct dla_processor *processor,
> +				 struct dla_processor_group *group)
> +{
> +	struct dla_processor_group *next_group;
> +	struct dla_cdp_op_desc *cdp_op;
> +
> +	cdp_op = &group->operation_desc->cdp_op;
> +	next_group = &processor->groups[!group->id];
> +
> +	/**
> +	 * Single LUT is shared between two CDP groups, need to make
> +	 * sure that usage does not conflict. Also, LUT write
> +	 * access is locked when CDP sub-engine is active, so delay
> +	 * writing LUT when another group is active.
> +	 */
> +
> +	/**
> +	 * if no LUT required for current group then it can be programmed
> +	 * without further checks
> +	 */
> +	if (cdp_op->lut_index == -1)
> +		return 1;
> +
> +	/**
> +	 * if same LUT is used for both groups then it can be programmed
> +	 * without more checks. Even if another group is active and LUT
> +	 * is locked, it would have been programmed by another group.
> +	 */
> +	if (next_group->lut_index == cdp_op->lut_index)
> +		return 1;
> +
> +	/**
> +	 * if LUT index of another group is not -1 means some LUT is programmed,
> +	 * then do not program current LUT as we already know current LUT is not
> +	 * -1 and neither same as another group.
> +	 */
> +	if (next_group->lut_index != -1)
> +		return 0;
> +
> +	/**
> +	 * if current group needs LUT different than another group and that
> +	 * group is not active then program it.
> +	 */
> +	if (!next_group->active)
> +		return 1;
> +
> +	/**
> +	 * if control is here it means current group is using LUT different than
> +	 * another group and that group is active. Wait for another group to
> +	 * become idle.
> +	 */
> +
> +	return 0;
> +}
> +
> +void
> +dla_cdp_dump_config(struct dla_processor_group *group)
> +{
> +	struct dla_cdp_op_desc *cdp_op;
> +	struct dla_cdp_surface_desc *cdp_surface;
> +
> +	cdp_surface = &group->surface_desc->cdp_surface;
> +	cdp_op = &group->operation_desc->cdp_op;
> +}
> +
> +int
> +dla_cdp_program(struct dla_engine *engine, struct dla_processor_group *group)
> +{
> +	int32_t ret;
> +
> +	dla_enable_intr(engine, MASK(GLB_S_INTR_MASK_0, CDP_DONE_MASK1) |
> +					MASK(GLB_S_INTR_MASK_0, CDP_DONE_MASK0));
> +
> +	ret = processor_cdp_program(engine, group);
> +	if (ret)
> +		goto exit;
> +
> +exit:
> +	return ret;
> +}
> diff --git a/drivers/gpu/drm/nvdla/nvdla_common.c b/drivers/gpu/drm/nvdla/nvdla_common.c
> new file mode 100644
> index 000000000000..3abc863d9fce
> --- /dev/null
> +++ b/drivers/gpu/drm/nvdla/nvdla_common.c
> @@ -0,0 +1,295 @@
> +// SPDX-License-Identifier: BSD-3-Clause OR GPL-2.0
> +/*
> + * Copyright (C) 2017-2018 NVIDIA CORPORATION
> + * Copyright (C) 2022 Cai Huoqing
> + */
> +
> +#include "nvdla_reg.h"
> +#include "nvdla_common.h"
> +#include "nvdla_drm.h"
> +#include "nvdla_engine.h"
> +
> +static const uint8_t map_lut_method[] = {
> +	FIELD_ENUM(CDP_S_LUT_CFG_0, LUT_LE_FUNCTION, EXPONENT),
> +	FIELD_ENUM(CDP_S_LUT_CFG_0, LUT_LE_FUNCTION, LINEAR)
> +};
> +static const uint8_t map_lut_out[] = {
> +	FIELD_ENUM(CDP_S_LUT_CFG_0, LUT_UFLOW_PRIORITY, LE),
> +	FIELD_ENUM(CDP_S_LUT_CFG_0, LUT_UFLOW_PRIORITY, LO)
> +};
> +
> +static const uint16_t access_data_offset[] = {
> +	CDP_S_LUT_ACCESS_DATA_0 - CDP_S_LUT_ACCESS_CFG_0,
> +	SDP_S_LUT_ACCESS_DATA_0 - SDP_S_LUT_ACCESS_CFG_0,
> +};
> +static const uint16_t lut_cfg_offset[] = {
> +	CDP_S_LUT_CFG_0 - CDP_S_LUT_ACCESS_CFG_0,
> +	SDP_S_LUT_CFG_0 - SDP_S_LUT_ACCESS_CFG_0,
> +};
> +static const uint16_t lut_info_offset[] = {
> +	CDP_S_LUT_INFO_0 - CDP_S_LUT_ACCESS_CFG_0,
> +	SDP_S_LUT_INFO_0 - SDP_S_LUT_ACCESS_CFG_0,
> +};
> +static const uint16_t le_start_offset[] = {
> +	CDP_S_LUT_LE_START_LOW_0 - CDP_S_LUT_ACCESS_CFG_0,
> +	SDP_S_LUT_LE_START_0 - SDP_S_LUT_ACCESS_CFG_0,
> +};
> +static const uint16_t le_end_offset[] = {
> +	CDP_S_LUT_LE_END_LOW_0 - CDP_S_LUT_ACCESS_CFG_0,
> +	SDP_S_LUT_LE_END_0 - SDP_S_LUT_ACCESS_CFG_0,
> +};
> +static const uint16_t lo_start_offset[] = {
> +	CDP_S_LUT_LO_START_LOW_0 - CDP_S_LUT_ACCESS_CFG_0,
> +	SDP_S_LUT_LO_START_0 - SDP_S_LUT_ACCESS_CFG_0,
> +};
> +static const uint16_t lo_end_offset[] = {
> +	CDP_S_LUT_LO_END_LOW_0 - CDP_S_LUT_ACCESS_CFG_0,
> +	SDP_S_LUT_LO_END_0 - SDP_S_LUT_ACCESS_CFG_0,
> +};
> +static const uint16_t le_slope_scale_offset[] = {
> +	CDP_S_LUT_LE_SLOPE_SCALE_0 - CDP_S_LUT_ACCESS_CFG_0,
> +	SDP_S_LUT_LE_SLOPE_SCALE_0 - SDP_S_LUT_ACCESS_CFG_0,
> +};
> +static const uint16_t le_slope_shift_offset[] = {
> +	CDP_S_LUT_LE_SLOPE_SHIFT_0 - CDP_S_LUT_ACCESS_CFG_0,
> +	SDP_S_LUT_LE_SLOPE_SHIFT_0 - SDP_S_LUT_ACCESS_CFG_0,
> +};
> +static const uint16_t lo_slope_scale_offset[] = {
> +	CDP_S_LUT_LO_SLOPE_SCALE_0 - CDP_S_LUT_ACCESS_CFG_0,
> +	SDP_S_LUT_LO_SLOPE_SCALE_0 - SDP_S_LUT_ACCESS_CFG_0,
> +};
> +static const uint16_t lo_slope_shift_offset[] = {
> +	CDP_S_LUT_LO_SLOPE_SHIFT_0 - CDP_S_LUT_ACCESS_CFG_0,
> +	SDP_S_LUT_LO_SLOPE_SHIFT_0 - SDP_S_LUT_ACCESS_CFG_0,
> +};
> +
> +void update_lut(struct dla_engine *engine, uint32_t reg_base,
> +				struct dla_lut_param *lut, uint8_t precision)
> +{
> +	int32_t i;
> +	uint32_t reg;
> +	uint32_t high, low;
> +	int32_t is_sdp = reg_base == SDP_S_LUT_ACCESS_CFG_0;
> +
> +	/* program raw table */
> +	reg = (FIELD_ENUM(CDP_S_LUT_ACCESS_CFG_0, LUT_TABLE_ID, LE)
> +		<< SHIFT(CDP_S_LUT_ACCESS_CFG_0, LUT_TABLE_ID)) |
> +		(FIELD_ENUM(CDP_S_LUT_ACCESS_CFG_0, LUT_ACCESS_TYPE, WRITE)
> +		<< SHIFT(CDP_S_LUT_ACCESS_CFG_0, LUT_ACCESS_TYPE));
> +	reg_write(engine, reg_base, reg);
> +
> +	for (i = 0; i < (1<<LUT_LINEAR_EXP_TABLE_ENTRY_LOG2)+1; i++) {
> +		dla_reg_write(engine->driver_context,
> +				reg_base + access_data_offset[is_sdp],
> +				lut->linear_exp_table[i]);
> +	}
> +
> +	/* program density table */
> +	reg = (FIELD_ENUM(CDP_S_LUT_ACCESS_CFG_0, LUT_TABLE_ID, LO)
> +		<< SHIFT(CDP_S_LUT_ACCESS_CFG_0, LUT_TABLE_ID)) |
> +		(FIELD_ENUM(CDP_S_LUT_ACCESS_CFG_0, LUT_ACCESS_TYPE, WRITE)
> +		<< SHIFT(CDP_S_LUT_ACCESS_CFG_0, LUT_ACCESS_TYPE));
> +	dla_reg_write(engine->driver_context, reg_base, reg);
> +
> +	for (i = 0; i < (1<<LUT_LINEAR_ONLY_TABLE_ENTRY_LOG2)+1; i++) {
> +		dla_reg_write(engine->driver_context,
> +				reg_base + access_data_offset[is_sdp],
> +				lut->linear_only_table[i]);
> +	}
> +
> +	/* program other configurations */
> +	reg = (map_lut_method[lut->method] <<
> +		SHIFT(CDP_S_LUT_CFG_0, LUT_LE_FUNCTION)) |
> +		(map_lut_out[lut->hybrid_priority] <<
> +		SHIFT(CDP_S_LUT_CFG_0, LUT_HYBRID_PRIORITY)) |
> +		(map_lut_out[lut->underflow_priority] <<
> +		SHIFT(CDP_S_LUT_CFG_0, LUT_UFLOW_PRIORITY)) |
> +		(map_lut_out[lut->overflow_priority] <<
> +		SHIFT(CDP_S_LUT_CFG_0, LUT_OFLOW_PRIORITY));
> +	dla_reg_write(engine->driver_context,
> +			reg_base + lut_cfg_offset[is_sdp], reg);
> +
> +	if (lut->method == FIELD_ENUM(CDP_S_LUT_CFG_0,
> +					LUT_LE_FUNCTION, EXPONENT)) {
> +		reg = ((((uint32_t)lut->linear_exp_offset.exp_offset) <<
> +			SHIFT(CDP_S_LUT_INFO_0, LUT_LE_INDEX_OFFSET))&
> +		MASK(CDP_S_LUT_INFO_0, LUT_LE_INDEX_OFFSET)) |
> +			((((uint32_t)lut->linear_only_offset.frac_bits) <<
> +			SHIFT(CDP_S_LUT_INFO_0, LUT_LO_INDEX_SELECT))&
> +		MASK(CDP_S_LUT_INFO_0, LUT_LO_INDEX_SELECT));
> +	} else {
> +		reg = ((((uint32_t)lut->linear_exp_offset.frac_bits) <<
> +			SHIFT(CDP_S_LUT_INFO_0, LUT_LE_INDEX_SELECT))&
> +		MASK(CDP_S_LUT_INFO_0, LUT_LE_INDEX_SELECT)) |
> +			((((uint32_t)lut->linear_only_offset.frac_bits) <<
> +			SHIFT(CDP_S_LUT_INFO_0, LUT_LO_INDEX_SELECT))&
> +		MASK(CDP_S_LUT_INFO_0, LUT_LO_INDEX_SELECT));
> +	}
> +	dla_reg_write(engine->driver_context,
> +			reg_base + lut_info_offset[is_sdp], reg);
> +	high = upper_32_bits(lut->linear_exp_start);
> +	low = lower_32_bits(lut->linear_exp_start);
> +	dla_reg_write(engine->driver_context,
> +			reg_base + le_start_offset[is_sdp], low);
> +	if (!is_sdp)
> +		dla_reg_write(engine->driver_context,
> +				reg_base + le_start_offset[is_sdp] + 4, high);
> +
> +	high = upper_32_bits(lut->linear_exp_end);
> +	low = lower_32_bits(lut->linear_exp_end);
> +	dla_reg_write(engine->driver_context,
> +				reg_base + le_end_offset[is_sdp], low);
> +	if (!is_sdp)
> +		dla_reg_write(engine->driver_context,
> +				reg_base + le_end_offset[is_sdp] + 4, high);
> +
> +	high = upper_32_bits(lut->linear_only_start);
> +	low = lower_32_bits(lut->linear_only_start);
> +	dla_reg_write(engine->driver_context,
> +				reg_base + lo_start_offset[is_sdp], low);
> +	if (!is_sdp)
> +		dla_reg_write(engine->driver_context,
> +				reg_base + lo_start_offset[is_sdp] + 4, high);
> +
> +	high = upper_32_bits(lut->linear_only_end);
> +	low = lower_32_bits(lut->linear_only_end);
> +	dla_reg_write(engine->driver_context,
> +				reg_base + lo_end_offset[is_sdp], low);
> +	if (!is_sdp)
> +		dla_reg_write(engine->driver_context,
> +				reg_base + lo_end_offset[is_sdp] + 4, high);
> +
> +	if (precision == PRECISION_FP16) {
> +		reg = (lut->linear_exp_underflow_slope.data_f <<
> +			SHIFT(CDP_S_LUT_LE_SLOPE_SCALE_0,
> +					LUT_LE_SLOPE_UFLOW_SCALE)) |
> +			(lut->linear_exp_overflow_slope.data_f <<
> +			SHIFT(CDP_S_LUT_LE_SLOPE_SCALE_0,
> +					LUT_LE_SLOPE_OFLOW_SCALE));
> +		dla_reg_write(engine->driver_context,
> +				reg_base + le_slope_scale_offset[is_sdp], reg);
> +
> +		reg = (lut->linear_only_underflow_slope.data_f <<
> +			SHIFT(CDP_S_LUT_LO_SLOPE_SCALE_0,
> +					LUT_LO_SLOPE_UFLOW_SCALE)) |
> +			(lut->linear_only_overflow_slope.data_f <<
> +			SHIFT(CDP_S_LUT_LO_SLOPE_SCALE_0,
> +					LUT_LO_SLOPE_OFLOW_SCALE));
> +		dla_reg_write(engine->driver_context,
> +				reg_base + lo_slope_scale_offset[is_sdp], reg);
> +	} else {
> +		union dla_slope *oslope;
> +		union dla_slope *uslope;
> +
> +		uslope = &lut->linear_exp_underflow_slope;
> +		oslope = &lut->linear_exp_overflow_slope;
> +		reg = ((((uint32_t)uslope->data_i.scale)
> +			<< SHIFT(CDP_S_LUT_LE_SLOPE_SCALE_0,
> +					LUT_LE_SLOPE_UFLOW_SCALE))&
> +			MASK(CDP_S_LUT_LE_SLOPE_SCALE_0,
> +					LUT_LE_SLOPE_UFLOW_SCALE)) |
> +			((((uint32_t)oslope->data_i.scale)
> +			<< SHIFT(CDP_S_LUT_LE_SLOPE_SCALE_0,
> +					LUT_LE_SLOPE_OFLOW_SCALE))&
> +			MASK(CDP_S_LUT_LE_SLOPE_SCALE_0,
> +					LUT_LE_SLOPE_OFLOW_SCALE));
> +		dla_reg_write(engine->driver_context,
> +				reg_base + le_slope_scale_offset[is_sdp], reg);
> +
> +		reg = ((((uint32_t)uslope->data_i.shifter) <<
> +			SHIFT(CDP_S_LUT_LE_SLOPE_SHIFT_0,
> +					LUT_LE_SLOPE_UFLOW_SHIFT))&
> +			MASK(CDP_S_LUT_LE_SLOPE_SHIFT_0,
> +					LUT_LE_SLOPE_UFLOW_SHIFT)) |
> +			((((uint32_t)oslope->data_i.shifter) <<
> +			SHIFT(CDP_S_LUT_LE_SLOPE_SHIFT_0,
> +					LUT_LE_SLOPE_OFLOW_SHIFT))&
> +			MASK(CDP_S_LUT_LE_SLOPE_SHIFT_0,
> +					LUT_LE_SLOPE_OFLOW_SHIFT));
> +		dla_reg_write(engine->driver_context,
> +				reg_base + le_slope_shift_offset[is_sdp], reg);
> +
> +		uslope = &lut->linear_only_underflow_slope;
> +		oslope = &lut->linear_only_overflow_slope;
> +		reg = ((((uint32_t)uslope->data_i.scale) <<
> +			SHIFT(CDP_S_LUT_LO_SLOPE_SCALE_0,
> +					LUT_LO_SLOPE_UFLOW_SCALE))&
> +			MASK(CDP_S_LUT_LO_SLOPE_SCALE_0,
> +					LUT_LO_SLOPE_UFLOW_SCALE)) |
> +			((((uint32_t)oslope->data_i.scale) <<
> +			SHIFT(CDP_S_LUT_LO_SLOPE_SCALE_0,
> +					LUT_LO_SLOPE_OFLOW_SCALE))&
> +			MASK(CDP_S_LUT_LO_SLOPE_SCALE_0,
> +					LUT_LO_SLOPE_OFLOW_SCALE));
> +		dla_reg_write(engine->driver_context,
> +				reg_base + lo_slope_scale_offset[is_sdp], reg);
> +		reg = ((((uint32_t)uslope->data_i.shifter) <<
> +			SHIFT(CDP_S_LUT_LO_SLOPE_SHIFT_0,
> +					LUT_LO_SLOPE_UFLOW_SHIFT))&
> +			MASK(CDP_S_LUT_LO_SLOPE_SHIFT_0,
> +					LUT_LO_SLOPE_UFLOW_SHIFT)) |
> +			((((uint32_t)oslope->data_i.shifter) <<
> +			SHIFT(CDP_S_LUT_LO_SLOPE_SHIFT_0,
> +					LUT_LO_SLOPE_OFLOW_SHIFT))&
> +			MASK(CDP_S_LUT_LO_SLOPE_SHIFT_0,
> +					LUT_LO_SLOPE_OFLOW_SHIFT));
> +		dla_reg_write(engine->driver_context,
> +				reg_base + lo_slope_shift_offset[is_sdp], reg);
> +	}
> +}
> +
> +int
> +validate_data_cube(struct dla_data_cube src_data_cube,
> +				   struct dla_data_cube dst_data_cube,
> +				   uint8_t mem_type)
> +{
> +	int32_t ret = 0;
> +
> +	if ((src_data_cube.width > DCUBE_MAX_WIDTH) ||
> +	    (src_data_cube.height > DCUBE_MAX_HEIGHT) ||
> +	    (src_data_cube.channel > DCUBE_MAX_CHANNEL)) {
> +		pr_err("Invalid SrcInput Cude[W: %u, H: %u, C: %u]",
> +				src_data_cube.width, src_data_cube.height,
> +				src_data_cube.channel);
> +		ret = -EINVAL;
> +		goto exit;
> +	}
> +
> +	if ((dst_data_cube.width > DCUBE_MAX_WIDTH) ||
> +	    (dst_data_cube.height > DCUBE_MAX_HEIGHT) ||
> +	    (dst_data_cube.channel > DCUBE_MAX_CHANNEL)) {
> +		pr_err("Invalid DstInput Cude[W: %u, H: %u, C: %u]",
> +				dst_data_cube.width, dst_data_cube.height,
> +				dst_data_cube.channel);
> +		ret = -EINVAL;
> +		goto exit;
> +	}
> +
> +	if (src_data_cube.type > mem_type) {
> +		pr_err("Invalid src_data.mem_type: %u\n", src_data_cube.type);
> +		ret = -EINVAL;
> +		goto exit;
> +	}
> +
> +	if (dst_data_cube.type > mem_type) {
> +		pr_err("Invalid dst_data.mem_type: %u\n", dst_data_cube.type);
> +		ret = -EINVAL;
> +		goto exit;
> +	}
> +
> +exit:
> +	return ret;
> +}
> +
> +int
> +validate_precision(uint8_t precision, uint8_t map_precision)
> +{
> +	int32_t ret = 0;
> +
> +	if (precision >= map_precision) {
> +		pr_err("Invalid precision: %u\n", precision);
> +		ret = -EINVAL;
> +	}
> +
> +	return ret;
> +}
> diff --git a/drivers/gpu/drm/nvdla/nvdla_common.h b/drivers/gpu/drm/nvdla/nvdla_common.h
> new file mode 100644
> index 000000000000..38cf43246890
> --- /dev/null
> +++ b/drivers/gpu/drm/nvdla/nvdla_common.h
> @@ -0,0 +1,835 @@
> +/* SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause */
> +/*
> + * Copyright (C) 2017-2018 NVIDIA CORPORATION.
> + * Copyright (C) 2022 Cai Huoqing
> + */
> +
> +#ifndef __NVDLA_COMMON_H_
> +#define __NVDLA_COMMON_H_
> +
> +#include <linux/types.h>
> +
> +#define DCUBE_MAX_WIDTH		8192
> +#define DCUBE_MAX_HEIGHT	8192
> +#define DCUBE_MAX_CHANNEL	8192
> +
> +/**
> + * @ingroup Processors
> + * @name DLA Processors
> + * Processor modules in DLA engine. Each processor has it's
> + * own operation a.k.a. HW layer. Network is formed using
> + * graph of these operations
> + * @{
> + */
> +#define DLA_OP_BDMA		0
> +#define DLA_OP_CONV		1
> +#define DLA_OP_SDP		2
> +#define DLA_OP_PDP		3
> +#define DLA_OP_CDP		4
> +#define DLA_OP_RUBIK	5
> +/** @} */
> +
> +/**
> + * @ingroup Processors
> + * @name Maximum number of processors
> + * @brief DLA ash 6 processors
> + * @{
> + */
> +#define DLA_OP_NUM		6
> +/** @} */
> +
> +/**
> + * @ingroup Processors
> + * @name Number of groups
> + * @brief Each processor has 2 groups of registers
> + * @{
> + */
> +#define DLA_NUM_GROUPS		2
> +/** @} */
> +
> +/**
> + * Network descriptor
> + *
> + * Contains all information to execute a network
> + *
> + * @op_head: Index of first operation of each type in operations list
> + * @num_rois: Number of ROIs
> + * @num_operations: Number of operations in one list
> + * @num_luts: Number of LUTs
> + */
> +struct dla_network_desc {
> +	int16_t operation_desc_index;
> +	int16_t surface_desc_index;
> +
> +	int16_t dependency_graph_index;
> +	int16_t lut_data_index;
> +
> +	int16_t roi_array_index;
> +	int16_t surface_index;
> +
> +	int16_t stat_list_index;
> +	int16_t reserved1;
> +
> +	int16_t op_head[DLA_OP_NUM];
> +
> +	uint16_t num_rois;
> +	uint16_t num_operations;
> +
> +	uint16_t num_luts;
> +	uint16_t num_addresses;
> +
> +	int16_t input_layer;
> +	uint8_t dynamic_roi;
> +	uint8_t reserved0;
> +} __packed __aligned(4);
> +
> +/**
> + * @name Memory types
> + * @brief DLA engnine can read/write to/from 3 memory types
> + * @{
> + */
> +#define DLA_MEM_MC			0 /* External DRAM */
> +#define DLA_MEM_CV			1 /* CV-SRAM */
> +#define DLA_MEM_HW			2 /* DLA sub-module */
> +/** @} */
> +
> +/**
> + * @ingroup Events
> + * @name Operation events
> + * @brief Different events triggered by an operations
> + * @{
> + */
> +#define DLA_EVENT_OP_COMPLETED		1
> +#define DLA_EVENT_OP_PROGRAMMED		2
> +#define DLA_EVENT_OP_ENABLED		3
> +#define DLA_EVENT_CDMA_WT_DONE		4
> +#define DLA_EVENT_CDMA_DT_DONE		5
> +/** @} */
> +
> +struct dla_consumer {
> +	int16_t index; /* the index of dla_common_op_desc in dep_graph_addr */
> +	uint8_t event;
> +	uint8_t res;
> +} __packed __aligned(4);
> +
> +struct dla_common_op_desc {
> +	int16_t index; /* set by ucode */
> +	int8_t roi_index;
> +	uint8_t op_type;
> +
> +	uint8_t dependency_count;
> +	uint8_t reserved0[3];
> +
> +	struct dla_consumer consumers[DLA_OP_NUM];
> +	struct dla_consumer fused_parent;
> +} __packed __aligned(4);
> +
> +struct dla_roi_array_desc {
> +	uint32_t array_length;
> +
> +	uint32_t array_reserved;
> +} __packed __aligned(4);
> +
> +struct dla_roi_desc {
> +	uint32_t left;
> +
> +	uint32_t top;
> +
> +	uint32_t right;
> +
> +	uint32_t bottom;
> +} __packed __aligned(4);
> +
> +/**
> + * @ingroup BDMA
> + * @name Maximum BDMA transfers
> + * @brief BDMA supports multiple transfers in operation. This indicates
> + *        maximum number of transfers possible in one operation.
> + * @{
> + */
> +#define NUM_MAX_BDMA_OPS	20
> +/** @} */
> +
> +struct dla_bdma_transfer_desc {
> +	int16_t source_address;
> +	int16_t destination_address;
> +
> +	uint32_t line_size;
> +
> +	uint32_t line_repeat;
> +
> +	uint32_t source_line;
> +
> +	uint32_t destination_line;
> +
> +	uint32_t surface_repeat;
> +
> +	uint32_t source_surface;
> +
> +	uint32_t destination_surface;
> +} __packed __aligned(4);
> +
> +struct dla_bdma_surface_desc {
> +	uint8_t source_type;
> +	uint8_t destination_type;
> +	uint16_t num_transfers;
> +
> +	struct dla_bdma_transfer_desc transfers[NUM_MAX_BDMA_OPS];
> +} __packed __aligned(4);
> +
> +struct dla_bdma_op_desc {
> +	uint16_t num_transfers;
> +	uint16_t reserved0;
> +} __packed __aligned(4);
> +
> +struct dla_bdma_stat_desc {
> +	uint32_t read_stall;
> +	uint32_t write_stall;
> +} __packed __aligned(4);
> +
> +/**
> + * @ingroup Convolution
> + * @name Convolution mode
> + * @brief Convolution modes support by DLA
> + * @{
> + */
> +#define CONV_MODE_DIRECT	0
> +#define CONV_MODE_WINOGRAD	1
> +/** @} */
> +
> +/**
> + * @ingroup Processors
> + * @name Precision BPE mapping
> + * @brief Precision formats and Bit Per Elements mapping
> + * @{
> + */
> +#define BPE_PRECISION_INT8		1
> +#define BPE_PRECISION_INT16		2
> +#define BPE_PRECISION_FP16		2
> +/** @} */
> +
> +
> +/**
> + * @ingroup Processors
> + * @name Precision types
> + * @brief Precision formats supported by DLA engine
> + * @{
> + */
> +#define PRECISION_INT8		0
> +#define PRECISION_INT16		1
> +#define PRECISION_FP16		2
> +/** @} */
> +
> +/**
> + * @ingroup Processors
> + * @name Data formats
> + * @brief Data formats supported by DLA engine
> + * @{
> + */
> +#define FORMAT_T_R8			0
> +#define FORMAT_T_R10			1
> +#define FORMAT_T_R12			2
> +#define FORMAT_T_R16			3
> +#define FORMAT_T_R16_I			4
> +#define FORMAT_T_R16_F			5
> +#define FORMAT_T_A16B16G16R16		6
> +#define FORMAT_T_X16B16G16R16		7
> +#define FORMAT_T_A16B16G16R16_F		8
> +#define FORMAT_T_A16Y16U16V16		9
> +#define FORMAT_T_V16U16Y16A16		10
> +#define FORMAT_T_A16Y16U16V16_F		11
> +#define FORMAT_T_A8B8G8R8		12
> +#define FORMAT_T_A8R8G8B8		13
> +#define FORMAT_T_B8G8R8A8		14
> +#define FORMAT_T_R8G8B8A8		15
> +#define FORMAT_T_X8B8G8R8		16
> +#define FORMAT_T_X8R8G8B8		17
> +#define FORMAT_T_B8G8R8X8		18
> +#define FORMAT_T_R8G8B8X8		19
> +#define FORMAT_T_A2B10G10R10		20
> +#define FORMAT_T_A2R10G10B10		21
> +#define FORMAT_T_B10G10R10A2		22
> +#define FORMAT_T_R10G10B10A2		23
> +#define FORMAT_T_A2Y10U10V10		24
> +#define FORMAT_T_V10U10Y10A2		25
> +#define FORMAT_T_A8Y8U8V8			26
> +#define FORMAT_T_V8U8Y8A8			27
> +#define FORMAT_T_Y8___U8V8_N444		28
> +#define FORMAT_T_Y8___V8U8_N444		29
> +#define FORMAT_T_Y10___U10V10_N444	30
> +#define FORMAT_T_Y10___V10U10_N444	31
> +#define FORMAT_T_Y12___U12V12_N444	32
> +#define FORMAT_T_Y12___V12U12_N444	33
> +#define FORMAT_T_Y16___U16V16_N444	34
> +#define FORMAT_T_Y16___V16U16_N444	35
> +#define FORMAT_FEATURE			36
> +/** @} */
> +
> +/**
> + * @ingroup Convolution
> + * @name Pixel mapping
> + * @brief Pixel mapping formats supported for image input in Convolution
> + * @{
> + */
> +#define MAP_PITCH_LINEAR		0
> +/** @} */
> +
> +/**
> + * @ingroup Convolution
> + * @name Weight formats
> + * @brief Weight data formats supported in Convolution
> + * @{
> + */
> +#define WEIGHT_FORMAT_UNCOMPRESSED	0
> +#define WEIGHT_FORMAT_COMPRESSED	1
> +/** @} */
> +
> +/**
> + * @ingroup Convolution
> + * @name Mean data format
> + * @brief Mean data formats supported in Convolution
> + * @{
> + */
> +#define MEAN_FORMAT_DISABLE     0
> +#define MEAN_FORMAT_ENABLE      1
> +/** @} */
> +
> +struct dla_cvt_param {
> +	int16_t  scale;
> +	uint8_t  truncate;
> +	uint8_t  enable;
> +
> +	int32_t  offset;
> +} __packed __aligned(4);
> +
> +struct dla_data_cube {
> +	uint16_t type; /* dla_mem_type */
> +	int16_t address; /* offset to the actual IOVA in task.address_list */
> +
> +	uint32_t offset; /* offset within address */
> +	uint32_t size;
> +
> +	/* cube dimensions */
> +	uint16_t width;
> +	uint16_t height;
> +
> +	uint16_t channel;
> +	uint16_t reserved0;
> +
> +	/* stride information */
> +	uint32_t line_stride;
> +	uint32_t surf_stride;
> +
> +	/* For Rubik only */
> +	uint32_t plane_stride;
> +} __packed __aligned(4);
> +
> +#define PIXEL_OVERRIDE_UINT 0
> +#define PIXEL_OVERRIDE_INT  1
> +
> +struct dla_conv_surface_desc {
> +	/* Data cube */
> +	struct dla_data_cube weight_data;
> +	struct dla_data_cube wmb_data;
> +	struct dla_data_cube wgs_data;
> +	struct dla_data_cube src_data;
> +	struct dla_data_cube dst_data;
> +
> +	/**
> +	 * u_addr = input_data.source_addr + offset_u
> +	 * this field should be set when YUV is not interleave format
> +	 *
> +	 */
> +	int64_t offset_u;
> +
> +	/* line stride for 2nd plane, must be 32bytes aligned */
> +	uint32_t in_line_uv_stride;
> +} __packed __aligned(4);
> +
> +struct dla_conv_op_desc {
> +	/* Performance parameters */
> +
> +	/* dla_conv_mode */
> +	uint8_t conv_mode;
> +	uint8_t data_reuse;
> +	uint8_t weight_reuse;
> +	uint8_t skip_data_rls;
> +
> +	uint8_t skip_weight_rls;
> +	uint8_t reserved0;
> +	uint16_t entry_per_slice;
> +
> +	/* dla_data_format */
> +	uint8_t data_format;
> +	/* dla_pixel_mapping */
> +	uint8_t pixel_mapping;
> +	/* number of free slices before fetch */
> +	uint16_t fetch_grain;
> +
> +	uint8_t reserved_b[8];
> +
> +	/* batch_num */
> +	uint8_t batch;
> +	/* dla_weight_format */
> +	uint8_t weight_format;
> +	uint8_t data_bank;
> +	uint8_t weight_bank;
> +
> +	/* the offset in bytes of each data cube in a batch */
> +	uint32_t batch_stride;
> +
> +	uint8_t post_extension;
> +	uint8_t pixel_override;
> +	/* number of slices need to be released */
> +	uint16_t release;
> +
> +	 /* The input cube dimension for CSC */
> +	uint16_t input_width_csc;
> +	uint16_t input_height_csc;
> +
> +	uint16_t input_channel_csc;
> +	uint16_t kernel_width_csc;
> +
> +	uint16_t kernel_height_csc;
> +	uint16_t kernel_channel_csc;
> +
> +	/* The input cube dimension for CMAC */
> +	uint16_t input_width_cmac;
> +	uint16_t input_height_cmac;
> +
> +	/* actual size in bytes */
> +	uint32_t bytes_per_kernel;
> +
> +	/* Algorithm parameters */
> +
> +	int16_t mean_ry; /* mean value for red in RGB or Y in YUV */
> +	int16_t mean_gu; /* mean value for green in RGB or U in YUV */
> +
> +	int16_t mean_bv; /* mean value for blue in RGB or V in YUV */
> +	int16_t mean_ax;
> +
> +	uint8_t mean_format; /* dla_mean_format */
> +	uint8_t conv_stride_x;
> +	uint8_t conv_stride_y;
> +	uint8_t pad_x_left;
> +
> +	uint8_t pad_x_right;
> +	uint8_t pad_y_top;
> +	uint8_t pad_y_bottom;
> +	uint8_t dilation_x;
> +
> +	uint8_t dilation_y;
> +	uint8_t reserved2[2];
> +
> +	/* Precision parameters */
> +	uint8_t pra_truncate;
> +
> +	uint8_t in_precision;
> +	/* The output precision from CONV, it's the MAC processing precison */
> +	uint8_t out_precision;
> +	int16_t pad_val;
> +
> +	/* input converter parameters */
> +	struct dla_cvt_param in_cvt;
> +	/* output converter parameters, support truncate only */
> +	struct dla_cvt_param out_cvt;
> +
> +} __packed __aligned(4);
> +
> +struct dla_conv_stat_desc {
> +	uint32_t data_read_stall;
> +	uint32_t weight_read_stall;
> +	uint32_t data_read_latency;
> +	uint32_t weight_read_latency;
> +	uint32_t saturation_count;
> +	uint32_t nan_data_num;
> +	uint32_t nan_weight_num;
> +	uint32_t inf_data_num;
> +	uint32_t inf_weight_num;
> +} __packed __aligned(4);
> +
> +/**
> + * @ingroup SDP
> + * @name Activation functions
> + * @brief Activation functions supported in SDP
> + * @{
> + */
> +#define ACTIVATION_NONE		0
> +#define ACTIVATION_RELU		1
> +#define ACTIVATION_LUT		2
> +#define ACTIVATION_PRELU	3
> +/** @} */
> +
> +/**
> + * @ingroup LUT
> + * @name LUT size
> + * @brief LUT sizes for linear and exponentila LUT
> + * @{
> + */
> +#define LUT_LINEAR_EXP_TABLE_ENTRY_LOG2		6
> +#define LUT_LINEAR_ONLY_TABLE_ENTRY_LOG2	8
> +/** @} */
> +
> +/**
> + * @ingroup LUT
> + * @name LUT types
> + * @brief DLA supports two types of LUT, linear and exonential
> + * @{
> + */
> +#define LUT_LINEAR_EXP_TABLE		0
> +#define LUT_LINEAR_ONLY_TABLE		1
> +/** @} */
> +
> +/**
> + * @ingroup LUT
> + * @name LUT methods
> + * @brief DLA supports two types of LUT, linear and exonential
> + * @{
> + */
> +#define LUT_METHOD_EXPONENTIAL		0
> +#define LUT_METHOD_LINEAR		1
> +/** @} */
> +
> +/**
> + * @ingroup LUT
> + * @name LUT
> + * @brief DLA supports two types of LUT, linear and exonential
> + * @{
> + */
> +#define LUT_PRI_LINEAR_EXP		0
> +#define LUT_PRI_LINEAR_ONLY		1
> +/** @} */
> +
> +union dla_lut_offset {
> +	/**
> +	 * Number should be substracted on log domain before look up
> +	 * exponetial table it has the same definition as hardware
> +	 * thus input scaling should also take into account when
> +	 * set this field.
> +	 */
> +	int8_t exp_offset;
> +	/**
> +	 * Number of bits should be right shift before looking
> +	 * up linear table
> +	 */
> +	int8_t frac_bits;
> +	uint16_t reserved0;
> +};
> +
> +/**
> + * This struct is used to represent floating point values by INT
> + * suppose we have a float point number fp_x, it will be represented
> + * as:
> + *
> + * fp_x = scale_int_x>>(shifter_x)
> + *
> + * This is very useful for INT pipeline;
> + */
> +struct dla_float_data {
> +	int16_t scale;
> +	int8_t shifter;
> +	uint8_t reserved0;
> +} __packed __aligned(4);
> +
> +/**
> + * For INT pipeline, we use the struct above to represent a floating number;
> + * For FP16 pipeline, we should store the FP16 encoded value into a uint16_t
> + * container
> + */
> +union dla_slope {
> +	struct dla_float_data data_i;
> +
> +	uint16_t data_f;
> +};
> +
> +struct dla_lut_param {
> +	/**
> +	 * value of expression ((1<<LUT_LINEAR_EXP_TABLE_ENTRY_LOG2)+1) is 65,
> +	 * ((1<<LUT_LINEAR_ONLY_TABLE_ENTRY_LOG2)+1) is 257, and int16_t is of
> +	 * 2Byte. And below two statement's combined memory size is 644 Byte.
> +	 *
> +	 * NOTE: below two declaration combined size should always be multiple
> +	 * of 4.
> +	 */
> +	int16_t linear_exp_table[(1<<LUT_LINEAR_EXP_TABLE_ENTRY_LOG2)+1];
> +	int16_t linear_only_table[(1<<LUT_LINEAR_ONLY_TABLE_ENTRY_LOG2)+1];
> +
> +	union dla_lut_offset linear_exp_offset;
> +	union dla_lut_offset linear_only_offset;
> +
> +	/**
> +	 * The start and end point of raw table,
> +	 * valid when raw_method=LINEAR only
> +	 */
> +	uint64_t linear_exp_start;
> +	uint64_t linear_exp_end;
> +	uint64_t linear_only_start;
> +	uint64_t linear_only_end;
> +
> +	union dla_slope linear_exp_underflow_slope;
> +	union dla_slope linear_exp_overflow_slope;
> +	union dla_slope linear_only_underflow_slope;
> +	union dla_slope linear_only_overflow_slope;
> +
> +	/**
> +	 * dla_lut_priority, when both lut are hit(or one overflow,
> +	 * the other underflow), which one should be selected as output
> +	 */
> +	uint8_t hybrid_priority;
> +	uint8_t underflow_priority;
> +	uint8_t overflow_priority;
> +	uint8_t method; /* dla_lut_method */
> +} __packed __aligned(4);
> +
> +struct dla_sdp_surface_desc {
> +	/* Data cube */
> +	/* source input cube, available when SDP working on offline mode */
> +	struct dla_data_cube src_data;
> +
> +	/* X1 input cube */
> +	struct dla_data_cube x1_data;
> +
> +	/* X2 input cube */
> +	struct dla_data_cube x2_data;
> +
> +	/* Y input cube */
> +	struct dla_data_cube y_data;
> +
> +	/* Output cube */
> +	struct dla_data_cube dst_data;
> +} __packed __aligned(4);
> +
> +#define SDP_OP_NONE		0
> +#define SDP_OP_MUL		1
> +#define SDP_OP_ADD		2
> +#define SDP_OP_BOTH		3
> +
> +#define SDP_ALU_OP_MAX		0
> +#define SDP_ALU_OP_MIN		1
> +#define SDP_ALU_OP_SUM		2
> +#define SDP_ALU_OP_EQL		3
> +
> +#define SDP_OP_PER_LAYER	0
> +#define SDP_OP_PER_KERNEL	1
> +#define SDP_OP_PER_POINT	2
> +
> +struct dla_sdp_cvt {
> +	struct dla_cvt_param alu_cvt;
> +	struct dla_cvt_param mul_cvt;
> +} __packed __aligned(4);
> +
> +struct dla_sdp_op {
> +	uint8_t enable;
> +	uint8_t alu_type; /* dla_sdp_alu_op_type */
> +	uint8_t type; /* dla_sdp_op_type */
> +	uint8_t mode; /* dla_sdp_op_mode */
> +
> +	uint8_t act; /* dla_act_type */
> +	uint8_t shift_value; /* left shift */
> +	uint8_t truncate;
> +	uint8_t precision;
> +
> +	int32_t alu_operand;
> +	int32_t mul_operand;
> +
> +	struct dla_sdp_cvt  cvt;
> +} __packed __aligned(4);
> +
> +struct dla_sdp_op_desc {
> +	/* Precision parameters */
> +	/* dla_precision */
> +	uint8_t src_precision;
> +	uint8_t dst_precision;
> +	int16_t lut_index;
> +
> +	struct dla_cvt_param out_cvt;
> +
> +	/* Performance parameters */
> +	/* dla_conv_mode */
> +	uint8_t conv_mode;
> +	uint8_t batch_num;
> +	uint16_t reserved0;
> +
> +	uint32_t batch_stride;	/* will be used when batch_num > 1 */
> +
> +	/* Algorithm parameters */
> +	struct dla_sdp_op x1_op;
> +	struct dla_sdp_op x2_op;
> +	struct dla_sdp_op y_op;
> +} __packed __aligned(4);
> +
> +#define POOL_MODE_AVG		0
> +#define POOL_MODE_MAX		1
> +#define POOL_MODE_MIN		2
> +
> +#define POOL_SIZE_1		0
> +#define POOL_SIZE_2		1
> +#define POOL_SIZE_3		2
> +#define POOL_SIZE_4		3
> +#define POOL_SIZE_5		4
> +#define POOL_SIZE_6		5
> +#define POOL_SIZE_7		6
> +#define POOL_SIZE_8		7
> +
> +#define PDP_PAD_VAL_NUM	7
> +
> +struct dla_pdp_surface_desc {
> +	/* Data cube */
> +	struct dla_data_cube src_data;
> +
> +	struct dla_data_cube dst_data;
> +} __packed __aligned(4);
> +
> +struct dla_pdp_op_desc {
> +	/* Performance parameters */
> +	uint16_t  partial_in_width_first;
> +	uint16_t  partial_in_width_mid;
> +
> +	uint16_t  partial_in_width_last;
> +	uint16_t  partial_width_first;
> +
> +	uint16_t  partial_width_mid;
> +	uint16_t  partial_width_last;
> +
> +	uint8_t   split_num;
> +
> +	/* Algorithm parameters */
> +	uint8_t  pool_mode; /* dla_pool_mode */
> +	uint8_t  pool_width; /* dla_pool_width */
> +	uint8_t  pool_height; /* dla_pool_height */
> +
> +	uint8_t  stride_x;
> +	uint8_t  stride_y;
> +
> +	/**
> +	 * The left/right padding size,
> +	 * pad_right might be less than pad_left
> +	 */
> +	uint8_t  pad_left;
> +	uint8_t  pad_right;
> +
> +	/* The top/bottom padding size */
> +	uint8_t  pad_top;
> +	uint8_t  pad_bottom;
> +
> +	/* Precision parameters */
> +	uint8_t  precision; /* dla_precision */
> +	uint8_t  reserved0;
> +	/**
> +	 * if input has non-zero "offset", this value should be set
> +	 * There'll be 7 different paddding values, the relationship between
> +	 * those versions are:
> +	 * padding_value[0] = -offset*scaling;
> +	 * padding_value[1] = 2*padding_value[0]
> +	 * padding_value[2] = 3*padding_value[0]
> +	 * ...
> +	 * The purpose is to avoid ucode implement FP16
> +	 * multiplier(for FP16 mode)
> +	 */
> +	int32_t  padding_value[PDP_PAD_VAL_NUM];
> +} __packed __aligned(4);
> +
> +struct dla_pdp_stat_desc {
> +	uint32_t inf_input_num;
> +	uint32_t nan_input_num;
> +	uint32_t nan_output_num;
> +	uint32_t write_stall;
> +	uint32_t runtime;
> +} __packed __aligned(4);
> +
> +struct dla_cdp_surface_desc {
> +	/* Data cube */
> +	struct dla_data_cube src_data;
> +
> +	struct dla_data_cube dst_data;
> +} __packed __aligned(4);
> +
> +struct dla_cdp_op_desc {
> +	/* Precision parameters */
> +
> +	/* dla_precision */
> +	uint8_t  in_precision;
> +	uint8_t  out_precision;
> +	int16_t  lut_index;
> +
> +	struct dla_cvt_param in_cvt;
> +	struct dla_cvt_param out_cvt;
> +
> +	/* Performance parameters */
> +
> +	/* Algorithm parameters */
> +	uint8_t  local_size;
> +	uint8_t  bypass_sqsum;
> +	uint8_t  bypass_out_mul;
> +	uint8_t  reserved0;
> +} __packed __aligned(4);
> +
> +struct dla_cdp_stat_desc {
> +	uint32_t nan_input_num;
> +	uint32_t inf_input_num;
> +	uint32_t nan_output_num;
> +	uint32_t write_stall;
> +	uint32_t lut_uflow;
> +	uint32_t lut_oflow;
> +	uint32_t lut_hybrid;
> +	uint32_t lut_le_hit;
> +	uint32_t lut_lo_hit;
> +	uint32_t saturation_count;
> +	uint32_t runtime;
> +} __packed __aligned(4);
> +
> +struct dla_rubik_surface_desc {
> +	/* Data cube */
> +	struct dla_data_cube src_data;
> +
> +	struct dla_data_cube dst_data;
> +} __packed __aligned(4);
> +
> +/* rubik mode */
> +#define RUBIK_MODE_CONTRACT	0
> +#define RUBIK_MODE_SPLIT	1
> +#define RUBIK_MODE_MERGE	2
> +
> +struct dla_rubik_op_desc {
> +	/* Precision parameters */
> +	uint8_t mode;
> +	uint8_t precision;
> +	uint8_t stride_x;
> +	uint8_t stride_y;
> +} __packed __aligned(4);
> +
> +struct dla_rubik_stat_desc {
> +	uint32_t read_stall;
> +	uint32_t write_stall;
> +	uint32_t runtime;
> +} __packed __aligned(4);
> +
> +union dla_surface_container {
> +	struct dla_bdma_surface_desc bdma_surface;
> +	struct dla_conv_surface_desc conv_surface;
> +	struct dla_sdp_surface_desc sdp_surface;
> +	struct dla_pdp_surface_desc pdp_surface;
> +	struct dla_cdp_surface_desc cdp_surface;
> +	struct dla_rubik_surface_desc rubik_surface;
> +};
> +
> +union dla_operation_container {
> +	struct dla_bdma_op_desc bdma_op;
> +	struct dla_conv_op_desc conv_op;
> +	struct dla_sdp_op_desc sdp_op;
> +	struct dla_pdp_op_desc pdp_op;
> +	struct dla_cdp_op_desc cdp_op;
> +	struct dla_rubik_op_desc rubik_op;
> +};
> +
> +struct dla_engine;
> +void update_lut(struct dla_engine *engine, uint32_t reg_base,
> +		struct dla_lut_param *lut,
> +		uint8_t precision);
> +int32_t validate_data_cube(struct dla_data_cube src_data_cube,
> +			struct dla_data_cube dst_data_cube,
> +			uint8_t mem_type);
> +int32_t validate_precision(uint8_t precision,
> +			uint8_t map_precision);
> +
> +#endif
> diff --git a/drivers/gpu/drm/nvdla/nvdla_conv.c b/drivers/gpu/drm/nvdla/nvdla_conv.c
> new file mode 100644
> index 000000000000..bb24909e1afa
> --- /dev/null
> +++ b/drivers/gpu/drm/nvdla/nvdla_conv.c
> @@ -0,0 +1,683 @@
> +// SPDX-License-Identifier: BSD-3-Clause OR GPL-2.0
> +/*
> + * Copyright (C) 2017-2018 NVIDIA CORPORATION
> + * Copyright (C) 2022 Cai Huoqing
> + */
> +
> +#include "nvdla_common.h"
> +#include "nvdla_drm.h"
> +#include "nvdla_reg.h"
> +#include "nvdla_common.h"
> +#include "nvdla_engine.h"
> +
> +static const uint8_t map_precision[] = {
> +	FIELD_ENUM(CDMA_D_MISC_CFG_0, IN_PRECISION, INT8),
> +	FIELD_ENUM(CDMA_D_MISC_CFG_0, IN_PRECISION, INT16),
> +	FIELD_ENUM(CDMA_D_MISC_CFG_0, IN_PRECISION, FP16),
> +};
> +
> +static const uint8_t map_conv[] = {
> +	FIELD_ENUM(CACC_D_MISC_CFG_0, CONV_MODE, DIRECT),
> +	FIELD_ENUM(CACC_D_MISC_CFG_0, CONV_MODE, WINOGRAD),
> +};
> +
> +static const uint8_t map_weight_fmt[] = {
> +	FIELD_ENUM(CSC_D_WEIGHT_FORMAT_0, WEIGHT_FORMAT, UNCOMPRESSED),
> +	FIELD_ENUM(CSC_D_WEIGHT_FORMAT_0, WEIGHT_FORMAT, COMPRESSED),
> +};
> +
> +static const uint8_t map_img_fmt[][2] = {
> +	{FIELD_ENUM(CDMA_D_DATAIN_FORMAT_0,
> +			PIXEL_FORMAT, T_R8), 1},
> +	{FIELD_ENUM(CDMA_D_DATAIN_FORMAT_0,
> +			PIXEL_FORMAT, T_R10), 2},
> +	{FIELD_ENUM(CDMA_D_DATAIN_FORMAT_0,
> +			PIXEL_FORMAT, T_R12), 2},
> +	{FIELD_ENUM(CDMA_D_DATAIN_FORMAT_0,
> +			PIXEL_FORMAT, T_R16), 2},
> +	{FIELD_ENUM(CDMA_D_DATAIN_FORMAT_0,
> +			PIXEL_FORMAT, T_R16_I), 2},
> +	{FIELD_ENUM(CDMA_D_DATAIN_FORMAT_0,
> +			PIXEL_FORMAT, T_R16_F), 2},
> +	{FIELD_ENUM(CDMA_D_DATAIN_FORMAT_0,
> +			PIXEL_FORMAT, T_A16B16G16R16), 8},
> +	{FIELD_ENUM(CDMA_D_DATAIN_FORMAT_0,
> +			PIXEL_FORMAT, T_X16B16G16R16), 8},
> +	{FIELD_ENUM(CDMA_D_DATAIN_FORMAT_0,
> +			PIXEL_FORMAT, T_A16B16G16R16_F), 8},
> +	{FIELD_ENUM(CDMA_D_DATAIN_FORMAT_0,
> +			PIXEL_FORMAT, T_A16Y16U16V16), 8},
> +	{FIELD_ENUM(CDMA_D_DATAIN_FORMAT_0,
> +			PIXEL_FORMAT, T_V16U16Y16A16), 8},
> +	{FIELD_ENUM(CDMA_D_DATAIN_FORMAT_0,
> +			PIXEL_FORMAT, T_A16Y16U16V16_F), 8},
> +	{FIELD_ENUM(CDMA_D_DATAIN_FORMAT_0,
> +			PIXEL_FORMAT, T_A8B8G8R8), 4},
> +	{FIELD_ENUM(CDMA_D_DATAIN_FORMAT_0,
> +			PIXEL_FORMAT, T_A8R8G8B8), 4},
> +	{FIELD_ENUM(CDMA_D_DATAIN_FORMAT_0,
> +			PIXEL_FORMAT, T_B8G8R8A8), 4},
> +	{FIELD_ENUM(CDMA_D_DATAIN_FORMAT_0,
> +			PIXEL_FORMAT, T_R8G8B8A8), 4},
> +	{FIELD_ENUM(CDMA_D_DATAIN_FORMAT_0,
> +			PIXEL_FORMAT, T_X8B8G8R8), 4},
> +	{FIELD_ENUM(CDMA_D_DATAIN_FORMAT_0,
> +			PIXEL_FORMAT, T_X8R8G8B8), 4},
> +	{FIELD_ENUM(CDMA_D_DATAIN_FORMAT_0,
> +			PIXEL_FORMAT, T_B8G8R8X8), 4},
> +	{FIELD_ENUM(CDMA_D_DATAIN_FORMAT_0,
> +			PIXEL_FORMAT, T_R8G8B8X8), 4},
> +	{FIELD_ENUM(CDMA_D_DATAIN_FORMAT_0,
> +			PIXEL_FORMAT, T_A2B10G10R10), 4},
> +	{FIELD_ENUM(CDMA_D_DATAIN_FORMAT_0,
> +			PIXEL_FORMAT, T_A2R10G10B10), 4},
> +	{FIELD_ENUM(CDMA_D_DATAIN_FORMAT_0,
> +			PIXEL_FORMAT, T_B10G10R10A2), 4},
> +	{FIELD_ENUM(CDMA_D_DATAIN_FORMAT_0,
> +			PIXEL_FORMAT, T_R10G10B10A2), 4},
> +	{FIELD_ENUM(CDMA_D_DATAIN_FORMAT_0,
> +			PIXEL_FORMAT, T_A2Y10U10V10), 4},
> +	{FIELD_ENUM(CDMA_D_DATAIN_FORMAT_0,
> +			PIXEL_FORMAT, T_V10U10Y10A2), 4},
> +	{FIELD_ENUM(CDMA_D_DATAIN_FORMAT_0,
> +			PIXEL_FORMAT, T_A8Y8U8V8), 4},
> +	{FIELD_ENUM(CDMA_D_DATAIN_FORMAT_0,
> +			PIXEL_FORMAT, T_V8U8Y8A8), 4},
> +	{FIELD_ENUM(CDMA_D_DATAIN_FORMAT_0,
> +			PIXEL_FORMAT, T_Y8___U8V8_N444), 1},
> +	{FIELD_ENUM(CDMA_D_DATAIN_FORMAT_0,
> +			PIXEL_FORMAT, T_Y8___V8U8_N444), 1},
> +	{FIELD_ENUM(CDMA_D_DATAIN_FORMAT_0,
> +			PIXEL_FORMAT, T_Y10___U10V10_N444), 2},
> +	{FIELD_ENUM(CDMA_D_DATAIN_FORMAT_0,
> +			PIXEL_FORMAT, T_Y10___V10U10_N444), 2},
> +	{FIELD_ENUM(CDMA_D_DATAIN_FORMAT_0,
> +			PIXEL_FORMAT, T_Y12___U12V12_N444), 2},
> +	{FIELD_ENUM(CDMA_D_DATAIN_FORMAT_0,
> +			PIXEL_FORMAT, T_Y12___V12U12_N444), 2},
> +	{FIELD_ENUM(CDMA_D_DATAIN_FORMAT_0,
> +			PIXEL_FORMAT, T_Y16___U16V16_N444), 2},
> +	{FIELD_ENUM(CDMA_D_DATAIN_FORMAT_0,
> +			PIXEL_FORMAT, T_Y16___V16U16_N444), 2},
> +	{FIELD_ENUM(CDMA_D_DATAIN_FORMAT_0,
> +			DATAIN_FORMAT, FEATURE), 2},
> +	{FIELD_ENUM(CDMA_D_DATAIN_FORMAT_0,
> +			DATAIN_FORMAT, PIXEL), 1},
> +};
> +
> +static const uint8_t map_pixel[] = {
> +	FIELD_ENUM(CDMA_D_DATAIN_FORMAT_0, PIXEL_MAPPING, PITCH_LINEAR),
> +};
> +
> +static const uint8_t map_ram[] = {
> +	FIELD_ENUM(CDMA_D_DAIN_RAM_TYPE_0, DATAIN_RAM_TYPE, MCIF),
> +	FIELD_ENUM(CDMA_D_DAIN_RAM_TYPE_0, DATAIN_RAM_TYPE, CVIF),
> +};
> +
> +static const uint8_t map_mean[] = {
> +	FIELD_ENUM(CDMA_D_MEAN_FORMAT_0, MEAN_FORMAT, DISABLE),
> +	FIELD_ENUM(CDMA_D_MEAN_FORMAT_0, MEAN_FORMAT, ENABLE),
> +};
> +
> +static uint32_t
> +get_in_format(uint8_t format)
> +{
> +	uint32_t in_format = 0;
> +
> +	if (format >= FORMAT_T_R8 && format < FORMAT_FEATURE) {
> +		in_format = FIELD_ENUM(CDMA_D_DATAIN_FORMAT_0,
> +						DATAIN_FORMAT, PIXEL);
> +	} else if (format == FORMAT_FEATURE) {
> +		in_format = FIELD_ENUM(CDMA_D_DATAIN_FORMAT_0,
> +						DATAIN_FORMAT, FEATURE);
> +	}
> +
> +	return in_format;
> +}
> +
> +void
> +dla_conv_set_producer(struct dla_engine *engine, int32_t group_id, int32_t rdma_group_id)
> +{
> +	uint32_t reg;
> +
> +	/* set producer pointer for all sub-modules */
> +	reg = group_id << SHIFT(CACC_S_POINTER_0, PRODUCER);
> +	cacc_reg_write(engine, S_POINTER, reg);
> +	cmac_a_reg_write(engine, S_POINTER, reg);
> +	cmac_b_reg_write(engine, S_POINTER, reg);
> +	csc_reg_write(engine, S_POINTER, reg);
> +	cdma_reg_write(engine, S_POINTER, reg);
> +}
> +
> +int
> +dla_conv_enable(struct dla_engine *engine, struct dla_processor_group *group)
> +{
> +	uint32_t reg;
> +
> +	do {
> +		reg = cdma_reg_read(engine, S_CBUF_FLUSH_STATUS);
> +	} while (!(reg & MASK(CDMA_S_CBUF_FLUSH_STATUS_0, FLUSH_DONE)));
> +
> +	/* enable all sub-modules */
> +	reg = FIELD_ENUM(CACC_D_OP_ENABLE_0, OP_EN, ENABLE);
> +	cacc_reg_write(engine, D_OP_ENABLE, reg);
> +	cmac_a_reg_write(engine, D_OP_ENABLE, reg);
> +	cmac_b_reg_write(engine, D_OP_ENABLE, reg);
> +	csc_reg_write(engine, D_OP_ENABLE, reg);
> +	cdma_reg_write(engine, D_OP_ENABLE, reg);
> +
> +	return 0;
> +}
> +
> +void
> +dla_conv_rdma_check(struct dla_processor_group *group)
> +{
> +	group->is_rdma_needed = 0;
> +}
> +
> +static int32_t
> +processor_conv_program(struct dla_engine *engine, struct dla_processor_group *group)
> +{
> +	int32_t ret = 0;
> +	uint32_t reg, high, low, shift, mask;
> +	uint32_t stride_x, stride_y, pad_x, pad_y;
> +	uint64_t weight_address = 0;
> +	uint64_t wmb_address = 0;
> +	uint64_t wgs_address = 0;
> +	uint64_t input_address = 0;
> +	uint64_t output_address = 0;
> +	uint32_t atom_size = 0;
> +	bool weight_compress_support = false;
> +	struct dla_conv_op_desc *conv_op;
> +	struct dla_conv_surface_desc *conv_surface;
> +
> +	weight_compress_support = engine->config_data->weight_compress_support;
> +	atom_size = engine->config_data->atom_size;
> +	conv_op = &group->operation_desc->conv_op;
> +	conv_surface = &group->surface_desc->conv_surface;
> +
> +	if (conv_op->weight_format == WEIGHT_FORMAT_COMPRESSED) {
> +		ASSERT_GOTO((weight_compress_support), ret, -EINVAL, exit);
> +		ASSERT_GOTO((conv_surface->wmb_data.address != -1),
> +			ret, -EINVAL, exit);
> +		dla_get_dma_cube_address(engine->driver_context,
> +								 engine->task->task_data,
> +								 conv_surface->wmb_data.address,
> +								 conv_surface->wmb_data.offset,
> +								 (void *)&wmb_address,
> +								 DESTINATION_DMA);
> +
> +		ASSERT_GOTO((conv_surface->wgs_data.address != -1),
> +			ret, -EINVAL, exit);
> +		dla_get_dma_cube_address(engine->driver_context,
> +								 engine->task->task_data,
> +								 conv_surface->wgs_data.address,
> +								 conv_surface->wgs_data.offset,
> +								 (void *)&wgs_address,
> +								 DESTINATION_DMA);
> +	}
> +
> +	if (conv_surface->weight_data.address != -1) {
> +		dla_get_dma_cube_address(engine->driver_context,
> +								 engine->task->task_data,
> +								 conv_surface->weight_data.address,
> +								 conv_surface->weight_data.offset,
> +								 (void *)&weight_address,
> +								 DESTINATION_DMA);
> +	}
> +
> +	if (conv_surface->dst_data.address != -1) {
> +		dla_get_dma_cube_address(engine->driver_context,
> +								 engine->task->task_data,
> +								 conv_surface->dst_data.address,
> +								 conv_surface->dst_data.offset,
> +								 (void *)&output_address,
> +								 DESTINATION_DMA);
> +	}
> +
> +	ret = dla_read_input_address(engine, &conv_surface->src_data, &input_address,
> +								 group->op_desc->index,
> +								 group->roi_index,
> +								 map_img_fmt[conv_op->data_format][1]);
> +	if (ret)
> +		goto exit;
> +
> +	ASSERT_GOTO((conv_op->out_cvt.scale  == 1), ret, -EINVAL, exit);
> +	ASSERT_GOTO((conv_op->out_cvt.offset == 0), ret, -EINVAL, exit);
> +
> +	/* check if the register group is idle */
> +	reg = cacc_reg_read(engine, S_STATUS);
> +	mask = group->id ? MASK(CACC_S_STATUS_0, STATUS_1) :
> +		MASK(CACC_S_STATUS_0, STATUS_0);
> +	shift = group->id ? SHIFT(CACC_S_STATUS_0, STATUS_1) :
> +		SHIFT(CACC_S_STATUS_0, STATUS_0);
> +	reg = (reg & mask) >> shift;
> +	ASSERT_GOTO((reg == FIELD_ENUM(CACC_S_STATUS_0, STATUS_0, IDLE)),
> +				ret, -EINVAL, exit);
> +
> +	reg = cmac_a_reg_read(engine, S_STATUS);
> +	mask = group->id ? MASK(CMAC_A_S_STATUS_0, STATUS_1) :
> +		MASK(CMAC_A_S_STATUS_0, STATUS_0);
> +	shift = group->id ? SHIFT(CMAC_A_S_STATUS_0, STATUS_1) :
> +		SHIFT(CMAC_A_S_STATUS_0, STATUS_0);
> +	reg = (reg & mask) >> shift;
> +	ASSERT_GOTO((reg == FIELD_ENUM(CMAC_A_S_STATUS_0, STATUS_0, IDLE)),
> +				ret, -EINVAL, exit);
> +
> +	reg = cmac_b_reg_read(engine, S_STATUS);
> +	mask = group->id ? MASK(CMAC_B_S_STATUS_0, STATUS_1) :
> +		MASK(CMAC_B_S_STATUS_0, STATUS_0);
> +	shift = group->id ? SHIFT(CMAC_B_S_STATUS_0, STATUS_1) :
> +		SHIFT(CMAC_B_S_STATUS_0, STATUS_0);
> +	reg = (reg & mask) >> shift;
> +	ASSERT_GOTO((reg == FIELD_ENUM(CMAC_B_S_STATUS_0, STATUS_0, IDLE)),
> +				ret, -EINVAL, exit);
> +
> +	reg = csc_reg_read(engine, S_STATUS);
> +	mask = group->id ? MASK(CSC_S_STATUS_0, STATUS_1) :
> +		MASK(CSC_S_STATUS_0, STATUS_0);
> +	shift = group->id ? SHIFT(CSC_S_STATUS_0, STATUS_1) :
> +		SHIFT(CSC_S_STATUS_0, STATUS_0);
> +	reg = (reg & mask) >> shift;
> +	ASSERT_GOTO((reg == FIELD_ENUM(CSC_S_STATUS_0, STATUS_0, IDLE)),
> +				ret, -EINVAL, exit);
> +
> +	reg = cdma_reg_read(engine, S_STATUS);
> +	mask = group->id ? MASK(CDMA_S_STATUS_0, STATUS_1) :
> +		MASK(CDMA_S_STATUS_0, STATUS_0);
> +	shift = group->id ? SHIFT(CDMA_S_STATUS_0, STATUS_1) :
> +		SHIFT(CDMA_S_STATUS_0, STATUS_0);
> +	reg = (reg & mask) >> shift;
> +	ASSERT_GOTO((reg == FIELD_ENUM(CDMA_S_STATUS_0, STATUS_0, IDLE)),
> +		ret, -EINVAL, exit);
> +
> +	/* reverse config each sub-module in CC */
> +
> +	/* CACC */
> +	reg = (map_conv[conv_op->conv_mode]
> +		<< SHIFT(CACC_D_MISC_CFG_0, CONV_MODE)) |
> +		(map_precision[conv_op->out_precision]
> +		<< SHIFT(CACC_D_MISC_CFG_0, PROC_PRECISION));
> +	cacc_reg_write(engine, D_MISC_CFG, reg);
> +
> +	reg = ((conv_surface->dst_data.width - 1)
> +		<< SHIFT(CACC_D_DATAOUT_SIZE_0_0, DATAOUT_WIDTH)) |
> +		((conv_surface->dst_data.height - 1)
> +		<< SHIFT(CACC_D_DATAOUT_SIZE_0_0, DATAOUT_HEIGHT));
> +	cacc_reg_write(engine, D_DATAOUT_SIZE_0, reg);
> +
> +	reg = ((conv_surface->dst_data.channel - 1)
> +		<< SHIFT(CACC_D_DATAOUT_SIZE_1_0, DATAOUT_CHANNEL));
> +	cacc_reg_write(engine, D_DATAOUT_SIZE_1, reg);
> +
> +	low = lower_32_bits(output_address);
> +	cacc_reg_write(engine, D_DATAOUT_ADDR, low);
> +	cacc_reg_write(engine, D_BATCH_NUMBER, conv_op->batch - 1);
> +	cacc_reg_write(engine, D_LINE_STRIDE, conv_surface->dst_data.line_stride);
> +	cacc_reg_write(engine, D_SURF_STRIDE, conv_surface->dst_data.surf_stride);
> +
> +	if (conv_surface->dst_data.width == 1 &&
> +				conv_surface->dst_data.height == 1) {
> +		ASSERT_GOTO((((uint32_t)conv_surface->dst_data.line_stride ==
> +			(uint32_t)(conv_surface->dst_data.width * atom_size))),
> +			ret, -EINVAL, exit);
> +		reg = (CACC_D_DATAOUT_MAP_0_LINE_PACKED_TRUE <<
> +				SHIFT(CACC_D_DATAOUT_MAP_0, LINE_PACKED));
> +		reg |= (CACC_D_DATAOUT_MAP_0_SURF_PACKED_TRUE <<
> +				SHIFT(CACC_D_DATAOUT_MAP_0, SURF_PACKED));
> +	} else {
> +		reg = (FIELD_ENUM(CACC_D_DATAOUT_MAP_0, LINE_PACKED, FALSE) <<
> +				SHIFT(CACC_D_DATAOUT_MAP_0, LINE_PACKED));
> +		reg |= (FIELD_ENUM(CACC_D_DATAOUT_MAP_0, SURF_PACKED, FALSE) <<
> +				SHIFT(CACC_D_DATAOUT_MAP_0, SURF_PACKED));
> +	}
> +	cacc_reg_write(engine, D_DATAOUT_MAP, reg);
> +
> +	cacc_reg_write(engine, D_CLIP_CFG, conv_op->out_cvt.truncate);
> +
> +	/* CMAC */
> +	reg = (map_conv[conv_op->conv_mode]
> +		<< SHIFT(CMAC_A_D_MISC_CFG_0, CONV_MODE)) |
> +		(map_precision[conv_op->out_precision]
> +		<< SHIFT(CMAC_A_D_MISC_CFG_0, PROC_PRECISION));
> +	cmac_a_reg_write(engine, D_MISC_CFG, reg);
> +	cmac_b_reg_write(engine, D_MISC_CFG, reg);
> +
> +	/* CSC */
> +	reg = (map_conv[conv_op->conv_mode]
> +		<< SHIFT(CSC_D_MISC_CFG_0, CONV_MODE)) |
> +		(map_precision[conv_op->out_precision]
> +		<< SHIFT(CSC_D_MISC_CFG_0, IN_PRECISION)) |
> +		(map_precision[conv_op->out_precision]
> +		<< SHIFT(CSC_D_MISC_CFG_0, PROC_PRECISION)) |
> +		(conv_op->data_reuse
> +		<< SHIFT(CSC_D_MISC_CFG_0, DATA_REUSE)) |
> +		(conv_op->weight_reuse
> +		<< SHIFT(CSC_D_MISC_CFG_0, WEIGHT_REUSE)) |
> +		(conv_op->skip_data_rls
> +		<< SHIFT(CSC_D_MISC_CFG_0, SKIP_DATA_RLS)) |
> +		(conv_op->skip_weight_rls
> +		<< SHIFT(CSC_D_MISC_CFG_0, SKIP_WEIGHT_RLS));
> +	csc_reg_write(engine, D_MISC_CFG, reg);
> +
> +	reg = (get_in_format(conv_op->data_format) <<
> +		SHIFT(CSC_D_DATAIN_FORMAT_0, DATAIN_FORMAT));
> +	csc_reg_write(engine, D_DATAIN_FORMAT, reg);
> +
> +	reg = ((conv_op->input_width_csc - 1)
> +		<< SHIFT(CSC_D_DATAIN_SIZE_EXT_0_0, DATAIN_WIDTH_EXT)) |
> +		((conv_op->input_height_csc - 1)
> +		<< SHIFT(CSC_D_DATAIN_SIZE_EXT_0_0, DATAIN_HEIGHT_EXT));
> +	csc_reg_write(engine, D_DATAIN_SIZE_EXT_0, reg);
> +
> +	reg = ((conv_op->input_channel_csc - 1)
> +		<< SHIFT(CSC_D_DATAIN_SIZE_EXT_1_0, DATAIN_CHANNEL_EXT));
> +	csc_reg_write(engine, D_DATAIN_SIZE_EXT_1, reg);
> +
> +	reg = ((conv_op->batch - 1)
> +		<< SHIFT(CSC_D_BATCH_NUMBER_0, BATCHES));
> +	csc_reg_write(engine, D_BATCH_NUMBER, reg);
> +	reg = ((conv_op->post_extension)
> +		<< SHIFT(CSC_D_POST_Y_EXTENSION_0, Y_EXTENSION));
> +	csc_reg_write(engine, D_POST_Y_EXTENSION, reg);
> +
> +	reg = ((conv_op->entry_per_slice - 1)
> +		<< SHIFT(CSC_D_ENTRY_PER_SLICE_0, ENTRIES));
> +	csc_reg_write(engine, D_ENTRY_PER_SLICE, reg);
> +
> +	reg = (map_weight_fmt[conv_op->weight_format]
> +		<< SHIFT(CSC_D_WEIGHT_FORMAT_0, WEIGHT_FORMAT));
> +	csc_reg_write(engine, D_WEIGHT_FORMAT, reg);
> +
> +	reg = ((conv_op->kernel_width_csc - 1)
> +		<< SHIFT(CSC_D_WEIGHT_SIZE_EXT_0_0, WEIGHT_WIDTH_EXT)) |
> +		((conv_op->kernel_height_csc - 1)
> +		<< SHIFT(CSC_D_WEIGHT_SIZE_EXT_0_0, WEIGHT_HEIGHT_EXT));
> +	csc_reg_write(engine, D_WEIGHT_SIZE_EXT_0, reg);
> +
> +	reg = ((conv_op->kernel_channel_csc - 1)
> +		<< SHIFT(CSC_D_WEIGHT_SIZE_EXT_1_0, WEIGHT_CHANNEL_EXT)) |
> +		((conv_surface->dst_data.channel - 1)
> +		<< SHIFT(CSC_D_WEIGHT_SIZE_EXT_1_0, WEIGHT_KERNEL));
> +	csc_reg_write(engine, D_WEIGHT_SIZE_EXT_1, reg);
> +
> +	csc_reg_write(engine, D_WEIGHT_BYTES, conv_surface->weight_data.size);
> +	csc_reg_write(engine, D_WMB_BYTES, conv_surface->wmb_data.size);
> +
> +	reg = ((conv_op->input_width_cmac - 1)
> +		<< SHIFT(CSC_D_DATAOUT_SIZE_0_0, DATAOUT_WIDTH)) |
> +		((conv_op->input_height_cmac - 1)
> +		<< SHIFT(CSC_D_DATAOUT_SIZE_0_0, DATAOUT_HEIGHT));
> +	csc_reg_write(engine, D_DATAOUT_SIZE_0, reg);
> +
> +	reg = ((conv_surface->dst_data.channel - 1)
> +		<< SHIFT(CSC_D_DATAOUT_SIZE_1_0, DATAOUT_CHANNEL));
> +	csc_reg_write(engine, D_DATAOUT_SIZE_1, reg);
> +
> +	reg = ((conv_surface->dst_data.width *
> +				conv_surface->dst_data.height - 1)
> +		<< SHIFT(CSC_D_ATOMICS_0, ATOMICS));
> +	csc_reg_write(engine, D_ATOMICS, reg);
> +	reg = ((conv_op->release - 1)
> +		<< SHIFT(CSC_D_RELEASE_0, RLS_SLICES));
> +	csc_reg_write(engine, D_RELEASE, reg);
> +
> +	if (conv_op->conv_mode == CONV_MODE_DIRECT) {
> +		stride_x = conv_op->conv_stride_x - 1;
> +		stride_y = conv_op->conv_stride_y - 1;
> +		pad_x = conv_op->pad_x_left;
> +		pad_y = conv_op->pad_y_top;
> +	} else {
> +		stride_x = 0;
> +		stride_y = 0;
> +		pad_x = 0;
> +		pad_y = 0;
> +	}
> +
> +	reg = (stride_x
> +		<< SHIFT(CSC_D_CONV_STRIDE_EXT_0, CONV_X_STRIDE_EXT)) |
> +		(stride_y
> +		<< SHIFT(CSC_D_CONV_STRIDE_EXT_0, CONV_Y_STRIDE_EXT));
> +	csc_reg_write(engine, D_CONV_STRIDE_EXT, reg);
> +
> +	reg = ((conv_op->dilation_x - 1)
> +		<< SHIFT(CSC_D_DILATION_EXT_0, X_DILATION_EXT)) |
> +		((conv_op->dilation_y - 1)
> +		<< SHIFT(CSC_D_DILATION_EXT_0, Y_DILATION_EXT));
> +	csc_reg_write(engine, D_DILATION_EXT, reg);
> +
> +	reg = (pad_x
> +		<< SHIFT(CSC_D_ZERO_PADDING_0, PAD_LEFT)) |
> +		(pad_y
> +		<< SHIFT(CSC_D_ZERO_PADDING_0, PAD_TOP));
> +	csc_reg_write(engine, D_ZERO_PADDING, reg);
> +
> +	reg = (conv_op->pad_val
> +		<< SHIFT(CSC_D_ZERO_PADDING_VALUE_0, PAD_VALUE)) &
> +		MASK(CSC_D_ZERO_PADDING_VALUE_0, PAD_VALUE);
> +	csc_reg_write(engine, D_ZERO_PADDING_VALUE, reg);
> +
> +	reg = ((conv_op->data_bank - 1)
> +		<< SHIFT(CSC_D_BANK_0, DATA_BANK)) |
> +		((conv_op->weight_bank - 1)
> +		<< SHIFT(CSC_D_BANK_0, WEIGHT_BANK));
> +	csc_reg_write(engine, D_BANK, reg);
> +	csc_reg_write(engine, D_PRA_CFG, conv_op->pra_truncate);
> +
> +	/* CBUF */
> +	/* there's no CBUF register */
> +
> +	/* CDMA */
> +	reg = (map_conv[conv_op->conv_mode]
> +		<< SHIFT(CDMA_D_MISC_CFG_0, CONV_MODE)) |
> +		(map_precision[conv_op->in_precision]
> +		<< SHIFT(CDMA_D_MISC_CFG_0, IN_PRECISION)) |
> +		(map_precision[conv_op->out_precision]
> +		<< SHIFT(CDMA_D_MISC_CFG_0, PROC_PRECISION)) |
> +		(conv_op->data_reuse
> +		<< SHIFT(CDMA_D_MISC_CFG_0, DATA_REUSE)) |
> +		(conv_op->weight_reuse
> +		<< SHIFT(CDMA_D_MISC_CFG_0, WEIGHT_REUSE)) |
> +		(conv_op->skip_data_rls
> +		<< SHIFT(CDMA_D_MISC_CFG_0, SKIP_DATA_RLS)) |
> +		(conv_op->skip_weight_rls
> +		<< SHIFT(CDMA_D_MISC_CFG_0, SKIP_WEIGHT_RLS));
> +	cdma_reg_write(engine, D_MISC_CFG, reg);
> +
> +	reg = (get_in_format(conv_op->data_format) <<
> +		SHIFT(CDMA_D_DATAIN_FORMAT_0, DATAIN_FORMAT)) |
> +		(map_img_fmt[conv_op->data_format][0]
> +		<< SHIFT(CDMA_D_DATAIN_FORMAT_0, PIXEL_FORMAT)) |
> +		(map_pixel[conv_op->pixel_mapping]
> +		<< SHIFT(CDMA_D_DATAIN_FORMAT_0, PIXEL_MAPPING)) |
> +		(conv_op->pixel_override
> +		<< SHIFT(CDMA_D_DATAIN_FORMAT_0, PIXEL_SIGN_OVERRIDE));
> +	cdma_reg_write(engine, D_DATAIN_FORMAT, reg);
> +
> +	reg = ((conv_surface->src_data.width - 1)
> +		<< SHIFT(CDMA_D_DATAIN_SIZE_0_0, DATAIN_WIDTH)) |
> +		((conv_surface->src_data.height - 1)
> +		<< SHIFT(CDMA_D_DATAIN_SIZE_0_0, DATAIN_HEIGHT));
> +	cdma_reg_write(engine, D_DATAIN_SIZE_0, reg);
> +
> +	reg = ((conv_surface->src_data.channel - 1)
> +		<< SHIFT(CDMA_D_DATAIN_SIZE_1_0, DATAIN_CHANNEL));
> +	cdma_reg_write(engine, D_DATAIN_SIZE_1, reg);
> +
> +	reg = ((conv_op->input_width_csc - 1)
> +		<< SHIFT(CDMA_D_DATAIN_SIZE_EXT_0_0, DATAIN_WIDTH_EXT)) |
> +		((conv_op->input_height_csc - 1)
> +		<< SHIFT(CDMA_D_DATAIN_SIZE_EXT_0_0, DATAIN_HEIGHT_EXT));
> +	cdma_reg_write(engine, D_DATAIN_SIZE_EXT_0, reg);
> +
> +	reg = (map_ram[conv_surface->src_data.type]
> +		<< SHIFT(CDMA_D_DAIN_RAM_TYPE_0, DATAIN_RAM_TYPE));
> +	cdma_reg_write(engine, D_DAIN_RAM_TYPE, reg);
> +
> +	high = upper_32_bits(input_address);
> +	low = lower_32_bits(input_address);
> +	cdma_reg_write(engine, D_DAIN_ADDR_HIGH_0, high);
> +	cdma_reg_write(engine, D_DAIN_ADDR_LOW_0, low);
> +
> +	high = upper_32_bits((input_address + conv_surface->offset_u));
> +	low = lower_32_bits(input_address + conv_surface->offset_u);
> +	cdma_reg_write(engine, D_DAIN_ADDR_HIGH_1, high);
> +	cdma_reg_write(engine, D_DAIN_ADDR_LOW_1, low);
> +
> +	cdma_reg_write(engine, D_LINE_STRIDE, conv_surface->src_data.line_stride);
> +	cdma_reg_write(engine, D_SURF_STRIDE, conv_surface->src_data.surf_stride);
> +	cdma_reg_write(engine, D_LINE_UV_STRIDE, conv_surface->in_line_uv_stride);
> +
> +	reg = ((conv_surface->src_data.line_stride ==
> +			((uint32_t)conv_surface->src_data.width * atom_size))
> +		<< SHIFT(CDMA_D_DAIN_MAP_0, LINE_PACKED));
> +	reg |= ((conv_surface->src_data.surf_stride ==
> +			((uint32_t)(conv_surface->src_data.width *
> +			conv_surface->src_data.height) * atom_size))
> +		<< SHIFT(CDMA_D_DAIN_MAP_0, SURF_PACKED));
> +	cdma_reg_write(engine, D_DAIN_MAP, reg);
> +
> +	reg = ((conv_op->batch - 1)
> +		<< SHIFT(CDMA_D_BATCH_NUMBER_0, BATCHES));
> +	cdma_reg_write(engine, D_BATCH_NUMBER, reg);
> +
> +	cdma_reg_write(engine, D_BATCH_STRIDE, conv_op->batch_stride);
> +
> +	reg = ((conv_op->entry_per_slice - 1)
> +		<< SHIFT(CDMA_D_ENTRY_PER_SLICE_0, ENTRIES));
> +	cdma_reg_write(engine, D_ENTRY_PER_SLICE, reg);
> +
> +	reg = ((conv_op->fetch_grain - 1)
> +		<< SHIFT(CDMA_D_FETCH_GRAIN_0, GRAINS));
> +	cdma_reg_write(engine, D_FETCH_GRAIN, reg);
> +
> +	reg = (map_weight_fmt[conv_op->weight_format]
> +		<< SHIFT(CDMA_D_WEIGHT_FORMAT_0, WEIGHT_FORMAT));
> +	cdma_reg_write(engine, D_WEIGHT_FORMAT, reg);
> +
> +	reg = ((conv_op->bytes_per_kernel - 1)
> +		<< SHIFT(CDMA_D_WEIGHT_SIZE_0_0, BYTE_PER_KERNEL));
> +	cdma_reg_write(engine, D_WEIGHT_SIZE_0, reg);
> +
> +	reg = ((conv_surface->dst_data.channel - 1)
> +		<< SHIFT(CDMA_D_WEIGHT_SIZE_1_0, WEIGHT_KERNEL));
> +	cdma_reg_write(engine, D_WEIGHT_SIZE_1, reg);
> +
> +	reg = (map_ram[conv_surface->weight_data.type]
> +		<< SHIFT(CDMA_D_WEIGHT_RAM_TYPE_0, WEIGHT_RAM_TYPE));
> +	cdma_reg_write(engine, D_WEIGHT_RAM_TYPE, reg);
> +
> +	high = upper_32_bits(weight_address);
> +	low = lower_32_bits(weight_address);
> +	cdma_reg_write(engine, D_WEIGHT_ADDR_HIGH, high);
> +	cdma_reg_write(engine, D_WEIGHT_ADDR_LOW, low);
> +	cdma_reg_write(engine, D_WEIGHT_BYTES, conv_surface->weight_data.size);
> +
> +	if (conv_op->weight_format == WEIGHT_FORMAT_COMPRESSED) {
> +		high = upper_32_bits(wgs_address);
> +		low = lower_32_bits(wgs_address);
> +		cdma_reg_write(engine, D_WGS_ADDR_HIGH, high);
> +		cdma_reg_write(engine, D_WGS_ADDR_LOW, low);
> +
> +		high = upper_32_bits(wmb_address);
> +		low = lower_32_bits(wmb_address);
> +		cdma_reg_write(engine, D_WMB_ADDR_HIGH, high);
> +		cdma_reg_write(engine, D_WMB_ADDR_LOW, low);
> +		cdma_reg_write(engine, D_WMB_BYTES, conv_surface->wmb_data.size);
> +	}
> +
> +	reg = (map_mean[conv_op->mean_format]
> +		<< SHIFT(CDMA_D_MEAN_FORMAT_0, MEAN_FORMAT));
> +	cdma_reg_write(engine, D_MEAN_FORMAT, reg);
> +
> +	if (conv_op->mean_format == MEAN_FORMAT_ENABLE) {
> +		reg = ((conv_op->mean_ry
> +			<< SHIFT(CDMA_D_MEAN_GLOBAL_0_0, MEAN_RY)) &
> +			MASK(CDMA_D_MEAN_GLOBAL_0_0, MEAN_RY)) |
> +			((conv_op->mean_gu
> +			<< SHIFT(CDMA_D_MEAN_GLOBAL_0_0, MEAN_GU)) &
> +			MASK(CDMA_D_MEAN_GLOBAL_0_0, MEAN_GU));
> +		cdma_reg_write(engine, D_MEAN_GLOBAL_0, reg);
> +
> +		reg = ((conv_op->mean_bv
> +			<< SHIFT(CDMA_D_MEAN_GLOBAL_1_0, MEAN_BV))&
> +			MASK(CDMA_D_MEAN_GLOBAL_1_0, MEAN_BV)) |
> +			((conv_op->mean_ax
> +			<< SHIFT(CDMA_D_MEAN_GLOBAL_1_0, MEAN_AX))&
> +			MASK(CDMA_D_MEAN_GLOBAL_1_0, MEAN_AX));
> +		cdma_reg_write(engine, D_MEAN_GLOBAL_1, reg);
> +	}
> +
> +	if (conv_op->in_cvt.enable) {
> +		reg = ((FIELD_ENUM(CDMA_D_CVT_CFG_0, CVT_EN, ENABLE))
> +			<< SHIFT(CDMA_D_CVT_CFG_0, CVT_EN)) |
> +			(conv_op->in_cvt.truncate
> +			<< SHIFT(CDMA_D_CVT_CFG_0, CVT_TRUNCATE));
> +		cdma_reg_write(engine, D_CVT_CFG, reg);
> +		cdma_reg_write(engine, D_CVT_OFFSET, conv_op->in_cvt.offset);
> +		cdma_reg_write(engine, D_CVT_SCALE, conv_op->in_cvt.scale);
> +	} else {
> +		reg = ((FIELD_ENUM(CDMA_D_CVT_CFG_0, CVT_EN, DISABLE))
> +			<< SHIFT(CDMA_D_CVT_CFG_0, CVT_EN));
> +		cdma_reg_write(engine, D_CVT_CFG, reg);
> +	}
> +
> +	reg = ((conv_op->conv_stride_x - 1)
> +		<< SHIFT(CDMA_D_CONV_STRIDE_0, CONV_X_STRIDE)) |
> +		((conv_op->conv_stride_y - 1)
> +		<< SHIFT(CDMA_D_CONV_STRIDE_0, CONV_Y_STRIDE));
> +	cdma_reg_write(engine, D_CONV_STRIDE, reg);
> +
> +	reg = (conv_op->pad_x_left <<
> +		SHIFT(CDMA_D_ZERO_PADDING_0, PAD_LEFT)) |
> +		(conv_op->pad_x_right
> +		<< SHIFT(CDMA_D_ZERO_PADDING_0, PAD_RIGHT)) |
> +		(conv_op->pad_y_top
> +		<< SHIFT(CDMA_D_ZERO_PADDING_0, PAD_TOP)) |
> +		(conv_op->pad_y_bottom
> +		<< SHIFT(CDMA_D_ZERO_PADDING_0, PAD_BOTTOM));
> +	cdma_reg_write(engine, D_ZERO_PADDING,   reg);
> +
> +	reg = conv_op->pad_val <<
> +		SHIFT(CDMA_D_ZERO_PADDING_VALUE_0, PAD_VALUE) &
> +		MASK(CDMA_D_ZERO_PADDING_VALUE_0, PAD_VALUE);
> +	cdma_reg_write(engine, D_ZERO_PADDING_VALUE, reg);
> +	reg = ((conv_op->weight_bank - 1)
> +		<< SHIFT(CDMA_D_BANK_0, WEIGHT_BANK)) |
> +		((conv_op->data_bank - 1)
> +		<< SHIFT(CDMA_D_BANK_0, DATA_BANK));
> +	cdma_reg_write(engine, D_BANK, reg);
> +
> +exit:
> +	return ret;
> +}
> +
> +int
> +dla_conv_is_ready(struct dla_processor *processor,
> +				  struct dla_processor_group *group)
> +{
> +	return 1;
> +}
> +
> +void
> +dla_conv_dump_config(struct dla_processor_group *group)
> +{
> +	struct dla_conv_op_desc *conv_op;
> +	struct dla_conv_surface_desc *conv_surface;
> +
> +	conv_surface = &group->surface_desc->conv_surface;
> +	conv_op = &group->operation_desc->conv_op;
> +}
> +
> +int
> +dla_conv_program(struct dla_engine *engine, struct dla_processor_group *group)
> +{
> +	int32_t ret;
> +
> +	ret = processor_conv_program(engine, group);
> +	if (ret)
> +		goto exit;
> +
> +exit:
> +	return ret;
> +}
> diff --git a/drivers/gpu/drm/nvdla/nvdla_drm.c b/drivers/gpu/drm/nvdla/nvdla_drm.c
> new file mode 100644
> index 000000000000..9217eee1de3b
> --- /dev/null
> +++ b/drivers/gpu/drm/nvdla/nvdla_drm.c
> @@ -0,0 +1,695 @@
> +// SPDX-License-Identifier: BSD-3-Clause OR GPL-2.0
> +/*
> + * Copyright (C) 2017-2018 NVIDIA CORPORATION
> + * Copyright (C) 2022 Cai Huoqing
> + */
> +
> +#include <linux/dma-buf.h>
> +#include <linux/dma-mapping.h>
> +#include <linux/fs.h>
> +#include <linux/interrupt.h>
> +#include <linux/irq.h>
> +#include <linux/irqdomain.h>
> +#include <linux/module.h>
> +#include <linux/of.h>
> +#include <linux/of_device.h>
> +#include <linux/of_irq.h>
> +#include <linux/of_platform.h>
> +#include <linux/platform_device.h>
> +#include <linux/printk.h>
> +#include <linux/slab.h>
> +#include <linux/spinlock.h>
> +#include <linux/time.h>
> +#include <linux/uaccess.h>
> +#include <linux/types.h>
> +
> +#include "nvdla_drm.h"
> +#include "nvdla_ioctl.h"
> +#include "nvdla_engine.h"
> +
> +static struct nvdla_config nvdla_config_os_initial = {
> +	.atom_size = 32,
> +	.bdma_enable = true,
> +	.rubik_enable = true,
> +	.weight_compress_support = true,
> +};
> +
> +static struct nvdla_config nvdla_config_small = {
> +	//.atom_size = 8,
> +	.atom_size = 32,  // nv_large config
> +	.bdma_enable = false,
> +	.rubik_enable = false,
> +	.weight_compress_support = false,
> +};
> +
> +int64_t dla_get_time_us(void)
> +{
> +	return ktime_get_ns() / NSEC_PER_USEC;
> +}
> +
> +void dla_reg_write(void *driver_context, uint32_t addr, uint32_t reg)
> +{
> +	struct nvdla_device *nvdla_dev =
> +			(struct nvdla_device *)driver_context;
> +
> +	if (!nvdla_dev)
> +		return;
> +
> +	writel(reg, nvdla_dev->base + addr);
> +}
> +
> +uint32_t dla_reg_read(void *driver_context, uint32_t addr)
> +{
> +	struct nvdla_device *nvdla_dev =
> +			(struct nvdla_device *)driver_context;
> +
> +	if (!nvdla_dev)
> +		return 0;
> +
> +	return readl(nvdla_dev->base + addr);
> +}
> +
> +static irqreturn_t nvdla_engine_isr(int32_t irq, void *data)
> +{
> +	unsigned long flags;
> +	uint32_t mask;
> +	uint32_t reg;
> +	struct dla_processor *processor = NULL;
> +	struct dla_processor_group *group;
> +	struct dla_engine *engine;
> +	struct nvdla_device *nvdla_dev = (struct nvdla_device *)data;
> +
> +	if (!nvdla_dev)
> +		return IRQ_NONE;
> +
> +	engine = nvdla_dev->engine_context;
> +	spin_lock_irqsave(&nvdla_dev->nvdla_lock, flags);
> +
> +	mask = glb_reg_read(engine, S_INTR_MASK);
> +	reg = glb_reg_read(engine, S_INTR_STATUS);
> +
> +	if (reg & MASK(GLB_S_INTR_STATUS_0, CACC_DONE_STATUS0)) {
> +		processor = &engine->processors[DLA_OP_CONV];
> +		group = &processor->groups[0];
> +		group->events |= (1 << DLA_EVENT_OP_COMPLETED);
> +	}
> +	if (reg & MASK(GLB_S_INTR_STATUS_0, CACC_DONE_STATUS1)) {
> +		processor = &engine->processors[DLA_OP_CONV];
> +		group = &processor->groups[1];
> +		group->events |= (1 << DLA_EVENT_OP_COMPLETED);
> +	}
> +	if (reg & MASK(GLB_S_INTR_STATUS_0, SDP_DONE_STATUS0)) {
> +		processor = &engine->processors[DLA_OP_SDP];
> +		group = &processor->groups[0];
> +		group->events |= (1 << DLA_EVENT_OP_COMPLETED);
> +	}
> +	if (reg & MASK(GLB_S_INTR_STATUS_0, SDP_DONE_STATUS1)) {
> +		processor = &engine->processors[DLA_OP_SDP];
> +		group = &processor->groups[1];
> +		group->events |= (1 << DLA_EVENT_OP_COMPLETED);
> +	}
> +	if (reg & MASK(GLB_S_INTR_STATUS_0, CDP_DONE_STATUS0)) {
> +		processor = &engine->processors[DLA_OP_CDP];
> +		group = &processor->groups[0];
> +		group->events |= (1 << DLA_EVENT_OP_COMPLETED);
> +	}
> +	if (reg & MASK(GLB_S_INTR_STATUS_0, CDP_DONE_STATUS1)) {
> +		processor = &engine->processors[DLA_OP_CDP];
> +		group = &processor->groups[1];
> +		group->events |= (1 << DLA_EVENT_OP_COMPLETED);
> +	}
> +	if (reg & MASK(GLB_S_INTR_STATUS_0, RUBIK_DONE_STATUS0)) {
> +		processor = &engine->processors[DLA_OP_RUBIK];
> +		group = &processor->groups[0];
> +		group->events |= (1 << DLA_EVENT_OP_COMPLETED);
> +	}
> +	if (reg & MASK(GLB_S_INTR_STATUS_0, RUBIK_DONE_STATUS1)) {
> +		processor = &engine->processors[DLA_OP_RUBIK];
> +		group = &processor->groups[1];
> +		group->events |= (1 << DLA_EVENT_OP_COMPLETED);
> +	}
> +	if (reg & MASK(GLB_S_INTR_STATUS_0, PDP_DONE_STATUS0)) {
> +		processor = &engine->processors[DLA_OP_PDP];
> +		group = &processor->groups[0];
> +		group->events |= (1 << DLA_EVENT_OP_COMPLETED);
> +	}
> +	if (reg & MASK(GLB_S_INTR_STATUS_0, PDP_DONE_STATUS1)) {
> +		processor = &engine->processors[DLA_OP_PDP];
> +		group = &processor->groups[1];
> +		group->events |= (1 << DLA_EVENT_OP_COMPLETED);
> +	}
> +	if (reg & MASK(GLB_S_INTR_STATUS_0, BDMA_DONE_STATUS0)) {
> +		processor = &engine->processors[DLA_OP_BDMA];
> +		group = &processor->groups[0];
> +		group->events |= (1 << DLA_EVENT_OP_COMPLETED);
> +	}
> +	if (reg & MASK(GLB_S_INTR_STATUS_0, BDMA_DONE_STATUS1)) {
> +		processor = &engine->processors[DLA_OP_BDMA];
> +		group = &processor->groups[1];
> +		group->events |= (1 << DLA_EVENT_OP_COMPLETED);
> +	}
> +	if (reg & MASK(GLB_S_INTR_STATUS_0, CDMA_DAT_DONE_STATUS0)) {
> +		processor = &engine->processors[DLA_OP_CONV];
> +		group = &processor->groups[0];
> +		group->events |= (1 << DLA_EVENT_CDMA_DT_DONE);
> +	}
> +	if (reg & MASK(GLB_S_INTR_STATUS_0, CDMA_DAT_DONE_STATUS1)) {
> +		processor = &engine->processors[DLA_OP_CONV];
> +		group = &processor->groups[1];
> +		group->events |= (1 << DLA_EVENT_CDMA_DT_DONE);
> +	}
> +	if (reg & MASK(GLB_S_INTR_STATUS_0, CDMA_WT_DONE_STATUS0)) {
> +		processor = &engine->processors[DLA_OP_CONV];
> +		group = &processor->groups[0];
> +		group->events |= (1 << DLA_EVENT_CDMA_WT_DONE);
> +	}
> +	if (reg & MASK(GLB_S_INTR_STATUS_0, CDMA_WT_DONE_STATUS1)) {
> +		processor = &engine->processors[DLA_OP_CONV];
> +		group = &processor->groups[1];
> +		group->events |= (1 << DLA_EVENT_CDMA_WT_DONE);
> +	}
> +
> +	glb_reg_write(engine, S_INTR_STATUS, reg);
> +	mask = glb_reg_read(engine, S_INTR_MASK);
> +	reg = glb_reg_read(engine, S_INTR_STATUS);
> +
> +	complete(&nvdla_dev->event_notifier);
> +	spin_unlock_irqrestore(&nvdla_dev->nvdla_lock, flags);
> +
> +	return IRQ_HANDLED;
> +}
> +
> +static int32_t dla_read_dma_address(void *driver_context, void *task_data,
> +						int16_t index, void *dst)
> +{
> +	int32_t ret = 0;
> +	struct nvdla_mem_handle *handles;
> +	dma_addr_t *phys_addr = (dma_addr_t *)(dst);
> +	struct nvdla_device *nvdla_dev =
> +			(struct nvdla_device *)driver_context;
> +	struct nvdla_task *task = (struct nvdla_task *)task_data;
> +
> +	if (index == -1 || index > task->num_addresses)
> +		return -EINVAL;
> +
> +	handles = (struct nvdla_mem_handle *)task->address_list;
> +	ret = nvdla_gem_dma_addr(nvdla_dev->drm, task->file,
> +					handles[index].handle,
> +					phys_addr);
> +
> +	/* Add offset to IOVA address */
> +	*phys_addr = *phys_addr + handles[index].offset;
> +
> +	return ret;
> +}
> +
> +static int32_t dla_read_cpu_address(void *driver_context, void *task_data,
> +						int16_t index, void *dst)
> +{
> +	uint64_t *temp = (uint64_t *)dst;
> +	struct nvdla_task *task = (struct nvdla_task *)task_data;
> +
> +	if (index == -1 || index > task->num_addresses)
> +		return -EINVAL;
> +
> +	*temp = (uint64_t)index;
> +	return 0;
> +}
> +
> +int32_t dla_get_dma_address(void *driver_context, void *task_data,
> +					int16_t index, void *dst_ptr,
> +					uint32_t destination)
> +{
> +	int32_t ret = 0;
> +
> +	if (destination == DESTINATION_PROCESSOR) {
> +		ret = dla_read_cpu_address(driver_context, task_data,
> +						index, dst_ptr);
> +	} else if (destination == DESTINATION_DMA) {
> +		ret = dla_read_dma_address(driver_context, task_data,
> +						index, dst_ptr);
> +	} else {
> +		ret = -EINVAL;
> +	}
> +
> +	return ret;
> +}
> +
> +int32_t dla_data_write(void *driver_context, void *task_data,
> +				void *src, uint64_t dst,
> +				uint32_t size, uint64_t offset)
> +{
> +	int32_t ret;
> +	void *ptr = NULL;
> +	struct dma_buf *buf;
> +	struct iosys_map map;
> +	struct nvdla_mem_handle *handles;
> +	struct nvdla_task *task = (struct nvdla_task *)task_data;
> +
> +	handles = task->address_list;
> +	buf = dma_buf_get(handles[dst].handle);
> +	if (IS_ERR(buf)) {
> +		pr_err("%s: Failed get dma_buf for handle=%d\n", __func__,
> +						handles[dst].handle);
> +		return -EFAULT;
> +	}
> +
> +	ret = dma_buf_begin_cpu_access(buf, DMA_BIDIRECTIONAL);
> +	if (ret)
> +		goto put_dma_buf;
> +
> +	ret = dma_buf_vmap(buf, &map);
> +	ptr = ret ? NULL : map.vaddr;
> +	if (!ptr) {
> +		pr_err("%s: Failed to vmap dma_buf for handle=%d\n", __func__,
> +						handles[dst].handle);
> +		ret = -ENOMEM;
> +		goto end_cpu_access;
> +	}
> +
> +
> +	memcpy((void *)((uint8_t *)ptr + offset), src, size);
> +
> +	dma_buf_vunmap(buf, ptr);
> +
> +end_cpu_access:
> +	dma_buf_end_cpu_access(buf, DMA_BIDIRECTIONAL);
> +
> +put_dma_buf:
> +	dma_buf_put(buf);
> +
> +	return ret;
> +}
> +
> +int32_t dla_data_read(void *driver_context, void *task_data,
> +				uint64_t src, void *dst,
> +				uint32_t size, uint64_t offset)
> +{
> +	int32_t ret;
> +	void *ptr = NULL;
> +	struct dma_buf *buf;
> +	struct iosys_map map;
> +	struct nvdla_mem_handle *handles;
> +	struct nvdla_task *task = (struct nvdla_task *)task_data;
> +
> +	handles = task->address_list;
> +
> +	buf = dma_buf_get(handles[src].handle);
> +	if (IS_ERR(buf)) {
> +		pr_err("%s: Failed get dma_buf for handle=%d\n", __func__,
> +						handles[src].handle);
> +		return -EFAULT;
> +	}
> +
> +	ret = dma_buf_begin_cpu_access(buf, DMA_BIDIRECTIONAL);
> +	if (ret)
> +		goto put_dma_buf;
> +
> +	ret = dma_buf_vmap(buf, &map);
> +	ptr = ret ? NULL : map.vaddr;
> +	if (!ptr) {
> +		pr_err("%s: Failed to vmap dma_buf for handle=%d\n", __func__,
> +						handles[src].handle);
> +		ret = -ENOMEM;
> +		goto end_cpu_access;
> +	}
> +
> +	memcpy(dst, (void *)(((uint8_t *)ptr) + offset), size);
> +
> +	dma_buf_vunmap(buf, ptr);
> +
> +end_cpu_access:
> +	dma_buf_end_cpu_access(buf, DMA_BIDIRECTIONAL);
> +
> +put_dma_buf:
> +	dma_buf_put(buf);
> +
> +	return ret;
> +}
> +
> +int32_t nvdla_task_submit(struct nvdla_device *nvdla_dev, struct nvdla_task *task)
> +{
> +	int32_t err = 0;
> +	uint32_t task_complete = 0;
> +
> +	//trace_printk("__nvdla_task_submit_entry\n");
> +	nvdla_dev->task = task;
> +
> +	err = dla_execute_task(nvdla_dev->engine_context, (void *)task, nvdla_dev->config_data);
> +	if (err) {
> +		pr_err("Task execution failed\n");
> +		return err;
> +	}
> +
> +	pr_debug("Wait for task complete\n");
> +
> +	while (1) {
> +		unsigned long flags;
> +
> +		wait_for_completion(&nvdla_dev->event_notifier);
> +
> +		spin_lock_irqsave(&nvdla_dev->nvdla_lock, flags);
> +
> +		err = dla_process_events(nvdla_dev->engine_context, &task_complete);
> +
> +		spin_unlock_irqrestore(&nvdla_dev->nvdla_lock, flags);
> +
> +		if (err || task_complete)
> +			break;
> +	}
> +
> +	pr_debug("Task complete\n");
> +	dla_clear_task(nvdla_dev->engine_context);
> +	//trace_printk("__nvdla_task_submit_exit\n");
> +
> +	return err;
> +}
> +
> +static union dla_operation_container operation_desc[DLA_OP_NUM][DLA_NUM_GROUPS];
> +static union dla_surface_container surface_desc[DLA_OP_NUM][DLA_NUM_GROUPS];
> +
> +static struct dla_task global_task;
> +
> +static struct dla_engine engine = {
> +	.processors[DLA_OP_BDMA] = {
> +		.name = "BDMA",
> +		.op_type = DLA_OP_BDMA,
> +		.program = dla_bdma_program,
> +		.enable = dla_bdma_enable,
> +		.set_producer = dla_bdma_set_producer,
> +		.is_ready = dla_bdma_is_ready,
> +		.dump_config = dla_bdma_dump_config,
> +		.rdma_check = dla_bdma_rdma_check,
> +		.consumer_ptr = 0,
> +		.roi_index = 0,
> +		.group_status = 0,
> +		.rdma_status = 0,
> +		.last_group = 1,
> +		.groups[0] = {
> +			.id = 0,
> +			.rdma_id = 0,
> +			.active = 0,
> +			.events = 0,
> +			.roi_index = 0,
> +			.is_rdma_needed = 0,
> +			.lut_index = -1,
> +			.operation_desc = &operation_desc[DLA_OP_BDMA][0],
> +			.surface_desc = &surface_desc[DLA_OP_BDMA][0],
> +		},
> +		.groups[1] = {
> +			.id = 1,
> +			.rdma_id = 0,
> +			.active = 0,
> +			.events = 0,
> +			.roi_index = 0,
> +			.is_rdma_needed = 0,
> +			.lut_index = -1,
> +			.operation_desc = &operation_desc[DLA_OP_BDMA][1],
> +			.surface_desc = &surface_desc[DLA_OP_BDMA][1],
> +		},
> +	},
> +	.processors[DLA_OP_CONV] = {
> +		.name = "Convolution",
> +		.op_type = DLA_OP_CONV,
> +		.program = dla_conv_program,
> +		.enable = dla_conv_enable,
> +		.set_producer = dla_conv_set_producer,
> +		.is_ready = dla_conv_is_ready,
> +		.dump_config = dla_conv_dump_config,
> +		.rdma_check = dla_conv_rdma_check,
> +		.consumer_ptr = 0,
> +		.roi_index = 0,
> +		.group_status = 0,
> +		.rdma_status = 0,
> +		.last_group = 1,
> +		.groups[0] = {
> +			.id = 0,
> +			.rdma_id = 0,
> +			.active = 0,
> +			.events = 0,
> +			.roi_index = 0,
> +			.is_rdma_needed = 0,
> +			.lut_index = -1,
> +			.operation_desc = &operation_desc[DLA_OP_CONV][0],
> +			.surface_desc = &surface_desc[DLA_OP_CONV][0],
> +		},
> +		.groups[1] = {
> +			.id = 1,
> +			.rdma_id = 0,
> +			.active = 0,
> +			.events = 0,
> +			.roi_index = 0,
> +			.is_rdma_needed = 0,
> +			.lut_index = -1,
> +			.operation_desc = &operation_desc[DLA_OP_CONV][1],
> +			.surface_desc = &surface_desc[DLA_OP_CONV][1],
> +		},
> +	},
> +	.processors[DLA_OP_SDP] = {
> +		.name = "SDP",
> +		.op_type = DLA_OP_SDP,
> +		.program = dla_sdp_program,
> +		.enable = dla_sdp_enable,
> +		.set_producer = dla_sdp_set_producer,
> +		.is_ready = dla_sdp_is_ready,
> +		.dump_config = dla_sdp_dump_config,
> +		.rdma_check = dla_sdp_rdma_check,
> +		.consumer_ptr = 0,
> +		.roi_index = 0,
> +		.group_status = 0,
> +		.rdma_status = 0,
> +		.last_group = 1,
> +		.groups[0] = {
> +			.id = 0,
> +			.rdma_id = 0,
> +			.active = 0,
> +			.events = 0,
> +			.roi_index = 0,
> +			.is_rdma_needed = 0,
> +			.lut_index = -1,
> +			.operation_desc = &operation_desc[DLA_OP_SDP][0],
> +			.surface_desc = &surface_desc[DLA_OP_SDP][0],
> +		},
> +		.groups[1] = {
> +			.id = 1,
> +			.rdma_id = 0,
> +			.active = 0,
> +			.events = 0,
> +			.roi_index = 0,
> +			.is_rdma_needed = 0,
> +			.lut_index = -1,
> +			.operation_desc = &operation_desc[DLA_OP_SDP][1],
> +			.surface_desc = &surface_desc[DLA_OP_SDP][1],
> +		},
> +	},
> +	.processors[DLA_OP_PDP] = {
> +		.name = "PDP",
> +		.op_type = DLA_OP_PDP,
> +		.program = dla_pdp_program,
> +		.enable = dla_pdp_enable,
> +		.set_producer = dla_pdp_set_producer,
> +		.is_ready = dla_pdp_is_ready,
> +		.dump_config = dla_pdp_dump_config,
> +		.rdma_check = dla_pdp_rdma_check,
> +		.consumer_ptr = 0,
> +		.roi_index = 0,
> +		.group_status = 0,
> +		.rdma_status = 0,
> +		.last_group = 1,
> +		.groups[0] = {
> +			.id = 0,
> +			.rdma_id = 0,
> +			.active = 0,
> +			.events = 0,
> +			.roi_index = 0,
> +			.is_rdma_needed = 0,
> +			.lut_index = -1,
> +			.operation_desc = &operation_desc[DLA_OP_PDP][0],
> +			.surface_desc = &surface_desc[DLA_OP_PDP][0],
> +		},
> +		.groups[1] = {
> +			.id = 1,
> +			.rdma_id = 0,
> +			.active = 0,
> +			.events = 0,
> +			.roi_index = 0,
> +			.is_rdma_needed = 0,
> +			.lut_index = -1,
> +			.operation_desc = &operation_desc[DLA_OP_PDP][1],
> +			.surface_desc = &surface_desc[DLA_OP_PDP][1],
> +		},
> +	},
> +	.processors[DLA_OP_CDP] = {
> +		.name = "CDP",
> +		.op_type = DLA_OP_CDP,
> +		.program = dla_cdp_program,
> +		.enable = dla_cdp_enable,
> +		.set_producer = dla_cdp_set_producer,
> +		.is_ready = dla_cdp_is_ready,
> +		.dump_config = dla_cdp_dump_config,
> +		.rdma_check = dla_cdp_rdma_check,
> +		.consumer_ptr = 0,
> +		.roi_index = 0,
> +		.group_status = 0,
> +		.rdma_status = 0,
> +		.last_group = 1,
> +		.groups[0] = {
> +			.id = 0,
> +			.rdma_id = 0,
> +			.active = 0,
> +			.events = 0,
> +			.roi_index = 0,
> +			.is_rdma_needed = 0,
> +			.lut_index = -1,
> +			.operation_desc = &operation_desc[DLA_OP_CDP][0],
> +			.surface_desc = &surface_desc[DLA_OP_CDP][0],
> +		},
> +		.groups[1] = {
> +			.id = 1,
> +			.rdma_id = 0,
> +			.active = 0,
> +			.events = 0,
> +			.roi_index = 0,
> +			.is_rdma_needed = 0,
> +			.lut_index = -1,
> +			.operation_desc = &operation_desc[DLA_OP_CDP][1],
> +			.surface_desc = &surface_desc[DLA_OP_CDP][1],
> +		},
> +	},
> +
> +	.processors[DLA_OP_RUBIK] = {
> +		.name = "RUBIK",
> +		.op_type = DLA_OP_RUBIK,
> +		.program = dla_rubik_program,
> +		.enable = dla_rubik_enable,
> +		.set_producer = dla_rubik_set_producer,
> +		.is_ready = dla_rubik_is_ready,
> +		.dump_config = dla_rubik_dump_config,
> +		.rdma_check = dla_rubik_rdma_check,
> +		.consumer_ptr = 0,
> +		.roi_index = 0,
> +		.group_status = 0,
> +		.rdma_status = 0,
> +		.last_group = 1,
> +		.groups[0] = {
> +			.id = 0,
> +			.rdma_id = 0,
> +			.active = 0,
> +			.events = 0,
> +			.roi_index = 0,
> +			.is_rdma_needed = 0,
> +			.lut_index = -1,
> +			.operation_desc = &operation_desc[DLA_OP_RUBIK][0],
> +			.surface_desc = &surface_desc[DLA_OP_RUBIK][0],
> +		},
> +		.groups[1] = {
> +			.id = 1,
> +			.rdma_id = 0,
> +			.active = 0,
> +			.events = 0,
> +			.roi_index = 0,
> +			.is_rdma_needed = 0,
> +			.lut_index = -1,
> +			.operation_desc = &operation_desc[DLA_OP_RUBIK][1],
> +			.surface_desc = &surface_desc[DLA_OP_RUBIK][1],
> +		},
> +	},
> +
> +};
> +
> +/* driver probe and init */
> +static const struct of_device_id nvdla_of_match[] = {
> +	{
> +		.compatible = "nvidia,nvdla_os_initial",
> +		.data = &nvdla_config_os_initial,
> +	},
> +	{
> +		.compatible = "nvidia,nvdla_2",
> +		.data = &nvdla_config_small,
> +	},
> +	{ },
> +};
> +
> +static int32_t nvdla_probe(struct platform_device *pdev)
> +{
> +	int32_t err = 0;
> +	struct resource *res;
> +	struct nvdla_device *nvdla_dev;
> +	struct device *dev = &pdev->dev;
> +	const struct of_device_id *match;
> +
> +	if (!pdev->dev.of_node)
> +		return -EINVAL;
> +
> +	match = of_match_device(nvdla_of_match, &pdev->dev);
> +	if (!match) {
> +		pr_err("Missing DT entry!\n");
> +		return -EINVAL;
> +	}
> +
> +	nvdla_dev = devm_kzalloc(dev, sizeof(*nvdla_dev), GFP_KERNEL);
> +	if (!nvdla_dev)
> +		return -ENOMEM;
> +
> +	platform_set_drvdata(pdev, nvdla_dev);
> +	nvdla_dev->pdev = pdev;
> +	nvdla_dev->config_data = (struct nvdla_config *)match->data;
> +
> +	init_completion(&nvdla_dev->event_notifier);
> +
> +	res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
> +	nvdla_dev->base = devm_ioremap_resource(&pdev->dev, res);
> +	if (IS_ERR(nvdla_dev->base))
> +		return PTR_ERR(nvdla_dev->base);
> +
> +	res = platform_get_resource(pdev, IORESOURCE_IRQ, 0);
> +	if (!res) {
> +		dev_err(&pdev->dev, "no irq resource\n");
> +		return -EINVAL;
> +	}
> +	nvdla_dev->irq = res->start;
> +
> +	err = devm_request_irq(&pdev->dev, nvdla_dev->irq,
> +				nvdla_engine_isr, 0,
> +				dev_name(&pdev->dev), nvdla_dev);
> +	if (err)
> +		return err;
> +
> +	nvdla_dev->engine_context = &engine;
> +	engine.task = &global_task;
> +	engine.driver_context = (void *)nvdla_dev;
> +	engine.task->task_data = NULL;
> +
> +	dla_init_op_cache(&engine);
> +	dla_clear_task(nvdla_dev->engine_context);
> +
> +	err = nvdla_drm_probe(nvdla_dev);
> +	if (err)
> +		dev_err(&pdev->dev, "failed to register drm device\n");
> +
> +	return err;
> +}
> +
> +static int32_t __exit nvdla_remove(struct platform_device *pdev)
> +{
> +	struct nvdla_device *nvdla_dev = dev_get_drvdata(&pdev->dev);
> +
> +	nvdla_drm_remove(nvdla_dev);
> +
> +	return 0;
> +}
> +
> +static struct platform_driver nvdla_driver = {
> +	.probe = nvdla_probe,
> +	.remove = __exit_p(nvdla_remove),
> +	.driver = {
> +		.owner = THIS_MODULE,
> +		.name = "NVDLA",
> +		.of_match_table = of_match_ptr(nvdla_of_match),
> +	},
> +};
> +module_platform_driver(nvdla_driver);
> +
> +MODULE_LICENSE("Dual BSD/GPL");
> +MODULE_DESCRIPTION("Nvidia Deep Learning Accelerator driver");
> +MODULE_IMPORT_NS(DMA_BUF);
> diff --git a/drivers/gpu/drm/nvdla/nvdla_drm.h b/drivers/gpu/drm/nvdla/nvdla_drm.h
> new file mode 100644
> index 000000000000..356fc399accb
> --- /dev/null
> +++ b/drivers/gpu/drm/nvdla/nvdla_drm.h
> @@ -0,0 +1,127 @@
> +/* SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause */
> +/*
> + * Copyright (C) 2017-2018 NVIDIA CORPORATION.
> + * Copyright (C) 2022 Cai Huoqing
> + */
> +
> +#ifndef __NVDLA_DRM_H_
> +#define __NVDLA_DRM_H_
> +
> +#include <linux/completion.h>
> +#include <linux/device.h>
> +#include <linux/kref.h>
> +#include <linux/platform_device.h>
> +#include <linux/spinlock.h>
> +#include <linux/errno.h>
> +#include <linux/bits.h>
> +#include <linux/types.h>
> +
> +#include "nvdla_engine.h"
> +
> +#define ASSERT_GOTO(_condition, _ret, _err_value, _goto)	   \
> +do {														   \
> +	if (!(_condition)) {									   \
> +		_ret = _err_value;									   \
> +		pr_err("%s:%d failed %d\n", __func__, __LINE__, _ret); \
> +		goto _goto;											   \
> +	} else {												   \
> +		_ret = 0;											   \
> +	}														   \
> +} while (0)
> +
> +/**
> + * @brief			Task information submitted from user space
> + *
> + * ref				Reference count for task
> + * num_addresses		Number of addresses in address list
> + * nvdla_dev			Pointer to NVDLA device
> + * address_list			Address list
> + * file				DRM file instance
> + */
> +struct nvdla_task {
> +	struct kref ref;
> +	uint32_t num_addresses;
> +	struct nvdla_device *nvdla_dev;
> +	struct nvdla_mem_handle *address_list;
> +	struct drm_file *file;
> +};
> +
> +/**
> + * @brief			Configuration parameters supported by the engine
> + *
> + * atom_size			Memory smallest access size
> + * bdma_enable			Defines whether bdma is supported
> + * rubik_enable			Defines whether rubik is supported
> + * weight_compress_support	Defines whether weight data compression is supported
> + */
> +struct nvdla_config {
> +	uint32_t atom_size;
> +	bool bdma_enable;
> +	bool rubik_enable;
> +	bool weight_compress_support;
> +};
> +
> +/**
> + * @brief			NVDLA device
> + *
> + * irq				Interrupt number associated with this device
> + * ref				Reference count for device
> + * base				IO mapped base address for device
> + * nvdla_lock			Spinlock used for synchronization
> + * drm				DRM device instance
> + * task				Pointer to task in execution
> + * config_data			Pointer to the configuration data
> + * pdev				Pointer to NVDLA platform device
> + * event_notifier		Completion object used to wait for events from HW
> + * engine_context		Private data passed from engine in dla_engine_init
> + */
> +struct nvdla_device {
> +	int32_t irq;
> +	struct kref ref;
> +	void __iomem *base;
> +	spinlock_t nvdla_lock;
> +	struct drm_device *drm;
> +	struct nvdla_task *task;
> +	struct nvdla_config *config_data;
> +	struct platform_device *pdev;
> +	struct completion event_notifier;
> +
> +	struct dla_engine *engine_context;
> +};
> +
> +int32_t nvdla_task_submit(struct nvdla_device *nvdla_dev, struct nvdla_task *task);
> +
> +int32_t nvdla_gem_dma_addr(struct drm_device *dev, struct drm_file *file,
> +					uint32_t fd, dma_addr_t *addr);
> +
> +int32_t nvdla_drm_probe(struct nvdla_device *nvdla_dev);
> +
> +void nvdla_drm_remove(struct nvdla_device *nvdla_dev);
> +
> +int32_t dla_process_events(struct dla_engine *engine_context, uint32_t *task_complete);
> +
> +void dla_clear_task(struct dla_engine *engine_context);
> +
> +int32_t dla_execute_task(struct dla_engine *engine_context, void *task_data, void *config_data);
> +
> +uint32_t dla_reg_read(void *driver_context, uint32_t addr);
> +
> +void dla_reg_write(void *driver_context, uint32_t addr, uint32_t reg);
> +
> +int32_t dla_data_read(void *driver_context, void *task_data,
> +				uint64_t src, void *dst,
> +				uint32_t size, uint64_t offset);
> +
> +int32_t dla_data_write(void *driver_context, void *task_data,
> +				void *src, uint64_t dst,
> +				uint32_t size, uint64_t offset);
> +
> +/* Destination for DMA buffer */
> +#define DESTINATION_PROCESSOR	0
> +#define DESTINATION_DMA		1
> +
> +int32_t dla_get_dma_address(void *driver_context, void *task_data,
> +					int16_t index, void *dst_ptr,
> +					uint32_t destination);
> +
> +#endif
> diff --git a/drivers/gpu/drm/nvdla/nvdla_engine.c b/drivers/gpu/drm/nvdla/nvdla_engine.c
> new file mode 100644
> index 000000000000..26ebd6c362b0
> --- /dev/null
> +++ b/drivers/gpu/drm/nvdla/nvdla_engine.c
> @@ -0,0 +1,233 @@
> +// SPDX-License-Identifier: BSD-3-Clause OR GPL-2.0
> +/*
> + * Copyright (C) 2017-2018 NVIDIA CORPORATION
> + * Copyright (C) 2022 Cai Huoqing
> + */
> +
> +#include "nvdla_common.h"
> +#include "nvdla_drm.h"
> +#include "nvdla_reg.h"
> +#include "nvdla_engine.h"
> +
> +static const uint32_t map_rdma_ptr_addr[] = {
> +	0xFFFFFFFF,
> +	0xFFFFFFFF,
> +	SDP_REG(RDMA_S_POINTER),
> +	PDP_REG(RDMA_S_POINTER),
> +	CDP_REG(RDMA_S_POINTER),
> +	0xFFFFFFFF,
> +};
> +
> +static const uint32_t map_sts_addr[] = {
> +	BDMA_REG(STATUS),
> +	CACC_REG(S_STATUS),
> +	SDP_REG(S_STATUS),
> +	PDP_REG(S_STATUS),
> +	CDP_REG(S_STATUS),
> +	RBK_REG(S_STATUS),
> +};
> +
> +static const uint32_t map_ptr_addr[] = {
> +	BDMA_REG(STATUS),
> +	CACC_REG(S_POINTER),
> +	SDP_REG(S_POINTER),
> +	PDP_REG(S_POINTER),
> +	CDP_REG(S_POINTER),
> +	RBK_REG(S_POINTER),
> +};
> +
> +uint32_t reg_read(struct dla_engine *engine, uint32_t addr)
> +{
> +	return dla_reg_read(engine->driver_context, addr);
> +}
> +
> +void reg_write(struct dla_engine *engine, uint32_t addr, uint32_t reg)
> +{
> +	dla_reg_write(engine->driver_context, addr, reg);
> +}
> +
> +int32_t dla_enable_intr(struct dla_engine *engine, uint32_t mask)
> +{
> +	uint32_t reg = glb_reg_read(engine, S_INTR_MASK);
> +
> +	reg = reg & (~mask);
> +	glb_reg_write(engine, S_INTR_MASK, reg);
> +
> +	return 0;
> +}
> +
> +uint8_t bdma_grp_sts[2] = {
> +	FIELD_ENUM(BDMA_STATUS_0, IDLE, YES),
> +	FIELD_ENUM(BDMA_STATUS_0, IDLE, YES)
> +};
> +
> +struct dla_roi_desc roi_desc;
> +
> +/**
> + * Get DMA data cube address
> + */
> +int32_t
> +dla_get_dma_cube_address(void *driver_context, void *task_data,
> +						 int16_t index, uint32_t offset, void *dst_ptr,
> +						 uint32_t destination)
> +{
> +	int32_t ret = 0;
> +	uint64_t *pdst = (uint64_t *)dst_ptr;
> +       ret = dla_get_dma_address(driver_context, task_data, index,
> +								dst_ptr, destination);
> +	if (ret)
> +		goto exit;
> +
> +	pdst[0] += offset;
> +
> +exit:
> +	return ret;
> +}
> +
> +/**
> + * Read input buffer address
> + *
> + * For input layer, in case of static ROI this address is read
> + * from address list and index is specified in data cube. In case
> + * dynamic ROI, it has to be read depending on ROI information
> + * and using surface address
> + *
> + * For all other layers, this address is read from address list
> + * using index specified in data cube
> + */
> +int
> +dla_read_input_address(struct dla_engine *engine, struct dla_data_cube *data,
> +					   uint64_t *address, int16_t op_index,
> +					   uint8_t roi_index, uint8_t bpp)
> +{
> +	uint64_t roi_desc_addr;
> +	int32_t ret = -EINVAL;
> +
> +	/**
> +	 * If memory type is HW then no address required
> +	 */
> +	if (data->type == DLA_MEM_HW) {
> +		ret = 0;
> +		goto exit;
> +	}
> +
> +	/**
> +	 * If address list index is not -1 means this address has to
> +	 * be read from address list
> +	 */
> +	if (data->address != -1) {
> +
> +		/**
> +		 * But if other parameters indicate that this is input layer
> +		 * for dynamic ROI then it is an error
> +		 */
> +		if (engine->network->dynamic_roi &&
> +			engine->network->input_layer == op_index)
> +			goto exit;
> +		ret = dla_get_dma_cube_address(engine->driver_context,
> +						engine->task->task_data,
> +						data->address,
> +						data->offset,
> +						(void *)address,
> +						DESTINATION_DMA);
> +		goto exit;
> +	}
> +
> +	/**
> +	 * Check if it is dynamic ROI and this is input layer
> +	 */
> +	if (engine->network->dynamic_roi && engine->network->input_layer == op_index) {
> +		if (!engine->task->surface_addr)
> +			goto exit;
> +
> +		/* Calculate address of ROI descriptor in array */
> +		roi_desc_addr = engine->task->roi_array_addr;
> +
> +		/* Read ROI descriptor */
> +		ret = dla_data_read(engine->driver_context,
> +				engine->task->task_data,
> +				roi_desc_addr,
> +				(void *)&roi_desc,
> +				sizeof(roi_desc),
> +				sizeof(struct dla_roi_array_desc) +
> +				roi_index * sizeof(struct dla_roi_desc));
> +		if (ret)
> +			goto exit;
> +
> +		/* Calculate ROI address */
> +		*address = engine->task->surface_addr;
> +		*address += (roi_desc.top * data->line_stride) +
> +						(bpp * roi_desc.left);
> +	}
> +
> +exit:
> +	return ret;
> +}
> +
> +int
> +utils_get_free_group(struct dla_engine *engine, struct dla_processor *processor,
> +					 uint8_t *group_id, uint8_t *rdma_id)
> +{
> +	int32_t ret = 0;
> +	uint32_t pointer;
> +	uint32_t hw_consumer_ptr;
> +	uint32_t hw_rdma_ptr;
> +
> +	hw_rdma_ptr = 0;
> +
> +	if (processor->op_type == DLA_OP_BDMA) {
> +		pointer = reg_read(engine, map_ptr_addr[processor->op_type]);
> +		hw_consumer_ptr = ((pointer & MASK(BDMA_STATUS_0, GRP0_BUSY)) >>
> +				SHIFT(BDMA_STATUS_0, GRP0_BUSY)) ==
> +				FIELD_ENUM(BDMA_STATUS_0, GRP0_BUSY, YES) ?
> +				1 : 0;
> +	} else {
> +		pointer = reg_read(engine, map_ptr_addr[processor->op_type]);
> +		hw_consumer_ptr = (pointer & MASK(CDP_S_POINTER_0, CONSUMER)) >>
> +				SHIFT(CDP_S_POINTER_0, CONSUMER);
> +
> +		/**
> +		 * Read current consumer pointer for RDMA only if processor
> +		 * has RDMA module
> +		 */
> +		if (map_rdma_ptr_addr[processor->op_type] != 0xFFFFFFFF) {
> +			pointer =
> +			reg_read(engine, map_rdma_ptr_addr[processor->op_type]);
> +			hw_rdma_ptr = (pointer &
> +					MASK(CDP_S_POINTER_0, CONSUMER)) >>
> +					SHIFT(CDP_S_POINTER_0, CONSUMER);
> +		}
> +	}
> +
> +	/**
> +	 * If both processors are programmed then exit
> +	 */
> +	if (processor->group_status == 0x3) {
> +		ret = -EBUSY;
> +		goto exit;
> +	}
> +
> +	if (!processor->group_status)
> +		/**
> +		 * If both groups are idle then use consumer pointer
> +		 */
> +		*group_id = hw_consumer_ptr;
> +	else
> +		/**
> +		 * Here it is assumed that only one group is idle or busy
> +		 * and hence right shift will work to get correct
> +		 * group id
> +		 */
> +		*group_id = !(processor->group_status >> 1);
> +
> +	/**
> +	 * If both groups are idle then read group id from pointer
> +	 */
> +	if (!processor->rdma_status)
> +		*rdma_id = hw_rdma_ptr;
> +	else
> +		*rdma_id = !(processor->rdma_status >> 1);
> +
> +exit:
> +	return ret;
> +}
> diff --git a/drivers/gpu/drm/nvdla/nvdla_engine.h b/drivers/gpu/drm/nvdla/nvdla_engine.h
> new file mode 100644
> index 000000000000..1976f5919543
> --- /dev/null
> +++ b/drivers/gpu/drm/nvdla/nvdla_engine.h
> @@ -0,0 +1,272 @@
> +/* SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause */
> +/*
> + * Copyright (C) 2017-2018 NVIDIA CORPORATION.
> + * Copyright (C) 2022 Cai Huoqing
> + */
> +
> +#ifndef __NVDLA_ENGINE_H_
> +#define __NVDLA_ENGINE_H_
> +
> +#include "nvdla_common.h"
> +#include "nvdla_sched.h"
> +#include "nvdla_engine.h"
> +#include "nvdla_reg.h"
> +
> +/*********************************************************/
> +/******************** Utilities **************************/
> +/*********************************************************/
> +#define MASK(reg, field)		(reg##_##field##_FIELD)
> +#define FIELD_ENUM(r, f, e)		(r##_##f##_##e)
> +#define SHIFT(reg, field)		(reg##_##field##_SHIFT)
> +
> +#define GLB_REG(name)                GLB_##name##_0
> +#define MCIF_REG(name)               MCIF_##name##_0
> +#define CVIF_REG(name)               CVIF_##name##_0
> +#define BDMA_REG(name)               BDMA_##name##_0
> +#define CDMA_REG(name)               CDMA_##name##_0
> +#define CSC_REG(name)                CSC_##name##_0
> +#define CMAC_A_REG(name)             CMAC_A_##name##_0
> +#define CMAC_B_REG(name)             CMAC_B_##name##_0
> +#define CACC_REG(name)               CACC_##name##_0
> +#define SDP_RDMA_REG(name)           SDP_RDMA_##name##_0
> +#define SDP_REG(name)                SDP_##name##_0
> +#define PDP_RDMA_REG(name)           PDP_RDMA_##name##_0
> +#define PDP_REG(name)                PDP_##name##_0
> +#define CDP_RDMA_REG(name)           CDP_RDMA_##name##_0
> +#define CDP_REG(name)                CDP_##name##_0
> +#define RBK_REG(name)                RBK_##name##_0
> +
> +/* alias for register read for each sub-module */
> +#define glb_reg_read(engine, reg)           reg_read(engine, GLB_REG(reg))
> +#define bdma_reg_read(engine, reg)          reg_read(engine, BDMA_REG(reg))
> +#define cdma_reg_read(engine, reg)          reg_read(engine, CDMA_REG(reg))
> +#define csc_reg_read(engine, reg)           reg_read(engine, CSC_REG(reg))
> +#define cmac_a_reg_read(engine, reg)        reg_read(engine, CMAC_A_REG(reg))
> +#define cmac_b_reg_read(engine, reg)        reg_read(engine, CMAC_B_REG(reg))
> +#define cacc_reg_read(engine, reg)          reg_read(engine, CACC_REG(reg))
> +#define sdp_rdma_reg_read(engine, reg)      reg_read(engine, SDP_RDMA_REG(reg))
> +#define sdp_reg_read(engine, reg)           reg_read(engine, SDP_REG(reg))
> +#define pdp_rdma_reg_read(engine, reg)      reg_read(engine, PDP_RDMA_REG(reg))
> +#define pdp_reg_read(engine, reg)           reg_read(engine, PDP_REG(reg))
> +#define cdp_rdma_reg_read(engine, reg)      reg_read(engine, CDP_RDMA_REG(reg))
> +#define cdp_reg_read(engine, reg)           reg_read(engine, CDP_REG(reg))
> +#define rubik_reg_read(engine, reg)         reg_read(engine, RBK_REG(reg))
> +
> +/* alias for register write for each sub-module */
> +#define glb_reg_write(engine, reg, val)      reg_write(engine, GLB_REG(reg), val)
> +#define bdma_reg_write(engine, reg, val)     reg_write(engine, BDMA_REG(reg), val)
> +#define cdma_reg_write(engine, reg, val)     reg_write(engine, CDMA_REG(reg), val)
> +#define csc_reg_write(engine, reg, val)      reg_write(engine, CSC_REG(reg), val)
> +#define cmac_a_reg_write(engine, reg, val)   reg_write(engine, CMAC_A_REG(reg), val)
> +#define cmac_b_reg_write(engine, reg, val)   reg_write(engine, CMAC_B_REG(reg), val)
> +#define cacc_reg_write(engine, reg, val)     reg_write(engine, CACC_REG(reg), val)
> +#define sdp_rdma_reg_write(engine, reg, val) reg_write(engine, SDP_RDMA_REG(reg), val)
> +#define sdp_reg_write(engine, reg, val)      reg_write(engine, SDP_REG(reg), val)
> +#define pdp_rdma_reg_write(engine, reg, val) reg_write(engine, PDP_RDMA_REG(reg), val)
> +#define pdp_reg_write(engine, reg, val)      reg_write(engine, PDP_REG(reg), val)
> +#define cdp_rdma_reg_write(engine, reg, val) reg_write(engine, CDP_RDMA_REG(reg), val)
> +#define cdp_reg_write(engine, reg, val)      reg_write(engine, CDP_REG(reg), val)
> +#define rubik_reg_write(engine, reg, val)    reg_write(engine, RBK_REG(reg), val)
> +
> +struct dla_processor_group {
> +	uint8_t id;
> +	uint8_t rdma_id;
> +	uint8_t active;
> +	uint8_t events;
> +	uint8_t roi_index;
> +	uint8_t is_rdma_needed;
> +	uint8_t pending;
> +	int32_t lut_index;
> +	uint8_t programming;
> +
> +	struct dla_common_op_desc *op_desc;
> +	struct dla_common_op_desc *consumers[DLA_OP_NUM];
> +	struct dla_common_op_desc *fused_parent;
> +	union dla_operation_container *operation_desc;
> +	union dla_surface_container *surface_desc;
> +};
> +
> +struct dla_processor {
> +	const char *name;
> +	uint8_t op_type;
> +	uint8_t consumer_ptr;
> +	uint8_t roi_index;
> +	uint8_t group_status;
> +	uint8_t rdma_status;
> +	uint8_t last_group;
> +
> +	struct dla_common_op_desc *tail_op;
> +	struct dla_processor_group groups[DLA_NUM_GROUPS];
> +	struct dla_engine *engine;
> +
> +	int (*is_ready)(struct dla_processor *processor,
> +				  struct dla_processor_group *group);
> +	int (*enable)(struct dla_engine *engine, struct dla_processor_group *group);
> +	int (*program)(struct dla_engine *engine, struct dla_processor_group *group);
> +	void (*set_producer)(struct dla_engine *engine, int32_t group_id, int32_t rdma_id);
> +	void (*dump_config)(struct dla_processor_group *group);
> +	void (*rdma_check)(struct dla_processor_group *group);
> +};
> +
> +struct dla_engine {
> +	struct dla_task *task;
> +	struct dla_config *config_data;
> +	struct dla_network_desc *network;
> +	struct dla_processor processors[DLA_OP_NUM];
> +
> +	uint16_t num_proc_hwl;
> +	int32_t status;
> +
> +	void *driver_context;
> +};
> +
> +void reg_write(struct dla_engine *engine, uint32_t addr, uint32_t reg);
> +uint32_t reg_read(struct dla_engine *engine, uint32_t addr);
> +
> +/**
> + * Operation descriptor cache functions
> + */
> +void
> +dla_put_op_desc(struct dla_engine *engine, struct dla_common_op_desc *op_desc);
> +struct dla_common_op_desc
> +*dla_get_op_desc(struct dla_engine *engine, struct dla_task *task,
> +			   int16_t index,
> +			   uint8_t op_type,
> +			   uint8_t roi_index);
> +void
> +dla_get_refcount(struct dla_common_op_desc *op_desc);
> +void
> +dla_init_op_cache(struct dla_engine *engine);
> +
> +/**
> + * Operation completion handler
> + */
> +int
> +dla_op_completion(struct dla_engine *engine, struct dla_processor *processor,
> +		      struct dla_processor_group *group);
> +
> +int32_t
> +dla_read_lut(struct dla_engine *engine, int16_t index, void *dst);
> +int
> +dla_enable_intr(struct dla_engine *engine, uint32_t mask);
> +int
> +utils_get_free_group(struct dla_engine *engine, struct dla_processor *processor,
> +			uint8_t *group_id,
> +			uint8_t *rdma_id);
> +int32_t
> +dla_get_dma_cube_address(void *driver_context,
> +						void *task_data,
> +						int16_t index,
> +						uint32_t offset,
> +						void *dst_ptr,
> +						uint32_t destination);
> +int
> +dla_read_input_address(struct dla_engine *engine, struct dla_data_cube *data,
> +		       uint64_t *address,
> +		       int16_t op_index,
> +		       uint8_t roi_index,
> +		       uint8_t bpp);
> +
> +/**
> + * BDMA operations
> + */
> +void
> +dla_bdma_set_producer(struct dla_engine *engine, int32_t group_id, int32_t rdma_group_id);
> +int
> +dla_bdma_enable(struct dla_engine *engine, struct dla_processor_group *group);
> +int
> +dla_bdma_program(struct dla_engine *engine, struct dla_processor_group *group);
> +int
> +dla_bdma_is_ready(struct dla_processor *processor,
> +			    struct dla_processor_group *group);
> +void
> +dla_bdma_dump_config(struct dla_processor_group *group);
> +void
> +dla_bdma_rdma_check(struct dla_processor_group *group);
> +
> +/**
> + * Convolution operations
> + */
> +void
> +dla_conv_set_producer(struct dla_engine *engine, int32_t group_id, int32_t rdma_group_id);
> +int
> +dla_conv_enable(struct dla_engine *engine, struct dla_processor_group *group);
> +int
> +dla_conv_program(struct dla_engine *engine, struct dla_processor_group *group);
> +int
> +dla_conv_is_ready(struct dla_processor *processor,
> +			    struct dla_processor_group *group);
> +void
> +dla_conv_dump_config(struct dla_processor_group *group);
> +void
> +dla_conv_rdma_check(struct dla_processor_group *group);
> +
> +/**
> + * SDP operations
> + */
> +void
> +dla_sdp_set_producer(struct dla_engine *engine, int32_t group_id, int32_t rdma_group_id);
> +int
> +dla_sdp_enable(struct dla_engine *engine, struct dla_processor_group *group);
> +int
> +dla_sdp_program(struct dla_engine *engine, struct dla_processor_group *group);
> +int
> +dla_sdp_is_ready(struct dla_processor *processor,
> +			   struct dla_processor_group *group);
> +void
> +dla_sdp_dump_config(struct dla_processor_group *group);
> +void
> +dla_sdp_rdma_check(struct dla_processor_group *group);
> +
> +/**
> + * PDP operations
> + */
> +void
> +dla_pdp_set_producer(struct dla_engine *engine, int32_t group_id, int32_t rdma_group_id);
> +int
> +dla_pdp_enable(struct dla_engine *engine, struct dla_processor_group *group);
> +int
> +dla_pdp_program(struct dla_engine *engine, struct dla_processor_group *group);
> +int
> +dla_pdp_is_ready(struct dla_processor *processor,
> +			   struct dla_processor_group *group);
> +void
> +dla_pdp_dump_config(struct dla_processor_group *group);
> +void
> +dla_pdp_rdma_check(struct dla_processor_group *group);
> +
> +/**
> + * CDP operations
> + */
> +void
> +dla_cdp_set_producer(struct dla_engine *engine, int32_t group_id, int32_t rdma_group_id);
> +int
> +dla_cdp_enable(struct dla_engine *engine, struct dla_processor_group *group);
> +int
> +dla_cdp_program(struct dla_engine *engine, struct dla_processor_group *group);
> +int
> +dla_cdp_is_ready(struct dla_processor *processor,
> +			   struct dla_processor_group *group);
> +void
> +dla_cdp_dump_config(struct dla_processor_group *group);
> +void
> +dla_cdp_rdma_check(struct dla_processor_group *group);
> +
> +/**
> + * RUBIK operations
> + */
> +void
> +dla_rubik_set_producer(struct dla_engine *engine, int32_t group_id, int32_t rdma_group_id);
> +int
> +dla_rubik_enable(struct dla_engine *engine, struct dla_processor_group *group);
> +int
> +dla_rubik_program(struct dla_engine *engine, struct dla_processor_group *group);
> +int
> +dla_rubik_is_ready(struct dla_processor *processor,
> +			     struct dla_processor_group *group);
> +void
> +dla_rubik_dump_config(struct dla_processor_group *group);
> +void
> +dla_rubik_rdma_check(struct dla_processor_group *group);
> +
> +#endif
> diff --git a/drivers/gpu/drm/nvdla/nvdla_gem.c b/drivers/gpu/drm/nvdla/nvdla_gem.c
> new file mode 100644
> index 000000000000..cccf6d01a564
> --- /dev/null
> +++ b/drivers/gpu/drm/nvdla/nvdla_gem.c
> @@ -0,0 +1,393 @@
> +// SPDX-License-Identifier: BSD-3-Clause OR GPL-2.0
> +/*
> + * Copyright (C) 2017-2018 NVIDIA CORPORATION
> + * Copyright (C) 2022 Cai Huoqing
> + */
> +
> +#include <linux/dma-buf.h>
> +#include <drm/drm_drv.h>
> +#include <drm/drm_gem_cma_helper.h>
> +
> +#include "nvdla_drm.h"
> +#include "nvdla_ioctl.h"
> +
> +#define to_nvdla_obj(x) container_of(x, struct nvdla_gem_object, object)
> +
> +struct nvdla_gem_object {
> +	struct drm_gem_object object;
> +
> +	void *kvaddr;
> +	dma_addr_t dma_addr;
> +	unsigned long dma_attrs;
> +};
> +
> +static int32_t nvdla_fill_task_desc(struct nvdla_ioctl_submit_task *local_task,
> +				struct nvdla_task *task)
> +{
> +	struct nvdla_mem_handle *handles;
> +
> +	/* update task desc fields */
> +	task->num_addresses = local_task->num_addresses;
> +
> +	handles = kzalloc(local_task->num_addresses * sizeof(struct nvdla_mem_handle),
> +					  GFP_KERNEL);
> +	if (handles == NULL)
> +		return -EFAULT;
> +
> +	/* get user addresses list */
> +	if (copy_from_user(handles,
> +		(void __user *)local_task->address_list,
> +		(task->num_addresses *
> +			sizeof(struct nvdla_mem_handle)))) {
> +		pr_err("failed to copy address list from user ptr\n");
> +		kfree(handles);
> +		return -EFAULT;
> +	}
> +
> +	task->address_list = handles;
> +
> +	return 0;
> +}
> +
> +static int32_t nvdla_submit(struct drm_device *drm, void *arg,
> +					struct drm_file *file)
> +{
> +	int32_t err = 0;
> +	struct nvdla_task *task;
> +	struct nvdla_ioctl_submit_task local_task;
> +	struct nvdla_ioctl_submit_task __user *user_task;
> +	struct nvdla_device *nvdla_dev = dev_get_drvdata(drm->dev);
> +	struct nvdla_submit_args *args =
> +			(struct nvdla_submit_args *)arg;
> +
> +	user_task = (struct nvdla_ioctl_submit_task __user *)
> +			(uintptr_t)args->tasks;
> +	if (!user_task)
> +		return -EINVAL;
> +
> +	/* IOCTL copy descriptors */
> +	if (copy_from_user(&local_task, (void __user *)user_task,
> +			(sizeof(*user_task))))
> +		return -EFAULT;
> +
> +	task = kzalloc(sizeof(*task), GFP_KERNEL);
> +	if (task == NULL)
> +		return -EFAULT;
> +
> +	nvdla_dev->task = task;
> +	kref_init(&task->ref);
> +	task->nvdla_dev = nvdla_dev;
> +	task->file = file;
> +
> +	/* update task desc fields */
> +	err = nvdla_fill_task_desc(&local_task, task);
> +	if (err)
> +		goto free_task_desc;
> +
> +	err = nvdla_task_submit(nvdla_dev, task);
> +
> +	kfree(task->address_list);
> +
> +free_task_desc:
> +	kfree(task);
> +	return err;
> +}
> +
> +static int32_t nvdla_gem_alloc(struct nvdla_gem_object *nobj)
> +{
> +	struct drm_gem_object *dobj = &nobj->object;
> +	struct drm_device *drm = dobj->dev;
> +
> +	nobj->dma_attrs = DMA_ATTR_WRITE_COMBINE;
> +
> +	nobj->kvaddr = dma_alloc_attrs(drm->dev, dobj->size, &nobj->dma_addr,
> +						GFP_KERNEL, nobj->dma_attrs);
> +
> +	if (!nobj->kvaddr)
> +		return -ENOMEM;
> +
> +	return 0;
> +}
> +
> +static void nvdla_gem_free(struct nvdla_gem_object *nobj)
> +{
> +	struct drm_gem_object *dobj = &nobj->object;
> +	struct drm_device *drm = dobj->dev;
> +
> +	dma_free_attrs(drm->dev, dobj->size, nobj->kvaddr, nobj->dma_addr,
> +				nobj->dma_attrs);
> +}
> +
> +static void nvdla_gem_free_object(struct drm_gem_object *dobj)
> +{
> +	struct nvdla_gem_object *nobj;
> +
> +	drm_gem_free_mmap_offset(dobj);
> +
> +	nobj = to_nvdla_obj(dobj);
> +
> +	nvdla_gem_free(nobj);
> +
> +	kfree(nobj);
> +}
> +
> +static struct nvdla_gem_object *
> +nvdla_gem_create_object(struct drm_device *drm, uint32_t size)
> +{
> +	int32_t ret;
> +	struct drm_gem_object *dobj;
> +	struct nvdla_gem_object *nobj;
> +
> +	size = round_up(size, PAGE_SIZE);
> +
> +	nobj = kzalloc(sizeof(*nobj), GFP_KERNEL);
> +	if (!nobj)
> +		return ERR_PTR(-ENOMEM);
> +
> +	dobj = &nobj->object;
> +
> +	drm_gem_private_object_init(drm, dobj, size);
> +
> +	ret = nvdla_gem_alloc(nobj);
> +	if (ret)
> +		goto free_nvdla_obj;
> +
> +	return nobj;
> +
> +free_nvdla_obj:
> +	kfree(nobj);
> +	return ERR_PTR(ret);
> +}
> +
> +static struct sg_table*
> +nvdla_drm_gem_prime_get_sg_table(struct drm_gem_object *dobj)
> +{
> +	int32_t ret;
> +	struct sg_table *sgt;
> +	struct drm_device *drm = dobj->dev;
> +	struct nvdla_gem_object *nobj = to_nvdla_obj(dobj);
> +
> +	sgt = kzalloc(sizeof(*sgt), GFP_KERNEL);
> +	if (!sgt)
> +		return ERR_PTR(-ENOMEM);
> +
> +	ret = dma_get_sgtable_attrs(drm->dev, sgt, nobj->kvaddr,
> +				    nobj->dma_addr, dobj->size,
> +				    nobj->dma_attrs);
> +	if (ret) {
> +		DRM_ERROR("failed to allocate sgt, %d\n", ret);
> +		kfree(sgt);
> +		return ERR_PTR(ret);
> +	}
> +
> +	return sgt;
> +}
> +
> +static int nvdla_drm_gem_prime_vmap(struct drm_gem_object *obj, struct iosys_map *map)
> +{
> +	struct nvdla_gem_object *nobj = to_nvdla_obj(obj);
> +
> +	map->vaddr = nobj->kvaddr;
> +
> +	return 0;
> +}
> +
> +static void nvdla_drm_gem_prime_vunmap(struct drm_gem_object *obj, struct iosys_map *map)
> +{
> +	/* Nothing to do */
> +}
> +
> +static int32_t nvdla_drm_gem_object_mmap(struct drm_gem_object *dobj,
> +					struct vm_area_struct *vma)
> +{
> +	int32_t ret;
> +	struct nvdla_gem_object *nobj = to_nvdla_obj(dobj);
> +	struct drm_device *drm = dobj->dev;
> +
> +	vma->vm_flags &= ~VM_PFNMAP;
> +	vma->vm_pgoff = 0;
> +
> +	ret = dma_mmap_attrs(drm->dev, vma, nobj->kvaddr, nobj->dma_addr,
> +			     dobj->size, nobj->dma_attrs);
> +	if (ret)
> +		drm_gem_vm_close(vma);
> +
> +	return ret;
> +}
> +
> +static const struct drm_gem_object_funcs nvdla_gem_object_funcs = {
> +	.free = nvdla_gem_free_object,
> +	.get_sg_table = nvdla_drm_gem_prime_get_sg_table,
> +	.vmap = nvdla_drm_gem_prime_vmap,
> +	.vunmap = nvdla_drm_gem_prime_vunmap,
> +	.mmap = nvdla_drm_gem_object_mmap,
> +};
> +
> +static struct nvdla_gem_object*
> +nvdla_gem_create_with_handle(struct drm_file *file_priv,
> +							 struct drm_device *drm, uint32_t size,
> +							 uint32_t *handle)
> +{
> +	int32_t ret;
> +	struct drm_gem_object *dobj;
> +	struct nvdla_gem_object *nobj;
> +
> +	nobj = nvdla_gem_create_object(drm, size);
> +	if (IS_ERR(nobj))
> +		return ERR_CAST(nobj);
> +
> +	dobj = &nobj->object;
> +	dobj->funcs = &nvdla_gem_object_funcs;
> +	ret = drm_gem_handle_create(file_priv, dobj, handle);
> +	if (ret)
> +		goto free_drm_object;
> +
> +	drm_gem_object_put(dobj);
> +
> +	return nobj;
> +
> +free_drm_object:
> +	nvdla_gem_free_object(dobj);
> +
> +	return ERR_PTR(ret);
> +}
> +
> +static int32_t nvdla_gem_create(struct drm_device *drm, void *data,
> +								struct drm_file *file)
> +{
> +	struct nvdla_gem_object *nobj;
> +	struct nvdla_gem_create_args *args = data;
> +
> +	nobj = nvdla_gem_create_with_handle(file, drm, args->size,
> +					 &args->handle);
> +	if (IS_ERR(nobj))
> +		return PTR_ERR(nobj);
> +
> +	return 0;
> +}
> +
> +static int32_t nvdla_drm_gem_mmap_buf(struct drm_gem_object *obj,
> +									  struct vm_area_struct *vma)
> +{
> +	int32_t ret;
> +
> +	ret = drm_gem_mmap_obj(obj, obj->size, vma);
> +	if (ret)
> +		return ret;
> +
> +	return nvdla_drm_gem_object_mmap(obj, vma);
> +}
> +
> +static int32_t nvdla_drm_gem_mmap(struct file *filp, struct vm_area_struct *vma)
> +{
> +	int32_t ret;
> +	struct drm_gem_object *obj;
> +
> +	ret = drm_gem_mmap(filp, vma);
> +	if (ret)
> +		return ret;
> +
> +	obj = vma->vm_private_data;
> +
> +	return nvdla_drm_gem_object_mmap(obj, vma);
> +}
> +
> +int32_t nvdla_gem_dma_addr(struct drm_device *dev, struct drm_file *file,
> +						   uint32_t fd, dma_addr_t *addr)
> +{
> +	int32_t ret;
> +	uint32_t handle;
> +	struct nvdla_gem_object *nobj;
> +	struct drm_gem_object *dobj;
> +
> +	ret = drm_gem_prime_fd_to_handle(dev, file, fd, &handle);
> +	if (ret)
> +		return ret;
> +
> +	dobj = drm_gem_object_lookup(file, handle);
> +	if (!dobj)
> +		return -EINVAL;
> +
> +	nobj = to_nvdla_obj(dobj);
> +
> +	*addr = nobj->dma_addr;
> +
> +	drm_gem_object_put(dobj);
> +
> +	return 0;
> +}
> +
> +static int32_t nvdla_gem_map_offset(struct drm_device *drm, void *data,
> +									struct drm_file *file)
> +{
> +	struct nvdla_gem_map_offset_args *args = data;
> +
> +	return drm_gem_dumb_map_offset(file, drm, args->handle,
> +								   &args->offset);
> +}
> +
> +static const struct file_operations nvdla_drm_fops = {
> +	.owner = THIS_MODULE,
> +	.open = drm_open,
> +	.release = drm_release,
> +	.unlocked_ioctl = drm_ioctl,
> +	.mmap = nvdla_drm_gem_mmap,
> +	.poll = drm_poll,
> +	.read = drm_read,
> +#ifdef CONFIG_COMPAT
> +	.compat_ioctl = drm_compat_ioctl,
> +#endif
> +	.llseek = noop_llseek,
> +};
> +
> +static const struct drm_ioctl_desc nvdla_drm_ioctls[] = {
> +	DRM_IOCTL_DEF_DRV(NVDLA_SUBMIT, nvdla_submit, DRM_RENDER_ALLOW),
> +	DRM_IOCTL_DEF_DRV(NVDLA_GEM_CREATE, nvdla_gem_create, DRM_RENDER_ALLOW),
> +	DRM_IOCTL_DEF_DRV(NVDLA_GEM_MMAP, nvdla_gem_map_offset, DRM_RENDER_ALLOW),
> +	/* use DRM_IOCTL_MODE_DESTROY_DUMB to destory */
> +};
> +
> +static struct drm_driver nvdla_drm_driver = {
> +	.driver_features = DRIVER_GEM | DRIVER_RENDER,
> +
> +	.ioctls = nvdla_drm_ioctls,
> +	.num_ioctls = ARRAY_SIZE(nvdla_drm_ioctls),
> +	.fops = &nvdla_drm_fops,
> +	.gem_prime_mmap		= nvdla_drm_gem_mmap_buf,
> +
> +	.name = "nvdla",
> +	.desc = "NVDLA driver",
> +	.date = "20171017",
> +	.major = 0,
> +	.minor = 0,
> +	.patchlevel = 0,
> +};
> +
> +int32_t nvdla_drm_probe(struct nvdla_device *nvdla_dev)
> +{
> +	int32_t err;
> +	struct drm_device *drm;
> +	struct drm_driver *driver = &nvdla_drm_driver;
> +
> +	drm = drm_dev_alloc(driver, &nvdla_dev->pdev->dev);
> +	if (IS_ERR(drm))
> +		return PTR_ERR(drm);
> +
> +	nvdla_dev->drm = drm;
> +
> +	err = drm_dev_register(drm, 0);
> +	if (err < 0)
> +		goto unref;
> +
> +	return 0;
> +
> +unref:
> +	drm_dev_put(drm);
> +	return err;
> +}
> +
> +void nvdla_drm_remove(struct nvdla_device *nvdla_dev)
> +{
> +	drm_dev_unregister(nvdla_dev->drm);
> +	drm_dev_put(nvdla_dev->drm);
> +}
> diff --git a/drivers/gpu/drm/nvdla/nvdla_ioctl.h b/drivers/gpu/drm/nvdla/nvdla_ioctl.h
> new file mode 100644
> index 000000000000..e21d4007b7f4
> --- /dev/null
> +++ b/drivers/gpu/drm/nvdla/nvdla_ioctl.h
> @@ -0,0 +1,99 @@
> +/* SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause */
> +/*
> + * Copyright (C) 2017-2018 NVIDIA CORPORATION.
> + * Copyright (C) 2022 Cai Huoqing
> + */
> +
> +#ifndef __LINUX_NVDLA_IOCTL_H
> +#define __LINUX_NVDLA_IOCTL_H
> +
> +#include <linux/ioctl.h>
> +#include <linux/types.h>
> +
> +#if !defined(__KERNEL__)
> +#define __user
> +#endif
> +
> +/**
> + * struct nvdla_mem_handle structure for memory handles
> + *
> + * @handle		handle to DMA buffer allocated in userspace
> + * @reserved		Reserved for padding
> + * @offset		offset in bytes from start address of buffer
> + *
> + */
> +struct nvdla_mem_handle {
> +	__u32 handle;
> +	__u32 reserved;
> +	__u64 offset;
> +};
> +
> +/**
> + * struct nvdla_ioctl_submit_task structure for single task information
> + *
> + * @num_addresses		total number of entries in address_list
> + * @reserved			Reserved for padding
> + * @address_list		pointer to array of struct nvdla_mem_handle
> + *
> + */
> +struct nvdla_ioctl_submit_task {
> +#define NVDLA_MAX_BUFFERS_PER_TASK (6144)
> +	__u32 num_addresses;
> +#define NVDLA_NO_TIMEOUT    (0xffffffff)
> +	__u32 timeout;
> +	__u64 address_list;
> +};
> +
> +/**
> + * struct nvdla_submit_args structure for task submit
> + *
> + * @tasks		pointer to array of struct nvdla_ioctl_submit_task
> + * @num_tasks		number of entries in tasks
> + * @flags		flags for task submit, no flags defined yet
> + * @version		version of task structure
> + *
> + */
> +struct nvdla_submit_args {
> +	__u64 tasks;
> +	__u16 num_tasks;
> +#define NVDLA_MAX_TASKS_PER_SUBMIT	24
> +#define NVDLA_SUBMIT_FLAGS_ATOMIC	(1 << 0)
> +	__u16 flags;
> +	__u32 version;
> +};
> +
> +/**
> + * struct nvdla_gem_create_args for allocating DMA buffer through GEM
> + *
> + * @handle		handle updated by kernel after allocation
> + * @flags		implementation specific flags
> + * @size		size of buffer to allocate
> + */
> +struct nvdla_gem_create_args {
> +	__u32 handle;
> +	__u32 flags;
> +	__u64 size;
> +};
> +
> +/**
> + * struct nvdla_gem_map_offset_args for mapping DMA buffer
> + *
> + * @handle		handle of the buffer
> + * @reserved		reserved for padding
> + * @offset		offset updated by kernel after mapping
> + */
> +struct nvdla_gem_map_offset_args {
> +	__u32 handle;
> +	__u32 reserved;
> +	__u64 offset;
> +};
> +
> +#define DRM_NVDLA_SUBMIT		0x00
> +#define DRM_NVDLA_GEM_CREATE		0x01
> +#define DRM_NVDLA_GEM_MMAP		0x02
> +
> +#define DRM_IOCTL_NVDLA_SUBMIT DRM_IOWR(DRM_COMMAND_BASE + DRM_NVDLA_SUBMIT, struct nvdla_submit_args)
> +#define DRM_IOCTL_NVDLA_GEM_CREATE DRM_IOWR(DRM_COMMAND_BASE + DRM_NVDLA_GEM_CREATE, struct nvdla_gem_create_args)
> +#define DRM_IOCTL_NVDLA_GEM_MMAP DRM_IOWR(DRM_COMMAND_BASE + DRM_NVDLA_GEM_MMAP, struct nvdla_gem_map_offset_args)
> +
> +#endif
> diff --git a/drivers/gpu/drm/nvdla/nvdla_pdp.c b/drivers/gpu/drm/nvdla/nvdla_pdp.c
> new file mode 100644
> index 000000000000..2ed0ac0f021a
> --- /dev/null
> +++ b/drivers/gpu/drm/nvdla/nvdla_pdp.c
> @@ -0,0 +1,446 @@
> +// SPDX-License-Identifier: BSD-3-Clause OR GPL-2.0
> +/*
> + * Copyright (C) 2017-2018 NVIDIA CORPORATION
> + * Copyright (C) 2022 Cai Huoqing
> + */
> +
> +#include "nvdla_drm.h"
> +#include "nvdla_reg.h"
> +#include "nvdla_common.h"
> +#include "nvdla_engine.h"
> +
> +#define MAX_SPLIT_NUM	64
> +//#define ARRAY_SIZE(a)	(sizeof(a) / sizeof((a[0])))
> +
> +static const uint8_t map_ram[] = {
> +	FIELD_ENUM(PDP_RDMA_D_SRC_RAM_CFG_0, SRC_RAM_TYPE, MC),
> +	FIELD_ENUM(PDP_RDMA_D_SRC_RAM_CFG_0, SRC_RAM_TYPE, CV),
> +};
> +
> +static const uint8_t map_pool[] = {
> +	FIELD_ENUM(PDP_D_OPERATION_MODE_CFG_0,
> +			POOLING_METHOD, POOLING_METHOD_AVERAGE),
> +	FIELD_ENUM(PDP_D_OPERATION_MODE_CFG_0,
> +			POOLING_METHOD, POOLING_METHOD_MAX),
> +	FIELD_ENUM(PDP_D_OPERATION_MODE_CFG_0,
> +			POOLING_METHOD, POOLING_METHOD_MIN),
> +};
> +
> +static const uint8_t map_precision[] = {
> +	FIELD_ENUM(PDP_D_DATA_FORMAT_0, INPUT_DATA, INT8),
> +	FIELD_ENUM(PDP_D_DATA_FORMAT_0, INPUT_DATA, INT16),
> +	FIELD_ENUM(PDP_D_DATA_FORMAT_0, INPUT_DATA, FP16),
> +};
> +
> +static const uint8_t map_pool_kernel[] = {
> +	FIELD_ENUM(PDP_D_POOLING_KERNEL_CFG_0, KERNEL_WIDTH, KERNEL_WIDTH_1),
> +	FIELD_ENUM(PDP_D_POOLING_KERNEL_CFG_0, KERNEL_WIDTH, KERNEL_WIDTH_2),
> +	FIELD_ENUM(PDP_D_POOLING_KERNEL_CFG_0, KERNEL_WIDTH, KERNEL_WIDTH_3),
> +	FIELD_ENUM(PDP_D_POOLING_KERNEL_CFG_0, KERNEL_WIDTH, KERNEL_WIDTH_4),
> +	FIELD_ENUM(PDP_D_POOLING_KERNEL_CFG_0, KERNEL_WIDTH, KERNEL_WIDTH_5),
> +	FIELD_ENUM(PDP_D_POOLING_KERNEL_CFG_0, KERNEL_WIDTH, KERNEL_WIDTH_6),
> +	FIELD_ENUM(PDP_D_POOLING_KERNEL_CFG_0, KERNEL_WIDTH, KERNEL_WIDTH_7),
> +	FIELD_ENUM(PDP_D_POOLING_KERNEL_CFG_0, KERNEL_WIDTH, KERNEL_WIDTH_8),
> +};
> +
> +/* The reciprocal of kernel width: 1/1, 1/2, 1/3, ... */
> +static const uint32_t recip_kernel_size[2][8] = {
> +	/*
> +	 * INT8/16
> +	 * 1      1/2     1/3     1/4     1/5     1/6     1/7     1/8
> +	 */
> +	{0x10000, 0x8000, 0x5555, 0x4000, 0x3333, 0x2aaa, 0x2492, 0x2000},
> +	{0x7c00, 0x7800, 0x7555,  0x7400, 0x7266, 0x7155, 0x7092, 0x7000},
> +};
> +
> +static uint32_t
> +get_fly_mode(uint8_t type)
> +{
> +	uint32_t val;
> +
> +	val = type == DLA_MEM_HW ?
> +			FIELD_ENUM(PDP_D_OPERATION_MODE_CFG_0,
> +						FLYING_MODE, ON_FLYING) :
> +			FIELD_ENUM(PDP_D_OPERATION_MODE_CFG_0,
> +						FLYING_MODE, OFF_FLYING);
> +
> +	return val;
> +}
> +
> +void
> +dla_pdp_set_producer(struct dla_engine *engine, int32_t group_id, int32_t rdma_group_id)
> +{
> +	uint32_t reg;
> +
> +	pr_debug("group id %d rdma id %d\n", group_id, rdma_group_id);
> +
> +	reg = group_id << SHIFT(PDP_S_POINTER_0, PRODUCER);
> +	pdp_reg_write(engine, S_POINTER, reg);
> +
> +	reg = rdma_group_id << SHIFT(PDP_RDMA_S_POINTER_0, PRODUCER);
> +	pdp_rdma_reg_write(engine, S_POINTER, reg);
> +}
> +
> +int
> +dla_pdp_enable(struct dla_engine *engine, struct dla_processor_group *group)
> +{
> +	int32_t ret = 0;
> +	uint32_t reg;
> +
> +	if (!group) {
> +		ret = -EINVAL;
> +		goto exit;
> +	}
> +
> +	pr_debug("rdma needed %u\n", group->is_rdma_needed);
> +
> +	/**
> +	 * enable all sub-modules
> +	 */
> +	if (group->is_rdma_needed) {
> +		reg = FIELD_ENUM(PDP_RDMA_D_OP_ENABLE_0, OP_EN, ENABLE);
> +		pdp_rdma_reg_write(engine, D_OP_ENABLE, reg);
> +	}
> +	reg = FIELD_ENUM(PDP_D_OP_ENABLE_0, OP_EN, ENABLE);
> +	pdp_reg_write(engine, D_OP_ENABLE, reg);
> +
> +exit:
> +	return ret;
> +}
> +
> +void
> +dla_pdp_rdma_check(struct dla_processor_group *group)
> +{
> +	struct dla_pdp_surface_desc *pdp_surface;
> +
> +	pdp_surface = &group->surface_desc->pdp_surface;
> +
> +	group->is_rdma_needed = 0;
> +
> +	if (pdp_surface->src_data.type != DLA_MEM_HW)
> +		group->is_rdma_needed = 1;
> +}
> +
> +static int
> +validate_strides(uint8_t stride_x, uint8_t stride_y)
> +{
> +	int32_t ret = 0;
> +
> +	if (stride_x < 1 || stride_y < 1 || stride_x > 8 || stride_y > 8) {
> +		pr_err("Invalid Stride (x[%d], y[%d])\n", stride_x, stride_y);
> +		ret = -EINVAL;
> +	}
> +
> +	return ret;
> +}
> +
> +static int
> +vaildate_pdp_configs(struct dla_processor_group *group)
> +{
> +	int32_t ret = 0;
> +	struct dla_pdp_op_desc *pdp_op;
> +	struct dla_pdp_surface_desc *pdp_surface;
> +
> +	pdp_op = &group->operation_desc->pdp_op;
> +	pdp_surface = &group->surface_desc->pdp_surface;
> +
> +	if (pdp_surface->dst_data.type == DLA_MEM_HW) {
> +		pr_err("Destination buffer for PDP has to be either MC or CV");
> +		ret = -EINVAL;
> +		goto exit;
> +	}
> +
> +	ret = validate_data_cube(pdp_surface->src_data, pdp_surface->dst_data,
> +								DLA_MEM_HW);
> +	if (ret)
> +		goto exit;
> +
> +	ret = validate_precision(pdp_op->precision, ARRAY_SIZE(map_precision));
> +	if (ret)
> +		goto exit;
> +
> +	ret = validate_strides(pdp_op->stride_x, pdp_op->stride_y);
> +	if (ret)
> +		goto exit;
> +
> +	if (pdp_op->split_num > MAX_SPLIT_NUM) {
> +		pr_err("Invalid split_num: %u\n", pdp_op->split_num);
> +		ret = -EINVAL;
> +		goto exit;
> +	}
> +
> +	if (pdp_op->pool_width >= ARRAY_SIZE(map_pool_kernel)) {
> +		pr_err("Invalid pool_width: %u\n", pdp_op->pool_width);
> +		ret = -EINVAL;
> +		goto exit;
> +	}
> +
> +	if (pdp_op->pool_height >= ARRAY_SIZE(map_pool_kernel)) {
> +		pr_err("Invalid pool_height: %u\n", pdp_op->pool_height);
> +		ret = -EINVAL;
> +		goto exit;
> +	}
> +
> +	if (pdp_op->pool_mode >= ARRAY_SIZE(map_pool)) {
> +		pr_err("Invalid pool_mode: %u\n", pdp_op->pool_mode);
> +		ret = -EINVAL;
> +		goto exit;
> +	}
> +
> +exit:
> +	return ret;
> +}
> +
> +static int
> +processor_pdp_program(struct dla_engine *engine, struct dla_processor_group *group)
> +{
> +	int32_t ret = 0;
> +	uint32_t reg, high, low;
> +	uint64_t input_address = 0;
> +	uint64_t output_address = 0;
> +	struct dla_pdp_op_desc *pdp_op;
> +	struct dla_pdp_surface_desc *pdp_surface;
> +
> +	pdp_op = &group->operation_desc->pdp_op;
> +	pdp_surface = &group->surface_desc->pdp_surface;
> +
> +	ret = vaildate_pdp_configs(group);
> +	if (ret)
> +		goto exit;
> +
> +	ret = dla_read_input_address(engine, &pdp_surface->src_data,
> +					&input_address,
> +					group->op_desc->index,
> +					group->roi_index,
> +					1);
> +	if (ret)
> +		goto exit;
> +
> +	if (pdp_surface->dst_data.address != -1)
> +		dla_get_dma_cube_address(engine->driver_context,
> +					engine->task->task_data,
> +					pdp_surface->dst_data.address,
> +					pdp_surface->dst_data.offset,
> +					(void *)&output_address,
> +					DESTINATION_DMA);
> +
> +	if (pdp_surface->src_data.type != DLA_MEM_HW) {
> +		/* PDP RDMA */
> +		pdp_rdma_reg_write(engine, D_DATA_CUBE_IN_WIDTH,
> +				pdp_surface->src_data.width - 1);
> +		pdp_rdma_reg_write(engine, D_DATA_CUBE_IN_HEIGHT,
> +				pdp_surface->src_data.height - 1);
> +		pdp_rdma_reg_write(engine, D_DATA_CUBE_IN_CHANNEL,
> +				pdp_surface->src_data.channel - 1);
> +
> +		high = upper_32_bits(input_address);
> +		low  = lower_32_bits(input_address);
> +		pdp_rdma_reg_write(engine, D_SRC_BASE_ADDR_HIGH, high);
> +		pdp_rdma_reg_write(engine, D_SRC_BASE_ADDR_LOW, low);
> +		pdp_rdma_reg_write(engine, D_SRC_LINE_STRIDE,
> +				pdp_surface->src_data.line_stride);
> +		pdp_rdma_reg_write(engine, D_SRC_SURFACE_STRIDE,
> +				pdp_surface->src_data.surf_stride);
> +
> +		reg = (map_precision[pdp_op->precision]
> +			<< SHIFT(PDP_RDMA_D_DATA_FORMAT_0, INPUT_DATA));
> +		pdp_rdma_reg_write(engine, D_DATA_FORMAT, reg);
> +
> +		reg = map_ram[pdp_surface->src_data.type]
> +			<< SHIFT(PDP_RDMA_D_SRC_RAM_CFG_0, SRC_RAM_TYPE);
> +		pdp_rdma_reg_write(engine, D_SRC_RAM_CFG, reg);
> +
> +		reg = ((pdp_op->split_num - 1)
> +			 << SHIFT(PDP_RDMA_D_OPERATION_MODE_CFG_0, SPLIT_NUM));
> +		pdp_rdma_reg_write(engine, D_OPERATION_MODE_CFG, reg);
> +
> +		reg = (map_pool_kernel[pdp_op->pool_width]
> +			<< SHIFT(PDP_RDMA_D_POOLING_KERNEL_CFG_0,
> +							KERNEL_WIDTH)) |
> +			((pdp_op->stride_x - 1)
> +			<< SHIFT(PDP_RDMA_D_POOLING_KERNEL_CFG_0,
> +							KERNEL_STRIDE_WIDTH));
> +		pdp_rdma_reg_write(engine, D_POOLING_KERNEL_CFG, reg);
> +
> +		reg = (pdp_op->pad_left
> +			<< SHIFT(PDP_RDMA_D_POOLING_PADDING_CFG_0, PAD_WIDTH));
> +		pdp_rdma_reg_write(engine, D_POOLING_PADDING_CFG, reg);
> +
> +		reg = ((pdp_op->partial_in_width_first == 0 ? 0 :
> +				pdp_op->partial_in_width_first - 1)
> +			<< SHIFT(PDP_RDMA_D_PARTIAL_WIDTH_IN_0,
> +				PARTIAL_WIDTH_IN_FIRST)) |
> +			((pdp_op->partial_in_width_mid == 0 ? 0 :
> +				pdp_op->partial_in_width_mid - 1)
> +			<< SHIFT(PDP_RDMA_D_PARTIAL_WIDTH_IN_0,
> +				PARTIAL_WIDTH_IN_MID)) |
> +			((pdp_op->partial_in_width_last == 0 ? 0 :
> +				pdp_op->partial_in_width_last - 1)
> +			<< SHIFT(PDP_RDMA_D_PARTIAL_WIDTH_IN_0,
> +				PARTIAL_WIDTH_IN_LAST));
> +		pdp_rdma_reg_write(engine, D_PARTIAL_WIDTH_IN, reg);
> +	} else {
> +		ASSERT_GOTO(pdp_op->split_num == 1, ret,
> +					-EINVAL, exit);
> +	}
> +
> +	reg = ((pdp_surface->src_data.width - 1)
> +		<< SHIFT(PDP_D_DATA_CUBE_IN_WIDTH_0, CUBE_IN_WIDTH));
> +	pdp_reg_write(engine, D_DATA_CUBE_IN_WIDTH, reg);
> +
> +	reg = ((pdp_surface->src_data.height - 1)
> +		<< SHIFT(PDP_D_DATA_CUBE_IN_HEIGHT_0, CUBE_IN_HEIGHT));
> +	pdp_reg_write(engine, D_DATA_CUBE_IN_HEIGHT, reg);
> +
> +	reg = ((pdp_surface->src_data.channel - 1)
> +		<< SHIFT(PDP_D_DATA_CUBE_IN_CHANNEL_0, CUBE_IN_CHANNEL));
> +	pdp_reg_write(engine, D_DATA_CUBE_IN_CHANNEL, reg);
> +
> +	reg = ((pdp_surface->dst_data.width - 1)
> +		<< SHIFT(PDP_D_DATA_CUBE_OUT_WIDTH_0, CUBE_OUT_WIDTH));
> +	pdp_reg_write(engine, D_DATA_CUBE_OUT_WIDTH, reg);
> +
> +	reg = ((pdp_surface->dst_data.height - 1)
> +		<< SHIFT(PDP_D_DATA_CUBE_OUT_HEIGHT_0, CUBE_OUT_HEIGHT));
> +	pdp_reg_write(engine, D_DATA_CUBE_OUT_HEIGHT, reg);
> +
> +	reg = ((pdp_surface->dst_data.channel - 1)
> +		<< SHIFT(PDP_D_DATA_CUBE_OUT_CHANNEL_0, CUBE_OUT_CHANNEL));
> +	pdp_reg_write(engine, D_DATA_CUBE_OUT_CHANNEL, reg);
> +
> +	reg = (map_pool[pdp_op->pool_mode]
> +		<< SHIFT(PDP_D_OPERATION_MODE_CFG_0, POOLING_METHOD)) |
> +		(get_fly_mode(pdp_surface->src_data.type)
> +		<< SHIFT(PDP_D_OPERATION_MODE_CFG_0, FLYING_MODE)) |
> +		((pdp_op->split_num - 1)
> +		<< SHIFT(PDP_D_OPERATION_MODE_CFG_0, SPLIT_NUM));
> +	pdp_reg_write(engine, D_OPERATION_MODE_CFG, reg);
> +
> +	reg = ((pdp_op->partial_in_width_first == 0 ? 0 :
> +			pdp_op->partial_in_width_first-1)
> +		<< SHIFT(PDP_D_PARTIAL_WIDTH_IN_0, PARTIAL_WIDTH_IN_FIRST)) |
> +		((pdp_op->partial_in_width_mid == 0 ? 0 :
> +			pdp_op->partial_in_width_mid-1)
> +		<< SHIFT(PDP_D_PARTIAL_WIDTH_IN_0, PARTIAL_WIDTH_IN_MID)) |
> +		((pdp_op->partial_in_width_last == 0 ? 0 :
> +			pdp_op->partial_in_width_last-1)
> +		<< SHIFT(PDP_D_PARTIAL_WIDTH_IN_0, PARTIAL_WIDTH_IN_LAST));
> +	pdp_reg_write(engine, D_PARTIAL_WIDTH_IN, reg);
> +
> +	reg = ((pdp_op->partial_width_first == 0 ? 0 :
> +			pdp_op->partial_width_first-1)
> +		<< SHIFT(PDP_D_PARTIAL_WIDTH_OUT_0, PARTIAL_WIDTH_OUT_FIRST)) |
> +		((pdp_op->partial_width_mid == 0 ? 0 :
> +			pdp_op->partial_width_mid-1)
> +		<< SHIFT(PDP_D_PARTIAL_WIDTH_OUT_0, PARTIAL_WIDTH_OUT_MID))   |
> +		((pdp_op->partial_width_last == 0 ? 0 :
> +			pdp_op->partial_width_last-1)
> +		<< SHIFT(PDP_D_PARTIAL_WIDTH_OUT_0, PARTIAL_WIDTH_OUT_LAST));
> +	pdp_reg_write(engine, D_PARTIAL_WIDTH_OUT, reg);
> +
> +	reg = (map_pool_kernel[pdp_op->pool_width]
> +		<< SHIFT(PDP_D_POOLING_KERNEL_CFG_0, KERNEL_WIDTH)) |
> +		(map_pool_kernel[pdp_op->pool_height]
> +		<< SHIFT(PDP_D_POOLING_KERNEL_CFG_0, KERNEL_HEIGHT))|
> +		((pdp_op->stride_x - 1)
> +		<< SHIFT(PDP_D_POOLING_KERNEL_CFG_0, KERNEL_STRIDE_WIDTH)) |
> +		((pdp_op->stride_y - 1)
> +		<< SHIFT(PDP_D_POOLING_KERNEL_CFG_0, KERNEL_STRIDE_HEIGHT));
> +	pdp_reg_write(engine, D_POOLING_KERNEL_CFG, reg);
> +
> +	pdp_reg_write(engine, D_RECIP_KERNEL_WIDTH,
> +			recip_kernel_size[pdp_op->precision ==
> +					PRECISION_FP16][pdp_op->pool_width]);
> +	pdp_reg_write(engine, D_RECIP_KERNEL_HEIGHT,
> +			recip_kernel_size[pdp_op->precision ==
> +					PRECISION_FP16][pdp_op->pool_height]);
> +
> +	reg = (pdp_op->pad_left
> +		<< SHIFT(PDP_D_POOLING_PADDING_CFG_0, PAD_LEFT)) |
> +		(pdp_op->pad_right
> +		<< SHIFT(PDP_D_POOLING_PADDING_CFG_0, PAD_RIGHT)) |
> +		(pdp_op->pad_top
> +		<< SHIFT(PDP_D_POOLING_PADDING_CFG_0, PAD_TOP)) |
> +		(pdp_op->pad_bottom
> +		<< SHIFT(PDP_D_POOLING_PADDING_CFG_0, PAD_BOTTOM));
> +	if (pdp_op->precision == PRECISION_FP16) {
> +		int32_t i;
> +
> +		for (i = 0; i < 7; i++)
> +			ASSERT_GOTO(pdp_op->padding_value[i] == 0, ret,
> +						-EINVAL, exit);
> +	}
> +
> +	pdp_reg_write(engine, D_POOLING_PADDING_CFG, reg);
> +	pdp_reg_write(engine, D_POOLING_PADDING_VALUE_1_CFG, pdp_op->padding_value[0]);
> +	pdp_reg_write(engine, D_POOLING_PADDING_VALUE_2_CFG, pdp_op->padding_value[1]);
> +	pdp_reg_write(engine, D_POOLING_PADDING_VALUE_3_CFG, pdp_op->padding_value[2]);
> +	pdp_reg_write(engine, D_POOLING_PADDING_VALUE_4_CFG, pdp_op->padding_value[3]);
> +	pdp_reg_write(engine, D_POOLING_PADDING_VALUE_5_CFG, pdp_op->padding_value[4]);
> +	pdp_reg_write(engine, D_POOLING_PADDING_VALUE_6_CFG, pdp_op->padding_value[5]);
> +	pdp_reg_write(engine, D_POOLING_PADDING_VALUE_7_CFG, pdp_op->padding_value[6]);
> +
> +	if (pdp_surface->src_data.type != DLA_MEM_HW) {
> +		pdp_reg_write(engine, D_SRC_LINE_STRIDE,
> +				pdp_surface->src_data.line_stride);
> +		pdp_reg_write(engine, D_SRC_SURFACE_STRIDE,
> +				pdp_surface->src_data.surf_stride);
> +	}
> +
> +	high = upper_32_bits(output_address);
> +	low = lower_32_bits(output_address);
> +	pdp_reg_write(engine, D_DST_BASE_ADDR_LOW, low);
> +	pdp_reg_write(engine, D_DST_BASE_ADDR_HIGH, high);
> +
> +	pdp_reg_write(engine, D_DST_LINE_STRIDE, pdp_surface->dst_data.line_stride);
> +	pdp_reg_write(engine, D_DST_SURFACE_STRIDE, pdp_surface->dst_data.surf_stride);
> +
> +	reg = (map_ram[pdp_surface->dst_data.type]
> +		<< SHIFT(PDP_D_DST_RAM_CFG_0, DST_RAM_TYPE));
> +	pdp_reg_write(engine, D_DST_RAM_CFG, reg);
> +
> +	reg = (map_precision[pdp_op->precision]
> +		<< SHIFT(PDP_D_DATA_FORMAT_0, INPUT_DATA));
> +	pdp_reg_write(engine, D_DATA_FORMAT, reg);
> +
> +exit:
> +	return ret;
> +}
> +
> +int
> +dla_pdp_is_ready(struct dla_processor *processor,
> +			   struct dla_processor_group *group)
> +{
> +	return 1;
> +}
> +
> +void
> +dla_pdp_dump_config(struct dla_processor_group *group)
> +{
> +	struct dla_pdp_op_desc *pdp_op;
> +	struct dla_pdp_surface_desc *pdp_surface;
> +
> +	pdp_surface = &group->surface_desc->pdp_surface;
> +	pdp_op = &group->operation_desc->pdp_op;
> +}
> +
> +int
> +dla_pdp_program(struct dla_engine *engine, struct dla_processor_group *group)
> +{
> +	int32_t ret;
> +
> +	if (!group) {
> +		ret = -EINVAL;
> +		goto exit;
> +	}
> +
> +	dla_enable_intr(engine, MASK(GLB_S_INTR_MASK_0, PDP_DONE_MASK1) |
> +			MASK(GLB_S_INTR_MASK_0, PDP_DONE_MASK0));
> +
> +	ret = processor_pdp_program(engine, group);
> +	if (ret)
> +		goto exit;
> +
> +exit:
> +	return ret;
> +}
> diff --git a/drivers/gpu/drm/nvdla/nvdla_reg.h b/drivers/gpu/drm/nvdla/nvdla_reg.h
> new file mode 100644
> index 000000000000..5ca2897405bc
> --- /dev/null
> +++ b/drivers/gpu/drm/nvdla/nvdla_reg.h
> @@ -0,0 +1,6411 @@
> +/* SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause */
> +/*
> + * Copyright (C) 2017-2018 NVIDIA CORPORATION.
> + * Copyright (C) 2022 Cai Huoqing
> + */
> +
> +#ifndef __NVDLA_REG_H_
> +#define __NVDLA_REG_H_
> +
> +// Register NVDLA_CFGROM_CFGROM_HW_VERSION_0
> +#define NVDLA_CFGROM_CFGROM_HW_VERSION_0			_MK_ADDR_CONST(0x0)
> +#define NVDLA_CFGROM_CFGROM_HW_VERSION_0_HW_VERSION_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_HW_VERSION_0_HW_VERSION_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_HW_VERSION_0_HW_VERSION_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_GLB_DESC_0
> +#define NVDLA_CFGROM_CFGROM_GLB_DESC_0			_MK_ADDR_CONST(0x4)
> +#define NVDLA_CFGROM_CFGROM_GLB_DESC_0_GLB_DESC_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_GLB_DESC_0_GLB_DESC_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_GLB_DESC_0_GLB_DESC_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_CIF_DESC_0
> +#define NVDLA_CFGROM_CFGROM_CIF_DESC_0			_MK_ADDR_CONST(0x8)
> +#define NVDLA_CFGROM_CFGROM_CIF_DESC_0_CIF_DESC_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_CIF_DESC_0_CIF_DESC_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CIF_DESC_0_CIF_DESC_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_CIF_CAP_INCOMPAT_0
> +#define NVDLA_CFGROM_CFGROM_CIF_CAP_INCOMPAT_0			_MK_ADDR_CONST(0xc)
> +#define NVDLA_CFGROM_CFGROM_CIF_CAP_INCOMPAT_0_CIF_CAP_INCOMPAT_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_CIF_CAP_INCOMPAT_0_CIF_CAP_INCOMPAT_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CIF_CAP_INCOMPAT_0_CIF_CAP_INCOMPAT_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_CIF_CAP_COMPAT_0
> +#define NVDLA_CFGROM_CFGROM_CIF_CAP_COMPAT_0			_MK_ADDR_CONST(0x10)
> +#define NVDLA_CFGROM_CFGROM_CIF_CAP_COMPAT_0_CIF_CAP_COMPAT_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_CIF_CAP_COMPAT_0_CIF_CAP_COMPAT_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CIF_CAP_COMPAT_0_CIF_CAP_COMPAT_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_CIF_BASE_WIDTH_0
> +#define NVDLA_CFGROM_CFGROM_CIF_BASE_WIDTH_0			_MK_ADDR_CONST(0x14)
> +#define NVDLA_CFGROM_CFGROM_CIF_BASE_WIDTH_0_CIF_BASE_WIDTH_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_CIF_BASE_WIDTH_0_CIF_BASE_WIDTH_FIELD			_MK_FIELD_CONST(0xff, NVDLA_CFGROM_CFGROM_CIF_BASE_WIDTH_0_CIF_BASE_WIDTH_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_CIF_BASE_LATENCY_0
> +#define NVDLA_CFGROM_CFGROM_CIF_BASE_LATENCY_0			_MK_ADDR_CONST(0x18)
> +#define NVDLA_CFGROM_CFGROM_CIF_BASE_LATENCY_0_CIF_BASE_LATENCY_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_CIF_BASE_LATENCY_0_CIF_BASE_LATENCY_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CIF_BASE_LATENCY_0_CIF_BASE_LATENCY_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_CIF_BASE_BURST_LENGTH_MAX_0
> +#define NVDLA_CFGROM_CFGROM_CIF_BASE_BURST_LENGTH_MAX_0			_MK_ADDR_CONST(0x1c)
> +#define NVDLA_CFGROM_CFGROM_CIF_BASE_BURST_LENGTH_MAX_0_BASE_BURST_LENGTH_MAX_SHIFT			_MK_SHIFT_CONST(5)
> +#define NVDLA_CFGROM_CFGROM_CIF_BASE_BURST_LENGTH_MAX_0_BASE_BURST_LENGTH_MAX_FIELD			_MK_FIELD_CONST(0x7ffffff, NVDLA_CFGROM_CFGROM_CIF_BASE_BURST_LENGTH_MAX_0_BASE_BURST_LENGTH_MAX_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_CIF_BASE_MEM_ADDR_WIDTH_0
> +#define NVDLA_CFGROM_CFGROM_CIF_BASE_MEM_ADDR_WIDTH_0			_MK_ADDR_CONST(0x20)
> +#define NVDLA_CFGROM_CFGROM_CIF_BASE_MEM_ADDR_WIDTH_0_CIF_BASE_MEM_ADDR_WIDTH_SHIFT			_MK_SHIFT_CONST(5)
> +#define NVDLA_CFGROM_CFGROM_CIF_BASE_MEM_ADDR_WIDTH_0_CIF_BASE_MEM_ADDR_WIDTH_FIELD			_MK_FIELD_CONST(0x7ffffff, NVDLA_CFGROM_CFGROM_CIF_BASE_MEM_ADDR_WIDTH_0_CIF_BASE_MEM_ADDR_WIDTH_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_CDMA_DESC_0
> +#define NVDLA_CFGROM_CFGROM_CDMA_DESC_0			_MK_ADDR_CONST(0x24)
> +#define NVDLA_CFGROM_CFGROM_CDMA_DESC_0_CDMA_DESC_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_CDMA_DESC_0_CDMA_DESC_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CDMA_DESC_0_CDMA_DESC_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_CDMA_CAP_INCOMPAT_0
> +#define NVDLA_CFGROM_CFGROM_CDMA_CAP_INCOMPAT_0			_MK_ADDR_CONST(0x28)
> +#define NVDLA_CFGROM_CFGROM_CDMA_CAP_INCOMPAT_0_CDMA_CAP_INCOMPAT_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_CDMA_CAP_INCOMPAT_0_CDMA_CAP_INCOMPAT_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CDMA_CAP_INCOMPAT_0_CDMA_CAP_INCOMPAT_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_CDMA_CAP_COMPAT_0
> +#define NVDLA_CFGROM_CFGROM_CDMA_CAP_COMPAT_0			_MK_ADDR_CONST(0x2c)
> +#define NVDLA_CFGROM_CFGROM_CDMA_CAP_COMPAT_0_CDMA_CAP_COMPAT_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_CDMA_CAP_COMPAT_0_CDMA_CAP_COMPAT_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CDMA_CAP_COMPAT_0_CDMA_CAP_COMPAT_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_CDMA_BASE_FEATURE_TYPES_0
> +#define NVDLA_CFGROM_CFGROM_CDMA_BASE_FEATURE_TYPES_0			_MK_ADDR_CONST(0x30)
> +#define NVDLA_CFGROM_CFGROM_CDMA_BASE_FEATURE_TYPES_0_CDMA_BASE_FEATURE_TYPES_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_CDMA_BASE_FEATURE_TYPES_0_CDMA_BASE_FEATURE_TYPES_FIELD			_MK_FIELD_CONST(0xfff, NVDLA_CFGROM_CFGROM_CDMA_BASE_FEATURE_TYPES_0_CDMA_BASE_FEATURE_TYPES_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_CDMA_BASE_WEIGHT_TYPES_0
> +#define NVDLA_CFGROM_CFGROM_CDMA_BASE_WEIGHT_TYPES_0			_MK_ADDR_CONST(0x34)
> +#define NVDLA_CFGROM_CFGROM_CDMA_BASE_WEIGHT_TYPES_0_CDMA_BASE_WEIGHT_TYPES_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_CDMA_BASE_WEIGHT_TYPES_0_CDMA_BASE_WEIGHT_TYPES_FIELD			_MK_FIELD_CONST(0xfff, NVDLA_CFGROM_CFGROM_CDMA_BASE_WEIGHT_TYPES_0_CDMA_BASE_WEIGHT_TYPES_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_CDMA_BASE_ATOMIC_C_0
> +#define NVDLA_CFGROM_CFGROM_CDMA_BASE_ATOMIC_C_0			_MK_ADDR_CONST(0x38)
> +#define NVDLA_CFGROM_CFGROM_CDMA_BASE_ATOMIC_C_0_CDMA_BASE_ATOMIC_C_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_CDMA_BASE_ATOMIC_C_0_CDMA_BASE_ATOMIC_C_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CDMA_BASE_ATOMIC_C_0_CDMA_BASE_ATOMIC_C_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_CDMA_BASE_ATOMIC_K_0
> +#define NVDLA_CFGROM_CFGROM_CDMA_BASE_ATOMIC_K_0			_MK_ADDR_CONST(0x3c)
> +#define NVDLA_CFGROM_CFGROM_CDMA_BASE_ATOMIC_K_0_CDMA_BASE_ATOMIC_K_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_CDMA_BASE_ATOMIC_K_0_CDMA_BASE_ATOMIC_K_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CDMA_BASE_ATOMIC_K_0_CDMA_BASE_ATOMIC_K_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_CDMA_BASE_ATOMIC_M_0
> +#define NVDLA_CFGROM_CFGROM_CDMA_BASE_ATOMIC_M_0			_MK_ADDR_CONST(0x40)
> +#define NVDLA_CFGROM_CFGROM_CDMA_BASE_ATOMIC_M_0_CDMA_BASE_ATOMIC_M_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_CDMA_BASE_ATOMIC_M_0_CDMA_BASE_ATOMIC_M_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CDMA_BASE_ATOMIC_M_0_CDMA_BASE_ATOMIC_M_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_CDMA_BASE_CBUF_BANK_NUM_0
> +#define NVDLA_CFGROM_CFGROM_CDMA_BASE_CBUF_BANK_NUM_0			_MK_ADDR_CONST(0x44)
> +#define NVDLA_CFGROM_CFGROM_CDMA_BASE_CBUF_BANK_NUM_0_CDMA_BASE_CBUF_BANK_NUM_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_CDMA_BASE_CBUF_BANK_NUM_0_CDMA_BASE_CBUF_BANK_NUM_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CDMA_BASE_CBUF_BANK_NUM_0_CDMA_BASE_CBUF_BANK_NUM_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_CDMA_BASE_CBUF_BANK_WIDTH_0
> +#define NVDLA_CFGROM_CFGROM_CDMA_BASE_CBUF_BANK_WIDTH_0			_MK_ADDR_CONST(0x48)
> +#define NVDLA_CFGROM_CFGROM_CDMA_BASE_CBUF_BANK_WIDTH_0_CDMA_BASE_CBUF_BANK_WIDTH_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_CDMA_BASE_CBUF_BANK_WIDTH_0_CDMA_BASE_CBUF_BANK_WIDTH_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CDMA_BASE_CBUF_BANK_WIDTH_0_CDMA_BASE_CBUF_BANK_WIDTH_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_CDMA_BASE_CBUF_BANK_DEPTH_0
> +#define NVDLA_CFGROM_CFGROM_CDMA_BASE_CBUF_BANK_DEPTH_0			_MK_ADDR_CONST(0x4c)
> +#define NVDLA_CFGROM_CFGROM_CDMA_BASE_CBUF_BANK_DEPTH_0_CDMA_BASE_CBUF_BANK_DEPTH_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_CDMA_BASE_CBUF_BANK_DEPTH_0_CDMA_BASE_CBUF_BANK_DEPTH_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CDMA_BASE_CBUF_BANK_DEPTH_0_CDMA_BASE_CBUF_BANK_DEPTH_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_CDMA_MULTI_BATCH_MAX_0
> +#define NVDLA_CFGROM_CFGROM_CDMA_MULTI_BATCH_MAX_0			_MK_ADDR_CONST(0x50)
> +#define NVDLA_CFGROM_CFGROM_CDMA_MULTI_BATCH_MAX_0_CDMA_MULTI_BATCH_MAX_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_CDMA_MULTI_BATCH_MAX_0_CDMA_MULTI_BATCH_MAX_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CDMA_MULTI_BATCH_MAX_0_CDMA_MULTI_BATCH_MAX_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_CDMA_IMAGE_IN_FORMATS_PACKED_0
> +#define NVDLA_CFGROM_CFGROM_CDMA_IMAGE_IN_FORMATS_PACKED_0			_MK_ADDR_CONST(0x54)
> +#define NVDLA_CFGROM_CFGROM_CDMA_IMAGE_IN_FORMATS_PACKED_0_CDMA_IMAGE_IN_FORMATS_PACKED_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_CDMA_IMAGE_IN_FORMATS_PACKED_0_CDMA_IMAGE_IN_FORMATS_PACKED_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CDMA_IMAGE_IN_FORMATS_PACKED_0_CDMA_IMAGE_IN_FORMATS_PACKED_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_CDMA_IMAGE_IN_FORMATS_SEMI_0
> +#define NVDLA_CFGROM_CFGROM_CDMA_IMAGE_IN_FORMATS_SEMI_0			_MK_ADDR_CONST(0x58)
> +#define NVDLA_CFGROM_CFGROM_CDMA_IMAGE_IN_FORMATS_SEMI_0_CDMA_IMAGE_IN_FORMATS_SEMI_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_CDMA_IMAGE_IN_FORMATS_SEMI_0_CDMA_IMAGE_IN_FORMATS_SEMI_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CDMA_IMAGE_IN_FORMATS_SEMI_0_CDMA_IMAGE_IN_FORMATS_SEMI_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_CBUF_DESC_0
> +#define NVDLA_CFGROM_CFGROM_CBUF_DESC_0			_MK_ADDR_CONST(0x5c)
> +#define NVDLA_CFGROM_CFGROM_CBUF_DESC_0_CBUF_DESC_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_CBUF_DESC_0_CBUF_DESC_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CBUF_DESC_0_CBUF_DESC_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_CBUF_CAP_INCOMPAT_0
> +#define NVDLA_CFGROM_CFGROM_CBUF_CAP_INCOMPAT_0			_MK_ADDR_CONST(0x60)
> +#define NVDLA_CFGROM_CFGROM_CBUF_CAP_INCOMPAT_0_CBUF_CAP_INCOMPAT_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_CBUF_CAP_INCOMPAT_0_CBUF_CAP_INCOMPAT_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CBUF_CAP_INCOMPAT_0_CBUF_CAP_INCOMPAT_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_CBUF_CAP_COMPAT_0
> +#define NVDLA_CFGROM_CFGROM_CBUF_CAP_COMPAT_0			_MK_ADDR_CONST(0x64)
> +#define NVDLA_CFGROM_CFGROM_CBUF_CAP_COMPAT_0_CBUF_CAP_COMPAT_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_CBUF_CAP_COMPAT_0_CBUF_CAP_COMPAT_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CBUF_CAP_COMPAT_0_CBUF_CAP_COMPAT_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_CBUF_BASE_CBUF_BANK_NUM_0
> +#define NVDLA_CFGROM_CFGROM_CBUF_BASE_CBUF_BANK_NUM_0			_MK_ADDR_CONST(0x68)
> +#define NVDLA_CFGROM_CFGROM_CBUF_BASE_CBUF_BANK_NUM_0_CBUF_BASE_CBUF_BANK_NUM_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_CBUF_BASE_CBUF_BANK_NUM_0_CBUF_BASE_CBUF_BANK_NUM_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CBUF_BASE_CBUF_BANK_NUM_0_CBUF_BASE_CBUF_BANK_NUM_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_CBUF_BASE_CBUF_BANK_WIDTH_0
> +#define NVDLA_CFGROM_CFGROM_CBUF_BASE_CBUF_BANK_WIDTH_0			_MK_ADDR_CONST(0x6c)
> +#define NVDLA_CFGROM_CFGROM_CBUF_BASE_CBUF_BANK_WIDTH_0_CBUF_BASE_CBUF_BANK_WIDTH_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_CBUF_BASE_CBUF_BANK_WIDTH_0_CBUF_BASE_CBUF_BANK_WIDTH_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CBUF_BASE_CBUF_BANK_WIDTH_0_CBUF_BASE_CBUF_BANK_WIDTH_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_CBUF_BASE_CBUF_BANK_DEPTH_0
> +#define NVDLA_CFGROM_CFGROM_CBUF_BASE_CBUF_BANK_DEPTH_0			_MK_ADDR_CONST(0x70)
> +#define NVDLA_CFGROM_CFGROM_CBUF_BASE_CBUF_BANK_DEPTH_0_CBUF_BASE_CBUF_BANK_DEPTH_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_CBUF_BASE_CBUF_BANK_DEPTH_0_CBUF_BASE_CBUF_BANK_DEPTH_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CBUF_BASE_CBUF_BANK_DEPTH_0_CBUF_BASE_CBUF_BANK_DEPTH_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_CBUF_BASE_CDMA_ID_0
> +#define NVDLA_CFGROM_CFGROM_CBUF_BASE_CDMA_ID_0			_MK_ADDR_CONST(0x74)
> +#define NVDLA_CFGROM_CFGROM_CBUF_BASE_CDMA_ID_0_CBUF_BASE_CDMA_ID_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_CBUF_BASE_CDMA_ID_0_CBUF_BASE_CDMA_ID_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CBUF_BASE_CDMA_ID_0_CBUF_BASE_CDMA_ID_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_CSC_DESC_0
> +#define NVDLA_CFGROM_CFGROM_CSC_DESC_0			_MK_ADDR_CONST(0x78)
> +#define NVDLA_CFGROM_CFGROM_CSC_DESC_0_CSC_DESC_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_CSC_DESC_0_CSC_DESC_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CSC_DESC_0_CSC_DESC_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_CSC_CAP_INCOMPAT_0
> +#define NVDLA_CFGROM_CFGROM_CSC_CAP_INCOMPAT_0			_MK_ADDR_CONST(0x7c)
> +#define NVDLA_CFGROM_CFGROM_CSC_CAP_INCOMPAT_0_CSC_CAP_INCOMPAT_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_CSC_CAP_INCOMPAT_0_CSC_CAP_INCOMPAT_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CSC_CAP_INCOMPAT_0_CSC_CAP_INCOMPAT_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_CSC_CAP_COMPAT_0
> +#define NVDLA_CFGROM_CFGROM_CSC_CAP_COMPAT_0			_MK_ADDR_CONST(0x80)
> +#define NVDLA_CFGROM_CFGROM_CSC_CAP_COMPAT_0_CSC_CAP_COMPAT_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_CSC_CAP_COMPAT_0_CSC_CAP_COMPAT_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CSC_CAP_COMPAT_0_CSC_CAP_COMPAT_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_CSC_BASE_FEATURE_TYPES_0
> +#define NVDLA_CFGROM_CFGROM_CSC_BASE_FEATURE_TYPES_0			_MK_ADDR_CONST(0x84)
> +#define NVDLA_CFGROM_CFGROM_CSC_BASE_FEATURE_TYPES_0_CSC_BASE_FEATURE_TYPES_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_CSC_BASE_FEATURE_TYPES_0_CSC_BASE_FEATURE_TYPES_FIELD			_MK_FIELD_CONST(0xfff, NVDLA_CFGROM_CFGROM_CSC_BASE_FEATURE_TYPES_0_CSC_BASE_FEATURE_TYPES_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_CSC_BASE_WEIGHT_TYPES_0
> +#define NVDLA_CFGROM_CFGROM_CSC_BASE_WEIGHT_TYPES_0			_MK_ADDR_CONST(0x88)
> +#define NVDLA_CFGROM_CFGROM_CSC_BASE_WEIGHT_TYPES_0_CSC_BASE_WEIGHT_TYPES_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_CSC_BASE_WEIGHT_TYPES_0_CSC_BASE_WEIGHT_TYPES_FIELD			_MK_FIELD_CONST(0xfff, NVDLA_CFGROM_CFGROM_CSC_BASE_WEIGHT_TYPES_0_CSC_BASE_WEIGHT_TYPES_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_CSC_BASE_ATOMIC_C_0
> +#define NVDLA_CFGROM_CFGROM_CSC_BASE_ATOMIC_C_0			_MK_ADDR_CONST(0x8c)
> +#define NVDLA_CFGROM_CFGROM_CSC_BASE_ATOMIC_C_0_CSC_BASE_ATOMIC_C_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_CSC_BASE_ATOMIC_C_0_CSC_BASE_ATOMIC_C_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CSC_BASE_ATOMIC_C_0_CSC_BASE_ATOMIC_C_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_CSC_BASE_ATOMIC_K_0
> +#define NVDLA_CFGROM_CFGROM_CSC_BASE_ATOMIC_K_0			_MK_ADDR_CONST(0x90)
> +#define NVDLA_CFGROM_CFGROM_CSC_BASE_ATOMIC_K_0_CSC_BASE_ATOMIC_K_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_CSC_BASE_ATOMIC_K_0_CSC_BASE_ATOMIC_K_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CSC_BASE_ATOMIC_K_0_CSC_BASE_ATOMIC_K_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_CSC_BASE_ATOMIC_M_0
> +#define NVDLA_CFGROM_CFGROM_CSC_BASE_ATOMIC_M_0			_MK_ADDR_CONST(0x94)
> +#define NVDLA_CFGROM_CFGROM_CSC_BASE_ATOMIC_M_0_CSC_BASE_ATOMIC_M_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_CSC_BASE_ATOMIC_M_0_CSC_BASE_ATOMIC_M_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CSC_BASE_ATOMIC_M_0_CSC_BASE_ATOMIC_M_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_CSC_BASE_CBUF_BANK_NUM_0
> +#define NVDLA_CFGROM_CFGROM_CSC_BASE_CBUF_BANK_NUM_0			_MK_ADDR_CONST(0x98)
> +#define NVDLA_CFGROM_CFGROM_CSC_BASE_CBUF_BANK_NUM_0_CSC_BASE_CBUF_BANK_NUM_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_CSC_BASE_CBUF_BANK_NUM_0_CSC_BASE_CBUF_BANK_NUM_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CSC_BASE_CBUF_BANK_NUM_0_CSC_BASE_CBUF_BANK_NUM_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_CSC_BASE_CBUF_BANK_WIDTH_0
> +#define NVDLA_CFGROM_CFGROM_CSC_BASE_CBUF_BANK_WIDTH_0			_MK_ADDR_CONST(0x9c)
> +#define NVDLA_CFGROM_CFGROM_CSC_BASE_CBUF_BANK_WIDTH_0_CSC_BASE_CBUF_BANK_WIDTH_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_CSC_BASE_CBUF_BANK_WIDTH_0_CSC_BASE_CBUF_BANK_WIDTH_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CSC_BASE_CBUF_BANK_WIDTH_0_CSC_BASE_CBUF_BANK_WIDTH_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_CSC_BASE_CBUF_BANK_DEPTH_0
> +#define NVDLA_CFGROM_CFGROM_CSC_BASE_CBUF_BANK_DEPTH_0			_MK_ADDR_CONST(0xa0)
> +#define NVDLA_CFGROM_CFGROM_CSC_BASE_CBUF_BANK_DEPTH_0_CSC_BASE_CBUF_BANK_DEPTH_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_CSC_BASE_CBUF_BANK_DEPTH_0_CSC_BASE_CBUF_BANK_DEPTH_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CSC_BASE_CBUF_BANK_DEPTH_0_CSC_BASE_CBUF_BANK_DEPTH_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_CSC_BASE_CDMA_ID_0
> +#define NVDLA_CFGROM_CFGROM_CSC_BASE_CDMA_ID_0			_MK_ADDR_CONST(0xa4)
> +#define NVDLA_CFGROM_CFGROM_CSC_BASE_CDMA_ID_0_CSC_BASE_CDMA_ID_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_CSC_BASE_CDMA_ID_0_CSC_BASE_CDMA_ID_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CSC_BASE_CDMA_ID_0_CSC_BASE_CDMA_ID_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_CSC_MULTI_BATCH_MAX_0
> +#define NVDLA_CFGROM_CFGROM_CSC_MULTI_BATCH_MAX_0			_MK_ADDR_CONST(0xa8)
> +#define NVDLA_CFGROM_CFGROM_CSC_MULTI_BATCH_MAX_0_CSC_MULTI_BATCH_MAX_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_CSC_MULTI_BATCH_MAX_0_CSC_MULTI_BATCH_MAX_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CSC_MULTI_BATCH_MAX_0_CSC_MULTI_BATCH_MAX_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_CMAC_A_DESC_0
> +#define NVDLA_CFGROM_CFGROM_CMAC_A_DESC_0			_MK_ADDR_CONST(0xac)
> +#define NVDLA_CFGROM_CFGROM_CMAC_A_DESC_0_CMAC_A_DESC_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_CMAC_A_DESC_0_CMAC_A_DESC_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CMAC_A_DESC_0_CMAC_A_DESC_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_CMAC_A_CAP_INCOMPAT_0
> +#define NVDLA_CFGROM_CFGROM_CMAC_A_CAP_INCOMPAT_0			_MK_ADDR_CONST(0xb0)
> +#define NVDLA_CFGROM_CFGROM_CMAC_A_CAP_INCOMPAT_0_CMAC_A_CAP_INCOMPAT_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_CMAC_A_CAP_INCOMPAT_0_CMAC_A_CAP_INCOMPAT_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CMAC_A_CAP_INCOMPAT_0_CMAC_A_CAP_INCOMPAT_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_CMAC_A_CAP_COMPAT_0
> +#define NVDLA_CFGROM_CFGROM_CMAC_A_CAP_COMPAT_0			_MK_ADDR_CONST(0xb4)
> +#define NVDLA_CFGROM_CFGROM_CMAC_A_CAP_COMPAT_0_CMAC_A_CAP_COMPAT_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_CMAC_A_CAP_COMPAT_0_CMAC_A_CAP_COMPAT_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CMAC_A_CAP_COMPAT_0_CMAC_A_CAP_COMPAT_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_CMAC_A_BASE_FEATURE_TYPES_0
> +#define NVDLA_CFGROM_CFGROM_CMAC_A_BASE_FEATURE_TYPES_0			_MK_ADDR_CONST(0xb8)
> +#define NVDLA_CFGROM_CFGROM_CMAC_A_BASE_FEATURE_TYPES_0_CMAC_A_BASE_FEATURE_TYPES_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_CMAC_A_BASE_FEATURE_TYPES_0_CMAC_A_BASE_FEATURE_TYPES_FIELD			_MK_FIELD_CONST(0xfff, NVDLA_CFGROM_CFGROM_CMAC_A_BASE_FEATURE_TYPES_0_CMAC_A_BASE_FEATURE_TYPES_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_CMAC_A_BASE_WEIGHT_TYPES_0
> +#define NVDLA_CFGROM_CFGROM_CMAC_A_BASE_WEIGHT_TYPES_0			_MK_ADDR_CONST(0xbc)
> +#define NVDLA_CFGROM_CFGROM_CMAC_A_BASE_WEIGHT_TYPES_0_CMAC_A_BASE_WEIGHT_TYPES_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_CMAC_A_BASE_WEIGHT_TYPES_0_CMAC_A_BASE_WEIGHT_TYPES_FIELD			_MK_FIELD_CONST(0xfff, NVDLA_CFGROM_CFGROM_CMAC_A_BASE_WEIGHT_TYPES_0_CMAC_A_BASE_WEIGHT_TYPES_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_CMAC_A_BASE_ATOMIC_C_0
> +#define NVDLA_CFGROM_CFGROM_CMAC_A_BASE_ATOMIC_C_0			_MK_ADDR_CONST(0xc0)
> +#define NVDLA_CFGROM_CFGROM_CMAC_A_BASE_ATOMIC_C_0_CMAC_A_BASE_ATOMIC_C_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_CMAC_A_BASE_ATOMIC_C_0_CMAC_A_BASE_ATOMIC_C_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CMAC_A_BASE_ATOMIC_C_0_CMAC_A_BASE_ATOMIC_C_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_CMAC_A_BASE_ATOMIC_K_0
> +#define NVDLA_CFGROM_CFGROM_CMAC_A_BASE_ATOMIC_K_0			_MK_ADDR_CONST(0xc4)
> +#define NVDLA_CFGROM_CFGROM_CMAC_A_BASE_ATOMIC_K_0_CMAC_A_BASE_ATOMIC_K_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_CMAC_A_BASE_ATOMIC_K_0_CMAC_A_BASE_ATOMIC_K_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CMAC_A_BASE_ATOMIC_K_0_CMAC_A_BASE_ATOMIC_K_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_CMAC_A_BASE_CDMA_ID_0
> +#define NVDLA_CFGROM_CFGROM_CMAC_A_BASE_CDMA_ID_0			_MK_ADDR_CONST(0xc8)
> +#define NVDLA_CFGROM_CFGROM_CMAC_A_BASE_CDMA_ID_0_CMAC_A_BASE_CDMA_ID_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_CMAC_A_BASE_CDMA_ID_0_CMAC_A_BASE_CDMA_ID_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CMAC_A_BASE_CDMA_ID_0_CMAC_A_BASE_CDMA_ID_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_CMAC_B_DESC_0
> +#define NVDLA_CFGROM_CFGROM_CMAC_B_DESC_0			_MK_ADDR_CONST(0xcc)
> +#define NVDLA_CFGROM_CFGROM_CMAC_B_DESC_0_CMAC_B_DESC_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_CMAC_B_DESC_0_CMAC_B_DESC_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CMAC_B_DESC_0_CMAC_B_DESC_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_CMAC_B_CAP_INCOMPAT_0
> +#define NVDLA_CFGROM_CFGROM_CMAC_B_CAP_INCOMPAT_0			_MK_ADDR_CONST(0xd0)
> +#define NVDLA_CFGROM_CFGROM_CMAC_B_CAP_INCOMPAT_0_CMAC_B_CAP_INCOMPAT_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_CMAC_B_CAP_INCOMPAT_0_CMAC_B_CAP_INCOMPAT_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CMAC_B_CAP_INCOMPAT_0_CMAC_B_CAP_INCOMPAT_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_CMAC_B_CAP_COMPAT_0
> +#define NVDLA_CFGROM_CFGROM_CMAC_B_CAP_COMPAT_0			_MK_ADDR_CONST(0xd4)
> +#define NVDLA_CFGROM_CFGROM_CMAC_B_CAP_COMPAT_0_CMAC_B_CAP_COMPAT_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_CMAC_B_CAP_COMPAT_0_CMAC_B_CAP_COMPAT_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CMAC_B_CAP_COMPAT_0_CMAC_B_CAP_COMPAT_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_CMAC_B_BASE_FEATURE_TYPES_0
> +#define NVDLA_CFGROM_CFGROM_CMAC_B_BASE_FEATURE_TYPES_0			_MK_ADDR_CONST(0xd8)
> +#define NVDLA_CFGROM_CFGROM_CMAC_B_BASE_FEATURE_TYPES_0_CMAC_B_BASE_FEATURE_TYPES_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_CMAC_B_BASE_FEATURE_TYPES_0_CMAC_B_BASE_FEATURE_TYPES_FIELD			_MK_FIELD_CONST(0xfff, NVDLA_CFGROM_CFGROM_CMAC_B_BASE_FEATURE_TYPES_0_CMAC_B_BASE_FEATURE_TYPES_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_CMAC_B_BASE_WEIGHT_TYPES_0
> +#define NVDLA_CFGROM_CFGROM_CMAC_B_BASE_WEIGHT_TYPES_0			_MK_ADDR_CONST(0xdc)
> +#define NVDLA_CFGROM_CFGROM_CMAC_B_BASE_WEIGHT_TYPES_0_CMAC_B_BASE_WEIGHT_TYPES_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_CMAC_B_BASE_WEIGHT_TYPES_0_CMAC_B_BASE_WEIGHT_TYPES_FIELD			_MK_FIELD_CONST(0xfff, NVDLA_CFGROM_CFGROM_CMAC_B_BASE_WEIGHT_TYPES_0_CMAC_B_BASE_WEIGHT_TYPES_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_CMAC_B_BASE_ATOMIC_C_0
> +#define NVDLA_CFGROM_CFGROM_CMAC_B_BASE_ATOMIC_C_0			_MK_ADDR_CONST(0xe0)
> +#define NVDLA_CFGROM_CFGROM_CMAC_B_BASE_ATOMIC_C_0_CMAC_B_BASE_ATOMIC_C_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_CMAC_B_BASE_ATOMIC_C_0_CMAC_B_BASE_ATOMIC_C_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CMAC_B_BASE_ATOMIC_C_0_CMAC_B_BASE_ATOMIC_C_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_CMAC_B_BASE_ATOMIC_K_0
> +#define NVDLA_CFGROM_CFGROM_CMAC_B_BASE_ATOMIC_K_0			_MK_ADDR_CONST(0xe4)
> +#define NVDLA_CFGROM_CFGROM_CMAC_B_BASE_ATOMIC_K_0_CMAC_B_BASE_ATOMIC_K_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_CMAC_B_BASE_ATOMIC_K_0_CMAC_B_BASE_ATOMIC_K_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CMAC_B_BASE_ATOMIC_K_0_CMAC_B_BASE_ATOMIC_K_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_CMAC_B_BASE_CDMA_ID_0
> +#define NVDLA_CFGROM_CFGROM_CMAC_B_BASE_CDMA_ID_0			_MK_ADDR_CONST(0xe8)
> +#define NVDLA_CFGROM_CFGROM_CMAC_B_BASE_CDMA_ID_0_CMAC_B_BASE_CDMA_ID_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_CMAC_B_BASE_CDMA_ID_0_CMAC_B_BASE_CDMA_ID_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CMAC_B_BASE_CDMA_ID_0_CMAC_B_BASE_CDMA_ID_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_CACC_DESC_0
> +#define NVDLA_CFGROM_CFGROM_CACC_DESC_0			_MK_ADDR_CONST(0xec)
> +#define NVDLA_CFGROM_CFGROM_CACC_DESC_0_CACC_DESC_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_CACC_DESC_0_CACC_DESC_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CACC_DESC_0_CACC_DESC_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_CACC_CAP_INCOMPAT_0
> +#define NVDLA_CFGROM_CFGROM_CACC_CAP_INCOMPAT_0			_MK_ADDR_CONST(0xf0)
> +#define NVDLA_CFGROM_CFGROM_CACC_CAP_INCOMPAT_0_CACC_CAP_INCOMPAT_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_CACC_CAP_INCOMPAT_0_CACC_CAP_INCOMPAT_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CACC_CAP_INCOMPAT_0_CACC_CAP_INCOMPAT_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_CACC_CAP_COMPAT_0
> +#define NVDLA_CFGROM_CFGROM_CACC_CAP_COMPAT_0			_MK_ADDR_CONST(0xf4)
> +#define NVDLA_CFGROM_CFGROM_CACC_CAP_COMPAT_0_CACC_CAP_COMPAT_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_CACC_CAP_COMPAT_0_CACC_CAP_COMPAT_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CACC_CAP_COMPAT_0_CACC_CAP_COMPAT_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_CACC_BASE_FEATURE_TYPES_0
> +#define NVDLA_CFGROM_CFGROM_CACC_BASE_FEATURE_TYPES_0			_MK_ADDR_CONST(0xf8)
> +#define NVDLA_CFGROM_CFGROM_CACC_BASE_FEATURE_TYPES_0_CACC_BASE_FEATURE_TYPES_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_CACC_BASE_FEATURE_TYPES_0_CACC_BASE_FEATURE_TYPES_FIELD			_MK_FIELD_CONST(0xfff, NVDLA_CFGROM_CFGROM_CACC_BASE_FEATURE_TYPES_0_CACC_BASE_FEATURE_TYPES_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_CACC_BASE_WEIGHT_TYPES_0
> +#define NVDLA_CFGROM_CFGROM_CACC_BASE_WEIGHT_TYPES_0			_MK_ADDR_CONST(0xfc)
> +#define NVDLA_CFGROM_CFGROM_CACC_BASE_WEIGHT_TYPES_0_CACC_BASE_WEIGHT_TYPES_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_CACC_BASE_WEIGHT_TYPES_0_CACC_BASE_WEIGHT_TYPES_FIELD			_MK_FIELD_CONST(0xfff, NVDLA_CFGROM_CFGROM_CACC_BASE_WEIGHT_TYPES_0_CACC_BASE_WEIGHT_TYPES_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_CACC_BASE_ATOMIC_C_0
> +#define NVDLA_CFGROM_CFGROM_CACC_BASE_ATOMIC_C_0			_MK_ADDR_CONST(0x100)
> +#define NVDLA_CFGROM_CFGROM_CACC_BASE_ATOMIC_C_0_CACC_BASE_ATOMIC_C_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_CACC_BASE_ATOMIC_C_0_CACC_BASE_ATOMIC_C_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CACC_BASE_ATOMIC_C_0_CACC_BASE_ATOMIC_C_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_CACC_BASE_ATOMIC_K_0
> +#define NVDLA_CFGROM_CFGROM_CACC_BASE_ATOMIC_K_0			_MK_ADDR_CONST(0x104)
> +#define NVDLA_CFGROM_CFGROM_CACC_BASE_ATOMIC_K_0_CACC_BASE_ATOMIC_K_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_CACC_BASE_ATOMIC_K_0_CACC_BASE_ATOMIC_K_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CACC_BASE_ATOMIC_K_0_CACC_BASE_ATOMIC_K_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_CACC_BASE_CDMA_ID_0
> +#define NVDLA_CFGROM_CFGROM_CACC_BASE_CDMA_ID_0			_MK_ADDR_CONST(0x108)
> +#define NVDLA_CFGROM_CFGROM_CACC_BASE_CDMA_ID_0_CACC_BASE_CDMA_ID_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_CACC_BASE_CDMA_ID_0_CACC_BASE_CDMA_ID_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CACC_BASE_CDMA_ID_0_CACC_BASE_CDMA_ID_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_CACC_MULTI_BATCH_MAX_0
> +#define NVDLA_CFGROM_CFGROM_CACC_MULTI_BATCH_MAX_0			_MK_ADDR_CONST(0x10c)
> +#define NVDLA_CFGROM_CFGROM_CACC_MULTI_BATCH_MAX_0_CACC_MULTI_BATCH_MAX_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_CACC_MULTI_BATCH_MAX_0_CACC_MULTI_BATCH_MAX_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CACC_MULTI_BATCH_MAX_0_CACC_MULTI_BATCH_MAX_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_SDP_RDMA_DESC_0
> +#define NVDLA_CFGROM_CFGROM_SDP_RDMA_DESC_0			_MK_ADDR_CONST(0x110)
> +#define NVDLA_CFGROM_CFGROM_SDP_RDMA_DESC_0_SDP_RDMA_DESC_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_SDP_RDMA_DESC_0_SDP_RDMA_DESC_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_SDP_RDMA_DESC_0_SDP_RDMA_DESC_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_SDP_RDMA_CAP_INCOMPAT_0
> +#define NVDLA_CFGROM_CFGROM_SDP_RDMA_CAP_INCOMPAT_0			_MK_ADDR_CONST(0x114)
> +#define NVDLA_CFGROM_CFGROM_SDP_RDMA_CAP_INCOMPAT_0_SDP_RDMA_CAP_INCOMPAT_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_SDP_RDMA_CAP_INCOMPAT_0_SDP_RDMA_CAP_INCOMPAT_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_SDP_RDMA_CAP_INCOMPAT_0_SDP_RDMA_CAP_INCOMPAT_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_SDP_RDMA_CAP_COMPAT_0
> +#define NVDLA_CFGROM_CFGROM_SDP_RDMA_CAP_COMPAT_0			_MK_ADDR_CONST(0x118)
> +#define NVDLA_CFGROM_CFGROM_SDP_RDMA_CAP_COMPAT_0_SDP_RDMA_CAP_COMPAT_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_SDP_RDMA_CAP_COMPAT_0_SDP_RDMA_CAP_COMPAT_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_SDP_RDMA_CAP_COMPAT_0_SDP_RDMA_CAP_COMPAT_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_SDP_RDMA_BASE_ATOMIC_M_0
> +#define NVDLA_CFGROM_CFGROM_SDP_RDMA_BASE_ATOMIC_M_0			_MK_ADDR_CONST(0x11c)
> +#define NVDLA_CFGROM_CFGROM_SDP_RDMA_BASE_ATOMIC_M_0_SDP_RDMA_BASE_ATOMIC_M_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_SDP_RDMA_BASE_ATOMIC_M_0_SDP_RDMA_BASE_ATOMIC_M_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_SDP_RDMA_BASE_ATOMIC_M_0_SDP_RDMA_BASE_ATOMIC_M_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_SDP_RDMA_BASE_SDP_ID_0
> +#define NVDLA_CFGROM_CFGROM_SDP_RDMA_BASE_SDP_ID_0			_MK_ADDR_CONST(0x120)
> +#define NVDLA_CFGROM_CFGROM_SDP_RDMA_BASE_SDP_ID_0_SDP_RDMA_BASE_SDP_ID_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_SDP_RDMA_BASE_SDP_ID_0_SDP_RDMA_BASE_SDP_ID_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_SDP_RDMA_BASE_SDP_ID_0_SDP_RDMA_BASE_SDP_ID_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_SDP_DESC_0
> +#define NVDLA_CFGROM_CFGROM_SDP_DESC_0			_MK_ADDR_CONST(0x124)
> +#define NVDLA_CFGROM_CFGROM_SDP_DESC_0_SDP_DESC_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_SDP_DESC_0_SDP_DESC_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_SDP_DESC_0_SDP_DESC_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_SDP_CAP_INCOMPAT_0
> +#define NVDLA_CFGROM_CFGROM_SDP_CAP_INCOMPAT_0			_MK_ADDR_CONST(0x128)
> +#define NVDLA_CFGROM_CFGROM_SDP_CAP_INCOMPAT_0_SDP_CAP_INCOMPAT_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_SDP_CAP_INCOMPAT_0_SDP_CAP_INCOMPAT_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_SDP_CAP_INCOMPAT_0_SDP_CAP_INCOMPAT_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_SDP_CAP_COMPAT_0
> +#define NVDLA_CFGROM_CFGROM_SDP_CAP_COMPAT_0			_MK_ADDR_CONST(0x12c)
> +#define NVDLA_CFGROM_CFGROM_SDP_CAP_COMPAT_0_SDP_CAP_COMPAT_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_SDP_CAP_COMPAT_0_SDP_CAP_COMPAT_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_SDP_CAP_COMPAT_0_SDP_CAP_COMPAT_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_SDP_BASE_FEATURE_TYPES_0
> +#define NVDLA_CFGROM_CFGROM_SDP_BASE_FEATURE_TYPES_0			_MK_ADDR_CONST(0x130)
> +#define NVDLA_CFGROM_CFGROM_SDP_BASE_FEATURE_TYPES_0_SDP_BASE_FEATURE_TYPES_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_SDP_BASE_FEATURE_TYPES_0_SDP_BASE_FEATURE_TYPES_FIELD			_MK_FIELD_CONST(0xfff, NVDLA_CFGROM_CFGROM_SDP_BASE_FEATURE_TYPES_0_SDP_BASE_FEATURE_TYPES_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_SDP_BASE_WEIGHT_TYPES_0
> +#define NVDLA_CFGROM_CFGROM_SDP_BASE_WEIGHT_TYPES_0			_MK_ADDR_CONST(0x134)
> +#define NVDLA_CFGROM_CFGROM_SDP_BASE_WEIGHT_TYPES_0_SDP_BASE_WEIGHT_TYPES_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_SDP_BASE_WEIGHT_TYPES_0_SDP_BASE_WEIGHT_TYPES_FIELD			_MK_FIELD_CONST(0xfff, NVDLA_CFGROM_CFGROM_SDP_BASE_WEIGHT_TYPES_0_SDP_BASE_WEIGHT_TYPES_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_SDP_BASE_CDMA_ID_0
> +#define NVDLA_CFGROM_CFGROM_SDP_BASE_CDMA_ID_0			_MK_ADDR_CONST(0x138)
> +#define NVDLA_CFGROM_CFGROM_SDP_BASE_CDMA_ID_0_SDP_BASE_CDMA_ID_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_SDP_BASE_CDMA_ID_0_SDP_BASE_CDMA_ID_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_SDP_BASE_CDMA_ID_0_SDP_BASE_CDMA_ID_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_SDP_MULTI_BATCH_MAX_0
> +#define NVDLA_CFGROM_CFGROM_SDP_MULTI_BATCH_MAX_0			_MK_ADDR_CONST(0x13c)
> +#define NVDLA_CFGROM_CFGROM_SDP_MULTI_BATCH_MAX_0_SDP_MULTI_BATCH_MAX_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_SDP_MULTI_BATCH_MAX_0_SDP_MULTI_BATCH_MAX_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_SDP_MULTI_BATCH_MAX_0_SDP_MULTI_BATCH_MAX_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_SDP_BS_THROUGHPUT_0
> +#define NVDLA_CFGROM_CFGROM_SDP_BS_THROUGHPUT_0			_MK_ADDR_CONST(0x140)
> +#define NVDLA_CFGROM_CFGROM_SDP_BS_THROUGHPUT_0_SDP_BS_THROUGHPUT_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_SDP_BS_THROUGHPUT_0_SDP_BS_THROUGHPUT_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_SDP_BS_THROUGHPUT_0_SDP_BS_THROUGHPUT_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_SDP_BN_THROUGHPUT_0
> +#define NVDLA_CFGROM_CFGROM_SDP_BN_THROUGHPUT_0			_MK_ADDR_CONST(0x144)
> +#define NVDLA_CFGROM_CFGROM_SDP_BN_THROUGHPUT_0_SDP_BN_THROUGHPUT_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_SDP_BN_THROUGHPUT_0_SDP_BN_THROUGHPUT_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_SDP_BN_THROUGHPUT_0_SDP_BN_THROUGHPUT_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_SDP_EW_THROUGHPUT_0
> +#define NVDLA_CFGROM_CFGROM_SDP_EW_THROUGHPUT_0			_MK_ADDR_CONST(0x148)
> +#define NVDLA_CFGROM_CFGROM_SDP_EW_THROUGHPUT_0_SDP_EW_THROUGHPUT_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_SDP_EW_THROUGHPUT_0_SDP_EW_THROUGHPUT_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_SDP_EW_THROUGHPUT_0_SDP_EW_THROUGHPUT_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_PDP_RDMA_DESC_0
> +#define NVDLA_CFGROM_CFGROM_PDP_RDMA_DESC_0			_MK_ADDR_CONST(0x14c)
> +#define NVDLA_CFGROM_CFGROM_PDP_RDMA_DESC_0_PDP_RDMA_DESC_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_PDP_RDMA_DESC_0_PDP_RDMA_DESC_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_PDP_RDMA_DESC_0_PDP_RDMA_DESC_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_PDP_RDMA_CAP_INCOMPAT_0
> +#define NVDLA_CFGROM_CFGROM_PDP_RDMA_CAP_INCOMPAT_0			_MK_ADDR_CONST(0x150)
> +#define NVDLA_CFGROM_CFGROM_PDP_RDMA_CAP_INCOMPAT_0_PDP_RDMA_CAP_INCOMPAT_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_PDP_RDMA_CAP_INCOMPAT_0_PDP_RDMA_CAP_INCOMPAT_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_PDP_RDMA_CAP_INCOMPAT_0_PDP_RDMA_CAP_INCOMPAT_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_PDP_RDMA_CAP_COMPAT_0
> +#define NVDLA_CFGROM_CFGROM_PDP_RDMA_CAP_COMPAT_0			_MK_ADDR_CONST(0x154)
> +#define NVDLA_CFGROM_CFGROM_PDP_RDMA_CAP_COMPAT_0_PDP_RDMA_CAP_COMPAT_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_PDP_RDMA_CAP_COMPAT_0_PDP_RDMA_CAP_COMPAT_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_PDP_RDMA_CAP_COMPAT_0_PDP_RDMA_CAP_COMPAT_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_PDP_RDMA_BASE_ATOMIC_M_0
> +#define NVDLA_CFGROM_CFGROM_PDP_RDMA_BASE_ATOMIC_M_0			_MK_ADDR_CONST(0x158)
> +#define NVDLA_CFGROM_CFGROM_PDP_RDMA_BASE_ATOMIC_M_0_PDP_RDMA_BASE_ATOMIC_M_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_PDP_RDMA_BASE_ATOMIC_M_0_PDP_RDMA_BASE_ATOMIC_M_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_PDP_RDMA_BASE_ATOMIC_M_0_PDP_RDMA_BASE_ATOMIC_M_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_PDP_RDMA_BASE_PDP_ID_0
> +#define NVDLA_CFGROM_CFGROM_PDP_RDMA_BASE_PDP_ID_0			_MK_ADDR_CONST(0x15c)
> +#define NVDLA_CFGROM_CFGROM_PDP_RDMA_BASE_PDP_ID_0_PDP_RDMA_BASE_PDP_ID_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_PDP_RDMA_BASE_PDP_ID_0_PDP_RDMA_BASE_PDP_ID_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_PDP_RDMA_BASE_PDP_ID_0_PDP_RDMA_BASE_PDP_ID_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_PDP_DESC_0
> +#define NVDLA_CFGROM_CFGROM_PDP_DESC_0			_MK_ADDR_CONST(0x160)
> +#define NVDLA_CFGROM_CFGROM_PDP_DESC_0_PDP_DESC_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_PDP_DESC_0_PDP_DESC_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_PDP_DESC_0_PDP_DESC_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_PDP_CAP_INCOMPAT_0
> +#define NVDLA_CFGROM_CFGROM_PDP_CAP_INCOMPAT_0			_MK_ADDR_CONST(0x164)
> +#define NVDLA_CFGROM_CFGROM_PDP_CAP_INCOMPAT_0_PDP_CAP_INCOMPAT_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_PDP_CAP_INCOMPAT_0_PDP_CAP_INCOMPAT_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_PDP_CAP_INCOMPAT_0_PDP_CAP_INCOMPAT_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_PDP_CAP_COMPAT_0
> +#define NVDLA_CFGROM_CFGROM_PDP_CAP_COMPAT_0			_MK_ADDR_CONST(0x168)
> +#define NVDLA_CFGROM_CFGROM_PDP_CAP_COMPAT_0_PDP_CAP_COMPAT_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_PDP_CAP_COMPAT_0_PDP_CAP_COMPAT_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_PDP_CAP_COMPAT_0_PDP_CAP_COMPAT_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_PDP_BASE_FEATURE_TYPES_0
> +#define NVDLA_CFGROM_CFGROM_PDP_BASE_FEATURE_TYPES_0			_MK_ADDR_CONST(0x16c)
> +#define NVDLA_CFGROM_CFGROM_PDP_BASE_FEATURE_TYPES_0_PDP_BASE_FEATURE_TYPES_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_PDP_BASE_FEATURE_TYPES_0_PDP_BASE_FEATURE_TYPES_FIELD			_MK_FIELD_CONST(0xfff, NVDLA_CFGROM_CFGROM_PDP_BASE_FEATURE_TYPES_0_PDP_BASE_FEATURE_TYPES_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_PDP_BASE_THROUGHPUT_0
> +#define NVDLA_CFGROM_CFGROM_PDP_BASE_THROUGHPUT_0			_MK_ADDR_CONST(0x170)
> +#define NVDLA_CFGROM_CFGROM_PDP_BASE_THROUGHPUT_0_PDP_BASE_THROUGHPUT_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_PDP_BASE_THROUGHPUT_0_PDP_BASE_THROUGHPUT_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_PDP_BASE_THROUGHPUT_0_PDP_BASE_THROUGHPUT_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_CDP_RDMA_DESC_0
> +#define NVDLA_CFGROM_CFGROM_CDP_RDMA_DESC_0			_MK_ADDR_CONST(0x174)
> +#define NVDLA_CFGROM_CFGROM_CDP_RDMA_DESC_0_CDP_RDMA_DESC_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_CDP_RDMA_DESC_0_CDP_RDMA_DESC_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CDP_RDMA_DESC_0_CDP_RDMA_DESC_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_CDP_RDMA_CAP_INCOMPAT_0
> +#define NVDLA_CFGROM_CFGROM_CDP_RDMA_CAP_INCOMPAT_0			_MK_ADDR_CONST(0x178)
> +#define NVDLA_CFGROM_CFGROM_CDP_RDMA_CAP_INCOMPAT_0_CDP_RDMA_CAP_INCOMPAT_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_CDP_RDMA_CAP_INCOMPAT_0_CDP_RDMA_CAP_INCOMPAT_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CDP_RDMA_CAP_INCOMPAT_0_CDP_RDMA_CAP_INCOMPAT_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_CDP_RDMA_CAP_COMPAT_0
> +#define NVDLA_CFGROM_CFGROM_CDP_RDMA_CAP_COMPAT_0			_MK_ADDR_CONST(0x17c)
> +#define NVDLA_CFGROM_CFGROM_CDP_RDMA_CAP_COMPAT_0_CDP_RDMA_CAP_COMPAT_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_CDP_RDMA_CAP_COMPAT_0_CDP_RDMA_CAP_COMPAT_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CDP_RDMA_CAP_COMPAT_0_CDP_RDMA_CAP_COMPAT_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_CDP_RDMA_BASE_ATOMIC_M_0
> +#define NVDLA_CFGROM_CFGROM_CDP_RDMA_BASE_ATOMIC_M_0			_MK_ADDR_CONST(0x180)
> +#define NVDLA_CFGROM_CFGROM_CDP_RDMA_BASE_ATOMIC_M_0_CDP_RDMA_BASE_ATOMIC_M_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_CDP_RDMA_BASE_ATOMIC_M_0_CDP_RDMA_BASE_ATOMIC_M_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CDP_RDMA_BASE_ATOMIC_M_0_CDP_RDMA_BASE_ATOMIC_M_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_CDP_RDMA_BASE_CDP_ID_0
> +#define NVDLA_CFGROM_CFGROM_CDP_RDMA_BASE_CDP_ID_0			_MK_ADDR_CONST(0x184)
> +#define NVDLA_CFGROM_CFGROM_CDP_RDMA_BASE_CDP_ID_0_CDP_RDMA_BASE_CDP_ID_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_CDP_RDMA_BASE_CDP_ID_0_CDP_RDMA_BASE_CDP_ID_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CDP_RDMA_BASE_CDP_ID_0_CDP_RDMA_BASE_CDP_ID_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_CDP_DESC_0
> +#define NVDLA_CFGROM_CFGROM_CDP_DESC_0			_MK_ADDR_CONST(0x188)
> +#define NVDLA_CFGROM_CFGROM_CDP_DESC_0_CDP_DESC_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_CDP_DESC_0_CDP_DESC_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CDP_DESC_0_CDP_DESC_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_CDP_CAP_INCOMPAT_0
> +#define NVDLA_CFGROM_CFGROM_CDP_CAP_INCOMPAT_0			_MK_ADDR_CONST(0x18c)
> +#define NVDLA_CFGROM_CFGROM_CDP_CAP_INCOMPAT_0_CDP_CAP_INCOMPAT_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_CDP_CAP_INCOMPAT_0_CDP_CAP_INCOMPAT_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CDP_CAP_INCOMPAT_0_CDP_CAP_INCOMPAT_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_CDP_CAP_COMPAT_0
> +#define NVDLA_CFGROM_CFGROM_CDP_CAP_COMPAT_0			_MK_ADDR_CONST(0x190)
> +#define NVDLA_CFGROM_CFGROM_CDP_CAP_COMPAT_0_CDP_CAP_COMPAT_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_CDP_CAP_COMPAT_0_CDP_CAP_COMPAT_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CDP_CAP_COMPAT_0_CDP_CAP_COMPAT_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_CDP_BASE_FEATURE_TYPES_0
> +#define NVDLA_CFGROM_CFGROM_CDP_BASE_FEATURE_TYPES_0			_MK_ADDR_CONST(0x194)
> +#define NVDLA_CFGROM_CFGROM_CDP_BASE_FEATURE_TYPES_0_CDP_BASE_FEATURE_TYPES_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_CDP_BASE_FEATURE_TYPES_0_CDP_BASE_FEATURE_TYPES_FIELD			_MK_FIELD_CONST(0xfff, NVDLA_CFGROM_CFGROM_CDP_BASE_FEATURE_TYPES_0_CDP_BASE_FEATURE_TYPES_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_CDP_BASE_THROUGHPUT_0
> +#define NVDLA_CFGROM_CFGROM_CDP_BASE_THROUGHPUT_0			_MK_ADDR_CONST(0x198)
> +#define NVDLA_CFGROM_CFGROM_CDP_BASE_THROUGHPUT_0_CDP_BASE_THROUGHPUT_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_CDP_BASE_THROUGHPUT_0_CDP_BASE_THROUGHPUT_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CDP_BASE_THROUGHPUT_0_CDP_BASE_THROUGHPUT_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_END_OF_LIST_0
> +#define NVDLA_CFGROM_CFGROM_END_OF_LIST_0			_MK_ADDR_CONST(0x19c)
> +#define NVDLA_CFGROM_CFGROM_END_OF_LIST_0_END_OF_LIST_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_END_OF_LIST_0_END_OF_LIST_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_END_OF_LIST_0_END_OF_LIST_SHIFT)
> +
> +
> +
> +// To satisfy various compilers and platforms,
> +// we let users control the types and syntax of certain constants, using macros.
> +#ifndef _MK_SHIFT_CONST
> +  #define _MK_SHIFT_CONST(_constant_) _constant_
> +#endif
> +#ifndef _MK_MASK_CONST
> +  #define _MK_MASK_CONST(_constant_) _constant_
> +#endif
> +#ifndef _MK_ENUM_CONST
> +  #define _MK_ENUM_CONST(_constant_) (_constant_ ## UL)
> +#endif
> +#ifndef _MK_ADDR_CONST
> +  #define _MK_ADDR_CONST(_constant_) _constant_
> +#endif
> +#ifndef _MK_FIELD_CONST
> +  #define _MK_FIELD_CONST(_mask_, _shift_) (_MK_MASK_CONST(_mask_) << _MK_SHIFT_CONST(_shift_))
> +#endif
> +
> +
> +// Register GLB_S_NVDLA_HW_VERSION_0
> +#define GLB_S_NVDLA_HW_VERSION_0			_MK_ADDR_CONST(0x1000)
> +#define GLB_S_NVDLA_HW_VERSION_0_MAJOR_SHIFT			_MK_SHIFT_CONST(0)
> +#define GLB_S_NVDLA_HW_VERSION_0_MAJOR_FIELD			_MK_FIELD_CONST(0xff, GLB_S_NVDLA_HW_VERSION_0_MAJOR_SHIFT)
> +#define GLB_S_NVDLA_HW_VERSION_0_MINOR_SHIFT			_MK_SHIFT_CONST(8)
> +#define GLB_S_NVDLA_HW_VERSION_0_MINOR_FIELD			_MK_FIELD_CONST(0xffff, GLB_S_NVDLA_HW_VERSION_0_MINOR_SHIFT)
> +
> +
> +// Register GLB_S_INTR_MASK_0
> +#define GLB_S_INTR_MASK_0			_MK_ADDR_CONST(0x1004)
> +#define GLB_S_INTR_MASK_0_SDP_DONE_MASK0_SHIFT			_MK_SHIFT_CONST(0)
> +#define GLB_S_INTR_MASK_0_SDP_DONE_MASK0_FIELD			_MK_FIELD_CONST(0x1, GLB_S_INTR_MASK_0_SDP_DONE_MASK0_SHIFT)
> +#define GLB_S_INTR_MASK_0_SDP_DONE_MASK1_SHIFT			_MK_SHIFT_CONST(1)
> +#define GLB_S_INTR_MASK_0_SDP_DONE_MASK1_FIELD			_MK_FIELD_CONST(0x1, GLB_S_INTR_MASK_0_SDP_DONE_MASK1_SHIFT)
> +#define GLB_S_INTR_MASK_0_CDP_DONE_MASK0_SHIFT			_MK_SHIFT_CONST(2)
> +#define GLB_S_INTR_MASK_0_CDP_DONE_MASK0_FIELD			_MK_FIELD_CONST(0x1, GLB_S_INTR_MASK_0_CDP_DONE_MASK0_SHIFT)
> +#define GLB_S_INTR_MASK_0_CDP_DONE_MASK1_SHIFT			_MK_SHIFT_CONST(3)
> +#define GLB_S_INTR_MASK_0_CDP_DONE_MASK1_FIELD			_MK_FIELD_CONST(0x1, GLB_S_INTR_MASK_0_CDP_DONE_MASK1_SHIFT)
> +#define GLB_S_INTR_MASK_0_PDP_DONE_MASK0_SHIFT			_MK_SHIFT_CONST(4)
> +#define GLB_S_INTR_MASK_0_PDP_DONE_MASK0_FIELD			_MK_FIELD_CONST(0x1, GLB_S_INTR_MASK_0_PDP_DONE_MASK0_SHIFT)
> +#define GLB_S_INTR_MASK_0_PDP_DONE_MASK1_SHIFT			_MK_SHIFT_CONST(5)
> +#define GLB_S_INTR_MASK_0_PDP_DONE_MASK1_FIELD			_MK_FIELD_CONST(0x1, GLB_S_INTR_MASK_0_PDP_DONE_MASK1_SHIFT)
> +#define GLB_S_INTR_MASK_0_BDMA_DONE_MASK0_SHIFT			_MK_SHIFT_CONST(6)
> +#define GLB_S_INTR_MASK_0_BDMA_DONE_MASK0_FIELD			_MK_FIELD_CONST(0x1, GLB_S_INTR_MASK_0_BDMA_DONE_MASK0_SHIFT)
> +#define GLB_S_INTR_MASK_0_BDMA_DONE_MASK1_SHIFT			_MK_SHIFT_CONST(7)
> +#define GLB_S_INTR_MASK_0_BDMA_DONE_MASK1_FIELD			_MK_FIELD_CONST(0x1, GLB_S_INTR_MASK_0_BDMA_DONE_MASK1_SHIFT)
> +#define GLB_S_INTR_MASK_0_RUBIK_DONE_MASK0_SHIFT			_MK_SHIFT_CONST(8)
> +#define GLB_S_INTR_MASK_0_RUBIK_DONE_MASK0_FIELD			_MK_FIELD_CONST(0x1, GLB_S_INTR_MASK_0_RUBIK_DONE_MASK0_SHIFT)
> +#define GLB_S_INTR_MASK_0_RUBIK_DONE_MASK1_SHIFT			_MK_SHIFT_CONST(9)
> +#define GLB_S_INTR_MASK_0_RUBIK_DONE_MASK1_FIELD			_MK_FIELD_CONST(0x1, GLB_S_INTR_MASK_0_RUBIK_DONE_MASK1_SHIFT)
> +#define GLB_S_INTR_MASK_0_CDMA_DAT_DONE_MASK0_SHIFT			_MK_SHIFT_CONST(16)
> +#define GLB_S_INTR_MASK_0_CDMA_DAT_DONE_MASK0_FIELD			_MK_FIELD_CONST(0x1, GLB_S_INTR_MASK_0_CDMA_DAT_DONE_MASK0_SHIFT)
> +#define GLB_S_INTR_MASK_0_CDMA_DAT_DONE_MASK1_SHIFT			_MK_SHIFT_CONST(17)
> +#define GLB_S_INTR_MASK_0_CDMA_DAT_DONE_MASK1_FIELD			_MK_FIELD_CONST(0x1, GLB_S_INTR_MASK_0_CDMA_DAT_DONE_MASK1_SHIFT)
> +#define GLB_S_INTR_MASK_0_CDMA_WT_DONE_MASK0_SHIFT			_MK_SHIFT_CONST(18)
> +#define GLB_S_INTR_MASK_0_CDMA_WT_DONE_MASK0_FIELD			_MK_FIELD_CONST(0x1, GLB_S_INTR_MASK_0_CDMA_WT_DONE_MASK0_SHIFT)
> +#define GLB_S_INTR_MASK_0_CDMA_WT_DONE_MASK1_SHIFT			_MK_SHIFT_CONST(19)
> +#define GLB_S_INTR_MASK_0_CDMA_WT_DONE_MASK1_FIELD			_MK_FIELD_CONST(0x1, GLB_S_INTR_MASK_0_CDMA_WT_DONE_MASK1_SHIFT)
> +#define GLB_S_INTR_MASK_0_CACC_DONE_MASK0_SHIFT			_MK_SHIFT_CONST(20)
> +#define GLB_S_INTR_MASK_0_CACC_DONE_MASK0_FIELD			_MK_FIELD_CONST(0x1, GLB_S_INTR_MASK_0_CACC_DONE_MASK0_SHIFT)
> +#define GLB_S_INTR_MASK_0_CACC_DONE_MASK1_SHIFT			_MK_SHIFT_CONST(21)
> +#define GLB_S_INTR_MASK_0_CACC_DONE_MASK1_FIELD			_MK_FIELD_CONST(0x1, GLB_S_INTR_MASK_0_CACC_DONE_MASK1_SHIFT)
> +
> +
> +// Register GLB_S_INTR_SET_0
> +#define GLB_S_INTR_SET_0			_MK_ADDR_CONST(0x1008)
> +#define GLB_S_INTR_SET_0_SDP_DONE_SET0_SHIFT			_MK_SHIFT_CONST(0)
> +#define GLB_S_INTR_SET_0_SDP_DONE_SET0_FIELD			_MK_FIELD_CONST(0x1, GLB_S_INTR_SET_0_SDP_DONE_SET0_SHIFT)
> +#define GLB_S_INTR_SET_0_SDP_DONE_SET1_SHIFT			_MK_SHIFT_CONST(1)
> +#define GLB_S_INTR_SET_0_SDP_DONE_SET1_FIELD			_MK_FIELD_CONST(0x1, GLB_S_INTR_SET_0_SDP_DONE_SET1_SHIFT)
> +#define GLB_S_INTR_SET_0_CDP_DONE_SET0_SHIFT			_MK_SHIFT_CONST(2)
> +#define GLB_S_INTR_SET_0_CDP_DONE_SET0_FIELD			_MK_FIELD_CONST(0x1, GLB_S_INTR_SET_0_CDP_DONE_SET0_SHIFT)
> +#define GLB_S_INTR_SET_0_CDP_DONE_SET1_SHIFT			_MK_SHIFT_CONST(3)
> +#define GLB_S_INTR_SET_0_CDP_DONE_SET1_FIELD			_MK_FIELD_CONST(0x1, GLB_S_INTR_SET_0_CDP_DONE_SET1_SHIFT)
> +#define GLB_S_INTR_SET_0_PDP_DONE_SET0_SHIFT			_MK_SHIFT_CONST(4)
> +#define GLB_S_INTR_SET_0_PDP_DONE_SET0_FIELD			_MK_FIELD_CONST(0x1, GLB_S_INTR_SET_0_PDP_DONE_SET0_SHIFT)
> +#define GLB_S_INTR_SET_0_PDP_DONE_SET1_SHIFT			_MK_SHIFT_CONST(5)
> +#define GLB_S_INTR_SET_0_PDP_DONE_SET1_FIELD			_MK_FIELD_CONST(0x1, GLB_S_INTR_SET_0_PDP_DONE_SET1_SHIFT)
> +#define GLB_S_INTR_SET_0_BDMA_DONE_SET0_SHIFT			_MK_SHIFT_CONST(6)
> +#define GLB_S_INTR_SET_0_BDMA_DONE_SET0_FIELD			_MK_FIELD_CONST(0x1, GLB_S_INTR_SET_0_BDMA_DONE_SET0_SHIFT)
> +#define GLB_S_INTR_SET_0_BDMA_DONE_SET1_SHIFT			_MK_SHIFT_CONST(7)
> +#define GLB_S_INTR_SET_0_BDMA_DONE_SET1_FIELD			_MK_FIELD_CONST(0x1, GLB_S_INTR_SET_0_BDMA_DONE_SET1_SHIFT)
> +#define GLB_S_INTR_SET_0_RUBIK_DONE_SET0_SHIFT			_MK_SHIFT_CONST(8)
> +#define GLB_S_INTR_SET_0_RUBIK_DONE_SET0_FIELD			_MK_FIELD_CONST(0x1, GLB_S_INTR_SET_0_RUBIK_DONE_SET0_SHIFT)
> +#define GLB_S_INTR_SET_0_RUBIK_DONE_SET1_SHIFT			_MK_SHIFT_CONST(9)
> +#define GLB_S_INTR_SET_0_RUBIK_DONE_SET1_FIELD			_MK_FIELD_CONST(0x1, GLB_S_INTR_SET_0_RUBIK_DONE_SET1_SHIFT)
> +#define GLB_S_INTR_SET_0_CDMA_DAT_DONE_SET0_SHIFT			_MK_SHIFT_CONST(16)
> +#define GLB_S_INTR_SET_0_CDMA_DAT_DONE_SET0_FIELD			_MK_FIELD_CONST(0x1, GLB_S_INTR_SET_0_CDMA_DAT_DONE_SET0_SHIFT)
> +#define GLB_S_INTR_SET_0_CDMA_DAT_DONE_SET1_SHIFT			_MK_SHIFT_CONST(17)
> +#define GLB_S_INTR_SET_0_CDMA_DAT_DONE_SET1_FIELD			_MK_FIELD_CONST(0x1, GLB_S_INTR_SET_0_CDMA_DAT_DONE_SET1_SHIFT)
> +#define GLB_S_INTR_SET_0_CDMA_WT_DONE_SET0_SHIFT			_MK_SHIFT_CONST(18)
> +#define GLB_S_INTR_SET_0_CDMA_WT_DONE_SET0_FIELD			_MK_FIELD_CONST(0x1, GLB_S_INTR_SET_0_CDMA_WT_DONE_SET0_SHIFT)
> +#define GLB_S_INTR_SET_0_CDMA_WT_DONE_SET1_SHIFT			_MK_SHIFT_CONST(19)
> +#define GLB_S_INTR_SET_0_CDMA_WT_DONE_SET1_FIELD			_MK_FIELD_CONST(0x1, GLB_S_INTR_SET_0_CDMA_WT_DONE_SET1_SHIFT)
> +#define GLB_S_INTR_SET_0_CACC_DONE_SET0_SHIFT			_MK_SHIFT_CONST(20)
> +#define GLB_S_INTR_SET_0_CACC_DONE_SET0_FIELD			_MK_FIELD_CONST(0x1, GLB_S_INTR_SET_0_CACC_DONE_SET0_SHIFT)
> +#define GLB_S_INTR_SET_0_CACC_DONE_SET1_SHIFT			_MK_SHIFT_CONST(21)
> +#define GLB_S_INTR_SET_0_CACC_DONE_SET1_FIELD			_MK_FIELD_CONST(0x1, GLB_S_INTR_SET_0_CACC_DONE_SET1_SHIFT)
> +
> +
> +// Register GLB_S_INTR_STATUS_0
> +#define GLB_S_INTR_STATUS_0			_MK_ADDR_CONST(0x100c)
> +#define GLB_S_INTR_STATUS_0_SDP_DONE_STATUS0_SHIFT			_MK_SHIFT_CONST(0)
> +#define GLB_S_INTR_STATUS_0_SDP_DONE_STATUS0_FIELD			_MK_FIELD_CONST(0x1, GLB_S_INTR_STATUS_0_SDP_DONE_STATUS0_SHIFT)
> +#define GLB_S_INTR_STATUS_0_SDP_DONE_STATUS1_SHIFT			_MK_SHIFT_CONST(1)
> +#define GLB_S_INTR_STATUS_0_SDP_DONE_STATUS1_FIELD			_MK_FIELD_CONST(0x1, GLB_S_INTR_STATUS_0_SDP_DONE_STATUS1_SHIFT)
> +#define GLB_S_INTR_STATUS_0_CDP_DONE_STATUS0_SHIFT			_MK_SHIFT_CONST(2)
> +#define GLB_S_INTR_STATUS_0_CDP_DONE_STATUS0_FIELD			_MK_FIELD_CONST(0x1, GLB_S_INTR_STATUS_0_CDP_DONE_STATUS0_SHIFT)
> +#define GLB_S_INTR_STATUS_0_CDP_DONE_STATUS1_SHIFT			_MK_SHIFT_CONST(3)
> +#define GLB_S_INTR_STATUS_0_CDP_DONE_STATUS1_FIELD			_MK_FIELD_CONST(0x1, GLB_S_INTR_STATUS_0_CDP_DONE_STATUS1_SHIFT)
> +#define GLB_S_INTR_STATUS_0_PDP_DONE_STATUS0_SHIFT			_MK_SHIFT_CONST(4)
> +#define GLB_S_INTR_STATUS_0_PDP_DONE_STATUS0_FIELD			_MK_FIELD_CONST(0x1, GLB_S_INTR_STATUS_0_PDP_DONE_STATUS0_SHIFT)
> +#define GLB_S_INTR_STATUS_0_PDP_DONE_STATUS1_SHIFT			_MK_SHIFT_CONST(5)
> +#define GLB_S_INTR_STATUS_0_PDP_DONE_STATUS1_FIELD			_MK_FIELD_CONST(0x1, GLB_S_INTR_STATUS_0_PDP_DONE_STATUS1_SHIFT)
> +#define GLB_S_INTR_STATUS_0_BDMA_DONE_STATUS0_SHIFT			_MK_SHIFT_CONST(6)
> +#define GLB_S_INTR_STATUS_0_BDMA_DONE_STATUS0_FIELD			_MK_FIELD_CONST(0x1, GLB_S_INTR_STATUS_0_BDMA_DONE_STATUS0_SHIFT)
> +#define GLB_S_INTR_STATUS_0_BDMA_DONE_STATUS1_SHIFT			_MK_SHIFT_CONST(7)
> +#define GLB_S_INTR_STATUS_0_BDMA_DONE_STATUS1_FIELD			_MK_FIELD_CONST(0x1, GLB_S_INTR_STATUS_0_BDMA_DONE_STATUS1_SHIFT)
> +#define GLB_S_INTR_STATUS_0_RUBIK_DONE_STATUS0_SHIFT			_MK_SHIFT_CONST(8)
> +#define GLB_S_INTR_STATUS_0_RUBIK_DONE_STATUS0_FIELD			_MK_FIELD_CONST(0x1, GLB_S_INTR_STATUS_0_RUBIK_DONE_STATUS0_SHIFT)
> +#define GLB_S_INTR_STATUS_0_RUBIK_DONE_STATUS1_SHIFT			_MK_SHIFT_CONST(9)
> +#define GLB_S_INTR_STATUS_0_RUBIK_DONE_STATUS1_FIELD			_MK_FIELD_CONST(0x1, GLB_S_INTR_STATUS_0_RUBIK_DONE_STATUS1_SHIFT)
> +#define GLB_S_INTR_STATUS_0_CDMA_DAT_DONE_STATUS0_SHIFT			_MK_SHIFT_CONST(16)
> +#define GLB_S_INTR_STATUS_0_CDMA_DAT_DONE_STATUS0_FIELD			_MK_FIELD_CONST(0x1, GLB_S_INTR_STATUS_0_CDMA_DAT_DONE_STATUS0_SHIFT)
> +#define GLB_S_INTR_STATUS_0_CDMA_DAT_DONE_STATUS1_SHIFT			_MK_SHIFT_CONST(17)
> +#define GLB_S_INTR_STATUS_0_CDMA_DAT_DONE_STATUS1_FIELD			_MK_FIELD_CONST(0x1, GLB_S_INTR_STATUS_0_CDMA_DAT_DONE_STATUS1_SHIFT)
> +#define GLB_S_INTR_STATUS_0_CDMA_WT_DONE_STATUS0_SHIFT			_MK_SHIFT_CONST(18)
> +#define GLB_S_INTR_STATUS_0_CDMA_WT_DONE_STATUS0_FIELD			_MK_FIELD_CONST(0x1, GLB_S_INTR_STATUS_0_CDMA_WT_DONE_STATUS0_SHIFT)
> +#define GLB_S_INTR_STATUS_0_CDMA_WT_DONE_STATUS1_SHIFT			_MK_SHIFT_CONST(19)
> +#define GLB_S_INTR_STATUS_0_CDMA_WT_DONE_STATUS1_FIELD			_MK_FIELD_CONST(0x1, GLB_S_INTR_STATUS_0_CDMA_WT_DONE_STATUS1_SHIFT)
> +#define GLB_S_INTR_STATUS_0_CACC_DONE_STATUS0_SHIFT			_MK_SHIFT_CONST(20)
> +#define GLB_S_INTR_STATUS_0_CACC_DONE_STATUS0_FIELD			_MK_FIELD_CONST(0x1, GLB_S_INTR_STATUS_0_CACC_DONE_STATUS0_SHIFT)
> +#define GLB_S_INTR_STATUS_0_CACC_DONE_STATUS1_SHIFT			_MK_SHIFT_CONST(21)
> +#define GLB_S_INTR_STATUS_0_CACC_DONE_STATUS1_FIELD			_MK_FIELD_CONST(0x1, GLB_S_INTR_STATUS_0_CACC_DONE_STATUS1_SHIFT)
> +
> +
> +
> +// To satisfy various compilers and platforms,
> +// we let users control the types and syntax of certain constants, using macros.
> +#ifndef _MK_SHIFT_CONST
> +  #define _MK_SHIFT_CONST(_constant_) _constant_
> +#endif
> +#ifndef _MK_MASK_CONST
> +  #define _MK_MASK_CONST(_constant_) _constant_
> +#endif
> +#ifndef _MK_ENUM_CONST
> +  #define _MK_ENUM_CONST(_constant_) (_constant_ ## UL)
> +#endif
> +#ifndef _MK_ADDR_CONST
> +  #define _MK_ADDR_CONST(_constant_) _constant_
> +#endif
> +#ifndef _MK_FIELD_CONST
> +  #define _MK_FIELD_CONST(_mask_, _shift_) (_MK_MASK_CONST(_mask_) << _MK_SHIFT_CONST(_shift_))
> +#endif
> +
> +
> +// Register NVDLA_MCIF_CFG_RD_WEIGHT_0_0
> +#define NVDLA_MCIF_CFG_RD_WEIGHT_0_0			_MK_ADDR_CONST(0x2000)
> +#define NVDLA_MCIF_CFG_RD_WEIGHT_0_0_RD_WEIGHT_BDMA_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_MCIF_CFG_RD_WEIGHT_0_0_RD_WEIGHT_BDMA_FIELD			_MK_FIELD_CONST(0xff, NVDLA_MCIF_CFG_RD_WEIGHT_0_0_RD_WEIGHT_BDMA_SHIFT)
> +#define NVDLA_MCIF_CFG_RD_WEIGHT_0_0_RD_WEIGHT_SDP_SHIFT			_MK_SHIFT_CONST(8)
> +#define NVDLA_MCIF_CFG_RD_WEIGHT_0_0_RD_WEIGHT_SDP_FIELD			_MK_FIELD_CONST(0xff, NVDLA_MCIF_CFG_RD_WEIGHT_0_0_RD_WEIGHT_SDP_SHIFT)
> +#define NVDLA_MCIF_CFG_RD_WEIGHT_0_0_RD_WEIGHT_PDP_SHIFT			_MK_SHIFT_CONST(16)
> +#define NVDLA_MCIF_CFG_RD_WEIGHT_0_0_RD_WEIGHT_PDP_FIELD			_MK_FIELD_CONST(0xff, NVDLA_MCIF_CFG_RD_WEIGHT_0_0_RD_WEIGHT_PDP_SHIFT)
> +#define NVDLA_MCIF_CFG_RD_WEIGHT_0_0_RD_WEIGHT_CDP_SHIFT			_MK_SHIFT_CONST(24)
> +#define NVDLA_MCIF_CFG_RD_WEIGHT_0_0_RD_WEIGHT_CDP_FIELD			_MK_FIELD_CONST(0xff, NVDLA_MCIF_CFG_RD_WEIGHT_0_0_RD_WEIGHT_CDP_SHIFT)
> +
> +
> +// Register NVDLA_MCIF_CFG_RD_WEIGHT_1_0
> +#define NVDLA_MCIF_CFG_RD_WEIGHT_1_0			_MK_ADDR_CONST(0x2004)
> +#define NVDLA_MCIF_CFG_RD_WEIGHT_1_0_RD_WEIGHT_SDP_B_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_MCIF_CFG_RD_WEIGHT_1_0_RD_WEIGHT_SDP_B_FIELD			_MK_FIELD_CONST(0xff, NVDLA_MCIF_CFG_RD_WEIGHT_1_0_RD_WEIGHT_SDP_B_SHIFT)
> +#define NVDLA_MCIF_CFG_RD_WEIGHT_1_0_RD_WEIGHT_SDP_N_SHIFT			_MK_SHIFT_CONST(8)
> +#define NVDLA_MCIF_CFG_RD_WEIGHT_1_0_RD_WEIGHT_SDP_N_FIELD			_MK_FIELD_CONST(0xff, NVDLA_MCIF_CFG_RD_WEIGHT_1_0_RD_WEIGHT_SDP_N_SHIFT)
> +#define NVDLA_MCIF_CFG_RD_WEIGHT_1_0_RD_WEIGHT_SDP_E_SHIFT			_MK_SHIFT_CONST(16)
> +#define NVDLA_MCIF_CFG_RD_WEIGHT_1_0_RD_WEIGHT_SDP_E_FIELD			_MK_FIELD_CONST(0xff, NVDLA_MCIF_CFG_RD_WEIGHT_1_0_RD_WEIGHT_SDP_E_SHIFT)
> +#define NVDLA_MCIF_CFG_RD_WEIGHT_1_0_RD_WEIGHT_CDMA_DAT_SHIFT			_MK_SHIFT_CONST(24)
> +#define NVDLA_MCIF_CFG_RD_WEIGHT_1_0_RD_WEIGHT_CDMA_DAT_FIELD			_MK_FIELD_CONST(0xff, NVDLA_MCIF_CFG_RD_WEIGHT_1_0_RD_WEIGHT_CDMA_DAT_SHIFT)
> +
> +
> +// Register NVDLA_MCIF_CFG_RD_WEIGHT_2_0
> +#define NVDLA_MCIF_CFG_RD_WEIGHT_2_0			_MK_ADDR_CONST(0x2008)
> +#define NVDLA_MCIF_CFG_RD_WEIGHT_2_0_RD_WEIGHT_CDMA_WT_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_MCIF_CFG_RD_WEIGHT_2_0_RD_WEIGHT_CDMA_WT_FIELD			_MK_FIELD_CONST(0xff, NVDLA_MCIF_CFG_RD_WEIGHT_2_0_RD_WEIGHT_CDMA_WT_SHIFT)
> +#define NVDLA_MCIF_CFG_RD_WEIGHT_2_0_RD_WEIGHT_RBK_SHIFT			_MK_SHIFT_CONST(8)
> +#define NVDLA_MCIF_CFG_RD_WEIGHT_2_0_RD_WEIGHT_RBK_FIELD			_MK_FIELD_CONST(0xff, NVDLA_MCIF_CFG_RD_WEIGHT_2_0_RD_WEIGHT_RBK_SHIFT)
> +#define NVDLA_MCIF_CFG_RD_WEIGHT_2_0_RD_WEIGHT_RSV_1_SHIFT			_MK_SHIFT_CONST(16)
> +#define NVDLA_MCIF_CFG_RD_WEIGHT_2_0_RD_WEIGHT_RSV_1_FIELD			_MK_FIELD_CONST(0xff, NVDLA_MCIF_CFG_RD_WEIGHT_2_0_RD_WEIGHT_RSV_1_SHIFT)
> +#define NVDLA_MCIF_CFG_RD_WEIGHT_2_0_RD_WEIGHT_RSV_0_SHIFT			_MK_SHIFT_CONST(24)
> +#define NVDLA_MCIF_CFG_RD_WEIGHT_2_0_RD_WEIGHT_RSV_0_FIELD			_MK_FIELD_CONST(0xff, NVDLA_MCIF_CFG_RD_WEIGHT_2_0_RD_WEIGHT_RSV_0_SHIFT)
> +
> +
> +// Register NVDLA_MCIF_CFG_WR_WEIGHT_0_0
> +#define NVDLA_MCIF_CFG_WR_WEIGHT_0_0			_MK_ADDR_CONST(0x200c)
> +#define NVDLA_MCIF_CFG_WR_WEIGHT_0_0_WR_WEIGHT_BDMA_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_MCIF_CFG_WR_WEIGHT_0_0_WR_WEIGHT_BDMA_FIELD			_MK_FIELD_CONST(0xff, NVDLA_MCIF_CFG_WR_WEIGHT_0_0_WR_WEIGHT_BDMA_SHIFT)
> +#define NVDLA_MCIF_CFG_WR_WEIGHT_0_0_WR_WEIGHT_SDP_SHIFT			_MK_SHIFT_CONST(8)
> +#define NVDLA_MCIF_CFG_WR_WEIGHT_0_0_WR_WEIGHT_SDP_FIELD			_MK_FIELD_CONST(0xff, NVDLA_MCIF_CFG_WR_WEIGHT_0_0_WR_WEIGHT_SDP_SHIFT)
> +#define NVDLA_MCIF_CFG_WR_WEIGHT_0_0_WR_WEIGHT_PDP_SHIFT			_MK_SHIFT_CONST(16)
> +#define NVDLA_MCIF_CFG_WR_WEIGHT_0_0_WR_WEIGHT_PDP_FIELD			_MK_FIELD_CONST(0xff, NVDLA_MCIF_CFG_WR_WEIGHT_0_0_WR_WEIGHT_PDP_SHIFT)
> +#define NVDLA_MCIF_CFG_WR_WEIGHT_0_0_WR_WEIGHT_CDP_SHIFT			_MK_SHIFT_CONST(24)
> +#define NVDLA_MCIF_CFG_WR_WEIGHT_0_0_WR_WEIGHT_CDP_FIELD			_MK_FIELD_CONST(0xff, NVDLA_MCIF_CFG_WR_WEIGHT_0_0_WR_WEIGHT_CDP_SHIFT)
> +
> +
> +// Register NVDLA_MCIF_CFG_WR_WEIGHT_1_0
> +#define NVDLA_MCIF_CFG_WR_WEIGHT_1_0			_MK_ADDR_CONST(0x2010)
> +#define NVDLA_MCIF_CFG_WR_WEIGHT_1_0_WR_WEIGHT_RBK_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_MCIF_CFG_WR_WEIGHT_1_0_WR_WEIGHT_RBK_FIELD			_MK_FIELD_CONST(0xff, NVDLA_MCIF_CFG_WR_WEIGHT_1_0_WR_WEIGHT_RBK_SHIFT)
> +#define NVDLA_MCIF_CFG_WR_WEIGHT_1_0_WR_WEIGHT_RSV_2_SHIFT			_MK_SHIFT_CONST(8)
> +#define NVDLA_MCIF_CFG_WR_WEIGHT_1_0_WR_WEIGHT_RSV_2_FIELD			_MK_FIELD_CONST(0xff, NVDLA_MCIF_CFG_WR_WEIGHT_1_0_WR_WEIGHT_RSV_2_SHIFT)
> +#define NVDLA_MCIF_CFG_WR_WEIGHT_1_0_WR_WEIGHT_RSV_1_SHIFT			_MK_SHIFT_CONST(16)
> +#define NVDLA_MCIF_CFG_WR_WEIGHT_1_0_WR_WEIGHT_RSV_1_FIELD			_MK_FIELD_CONST(0xff, NVDLA_MCIF_CFG_WR_WEIGHT_1_0_WR_WEIGHT_RSV_1_SHIFT)
> +#define NVDLA_MCIF_CFG_WR_WEIGHT_1_0_WR_WEIGHT_RSV_0_SHIFT			_MK_SHIFT_CONST(24)
> +#define NVDLA_MCIF_CFG_WR_WEIGHT_1_0_WR_WEIGHT_RSV_0_FIELD			_MK_FIELD_CONST(0xff, NVDLA_MCIF_CFG_WR_WEIGHT_1_0_WR_WEIGHT_RSV_0_SHIFT)
> +
> +
> +// Register NVDLA_MCIF_CFG_OUTSTANDING_CNT_0
> +#define NVDLA_MCIF_CFG_OUTSTANDING_CNT_0			_MK_ADDR_CONST(0x2014)
> +#define NVDLA_MCIF_CFG_OUTSTANDING_CNT_0_RD_OS_CNT_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_MCIF_CFG_OUTSTANDING_CNT_0_RD_OS_CNT_FIELD			_MK_FIELD_CONST(0xff, NVDLA_MCIF_CFG_OUTSTANDING_CNT_0_RD_OS_CNT_SHIFT)
> +#define NVDLA_MCIF_CFG_OUTSTANDING_CNT_0_WR_OS_CNT_SHIFT			_MK_SHIFT_CONST(8)
> +#define NVDLA_MCIF_CFG_OUTSTANDING_CNT_0_WR_OS_CNT_FIELD			_MK_FIELD_CONST(0xff, NVDLA_MCIF_CFG_OUTSTANDING_CNT_0_WR_OS_CNT_SHIFT)
> +
> +
> +// Register NVDLA_MCIF_STATUS_0
> +#define NVDLA_MCIF_STATUS_0			_MK_ADDR_CONST(0x2018)
> +#define NVDLA_MCIF_STATUS_0_IDLE_SHIFT			_MK_SHIFT_CONST(8)
> +#define NVDLA_MCIF_STATUS_0_IDLE_FIELD			_MK_FIELD_CONST(0x1, NVDLA_MCIF_STATUS_0_IDLE_SHIFT)
> +#define NVDLA_MCIF_STATUS_0_IDLE_NO			_MK_ENUM_CONST(0x0)
> +#define NVDLA_MCIF_STATUS_0_IDLE_YES			_MK_ENUM_CONST(0x1)
> +
> +
> +
> +// To satisfy various compilers and platforms,
> +// we let users control the types and syntax of certain constants, using macros.
> +#ifndef _MK_SHIFT_CONST
> +  #define _MK_SHIFT_CONST(_constant_) _constant_
> +#endif
> +#ifndef _MK_MASK_CONST
> +  #define _MK_MASK_CONST(_constant_) _constant_
> +#endif
> +#ifndef _MK_ENUM_CONST
> +  #define _MK_ENUM_CONST(_constant_) (_constant_ ## UL)
> +#endif
> +#ifndef _MK_ADDR_CONST
> +  #define _MK_ADDR_CONST(_constant_) _constant_
> +#endif
> +#ifndef _MK_FIELD_CONST
> +  #define _MK_FIELD_CONST(_mask_, _shift_) (_MK_MASK_CONST(_mask_) << _MK_SHIFT_CONST(_shift_))
> +#endif
> +
> +
> +// Register CDMA_S_STATUS_0
> +#define CDMA_S_STATUS_0			_MK_ADDR_CONST(0x3000)
> +#define CDMA_S_STATUS_0_STATUS_0_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDMA_S_STATUS_0_STATUS_0_FIELD			_MK_FIELD_CONST(0x3, CDMA_S_STATUS_0_STATUS_0_SHIFT)
> +#define CDMA_S_STATUS_0_STATUS_0_IDLE			_MK_ENUM_CONST(0x0)
> +#define CDMA_S_STATUS_0_STATUS_0_RUNNING			_MK_ENUM_CONST(0x1)
> +#define CDMA_S_STATUS_0_STATUS_0_PENDING			_MK_ENUM_CONST(0x2)
> +#define CDMA_S_STATUS_0_STATUS_1_SHIFT			_MK_SHIFT_CONST(16)
> +#define CDMA_S_STATUS_0_STATUS_1_FIELD			_MK_FIELD_CONST(0x3, CDMA_S_STATUS_0_STATUS_1_SHIFT)
> +#define CDMA_S_STATUS_0_STATUS_1_IDLE			_MK_ENUM_CONST(0x0)
> +#define CDMA_S_STATUS_0_STATUS_1_RUNNING			_MK_ENUM_CONST(0x1)
> +#define CDMA_S_STATUS_0_STATUS_1_PENDING			_MK_ENUM_CONST(0x2)
> +
> +
> +// Register CDMA_S_POINTER_0
> +#define CDMA_S_POINTER_0			_MK_ADDR_CONST(0x3004)
> +#define CDMA_S_POINTER_0_PRODUCER_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDMA_S_POINTER_0_PRODUCER_FIELD			_MK_FIELD_CONST(0x1, CDMA_S_POINTER_0_PRODUCER_SHIFT)
> +#define CDMA_S_POINTER_0_PRODUCER_GROUP_0			_MK_ENUM_CONST(0x0)
> +#define CDMA_S_POINTER_0_PRODUCER_GROUP_1			_MK_ENUM_CONST(0x1)
> +#define CDMA_S_POINTER_0_CONSUMER_SHIFT			_MK_SHIFT_CONST(16)
> +#define CDMA_S_POINTER_0_CONSUMER_FIELD			_MK_FIELD_CONST(0x1, CDMA_S_POINTER_0_CONSUMER_SHIFT)
> +#define CDMA_S_POINTER_0_CONSUMER_GROUP_0			_MK_ENUM_CONST(0x0)
> +#define CDMA_S_POINTER_0_CONSUMER_GROUP_1			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register CDMA_S_ARBITER_0
> +#define CDMA_S_ARBITER_0			_MK_ADDR_CONST(0x3008)
> +#define CDMA_S_ARBITER_0_ARB_WEIGHT_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDMA_S_ARBITER_0_ARB_WEIGHT_FIELD			_MK_FIELD_CONST(0xf, CDMA_S_ARBITER_0_ARB_WEIGHT_SHIFT)
> +#define CDMA_S_ARBITER_0_ARB_WMB_SHIFT			_MK_SHIFT_CONST(16)
> +#define CDMA_S_ARBITER_0_ARB_WMB_FIELD			_MK_FIELD_CONST(0xf, CDMA_S_ARBITER_0_ARB_WMB_SHIFT)
> +
> +
> +// Register CDMA_S_CBUF_FLUSH_STATUS_0
> +#define CDMA_S_CBUF_FLUSH_STATUS_0			_MK_ADDR_CONST(0x300c)
> +#define CDMA_S_CBUF_FLUSH_STATUS_0_FLUSH_DONE_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDMA_S_CBUF_FLUSH_STATUS_0_FLUSH_DONE_FIELD			_MK_FIELD_CONST(0x1, CDMA_S_CBUF_FLUSH_STATUS_0_FLUSH_DONE_SHIFT)
> +
> +
> +// Register CDMA_D_OP_ENABLE_0
> +#define CDMA_D_OP_ENABLE_0			_MK_ADDR_CONST(0x3010)
> +#define CDMA_D_OP_ENABLE_0_OP_EN_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDMA_D_OP_ENABLE_0_OP_EN_FIELD			_MK_FIELD_CONST(0x1, CDMA_D_OP_ENABLE_0_OP_EN_SHIFT)
> +#define CDMA_D_OP_ENABLE_0_OP_EN_DISABLE			_MK_ENUM_CONST(0x0)
> +#define CDMA_D_OP_ENABLE_0_OP_EN_ENABLE			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register CDMA_D_MISC_CFG_0
> +#define CDMA_D_MISC_CFG_0			_MK_ADDR_CONST(0x3014)
> +#define CDMA_D_MISC_CFG_0_CONV_MODE_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDMA_D_MISC_CFG_0_CONV_MODE_FIELD			_MK_FIELD_CONST(0x1, CDMA_D_MISC_CFG_0_CONV_MODE_SHIFT)
> +#define CDMA_D_MISC_CFG_0_CONV_MODE_DIRECT			_MK_ENUM_CONST(0x0)
> +#define CDMA_D_MISC_CFG_0_CONV_MODE_WINOGRAD			_MK_ENUM_CONST(0x1)
> +#define CDMA_D_MISC_CFG_0_IN_PRECISION_SHIFT			_MK_SHIFT_CONST(8)
> +#define CDMA_D_MISC_CFG_0_IN_PRECISION_FIELD			_MK_FIELD_CONST(0x3, CDMA_D_MISC_CFG_0_IN_PRECISION_SHIFT)
> +#define CDMA_D_MISC_CFG_0_IN_PRECISION_INT8			_MK_ENUM_CONST(0x0)
> +#define CDMA_D_MISC_CFG_0_IN_PRECISION_INT16			_MK_ENUM_CONST(0x1)
> +#define CDMA_D_MISC_CFG_0_IN_PRECISION_FP16			_MK_ENUM_CONST(0x2)
> +#define CDMA_D_MISC_CFG_0_PROC_PRECISION_SHIFT			_MK_SHIFT_CONST(12)
> +#define CDMA_D_MISC_CFG_0_PROC_PRECISION_FIELD			_MK_FIELD_CONST(0x3, CDMA_D_MISC_CFG_0_PROC_PRECISION_SHIFT)
> +#define CDMA_D_MISC_CFG_0_PROC_PRECISION_INT8			_MK_ENUM_CONST(0x0)
> +#define CDMA_D_MISC_CFG_0_PROC_PRECISION_INT16			_MK_ENUM_CONST(0x1)
> +#define CDMA_D_MISC_CFG_0_PROC_PRECISION_FP16			_MK_ENUM_CONST(0x2)
> +#define CDMA_D_MISC_CFG_0_DATA_REUSE_SHIFT			_MK_SHIFT_CONST(16)
> +#define CDMA_D_MISC_CFG_0_DATA_REUSE_FIELD			_MK_FIELD_CONST(0x1, CDMA_D_MISC_CFG_0_DATA_REUSE_SHIFT)
> +#define CDMA_D_MISC_CFG_0_DATA_REUSE_DISABLE			_MK_ENUM_CONST(0x0)
> +#define CDMA_D_MISC_CFG_0_DATA_REUSE_ENABLE			_MK_ENUM_CONST(0x1)
> +#define CDMA_D_MISC_CFG_0_WEIGHT_REUSE_SHIFT			_MK_SHIFT_CONST(20)
> +#define CDMA_D_MISC_CFG_0_WEIGHT_REUSE_FIELD			_MK_FIELD_CONST(0x1, CDMA_D_MISC_CFG_0_WEIGHT_REUSE_SHIFT)
> +#define CDMA_D_MISC_CFG_0_WEIGHT_REUSE_DISABLE			_MK_ENUM_CONST(0x0)
> +#define CDMA_D_MISC_CFG_0_WEIGHT_REUSE_ENABLE			_MK_ENUM_CONST(0x1)
> +#define CDMA_D_MISC_CFG_0_SKIP_DATA_RLS_SHIFT			_MK_SHIFT_CONST(24)
> +#define CDMA_D_MISC_CFG_0_SKIP_DATA_RLS_FIELD			_MK_FIELD_CONST(0x1, CDMA_D_MISC_CFG_0_SKIP_DATA_RLS_SHIFT)
> +#define CDMA_D_MISC_CFG_0_SKIP_DATA_RLS_DISABLE			_MK_ENUM_CONST(0x0)
> +#define CDMA_D_MISC_CFG_0_SKIP_DATA_RLS_ENABLE			_MK_ENUM_CONST(0x1)
> +#define CDMA_D_MISC_CFG_0_SKIP_WEIGHT_RLS_SHIFT			_MK_SHIFT_CONST(28)
> +#define CDMA_D_MISC_CFG_0_SKIP_WEIGHT_RLS_FIELD			_MK_FIELD_CONST(0x1, CDMA_D_MISC_CFG_0_SKIP_WEIGHT_RLS_SHIFT)
> +#define CDMA_D_MISC_CFG_0_SKIP_WEIGHT_RLS_DISABLE			_MK_ENUM_CONST(0x0)
> +#define CDMA_D_MISC_CFG_0_SKIP_WEIGHT_RLS_ENABLE			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register CDMA_D_DATAIN_FORMAT_0
> +#define CDMA_D_DATAIN_FORMAT_0			_MK_ADDR_CONST(0x3018)
> +#define CDMA_D_DATAIN_FORMAT_0_DATAIN_FORMAT_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDMA_D_DATAIN_FORMAT_0_DATAIN_FORMAT_FIELD			_MK_FIELD_CONST(0x1, CDMA_D_DATAIN_FORMAT_0_DATAIN_FORMAT_SHIFT)
> +#define CDMA_D_DATAIN_FORMAT_0_DATAIN_FORMAT_FEATURE			_MK_ENUM_CONST(0x0)
> +#define CDMA_D_DATAIN_FORMAT_0_DATAIN_FORMAT_PIXEL			_MK_ENUM_CONST(0x1)
> +#define CDMA_D_DATAIN_FORMAT_0_PIXEL_FORMAT_SHIFT			_MK_SHIFT_CONST(8)
> +#define CDMA_D_DATAIN_FORMAT_0_PIXEL_FORMAT_FIELD			_MK_FIELD_CONST(0x3f, CDMA_D_DATAIN_FORMAT_0_PIXEL_FORMAT_SHIFT)
> +#define CDMA_D_DATAIN_FORMAT_0_PIXEL_FORMAT_T_R8			_MK_ENUM_CONST(0x0)
> +#define CDMA_D_DATAIN_FORMAT_0_PIXEL_FORMAT_T_R10			_MK_ENUM_CONST(0x1)
> +#define CDMA_D_DATAIN_FORMAT_0_PIXEL_FORMAT_T_R12			_MK_ENUM_CONST(0x2)
> +#define CDMA_D_DATAIN_FORMAT_0_PIXEL_FORMAT_T_R16			_MK_ENUM_CONST(0x3)
> +#define CDMA_D_DATAIN_FORMAT_0_PIXEL_FORMAT_T_R16_I			_MK_ENUM_CONST(0x4)
> +#define CDMA_D_DATAIN_FORMAT_0_PIXEL_FORMAT_T_R16_F			_MK_ENUM_CONST(0x5)
> +#define CDMA_D_DATAIN_FORMAT_0_PIXEL_FORMAT_T_A16B16G16R16			_MK_ENUM_CONST(0x6)
> +#define CDMA_D_DATAIN_FORMAT_0_PIXEL_FORMAT_T_X16B16G16R16			_MK_ENUM_CONST(0x7)
> +#define CDMA_D_DATAIN_FORMAT_0_PIXEL_FORMAT_T_A16B16G16R16_F			_MK_ENUM_CONST(0x8)
> +#define CDMA_D_DATAIN_FORMAT_0_PIXEL_FORMAT_T_A16Y16U16V16			_MK_ENUM_CONST(0x9)
> +#define CDMA_D_DATAIN_FORMAT_0_PIXEL_FORMAT_T_V16U16Y16A16			_MK_ENUM_CONST(0xa)
> +#define CDMA_D_DATAIN_FORMAT_0_PIXEL_FORMAT_T_A16Y16U16V16_F			_MK_ENUM_CONST(0xb)
> +#define CDMA_D_DATAIN_FORMAT_0_PIXEL_FORMAT_T_A8B8G8R8			_MK_ENUM_CONST(0xc)
> +#define CDMA_D_DATAIN_FORMAT_0_PIXEL_FORMAT_T_A8R8G8B8			_MK_ENUM_CONST(0xd)
> +#define CDMA_D_DATAIN_FORMAT_0_PIXEL_FORMAT_T_B8G8R8A8			_MK_ENUM_CONST(0xe)
> +#define CDMA_D_DATAIN_FORMAT_0_PIXEL_FORMAT_T_R8G8B8A8			_MK_ENUM_CONST(0xf)
> +#define CDMA_D_DATAIN_FORMAT_0_PIXEL_FORMAT_T_X8B8G8R8			_MK_ENUM_CONST(0x10)
> +#define CDMA_D_DATAIN_FORMAT_0_PIXEL_FORMAT_T_X8R8G8B8			_MK_ENUM_CONST(0x11)
> +#define CDMA_D_DATAIN_FORMAT_0_PIXEL_FORMAT_T_B8G8R8X8			_MK_ENUM_CONST(0x12)
> +#define CDMA_D_DATAIN_FORMAT_0_PIXEL_FORMAT_T_R8G8B8X8			_MK_ENUM_CONST(0x13)
> +#define CDMA_D_DATAIN_FORMAT_0_PIXEL_FORMAT_T_A2B10G10R10			_MK_ENUM_CONST(0x14)
> +#define CDMA_D_DATAIN_FORMAT_0_PIXEL_FORMAT_T_A2R10G10B10			_MK_ENUM_CONST(0x15)
> +#define CDMA_D_DATAIN_FORMAT_0_PIXEL_FORMAT_T_B10G10R10A2			_MK_ENUM_CONST(0x16)
> +#define CDMA_D_DATAIN_FORMAT_0_PIXEL_FORMAT_T_R10G10B10A2			_MK_ENUM_CONST(0x17)
> +#define CDMA_D_DATAIN_FORMAT_0_PIXEL_FORMAT_T_A2Y10U10V10			_MK_ENUM_CONST(0x18)
> +#define CDMA_D_DATAIN_FORMAT_0_PIXEL_FORMAT_T_V10U10Y10A2			_MK_ENUM_CONST(0x19)
> +#define CDMA_D_DATAIN_FORMAT_0_PIXEL_FORMAT_T_A8Y8U8V8			_MK_ENUM_CONST(0x1a)
> +#define CDMA_D_DATAIN_FORMAT_0_PIXEL_FORMAT_T_V8U8Y8A8			_MK_ENUM_CONST(0x1b)
> +#define CDMA_D_DATAIN_FORMAT_0_PIXEL_FORMAT_T_Y8___U8V8_N444			_MK_ENUM_CONST(0x1c)
> +#define CDMA_D_DATAIN_FORMAT_0_PIXEL_FORMAT_T_Y8___V8U8_N444			_MK_ENUM_CONST(0x1d)
> +#define CDMA_D_DATAIN_FORMAT_0_PIXEL_FORMAT_T_Y10___U10V10_N444			_MK_ENUM_CONST(0x1e)
> +#define CDMA_D_DATAIN_FORMAT_0_PIXEL_FORMAT_T_Y10___V10U10_N444			_MK_ENUM_CONST(0x1f)
> +#define CDMA_D_DATAIN_FORMAT_0_PIXEL_FORMAT_T_Y12___U12V12_N444			_MK_ENUM_CONST(0x20)
> +#define CDMA_D_DATAIN_FORMAT_0_PIXEL_FORMAT_T_Y12___V12U12_N444			_MK_ENUM_CONST(0x21)
> +#define CDMA_D_DATAIN_FORMAT_0_PIXEL_FORMAT_T_Y16___U16V16_N444			_MK_ENUM_CONST(0x22)
> +#define CDMA_D_DATAIN_FORMAT_0_PIXEL_FORMAT_T_Y16___V16U16_N444			_MK_ENUM_CONST(0x23)
> +#define CDMA_D_DATAIN_FORMAT_0_PIXEL_MAPPING_SHIFT			_MK_SHIFT_CONST(16)
> +#define CDMA_D_DATAIN_FORMAT_0_PIXEL_MAPPING_FIELD			_MK_FIELD_CONST(0x1, CDMA_D_DATAIN_FORMAT_0_PIXEL_MAPPING_SHIFT)
> +#define CDMA_D_DATAIN_FORMAT_0_PIXEL_MAPPING_PITCH_LINEAR			_MK_ENUM_CONST(0x0)
> +#define CDMA_D_DATAIN_FORMAT_0_PIXEL_MAPPING_RESERVED_LINEAR			_MK_ENUM_CONST(0x1)
> +#define CDMA_D_DATAIN_FORMAT_0_PIXEL_SIGN_OVERRIDE_SHIFT			_MK_SHIFT_CONST(20)
> +#define CDMA_D_DATAIN_FORMAT_0_PIXEL_SIGN_OVERRIDE_FIELD			_MK_FIELD_CONST(0x1, CDMA_D_DATAIN_FORMAT_0_PIXEL_SIGN_OVERRIDE_SHIFT)
> +#define CDMA_D_DATAIN_FORMAT_0_PIXEL_SIGN_OVERRIDE_UNSIGNED_INT			_MK_ENUM_CONST(0x0)
> +#define CDMA_D_DATAIN_FORMAT_0_PIXEL_SIGN_OVERRIDE_SIGNED_INT			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register CDMA_D_DATAIN_SIZE_0_0
> +#define CDMA_D_DATAIN_SIZE_0_0			_MK_ADDR_CONST(0x301c)
> +#define CDMA_D_DATAIN_SIZE_0_0_DATAIN_WIDTH_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDMA_D_DATAIN_SIZE_0_0_DATAIN_WIDTH_FIELD			_MK_FIELD_CONST(0x1fff, CDMA_D_DATAIN_SIZE_0_0_DATAIN_WIDTH_SHIFT)
> +#define CDMA_D_DATAIN_SIZE_0_0_DATAIN_HEIGHT_SHIFT			_MK_SHIFT_CONST(16)
> +#define CDMA_D_DATAIN_SIZE_0_0_DATAIN_HEIGHT_FIELD			_MK_FIELD_CONST(0x1fff, CDMA_D_DATAIN_SIZE_0_0_DATAIN_HEIGHT_SHIFT)
> +
> +
> +// Register CDMA_D_DATAIN_SIZE_1_0
> +#define CDMA_D_DATAIN_SIZE_1_0			_MK_ADDR_CONST(0x3020)
> +#define CDMA_D_DATAIN_SIZE_1_0_DATAIN_CHANNEL_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDMA_D_DATAIN_SIZE_1_0_DATAIN_CHANNEL_FIELD			_MK_FIELD_CONST(0x1fff, CDMA_D_DATAIN_SIZE_1_0_DATAIN_CHANNEL_SHIFT)
> +
> +
> +// Register CDMA_D_DATAIN_SIZE_EXT_0_0
> +#define CDMA_D_DATAIN_SIZE_EXT_0_0			_MK_ADDR_CONST(0x3024)
> +#define CDMA_D_DATAIN_SIZE_EXT_0_0_DATAIN_WIDTH_EXT_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDMA_D_DATAIN_SIZE_EXT_0_0_DATAIN_WIDTH_EXT_FIELD			_MK_FIELD_CONST(0x1fff, CDMA_D_DATAIN_SIZE_EXT_0_0_DATAIN_WIDTH_EXT_SHIFT)
> +#define CDMA_D_DATAIN_SIZE_EXT_0_0_DATAIN_HEIGHT_EXT_SHIFT			_MK_SHIFT_CONST(16)
> +#define CDMA_D_DATAIN_SIZE_EXT_0_0_DATAIN_HEIGHT_EXT_FIELD			_MK_FIELD_CONST(0x1fff, CDMA_D_DATAIN_SIZE_EXT_0_0_DATAIN_HEIGHT_EXT_SHIFT)
> +
> +
> +// Register CDMA_D_PIXEL_OFFSET_0
> +#define CDMA_D_PIXEL_OFFSET_0			_MK_ADDR_CONST(0x3028)
> +#define CDMA_D_PIXEL_OFFSET_0_PIXEL_X_OFFSET_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDMA_D_PIXEL_OFFSET_0_PIXEL_X_OFFSET_FIELD			_MK_FIELD_CONST(0x1f, CDMA_D_PIXEL_OFFSET_0_PIXEL_X_OFFSET_SHIFT)
> +#define CDMA_D_PIXEL_OFFSET_0_PIXEL_Y_OFFSET_SHIFT			_MK_SHIFT_CONST(16)
> +#define CDMA_D_PIXEL_OFFSET_0_PIXEL_Y_OFFSET_FIELD			_MK_FIELD_CONST(0x7, CDMA_D_PIXEL_OFFSET_0_PIXEL_Y_OFFSET_SHIFT)
> +
> +
> +// Register CDMA_D_DAIN_RAM_TYPE_0
> +#define CDMA_D_DAIN_RAM_TYPE_0			_MK_ADDR_CONST(0x302c)
> +#define CDMA_D_DAIN_RAM_TYPE_0_DATAIN_RAM_TYPE_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDMA_D_DAIN_RAM_TYPE_0_DATAIN_RAM_TYPE_FIELD			_MK_FIELD_CONST(0x1, CDMA_D_DAIN_RAM_TYPE_0_DATAIN_RAM_TYPE_SHIFT)
> +#define CDMA_D_DAIN_RAM_TYPE_0_DATAIN_RAM_TYPE_CVIF			_MK_ENUM_CONST(0x0)
> +#define CDMA_D_DAIN_RAM_TYPE_0_DATAIN_RAM_TYPE_MCIF			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register CDMA_D_DAIN_ADDR_HIGH_0_0
> +#define CDMA_D_DAIN_ADDR_HIGH_0_0			_MK_ADDR_CONST(0x3030)
> +#define CDMA_D_DAIN_ADDR_HIGH_0_0_DATAIN_ADDR_HIGH_0_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDMA_D_DAIN_ADDR_HIGH_0_0_DATAIN_ADDR_HIGH_0_FIELD			_MK_FIELD_CONST(0xffffffff, CDMA_D_DAIN_ADDR_HIGH_0_0_DATAIN_ADDR_HIGH_0_SHIFT)
> +
> +
> +// Register CDMA_D_DAIN_ADDR_LOW_0_0
> +#define CDMA_D_DAIN_ADDR_LOW_0_0			_MK_ADDR_CONST(0x3034)
> +#define CDMA_D_DAIN_ADDR_LOW_0_0_DATAIN_ADDR_LOW_0_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDMA_D_DAIN_ADDR_LOW_0_0_DATAIN_ADDR_LOW_0_FIELD			_MK_FIELD_CONST(0xffffffff, CDMA_D_DAIN_ADDR_LOW_0_0_DATAIN_ADDR_LOW_0_SHIFT)
> +
> +
> +// Register CDMA_D_DAIN_ADDR_HIGH_1_0
> +#define CDMA_D_DAIN_ADDR_HIGH_1_0			_MK_ADDR_CONST(0x3038)
> +#define CDMA_D_DAIN_ADDR_HIGH_1_0_DATAIN_ADDR_HIGH_1_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDMA_D_DAIN_ADDR_HIGH_1_0_DATAIN_ADDR_HIGH_1_FIELD			_MK_FIELD_CONST(0xffffffff, CDMA_D_DAIN_ADDR_HIGH_1_0_DATAIN_ADDR_HIGH_1_SHIFT)
> +
> +
> +// Register CDMA_D_DAIN_ADDR_LOW_1_0
> +#define CDMA_D_DAIN_ADDR_LOW_1_0			_MK_ADDR_CONST(0x303c)
> +#define CDMA_D_DAIN_ADDR_LOW_1_0_DATAIN_ADDR_LOW_1_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDMA_D_DAIN_ADDR_LOW_1_0_DATAIN_ADDR_LOW_1_FIELD			_MK_FIELD_CONST(0xffffffff, CDMA_D_DAIN_ADDR_LOW_1_0_DATAIN_ADDR_LOW_1_SHIFT)
> +
> +
> +// Register CDMA_D_LINE_STRIDE_0
> +#define CDMA_D_LINE_STRIDE_0			_MK_ADDR_CONST(0x3040)
> +#define CDMA_D_LINE_STRIDE_0_LINE_STRIDE_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDMA_D_LINE_STRIDE_0_LINE_STRIDE_FIELD			_MK_FIELD_CONST(0xffffffff, CDMA_D_LINE_STRIDE_0_LINE_STRIDE_SHIFT)
> +
> +
> +// Register CDMA_D_LINE_UV_STRIDE_0
> +#define CDMA_D_LINE_UV_STRIDE_0			_MK_ADDR_CONST(0x3044)
> +#define CDMA_D_LINE_UV_STRIDE_0_UV_LINE_STRIDE_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDMA_D_LINE_UV_STRIDE_0_UV_LINE_STRIDE_FIELD			_MK_FIELD_CONST(0xffffffff, CDMA_D_LINE_UV_STRIDE_0_UV_LINE_STRIDE_SHIFT)
> +
> +
> +// Register CDMA_D_SURF_STRIDE_0
> +#define CDMA_D_SURF_STRIDE_0			_MK_ADDR_CONST(0x3048)
> +#define CDMA_D_SURF_STRIDE_0_SURF_STRIDE_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDMA_D_SURF_STRIDE_0_SURF_STRIDE_FIELD			_MK_FIELD_CONST(0xffffffff, CDMA_D_SURF_STRIDE_0_SURF_STRIDE_SHIFT)
> +
> +
> +// Register CDMA_D_DAIN_MAP_0
> +#define CDMA_D_DAIN_MAP_0			_MK_ADDR_CONST(0x304c)
> +#define CDMA_D_DAIN_MAP_0_LINE_PACKED_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDMA_D_DAIN_MAP_0_LINE_PACKED_FIELD			_MK_FIELD_CONST(0x1, CDMA_D_DAIN_MAP_0_LINE_PACKED_SHIFT)
> +#define CDMA_D_DAIN_MAP_0_LINE_PACKED_FALSE			_MK_ENUM_CONST(0x0)
> +#define CDMA_D_DAIN_MAP_0_LINE_PACKED_TRUE			_MK_ENUM_CONST(0x1)
> +#define CDMA_D_DAIN_MAP_0_SURF_PACKED_SHIFT			_MK_SHIFT_CONST(16)
> +#define CDMA_D_DAIN_MAP_0_SURF_PACKED_FIELD			_MK_FIELD_CONST(0x1, CDMA_D_DAIN_MAP_0_SURF_PACKED_SHIFT)
> +#define CDMA_D_DAIN_MAP_0_SURF_PACKED_FALSE			_MK_ENUM_CONST(0x0)
> +#define CDMA_D_DAIN_MAP_0_SURF_PACKED_TRUE			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register CDMA_D_RESERVED_X_CFG_0
> +#define CDMA_D_RESERVED_X_CFG_0			_MK_ADDR_CONST(0x3050)
> +#define CDMA_D_RESERVED_X_CFG_0_RSV_PER_LINE_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDMA_D_RESERVED_X_CFG_0_RSV_PER_LINE_FIELD			_MK_FIELD_CONST(0x3ff, CDMA_D_RESERVED_X_CFG_0_RSV_PER_LINE_SHIFT)
> +#define CDMA_D_RESERVED_X_CFG_0_RSV_PER_UV_LINE_SHIFT			_MK_SHIFT_CONST(16)
> +#define CDMA_D_RESERVED_X_CFG_0_RSV_PER_UV_LINE_FIELD			_MK_FIELD_CONST(0x3ff, CDMA_D_RESERVED_X_CFG_0_RSV_PER_UV_LINE_SHIFT)
> +
> +
> +// Register CDMA_D_RESERVED_Y_CFG_0
> +#define CDMA_D_RESERVED_Y_CFG_0			_MK_ADDR_CONST(0x3054)
> +#define CDMA_D_RESERVED_Y_CFG_0_RSV_HEIGHT_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDMA_D_RESERVED_Y_CFG_0_RSV_HEIGHT_FIELD			_MK_FIELD_CONST(0x7, CDMA_D_RESERVED_Y_CFG_0_RSV_HEIGHT_SHIFT)
> +#define CDMA_D_RESERVED_Y_CFG_0_RSV_Y_INDEX_SHIFT			_MK_SHIFT_CONST(16)
> +#define CDMA_D_RESERVED_Y_CFG_0_RSV_Y_INDEX_FIELD			_MK_FIELD_CONST(0x1f, CDMA_D_RESERVED_Y_CFG_0_RSV_Y_INDEX_SHIFT)
> +
> +
> +// Register CDMA_D_BATCH_NUMBER_0
> +#define CDMA_D_BATCH_NUMBER_0			_MK_ADDR_CONST(0x3058)
> +#define CDMA_D_BATCH_NUMBER_0_BATCHES_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDMA_D_BATCH_NUMBER_0_BATCHES_FIELD			_MK_FIELD_CONST(0x1f, CDMA_D_BATCH_NUMBER_0_BATCHES_SHIFT)
> +
> +
> +// Register CDMA_D_BATCH_STRIDE_0
> +#define CDMA_D_BATCH_STRIDE_0			_MK_ADDR_CONST(0x305c)
> +#define CDMA_D_BATCH_STRIDE_0_BATCH_STRIDE_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDMA_D_BATCH_STRIDE_0_BATCH_STRIDE_FIELD			_MK_FIELD_CONST(0xffffffff, CDMA_D_BATCH_STRIDE_0_BATCH_STRIDE_SHIFT)
> +
> +
> +// Register CDMA_D_ENTRY_PER_SLICE_0
> +#define CDMA_D_ENTRY_PER_SLICE_0			_MK_ADDR_CONST(0x3060)
> +#define CDMA_D_ENTRY_PER_SLICE_0_ENTRIES_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDMA_D_ENTRY_PER_SLICE_0_ENTRIES_FIELD			_MK_FIELD_CONST(0x3fff, CDMA_D_ENTRY_PER_SLICE_0_ENTRIES_SHIFT)
> +
> +
> +// Register CDMA_D_FETCH_GRAIN_0
> +#define CDMA_D_FETCH_GRAIN_0			_MK_ADDR_CONST(0x3064)
> +#define CDMA_D_FETCH_GRAIN_0_GRAINS_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDMA_D_FETCH_GRAIN_0_GRAINS_FIELD			_MK_FIELD_CONST(0xfff, CDMA_D_FETCH_GRAIN_0_GRAINS_SHIFT)
> +
> +
> +// Register CDMA_D_WEIGHT_FORMAT_0
> +#define CDMA_D_WEIGHT_FORMAT_0			_MK_ADDR_CONST(0x3068)
> +#define CDMA_D_WEIGHT_FORMAT_0_WEIGHT_FORMAT_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDMA_D_WEIGHT_FORMAT_0_WEIGHT_FORMAT_FIELD			_MK_FIELD_CONST(0x1, CDMA_D_WEIGHT_FORMAT_0_WEIGHT_FORMAT_SHIFT)
> +#define CDMA_D_WEIGHT_FORMAT_0_WEIGHT_FORMAT_UNCOMPRESSED			_MK_ENUM_CONST(0x0)
> +#define CDMA_D_WEIGHT_FORMAT_0_WEIGHT_FORMAT_COMPRESSED			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register CDMA_D_WEIGHT_SIZE_0_0
> +#define CDMA_D_WEIGHT_SIZE_0_0			_MK_ADDR_CONST(0x306c)
> +#define CDMA_D_WEIGHT_SIZE_0_0_BYTE_PER_KERNEL_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDMA_D_WEIGHT_SIZE_0_0_BYTE_PER_KERNEL_FIELD			_MK_FIELD_CONST(0x3ffff, CDMA_D_WEIGHT_SIZE_0_0_BYTE_PER_KERNEL_SHIFT)
> +
> +
> +// Register CDMA_D_WEIGHT_SIZE_1_0
> +#define CDMA_D_WEIGHT_SIZE_1_0			_MK_ADDR_CONST(0x3070)
> +#define CDMA_D_WEIGHT_SIZE_1_0_WEIGHT_KERNEL_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDMA_D_WEIGHT_SIZE_1_0_WEIGHT_KERNEL_FIELD			_MK_FIELD_CONST(0x1fff, CDMA_D_WEIGHT_SIZE_1_0_WEIGHT_KERNEL_SHIFT)
> +
> +
> +// Register CDMA_D_WEIGHT_RAM_TYPE_0
> +#define CDMA_D_WEIGHT_RAM_TYPE_0			_MK_ADDR_CONST(0x3074)
> +#define CDMA_D_WEIGHT_RAM_TYPE_0_WEIGHT_RAM_TYPE_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDMA_D_WEIGHT_RAM_TYPE_0_WEIGHT_RAM_TYPE_FIELD			_MK_FIELD_CONST(0x1, CDMA_D_WEIGHT_RAM_TYPE_0_WEIGHT_RAM_TYPE_SHIFT)
> +#define CDMA_D_WEIGHT_RAM_TYPE_0_WEIGHT_RAM_TYPE_CVIF			_MK_ENUM_CONST(0x0)
> +#define CDMA_D_WEIGHT_RAM_TYPE_0_WEIGHT_RAM_TYPE_MCIF			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register CDMA_D_WEIGHT_ADDR_HIGH_0
> +#define CDMA_D_WEIGHT_ADDR_HIGH_0			_MK_ADDR_CONST(0x3078)
> +#define CDMA_D_WEIGHT_ADDR_HIGH_0_WEIGHT_ADDR_HIGH_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDMA_D_WEIGHT_ADDR_HIGH_0_WEIGHT_ADDR_HIGH_FIELD			_MK_FIELD_CONST(0xffffffff, CDMA_D_WEIGHT_ADDR_HIGH_0_WEIGHT_ADDR_HIGH_SHIFT)
> +
> +
> +// Register CDMA_D_WEIGHT_ADDR_LOW_0
> +#define CDMA_D_WEIGHT_ADDR_LOW_0			_MK_ADDR_CONST(0x307c)
> +#define CDMA_D_WEIGHT_ADDR_LOW_0_WEIGHT_ADDR_LOW_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDMA_D_WEIGHT_ADDR_LOW_0_WEIGHT_ADDR_LOW_FIELD			_MK_FIELD_CONST(0xffffffff, CDMA_D_WEIGHT_ADDR_LOW_0_WEIGHT_ADDR_LOW_SHIFT)
> +
> +
> +// Register CDMA_D_WEIGHT_BYTES_0
> +#define CDMA_D_WEIGHT_BYTES_0			_MK_ADDR_CONST(0x3080)
> +#define CDMA_D_WEIGHT_BYTES_0_WEIGHT_BYTES_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDMA_D_WEIGHT_BYTES_0_WEIGHT_BYTES_FIELD			_MK_FIELD_CONST(0xffffffff, CDMA_D_WEIGHT_BYTES_0_WEIGHT_BYTES_SHIFT)
> +
> +
> +// Register CDMA_D_WGS_ADDR_HIGH_0
> +#define CDMA_D_WGS_ADDR_HIGH_0			_MK_ADDR_CONST(0x3084)
> +#define CDMA_D_WGS_ADDR_HIGH_0_WGS_ADDR_HIGH_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDMA_D_WGS_ADDR_HIGH_0_WGS_ADDR_HIGH_FIELD			_MK_FIELD_CONST(0xffffffff, CDMA_D_WGS_ADDR_HIGH_0_WGS_ADDR_HIGH_SHIFT)
> +
> +
> +// Register CDMA_D_WGS_ADDR_LOW_0
> +#define CDMA_D_WGS_ADDR_LOW_0			_MK_ADDR_CONST(0x3088)
> +#define CDMA_D_WGS_ADDR_LOW_0_WGS_ADDR_LOW_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDMA_D_WGS_ADDR_LOW_0_WGS_ADDR_LOW_FIELD			_MK_FIELD_CONST(0xffffffff, CDMA_D_WGS_ADDR_LOW_0_WGS_ADDR_LOW_SHIFT)
> +
> +
> +// Register CDMA_D_WMB_ADDR_HIGH_0
> +#define CDMA_D_WMB_ADDR_HIGH_0			_MK_ADDR_CONST(0x308c)
> +#define CDMA_D_WMB_ADDR_HIGH_0_WMB_ADDR_HIGH_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDMA_D_WMB_ADDR_HIGH_0_WMB_ADDR_HIGH_FIELD			_MK_FIELD_CONST(0xffffffff, CDMA_D_WMB_ADDR_HIGH_0_WMB_ADDR_HIGH_SHIFT)
> +
> +
> +// Register CDMA_D_WMB_ADDR_LOW_0
> +#define CDMA_D_WMB_ADDR_LOW_0			_MK_ADDR_CONST(0x3090)
> +#define CDMA_D_WMB_ADDR_LOW_0_WMB_ADDR_LOW_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDMA_D_WMB_ADDR_LOW_0_WMB_ADDR_LOW_FIELD			_MK_FIELD_CONST(0xffffffff, CDMA_D_WMB_ADDR_LOW_0_WMB_ADDR_LOW_SHIFT)
> +
> +
> +// Register CDMA_D_WMB_BYTES_0
> +#define CDMA_D_WMB_BYTES_0			_MK_ADDR_CONST(0x3094)
> +#define CDMA_D_WMB_BYTES_0_WMB_BYTES_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDMA_D_WMB_BYTES_0_WMB_BYTES_FIELD			_MK_FIELD_CONST(0xfffffff, CDMA_D_WMB_BYTES_0_WMB_BYTES_SHIFT)
> +
> +
> +// Register CDMA_D_MEAN_FORMAT_0
> +#define CDMA_D_MEAN_FORMAT_0			_MK_ADDR_CONST(0x3098)
> +#define CDMA_D_MEAN_FORMAT_0_MEAN_FORMAT_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDMA_D_MEAN_FORMAT_0_MEAN_FORMAT_FIELD			_MK_FIELD_CONST(0x1, CDMA_D_MEAN_FORMAT_0_MEAN_FORMAT_SHIFT)
> +#define CDMA_D_MEAN_FORMAT_0_MEAN_FORMAT_DISABLE			_MK_ENUM_CONST(0x0)
> +#define CDMA_D_MEAN_FORMAT_0_MEAN_FORMAT_ENABLE			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register CDMA_D_MEAN_GLOBAL_0_0
> +#define CDMA_D_MEAN_GLOBAL_0_0			_MK_ADDR_CONST(0x309c)
> +#define CDMA_D_MEAN_GLOBAL_0_0_MEAN_RY_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDMA_D_MEAN_GLOBAL_0_0_MEAN_RY_FIELD			_MK_FIELD_CONST(0xffff, CDMA_D_MEAN_GLOBAL_0_0_MEAN_RY_SHIFT)
> +#define CDMA_D_MEAN_GLOBAL_0_0_MEAN_GU_SHIFT			_MK_SHIFT_CONST(16)
> +#define CDMA_D_MEAN_GLOBAL_0_0_MEAN_GU_FIELD			_MK_FIELD_CONST(0xffff, CDMA_D_MEAN_GLOBAL_0_0_MEAN_GU_SHIFT)
> +
> +
> +// Register CDMA_D_MEAN_GLOBAL_1_0
> +#define CDMA_D_MEAN_GLOBAL_1_0			_MK_ADDR_CONST(0x30a0)
> +#define CDMA_D_MEAN_GLOBAL_1_0_MEAN_BV_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDMA_D_MEAN_GLOBAL_1_0_MEAN_BV_FIELD			_MK_FIELD_CONST(0xffff, CDMA_D_MEAN_GLOBAL_1_0_MEAN_BV_SHIFT)
> +#define CDMA_D_MEAN_GLOBAL_1_0_MEAN_AX_SHIFT			_MK_SHIFT_CONST(16)
> +#define CDMA_D_MEAN_GLOBAL_1_0_MEAN_AX_FIELD			_MK_FIELD_CONST(0xffff, CDMA_D_MEAN_GLOBAL_1_0_MEAN_AX_SHIFT)
> +
> +
> +// Register CDMA_D_CVT_CFG_0
> +#define CDMA_D_CVT_CFG_0			_MK_ADDR_CONST(0x30a4)
> +#define CDMA_D_CVT_CFG_0_CVT_EN_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDMA_D_CVT_CFG_0_CVT_EN_FIELD			_MK_FIELD_CONST(0x1, CDMA_D_CVT_CFG_0_CVT_EN_SHIFT)
> +#define CDMA_D_CVT_CFG_0_CVT_EN_DISABLE			_MK_ENUM_CONST(0x0)
> +#define CDMA_D_CVT_CFG_0_CVT_EN_ENABLE			_MK_ENUM_CONST(0x1)
> +#define CDMA_D_CVT_CFG_0_CVT_TRUNCATE_SHIFT			_MK_SHIFT_CONST(4)
> +#define CDMA_D_CVT_CFG_0_CVT_TRUNCATE_FIELD			_MK_FIELD_CONST(0x3f, CDMA_D_CVT_CFG_0_CVT_TRUNCATE_SHIFT)
> +
> +
> +// Register CDMA_D_CVT_OFFSET_0
> +#define CDMA_D_CVT_OFFSET_0			_MK_ADDR_CONST(0x30a8)
> +#define CDMA_D_CVT_OFFSET_0_CVT_OFFSET_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDMA_D_CVT_OFFSET_0_CVT_OFFSET_FIELD			_MK_FIELD_CONST(0xffff, CDMA_D_CVT_OFFSET_0_CVT_OFFSET_SHIFT)
> +
> +
> +// Register CDMA_D_CVT_SCALE_0
> +#define CDMA_D_CVT_SCALE_0			_MK_ADDR_CONST(0x30ac)
> +#define CDMA_D_CVT_SCALE_0_CVT_SCALE_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDMA_D_CVT_SCALE_0_CVT_SCALE_FIELD			_MK_FIELD_CONST(0xffff, CDMA_D_CVT_SCALE_0_CVT_SCALE_SHIFT)
> +
> +
> +// Register CDMA_D_CONV_STRIDE_0
> +#define CDMA_D_CONV_STRIDE_0			_MK_ADDR_CONST(0x30b0)
> +#define CDMA_D_CONV_STRIDE_0_CONV_X_STRIDE_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDMA_D_CONV_STRIDE_0_CONV_X_STRIDE_FIELD			_MK_FIELD_CONST(0x7, CDMA_D_CONV_STRIDE_0_CONV_X_STRIDE_SHIFT)
> +#define CDMA_D_CONV_STRIDE_0_CONV_Y_STRIDE_SHIFT			_MK_SHIFT_CONST(16)
> +#define CDMA_D_CONV_STRIDE_0_CONV_Y_STRIDE_FIELD			_MK_FIELD_CONST(0x7, CDMA_D_CONV_STRIDE_0_CONV_Y_STRIDE_SHIFT)
> +
> +
> +// Register CDMA_D_ZERO_PADDING_0
> +#define CDMA_D_ZERO_PADDING_0			_MK_ADDR_CONST(0x30b4)
> +#define CDMA_D_ZERO_PADDING_0_PAD_LEFT_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDMA_D_ZERO_PADDING_0_PAD_LEFT_FIELD			_MK_FIELD_CONST(0x1f, CDMA_D_ZERO_PADDING_0_PAD_LEFT_SHIFT)
> +#define CDMA_D_ZERO_PADDING_0_PAD_RIGHT_SHIFT			_MK_SHIFT_CONST(8)
> +#define CDMA_D_ZERO_PADDING_0_PAD_RIGHT_FIELD			_MK_FIELD_CONST(0x3f, CDMA_D_ZERO_PADDING_0_PAD_RIGHT_SHIFT)
> +#define CDMA_D_ZERO_PADDING_0_PAD_TOP_SHIFT			_MK_SHIFT_CONST(16)
> +#define CDMA_D_ZERO_PADDING_0_PAD_TOP_FIELD			_MK_FIELD_CONST(0x1f, CDMA_D_ZERO_PADDING_0_PAD_TOP_SHIFT)
> +#define CDMA_D_ZERO_PADDING_0_PAD_BOTTOM_SHIFT			_MK_SHIFT_CONST(24)
> +#define CDMA_D_ZERO_PADDING_0_PAD_BOTTOM_FIELD			_MK_FIELD_CONST(0x3f, CDMA_D_ZERO_PADDING_0_PAD_BOTTOM_SHIFT)
> +
> +
> +// Register CDMA_D_ZERO_PADDING_VALUE_0
> +#define CDMA_D_ZERO_PADDING_VALUE_0			_MK_ADDR_CONST(0x30b8)
> +#define CDMA_D_ZERO_PADDING_VALUE_0_PAD_VALUE_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDMA_D_ZERO_PADDING_VALUE_0_PAD_VALUE_FIELD			_MK_FIELD_CONST(0xffff, CDMA_D_ZERO_PADDING_VALUE_0_PAD_VALUE_SHIFT)
> +
> +
> +// Register CDMA_D_BANK_0
> +#define CDMA_D_BANK_0			_MK_ADDR_CONST(0x30bc)
> +#define CDMA_D_BANK_0_DATA_BANK_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDMA_D_BANK_0_DATA_BANK_FIELD			_MK_FIELD_CONST(0x1f, CDMA_D_BANK_0_DATA_BANK_SHIFT)
> +#define CDMA_D_BANK_0_WEIGHT_BANK_SHIFT			_MK_SHIFT_CONST(16)
> +#define CDMA_D_BANK_0_WEIGHT_BANK_FIELD			_MK_FIELD_CONST(0x1f, CDMA_D_BANK_0_WEIGHT_BANK_SHIFT)
> +
> +
> +// Register CDMA_D_NAN_FLUSH_TO_ZERO_0
> +#define CDMA_D_NAN_FLUSH_TO_ZERO_0			_MK_ADDR_CONST(0x30c0)
> +#define CDMA_D_NAN_FLUSH_TO_ZERO_0_NAN_TO_ZERO_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDMA_D_NAN_FLUSH_TO_ZERO_0_NAN_TO_ZERO_FIELD			_MK_FIELD_CONST(0x1, CDMA_D_NAN_FLUSH_TO_ZERO_0_NAN_TO_ZERO_SHIFT)
> +#define CDMA_D_NAN_FLUSH_TO_ZERO_0_NAN_TO_ZERO_DISABLE			_MK_ENUM_CONST(0x0)
> +#define CDMA_D_NAN_FLUSH_TO_ZERO_0_NAN_TO_ZERO_ENABLE			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register CDMA_D_NAN_INPUT_DATA_NUM_0
> +#define CDMA_D_NAN_INPUT_DATA_NUM_0			_MK_ADDR_CONST(0x30c4)
> +#define CDMA_D_NAN_INPUT_DATA_NUM_0_NAN_DATA_NUM_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDMA_D_NAN_INPUT_DATA_NUM_0_NAN_DATA_NUM_FIELD			_MK_FIELD_CONST(0xffffffff, CDMA_D_NAN_INPUT_DATA_NUM_0_NAN_DATA_NUM_SHIFT)
> +
> +
> +// Register CDMA_D_NAN_INPUT_WEIGHT_NUM_0
> +#define CDMA_D_NAN_INPUT_WEIGHT_NUM_0			_MK_ADDR_CONST(0x30c8)
> +#define CDMA_D_NAN_INPUT_WEIGHT_NUM_0_NAN_WEIGHT_NUM_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDMA_D_NAN_INPUT_WEIGHT_NUM_0_NAN_WEIGHT_NUM_FIELD			_MK_FIELD_CONST(0xffffffff, CDMA_D_NAN_INPUT_WEIGHT_NUM_0_NAN_WEIGHT_NUM_SHIFT)
> +
> +
> +// Register CDMA_D_INF_INPUT_DATA_NUM_0
> +#define CDMA_D_INF_INPUT_DATA_NUM_0			_MK_ADDR_CONST(0x30cc)
> +#define CDMA_D_INF_INPUT_DATA_NUM_0_INF_DATA_NUM_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDMA_D_INF_INPUT_DATA_NUM_0_INF_DATA_NUM_FIELD			_MK_FIELD_CONST(0xffffffff, CDMA_D_INF_INPUT_DATA_NUM_0_INF_DATA_NUM_SHIFT)
> +
> +
> +// Register CDMA_D_INF_INPUT_WEIGHT_NUM_0
> +#define CDMA_D_INF_INPUT_WEIGHT_NUM_0			_MK_ADDR_CONST(0x30d0)
> +#define CDMA_D_INF_INPUT_WEIGHT_NUM_0_INF_WEIGHT_NUM_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDMA_D_INF_INPUT_WEIGHT_NUM_0_INF_WEIGHT_NUM_FIELD			_MK_FIELD_CONST(0xffffffff, CDMA_D_INF_INPUT_WEIGHT_NUM_0_INF_WEIGHT_NUM_SHIFT)
> +
> +
> +// Register CDMA_D_PERF_ENABLE_0
> +#define CDMA_D_PERF_ENABLE_0			_MK_ADDR_CONST(0x30d4)
> +#define CDMA_D_PERF_ENABLE_0_DMA_EN_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDMA_D_PERF_ENABLE_0_DMA_EN_FIELD			_MK_FIELD_CONST(0x1, CDMA_D_PERF_ENABLE_0_DMA_EN_SHIFT)
> +
> +
> +// Register CDMA_D_PERF_DAT_READ_STALL_0
> +#define CDMA_D_PERF_DAT_READ_STALL_0			_MK_ADDR_CONST(0x30d8)
> +#define CDMA_D_PERF_DAT_READ_STALL_0_DAT_RD_STALL_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDMA_D_PERF_DAT_READ_STALL_0_DAT_RD_STALL_FIELD			_MK_FIELD_CONST(0xffffffff, CDMA_D_PERF_DAT_READ_STALL_0_DAT_RD_STALL_SHIFT)
> +
> +
> +// Register CDMA_D_PERF_WT_READ_STALL_0
> +#define CDMA_D_PERF_WT_READ_STALL_0			_MK_ADDR_CONST(0x30dc)
> +#define CDMA_D_PERF_WT_READ_STALL_0_WT_RD_STALL_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDMA_D_PERF_WT_READ_STALL_0_WT_RD_STALL_FIELD			_MK_FIELD_CONST(0xffffffff, CDMA_D_PERF_WT_READ_STALL_0_WT_RD_STALL_SHIFT)
> +
> +
> +// Register CDMA_D_PERF_DAT_READ_LATENCY_0
> +#define CDMA_D_PERF_DAT_READ_LATENCY_0			_MK_ADDR_CONST(0x30e0)
> +#define CDMA_D_PERF_DAT_READ_LATENCY_0_DAT_RD_LATENCY_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDMA_D_PERF_DAT_READ_LATENCY_0_DAT_RD_LATENCY_FIELD			_MK_FIELD_CONST(0xffffffff, CDMA_D_PERF_DAT_READ_LATENCY_0_DAT_RD_LATENCY_SHIFT)
> +
> +
> +// Register CDMA_D_PERF_WT_READ_LATENCY_0
> +#define CDMA_D_PERF_WT_READ_LATENCY_0			_MK_ADDR_CONST(0x30e4)
> +#define CDMA_D_PERF_WT_READ_LATENCY_0_WT_RD_LATENCY_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDMA_D_PERF_WT_READ_LATENCY_0_WT_RD_LATENCY_FIELD			_MK_FIELD_CONST(0xffffffff, CDMA_D_PERF_WT_READ_LATENCY_0_WT_RD_LATENCY_SHIFT)
> +
> +
> +// Register CDMA_D_CYA_0
> +#define CDMA_D_CYA_0			_MK_ADDR_CONST(0x30e8)
> +#define CDMA_D_CYA_0_CYA_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDMA_D_CYA_0_CYA_FIELD			_MK_FIELD_CONST(0xffffffff, CDMA_D_CYA_0_CYA_SHIFT)
> +
> +
> +
> +// To satisfy various compilers and platforms,
> +// we let users control the types and syntax of certain constants, using macros.
> +#ifndef _MK_SHIFT_CONST
> +  #define _MK_SHIFT_CONST(_constant_) _constant_
> +#endif
> +#ifndef _MK_MASK_CONST
> +  #define _MK_MASK_CONST(_constant_) _constant_
> +#endif
> +#ifndef _MK_ENUM_CONST
> +  #define _MK_ENUM_CONST(_constant_) (_constant_ ## UL)
> +#endif
> +#ifndef _MK_ADDR_CONST
> +  #define _MK_ADDR_CONST(_constant_) _constant_
> +#endif
> +#ifndef _MK_FIELD_CONST
> +  #define _MK_FIELD_CONST(_mask_, _shift_) (_MK_MASK_CONST(_mask_) << _MK_SHIFT_CONST(_shift_))
> +#endif
> +
> +
> +// Register CSC_S_STATUS_0
> +#define CSC_S_STATUS_0			_MK_ADDR_CONST(0x4000)
> +#define CSC_S_STATUS_0_STATUS_0_SHIFT			_MK_SHIFT_CONST(0)
> +#define CSC_S_STATUS_0_STATUS_0_FIELD			_MK_FIELD_CONST(0x3, CSC_S_STATUS_0_STATUS_0_SHIFT)
> +#define CSC_S_STATUS_0_STATUS_0_IDLE			_MK_ENUM_CONST(0x0)
> +#define CSC_S_STATUS_0_STATUS_0_RUNNING			_MK_ENUM_CONST(0x1)
> +#define CSC_S_STATUS_0_STATUS_0_PENDING			_MK_ENUM_CONST(0x2)
> +#define CSC_S_STATUS_0_STATUS_1_SHIFT			_MK_SHIFT_CONST(16)
> +#define CSC_S_STATUS_0_STATUS_1_FIELD			_MK_FIELD_CONST(0x3, CSC_S_STATUS_0_STATUS_1_SHIFT)
> +#define CSC_S_STATUS_0_STATUS_1_IDLE			_MK_ENUM_CONST(0x0)
> +#define CSC_S_STATUS_0_STATUS_1_RUNNING			_MK_ENUM_CONST(0x1)
> +#define CSC_S_STATUS_0_STATUS_1_PENDING			_MK_ENUM_CONST(0x2)
> +
> +
> +// Register CSC_S_POINTER_0
> +#define CSC_S_POINTER_0			_MK_ADDR_CONST(0x4004)
> +#define CSC_S_POINTER_0_PRODUCER_SHIFT			_MK_SHIFT_CONST(0)
> +#define CSC_S_POINTER_0_PRODUCER_FIELD			_MK_FIELD_CONST(0x1, CSC_S_POINTER_0_PRODUCER_SHIFT)
> +#define CSC_S_POINTER_0_PRODUCER_GROUP_0			_MK_ENUM_CONST(0x0)
> +#define CSC_S_POINTER_0_PRODUCER_GROUP_1			_MK_ENUM_CONST(0x1)
> +#define CSC_S_POINTER_0_CONSUMER_SHIFT			_MK_SHIFT_CONST(16)
> +#define CSC_S_POINTER_0_CONSUMER_FIELD			_MK_FIELD_CONST(0x1, CSC_S_POINTER_0_CONSUMER_SHIFT)
> +#define CSC_S_POINTER_0_CONSUMER_GROUP_0			_MK_ENUM_CONST(0x0)
> +#define CSC_S_POINTER_0_CONSUMER_GROUP_1			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register CSC_D_OP_ENABLE_0
> +#define CSC_D_OP_ENABLE_0			_MK_ADDR_CONST(0x4008)
> +#define CSC_D_OP_ENABLE_0_OP_EN_SHIFT			_MK_SHIFT_CONST(0)
> +#define CSC_D_OP_ENABLE_0_OP_EN_FIELD			_MK_FIELD_CONST(0x1, CSC_D_OP_ENABLE_0_OP_EN_SHIFT)
> +#define CSC_D_OP_ENABLE_0_OP_EN_DISABLE			_MK_ENUM_CONST(0x0)
> +#define CSC_D_OP_ENABLE_0_OP_EN_ENABLE			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register CSC_D_MISC_CFG_0
> +#define CSC_D_MISC_CFG_0			_MK_ADDR_CONST(0x400c)
> +#define CSC_D_MISC_CFG_0_CONV_MODE_SHIFT			_MK_SHIFT_CONST(0)
> +#define CSC_D_MISC_CFG_0_CONV_MODE_FIELD			_MK_FIELD_CONST(0x1, CSC_D_MISC_CFG_0_CONV_MODE_SHIFT)
> +#define CSC_D_MISC_CFG_0_CONV_MODE_DIRECT			_MK_ENUM_CONST(0x0)
> +#define CSC_D_MISC_CFG_0_CONV_MODE_WINOGRAD			_MK_ENUM_CONST(0x1)
> +#define CSC_D_MISC_CFG_0_IN_PRECISION_SHIFT			_MK_SHIFT_CONST(8)
> +#define CSC_D_MISC_CFG_0_IN_PRECISION_FIELD			_MK_FIELD_CONST(0x3, CSC_D_MISC_CFG_0_IN_PRECISION_SHIFT)
> +#define CSC_D_MISC_CFG_0_IN_PRECISION_INT8			_MK_ENUM_CONST(0x0)
> +#define CSC_D_MISC_CFG_0_IN_PRECISION_INT16			_MK_ENUM_CONST(0x1)
> +#define CSC_D_MISC_CFG_0_IN_PRECISION_FP16			_MK_ENUM_CONST(0x2)
> +#define CSC_D_MISC_CFG_0_PROC_PRECISION_SHIFT			_MK_SHIFT_CONST(12)
> +#define CSC_D_MISC_CFG_0_PROC_PRECISION_FIELD			_MK_FIELD_CONST(0x3, CSC_D_MISC_CFG_0_PROC_PRECISION_SHIFT)
> +#define CSC_D_MISC_CFG_0_PROC_PRECISION_INT8			_MK_ENUM_CONST(0x0)
> +#define CSC_D_MISC_CFG_0_PROC_PRECISION_INT16			_MK_ENUM_CONST(0x1)
> +#define CSC_D_MISC_CFG_0_PROC_PRECISION_FP16			_MK_ENUM_CONST(0x2)
> +#define CSC_D_MISC_CFG_0_DATA_REUSE_SHIFT			_MK_SHIFT_CONST(16)
> +#define CSC_D_MISC_CFG_0_DATA_REUSE_FIELD			_MK_FIELD_CONST(0x1, CSC_D_MISC_CFG_0_DATA_REUSE_SHIFT)
> +#define CSC_D_MISC_CFG_0_DATA_REUSE_DISABLE			_MK_ENUM_CONST(0x0)
> +#define CSC_D_MISC_CFG_0_DATA_REUSE_ENABLE			_MK_ENUM_CONST(0x1)
> +#define CSC_D_MISC_CFG_0_WEIGHT_REUSE_SHIFT			_MK_SHIFT_CONST(20)
> +#define CSC_D_MISC_CFG_0_WEIGHT_REUSE_FIELD			_MK_FIELD_CONST(0x1, CSC_D_MISC_CFG_0_WEIGHT_REUSE_SHIFT)
> +#define CSC_D_MISC_CFG_0_WEIGHT_REUSE_DISABLE			_MK_ENUM_CONST(0x0)
> +#define CSC_D_MISC_CFG_0_WEIGHT_REUSE_ENABLE			_MK_ENUM_CONST(0x1)
> +#define CSC_D_MISC_CFG_0_SKIP_DATA_RLS_SHIFT			_MK_SHIFT_CONST(24)
> +#define CSC_D_MISC_CFG_0_SKIP_DATA_RLS_FIELD			_MK_FIELD_CONST(0x1, CSC_D_MISC_CFG_0_SKIP_DATA_RLS_SHIFT)
> +#define CSC_D_MISC_CFG_0_SKIP_DATA_RLS_DISABLE			_MK_ENUM_CONST(0x0)
> +#define CSC_D_MISC_CFG_0_SKIP_DATA_RLS_ENABLE			_MK_ENUM_CONST(0x1)
> +#define CSC_D_MISC_CFG_0_SKIP_WEIGHT_RLS_SHIFT			_MK_SHIFT_CONST(28)
> +#define CSC_D_MISC_CFG_0_SKIP_WEIGHT_RLS_FIELD			_MK_FIELD_CONST(0x1, CSC_D_MISC_CFG_0_SKIP_WEIGHT_RLS_SHIFT)
> +#define CSC_D_MISC_CFG_0_SKIP_WEIGHT_RLS_DISABLE			_MK_ENUM_CONST(0x0)
> +#define CSC_D_MISC_CFG_0_SKIP_WEIGHT_RLS_ENABLE			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register CSC_D_DATAIN_FORMAT_0
> +#define CSC_D_DATAIN_FORMAT_0			_MK_ADDR_CONST(0x4010)
> +#define CSC_D_DATAIN_FORMAT_0_DATAIN_FORMAT_SHIFT			_MK_SHIFT_CONST(0)
> +#define CSC_D_DATAIN_FORMAT_0_DATAIN_FORMAT_FIELD			_MK_FIELD_CONST(0x1, CSC_D_DATAIN_FORMAT_0_DATAIN_FORMAT_SHIFT)
> +#define CSC_D_DATAIN_FORMAT_0_DATAIN_FORMAT_FEATURE			_MK_ENUM_CONST(0x0)
> +#define CSC_D_DATAIN_FORMAT_0_DATAIN_FORMAT_PIXEL			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register CSC_D_DATAIN_SIZE_EXT_0_0
> +#define CSC_D_DATAIN_SIZE_EXT_0_0			_MK_ADDR_CONST(0x4014)
> +#define CSC_D_DATAIN_SIZE_EXT_0_0_DATAIN_WIDTH_EXT_SHIFT			_MK_SHIFT_CONST(0)
> +#define CSC_D_DATAIN_SIZE_EXT_0_0_DATAIN_WIDTH_EXT_FIELD			_MK_FIELD_CONST(0x1fff, CSC_D_DATAIN_SIZE_EXT_0_0_DATAIN_WIDTH_EXT_SHIFT)
> +#define CSC_D_DATAIN_SIZE_EXT_0_0_DATAIN_HEIGHT_EXT_SHIFT			_MK_SHIFT_CONST(16)
> +#define CSC_D_DATAIN_SIZE_EXT_0_0_DATAIN_HEIGHT_EXT_FIELD			_MK_FIELD_CONST(0x1fff, CSC_D_DATAIN_SIZE_EXT_0_0_DATAIN_HEIGHT_EXT_SHIFT)
> +
> +
> +// Register CSC_D_DATAIN_SIZE_EXT_1_0
> +#define CSC_D_DATAIN_SIZE_EXT_1_0			_MK_ADDR_CONST(0x4018)
> +#define CSC_D_DATAIN_SIZE_EXT_1_0_DATAIN_CHANNEL_EXT_SHIFT			_MK_SHIFT_CONST(0)
> +#define CSC_D_DATAIN_SIZE_EXT_1_0_DATAIN_CHANNEL_EXT_FIELD			_MK_FIELD_CONST(0x1fff, CSC_D_DATAIN_SIZE_EXT_1_0_DATAIN_CHANNEL_EXT_SHIFT)
> +
> +
> +// Register CSC_D_BATCH_NUMBER_0
> +#define CSC_D_BATCH_NUMBER_0			_MK_ADDR_CONST(0x401c)
> +#define CSC_D_BATCH_NUMBER_0_BATCHES_SHIFT			_MK_SHIFT_CONST(0)
> +#define CSC_D_BATCH_NUMBER_0_BATCHES_FIELD			_MK_FIELD_CONST(0x1f, CSC_D_BATCH_NUMBER_0_BATCHES_SHIFT)
> +
> +
> +// Register CSC_D_POST_Y_EXTENSION_0
> +#define CSC_D_POST_Y_EXTENSION_0			_MK_ADDR_CONST(0x4020)
> +#define CSC_D_POST_Y_EXTENSION_0_Y_EXTENSION_SHIFT			_MK_SHIFT_CONST(0)
> +#define CSC_D_POST_Y_EXTENSION_0_Y_EXTENSION_FIELD			_MK_FIELD_CONST(0x3, CSC_D_POST_Y_EXTENSION_0_Y_EXTENSION_SHIFT)
> +
> +
> +// Register CSC_D_ENTRY_PER_SLICE_0
> +#define CSC_D_ENTRY_PER_SLICE_0			_MK_ADDR_CONST(0x4024)
> +#define CSC_D_ENTRY_PER_SLICE_0_ENTRIES_SHIFT			_MK_SHIFT_CONST(0)
> +#define CSC_D_ENTRY_PER_SLICE_0_ENTRIES_FIELD			_MK_FIELD_CONST(0x3fff, CSC_D_ENTRY_PER_SLICE_0_ENTRIES_SHIFT)
> +
> +
> +// Register CSC_D_WEIGHT_FORMAT_0
> +#define CSC_D_WEIGHT_FORMAT_0			_MK_ADDR_CONST(0x4028)
> +#define CSC_D_WEIGHT_FORMAT_0_WEIGHT_FORMAT_SHIFT			_MK_SHIFT_CONST(0)
> +#define CSC_D_WEIGHT_FORMAT_0_WEIGHT_FORMAT_FIELD			_MK_FIELD_CONST(0x1, CSC_D_WEIGHT_FORMAT_0_WEIGHT_FORMAT_SHIFT)
> +#define CSC_D_WEIGHT_FORMAT_0_WEIGHT_FORMAT_UNCOMPRESSED			_MK_ENUM_CONST(0x0)
> +#define CSC_D_WEIGHT_FORMAT_0_WEIGHT_FORMAT_COMPRESSED			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register CSC_D_WEIGHT_SIZE_EXT_0_0
> +#define CSC_D_WEIGHT_SIZE_EXT_0_0			_MK_ADDR_CONST(0x402c)
> +#define CSC_D_WEIGHT_SIZE_EXT_0_0_WEIGHT_WIDTH_EXT_SHIFT			_MK_SHIFT_CONST(0)
> +#define CSC_D_WEIGHT_SIZE_EXT_0_0_WEIGHT_WIDTH_EXT_FIELD			_MK_FIELD_CONST(0x1f, CSC_D_WEIGHT_SIZE_EXT_0_0_WEIGHT_WIDTH_EXT_SHIFT)
> +#define CSC_D_WEIGHT_SIZE_EXT_0_0_WEIGHT_HEIGHT_EXT_SHIFT			_MK_SHIFT_CONST(16)
> +#define CSC_D_WEIGHT_SIZE_EXT_0_0_WEIGHT_HEIGHT_EXT_FIELD			_MK_FIELD_CONST(0x1f, CSC_D_WEIGHT_SIZE_EXT_0_0_WEIGHT_HEIGHT_EXT_SHIFT)
> +
> +
> +// Register CSC_D_WEIGHT_SIZE_EXT_1_0
> +#define CSC_D_WEIGHT_SIZE_EXT_1_0			_MK_ADDR_CONST(0x4030)
> +#define CSC_D_WEIGHT_SIZE_EXT_1_0_WEIGHT_CHANNEL_EXT_SHIFT			_MK_SHIFT_CONST(0)
> +#define CSC_D_WEIGHT_SIZE_EXT_1_0_WEIGHT_CHANNEL_EXT_FIELD			_MK_FIELD_CONST(0x1fff, CSC_D_WEIGHT_SIZE_EXT_1_0_WEIGHT_CHANNEL_EXT_SHIFT)
> +#define CSC_D_WEIGHT_SIZE_EXT_1_0_WEIGHT_KERNEL_SHIFT			_MK_SHIFT_CONST(16)
> +#define CSC_D_WEIGHT_SIZE_EXT_1_0_WEIGHT_KERNEL_FIELD			_MK_FIELD_CONST(0x1fff, CSC_D_WEIGHT_SIZE_EXT_1_0_WEIGHT_KERNEL_SHIFT)
> +
> +
> +// Register CSC_D_WEIGHT_BYTES_0
> +#define CSC_D_WEIGHT_BYTES_0			_MK_ADDR_CONST(0x4034)
> +#define CSC_D_WEIGHT_BYTES_0_WEIGHT_BYTES_SHIFT			_MK_SHIFT_CONST(0)
> +#define CSC_D_WEIGHT_BYTES_0_WEIGHT_BYTES_FIELD			_MK_FIELD_CONST(0xffffffff, CSC_D_WEIGHT_BYTES_0_WEIGHT_BYTES_SHIFT)
> +
> +
> +// Register CSC_D_WMB_BYTES_0
> +#define CSC_D_WMB_BYTES_0			_MK_ADDR_CONST(0x4038)
> +#define CSC_D_WMB_BYTES_0_WMB_BYTES_SHIFT			_MK_SHIFT_CONST(0)
> +#define CSC_D_WMB_BYTES_0_WMB_BYTES_FIELD			_MK_FIELD_CONST(0xfffffff, CSC_D_WMB_BYTES_0_WMB_BYTES_SHIFT)
> +
> +
> +// Register CSC_D_DATAOUT_SIZE_0_0
> +#define CSC_D_DATAOUT_SIZE_0_0			_MK_ADDR_CONST(0x403c)
> +#define CSC_D_DATAOUT_SIZE_0_0_DATAOUT_WIDTH_SHIFT			_MK_SHIFT_CONST(0)
> +#define CSC_D_DATAOUT_SIZE_0_0_DATAOUT_WIDTH_FIELD			_MK_FIELD_CONST(0x1fff, CSC_D_DATAOUT_SIZE_0_0_DATAOUT_WIDTH_SHIFT)
> +#define CSC_D_DATAOUT_SIZE_0_0_DATAOUT_HEIGHT_SHIFT			_MK_SHIFT_CONST(16)
> +#define CSC_D_DATAOUT_SIZE_0_0_DATAOUT_HEIGHT_FIELD			_MK_FIELD_CONST(0x1fff, CSC_D_DATAOUT_SIZE_0_0_DATAOUT_HEIGHT_SHIFT)
> +
> +
> +// Register CSC_D_DATAOUT_SIZE_1_0
> +#define CSC_D_DATAOUT_SIZE_1_0			_MK_ADDR_CONST(0x4040)
> +#define CSC_D_DATAOUT_SIZE_1_0_DATAOUT_CHANNEL_SHIFT			_MK_SHIFT_CONST(0)
> +#define CSC_D_DATAOUT_SIZE_1_0_DATAOUT_CHANNEL_FIELD			_MK_FIELD_CONST(0x1fff, CSC_D_DATAOUT_SIZE_1_0_DATAOUT_CHANNEL_SHIFT)
> +
> +
> +// Register CSC_D_ATOMICS_0
> +#define CSC_D_ATOMICS_0			_MK_ADDR_CONST(0x4044)
> +#define CSC_D_ATOMICS_0_ATOMICS_SHIFT			_MK_SHIFT_CONST(0)
> +#define CSC_D_ATOMICS_0_ATOMICS_FIELD			_MK_FIELD_CONST(0x1fffff, CSC_D_ATOMICS_0_ATOMICS_SHIFT)
> +
> +
> +// Register CSC_D_RELEASE_0
> +#define CSC_D_RELEASE_0			_MK_ADDR_CONST(0x4048)
> +#define CSC_D_RELEASE_0_RLS_SLICES_SHIFT			_MK_SHIFT_CONST(0)
> +#define CSC_D_RELEASE_0_RLS_SLICES_FIELD			_MK_FIELD_CONST(0xfff, CSC_D_RELEASE_0_RLS_SLICES_SHIFT)
> +
> +
> +// Register CSC_D_CONV_STRIDE_EXT_0
> +#define CSC_D_CONV_STRIDE_EXT_0			_MK_ADDR_CONST(0x404c)
> +#define CSC_D_CONV_STRIDE_EXT_0_CONV_X_STRIDE_EXT_SHIFT			_MK_SHIFT_CONST(0)
> +#define CSC_D_CONV_STRIDE_EXT_0_CONV_X_STRIDE_EXT_FIELD			_MK_FIELD_CONST(0x7, CSC_D_CONV_STRIDE_EXT_0_CONV_X_STRIDE_EXT_SHIFT)
> +#define CSC_D_CONV_STRIDE_EXT_0_CONV_Y_STRIDE_EXT_SHIFT			_MK_SHIFT_CONST(16)
> +#define CSC_D_CONV_STRIDE_EXT_0_CONV_Y_STRIDE_EXT_FIELD			_MK_FIELD_CONST(0x7, CSC_D_CONV_STRIDE_EXT_0_CONV_Y_STRIDE_EXT_SHIFT)
> +
> +
> +// Register CSC_D_DILATION_EXT_0
> +#define CSC_D_DILATION_EXT_0			_MK_ADDR_CONST(0x4050)
> +#define CSC_D_DILATION_EXT_0_X_DILATION_EXT_SHIFT			_MK_SHIFT_CONST(0)
> +#define CSC_D_DILATION_EXT_0_X_DILATION_EXT_FIELD			_MK_FIELD_CONST(0x1f, CSC_D_DILATION_EXT_0_X_DILATION_EXT_SHIFT)
> +#define CSC_D_DILATION_EXT_0_Y_DILATION_EXT_SHIFT			_MK_SHIFT_CONST(16)
> +#define CSC_D_DILATION_EXT_0_Y_DILATION_EXT_FIELD			_MK_FIELD_CONST(0x1f, CSC_D_DILATION_EXT_0_Y_DILATION_EXT_SHIFT)
> +
> +
> +// Register CSC_D_ZERO_PADDING_0
> +#define CSC_D_ZERO_PADDING_0			_MK_ADDR_CONST(0x4054)
> +#define CSC_D_ZERO_PADDING_0_PAD_LEFT_SHIFT			_MK_SHIFT_CONST(0)
> +#define CSC_D_ZERO_PADDING_0_PAD_LEFT_FIELD			_MK_FIELD_CONST(0x1f, CSC_D_ZERO_PADDING_0_PAD_LEFT_SHIFT)
> +#define CSC_D_ZERO_PADDING_0_PAD_TOP_SHIFT			_MK_SHIFT_CONST(16)
> +#define CSC_D_ZERO_PADDING_0_PAD_TOP_FIELD			_MK_FIELD_CONST(0x1f, CSC_D_ZERO_PADDING_0_PAD_TOP_SHIFT)
> +
> +
> +// Register CSC_D_ZERO_PADDING_VALUE_0
> +#define CSC_D_ZERO_PADDING_VALUE_0			_MK_ADDR_CONST(0x4058)
> +#define CSC_D_ZERO_PADDING_VALUE_0_PAD_VALUE_SHIFT			_MK_SHIFT_CONST(0)
> +#define CSC_D_ZERO_PADDING_VALUE_0_PAD_VALUE_FIELD			_MK_FIELD_CONST(0xffff, CSC_D_ZERO_PADDING_VALUE_0_PAD_VALUE_SHIFT)
> +
> +
> +// Register CSC_D_BANK_0
> +#define CSC_D_BANK_0			_MK_ADDR_CONST(0x405c)
> +#define CSC_D_BANK_0_DATA_BANK_SHIFT			_MK_SHIFT_CONST(0)
> +#define CSC_D_BANK_0_DATA_BANK_FIELD			_MK_FIELD_CONST(0x1f, CSC_D_BANK_0_DATA_BANK_SHIFT)
> +#define CSC_D_BANK_0_WEIGHT_BANK_SHIFT			_MK_SHIFT_CONST(16)
> +#define CSC_D_BANK_0_WEIGHT_BANK_FIELD			_MK_FIELD_CONST(0x1f, CSC_D_BANK_0_WEIGHT_BANK_SHIFT)
> +
> +
> +// Register CSC_D_PRA_CFG_0
> +#define CSC_D_PRA_CFG_0			_MK_ADDR_CONST(0x4060)
> +#define CSC_D_PRA_CFG_0_PRA_TRUNCATE_SHIFT			_MK_SHIFT_CONST(0)
> +#define CSC_D_PRA_CFG_0_PRA_TRUNCATE_FIELD			_MK_FIELD_CONST(0x3, CSC_D_PRA_CFG_0_PRA_TRUNCATE_SHIFT)
> +
> +
> +// Register CSC_D_CYA_0
> +#define CSC_D_CYA_0			_MK_ADDR_CONST(0x4064)
> +#define CSC_D_CYA_0_CYA_SHIFT			_MK_SHIFT_CONST(0)
> +#define CSC_D_CYA_0_CYA_FIELD			_MK_FIELD_CONST(0xffffffff, CSC_D_CYA_0_CYA_SHIFT)
> +
> +
> +
> +// To satisfy various compilers and platforms,
> +// we let users control the types and syntax of certain constants, using macros.
> +#ifndef _MK_SHIFT_CONST
> +  #define _MK_SHIFT_CONST(_constant_) _constant_
> +#endif
> +#ifndef _MK_MASK_CONST
> +  #define _MK_MASK_CONST(_constant_) _constant_
> +#endif
> +#ifndef _MK_ENUM_CONST
> +  #define _MK_ENUM_CONST(_constant_) (_constant_ ## UL)
> +#endif
> +#ifndef _MK_ADDR_CONST
> +  #define _MK_ADDR_CONST(_constant_) _constant_
> +#endif
> +#ifndef _MK_FIELD_CONST
> +  #define _MK_FIELD_CONST(_mask_, _shift_) (_MK_MASK_CONST(_mask_) << _MK_SHIFT_CONST(_shift_))
> +#endif
> +
> +
> +// Register CMAC_A_S_STATUS_0
> +#define CMAC_A_S_STATUS_0			_MK_ADDR_CONST(0x5000)
> +#define CMAC_A_S_STATUS_0_STATUS_0_SHIFT			_MK_SHIFT_CONST(0)
> +#define CMAC_A_S_STATUS_0_STATUS_0_FIELD			_MK_FIELD_CONST(0x3, CMAC_A_S_STATUS_0_STATUS_0_SHIFT)
> +#define CMAC_A_S_STATUS_0_STATUS_0_IDLE			_MK_ENUM_CONST(0x0)
> +#define CMAC_A_S_STATUS_0_STATUS_0_RUNNING			_MK_ENUM_CONST(0x1)
> +#define CMAC_A_S_STATUS_0_STATUS_0_PENDING			_MK_ENUM_CONST(0x2)
> +#define CMAC_A_S_STATUS_0_STATUS_1_SHIFT			_MK_SHIFT_CONST(16)
> +#define CMAC_A_S_STATUS_0_STATUS_1_FIELD			_MK_FIELD_CONST(0x3, CMAC_A_S_STATUS_0_STATUS_1_SHIFT)
> +#define CMAC_A_S_STATUS_0_STATUS_1_IDLE			_MK_ENUM_CONST(0x0)
> +#define CMAC_A_S_STATUS_0_STATUS_1_RUNNING			_MK_ENUM_CONST(0x1)
> +#define CMAC_A_S_STATUS_0_STATUS_1_PENDING			_MK_ENUM_CONST(0x2)
> +
> +
> +// Register CMAC_A_S_POINTER_0
> +#define CMAC_A_S_POINTER_0			_MK_ADDR_CONST(0x5004)
> +#define CMAC_A_S_POINTER_0_PRODUCER_SHIFT			_MK_SHIFT_CONST(0)
> +#define CMAC_A_S_POINTER_0_PRODUCER_FIELD			_MK_FIELD_CONST(0x1, CMAC_A_S_POINTER_0_PRODUCER_SHIFT)
> +#define CMAC_A_S_POINTER_0_PRODUCER_GROUP_0			_MK_ENUM_CONST(0x0)
> +#define CMAC_A_S_POINTER_0_PRODUCER_GROUP_1			_MK_ENUM_CONST(0x1)
> +#define CMAC_A_S_POINTER_0_CONSUMER_SHIFT			_MK_SHIFT_CONST(16)
> +#define CMAC_A_S_POINTER_0_CONSUMER_FIELD			_MK_FIELD_CONST(0x1, CMAC_A_S_POINTER_0_CONSUMER_SHIFT)
> +#define CMAC_A_S_POINTER_0_CONSUMER_GROUP_0			_MK_ENUM_CONST(0x0)
> +#define CMAC_A_S_POINTER_0_CONSUMER_GROUP_1			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register CMAC_A_D_OP_ENABLE_0
> +#define CMAC_A_D_OP_ENABLE_0			_MK_ADDR_CONST(0x5008)
> +#define CMAC_A_D_OP_ENABLE_0_OP_EN_SHIFT			_MK_SHIFT_CONST(0)
> +#define CMAC_A_D_OP_ENABLE_0_OP_EN_FIELD			_MK_FIELD_CONST(0x1, CMAC_A_D_OP_ENABLE_0_OP_EN_SHIFT)
> +#define CMAC_A_D_OP_ENABLE_0_OP_EN_DISABLE			_MK_ENUM_CONST(0x0)
> +#define CMAC_A_D_OP_ENABLE_0_OP_EN_ENABLE			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register CMAC_A_D_MISC_CFG_0
> +#define CMAC_A_D_MISC_CFG_0			_MK_ADDR_CONST(0x500c)
> +#define CMAC_A_D_MISC_CFG_0_CONV_MODE_SHIFT			_MK_SHIFT_CONST(0)
> +#define CMAC_A_D_MISC_CFG_0_CONV_MODE_FIELD			_MK_FIELD_CONST(0x1, CMAC_A_D_MISC_CFG_0_CONV_MODE_SHIFT)
> +#define CMAC_A_D_MISC_CFG_0_CONV_MODE_DIRECT			_MK_ENUM_CONST(0x0)
> +#define CMAC_A_D_MISC_CFG_0_CONV_MODE_WINOGRAD			_MK_ENUM_CONST(0x1)
> +#define CMAC_A_D_MISC_CFG_0_PROC_PRECISION_SHIFT			_MK_SHIFT_CONST(12)
> +#define CMAC_A_D_MISC_CFG_0_PROC_PRECISION_FIELD			_MK_FIELD_CONST(0x3, CMAC_A_D_MISC_CFG_0_PROC_PRECISION_SHIFT)
> +#define CMAC_A_D_MISC_CFG_0_PROC_PRECISION_INT8			_MK_ENUM_CONST(0x0)
> +#define CMAC_A_D_MISC_CFG_0_PROC_PRECISION_INT16			_MK_ENUM_CONST(0x1)
> +#define CMAC_A_D_MISC_CFG_0_PROC_PRECISION_FP16			_MK_ENUM_CONST(0x2)
> +
> +
> +
> +// To satisfy various compilers and platforms,
> +// we let users control the types and syntax of certain constants, using macros.
> +#ifndef _MK_SHIFT_CONST
> +  #define _MK_SHIFT_CONST(_constant_) _constant_
> +#endif
> +#ifndef _MK_MASK_CONST
> +  #define _MK_MASK_CONST(_constant_) _constant_
> +#endif
> +#ifndef _MK_ENUM_CONST
> +  #define _MK_ENUM_CONST(_constant_) (_constant_ ## UL)
> +#endif
> +#ifndef _MK_ADDR_CONST
> +  #define _MK_ADDR_CONST(_constant_) _constant_
> +#endif
> +#ifndef _MK_FIELD_CONST
> +  #define _MK_FIELD_CONST(_mask_, _shift_) (_MK_MASK_CONST(_mask_) << _MK_SHIFT_CONST(_shift_))
> +#endif
> +
> +
> +// Register CMAC_B_S_STATUS_0
> +#define CMAC_B_S_STATUS_0			_MK_ADDR_CONST(0x6000)
> +#define CMAC_B_S_STATUS_0_STATUS_0_SHIFT			_MK_SHIFT_CONST(0)
> +#define CMAC_B_S_STATUS_0_STATUS_0_FIELD			_MK_FIELD_CONST(0x3, CMAC_B_S_STATUS_0_STATUS_0_SHIFT)
> +#define CMAC_B_S_STATUS_0_STATUS_0_IDLE			_MK_ENUM_CONST(0x0)
> +#define CMAC_B_S_STATUS_0_STATUS_0_RUNNING			_MK_ENUM_CONST(0x1)
> +#define CMAC_B_S_STATUS_0_STATUS_0_PENDING			_MK_ENUM_CONST(0x2)
> +#define CMAC_B_S_STATUS_0_STATUS_1_SHIFT			_MK_SHIFT_CONST(16)
> +#define CMAC_B_S_STATUS_0_STATUS_1_FIELD			_MK_FIELD_CONST(0x3, CMAC_B_S_STATUS_0_STATUS_1_SHIFT)
> +#define CMAC_B_S_STATUS_0_STATUS_1_IDLE			_MK_ENUM_CONST(0x0)
> +#define CMAC_B_S_STATUS_0_STATUS_1_RUNNING			_MK_ENUM_CONST(0x1)
> +#define CMAC_B_S_STATUS_0_STATUS_1_PENDING			_MK_ENUM_CONST(0x2)
> +
> +
> +// Register CMAC_B_S_POINTER_0
> +#define CMAC_B_S_POINTER_0			_MK_ADDR_CONST(0x6004)
> +#define CMAC_B_S_POINTER_0_PRODUCER_SHIFT			_MK_SHIFT_CONST(0)
> +#define CMAC_B_S_POINTER_0_PRODUCER_FIELD			_MK_FIELD_CONST(0x1, CMAC_B_S_POINTER_0_PRODUCER_SHIFT)
> +#define CMAC_B_S_POINTER_0_PRODUCER_GROUP_0			_MK_ENUM_CONST(0x0)
> +#define CMAC_B_S_POINTER_0_PRODUCER_GROUP_1			_MK_ENUM_CONST(0x1)
> +#define CMAC_B_S_POINTER_0_CONSUMER_SHIFT			_MK_SHIFT_CONST(16)
> +#define CMAC_B_S_POINTER_0_CONSUMER_FIELD			_MK_FIELD_CONST(0x1, CMAC_B_S_POINTER_0_CONSUMER_SHIFT)
> +#define CMAC_B_S_POINTER_0_CONSUMER_GROUP_0			_MK_ENUM_CONST(0x0)
> +#define CMAC_B_S_POINTER_0_CONSUMER_GROUP_1			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register CMAC_B_D_OP_ENABLE_0
> +#define CMAC_B_D_OP_ENABLE_0			_MK_ADDR_CONST(0x6008)
> +#define CMAC_B_D_OP_ENABLE_0_OP_EN_SHIFT			_MK_SHIFT_CONST(0)
> +#define CMAC_B_D_OP_ENABLE_0_OP_EN_FIELD			_MK_FIELD_CONST(0x1, CMAC_B_D_OP_ENABLE_0_OP_EN_SHIFT)
> +#define CMAC_B_D_OP_ENABLE_0_OP_EN_DISABLE			_MK_ENUM_CONST(0x0)
> +#define CMAC_B_D_OP_ENABLE_0_OP_EN_ENABLE			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register CMAC_B_D_MISC_CFG_0
> +#define CMAC_B_D_MISC_CFG_0			_MK_ADDR_CONST(0x600c)
> +#define CMAC_B_D_MISC_CFG_0_CONV_MODE_SHIFT			_MK_SHIFT_CONST(0)
> +#define CMAC_B_D_MISC_CFG_0_CONV_MODE_FIELD			_MK_FIELD_CONST(0x1, CMAC_B_D_MISC_CFG_0_CONV_MODE_SHIFT)
> +#define CMAC_B_D_MISC_CFG_0_CONV_MODE_DIRECT			_MK_ENUM_CONST(0x0)
> +#define CMAC_B_D_MISC_CFG_0_CONV_MODE_WINOGRAD			_MK_ENUM_CONST(0x1)
> +#define CMAC_B_D_MISC_CFG_0_PROC_PRECISION_SHIFT			_MK_SHIFT_CONST(12)
> +#define CMAC_B_D_MISC_CFG_0_PROC_PRECISION_FIELD			_MK_FIELD_CONST(0x3, CMAC_B_D_MISC_CFG_0_PROC_PRECISION_SHIFT)
> +#define CMAC_B_D_MISC_CFG_0_PROC_PRECISION_INT8			_MK_ENUM_CONST(0x0)
> +#define CMAC_B_D_MISC_CFG_0_PROC_PRECISION_INT16			_MK_ENUM_CONST(0x1)
> +#define CMAC_B_D_MISC_CFG_0_PROC_PRECISION_FP16			_MK_ENUM_CONST(0x2)
> +
> +
> +
> +// To satisfy various compilers and platforms,
> +// we let users control the types and syntax of certain constants, using macros.
> +#ifndef _MK_SHIFT_CONST
> +  #define _MK_SHIFT_CONST(_constant_) _constant_
> +#endif
> +#ifndef _MK_MASK_CONST
> +  #define _MK_MASK_CONST(_constant_) _constant_
> +#endif
> +#ifndef _MK_ENUM_CONST
> +  #define _MK_ENUM_CONST(_constant_) (_constant_ ## UL)
> +#endif
> +#ifndef _MK_ADDR_CONST
> +  #define _MK_ADDR_CONST(_constant_) _constant_
> +#endif
> +#ifndef _MK_FIELD_CONST
> +  #define _MK_FIELD_CONST(_mask_, _shift_) (_MK_MASK_CONST(_mask_) << _MK_SHIFT_CONST(_shift_))
> +#endif
> +
> +
> +// Register CACC_S_STATUS_0
> +#define CACC_S_STATUS_0			_MK_ADDR_CONST(0x7000)
> +#define CACC_S_STATUS_0_STATUS_0_SHIFT			_MK_SHIFT_CONST(0)
> +#define CACC_S_STATUS_0_STATUS_0_FIELD			_MK_FIELD_CONST(0x3, CACC_S_STATUS_0_STATUS_0_SHIFT)
> +#define CACC_S_STATUS_0_STATUS_0_IDLE			_MK_ENUM_CONST(0x0)
> +#define CACC_S_STATUS_0_STATUS_0_RUNNING			_MK_ENUM_CONST(0x1)
> +#define CACC_S_STATUS_0_STATUS_0_PENDING			_MK_ENUM_CONST(0x2)
> +#define CACC_S_STATUS_0_STATUS_1_SHIFT			_MK_SHIFT_CONST(16)
> +#define CACC_S_STATUS_0_STATUS_1_FIELD			_MK_FIELD_CONST(0x3, CACC_S_STATUS_0_STATUS_1_SHIFT)
> +#define CACC_S_STATUS_0_STATUS_1_IDLE			_MK_ENUM_CONST(0x0)
> +#define CACC_S_STATUS_0_STATUS_1_RUNNING			_MK_ENUM_CONST(0x1)
> +#define CACC_S_STATUS_0_STATUS_1_PENDING			_MK_ENUM_CONST(0x2)
> +
> +
> +// Register CACC_S_POINTER_0
> +#define CACC_S_POINTER_0			_MK_ADDR_CONST(0x7004)
> +#define CACC_S_POINTER_0_PRODUCER_SHIFT			_MK_SHIFT_CONST(0)
> +#define CACC_S_POINTER_0_PRODUCER_FIELD			_MK_FIELD_CONST(0x1, CACC_S_POINTER_0_PRODUCER_SHIFT)
> +#define CACC_S_POINTER_0_PRODUCER_GROUP_0			_MK_ENUM_CONST(0x0)
> +#define CACC_S_POINTER_0_PRODUCER_GROUP_1			_MK_ENUM_CONST(0x1)
> +#define CACC_S_POINTER_0_CONSUMER_SHIFT			_MK_SHIFT_CONST(16)
> +#define CACC_S_POINTER_0_CONSUMER_FIELD			_MK_FIELD_CONST(0x1, CACC_S_POINTER_0_CONSUMER_SHIFT)
> +#define CACC_S_POINTER_0_CONSUMER_GROUP_0			_MK_ENUM_CONST(0x0)
> +#define CACC_S_POINTER_0_CONSUMER_GROUP_1			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register CACC_D_OP_ENABLE_0
> +#define CACC_D_OP_ENABLE_0			_MK_ADDR_CONST(0x7008)
> +#define CACC_D_OP_ENABLE_0_OP_EN_SHIFT			_MK_SHIFT_CONST(0)
> +#define CACC_D_OP_ENABLE_0_OP_EN_FIELD			_MK_FIELD_CONST(0x1, CACC_D_OP_ENABLE_0_OP_EN_SHIFT)
> +#define CACC_D_OP_ENABLE_0_OP_EN_DISABLE			_MK_ENUM_CONST(0x0)
> +#define CACC_D_OP_ENABLE_0_OP_EN_ENABLE			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register CACC_D_MISC_CFG_0
> +#define CACC_D_MISC_CFG_0			_MK_ADDR_CONST(0x700c)
> +#define CACC_D_MISC_CFG_0_CONV_MODE_SHIFT			_MK_SHIFT_CONST(0)
> +#define CACC_D_MISC_CFG_0_CONV_MODE_FIELD			_MK_FIELD_CONST(0x1, CACC_D_MISC_CFG_0_CONV_MODE_SHIFT)
> +#define CACC_D_MISC_CFG_0_CONV_MODE_DIRECT			_MK_ENUM_CONST(0x0)
> +#define CACC_D_MISC_CFG_0_CONV_MODE_WINOGRAD			_MK_ENUM_CONST(0x1)
> +#define CACC_D_MISC_CFG_0_PROC_PRECISION_SHIFT			_MK_SHIFT_CONST(12)
> +#define CACC_D_MISC_CFG_0_PROC_PRECISION_FIELD			_MK_FIELD_CONST(0x3, CACC_D_MISC_CFG_0_PROC_PRECISION_SHIFT)
> +#define CACC_D_MISC_CFG_0_PROC_PRECISION_INT8			_MK_ENUM_CONST(0x0)
> +#define CACC_D_MISC_CFG_0_PROC_PRECISION_INT16			_MK_ENUM_CONST(0x1)
> +#define CACC_D_MISC_CFG_0_PROC_PRECISION_FP16			_MK_ENUM_CONST(0x2)
> +
> +
> +// Register CACC_D_DATAOUT_SIZE_0_0
> +#define CACC_D_DATAOUT_SIZE_0_0			_MK_ADDR_CONST(0x7010)
> +#define CACC_D_DATAOUT_SIZE_0_0_DATAOUT_WIDTH_SHIFT			_MK_SHIFT_CONST(0)
> +#define CACC_D_DATAOUT_SIZE_0_0_DATAOUT_WIDTH_FIELD			_MK_FIELD_CONST(0x1fff, CACC_D_DATAOUT_SIZE_0_0_DATAOUT_WIDTH_SHIFT)
> +#define CACC_D_DATAOUT_SIZE_0_0_DATAOUT_HEIGHT_SHIFT			_MK_SHIFT_CONST(16)
> +#define CACC_D_DATAOUT_SIZE_0_0_DATAOUT_HEIGHT_FIELD			_MK_FIELD_CONST(0x1fff, CACC_D_DATAOUT_SIZE_0_0_DATAOUT_HEIGHT_SHIFT)
> +
> +
> +// Register CACC_D_DATAOUT_SIZE_1_0
> +#define CACC_D_DATAOUT_SIZE_1_0			_MK_ADDR_CONST(0x7014)
> +#define CACC_D_DATAOUT_SIZE_1_0_DATAOUT_CHANNEL_SHIFT			_MK_SHIFT_CONST(0)
> +#define CACC_D_DATAOUT_SIZE_1_0_DATAOUT_CHANNEL_FIELD			_MK_FIELD_CONST(0x1fff, CACC_D_DATAOUT_SIZE_1_0_DATAOUT_CHANNEL_SHIFT)
> +
> +
> +// Register CACC_D_DATAOUT_ADDR_0
> +#define CACC_D_DATAOUT_ADDR_0			_MK_ADDR_CONST(0x7018)
> +#define CACC_D_DATAOUT_ADDR_0_DATAOUT_ADDR_SHIFT			_MK_SHIFT_CONST(0)
> +#define CACC_D_DATAOUT_ADDR_0_DATAOUT_ADDR_FIELD			_MK_FIELD_CONST(0xffffffff, CACC_D_DATAOUT_ADDR_0_DATAOUT_ADDR_SHIFT)
> +
> +
> +// Register CACC_D_BATCH_NUMBER_0
> +#define CACC_D_BATCH_NUMBER_0			_MK_ADDR_CONST(0x701c)
> +#define CACC_D_BATCH_NUMBER_0_BATCHES_SHIFT			_MK_SHIFT_CONST(0)
> +#define CACC_D_BATCH_NUMBER_0_BATCHES_FIELD			_MK_FIELD_CONST(0x1f, CACC_D_BATCH_NUMBER_0_BATCHES_SHIFT)
> +
> +
> +// Register CACC_D_LINE_STRIDE_0
> +#define CACC_D_LINE_STRIDE_0			_MK_ADDR_CONST(0x7020)
> +#define CACC_D_LINE_STRIDE_0_LINE_STRIDE_SHIFT			_MK_SHIFT_CONST(0)
> +#define CACC_D_LINE_STRIDE_0_LINE_STRIDE_FIELD			_MK_FIELD_CONST(0xffffff, CACC_D_LINE_STRIDE_0_LINE_STRIDE_SHIFT)
> +
> +
> +// Register CACC_D_SURF_STRIDE_0
> +#define CACC_D_SURF_STRIDE_0			_MK_ADDR_CONST(0x7024)
> +#define CACC_D_SURF_STRIDE_0_SURF_STRIDE_SHIFT			_MK_SHIFT_CONST(0)
> +#define CACC_D_SURF_STRIDE_0_SURF_STRIDE_FIELD			_MK_FIELD_CONST(0xffffff, CACC_D_SURF_STRIDE_0_SURF_STRIDE_SHIFT)
> +
> +
> +// Register CACC_D_DATAOUT_MAP_0
> +#define CACC_D_DATAOUT_MAP_0			_MK_ADDR_CONST(0x7028)
> +#define CACC_D_DATAOUT_MAP_0_LINE_PACKED_SHIFT			_MK_SHIFT_CONST(0)
> +#define CACC_D_DATAOUT_MAP_0_LINE_PACKED_FIELD			_MK_FIELD_CONST(0x1, CACC_D_DATAOUT_MAP_0_LINE_PACKED_SHIFT)
> +#define CACC_D_DATAOUT_MAP_0_LINE_PACKED_FALSE			_MK_ENUM_CONST(0x0)
> +#define CACC_D_DATAOUT_MAP_0_LINE_PACKED_TRUE			_MK_ENUM_CONST(0x1)
> +#define CACC_D_DATAOUT_MAP_0_SURF_PACKED_SHIFT			_MK_SHIFT_CONST(16)
> +#define CACC_D_DATAOUT_MAP_0_SURF_PACKED_FIELD			_MK_FIELD_CONST(0x1, CACC_D_DATAOUT_MAP_0_SURF_PACKED_SHIFT)
> +#define CACC_D_DATAOUT_MAP_0_SURF_PACKED_FALSE			_MK_ENUM_CONST(0x0)
> +#define CACC_D_DATAOUT_MAP_0_SURF_PACKED_TRUE			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register CACC_D_CLIP_CFG_0
> +#define CACC_D_CLIP_CFG_0			_MK_ADDR_CONST(0x702c)
> +#define CACC_D_CLIP_CFG_0_CLIP_TRUNCATE_SHIFT			_MK_SHIFT_CONST(0)
> +#define CACC_D_CLIP_CFG_0_CLIP_TRUNCATE_FIELD			_MK_FIELD_CONST(0x1f, CACC_D_CLIP_CFG_0_CLIP_TRUNCATE_SHIFT)
> +
> +
> +// Register CACC_D_OUT_SATURATION_0
> +#define CACC_D_OUT_SATURATION_0			_MK_ADDR_CONST(0x7030)
> +#define CACC_D_OUT_SATURATION_0_SAT_COUNT_SHIFT			_MK_SHIFT_CONST(0)
> +#define CACC_D_OUT_SATURATION_0_SAT_COUNT_FIELD			_MK_FIELD_CONST(0xffffffff, CACC_D_OUT_SATURATION_0_SAT_COUNT_SHIFT)
> +
> +
> +// Register CACC_D_CYA_0
> +#define CACC_D_CYA_0			_MK_ADDR_CONST(0x7034)
> +#define CACC_D_CYA_0_CYA_SHIFT			_MK_SHIFT_CONST(0)
> +#define CACC_D_CYA_0_CYA_FIELD			_MK_FIELD_CONST(0xffffffff, CACC_D_CYA_0_CYA_SHIFT)
> +
> +
> +
> +// To satisfy various compilers and platforms,
> +// we let users control the types and syntax of certain constants, using macros.
> +#ifndef _MK_SHIFT_CONST
> +  #define _MK_SHIFT_CONST(_constant_) _constant_
> +#endif
> +#ifndef _MK_MASK_CONST
> +  #define _MK_MASK_CONST(_constant_) _constant_
> +#endif
> +#ifndef _MK_ENUM_CONST
> +  #define _MK_ENUM_CONST(_constant_) (_constant_ ## UL)
> +#endif
> +#ifndef _MK_ADDR_CONST
> +  #define _MK_ADDR_CONST(_constant_) _constant_
> +#endif
> +#ifndef _MK_FIELD_CONST
> +  #define _MK_FIELD_CONST(_mask_, _shift_) (_MK_MASK_CONST(_mask_) << _MK_SHIFT_CONST(_shift_))
> +#endif
> +
> +
> +// Register SDP_RDMA_S_STATUS_0
> +#define SDP_RDMA_S_STATUS_0			_MK_ADDR_CONST(0x8000)
> +#define SDP_RDMA_S_STATUS_0_STATUS_0_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_RDMA_S_STATUS_0_STATUS_0_FIELD			_MK_FIELD_CONST(0x3, SDP_RDMA_S_STATUS_0_STATUS_0_SHIFT)
> +#define SDP_RDMA_S_STATUS_0_STATUS_0_IDLE			_MK_ENUM_CONST(0x0)
> +#define SDP_RDMA_S_STATUS_0_STATUS_0_RUNNING			_MK_ENUM_CONST(0x1)
> +#define SDP_RDMA_S_STATUS_0_STATUS_0_PENDING			_MK_ENUM_CONST(0x2)
> +#define SDP_RDMA_S_STATUS_0_STATUS_1_SHIFT			_MK_SHIFT_CONST(16)
> +#define SDP_RDMA_S_STATUS_0_STATUS_1_FIELD			_MK_FIELD_CONST(0x3, SDP_RDMA_S_STATUS_0_STATUS_1_SHIFT)
> +#define SDP_RDMA_S_STATUS_0_STATUS_1_IDLE			_MK_ENUM_CONST(0x0)
> +#define SDP_RDMA_S_STATUS_0_STATUS_1_RUNNING			_MK_ENUM_CONST(0x1)
> +#define SDP_RDMA_S_STATUS_0_STATUS_1_PENDING			_MK_ENUM_CONST(0x2)
> +
> +
> +// Register SDP_RDMA_S_POINTER_0
> +#define SDP_RDMA_S_POINTER_0			_MK_ADDR_CONST(0x8004)
> +#define SDP_RDMA_S_POINTER_0_PRODUCER_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_RDMA_S_POINTER_0_PRODUCER_FIELD			_MK_FIELD_CONST(0x1, SDP_RDMA_S_POINTER_0_PRODUCER_SHIFT)
> +#define SDP_RDMA_S_POINTER_0_PRODUCER_GROUP_0			_MK_ENUM_CONST(0x0)
> +#define SDP_RDMA_S_POINTER_0_PRODUCER_GROUP_1			_MK_ENUM_CONST(0x1)
> +#define SDP_RDMA_S_POINTER_0_CONSUMER_SHIFT			_MK_SHIFT_CONST(16)
> +#define SDP_RDMA_S_POINTER_0_CONSUMER_FIELD			_MK_FIELD_CONST(0x1, SDP_RDMA_S_POINTER_0_CONSUMER_SHIFT)
> +#define SDP_RDMA_S_POINTER_0_CONSUMER_GROUP_0			_MK_ENUM_CONST(0x0)
> +#define SDP_RDMA_S_POINTER_0_CONSUMER_GROUP_1			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register SDP_RDMA_D_OP_ENABLE_0
> +#define SDP_RDMA_D_OP_ENABLE_0			_MK_ADDR_CONST(0x8008)
> +#define SDP_RDMA_D_OP_ENABLE_0_OP_EN_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_RDMA_D_OP_ENABLE_0_OP_EN_FIELD			_MK_FIELD_CONST(0x1, SDP_RDMA_D_OP_ENABLE_0_OP_EN_SHIFT)
> +#define SDP_RDMA_D_OP_ENABLE_0_OP_EN_DISABLE			_MK_ENUM_CONST(0x0)
> +#define SDP_RDMA_D_OP_ENABLE_0_OP_EN_ENABLE			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register SDP_RDMA_D_DATA_CUBE_WIDTH_0
> +#define SDP_RDMA_D_DATA_CUBE_WIDTH_0			_MK_ADDR_CONST(0x800c)
> +#define SDP_RDMA_D_DATA_CUBE_WIDTH_0_WIDTH_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_RDMA_D_DATA_CUBE_WIDTH_0_WIDTH_FIELD			_MK_FIELD_CONST(0x1fff, SDP_RDMA_D_DATA_CUBE_WIDTH_0_WIDTH_SHIFT)
> +
> +
> +// Register SDP_RDMA_D_DATA_CUBE_HEIGHT_0
> +#define SDP_RDMA_D_DATA_CUBE_HEIGHT_0			_MK_ADDR_CONST(0x8010)
> +#define SDP_RDMA_D_DATA_CUBE_HEIGHT_0_HEIGHT_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_RDMA_D_DATA_CUBE_HEIGHT_0_HEIGHT_FIELD			_MK_FIELD_CONST(0x1fff, SDP_RDMA_D_DATA_CUBE_HEIGHT_0_HEIGHT_SHIFT)
> +
> +
> +// Register SDP_RDMA_D_DATA_CUBE_CHANNEL_0
> +#define SDP_RDMA_D_DATA_CUBE_CHANNEL_0			_MK_ADDR_CONST(0x8014)
> +#define SDP_RDMA_D_DATA_CUBE_CHANNEL_0_CHANNEL_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_RDMA_D_DATA_CUBE_CHANNEL_0_CHANNEL_FIELD			_MK_FIELD_CONST(0x1fff, SDP_RDMA_D_DATA_CUBE_CHANNEL_0_CHANNEL_SHIFT)
> +
> +
> +// Register SDP_RDMA_D_SRC_BASE_ADDR_LOW_0
> +#define SDP_RDMA_D_SRC_BASE_ADDR_LOW_0			_MK_ADDR_CONST(0x8018)
> +#define SDP_RDMA_D_SRC_BASE_ADDR_LOW_0_SRC_BASE_ADDR_LOW_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_RDMA_D_SRC_BASE_ADDR_LOW_0_SRC_BASE_ADDR_LOW_FIELD			_MK_FIELD_CONST(0xffffffff, SDP_RDMA_D_SRC_BASE_ADDR_LOW_0_SRC_BASE_ADDR_LOW_SHIFT)
> +
> +
> +// Register SDP_RDMA_D_SRC_BASE_ADDR_HIGH_0
> +#define SDP_RDMA_D_SRC_BASE_ADDR_HIGH_0			_MK_ADDR_CONST(0x801c)
> +#define SDP_RDMA_D_SRC_BASE_ADDR_HIGH_0_SRC_BASE_ADDR_HIGH_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_RDMA_D_SRC_BASE_ADDR_HIGH_0_SRC_BASE_ADDR_HIGH_FIELD			_MK_FIELD_CONST(0xffffffff, SDP_RDMA_D_SRC_BASE_ADDR_HIGH_0_SRC_BASE_ADDR_HIGH_SHIFT)
> +
> +
> +// Register SDP_RDMA_D_SRC_LINE_STRIDE_0
> +#define SDP_RDMA_D_SRC_LINE_STRIDE_0			_MK_ADDR_CONST(0x8020)
> +#define SDP_RDMA_D_SRC_LINE_STRIDE_0_SRC_LINE_STRIDE_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_RDMA_D_SRC_LINE_STRIDE_0_SRC_LINE_STRIDE_FIELD			_MK_FIELD_CONST(0xffffffff, SDP_RDMA_D_SRC_LINE_STRIDE_0_SRC_LINE_STRIDE_SHIFT)
> +
> +
> +// Register SDP_RDMA_D_SRC_SURFACE_STRIDE_0
> +#define SDP_RDMA_D_SRC_SURFACE_STRIDE_0			_MK_ADDR_CONST(0x8024)
> +#define SDP_RDMA_D_SRC_SURFACE_STRIDE_0_SRC_SURFACE_STRIDE_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_RDMA_D_SRC_SURFACE_STRIDE_0_SRC_SURFACE_STRIDE_FIELD			_MK_FIELD_CONST(0xffffffff, SDP_RDMA_D_SRC_SURFACE_STRIDE_0_SRC_SURFACE_STRIDE_SHIFT)
> +
> +
> +// Register SDP_RDMA_D_BRDMA_CFG_0
> +#define SDP_RDMA_D_BRDMA_CFG_0			_MK_ADDR_CONST(0x8028)
> +#define SDP_RDMA_D_BRDMA_CFG_0_BRDMA_DISABLE_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_RDMA_D_BRDMA_CFG_0_BRDMA_DISABLE_FIELD			_MK_FIELD_CONST(0x1, SDP_RDMA_D_BRDMA_CFG_0_BRDMA_DISABLE_SHIFT)
> +#define SDP_RDMA_D_BRDMA_CFG_0_BRDMA_DISABLE_NO			_MK_ENUM_CONST(0x0)
> +#define SDP_RDMA_D_BRDMA_CFG_0_BRDMA_DISABLE_YES			_MK_ENUM_CONST(0x1)
> +#define SDP_RDMA_D_BRDMA_CFG_0_BRDMA_DATA_USE_SHIFT			_MK_SHIFT_CONST(1)
> +#define SDP_RDMA_D_BRDMA_CFG_0_BRDMA_DATA_USE_FIELD			_MK_FIELD_CONST(0x3, SDP_RDMA_D_BRDMA_CFG_0_BRDMA_DATA_USE_SHIFT)
> +#define SDP_RDMA_D_BRDMA_CFG_0_BRDMA_DATA_USE_MUL			_MK_ENUM_CONST(0x0)
> +#define SDP_RDMA_D_BRDMA_CFG_0_BRDMA_DATA_USE_ALU			_MK_ENUM_CONST(0x1)
> +#define SDP_RDMA_D_BRDMA_CFG_0_BRDMA_DATA_USE_BOTH			_MK_ENUM_CONST(0x2)
> +#define SDP_RDMA_D_BRDMA_CFG_0_BRDMA_DATA_SIZE_SHIFT			_MK_SHIFT_CONST(3)
> +#define SDP_RDMA_D_BRDMA_CFG_0_BRDMA_DATA_SIZE_FIELD			_MK_FIELD_CONST(0x1, SDP_RDMA_D_BRDMA_CFG_0_BRDMA_DATA_SIZE_SHIFT)
> +#define SDP_RDMA_D_BRDMA_CFG_0_BRDMA_DATA_SIZE_ONE_BYTE			_MK_ENUM_CONST(0x0)
> +#define SDP_RDMA_D_BRDMA_CFG_0_BRDMA_DATA_SIZE_TWO_BYTE			_MK_ENUM_CONST(0x1)
> +#define SDP_RDMA_D_BRDMA_CFG_0_BRDMA_DATA_MODE_SHIFT			_MK_SHIFT_CONST(4)
> +#define SDP_RDMA_D_BRDMA_CFG_0_BRDMA_DATA_MODE_FIELD			_MK_FIELD_CONST(0x1, SDP_RDMA_D_BRDMA_CFG_0_BRDMA_DATA_MODE_SHIFT)
> +#define SDP_RDMA_D_BRDMA_CFG_0_BRDMA_DATA_MODE_PER_KERNEL			_MK_ENUM_CONST(0x0)
> +#define SDP_RDMA_D_BRDMA_CFG_0_BRDMA_DATA_MODE_PER_ELEMENT			_MK_ENUM_CONST(0x1)
> +#define SDP_RDMA_D_BRDMA_CFG_0_BRDMA_RAM_TYPE_SHIFT			_MK_SHIFT_CONST(5)
> +#define SDP_RDMA_D_BRDMA_CFG_0_BRDMA_RAM_TYPE_FIELD			_MK_FIELD_CONST(0x1, SDP_RDMA_D_BRDMA_CFG_0_BRDMA_RAM_TYPE_SHIFT)
> +#define SDP_RDMA_D_BRDMA_CFG_0_BRDMA_RAM_TYPE_CV			_MK_ENUM_CONST(0x0)
> +#define SDP_RDMA_D_BRDMA_CFG_0_BRDMA_RAM_TYPE_MC			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register SDP_RDMA_D_BS_BASE_ADDR_LOW_0
> +#define SDP_RDMA_D_BS_BASE_ADDR_LOW_0			_MK_ADDR_CONST(0x802c)
> +#define SDP_RDMA_D_BS_BASE_ADDR_LOW_0_BS_BASE_ADDR_LOW_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_RDMA_D_BS_BASE_ADDR_LOW_0_BS_BASE_ADDR_LOW_FIELD			_MK_FIELD_CONST(0xffffffff, SDP_RDMA_D_BS_BASE_ADDR_LOW_0_BS_BASE_ADDR_LOW_SHIFT)
> +
> +
> +// Register SDP_RDMA_D_BS_BASE_ADDR_HIGH_0
> +#define SDP_RDMA_D_BS_BASE_ADDR_HIGH_0			_MK_ADDR_CONST(0x8030)
> +#define SDP_RDMA_D_BS_BASE_ADDR_HIGH_0_BS_BASE_ADDR_HIGH_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_RDMA_D_BS_BASE_ADDR_HIGH_0_BS_BASE_ADDR_HIGH_FIELD			_MK_FIELD_CONST(0xffffffff, SDP_RDMA_D_BS_BASE_ADDR_HIGH_0_BS_BASE_ADDR_HIGH_SHIFT)
> +
> +
> +// Register SDP_RDMA_D_BS_LINE_STRIDE_0
> +#define SDP_RDMA_D_BS_LINE_STRIDE_0			_MK_ADDR_CONST(0x8034)
> +#define SDP_RDMA_D_BS_LINE_STRIDE_0_BS_LINE_STRIDE_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_RDMA_D_BS_LINE_STRIDE_0_BS_LINE_STRIDE_FIELD			_MK_FIELD_CONST(0xffffffff, SDP_RDMA_D_BS_LINE_STRIDE_0_BS_LINE_STRIDE_SHIFT)
> +
> +
> +// Register SDP_RDMA_D_BS_SURFACE_STRIDE_0
> +#define SDP_RDMA_D_BS_SURFACE_STRIDE_0			_MK_ADDR_CONST(0x8038)
> +#define SDP_RDMA_D_BS_SURFACE_STRIDE_0_BS_SURFACE_STRIDE_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_RDMA_D_BS_SURFACE_STRIDE_0_BS_SURFACE_STRIDE_FIELD			_MK_FIELD_CONST(0xffffffff, SDP_RDMA_D_BS_SURFACE_STRIDE_0_BS_SURFACE_STRIDE_SHIFT)
> +
> +
> +// Register SDP_RDMA_D_BS_BATCH_STRIDE_0
> +#define SDP_RDMA_D_BS_BATCH_STRIDE_0			_MK_ADDR_CONST(0x803c)
> +#define SDP_RDMA_D_BS_BATCH_STRIDE_0_BS_BATCH_STRIDE_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_RDMA_D_BS_BATCH_STRIDE_0_BS_BATCH_STRIDE_FIELD			_MK_FIELD_CONST(0xffffffff, SDP_RDMA_D_BS_BATCH_STRIDE_0_BS_BATCH_STRIDE_SHIFT)
> +
> +
> +// Register SDP_RDMA_D_NRDMA_CFG_0
> +#define SDP_RDMA_D_NRDMA_CFG_0			_MK_ADDR_CONST(0x8040)
> +#define SDP_RDMA_D_NRDMA_CFG_0_NRDMA_DISABLE_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_RDMA_D_NRDMA_CFG_0_NRDMA_DISABLE_FIELD			_MK_FIELD_CONST(0x1, SDP_RDMA_D_NRDMA_CFG_0_NRDMA_DISABLE_SHIFT)
> +#define SDP_RDMA_D_NRDMA_CFG_0_NRDMA_DISABLE_NO			_MK_ENUM_CONST(0x0)
> +#define SDP_RDMA_D_NRDMA_CFG_0_NRDMA_DISABLE_YES			_MK_ENUM_CONST(0x1)
> +#define SDP_RDMA_D_NRDMA_CFG_0_NRDMA_DATA_USE_SHIFT			_MK_SHIFT_CONST(1)
> +#define SDP_RDMA_D_NRDMA_CFG_0_NRDMA_DATA_USE_FIELD			_MK_FIELD_CONST(0x3, SDP_RDMA_D_NRDMA_CFG_0_NRDMA_DATA_USE_SHIFT)
> +#define SDP_RDMA_D_NRDMA_CFG_0_NRDMA_DATA_USE_MUL			_MK_ENUM_CONST(0x0)
> +#define SDP_RDMA_D_NRDMA_CFG_0_NRDMA_DATA_USE_ALU			_MK_ENUM_CONST(0x1)
> +#define SDP_RDMA_D_NRDMA_CFG_0_NRDMA_DATA_USE_BOTH			_MK_ENUM_CONST(0x2)
> +#define SDP_RDMA_D_NRDMA_CFG_0_NRDMA_DATA_SIZE_SHIFT			_MK_SHIFT_CONST(3)
> +#define SDP_RDMA_D_NRDMA_CFG_0_NRDMA_DATA_SIZE_FIELD			_MK_FIELD_CONST(0x1, SDP_RDMA_D_NRDMA_CFG_0_NRDMA_DATA_SIZE_SHIFT)
> +#define SDP_RDMA_D_NRDMA_CFG_0_NRDMA_DATA_SIZE_ONE_BYTE			_MK_ENUM_CONST(0x0)
> +#define SDP_RDMA_D_NRDMA_CFG_0_NRDMA_DATA_SIZE_TWO_BYTE			_MK_ENUM_CONST(0x1)
> +#define SDP_RDMA_D_NRDMA_CFG_0_NRDMA_DATA_MODE_SHIFT			_MK_SHIFT_CONST(4)
> +#define SDP_RDMA_D_NRDMA_CFG_0_NRDMA_DATA_MODE_FIELD			_MK_FIELD_CONST(0x1, SDP_RDMA_D_NRDMA_CFG_0_NRDMA_DATA_MODE_SHIFT)
> +#define SDP_RDMA_D_NRDMA_CFG_0_NRDMA_DATA_MODE_PER_KERNEL			_MK_ENUM_CONST(0x0)
> +#define SDP_RDMA_D_NRDMA_CFG_0_NRDMA_DATA_MODE_PER_ELEMENT			_MK_ENUM_CONST(0x1)
> +#define SDP_RDMA_D_NRDMA_CFG_0_NRDMA_RAM_TYPE_SHIFT			_MK_SHIFT_CONST(5)
> +#define SDP_RDMA_D_NRDMA_CFG_0_NRDMA_RAM_TYPE_FIELD			_MK_FIELD_CONST(0x1, SDP_RDMA_D_NRDMA_CFG_0_NRDMA_RAM_TYPE_SHIFT)
> +#define SDP_RDMA_D_NRDMA_CFG_0_NRDMA_RAM_TYPE_CV			_MK_ENUM_CONST(0x0)
> +#define SDP_RDMA_D_NRDMA_CFG_0_NRDMA_RAM_TYPE_MC			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register SDP_RDMA_D_BN_BASE_ADDR_LOW_0
> +#define SDP_RDMA_D_BN_BASE_ADDR_LOW_0			_MK_ADDR_CONST(0x8044)
> +#define SDP_RDMA_D_BN_BASE_ADDR_LOW_0_BN_BASE_ADDR_LOW_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_RDMA_D_BN_BASE_ADDR_LOW_0_BN_BASE_ADDR_LOW_FIELD			_MK_FIELD_CONST(0xffffffff, SDP_RDMA_D_BN_BASE_ADDR_LOW_0_BN_BASE_ADDR_LOW_SHIFT)
> +
> +
> +// Register SDP_RDMA_D_BN_BASE_ADDR_HIGH_0
> +#define SDP_RDMA_D_BN_BASE_ADDR_HIGH_0			_MK_ADDR_CONST(0x8048)
> +#define SDP_RDMA_D_BN_BASE_ADDR_HIGH_0_BN_BASE_ADDR_HIGH_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_RDMA_D_BN_BASE_ADDR_HIGH_0_BN_BASE_ADDR_HIGH_FIELD			_MK_FIELD_CONST(0xffffffff, SDP_RDMA_D_BN_BASE_ADDR_HIGH_0_BN_BASE_ADDR_HIGH_SHIFT)
> +
> +
> +// Register SDP_RDMA_D_BN_LINE_STRIDE_0
> +#define SDP_RDMA_D_BN_LINE_STRIDE_0			_MK_ADDR_CONST(0x804c)
> +#define SDP_RDMA_D_BN_LINE_STRIDE_0_BN_LINE_STRIDE_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_RDMA_D_BN_LINE_STRIDE_0_BN_LINE_STRIDE_FIELD			_MK_FIELD_CONST(0xffffffff, SDP_RDMA_D_BN_LINE_STRIDE_0_BN_LINE_STRIDE_SHIFT)
> +
> +
> +// Register SDP_RDMA_D_BN_SURFACE_STRIDE_0
> +#define SDP_RDMA_D_BN_SURFACE_STRIDE_0			_MK_ADDR_CONST(0x8050)
> +#define SDP_RDMA_D_BN_SURFACE_STRIDE_0_BN_SURFACE_STRIDE_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_RDMA_D_BN_SURFACE_STRIDE_0_BN_SURFACE_STRIDE_FIELD			_MK_FIELD_CONST(0xffffffff, SDP_RDMA_D_BN_SURFACE_STRIDE_0_BN_SURFACE_STRIDE_SHIFT)
> +
> +
> +// Register SDP_RDMA_D_BN_BATCH_STRIDE_0
> +#define SDP_RDMA_D_BN_BATCH_STRIDE_0			_MK_ADDR_CONST(0x8054)
> +#define SDP_RDMA_D_BN_BATCH_STRIDE_0_BN_BATCH_STRIDE_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_RDMA_D_BN_BATCH_STRIDE_0_BN_BATCH_STRIDE_FIELD			_MK_FIELD_CONST(0xffffffff, SDP_RDMA_D_BN_BATCH_STRIDE_0_BN_BATCH_STRIDE_SHIFT)
> +
> +
> +// Register SDP_RDMA_D_ERDMA_CFG_0
> +#define SDP_RDMA_D_ERDMA_CFG_0			_MK_ADDR_CONST(0x8058)
> +#define SDP_RDMA_D_ERDMA_CFG_0_ERDMA_DISABLE_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_RDMA_D_ERDMA_CFG_0_ERDMA_DISABLE_FIELD			_MK_FIELD_CONST(0x1, SDP_RDMA_D_ERDMA_CFG_0_ERDMA_DISABLE_SHIFT)
> +#define SDP_RDMA_D_ERDMA_CFG_0_ERDMA_DISABLE_NO			_MK_ENUM_CONST(0x0)
> +#define SDP_RDMA_D_ERDMA_CFG_0_ERDMA_DISABLE_YES			_MK_ENUM_CONST(0x1)
> +#define SDP_RDMA_D_ERDMA_CFG_0_ERDMA_DATA_USE_SHIFT			_MK_SHIFT_CONST(1)
> +#define SDP_RDMA_D_ERDMA_CFG_0_ERDMA_DATA_USE_FIELD			_MK_FIELD_CONST(0x3, SDP_RDMA_D_ERDMA_CFG_0_ERDMA_DATA_USE_SHIFT)
> +#define SDP_RDMA_D_ERDMA_CFG_0_ERDMA_DATA_USE_MUL			_MK_ENUM_CONST(0x0)
> +#define SDP_RDMA_D_ERDMA_CFG_0_ERDMA_DATA_USE_ALU			_MK_ENUM_CONST(0x1)
> +#define SDP_RDMA_D_ERDMA_CFG_0_ERDMA_DATA_USE_BOTH			_MK_ENUM_CONST(0x2)
> +#define SDP_RDMA_D_ERDMA_CFG_0_ERDMA_DATA_SIZE_SHIFT			_MK_SHIFT_CONST(3)
> +#define SDP_RDMA_D_ERDMA_CFG_0_ERDMA_DATA_SIZE_FIELD			_MK_FIELD_CONST(0x1, SDP_RDMA_D_ERDMA_CFG_0_ERDMA_DATA_SIZE_SHIFT)
> +#define SDP_RDMA_D_ERDMA_CFG_0_ERDMA_DATA_SIZE_ONE_BYTE			_MK_ENUM_CONST(0x0)
> +#define SDP_RDMA_D_ERDMA_CFG_0_ERDMA_DATA_SIZE_TWO_BYTE			_MK_ENUM_CONST(0x1)
> +#define SDP_RDMA_D_ERDMA_CFG_0_ERDMA_DATA_MODE_SHIFT			_MK_SHIFT_CONST(4)
> +#define SDP_RDMA_D_ERDMA_CFG_0_ERDMA_DATA_MODE_FIELD			_MK_FIELD_CONST(0x1, SDP_RDMA_D_ERDMA_CFG_0_ERDMA_DATA_MODE_SHIFT)
> +#define SDP_RDMA_D_ERDMA_CFG_0_ERDMA_DATA_MODE_PER_KERNEL			_MK_ENUM_CONST(0x0)
> +#define SDP_RDMA_D_ERDMA_CFG_0_ERDMA_DATA_MODE_PER_ELEMENT			_MK_ENUM_CONST(0x1)
> +#define SDP_RDMA_D_ERDMA_CFG_0_ERDMA_RAM_TYPE_SHIFT			_MK_SHIFT_CONST(5)
> +#define SDP_RDMA_D_ERDMA_CFG_0_ERDMA_RAM_TYPE_FIELD			_MK_FIELD_CONST(0x1, SDP_RDMA_D_ERDMA_CFG_0_ERDMA_RAM_TYPE_SHIFT)
> +#define SDP_RDMA_D_ERDMA_CFG_0_ERDMA_RAM_TYPE_CV			_MK_ENUM_CONST(0x0)
> +#define SDP_RDMA_D_ERDMA_CFG_0_ERDMA_RAM_TYPE_MC			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register SDP_RDMA_D_EW_BASE_ADDR_LOW_0
> +#define SDP_RDMA_D_EW_BASE_ADDR_LOW_0			_MK_ADDR_CONST(0x805c)
> +#define SDP_RDMA_D_EW_BASE_ADDR_LOW_0_EW_BASE_ADDR_LOW_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_RDMA_D_EW_BASE_ADDR_LOW_0_EW_BASE_ADDR_LOW_FIELD			_MK_FIELD_CONST(0xffffffff, SDP_RDMA_D_EW_BASE_ADDR_LOW_0_EW_BASE_ADDR_LOW_SHIFT)
> +
> +
> +// Register SDP_RDMA_D_EW_BASE_ADDR_HIGH_0
> +#define SDP_RDMA_D_EW_BASE_ADDR_HIGH_0			_MK_ADDR_CONST(0x8060)
> +#define SDP_RDMA_D_EW_BASE_ADDR_HIGH_0_EW_BASE_ADDR_HIGH_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_RDMA_D_EW_BASE_ADDR_HIGH_0_EW_BASE_ADDR_HIGH_FIELD			_MK_FIELD_CONST(0xffffffff, SDP_RDMA_D_EW_BASE_ADDR_HIGH_0_EW_BASE_ADDR_HIGH_SHIFT)
> +
> +
> +// Register SDP_RDMA_D_EW_LINE_STRIDE_0
> +#define SDP_RDMA_D_EW_LINE_STRIDE_0			_MK_ADDR_CONST(0x8064)
> +#define SDP_RDMA_D_EW_LINE_STRIDE_0_EW_LINE_STRIDE_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_RDMA_D_EW_LINE_STRIDE_0_EW_LINE_STRIDE_FIELD			_MK_FIELD_CONST(0xffffffff, SDP_RDMA_D_EW_LINE_STRIDE_0_EW_LINE_STRIDE_SHIFT)
> +
> +
> +// Register SDP_RDMA_D_EW_SURFACE_STRIDE_0
> +#define SDP_RDMA_D_EW_SURFACE_STRIDE_0			_MK_ADDR_CONST(0x8068)
> +#define SDP_RDMA_D_EW_SURFACE_STRIDE_0_EW_SURFACE_STRIDE_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_RDMA_D_EW_SURFACE_STRIDE_0_EW_SURFACE_STRIDE_FIELD			_MK_FIELD_CONST(0xffffffff, SDP_RDMA_D_EW_SURFACE_STRIDE_0_EW_SURFACE_STRIDE_SHIFT)
> +
> +
> +// Register SDP_RDMA_D_EW_BATCH_STRIDE_0
> +#define SDP_RDMA_D_EW_BATCH_STRIDE_0			_MK_ADDR_CONST(0x806c)
> +#define SDP_RDMA_D_EW_BATCH_STRIDE_0_EW_BATCH_STRIDE_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_RDMA_D_EW_BATCH_STRIDE_0_EW_BATCH_STRIDE_FIELD			_MK_FIELD_CONST(0xffffffff, SDP_RDMA_D_EW_BATCH_STRIDE_0_EW_BATCH_STRIDE_SHIFT)
> +
> +
> +// Register SDP_RDMA_D_FEATURE_MODE_CFG_0
> +#define SDP_RDMA_D_FEATURE_MODE_CFG_0			_MK_ADDR_CONST(0x8070)
> +#define SDP_RDMA_D_FEATURE_MODE_CFG_0_FLYING_MODE_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_RDMA_D_FEATURE_MODE_CFG_0_FLYING_MODE_FIELD			_MK_FIELD_CONST(0x1, SDP_RDMA_D_FEATURE_MODE_CFG_0_FLYING_MODE_SHIFT)
> +#define SDP_RDMA_D_FEATURE_MODE_CFG_0_FLYING_MODE_OFF			_MK_ENUM_CONST(0x0)
> +#define SDP_RDMA_D_FEATURE_MODE_CFG_0_FLYING_MODE_ON			_MK_ENUM_CONST(0x1)
> +#define SDP_RDMA_D_FEATURE_MODE_CFG_0_WINOGRAD_SHIFT			_MK_SHIFT_CONST(1)
> +#define SDP_RDMA_D_FEATURE_MODE_CFG_0_WINOGRAD_FIELD			_MK_FIELD_CONST(0x1, SDP_RDMA_D_FEATURE_MODE_CFG_0_WINOGRAD_SHIFT)
> +#define SDP_RDMA_D_FEATURE_MODE_CFG_0_WINOGRAD_OFF			_MK_ENUM_CONST(0x0)
> +#define SDP_RDMA_D_FEATURE_MODE_CFG_0_WINOGRAD_ON			_MK_ENUM_CONST(0x1)
> +#define SDP_RDMA_D_FEATURE_MODE_CFG_0_IN_PRECISION_SHIFT			_MK_SHIFT_CONST(2)
> +#define SDP_RDMA_D_FEATURE_MODE_CFG_0_IN_PRECISION_FIELD			_MK_FIELD_CONST(0x3, SDP_RDMA_D_FEATURE_MODE_CFG_0_IN_PRECISION_SHIFT)
> +#define SDP_RDMA_D_FEATURE_MODE_CFG_0_IN_PRECISION_INT8			_MK_ENUM_CONST(0x0)
> +#define SDP_RDMA_D_FEATURE_MODE_CFG_0_IN_PRECISION_INT16			_MK_ENUM_CONST(0x1)
> +#define SDP_RDMA_D_FEATURE_MODE_CFG_0_IN_PRECISION_FP16			_MK_ENUM_CONST(0x2)
> +#define SDP_RDMA_D_FEATURE_MODE_CFG_0_PROC_PRECISION_SHIFT			_MK_SHIFT_CONST(4)
> +#define SDP_RDMA_D_FEATURE_MODE_CFG_0_PROC_PRECISION_FIELD			_MK_FIELD_CONST(0x3, SDP_RDMA_D_FEATURE_MODE_CFG_0_PROC_PRECISION_SHIFT)
> +#define SDP_RDMA_D_FEATURE_MODE_CFG_0_PROC_PRECISION_INT8			_MK_ENUM_CONST(0x0)
> +#define SDP_RDMA_D_FEATURE_MODE_CFG_0_PROC_PRECISION_INT16			_MK_ENUM_CONST(0x1)
> +#define SDP_RDMA_D_FEATURE_MODE_CFG_0_PROC_PRECISION_FP16			_MK_ENUM_CONST(0x2)
> +#define SDP_RDMA_D_FEATURE_MODE_CFG_0_OUT_PRECISION_SHIFT			_MK_SHIFT_CONST(6)
> +#define SDP_RDMA_D_FEATURE_MODE_CFG_0_OUT_PRECISION_FIELD			_MK_FIELD_CONST(0x3, SDP_RDMA_D_FEATURE_MODE_CFG_0_OUT_PRECISION_SHIFT)
> +#define SDP_RDMA_D_FEATURE_MODE_CFG_0_OUT_PRECISION_INT8			_MK_ENUM_CONST(0x0)
> +#define SDP_RDMA_D_FEATURE_MODE_CFG_0_OUT_PRECISION_INT16			_MK_ENUM_CONST(0x1)
> +#define SDP_RDMA_D_FEATURE_MODE_CFG_0_OUT_PRECISION_FP16			_MK_ENUM_CONST(0x2)
> +#define SDP_RDMA_D_FEATURE_MODE_CFG_0_BATCH_NUMBER_SHIFT			_MK_SHIFT_CONST(8)
> +#define SDP_RDMA_D_FEATURE_MODE_CFG_0_BATCH_NUMBER_FIELD			_MK_FIELD_CONST(0x1f, SDP_RDMA_D_FEATURE_MODE_CFG_0_BATCH_NUMBER_SHIFT)
> +
> +
> +// Register SDP_RDMA_D_SRC_DMA_CFG_0
> +#define SDP_RDMA_D_SRC_DMA_CFG_0			_MK_ADDR_CONST(0x8074)
> +#define SDP_RDMA_D_SRC_DMA_CFG_0_SRC_RAM_TYPE_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_RDMA_D_SRC_DMA_CFG_0_SRC_RAM_TYPE_FIELD			_MK_FIELD_CONST(0x1, SDP_RDMA_D_SRC_DMA_CFG_0_SRC_RAM_TYPE_SHIFT)
> +#define SDP_RDMA_D_SRC_DMA_CFG_0_SRC_RAM_TYPE_CV			_MK_ENUM_CONST(0x0)
> +#define SDP_RDMA_D_SRC_DMA_CFG_0_SRC_RAM_TYPE_MC			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register SDP_RDMA_D_STATUS_NAN_INPUT_NUM_0
> +#define SDP_RDMA_D_STATUS_NAN_INPUT_NUM_0			_MK_ADDR_CONST(0x8078)
> +#define SDP_RDMA_D_STATUS_NAN_INPUT_NUM_0_STATUS_NAN_INPUT_NUM_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_RDMA_D_STATUS_NAN_INPUT_NUM_0_STATUS_NAN_INPUT_NUM_FIELD			_MK_FIELD_CONST(0xffffffff, SDP_RDMA_D_STATUS_NAN_INPUT_NUM_0_STATUS_NAN_INPUT_NUM_SHIFT)
> +
> +
> +// Register SDP_RDMA_D_STATUS_INF_INPUT_NUM_0
> +#define SDP_RDMA_D_STATUS_INF_INPUT_NUM_0			_MK_ADDR_CONST(0x807c)
> +#define SDP_RDMA_D_STATUS_INF_INPUT_NUM_0_STATUS_INF_INPUT_NUM_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_RDMA_D_STATUS_INF_INPUT_NUM_0_STATUS_INF_INPUT_NUM_FIELD			_MK_FIELD_CONST(0xffffffff, SDP_RDMA_D_STATUS_INF_INPUT_NUM_0_STATUS_INF_INPUT_NUM_SHIFT)
> +
> +
> +// Register SDP_RDMA_D_PERF_ENABLE_0
> +#define SDP_RDMA_D_PERF_ENABLE_0			_MK_ADDR_CONST(0x8080)
> +#define SDP_RDMA_D_PERF_ENABLE_0_PERF_DMA_EN_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_RDMA_D_PERF_ENABLE_0_PERF_DMA_EN_FIELD			_MK_FIELD_CONST(0x1, SDP_RDMA_D_PERF_ENABLE_0_PERF_DMA_EN_SHIFT)
> +#define SDP_RDMA_D_PERF_ENABLE_0_PERF_DMA_EN_NO			_MK_ENUM_CONST(0x0)
> +#define SDP_RDMA_D_PERF_ENABLE_0_PERF_DMA_EN_YES			_MK_ENUM_CONST(0x1)
> +#define SDP_RDMA_D_PERF_ENABLE_0_PERF_NAN_INF_COUNT_EN_SHIFT			_MK_SHIFT_CONST(1)
> +#define SDP_RDMA_D_PERF_ENABLE_0_PERF_NAN_INF_COUNT_EN_FIELD			_MK_FIELD_CONST(0x1, SDP_RDMA_D_PERF_ENABLE_0_PERF_NAN_INF_COUNT_EN_SHIFT)
> +#define SDP_RDMA_D_PERF_ENABLE_0_PERF_NAN_INF_COUNT_EN_NO			_MK_ENUM_CONST(0x0)
> +#define SDP_RDMA_D_PERF_ENABLE_0_PERF_NAN_INF_COUNT_EN_YES			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register SDP_RDMA_D_PERF_MRDMA_READ_STALL_0
> +#define SDP_RDMA_D_PERF_MRDMA_READ_STALL_0			_MK_ADDR_CONST(0x8084)
> +#define SDP_RDMA_D_PERF_MRDMA_READ_STALL_0_MRDMA_STALL_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_RDMA_D_PERF_MRDMA_READ_STALL_0_MRDMA_STALL_FIELD			_MK_FIELD_CONST(0xffffffff, SDP_RDMA_D_PERF_MRDMA_READ_STALL_0_MRDMA_STALL_SHIFT)
> +
> +
> +// Register SDP_RDMA_D_PERF_BRDMA_READ_STALL_0
> +#define SDP_RDMA_D_PERF_BRDMA_READ_STALL_0			_MK_ADDR_CONST(0x8088)
> +#define SDP_RDMA_D_PERF_BRDMA_READ_STALL_0_BRDMA_STALL_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_RDMA_D_PERF_BRDMA_READ_STALL_0_BRDMA_STALL_FIELD			_MK_FIELD_CONST(0xffffffff, SDP_RDMA_D_PERF_BRDMA_READ_STALL_0_BRDMA_STALL_SHIFT)
> +
> +
> +// Register SDP_RDMA_D_PERF_NRDMA_READ_STALL_0
> +#define SDP_RDMA_D_PERF_NRDMA_READ_STALL_0			_MK_ADDR_CONST(0x808c)
> +#define SDP_RDMA_D_PERF_NRDMA_READ_STALL_0_NRDMA_STALL_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_RDMA_D_PERF_NRDMA_READ_STALL_0_NRDMA_STALL_FIELD			_MK_FIELD_CONST(0xffffffff, SDP_RDMA_D_PERF_NRDMA_READ_STALL_0_NRDMA_STALL_SHIFT)
> +
> +
> +// Register SDP_RDMA_D_PERF_ERDMA_READ_STALL_0
> +#define SDP_RDMA_D_PERF_ERDMA_READ_STALL_0			_MK_ADDR_CONST(0x8090)
> +#define SDP_RDMA_D_PERF_ERDMA_READ_STALL_0_ERDMA_STALL_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_RDMA_D_PERF_ERDMA_READ_STALL_0_ERDMA_STALL_FIELD			_MK_FIELD_CONST(0xffffffff, SDP_RDMA_D_PERF_ERDMA_READ_STALL_0_ERDMA_STALL_SHIFT)
> +
> +
> +
> +// To satisfy various compilers and platforms,
> +// we let users control the types and syntax of certain constants, using macros.
> +#ifndef _MK_SHIFT_CONST
> +  #define _MK_SHIFT_CONST(_constant_) _constant_
> +#endif
> +#ifndef _MK_MASK_CONST
> +  #define _MK_MASK_CONST(_constant_) _constant_
> +#endif
> +#ifndef _MK_ENUM_CONST
> +  #define _MK_ENUM_CONST(_constant_) (_constant_ ## UL)
> +#endif
> +#ifndef _MK_ADDR_CONST
> +  #define _MK_ADDR_CONST(_constant_) _constant_
> +#endif
> +#ifndef _MK_FIELD_CONST
> +  #define _MK_FIELD_CONST(_mask_, _shift_) (_MK_MASK_CONST(_mask_) << _MK_SHIFT_CONST(_shift_))
> +#endif
> +
> +
> +// Register SDP_S_STATUS_0
> +#define SDP_S_STATUS_0			_MK_ADDR_CONST(0x9000)
> +#define SDP_S_STATUS_0_STATUS_0_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_S_STATUS_0_STATUS_0_FIELD			_MK_FIELD_CONST(0x3, SDP_S_STATUS_0_STATUS_0_SHIFT)
> +#define SDP_S_STATUS_0_STATUS_0_IDLE			_MK_ENUM_CONST(0x0)
> +#define SDP_S_STATUS_0_STATUS_0_RUNNING			_MK_ENUM_CONST(0x1)
> +#define SDP_S_STATUS_0_STATUS_0_PENDING			_MK_ENUM_CONST(0x2)
> +#define SDP_S_STATUS_0_STATUS_1_SHIFT			_MK_SHIFT_CONST(16)
> +#define SDP_S_STATUS_0_STATUS_1_FIELD			_MK_FIELD_CONST(0x3, SDP_S_STATUS_0_STATUS_1_SHIFT)
> +#define SDP_S_STATUS_0_STATUS_1_IDLE			_MK_ENUM_CONST(0x0)
> +#define SDP_S_STATUS_0_STATUS_1_RUNNING			_MK_ENUM_CONST(0x1)
> +#define SDP_S_STATUS_0_STATUS_1_PENDING			_MK_ENUM_CONST(0x2)
> +
> +
> +// Register SDP_S_POINTER_0
> +#define SDP_S_POINTER_0			_MK_ADDR_CONST(0x9004)
> +#define SDP_S_POINTER_0_PRODUCER_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_S_POINTER_0_PRODUCER_FIELD			_MK_FIELD_CONST(0x1, SDP_S_POINTER_0_PRODUCER_SHIFT)
> +#define SDP_S_POINTER_0_PRODUCER_GROUP_0			_MK_ENUM_CONST(0x0)
> +#define SDP_S_POINTER_0_PRODUCER_GROUP_1			_MK_ENUM_CONST(0x1)
> +#define SDP_S_POINTER_0_CONSUMER_SHIFT			_MK_SHIFT_CONST(16)
> +#define SDP_S_POINTER_0_CONSUMER_FIELD			_MK_FIELD_CONST(0x1, SDP_S_POINTER_0_CONSUMER_SHIFT)
> +#define SDP_S_POINTER_0_CONSUMER_GROUP_0			_MK_ENUM_CONST(0x0)
> +#define SDP_S_POINTER_0_CONSUMER_GROUP_1			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register SDP_S_LUT_ACCESS_CFG_0
> +#define SDP_S_LUT_ACCESS_CFG_0			_MK_ADDR_CONST(0x9008)
> +#define SDP_S_LUT_ACCESS_CFG_0_LUT_ADDR_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_S_LUT_ACCESS_CFG_0_LUT_ADDR_FIELD			_MK_FIELD_CONST(0x3ff, SDP_S_LUT_ACCESS_CFG_0_LUT_ADDR_SHIFT)
> +#define SDP_S_LUT_ACCESS_CFG_0_LUT_TABLE_ID_SHIFT			_MK_SHIFT_CONST(16)
> +#define SDP_S_LUT_ACCESS_CFG_0_LUT_TABLE_ID_FIELD			_MK_FIELD_CONST(0x1, SDP_S_LUT_ACCESS_CFG_0_LUT_TABLE_ID_SHIFT)
> +#define SDP_S_LUT_ACCESS_CFG_0_LUT_TABLE_ID_LE			_MK_ENUM_CONST(0x0)
> +#define SDP_S_LUT_ACCESS_CFG_0_LUT_TABLE_ID_LO			_MK_ENUM_CONST(0x1)
> +#define SDP_S_LUT_ACCESS_CFG_0_LUT_ACCESS_TYPE_SHIFT			_MK_SHIFT_CONST(17)
> +#define SDP_S_LUT_ACCESS_CFG_0_LUT_ACCESS_TYPE_FIELD			_MK_FIELD_CONST(0x1, SDP_S_LUT_ACCESS_CFG_0_LUT_ACCESS_TYPE_SHIFT)
> +#define SDP_S_LUT_ACCESS_CFG_0_LUT_ACCESS_TYPE_READ			_MK_ENUM_CONST(0x0)
> +#define SDP_S_LUT_ACCESS_CFG_0_LUT_ACCESS_TYPE_WRITE			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register SDP_S_LUT_ACCESS_DATA_0
> +#define SDP_S_LUT_ACCESS_DATA_0			_MK_ADDR_CONST(0x900c)
> +#define SDP_S_LUT_ACCESS_DATA_0_LUT_DATA_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_S_LUT_ACCESS_DATA_0_LUT_DATA_FIELD			_MK_FIELD_CONST(0xffff, SDP_S_LUT_ACCESS_DATA_0_LUT_DATA_SHIFT)
> +
> +
> +// Register SDP_S_LUT_CFG_0
> +#define SDP_S_LUT_CFG_0			_MK_ADDR_CONST(0x9010)
> +#define SDP_S_LUT_CFG_0_LUT_LE_FUNCTION_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_S_LUT_CFG_0_LUT_LE_FUNCTION_FIELD			_MK_FIELD_CONST(0x1, SDP_S_LUT_CFG_0_LUT_LE_FUNCTION_SHIFT)
> +#define SDP_S_LUT_CFG_0_LUT_LE_FUNCTION_EXPONENT			_MK_ENUM_CONST(0x0)
> +#define SDP_S_LUT_CFG_0_LUT_LE_FUNCTION_LINEAR			_MK_ENUM_CONST(0x1)
> +#define SDP_S_LUT_CFG_0_LUT_UFLOW_PRIORITY_SHIFT			_MK_SHIFT_CONST(4)
> +#define SDP_S_LUT_CFG_0_LUT_UFLOW_PRIORITY_FIELD			_MK_FIELD_CONST(0x1, SDP_S_LUT_CFG_0_LUT_UFLOW_PRIORITY_SHIFT)
> +#define SDP_S_LUT_CFG_0_LUT_UFLOW_PRIORITY_LE			_MK_ENUM_CONST(0x0)
> +#define SDP_S_LUT_CFG_0_LUT_UFLOW_PRIORITY_LO			_MK_ENUM_CONST(0x1)
> +#define SDP_S_LUT_CFG_0_LUT_OFLOW_PRIORITY_SHIFT			_MK_SHIFT_CONST(5)
> +#define SDP_S_LUT_CFG_0_LUT_OFLOW_PRIORITY_FIELD			_MK_FIELD_CONST(0x1, SDP_S_LUT_CFG_0_LUT_OFLOW_PRIORITY_SHIFT)
> +#define SDP_S_LUT_CFG_0_LUT_OFLOW_PRIORITY_LE			_MK_ENUM_CONST(0x0)
> +#define SDP_S_LUT_CFG_0_LUT_OFLOW_PRIORITY_LO			_MK_ENUM_CONST(0x1)
> +#define SDP_S_LUT_CFG_0_LUT_HYBRID_PRIORITY_SHIFT			_MK_SHIFT_CONST(6)
> +#define SDP_S_LUT_CFG_0_LUT_HYBRID_PRIORITY_FIELD			_MK_FIELD_CONST(0x1, SDP_S_LUT_CFG_0_LUT_HYBRID_PRIORITY_SHIFT)
> +#define SDP_S_LUT_CFG_0_LUT_HYBRID_PRIORITY_LE			_MK_ENUM_CONST(0x0)
> +#define SDP_S_LUT_CFG_0_LUT_HYBRID_PRIORITY_LO			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register SDP_S_LUT_INFO_0
> +#define SDP_S_LUT_INFO_0			_MK_ADDR_CONST(0x9014)
> +#define SDP_S_LUT_INFO_0_LUT_LE_INDEX_OFFSET_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_S_LUT_INFO_0_LUT_LE_INDEX_OFFSET_FIELD			_MK_FIELD_CONST(0xff, SDP_S_LUT_INFO_0_LUT_LE_INDEX_OFFSET_SHIFT)
> +#define SDP_S_LUT_INFO_0_LUT_LE_INDEX_SELECT_SHIFT			_MK_SHIFT_CONST(8)
> +#define SDP_S_LUT_INFO_0_LUT_LE_INDEX_SELECT_FIELD			_MK_FIELD_CONST(0xff, SDP_S_LUT_INFO_0_LUT_LE_INDEX_SELECT_SHIFT)
> +#define SDP_S_LUT_INFO_0_LUT_LO_INDEX_SELECT_SHIFT			_MK_SHIFT_CONST(16)
> +#define SDP_S_LUT_INFO_0_LUT_LO_INDEX_SELECT_FIELD			_MK_FIELD_CONST(0xff, SDP_S_LUT_INFO_0_LUT_LO_INDEX_SELECT_SHIFT)
> +
> +
> +// Register SDP_S_LUT_LE_START_0
> +#define SDP_S_LUT_LE_START_0			_MK_ADDR_CONST(0x9018)
> +#define SDP_S_LUT_LE_START_0_LUT_LE_START_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_S_LUT_LE_START_0_LUT_LE_START_FIELD			_MK_FIELD_CONST(0xffffffff, SDP_S_LUT_LE_START_0_LUT_LE_START_SHIFT)
> +
> +
> +// Register SDP_S_LUT_LE_END_0
> +#define SDP_S_LUT_LE_END_0			_MK_ADDR_CONST(0x901c)
> +#define SDP_S_LUT_LE_END_0_LUT_LE_END_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_S_LUT_LE_END_0_LUT_LE_END_FIELD			_MK_FIELD_CONST(0xffffffff, SDP_S_LUT_LE_END_0_LUT_LE_END_SHIFT)
> +
> +
> +// Register SDP_S_LUT_LO_START_0
> +#define SDP_S_LUT_LO_START_0			_MK_ADDR_CONST(0x9020)
> +#define SDP_S_LUT_LO_START_0_LUT_LO_START_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_S_LUT_LO_START_0_LUT_LO_START_FIELD			_MK_FIELD_CONST(0xffffffff, SDP_S_LUT_LO_START_0_LUT_LO_START_SHIFT)
> +
> +
> +// Register SDP_S_LUT_LO_END_0
> +#define SDP_S_LUT_LO_END_0			_MK_ADDR_CONST(0x9024)
> +#define SDP_S_LUT_LO_END_0_LUT_LO_END_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_S_LUT_LO_END_0_LUT_LO_END_FIELD			_MK_FIELD_CONST(0xffffffff, SDP_S_LUT_LO_END_0_LUT_LO_END_SHIFT)
> +
> +
> +// Register SDP_S_LUT_LE_SLOPE_SCALE_0
> +#define SDP_S_LUT_LE_SLOPE_SCALE_0			_MK_ADDR_CONST(0x9028)
> +#define SDP_S_LUT_LE_SLOPE_SCALE_0_LUT_LE_SLOPE_UFLOW_SCALE_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_S_LUT_LE_SLOPE_SCALE_0_LUT_LE_SLOPE_UFLOW_SCALE_FIELD			_MK_FIELD_CONST(0xffff, SDP_S_LUT_LE_SLOPE_SCALE_0_LUT_LE_SLOPE_UFLOW_SCALE_SHIFT)
> +#define SDP_S_LUT_LE_SLOPE_SCALE_0_LUT_LE_SLOPE_OFLOW_SCALE_SHIFT			_MK_SHIFT_CONST(16)
> +#define SDP_S_LUT_LE_SLOPE_SCALE_0_LUT_LE_SLOPE_OFLOW_SCALE_FIELD			_MK_FIELD_CONST(0xffff, SDP_S_LUT_LE_SLOPE_SCALE_0_LUT_LE_SLOPE_OFLOW_SCALE_SHIFT)
> +
> +
> +// Register SDP_S_LUT_LE_SLOPE_SHIFT_0
> +#define SDP_S_LUT_LE_SLOPE_SHIFT_0			_MK_ADDR_CONST(0x902c)
> +#define SDP_S_LUT_LE_SLOPE_SHIFT_0_LUT_LE_SLOPE_UFLOW_SHIFT_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_S_LUT_LE_SLOPE_SHIFT_0_LUT_LE_SLOPE_UFLOW_SHIFT_FIELD			_MK_FIELD_CONST(0x1f, SDP_S_LUT_LE_SLOPE_SHIFT_0_LUT_LE_SLOPE_UFLOW_SHIFT_SHIFT)
> +#define SDP_S_LUT_LE_SLOPE_SHIFT_0_LUT_LE_SLOPE_OFLOW_SHIFT_SHIFT			_MK_SHIFT_CONST(5)
> +#define SDP_S_LUT_LE_SLOPE_SHIFT_0_LUT_LE_SLOPE_OFLOW_SHIFT_FIELD			_MK_FIELD_CONST(0x1f, SDP_S_LUT_LE_SLOPE_SHIFT_0_LUT_LE_SLOPE_OFLOW_SHIFT_SHIFT)
> +
> +
> +// Register SDP_S_LUT_LO_SLOPE_SCALE_0
> +#define SDP_S_LUT_LO_SLOPE_SCALE_0			_MK_ADDR_CONST(0x9030)
> +#define SDP_S_LUT_LO_SLOPE_SCALE_0_LUT_LO_SLOPE_UFLOW_SCALE_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_S_LUT_LO_SLOPE_SCALE_0_LUT_LO_SLOPE_UFLOW_SCALE_FIELD			_MK_FIELD_CONST(0xffff, SDP_S_LUT_LO_SLOPE_SCALE_0_LUT_LO_SLOPE_UFLOW_SCALE_SHIFT)
> +#define SDP_S_LUT_LO_SLOPE_SCALE_0_LUT_LO_SLOPE_OFLOW_SCALE_SHIFT			_MK_SHIFT_CONST(16)
> +#define SDP_S_LUT_LO_SLOPE_SCALE_0_LUT_LO_SLOPE_OFLOW_SCALE_FIELD			_MK_FIELD_CONST(0xffff, SDP_S_LUT_LO_SLOPE_SCALE_0_LUT_LO_SLOPE_OFLOW_SCALE_SHIFT)
> +
> +
> +// Register SDP_S_LUT_LO_SLOPE_SHIFT_0
> +#define SDP_S_LUT_LO_SLOPE_SHIFT_0			_MK_ADDR_CONST(0x9034)
> +#define SDP_S_LUT_LO_SLOPE_SHIFT_0_LUT_LO_SLOPE_UFLOW_SHIFT_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_S_LUT_LO_SLOPE_SHIFT_0_LUT_LO_SLOPE_UFLOW_SHIFT_FIELD			_MK_FIELD_CONST(0x1f, SDP_S_LUT_LO_SLOPE_SHIFT_0_LUT_LO_SLOPE_UFLOW_SHIFT_SHIFT)
> +#define SDP_S_LUT_LO_SLOPE_SHIFT_0_LUT_LO_SLOPE_OFLOW_SHIFT_SHIFT			_MK_SHIFT_CONST(5)
> +#define SDP_S_LUT_LO_SLOPE_SHIFT_0_LUT_LO_SLOPE_OFLOW_SHIFT_FIELD			_MK_FIELD_CONST(0x1f, SDP_S_LUT_LO_SLOPE_SHIFT_0_LUT_LO_SLOPE_OFLOW_SHIFT_SHIFT)
> +
> +
> +// Register SDP_D_OP_ENABLE_0
> +#define SDP_D_OP_ENABLE_0			_MK_ADDR_CONST(0x9038)
> +#define SDP_D_OP_ENABLE_0_OP_EN_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_D_OP_ENABLE_0_OP_EN_FIELD			_MK_FIELD_CONST(0x1, SDP_D_OP_ENABLE_0_OP_EN_SHIFT)
> +#define SDP_D_OP_ENABLE_0_OP_EN_DISABLE			_MK_ENUM_CONST(0x0)
> +#define SDP_D_OP_ENABLE_0_OP_EN_ENABLE			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register SDP_D_DATA_CUBE_WIDTH_0
> +#define SDP_D_DATA_CUBE_WIDTH_0			_MK_ADDR_CONST(0x903c)
> +#define SDP_D_DATA_CUBE_WIDTH_0_WIDTH_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_D_DATA_CUBE_WIDTH_0_WIDTH_FIELD			_MK_FIELD_CONST(0x1fff, SDP_D_DATA_CUBE_WIDTH_0_WIDTH_SHIFT)
> +
> +
> +// Register SDP_D_DATA_CUBE_HEIGHT_0
> +#define SDP_D_DATA_CUBE_HEIGHT_0			_MK_ADDR_CONST(0x9040)
> +#define SDP_D_DATA_CUBE_HEIGHT_0_HEIGHT_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_D_DATA_CUBE_HEIGHT_0_HEIGHT_FIELD			_MK_FIELD_CONST(0x1fff, SDP_D_DATA_CUBE_HEIGHT_0_HEIGHT_SHIFT)
> +
> +
> +// Register SDP_D_DATA_CUBE_CHANNEL_0
> +#define SDP_D_DATA_CUBE_CHANNEL_0			_MK_ADDR_CONST(0x9044)
> +#define SDP_D_DATA_CUBE_CHANNEL_0_CHANNEL_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_D_DATA_CUBE_CHANNEL_0_CHANNEL_FIELD			_MK_FIELD_CONST(0x1fff, SDP_D_DATA_CUBE_CHANNEL_0_CHANNEL_SHIFT)
> +
> +
> +// Register SDP_D_DST_BASE_ADDR_LOW_0
> +#define SDP_D_DST_BASE_ADDR_LOW_0			_MK_ADDR_CONST(0x9048)
> +#define SDP_D_DST_BASE_ADDR_LOW_0_DST_BASE_ADDR_LOW_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_D_DST_BASE_ADDR_LOW_0_DST_BASE_ADDR_LOW_FIELD			_MK_FIELD_CONST(0xffffffff, SDP_D_DST_BASE_ADDR_LOW_0_DST_BASE_ADDR_LOW_SHIFT)
> +
> +
> +// Register SDP_D_DST_BASE_ADDR_HIGH_0
> +#define SDP_D_DST_BASE_ADDR_HIGH_0			_MK_ADDR_CONST(0x904c)
> +#define SDP_D_DST_BASE_ADDR_HIGH_0_DST_BASE_ADDR_HIGH_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_D_DST_BASE_ADDR_HIGH_0_DST_BASE_ADDR_HIGH_FIELD			_MK_FIELD_CONST(0xffffffff, SDP_D_DST_BASE_ADDR_HIGH_0_DST_BASE_ADDR_HIGH_SHIFT)
> +
> +
> +// Register SDP_D_DST_LINE_STRIDE_0
> +#define SDP_D_DST_LINE_STRIDE_0			_MK_ADDR_CONST(0x9050)
> +#define SDP_D_DST_LINE_STRIDE_0_DST_LINE_STRIDE_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_D_DST_LINE_STRIDE_0_DST_LINE_STRIDE_FIELD			_MK_FIELD_CONST(0xffffffff, SDP_D_DST_LINE_STRIDE_0_DST_LINE_STRIDE_SHIFT)
> +
> +
> +// Register SDP_D_DST_SURFACE_STRIDE_0
> +#define SDP_D_DST_SURFACE_STRIDE_0			_MK_ADDR_CONST(0x9054)
> +#define SDP_D_DST_SURFACE_STRIDE_0_DST_SURFACE_STRIDE_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_D_DST_SURFACE_STRIDE_0_DST_SURFACE_STRIDE_FIELD			_MK_FIELD_CONST(0xffffffff, SDP_D_DST_SURFACE_STRIDE_0_DST_SURFACE_STRIDE_SHIFT)
> +
> +
> +// Register SDP_D_DP_BS_CFG_0
> +#define SDP_D_DP_BS_CFG_0			_MK_ADDR_CONST(0x9058)
> +#define SDP_D_DP_BS_CFG_0_BS_BYPASS_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_D_DP_BS_CFG_0_BS_BYPASS_FIELD			_MK_FIELD_CONST(0x1, SDP_D_DP_BS_CFG_0_BS_BYPASS_SHIFT)
> +#define SDP_D_DP_BS_CFG_0_BS_BYPASS_NO			_MK_ENUM_CONST(0x0)
> +#define SDP_D_DP_BS_CFG_0_BS_BYPASS_YES			_MK_ENUM_CONST(0x1)
> +#define SDP_D_DP_BS_CFG_0_BS_ALU_BYPASS_SHIFT			_MK_SHIFT_CONST(1)
> +#define SDP_D_DP_BS_CFG_0_BS_ALU_BYPASS_FIELD			_MK_FIELD_CONST(0x1, SDP_D_DP_BS_CFG_0_BS_ALU_BYPASS_SHIFT)
> +#define SDP_D_DP_BS_CFG_0_BS_ALU_BYPASS_NO			_MK_ENUM_CONST(0x0)
> +#define SDP_D_DP_BS_CFG_0_BS_ALU_BYPASS_YES			_MK_ENUM_CONST(0x1)
> +#define SDP_D_DP_BS_CFG_0_BS_ALU_ALGO_SHIFT			_MK_SHIFT_CONST(2)
> +#define SDP_D_DP_BS_CFG_0_BS_ALU_ALGO_FIELD			_MK_FIELD_CONST(0x3, SDP_D_DP_BS_CFG_0_BS_ALU_ALGO_SHIFT)
> +#define SDP_D_DP_BS_CFG_0_BS_ALU_ALGO_MAX			_MK_ENUM_CONST(0x0)
> +#define SDP_D_DP_BS_CFG_0_BS_ALU_ALGO_MIN			_MK_ENUM_CONST(0x1)
> +#define SDP_D_DP_BS_CFG_0_BS_ALU_ALGO_SUM			_MK_ENUM_CONST(0x2)
> +#define SDP_D_DP_BS_CFG_0_BS_MUL_BYPASS_SHIFT			_MK_SHIFT_CONST(4)
> +#define SDP_D_DP_BS_CFG_0_BS_MUL_BYPASS_FIELD			_MK_FIELD_CONST(0x1, SDP_D_DP_BS_CFG_0_BS_MUL_BYPASS_SHIFT)
> +#define SDP_D_DP_BS_CFG_0_BS_MUL_BYPASS_NO			_MK_ENUM_CONST(0x0)
> +#define SDP_D_DP_BS_CFG_0_BS_MUL_BYPASS_YES			_MK_ENUM_CONST(0x1)
> +#define SDP_D_DP_BS_CFG_0_BS_MUL_PRELU_SHIFT			_MK_SHIFT_CONST(5)
> +#define SDP_D_DP_BS_CFG_0_BS_MUL_PRELU_FIELD			_MK_FIELD_CONST(0x1, SDP_D_DP_BS_CFG_0_BS_MUL_PRELU_SHIFT)
> +#define SDP_D_DP_BS_CFG_0_BS_MUL_PRELU_NO			_MK_ENUM_CONST(0x0)
> +#define SDP_D_DP_BS_CFG_0_BS_MUL_PRELU_YES			_MK_ENUM_CONST(0x1)
> +#define SDP_D_DP_BS_CFG_0_BS_RELU_BYPASS_SHIFT			_MK_SHIFT_CONST(6)
> +#define SDP_D_DP_BS_CFG_0_BS_RELU_BYPASS_FIELD			_MK_FIELD_CONST(0x1, SDP_D_DP_BS_CFG_0_BS_RELU_BYPASS_SHIFT)
> +#define SDP_D_DP_BS_CFG_0_BS_RELU_BYPASS_NO			_MK_ENUM_CONST(0x0)
> +#define SDP_D_DP_BS_CFG_0_BS_RELU_BYPASS_YES			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register SDP_D_DP_BS_ALU_CFG_0
> +#define SDP_D_DP_BS_ALU_CFG_0			_MK_ADDR_CONST(0x905c)
> +#define SDP_D_DP_BS_ALU_CFG_0_BS_ALU_SRC_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_D_DP_BS_ALU_CFG_0_BS_ALU_SRC_FIELD			_MK_FIELD_CONST(0x1, SDP_D_DP_BS_ALU_CFG_0_BS_ALU_SRC_SHIFT)
> +#define SDP_D_DP_BS_ALU_CFG_0_BS_ALU_SRC_REG			_MK_ENUM_CONST(0x0)
> +#define SDP_D_DP_BS_ALU_CFG_0_BS_ALU_SRC_MEM			_MK_ENUM_CONST(0x1)
> +#define SDP_D_DP_BS_ALU_CFG_0_BS_ALU_SHIFT_VALUE_SHIFT			_MK_SHIFT_CONST(8)
> +#define SDP_D_DP_BS_ALU_CFG_0_BS_ALU_SHIFT_VALUE_FIELD			_MK_FIELD_CONST(0x3f, SDP_D_DP_BS_ALU_CFG_0_BS_ALU_SHIFT_VALUE_SHIFT)
> +
> +
> +// Register SDP_D_DP_BS_ALU_SRC_VALUE_0
> +#define SDP_D_DP_BS_ALU_SRC_VALUE_0			_MK_ADDR_CONST(0x9060)
> +#define SDP_D_DP_BS_ALU_SRC_VALUE_0_BS_ALU_OPERAND_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_D_DP_BS_ALU_SRC_VALUE_0_BS_ALU_OPERAND_FIELD			_MK_FIELD_CONST(0xffff, SDP_D_DP_BS_ALU_SRC_VALUE_0_BS_ALU_OPERAND_SHIFT)
> +
> +
> +// Register SDP_D_DP_BS_MUL_CFG_0
> +#define SDP_D_DP_BS_MUL_CFG_0			_MK_ADDR_CONST(0x9064)
> +#define SDP_D_DP_BS_MUL_CFG_0_BS_MUL_SRC_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_D_DP_BS_MUL_CFG_0_BS_MUL_SRC_FIELD			_MK_FIELD_CONST(0x1, SDP_D_DP_BS_MUL_CFG_0_BS_MUL_SRC_SHIFT)
> +#define SDP_D_DP_BS_MUL_CFG_0_BS_MUL_SRC_REG			_MK_ENUM_CONST(0x0)
> +#define SDP_D_DP_BS_MUL_CFG_0_BS_MUL_SRC_MEM			_MK_ENUM_CONST(0x1)
> +#define SDP_D_DP_BS_MUL_CFG_0_BS_MUL_SHIFT_VALUE_SHIFT			_MK_SHIFT_CONST(8)
> +#define SDP_D_DP_BS_MUL_CFG_0_BS_MUL_SHIFT_VALUE_FIELD			_MK_FIELD_CONST(0xff, SDP_D_DP_BS_MUL_CFG_0_BS_MUL_SHIFT_VALUE_SHIFT)
> +
> +
> +// Register SDP_D_DP_BS_MUL_SRC_VALUE_0
> +#define SDP_D_DP_BS_MUL_SRC_VALUE_0			_MK_ADDR_CONST(0x9068)
> +#define SDP_D_DP_BS_MUL_SRC_VALUE_0_BS_MUL_OPERAND_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_D_DP_BS_MUL_SRC_VALUE_0_BS_MUL_OPERAND_FIELD			_MK_FIELD_CONST(0xffff, SDP_D_DP_BS_MUL_SRC_VALUE_0_BS_MUL_OPERAND_SHIFT)
> +
> +
> +// Register SDP_D_DP_BN_CFG_0
> +#define SDP_D_DP_BN_CFG_0			_MK_ADDR_CONST(0x906c)
> +#define SDP_D_DP_BN_CFG_0_BN_BYPASS_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_D_DP_BN_CFG_0_BN_BYPASS_FIELD			_MK_FIELD_CONST(0x1, SDP_D_DP_BN_CFG_0_BN_BYPASS_SHIFT)
> +#define SDP_D_DP_BN_CFG_0_BN_BYPASS_NO			_MK_ENUM_CONST(0x0)
> +#define SDP_D_DP_BN_CFG_0_BN_BYPASS_YES			_MK_ENUM_CONST(0x1)
> +#define SDP_D_DP_BN_CFG_0_BN_ALU_BYPASS_SHIFT			_MK_SHIFT_CONST(1)
> +#define SDP_D_DP_BN_CFG_0_BN_ALU_BYPASS_FIELD			_MK_FIELD_CONST(0x1, SDP_D_DP_BN_CFG_0_BN_ALU_BYPASS_SHIFT)
> +#define SDP_D_DP_BN_CFG_0_BN_ALU_BYPASS_NO			_MK_ENUM_CONST(0x0)
> +#define SDP_D_DP_BN_CFG_0_BN_ALU_BYPASS_YES			_MK_ENUM_CONST(0x1)
> +#define SDP_D_DP_BN_CFG_0_BN_ALU_ALGO_SHIFT			_MK_SHIFT_CONST(2)
> +#define SDP_D_DP_BN_CFG_0_BN_ALU_ALGO_FIELD			_MK_FIELD_CONST(0x3, SDP_D_DP_BN_CFG_0_BN_ALU_ALGO_SHIFT)
> +#define SDP_D_DP_BN_CFG_0_BN_ALU_ALGO_MAX			_MK_ENUM_CONST(0x0)
> +#define SDP_D_DP_BN_CFG_0_BN_ALU_ALGO_MIN			_MK_ENUM_CONST(0x1)
> +#define SDP_D_DP_BN_CFG_0_BN_ALU_ALGO_SUM			_MK_ENUM_CONST(0x2)
> +#define SDP_D_DP_BN_CFG_0_BN_MUL_BYPASS_SHIFT			_MK_SHIFT_CONST(4)
> +#define SDP_D_DP_BN_CFG_0_BN_MUL_BYPASS_FIELD			_MK_FIELD_CONST(0x1, SDP_D_DP_BN_CFG_0_BN_MUL_BYPASS_SHIFT)
> +#define SDP_D_DP_BN_CFG_0_BN_MUL_BYPASS_NO			_MK_ENUM_CONST(0x0)
> +#define SDP_D_DP_BN_CFG_0_BN_MUL_BYPASS_YES			_MK_ENUM_CONST(0x1)
> +#define SDP_D_DP_BN_CFG_0_BN_MUL_PRELU_SHIFT			_MK_SHIFT_CONST(5)
> +#define SDP_D_DP_BN_CFG_0_BN_MUL_PRELU_FIELD			_MK_FIELD_CONST(0x1, SDP_D_DP_BN_CFG_0_BN_MUL_PRELU_SHIFT)
> +#define SDP_D_DP_BN_CFG_0_BN_MUL_PRELU_NO			_MK_ENUM_CONST(0x0)
> +#define SDP_D_DP_BN_CFG_0_BN_MUL_PRELU_YES			_MK_ENUM_CONST(0x1)
> +#define SDP_D_DP_BN_CFG_0_BN_RELU_BYPASS_SHIFT			_MK_SHIFT_CONST(6)
> +#define SDP_D_DP_BN_CFG_0_BN_RELU_BYPASS_FIELD			_MK_FIELD_CONST(0x1, SDP_D_DP_BN_CFG_0_BN_RELU_BYPASS_SHIFT)
> +#define SDP_D_DP_BN_CFG_0_BN_RELU_BYPASS_NO			_MK_ENUM_CONST(0x0)
> +#define SDP_D_DP_BN_CFG_0_BN_RELU_BYPASS_YES			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register SDP_D_DP_BN_ALU_CFG_0
> +#define SDP_D_DP_BN_ALU_CFG_0			_MK_ADDR_CONST(0x9070)
> +#define SDP_D_DP_BN_ALU_CFG_0_BN_ALU_SRC_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_D_DP_BN_ALU_CFG_0_BN_ALU_SRC_FIELD			_MK_FIELD_CONST(0x1, SDP_D_DP_BN_ALU_CFG_0_BN_ALU_SRC_SHIFT)
> +#define SDP_D_DP_BN_ALU_CFG_0_BN_ALU_SRC_REG			_MK_ENUM_CONST(0x0)
> +#define SDP_D_DP_BN_ALU_CFG_0_BN_ALU_SRC_MEM			_MK_ENUM_CONST(0x1)
> +#define SDP_D_DP_BN_ALU_CFG_0_BN_ALU_SHIFT_VALUE_SHIFT			_MK_SHIFT_CONST(8)
> +#define SDP_D_DP_BN_ALU_CFG_0_BN_ALU_SHIFT_VALUE_FIELD			_MK_FIELD_CONST(0x3f, SDP_D_DP_BN_ALU_CFG_0_BN_ALU_SHIFT_VALUE_SHIFT)
> +
> +
> +// Register SDP_D_DP_BN_ALU_SRC_VALUE_0
> +#define SDP_D_DP_BN_ALU_SRC_VALUE_0			_MK_ADDR_CONST(0x9074)
> +#define SDP_D_DP_BN_ALU_SRC_VALUE_0_BN_ALU_OPERAND_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_D_DP_BN_ALU_SRC_VALUE_0_BN_ALU_OPERAND_FIELD			_MK_FIELD_CONST(0xffff, SDP_D_DP_BN_ALU_SRC_VALUE_0_BN_ALU_OPERAND_SHIFT)
> +
> +
> +// Register SDP_D_DP_BN_MUL_CFG_0
> +#define SDP_D_DP_BN_MUL_CFG_0			_MK_ADDR_CONST(0x9078)
> +#define SDP_D_DP_BN_MUL_CFG_0_BN_MUL_SRC_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_D_DP_BN_MUL_CFG_0_BN_MUL_SRC_FIELD			_MK_FIELD_CONST(0x1, SDP_D_DP_BN_MUL_CFG_0_BN_MUL_SRC_SHIFT)
> +#define SDP_D_DP_BN_MUL_CFG_0_BN_MUL_SRC_REG			_MK_ENUM_CONST(0x0)
> +#define SDP_D_DP_BN_MUL_CFG_0_BN_MUL_SRC_MEM			_MK_ENUM_CONST(0x1)
> +#define SDP_D_DP_BN_MUL_CFG_0_BN_MUL_SHIFT_VALUE_SHIFT			_MK_SHIFT_CONST(8)
> +#define SDP_D_DP_BN_MUL_CFG_0_BN_MUL_SHIFT_VALUE_FIELD			_MK_FIELD_CONST(0xff, SDP_D_DP_BN_MUL_CFG_0_BN_MUL_SHIFT_VALUE_SHIFT)
> +
> +
> +// Register SDP_D_DP_BN_MUL_SRC_VALUE_0
> +#define SDP_D_DP_BN_MUL_SRC_VALUE_0			_MK_ADDR_CONST(0x907c)
> +#define SDP_D_DP_BN_MUL_SRC_VALUE_0_BN_MUL_OPERAND_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_D_DP_BN_MUL_SRC_VALUE_0_BN_MUL_OPERAND_FIELD			_MK_FIELD_CONST(0xffff, SDP_D_DP_BN_MUL_SRC_VALUE_0_BN_MUL_OPERAND_SHIFT)
> +
> +
> +// Register SDP_D_DP_EW_CFG_0
> +#define SDP_D_DP_EW_CFG_0			_MK_ADDR_CONST(0x9080)
> +#define SDP_D_DP_EW_CFG_0_EW_BYPASS_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_D_DP_EW_CFG_0_EW_BYPASS_FIELD			_MK_FIELD_CONST(0x1, SDP_D_DP_EW_CFG_0_EW_BYPASS_SHIFT)
> +#define SDP_D_DP_EW_CFG_0_EW_BYPASS_NO			_MK_ENUM_CONST(0x0)
> +#define SDP_D_DP_EW_CFG_0_EW_BYPASS_YES			_MK_ENUM_CONST(0x1)
> +#define SDP_D_DP_EW_CFG_0_EW_ALU_BYPASS_SHIFT			_MK_SHIFT_CONST(1)
> +#define SDP_D_DP_EW_CFG_0_EW_ALU_BYPASS_FIELD			_MK_FIELD_CONST(0x1, SDP_D_DP_EW_CFG_0_EW_ALU_BYPASS_SHIFT)
> +#define SDP_D_DP_EW_CFG_0_EW_ALU_BYPASS_NO			_MK_ENUM_CONST(0x0)
> +#define SDP_D_DP_EW_CFG_0_EW_ALU_BYPASS_YES			_MK_ENUM_CONST(0x1)
> +#define SDP_D_DP_EW_CFG_0_EW_ALU_ALGO_SHIFT			_MK_SHIFT_CONST(2)
> +#define SDP_D_DP_EW_CFG_0_EW_ALU_ALGO_FIELD			_MK_FIELD_CONST(0x3, SDP_D_DP_EW_CFG_0_EW_ALU_ALGO_SHIFT)
> +#define SDP_D_DP_EW_CFG_0_EW_ALU_ALGO_MAX			_MK_ENUM_CONST(0x0)
> +#define SDP_D_DP_EW_CFG_0_EW_ALU_ALGO_MIN			_MK_ENUM_CONST(0x1)
> +#define SDP_D_DP_EW_CFG_0_EW_ALU_ALGO_SUM			_MK_ENUM_CONST(0x2)
> +#define SDP_D_DP_EW_CFG_0_EW_ALU_ALGO_EQL			_MK_ENUM_CONST(0x3)
> +#define SDP_D_DP_EW_CFG_0_EW_MUL_BYPASS_SHIFT			_MK_SHIFT_CONST(4)
> +#define SDP_D_DP_EW_CFG_0_EW_MUL_BYPASS_FIELD			_MK_FIELD_CONST(0x1, SDP_D_DP_EW_CFG_0_EW_MUL_BYPASS_SHIFT)
> +#define SDP_D_DP_EW_CFG_0_EW_MUL_BYPASS_NO			_MK_ENUM_CONST(0x0)
> +#define SDP_D_DP_EW_CFG_0_EW_MUL_BYPASS_YES			_MK_ENUM_CONST(0x1)
> +#define SDP_D_DP_EW_CFG_0_EW_MUL_PRELU_SHIFT			_MK_SHIFT_CONST(5)
> +#define SDP_D_DP_EW_CFG_0_EW_MUL_PRELU_FIELD			_MK_FIELD_CONST(0x1, SDP_D_DP_EW_CFG_0_EW_MUL_PRELU_SHIFT)
> +#define SDP_D_DP_EW_CFG_0_EW_MUL_PRELU_NO			_MK_ENUM_CONST(0x0)
> +#define SDP_D_DP_EW_CFG_0_EW_MUL_PRELU_YES			_MK_ENUM_CONST(0x1)
> +#define SDP_D_DP_EW_CFG_0_EW_LUT_BYPASS_SHIFT			_MK_SHIFT_CONST(6)
> +#define SDP_D_DP_EW_CFG_0_EW_LUT_BYPASS_FIELD			_MK_FIELD_CONST(0x1, SDP_D_DP_EW_CFG_0_EW_LUT_BYPASS_SHIFT)
> +#define SDP_D_DP_EW_CFG_0_EW_LUT_BYPASS_NO			_MK_ENUM_CONST(0x0)
> +#define SDP_D_DP_EW_CFG_0_EW_LUT_BYPASS_YES			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register SDP_D_DP_EW_ALU_CFG_0
> +#define SDP_D_DP_EW_ALU_CFG_0			_MK_ADDR_CONST(0x9084)
> +#define SDP_D_DP_EW_ALU_CFG_0_EW_ALU_SRC_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_D_DP_EW_ALU_CFG_0_EW_ALU_SRC_FIELD			_MK_FIELD_CONST(0x1, SDP_D_DP_EW_ALU_CFG_0_EW_ALU_SRC_SHIFT)
> +#define SDP_D_DP_EW_ALU_CFG_0_EW_ALU_SRC_REG			_MK_ENUM_CONST(0x0)
> +#define SDP_D_DP_EW_ALU_CFG_0_EW_ALU_SRC_MEM			_MK_ENUM_CONST(0x1)
> +#define SDP_D_DP_EW_ALU_CFG_0_EW_ALU_CVT_BYPASS_SHIFT			_MK_SHIFT_CONST(1)
> +#define SDP_D_DP_EW_ALU_CFG_0_EW_ALU_CVT_BYPASS_FIELD			_MK_FIELD_CONST(0x1, SDP_D_DP_EW_ALU_CFG_0_EW_ALU_CVT_BYPASS_SHIFT)
> +#define SDP_D_DP_EW_ALU_CFG_0_EW_ALU_CVT_BYPASS_NO			_MK_ENUM_CONST(0x0)
> +#define SDP_D_DP_EW_ALU_CFG_0_EW_ALU_CVT_BYPASS_YES			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register SDP_D_DP_EW_ALU_SRC_VALUE_0
> +#define SDP_D_DP_EW_ALU_SRC_VALUE_0			_MK_ADDR_CONST(0x9088)
> +#define SDP_D_DP_EW_ALU_SRC_VALUE_0_EW_ALU_OPERAND_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_D_DP_EW_ALU_SRC_VALUE_0_EW_ALU_OPERAND_FIELD			_MK_FIELD_CONST(0xffffffff, SDP_D_DP_EW_ALU_SRC_VALUE_0_EW_ALU_OPERAND_SHIFT)
> +
> +
> +// Register SDP_D_DP_EW_ALU_CVT_OFFSET_VALUE_0
> +#define SDP_D_DP_EW_ALU_CVT_OFFSET_VALUE_0			_MK_ADDR_CONST(0x908c)
> +#define SDP_D_DP_EW_ALU_CVT_OFFSET_VALUE_0_EW_ALU_CVT_OFFSET_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_D_DP_EW_ALU_CVT_OFFSET_VALUE_0_EW_ALU_CVT_OFFSET_FIELD			_MK_FIELD_CONST(0xffffffff, SDP_D_DP_EW_ALU_CVT_OFFSET_VALUE_0_EW_ALU_CVT_OFFSET_SHIFT)
> +
> +
> +// Register SDP_D_DP_EW_ALU_CVT_SCALE_VALUE_0
> +#define SDP_D_DP_EW_ALU_CVT_SCALE_VALUE_0			_MK_ADDR_CONST(0x9090)
> +#define SDP_D_DP_EW_ALU_CVT_SCALE_VALUE_0_EW_ALU_CVT_SCALE_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_D_DP_EW_ALU_CVT_SCALE_VALUE_0_EW_ALU_CVT_SCALE_FIELD			_MK_FIELD_CONST(0xffff, SDP_D_DP_EW_ALU_CVT_SCALE_VALUE_0_EW_ALU_CVT_SCALE_SHIFT)
> +
> +
> +// Register SDP_D_DP_EW_ALU_CVT_TRUNCATE_VALUE_0
> +#define SDP_D_DP_EW_ALU_CVT_TRUNCATE_VALUE_0			_MK_ADDR_CONST(0x9094)
> +#define SDP_D_DP_EW_ALU_CVT_TRUNCATE_VALUE_0_EW_ALU_CVT_TRUNCATE_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_D_DP_EW_ALU_CVT_TRUNCATE_VALUE_0_EW_ALU_CVT_TRUNCATE_FIELD			_MK_FIELD_CONST(0x3f, SDP_D_DP_EW_ALU_CVT_TRUNCATE_VALUE_0_EW_ALU_CVT_TRUNCATE_SHIFT)
> +
> +
> +// Register SDP_D_DP_EW_MUL_CFG_0
> +#define SDP_D_DP_EW_MUL_CFG_0			_MK_ADDR_CONST(0x9098)
> +#define SDP_D_DP_EW_MUL_CFG_0_EW_MUL_SRC_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_D_DP_EW_MUL_CFG_0_EW_MUL_SRC_FIELD			_MK_FIELD_CONST(0x1, SDP_D_DP_EW_MUL_CFG_0_EW_MUL_SRC_SHIFT)
> +#define SDP_D_DP_EW_MUL_CFG_0_EW_MUL_SRC_REG			_MK_ENUM_CONST(0x0)
> +#define SDP_D_DP_EW_MUL_CFG_0_EW_MUL_SRC_MEM			_MK_ENUM_CONST(0x1)
> +#define SDP_D_DP_EW_MUL_CFG_0_EW_MUL_CVT_BYPASS_SHIFT			_MK_SHIFT_CONST(1)
> +#define SDP_D_DP_EW_MUL_CFG_0_EW_MUL_CVT_BYPASS_FIELD			_MK_FIELD_CONST(0x1, SDP_D_DP_EW_MUL_CFG_0_EW_MUL_CVT_BYPASS_SHIFT)
> +#define SDP_D_DP_EW_MUL_CFG_0_EW_MUL_CVT_BYPASS_NO			_MK_ENUM_CONST(0x0)
> +#define SDP_D_DP_EW_MUL_CFG_0_EW_MUL_CVT_BYPASS_YES			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register SDP_D_DP_EW_MUL_SRC_VALUE_0
> +#define SDP_D_DP_EW_MUL_SRC_VALUE_0			_MK_ADDR_CONST(0x909c)
> +#define SDP_D_DP_EW_MUL_SRC_VALUE_0_EW_MUL_OPERAND_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_D_DP_EW_MUL_SRC_VALUE_0_EW_MUL_OPERAND_FIELD			_MK_FIELD_CONST(0xffffffff, SDP_D_DP_EW_MUL_SRC_VALUE_0_EW_MUL_OPERAND_SHIFT)
> +
> +
> +// Register SDP_D_DP_EW_MUL_CVT_OFFSET_VALUE_0
> +#define SDP_D_DP_EW_MUL_CVT_OFFSET_VALUE_0			_MK_ADDR_CONST(0x90a0)
> +#define SDP_D_DP_EW_MUL_CVT_OFFSET_VALUE_0_EW_MUL_CVT_OFFSET_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_D_DP_EW_MUL_CVT_OFFSET_VALUE_0_EW_MUL_CVT_OFFSET_FIELD			_MK_FIELD_CONST(0xffffffff, SDP_D_DP_EW_MUL_CVT_OFFSET_VALUE_0_EW_MUL_CVT_OFFSET_SHIFT)
> +
> +
> +// Register SDP_D_DP_EW_MUL_CVT_SCALE_VALUE_0
> +#define SDP_D_DP_EW_MUL_CVT_SCALE_VALUE_0			_MK_ADDR_CONST(0x90a4)
> +#define SDP_D_DP_EW_MUL_CVT_SCALE_VALUE_0_EW_MUL_CVT_SCALE_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_D_DP_EW_MUL_CVT_SCALE_VALUE_0_EW_MUL_CVT_SCALE_FIELD			_MK_FIELD_CONST(0xffff, SDP_D_DP_EW_MUL_CVT_SCALE_VALUE_0_EW_MUL_CVT_SCALE_SHIFT)
> +
> +
> +// Register SDP_D_DP_EW_MUL_CVT_TRUNCATE_VALUE_0
> +#define SDP_D_DP_EW_MUL_CVT_TRUNCATE_VALUE_0			_MK_ADDR_CONST(0x90a8)
> +#define SDP_D_DP_EW_MUL_CVT_TRUNCATE_VALUE_0_EW_MUL_CVT_TRUNCATE_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_D_DP_EW_MUL_CVT_TRUNCATE_VALUE_0_EW_MUL_CVT_TRUNCATE_FIELD			_MK_FIELD_CONST(0x3f, SDP_D_DP_EW_MUL_CVT_TRUNCATE_VALUE_0_EW_MUL_CVT_TRUNCATE_SHIFT)
> +
> +
> +// Register SDP_D_DP_EW_TRUNCATE_VALUE_0
> +#define SDP_D_DP_EW_TRUNCATE_VALUE_0			_MK_ADDR_CONST(0x90ac)
> +#define SDP_D_DP_EW_TRUNCATE_VALUE_0_EW_TRUNCATE_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_D_DP_EW_TRUNCATE_VALUE_0_EW_TRUNCATE_FIELD			_MK_FIELD_CONST(0x3ff, SDP_D_DP_EW_TRUNCATE_VALUE_0_EW_TRUNCATE_SHIFT)
> +
> +
> +// Register SDP_D_FEATURE_MODE_CFG_0
> +#define SDP_D_FEATURE_MODE_CFG_0			_MK_ADDR_CONST(0x90b0)
> +#define SDP_D_FEATURE_MODE_CFG_0_FLYING_MODE_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_D_FEATURE_MODE_CFG_0_FLYING_MODE_FIELD			_MK_FIELD_CONST(0x1, SDP_D_FEATURE_MODE_CFG_0_FLYING_MODE_SHIFT)
> +#define SDP_D_FEATURE_MODE_CFG_0_FLYING_MODE_OFF			_MK_ENUM_CONST(0x0)
> +#define SDP_D_FEATURE_MODE_CFG_0_FLYING_MODE_ON			_MK_ENUM_CONST(0x1)
> +#define SDP_D_FEATURE_MODE_CFG_0_OUTPUT_DST_SHIFT			_MK_SHIFT_CONST(1)
> +#define SDP_D_FEATURE_MODE_CFG_0_OUTPUT_DST_FIELD			_MK_FIELD_CONST(0x1, SDP_D_FEATURE_MODE_CFG_0_OUTPUT_DST_SHIFT)
> +#define SDP_D_FEATURE_MODE_CFG_0_OUTPUT_DST_MEM			_MK_ENUM_CONST(0x0)
> +#define SDP_D_FEATURE_MODE_CFG_0_OUTPUT_DST_PDP			_MK_ENUM_CONST(0x1)
> +#define SDP_D_FEATURE_MODE_CFG_0_WINOGRAD_SHIFT			_MK_SHIFT_CONST(2)
> +#define SDP_D_FEATURE_MODE_CFG_0_WINOGRAD_FIELD			_MK_FIELD_CONST(0x1, SDP_D_FEATURE_MODE_CFG_0_WINOGRAD_SHIFT)
> +#define SDP_D_FEATURE_MODE_CFG_0_WINOGRAD_OFF			_MK_ENUM_CONST(0x0)
> +#define SDP_D_FEATURE_MODE_CFG_0_WINOGRAD_ON			_MK_ENUM_CONST(0x1)
> +#define SDP_D_FEATURE_MODE_CFG_0_NAN_TO_ZERO_SHIFT			_MK_SHIFT_CONST(3)
> +#define SDP_D_FEATURE_MODE_CFG_0_NAN_TO_ZERO_FIELD			_MK_FIELD_CONST(0x1, SDP_D_FEATURE_MODE_CFG_0_NAN_TO_ZERO_SHIFT)
> +#define SDP_D_FEATURE_MODE_CFG_0_NAN_TO_ZERO_DISABLE			_MK_ENUM_CONST(0x0)
> +#define SDP_D_FEATURE_MODE_CFG_0_NAN_TO_ZERO_ENABLE			_MK_ENUM_CONST(0x1)
> +#define SDP_D_FEATURE_MODE_CFG_0_BATCH_NUMBER_SHIFT			_MK_SHIFT_CONST(8)
> +#define SDP_D_FEATURE_MODE_CFG_0_BATCH_NUMBER_FIELD			_MK_FIELD_CONST(0x1f, SDP_D_FEATURE_MODE_CFG_0_BATCH_NUMBER_SHIFT)
> +
> +
> +// Register SDP_D_DST_DMA_CFG_0
> +#define SDP_D_DST_DMA_CFG_0			_MK_ADDR_CONST(0x90b4)
> +#define SDP_D_DST_DMA_CFG_0_DST_RAM_TYPE_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_D_DST_DMA_CFG_0_DST_RAM_TYPE_FIELD			_MK_FIELD_CONST(0x1, SDP_D_DST_DMA_CFG_0_DST_RAM_TYPE_SHIFT)
> +#define SDP_D_DST_DMA_CFG_0_DST_RAM_TYPE_CV			_MK_ENUM_CONST(0x0)
> +#define SDP_D_DST_DMA_CFG_0_DST_RAM_TYPE_MC			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register SDP_D_DST_BATCH_STRIDE_0
> +#define SDP_D_DST_BATCH_STRIDE_0			_MK_ADDR_CONST(0x90b8)
> +#define SDP_D_DST_BATCH_STRIDE_0_DST_BATCH_STRIDE_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_D_DST_BATCH_STRIDE_0_DST_BATCH_STRIDE_FIELD			_MK_FIELD_CONST(0xffffffff, SDP_D_DST_BATCH_STRIDE_0_DST_BATCH_STRIDE_SHIFT)
> +
> +
> +// Register SDP_D_DATA_FORMAT_0
> +#define SDP_D_DATA_FORMAT_0			_MK_ADDR_CONST(0x90bc)
> +#define SDP_D_DATA_FORMAT_0_PROC_PRECISION_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_D_DATA_FORMAT_0_PROC_PRECISION_FIELD			_MK_FIELD_CONST(0x3, SDP_D_DATA_FORMAT_0_PROC_PRECISION_SHIFT)
> +#define SDP_D_DATA_FORMAT_0_PROC_PRECISION_INT8			_MK_ENUM_CONST(0x0)
> +#define SDP_D_DATA_FORMAT_0_PROC_PRECISION_INT16			_MK_ENUM_CONST(0x1)
> +#define SDP_D_DATA_FORMAT_0_PROC_PRECISION_FP16			_MK_ENUM_CONST(0x2)
> +#define SDP_D_DATA_FORMAT_0_OUT_PRECISION_SHIFT			_MK_SHIFT_CONST(2)
> +#define SDP_D_DATA_FORMAT_0_OUT_PRECISION_FIELD			_MK_FIELD_CONST(0x3, SDP_D_DATA_FORMAT_0_OUT_PRECISION_SHIFT)
> +#define SDP_D_DATA_FORMAT_0_OUT_PRECISION_INT8			_MK_ENUM_CONST(0x0)
> +#define SDP_D_DATA_FORMAT_0_OUT_PRECISION_INT16			_MK_ENUM_CONST(0x1)
> +#define SDP_D_DATA_FORMAT_0_OUT_PRECISION_FP16			_MK_ENUM_CONST(0x2)
> +
> +
> +// Register SDP_D_CVT_OFFSET_0
> +#define SDP_D_CVT_OFFSET_0			_MK_ADDR_CONST(0x90c0)
> +#define SDP_D_CVT_OFFSET_0_CVT_OFFSET_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_D_CVT_OFFSET_0_CVT_OFFSET_FIELD			_MK_FIELD_CONST(0xffffffff, SDP_D_CVT_OFFSET_0_CVT_OFFSET_SHIFT)
> +
> +
> +// Register SDP_D_CVT_SCALE_0
> +#define SDP_D_CVT_SCALE_0			_MK_ADDR_CONST(0x90c4)
> +#define SDP_D_CVT_SCALE_0_CVT_SCALE_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_D_CVT_SCALE_0_CVT_SCALE_FIELD			_MK_FIELD_CONST(0xffff, SDP_D_CVT_SCALE_0_CVT_SCALE_SHIFT)
> +
> +
> +// Register SDP_D_CVT_SHIFT_0
> +#define SDP_D_CVT_SHIFT_0			_MK_ADDR_CONST(0x90c8)
> +#define SDP_D_CVT_SHIFT_0_CVT_SHIFT_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_D_CVT_SHIFT_0_CVT_SHIFT_FIELD			_MK_FIELD_CONST(0x3f, SDP_D_CVT_SHIFT_0_CVT_SHIFT_SHIFT)
> +
> +
> +// Register SDP_D_STATUS_0
> +#define SDP_D_STATUS_0			_MK_ADDR_CONST(0x90cc)
> +#define SDP_D_STATUS_0_STATUS_UNEQUAL_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_D_STATUS_0_STATUS_UNEQUAL_FIELD			_MK_FIELD_CONST(0x1, SDP_D_STATUS_0_STATUS_UNEQUAL_SHIFT)
> +
> +
> +// Register SDP_D_STATUS_NAN_INPUT_NUM_0
> +#define SDP_D_STATUS_NAN_INPUT_NUM_0			_MK_ADDR_CONST(0x90d0)
> +#define SDP_D_STATUS_NAN_INPUT_NUM_0_STATUS_NAN_INPUT_NUM_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_D_STATUS_NAN_INPUT_NUM_0_STATUS_NAN_INPUT_NUM_FIELD			_MK_FIELD_CONST(0xffffffff, SDP_D_STATUS_NAN_INPUT_NUM_0_STATUS_NAN_INPUT_NUM_SHIFT)
> +
> +
> +// Register SDP_D_STATUS_INF_INPUT_NUM_0
> +#define SDP_D_STATUS_INF_INPUT_NUM_0			_MK_ADDR_CONST(0x90d4)
> +#define SDP_D_STATUS_INF_INPUT_NUM_0_STATUS_INF_INPUT_NUM_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_D_STATUS_INF_INPUT_NUM_0_STATUS_INF_INPUT_NUM_FIELD			_MK_FIELD_CONST(0xffffffff, SDP_D_STATUS_INF_INPUT_NUM_0_STATUS_INF_INPUT_NUM_SHIFT)
> +
> +
> +// Register SDP_D_STATUS_NAN_OUTPUT_NUM_0
> +#define SDP_D_STATUS_NAN_OUTPUT_NUM_0			_MK_ADDR_CONST(0x90d8)
> +#define SDP_D_STATUS_NAN_OUTPUT_NUM_0_STATUS_NAN_OUTPUT_NUM_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_D_STATUS_NAN_OUTPUT_NUM_0_STATUS_NAN_OUTPUT_NUM_FIELD			_MK_FIELD_CONST(0xffffffff, SDP_D_STATUS_NAN_OUTPUT_NUM_0_STATUS_NAN_OUTPUT_NUM_SHIFT)
> +
> +
> +// Register SDP_D_PERF_ENABLE_0
> +#define SDP_D_PERF_ENABLE_0			_MK_ADDR_CONST(0x90dc)
> +#define SDP_D_PERF_ENABLE_0_PERF_DMA_EN_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_D_PERF_ENABLE_0_PERF_DMA_EN_FIELD			_MK_FIELD_CONST(0x1, SDP_D_PERF_ENABLE_0_PERF_DMA_EN_SHIFT)
> +#define SDP_D_PERF_ENABLE_0_PERF_DMA_EN_NO			_MK_ENUM_CONST(0x0)
> +#define SDP_D_PERF_ENABLE_0_PERF_DMA_EN_YES			_MK_ENUM_CONST(0x1)
> +#define SDP_D_PERF_ENABLE_0_PERF_LUT_EN_SHIFT			_MK_SHIFT_CONST(1)
> +#define SDP_D_PERF_ENABLE_0_PERF_LUT_EN_FIELD			_MK_FIELD_CONST(0x1, SDP_D_PERF_ENABLE_0_PERF_LUT_EN_SHIFT)
> +#define SDP_D_PERF_ENABLE_0_PERF_LUT_EN_NO			_MK_ENUM_CONST(0x0)
> +#define SDP_D_PERF_ENABLE_0_PERF_LUT_EN_YES			_MK_ENUM_CONST(0x1)
> +#define SDP_D_PERF_ENABLE_0_PERF_SAT_EN_SHIFT			_MK_SHIFT_CONST(2)
> +#define SDP_D_PERF_ENABLE_0_PERF_SAT_EN_FIELD			_MK_FIELD_CONST(0x1, SDP_D_PERF_ENABLE_0_PERF_SAT_EN_SHIFT)
> +#define SDP_D_PERF_ENABLE_0_PERF_SAT_EN_NO			_MK_ENUM_CONST(0x0)
> +#define SDP_D_PERF_ENABLE_0_PERF_SAT_EN_YES			_MK_ENUM_CONST(0x1)
> +#define SDP_D_PERF_ENABLE_0_PERF_NAN_INF_COUNT_EN_SHIFT			_MK_SHIFT_CONST(3)
> +#define SDP_D_PERF_ENABLE_0_PERF_NAN_INF_COUNT_EN_FIELD			_MK_FIELD_CONST(0x1, SDP_D_PERF_ENABLE_0_PERF_NAN_INF_COUNT_EN_SHIFT)
> +#define SDP_D_PERF_ENABLE_0_PERF_NAN_INF_COUNT_EN_NO			_MK_ENUM_CONST(0x0)
> +#define SDP_D_PERF_ENABLE_0_PERF_NAN_INF_COUNT_EN_YES			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register SDP_D_PERF_WDMA_WRITE_STALL_0
> +#define SDP_D_PERF_WDMA_WRITE_STALL_0			_MK_ADDR_CONST(0x90e0)
> +#define SDP_D_PERF_WDMA_WRITE_STALL_0_WDMA_STALL_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_D_PERF_WDMA_WRITE_STALL_0_WDMA_STALL_FIELD			_MK_FIELD_CONST(0xffffffff, SDP_D_PERF_WDMA_WRITE_STALL_0_WDMA_STALL_SHIFT)
> +
> +
> +// Register SDP_D_PERF_LUT_UFLOW_0
> +#define SDP_D_PERF_LUT_UFLOW_0			_MK_ADDR_CONST(0x90e4)
> +#define SDP_D_PERF_LUT_UFLOW_0_LUT_UFLOW_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_D_PERF_LUT_UFLOW_0_LUT_UFLOW_FIELD			_MK_FIELD_CONST(0xffffffff, SDP_D_PERF_LUT_UFLOW_0_LUT_UFLOW_SHIFT)
> +
> +
> +// Register SDP_D_PERF_LUT_OFLOW_0
> +#define SDP_D_PERF_LUT_OFLOW_0			_MK_ADDR_CONST(0x90e8)
> +#define SDP_D_PERF_LUT_OFLOW_0_LUT_OFLOW_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_D_PERF_LUT_OFLOW_0_LUT_OFLOW_FIELD			_MK_FIELD_CONST(0xffffffff, SDP_D_PERF_LUT_OFLOW_0_LUT_OFLOW_SHIFT)
> +
> +
> +// Register SDP_D_PERF_OUT_SATURATION_0
> +#define SDP_D_PERF_OUT_SATURATION_0			_MK_ADDR_CONST(0x90ec)
> +#define SDP_D_PERF_OUT_SATURATION_0_OUT_SATURATION_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_D_PERF_OUT_SATURATION_0_OUT_SATURATION_FIELD			_MK_FIELD_CONST(0xffffffff, SDP_D_PERF_OUT_SATURATION_0_OUT_SATURATION_SHIFT)
> +
> +
> +// Register SDP_D_PERF_LUT_HYBRID_0
> +#define SDP_D_PERF_LUT_HYBRID_0			_MK_ADDR_CONST(0x90f0)
> +#define SDP_D_PERF_LUT_HYBRID_0_LUT_HYBRID_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_D_PERF_LUT_HYBRID_0_LUT_HYBRID_FIELD			_MK_FIELD_CONST(0xffffffff, SDP_D_PERF_LUT_HYBRID_0_LUT_HYBRID_SHIFT)
> +
> +
> +// Register SDP_D_PERF_LUT_LE_HIT_0
> +#define SDP_D_PERF_LUT_LE_HIT_0			_MK_ADDR_CONST(0x90f4)
> +#define SDP_D_PERF_LUT_LE_HIT_0_LUT_LE_HIT_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_D_PERF_LUT_LE_HIT_0_LUT_LE_HIT_FIELD			_MK_FIELD_CONST(0xffffffff, SDP_D_PERF_LUT_LE_HIT_0_LUT_LE_HIT_SHIFT)
> +
> +
> +// Register SDP_D_PERF_LUT_LO_HIT_0
> +#define SDP_D_PERF_LUT_LO_HIT_0			_MK_ADDR_CONST(0x90f8)
> +#define SDP_D_PERF_LUT_LO_HIT_0_LUT_LO_HIT_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_D_PERF_LUT_LO_HIT_0_LUT_LO_HIT_FIELD			_MK_FIELD_CONST(0xffffffff, SDP_D_PERF_LUT_LO_HIT_0_LUT_LO_HIT_SHIFT)
> +
> +
> +
> +// To satisfy various compilers and platforms,
> +// we let users control the types and syntax of certain constants, using macros.
> +#ifndef _MK_SHIFT_CONST
> +  #define _MK_SHIFT_CONST(_constant_) _constant_
> +#endif
> +#ifndef _MK_MASK_CONST
> +  #define _MK_MASK_CONST(_constant_) _constant_
> +#endif
> +#ifndef _MK_ENUM_CONST
> +  #define _MK_ENUM_CONST(_constant_) (_constant_ ## UL)
> +#endif
> +#ifndef _MK_ADDR_CONST
> +  #define _MK_ADDR_CONST(_constant_) _constant_
> +#endif
> +#ifndef _MK_FIELD_CONST
> +  #define _MK_FIELD_CONST(_mask_, _shift_) (_MK_MASK_CONST(_mask_) << _MK_SHIFT_CONST(_shift_))
> +#endif
> +
> +
> +// Register PDP_RDMA_S_STATUS_0
> +#define PDP_RDMA_S_STATUS_0			_MK_ADDR_CONST(0xa000)
> +#define PDP_RDMA_S_STATUS_0_STATUS_0_SHIFT			_MK_SHIFT_CONST(0)
> +#define PDP_RDMA_S_STATUS_0_STATUS_0_FIELD			_MK_FIELD_CONST(0x3, PDP_RDMA_S_STATUS_0_STATUS_0_SHIFT)
> +#define PDP_RDMA_S_STATUS_0_STATUS_0_IDLE			_MK_ENUM_CONST(0x0)
> +#define PDP_RDMA_S_STATUS_0_STATUS_0_RUNNING			_MK_ENUM_CONST(0x1)
> +#define PDP_RDMA_S_STATUS_0_STATUS_0_PENDING			_MK_ENUM_CONST(0x2)
> +#define PDP_RDMA_S_STATUS_0_STATUS_1_SHIFT			_MK_SHIFT_CONST(16)
> +#define PDP_RDMA_S_STATUS_0_STATUS_1_FIELD			_MK_FIELD_CONST(0x3, PDP_RDMA_S_STATUS_0_STATUS_1_SHIFT)
> +#define PDP_RDMA_S_STATUS_0_STATUS_1_IDLE			_MK_ENUM_CONST(0x0)
> +#define PDP_RDMA_S_STATUS_0_STATUS_1_RUNNING			_MK_ENUM_CONST(0x1)
> +#define PDP_RDMA_S_STATUS_0_STATUS_1_PENDING			_MK_ENUM_CONST(0x2)
> +
> +
> +// Register PDP_RDMA_S_POINTER_0
> +#define PDP_RDMA_S_POINTER_0			_MK_ADDR_CONST(0xa004)
> +#define PDP_RDMA_S_POINTER_0_PRODUCER_SHIFT			_MK_SHIFT_CONST(0)
> +#define PDP_RDMA_S_POINTER_0_PRODUCER_FIELD			_MK_FIELD_CONST(0x1, PDP_RDMA_S_POINTER_0_PRODUCER_SHIFT)
> +#define PDP_RDMA_S_POINTER_0_PRODUCER_GROUP_0			_MK_ENUM_CONST(0x0)
> +#define PDP_RDMA_S_POINTER_0_PRODUCER_GROUP_1			_MK_ENUM_CONST(0x1)
> +#define PDP_RDMA_S_POINTER_0_CONSUMER_SHIFT			_MK_SHIFT_CONST(16)
> +#define PDP_RDMA_S_POINTER_0_CONSUMER_FIELD			_MK_FIELD_CONST(0x1, PDP_RDMA_S_POINTER_0_CONSUMER_SHIFT)
> +#define PDP_RDMA_S_POINTER_0_CONSUMER_GROUP_0			_MK_ENUM_CONST(0x0)
> +#define PDP_RDMA_S_POINTER_0_CONSUMER_GROUP_1			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register PDP_RDMA_D_OP_ENABLE_0
> +#define PDP_RDMA_D_OP_ENABLE_0			_MK_ADDR_CONST(0xa008)
> +#define PDP_RDMA_D_OP_ENABLE_0_OP_EN_SHIFT			_MK_SHIFT_CONST(0)
> +#define PDP_RDMA_D_OP_ENABLE_0_OP_EN_FIELD			_MK_FIELD_CONST(0x1, PDP_RDMA_D_OP_ENABLE_0_OP_EN_SHIFT)
> +#define PDP_RDMA_D_OP_ENABLE_0_OP_EN_DISABLE			_MK_ENUM_CONST(0x0)
> +#define PDP_RDMA_D_OP_ENABLE_0_OP_EN_ENABLE			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register PDP_RDMA_D_DATA_CUBE_IN_WIDTH_0
> +#define PDP_RDMA_D_DATA_CUBE_IN_WIDTH_0			_MK_ADDR_CONST(0xa00c)
> +#define PDP_RDMA_D_DATA_CUBE_IN_WIDTH_0_CUBE_IN_WIDTH_SHIFT			_MK_SHIFT_CONST(0)
> +#define PDP_RDMA_D_DATA_CUBE_IN_WIDTH_0_CUBE_IN_WIDTH_FIELD			_MK_FIELD_CONST(0x1fff, PDP_RDMA_D_DATA_CUBE_IN_WIDTH_0_CUBE_IN_WIDTH_SHIFT)
> +
> +
> +// Register PDP_RDMA_D_DATA_CUBE_IN_HEIGHT_0
> +#define PDP_RDMA_D_DATA_CUBE_IN_HEIGHT_0			_MK_ADDR_CONST(0xa010)
> +#define PDP_RDMA_D_DATA_CUBE_IN_HEIGHT_0_CUBE_IN_HEIGHT_SHIFT			_MK_SHIFT_CONST(0)
> +#define PDP_RDMA_D_DATA_CUBE_IN_HEIGHT_0_CUBE_IN_HEIGHT_FIELD			_MK_FIELD_CONST(0x1fff, PDP_RDMA_D_DATA_CUBE_IN_HEIGHT_0_CUBE_IN_HEIGHT_SHIFT)
> +
> +
> +// Register PDP_RDMA_D_DATA_CUBE_IN_CHANNEL_0
> +#define PDP_RDMA_D_DATA_CUBE_IN_CHANNEL_0			_MK_ADDR_CONST(0xa014)
> +#define PDP_RDMA_D_DATA_CUBE_IN_CHANNEL_0_CUBE_IN_CHANNEL_SHIFT			_MK_SHIFT_CONST(0)
> +#define PDP_RDMA_D_DATA_CUBE_IN_CHANNEL_0_CUBE_IN_CHANNEL_FIELD			_MK_FIELD_CONST(0x1fff, PDP_RDMA_D_DATA_CUBE_IN_CHANNEL_0_CUBE_IN_CHANNEL_SHIFT)
> +
> +
> +// Register PDP_RDMA_D_FLYING_MODE_0
> +#define PDP_RDMA_D_FLYING_MODE_0			_MK_ADDR_CONST(0xa018)
> +#define PDP_RDMA_D_FLYING_MODE_0_FLYING_MODE_SHIFT			_MK_SHIFT_CONST(0)
> +#define PDP_RDMA_D_FLYING_MODE_0_FLYING_MODE_FIELD			_MK_FIELD_CONST(0x1, PDP_RDMA_D_FLYING_MODE_0_FLYING_MODE_SHIFT)
> +#define PDP_RDMA_D_FLYING_MODE_0_FLYING_MODE_ON_FLYING			_MK_ENUM_CONST(0x0)
> +#define PDP_RDMA_D_FLYING_MODE_0_FLYING_MODE_OFF_FLYING			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register PDP_RDMA_D_SRC_BASE_ADDR_LOW_0
> +#define PDP_RDMA_D_SRC_BASE_ADDR_LOW_0			_MK_ADDR_CONST(0xa01c)
> +#define PDP_RDMA_D_SRC_BASE_ADDR_LOW_0_SRC_BASE_ADDR_LOW_SHIFT			_MK_SHIFT_CONST(0)
> +#define PDP_RDMA_D_SRC_BASE_ADDR_LOW_0_SRC_BASE_ADDR_LOW_FIELD			_MK_FIELD_CONST(0xffffffff, PDP_RDMA_D_SRC_BASE_ADDR_LOW_0_SRC_BASE_ADDR_LOW_SHIFT)
> +
> +
> +// Register PDP_RDMA_D_SRC_BASE_ADDR_HIGH_0
> +#define PDP_RDMA_D_SRC_BASE_ADDR_HIGH_0			_MK_ADDR_CONST(0xa020)
> +#define PDP_RDMA_D_SRC_BASE_ADDR_HIGH_0_SRC_BASE_ADDR_HIGH_SHIFT			_MK_SHIFT_CONST(0)
> +#define PDP_RDMA_D_SRC_BASE_ADDR_HIGH_0_SRC_BASE_ADDR_HIGH_FIELD			_MK_FIELD_CONST(0xffffffff, PDP_RDMA_D_SRC_BASE_ADDR_HIGH_0_SRC_BASE_ADDR_HIGH_SHIFT)
> +
> +
> +// Register PDP_RDMA_D_SRC_LINE_STRIDE_0
> +#define PDP_RDMA_D_SRC_LINE_STRIDE_0			_MK_ADDR_CONST(0xa024)
> +#define PDP_RDMA_D_SRC_LINE_STRIDE_0_SRC_LINE_STRIDE_SHIFT			_MK_SHIFT_CONST(0)
> +#define PDP_RDMA_D_SRC_LINE_STRIDE_0_SRC_LINE_STRIDE_FIELD			_MK_FIELD_CONST(0xffffffff, PDP_RDMA_D_SRC_LINE_STRIDE_0_SRC_LINE_STRIDE_SHIFT)
> +
> +
> +// Register PDP_RDMA_D_SRC_SURFACE_STRIDE_0
> +#define PDP_RDMA_D_SRC_SURFACE_STRIDE_0			_MK_ADDR_CONST(0xa028)
> +#define PDP_RDMA_D_SRC_SURFACE_STRIDE_0_SRC_SURFACE_STRIDE_SHIFT			_MK_SHIFT_CONST(0)
> +#define PDP_RDMA_D_SRC_SURFACE_STRIDE_0_SRC_SURFACE_STRIDE_FIELD			_MK_FIELD_CONST(0xffffffff, PDP_RDMA_D_SRC_SURFACE_STRIDE_0_SRC_SURFACE_STRIDE_SHIFT)
> +
> +
> +// Register PDP_RDMA_D_SRC_RAM_CFG_0
> +#define PDP_RDMA_D_SRC_RAM_CFG_0			_MK_ADDR_CONST(0xa02c)
> +#define PDP_RDMA_D_SRC_RAM_CFG_0_SRC_RAM_TYPE_SHIFT			_MK_SHIFT_CONST(0)
> +#define PDP_RDMA_D_SRC_RAM_CFG_0_SRC_RAM_TYPE_FIELD			_MK_FIELD_CONST(0x1, PDP_RDMA_D_SRC_RAM_CFG_0_SRC_RAM_TYPE_SHIFT)
> +#define PDP_RDMA_D_SRC_RAM_CFG_0_SRC_RAM_TYPE_CV			_MK_ENUM_CONST(0x0)
> +#define PDP_RDMA_D_SRC_RAM_CFG_0_SRC_RAM_TYPE_MC			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register PDP_RDMA_D_DATA_FORMAT_0
> +#define PDP_RDMA_D_DATA_FORMAT_0			_MK_ADDR_CONST(0xa030)
> +#define PDP_RDMA_D_DATA_FORMAT_0_INPUT_DATA_SHIFT			_MK_SHIFT_CONST(0)
> +#define PDP_RDMA_D_DATA_FORMAT_0_INPUT_DATA_FIELD			_MK_FIELD_CONST(0x3, PDP_RDMA_D_DATA_FORMAT_0_INPUT_DATA_SHIFT)
> +#define PDP_RDMA_D_DATA_FORMAT_0_INPUT_DATA_INT8			_MK_ENUM_CONST(0x0)
> +#define PDP_RDMA_D_DATA_FORMAT_0_INPUT_DATA_INT16			_MK_ENUM_CONST(0x1)
> +#define PDP_RDMA_D_DATA_FORMAT_0_INPUT_DATA_FP16			_MK_ENUM_CONST(0x2)
> +
> +
> +// Register PDP_RDMA_D_OPERATION_MODE_CFG_0
> +#define PDP_RDMA_D_OPERATION_MODE_CFG_0			_MK_ADDR_CONST(0xa034)
> +#define PDP_RDMA_D_OPERATION_MODE_CFG_0_SPLIT_NUM_SHIFT			_MK_SHIFT_CONST(0)
> +#define PDP_RDMA_D_OPERATION_MODE_CFG_0_SPLIT_NUM_FIELD			_MK_FIELD_CONST(0xff, PDP_RDMA_D_OPERATION_MODE_CFG_0_SPLIT_NUM_SHIFT)
> +
> +
> +// Register PDP_RDMA_D_POOLING_KERNEL_CFG_0
> +#define PDP_RDMA_D_POOLING_KERNEL_CFG_0			_MK_ADDR_CONST(0xa038)
> +#define PDP_RDMA_D_POOLING_KERNEL_CFG_0_KERNEL_WIDTH_SHIFT			_MK_SHIFT_CONST(0)
> +#define PDP_RDMA_D_POOLING_KERNEL_CFG_0_KERNEL_WIDTH_FIELD			_MK_FIELD_CONST(0xf, PDP_RDMA_D_POOLING_KERNEL_CFG_0_KERNEL_WIDTH_SHIFT)
> +#define PDP_RDMA_D_POOLING_KERNEL_CFG_0_KERNEL_WIDTH_KERNEL_WIDTH_1			_MK_ENUM_CONST(0x0)
> +#define PDP_RDMA_D_POOLING_KERNEL_CFG_0_KERNEL_WIDTH_KERNEL_WIDTH_2			_MK_ENUM_CONST(0x1)
> +#define PDP_RDMA_D_POOLING_KERNEL_CFG_0_KERNEL_WIDTH_KERNEL_WIDTH_3			_MK_ENUM_CONST(0x2)
> +#define PDP_RDMA_D_POOLING_KERNEL_CFG_0_KERNEL_WIDTH_KERNEL_WIDTH_4			_MK_ENUM_CONST(0x3)
> +#define PDP_RDMA_D_POOLING_KERNEL_CFG_0_KERNEL_WIDTH_KERNEL_WIDTH_5			_MK_ENUM_CONST(0x4)
> +#define PDP_RDMA_D_POOLING_KERNEL_CFG_0_KERNEL_WIDTH_KERNEL_WIDTH_6			_MK_ENUM_CONST(0x5)
> +#define PDP_RDMA_D_POOLING_KERNEL_CFG_0_KERNEL_WIDTH_KERNEL_WIDTH_7			_MK_ENUM_CONST(0x6)
> +#define PDP_RDMA_D_POOLING_KERNEL_CFG_0_KERNEL_WIDTH_KERNEL_WIDTH_8			_MK_ENUM_CONST(0x7)
> +#define PDP_RDMA_D_POOLING_KERNEL_CFG_0_KERNEL_STRIDE_WIDTH_SHIFT			_MK_SHIFT_CONST(4)
> +#define PDP_RDMA_D_POOLING_KERNEL_CFG_0_KERNEL_STRIDE_WIDTH_FIELD			_MK_FIELD_CONST(0xf, PDP_RDMA_D_POOLING_KERNEL_CFG_0_KERNEL_STRIDE_WIDTH_SHIFT)
> +
> +
> +// Register PDP_RDMA_D_POOLING_PADDING_CFG_0
> +#define PDP_RDMA_D_POOLING_PADDING_CFG_0			_MK_ADDR_CONST(0xa03c)
> +#define PDP_RDMA_D_POOLING_PADDING_CFG_0_PAD_WIDTH_SHIFT			_MK_SHIFT_CONST(0)
> +#define PDP_RDMA_D_POOLING_PADDING_CFG_0_PAD_WIDTH_FIELD			_MK_FIELD_CONST(0xf, PDP_RDMA_D_POOLING_PADDING_CFG_0_PAD_WIDTH_SHIFT)
> +
> +
> +// Register PDP_RDMA_D_PARTIAL_WIDTH_IN_0
> +#define PDP_RDMA_D_PARTIAL_WIDTH_IN_0			_MK_ADDR_CONST(0xa040)
> +#define PDP_RDMA_D_PARTIAL_WIDTH_IN_0_PARTIAL_WIDTH_IN_FIRST_SHIFT			_MK_SHIFT_CONST(0)
> +#define PDP_RDMA_D_PARTIAL_WIDTH_IN_0_PARTIAL_WIDTH_IN_FIRST_FIELD			_MK_FIELD_CONST(0x3ff, PDP_RDMA_D_PARTIAL_WIDTH_IN_0_PARTIAL_WIDTH_IN_FIRST_SHIFT)
> +#define PDP_RDMA_D_PARTIAL_WIDTH_IN_0_PARTIAL_WIDTH_IN_LAST_SHIFT			_MK_SHIFT_CONST(10)
> +#define PDP_RDMA_D_PARTIAL_WIDTH_IN_0_PARTIAL_WIDTH_IN_LAST_FIELD			_MK_FIELD_CONST(0x3ff, PDP_RDMA_D_PARTIAL_WIDTH_IN_0_PARTIAL_WIDTH_IN_LAST_SHIFT)
> +#define PDP_RDMA_D_PARTIAL_WIDTH_IN_0_PARTIAL_WIDTH_IN_MID_SHIFT			_MK_SHIFT_CONST(20)
> +#define PDP_RDMA_D_PARTIAL_WIDTH_IN_0_PARTIAL_WIDTH_IN_MID_FIELD			_MK_FIELD_CONST(0x3ff, PDP_RDMA_D_PARTIAL_WIDTH_IN_0_PARTIAL_WIDTH_IN_MID_SHIFT)
> +
> +
> +// Register PDP_RDMA_D_PERF_ENABLE_0
> +#define PDP_RDMA_D_PERF_ENABLE_0			_MK_ADDR_CONST(0xa044)
> +#define PDP_RDMA_D_PERF_ENABLE_0_DMA_EN_SHIFT			_MK_SHIFT_CONST(0)
> +#define PDP_RDMA_D_PERF_ENABLE_0_DMA_EN_FIELD			_MK_FIELD_CONST(0x1, PDP_RDMA_D_PERF_ENABLE_0_DMA_EN_SHIFT)
> +#define PDP_RDMA_D_PERF_ENABLE_0_DMA_EN_DISABLE			_MK_ENUM_CONST(0x0)
> +#define PDP_RDMA_D_PERF_ENABLE_0_DMA_EN_ENABLE			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register PDP_RDMA_D_PERF_READ_STALL_0
> +#define PDP_RDMA_D_PERF_READ_STALL_0			_MK_ADDR_CONST(0xa048)
> +#define PDP_RDMA_D_PERF_READ_STALL_0_PERF_READ_STALL_SHIFT			_MK_SHIFT_CONST(0)
> +#define PDP_RDMA_D_PERF_READ_STALL_0_PERF_READ_STALL_FIELD			_MK_FIELD_CONST(0xffffffff, PDP_RDMA_D_PERF_READ_STALL_0_PERF_READ_STALL_SHIFT)
> +
> +
> +// Register PDP_RDMA_D_CYA_0
> +#define PDP_RDMA_D_CYA_0			_MK_ADDR_CONST(0xa04c)
> +#define PDP_RDMA_D_CYA_0_CYA_SHIFT			_MK_SHIFT_CONST(0)
> +#define PDP_RDMA_D_CYA_0_CYA_FIELD			_MK_FIELD_CONST(0xffffffff, PDP_RDMA_D_CYA_0_CYA_SHIFT)
> +
> +
> +
> +// To satisfy various compilers and platforms,
> +// we let users control the types and syntax of certain constants, using macros.
> +#ifndef _MK_SHIFT_CONST
> +  #define _MK_SHIFT_CONST(_constant_) _constant_
> +#endif
> +#ifndef _MK_MASK_CONST
> +  #define _MK_MASK_CONST(_constant_) _constant_
> +#endif
> +#ifndef _MK_ENUM_CONST
> +  #define _MK_ENUM_CONST(_constant_) (_constant_ ## UL)
> +#endif
> +#ifndef _MK_ADDR_CONST
> +  #define _MK_ADDR_CONST(_constant_) _constant_
> +#endif
> +#ifndef _MK_FIELD_CONST
> +  #define _MK_FIELD_CONST(_mask_, _shift_) (_MK_MASK_CONST(_mask_) << _MK_SHIFT_CONST(_shift_))
> +#endif
> +
> +
> +// Register PDP_S_STATUS_0
> +#define PDP_S_STATUS_0			_MK_ADDR_CONST(0xb000)
> +#define PDP_S_STATUS_0_STATUS_0_SHIFT			_MK_SHIFT_CONST(0)
> +#define PDP_S_STATUS_0_STATUS_0_FIELD			_MK_FIELD_CONST(0x3, PDP_S_STATUS_0_STATUS_0_SHIFT)
> +#define PDP_S_STATUS_0_STATUS_0_IDLE			_MK_ENUM_CONST(0x0)
> +#define PDP_S_STATUS_0_STATUS_0_RUNNING			_MK_ENUM_CONST(0x1)
> +#define PDP_S_STATUS_0_STATUS_0_PENDING			_MK_ENUM_CONST(0x2)
> +#define PDP_S_STATUS_0_STATUS_1_SHIFT			_MK_SHIFT_CONST(16)
> +#define PDP_S_STATUS_0_STATUS_1_FIELD			_MK_FIELD_CONST(0x3, PDP_S_STATUS_0_STATUS_1_SHIFT)
> +#define PDP_S_STATUS_0_STATUS_1_IDLE			_MK_ENUM_CONST(0x0)
> +#define PDP_S_STATUS_0_STATUS_1_RUNNING			_MK_ENUM_CONST(0x1)
> +#define PDP_S_STATUS_0_STATUS_1_PENDING			_MK_ENUM_CONST(0x2)
> +
> +
> +// Register PDP_S_POINTER_0
> +#define PDP_S_POINTER_0			_MK_ADDR_CONST(0xb004)
> +#define PDP_S_POINTER_0_PRODUCER_SHIFT			_MK_SHIFT_CONST(0)
> +#define PDP_S_POINTER_0_PRODUCER_FIELD			_MK_FIELD_CONST(0x1, PDP_S_POINTER_0_PRODUCER_SHIFT)
> +#define PDP_S_POINTER_0_PRODUCER_GROUP_0			_MK_ENUM_CONST(0x0)
> +#define PDP_S_POINTER_0_PRODUCER_GROUP_1			_MK_ENUM_CONST(0x1)
> +#define PDP_S_POINTER_0_CONSUMER_SHIFT			_MK_SHIFT_CONST(16)
> +#define PDP_S_POINTER_0_CONSUMER_FIELD			_MK_FIELD_CONST(0x1, PDP_S_POINTER_0_CONSUMER_SHIFT)
> +#define PDP_S_POINTER_0_CONSUMER_GROUP_0			_MK_ENUM_CONST(0x0)
> +#define PDP_S_POINTER_0_CONSUMER_GROUP_1			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register PDP_D_OP_ENABLE_0
> +#define PDP_D_OP_ENABLE_0			_MK_ADDR_CONST(0xb008)
> +#define PDP_D_OP_ENABLE_0_OP_EN_SHIFT			_MK_SHIFT_CONST(0)
> +#define PDP_D_OP_ENABLE_0_OP_EN_FIELD			_MK_FIELD_CONST(0x1, PDP_D_OP_ENABLE_0_OP_EN_SHIFT)
> +#define PDP_D_OP_ENABLE_0_OP_EN_DISABLE			_MK_ENUM_CONST(0x0)
> +#define PDP_D_OP_ENABLE_0_OP_EN_ENABLE			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register PDP_D_DATA_CUBE_IN_WIDTH_0
> +#define PDP_D_DATA_CUBE_IN_WIDTH_0			_MK_ADDR_CONST(0xb00c)
> +#define PDP_D_DATA_CUBE_IN_WIDTH_0_CUBE_IN_WIDTH_SHIFT			_MK_SHIFT_CONST(0)
> +#define PDP_D_DATA_CUBE_IN_WIDTH_0_CUBE_IN_WIDTH_FIELD			_MK_FIELD_CONST(0x1fff, PDP_D_DATA_CUBE_IN_WIDTH_0_CUBE_IN_WIDTH_SHIFT)
> +
> +
> +// Register PDP_D_DATA_CUBE_IN_HEIGHT_0
> +#define PDP_D_DATA_CUBE_IN_HEIGHT_0			_MK_ADDR_CONST(0xb010)
> +#define PDP_D_DATA_CUBE_IN_HEIGHT_0_CUBE_IN_HEIGHT_SHIFT			_MK_SHIFT_CONST(0)
> +#define PDP_D_DATA_CUBE_IN_HEIGHT_0_CUBE_IN_HEIGHT_FIELD			_MK_FIELD_CONST(0x1fff, PDP_D_DATA_CUBE_IN_HEIGHT_0_CUBE_IN_HEIGHT_SHIFT)
> +
> +
> +// Register PDP_D_DATA_CUBE_IN_CHANNEL_0
> +#define PDP_D_DATA_CUBE_IN_CHANNEL_0			_MK_ADDR_CONST(0xb014)
> +#define PDP_D_DATA_CUBE_IN_CHANNEL_0_CUBE_IN_CHANNEL_SHIFT			_MK_SHIFT_CONST(0)
> +#define PDP_D_DATA_CUBE_IN_CHANNEL_0_CUBE_IN_CHANNEL_FIELD			_MK_FIELD_CONST(0x1fff, PDP_D_DATA_CUBE_IN_CHANNEL_0_CUBE_IN_CHANNEL_SHIFT)
> +
> +
> +// Register PDP_D_DATA_CUBE_OUT_WIDTH_0
> +#define PDP_D_DATA_CUBE_OUT_WIDTH_0			_MK_ADDR_CONST(0xb018)
> +#define PDP_D_DATA_CUBE_OUT_WIDTH_0_CUBE_OUT_WIDTH_SHIFT			_MK_SHIFT_CONST(0)
> +#define PDP_D_DATA_CUBE_OUT_WIDTH_0_CUBE_OUT_WIDTH_FIELD			_MK_FIELD_CONST(0x1fff, PDP_D_DATA_CUBE_OUT_WIDTH_0_CUBE_OUT_WIDTH_SHIFT)
> +
> +
> +// Register PDP_D_DATA_CUBE_OUT_HEIGHT_0
> +#define PDP_D_DATA_CUBE_OUT_HEIGHT_0			_MK_ADDR_CONST(0xb01c)
> +#define PDP_D_DATA_CUBE_OUT_HEIGHT_0_CUBE_OUT_HEIGHT_SHIFT			_MK_SHIFT_CONST(0)
> +#define PDP_D_DATA_CUBE_OUT_HEIGHT_0_CUBE_OUT_HEIGHT_FIELD			_MK_FIELD_CONST(0x1fff, PDP_D_DATA_CUBE_OUT_HEIGHT_0_CUBE_OUT_HEIGHT_SHIFT)
> +
> +
> +// Register PDP_D_DATA_CUBE_OUT_CHANNEL_0
> +#define PDP_D_DATA_CUBE_OUT_CHANNEL_0			_MK_ADDR_CONST(0xb020)
> +#define PDP_D_DATA_CUBE_OUT_CHANNEL_0_CUBE_OUT_CHANNEL_SHIFT			_MK_SHIFT_CONST(0)
> +#define PDP_D_DATA_CUBE_OUT_CHANNEL_0_CUBE_OUT_CHANNEL_FIELD			_MK_FIELD_CONST(0x1fff, PDP_D_DATA_CUBE_OUT_CHANNEL_0_CUBE_OUT_CHANNEL_SHIFT)
> +
> +
> +// Register PDP_D_OPERATION_MODE_CFG_0
> +#define PDP_D_OPERATION_MODE_CFG_0			_MK_ADDR_CONST(0xb024)
> +#define PDP_D_OPERATION_MODE_CFG_0_POOLING_METHOD_SHIFT			_MK_SHIFT_CONST(0)
> +#define PDP_D_OPERATION_MODE_CFG_0_POOLING_METHOD_FIELD			_MK_FIELD_CONST(0x3, PDP_D_OPERATION_MODE_CFG_0_POOLING_METHOD_SHIFT)
> +#define PDP_D_OPERATION_MODE_CFG_0_POOLING_METHOD_POOLING_METHOD_AVERAGE			_MK_ENUM_CONST(0x0)
> +#define PDP_D_OPERATION_MODE_CFG_0_POOLING_METHOD_POOLING_METHOD_MAX			_MK_ENUM_CONST(0x1)
> +#define PDP_D_OPERATION_MODE_CFG_0_POOLING_METHOD_POOLING_METHOD_MIN			_MK_ENUM_CONST(0x2)
> +#define PDP_D_OPERATION_MODE_CFG_0_FLYING_MODE_SHIFT			_MK_SHIFT_CONST(4)
> +#define PDP_D_OPERATION_MODE_CFG_0_FLYING_MODE_FIELD			_MK_FIELD_CONST(0x1, PDP_D_OPERATION_MODE_CFG_0_FLYING_MODE_SHIFT)
> +#define PDP_D_OPERATION_MODE_CFG_0_FLYING_MODE_ON_FLYING			_MK_ENUM_CONST(0x0)
> +#define PDP_D_OPERATION_MODE_CFG_0_FLYING_MODE_OFF_FLYING			_MK_ENUM_CONST(0x1)
> +#define PDP_D_OPERATION_MODE_CFG_0_SPLIT_NUM_SHIFT			_MK_SHIFT_CONST(8)
> +#define PDP_D_OPERATION_MODE_CFG_0_SPLIT_NUM_FIELD			_MK_FIELD_CONST(0xff, PDP_D_OPERATION_MODE_CFG_0_SPLIT_NUM_SHIFT)
> +
> +
> +// Register PDP_D_NAN_FLUSH_TO_ZERO_0
> +#define PDP_D_NAN_FLUSH_TO_ZERO_0			_MK_ADDR_CONST(0xb028)
> +#define PDP_D_NAN_FLUSH_TO_ZERO_0_NAN_TO_ZERO_SHIFT			_MK_SHIFT_CONST(0)
> +#define PDP_D_NAN_FLUSH_TO_ZERO_0_NAN_TO_ZERO_FIELD			_MK_FIELD_CONST(0x1, PDP_D_NAN_FLUSH_TO_ZERO_0_NAN_TO_ZERO_SHIFT)
> +#define PDP_D_NAN_FLUSH_TO_ZERO_0_NAN_TO_ZERO_DISABLE			_MK_ENUM_CONST(0x0)
> +#define PDP_D_NAN_FLUSH_TO_ZERO_0_NAN_TO_ZERO_ENABLE			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register PDP_D_PARTIAL_WIDTH_IN_0
> +#define PDP_D_PARTIAL_WIDTH_IN_0			_MK_ADDR_CONST(0xb02c)
> +#define PDP_D_PARTIAL_WIDTH_IN_0_PARTIAL_WIDTH_IN_FIRST_SHIFT			_MK_SHIFT_CONST(0)
> +#define PDP_D_PARTIAL_WIDTH_IN_0_PARTIAL_WIDTH_IN_FIRST_FIELD			_MK_FIELD_CONST(0x3ff, PDP_D_PARTIAL_WIDTH_IN_0_PARTIAL_WIDTH_IN_FIRST_SHIFT)
> +#define PDP_D_PARTIAL_WIDTH_IN_0_PARTIAL_WIDTH_IN_LAST_SHIFT			_MK_SHIFT_CONST(10)
> +#define PDP_D_PARTIAL_WIDTH_IN_0_PARTIAL_WIDTH_IN_LAST_FIELD			_MK_FIELD_CONST(0x3ff, PDP_D_PARTIAL_WIDTH_IN_0_PARTIAL_WIDTH_IN_LAST_SHIFT)
> +#define PDP_D_PARTIAL_WIDTH_IN_0_PARTIAL_WIDTH_IN_MID_SHIFT			_MK_SHIFT_CONST(20)
> +#define PDP_D_PARTIAL_WIDTH_IN_0_PARTIAL_WIDTH_IN_MID_FIELD			_MK_FIELD_CONST(0x3ff, PDP_D_PARTIAL_WIDTH_IN_0_PARTIAL_WIDTH_IN_MID_SHIFT)
> +
> +
> +// Register PDP_D_PARTIAL_WIDTH_OUT_0
> +#define PDP_D_PARTIAL_WIDTH_OUT_0			_MK_ADDR_CONST(0xb030)
> +#define PDP_D_PARTIAL_WIDTH_OUT_0_PARTIAL_WIDTH_OUT_FIRST_SHIFT			_MK_SHIFT_CONST(0)
> +#define PDP_D_PARTIAL_WIDTH_OUT_0_PARTIAL_WIDTH_OUT_FIRST_FIELD			_MK_FIELD_CONST(0x3ff, PDP_D_PARTIAL_WIDTH_OUT_0_PARTIAL_WIDTH_OUT_FIRST_SHIFT)
> +#define PDP_D_PARTIAL_WIDTH_OUT_0_PARTIAL_WIDTH_OUT_LAST_SHIFT			_MK_SHIFT_CONST(10)
> +#define PDP_D_PARTIAL_WIDTH_OUT_0_PARTIAL_WIDTH_OUT_LAST_FIELD			_MK_FIELD_CONST(0x3ff, PDP_D_PARTIAL_WIDTH_OUT_0_PARTIAL_WIDTH_OUT_LAST_SHIFT)
> +#define PDP_D_PARTIAL_WIDTH_OUT_0_PARTIAL_WIDTH_OUT_MID_SHIFT			_MK_SHIFT_CONST(20)
> +#define PDP_D_PARTIAL_WIDTH_OUT_0_PARTIAL_WIDTH_OUT_MID_FIELD			_MK_FIELD_CONST(0x3ff, PDP_D_PARTIAL_WIDTH_OUT_0_PARTIAL_WIDTH_OUT_MID_SHIFT)
> +
> +
> +// Register PDP_D_POOLING_KERNEL_CFG_0
> +#define PDP_D_POOLING_KERNEL_CFG_0			_MK_ADDR_CONST(0xb034)
> +#define PDP_D_POOLING_KERNEL_CFG_0_KERNEL_WIDTH_SHIFT			_MK_SHIFT_CONST(0)
> +#define PDP_D_POOLING_KERNEL_CFG_0_KERNEL_WIDTH_FIELD			_MK_FIELD_CONST(0xf, PDP_D_POOLING_KERNEL_CFG_0_KERNEL_WIDTH_SHIFT)
> +#define PDP_D_POOLING_KERNEL_CFG_0_KERNEL_WIDTH_KERNEL_WIDTH_1			_MK_ENUM_CONST(0x0)
> +#define PDP_D_POOLING_KERNEL_CFG_0_KERNEL_WIDTH_KERNEL_WIDTH_2			_MK_ENUM_CONST(0x1)
> +#define PDP_D_POOLING_KERNEL_CFG_0_KERNEL_WIDTH_KERNEL_WIDTH_3			_MK_ENUM_CONST(0x2)
> +#define PDP_D_POOLING_KERNEL_CFG_0_KERNEL_WIDTH_KERNEL_WIDTH_4			_MK_ENUM_CONST(0x3)
> +#define PDP_D_POOLING_KERNEL_CFG_0_KERNEL_WIDTH_KERNEL_WIDTH_5			_MK_ENUM_CONST(0x4)
> +#define PDP_D_POOLING_KERNEL_CFG_0_KERNEL_WIDTH_KERNEL_WIDTH_6			_MK_ENUM_CONST(0x5)
> +#define PDP_D_POOLING_KERNEL_CFG_0_KERNEL_WIDTH_KERNEL_WIDTH_7			_MK_ENUM_CONST(0x6)
> +#define PDP_D_POOLING_KERNEL_CFG_0_KERNEL_WIDTH_KERNEL_WIDTH_8			_MK_ENUM_CONST(0x7)
> +#define PDP_D_POOLING_KERNEL_CFG_0_KERNEL_HEIGHT_SHIFT			_MK_SHIFT_CONST(8)
> +#define PDP_D_POOLING_KERNEL_CFG_0_KERNEL_HEIGHT_FIELD			_MK_FIELD_CONST(0xf, PDP_D_POOLING_KERNEL_CFG_0_KERNEL_HEIGHT_SHIFT)
> +#define PDP_D_POOLING_KERNEL_CFG_0_KERNEL_HEIGHT_KERNEL_HEIGHT_1			_MK_ENUM_CONST(0x0)
> +#define PDP_D_POOLING_KERNEL_CFG_0_KERNEL_HEIGHT_KERNEL_HEIGHT_2			_MK_ENUM_CONST(0x1)
> +#define PDP_D_POOLING_KERNEL_CFG_0_KERNEL_HEIGHT_KERNEL_HEIGHT_3			_MK_ENUM_CONST(0x2)
> +#define PDP_D_POOLING_KERNEL_CFG_0_KERNEL_HEIGHT_KERNEL_HEIGHT_4			_MK_ENUM_CONST(0x3)
> +#define PDP_D_POOLING_KERNEL_CFG_0_KERNEL_HEIGHT_KERNEL_HEIGHT_5			_MK_ENUM_CONST(0x4)
> +#define PDP_D_POOLING_KERNEL_CFG_0_KERNEL_HEIGHT_KERNEL_HEIGHT_6			_MK_ENUM_CONST(0x5)
> +#define PDP_D_POOLING_KERNEL_CFG_0_KERNEL_HEIGHT_KERNEL_HEIGHT_7			_MK_ENUM_CONST(0x6)
> +#define PDP_D_POOLING_KERNEL_CFG_0_KERNEL_HEIGHT_KERNEL_HEIGHT_8			_MK_ENUM_CONST(0x7)
> +#define PDP_D_POOLING_KERNEL_CFG_0_KERNEL_STRIDE_WIDTH_SHIFT			_MK_SHIFT_CONST(16)
> +#define PDP_D_POOLING_KERNEL_CFG_0_KERNEL_STRIDE_WIDTH_FIELD			_MK_FIELD_CONST(0xf, PDP_D_POOLING_KERNEL_CFG_0_KERNEL_STRIDE_WIDTH_SHIFT)
> +#define PDP_D_POOLING_KERNEL_CFG_0_KERNEL_STRIDE_HEIGHT_SHIFT			_MK_SHIFT_CONST(20)
> +#define PDP_D_POOLING_KERNEL_CFG_0_KERNEL_STRIDE_HEIGHT_FIELD			_MK_FIELD_CONST(0xf, PDP_D_POOLING_KERNEL_CFG_0_KERNEL_STRIDE_HEIGHT_SHIFT)
> +
> +
> +// Register PDP_D_RECIP_KERNEL_WIDTH_0
> +#define PDP_D_RECIP_KERNEL_WIDTH_0			_MK_ADDR_CONST(0xb038)
> +#define PDP_D_RECIP_KERNEL_WIDTH_0_RECIP_KERNEL_WIDTH_SHIFT			_MK_SHIFT_CONST(0)
> +#define PDP_D_RECIP_KERNEL_WIDTH_0_RECIP_KERNEL_WIDTH_FIELD			_MK_FIELD_CONST(0x1ffff, PDP_D_RECIP_KERNEL_WIDTH_0_RECIP_KERNEL_WIDTH_SHIFT)
> +
> +
> +// Register PDP_D_RECIP_KERNEL_HEIGHT_0
> +#define PDP_D_RECIP_KERNEL_HEIGHT_0			_MK_ADDR_CONST(0xb03c)
> +#define PDP_D_RECIP_KERNEL_HEIGHT_0_RECIP_KERNEL_HEIGHT_SHIFT			_MK_SHIFT_CONST(0)
> +#define PDP_D_RECIP_KERNEL_HEIGHT_0_RECIP_KERNEL_HEIGHT_FIELD			_MK_FIELD_CONST(0x1ffff, PDP_D_RECIP_KERNEL_HEIGHT_0_RECIP_KERNEL_HEIGHT_SHIFT)
> +
> +
> +// Register PDP_D_POOLING_PADDING_CFG_0
> +#define PDP_D_POOLING_PADDING_CFG_0			_MK_ADDR_CONST(0xb040)
> +#define PDP_D_POOLING_PADDING_CFG_0_PAD_LEFT_SHIFT			_MK_SHIFT_CONST(0)
> +#define PDP_D_POOLING_PADDING_CFG_0_PAD_LEFT_FIELD			_MK_FIELD_CONST(0x7, PDP_D_POOLING_PADDING_CFG_0_PAD_LEFT_SHIFT)
> +#define PDP_D_POOLING_PADDING_CFG_0_PAD_TOP_SHIFT			_MK_SHIFT_CONST(4)
> +#define PDP_D_POOLING_PADDING_CFG_0_PAD_TOP_FIELD			_MK_FIELD_CONST(0x7, PDP_D_POOLING_PADDING_CFG_0_PAD_TOP_SHIFT)
> +#define PDP_D_POOLING_PADDING_CFG_0_PAD_RIGHT_SHIFT			_MK_SHIFT_CONST(8)
> +#define PDP_D_POOLING_PADDING_CFG_0_PAD_RIGHT_FIELD			_MK_FIELD_CONST(0x7, PDP_D_POOLING_PADDING_CFG_0_PAD_RIGHT_SHIFT)
> +#define PDP_D_POOLING_PADDING_CFG_0_PAD_BOTTOM_SHIFT			_MK_SHIFT_CONST(12)
> +#define PDP_D_POOLING_PADDING_CFG_0_PAD_BOTTOM_FIELD			_MK_FIELD_CONST(0x7, PDP_D_POOLING_PADDING_CFG_0_PAD_BOTTOM_SHIFT)
> +
> +
> +// Register PDP_D_POOLING_PADDING_VALUE_1_CFG_0
> +#define PDP_D_POOLING_PADDING_VALUE_1_CFG_0			_MK_ADDR_CONST(0xb044)
> +#define PDP_D_POOLING_PADDING_VALUE_1_CFG_0_PAD_VALUE_1X_SHIFT			_MK_SHIFT_CONST(0)
> +#define PDP_D_POOLING_PADDING_VALUE_1_CFG_0_PAD_VALUE_1X_FIELD			_MK_FIELD_CONST(0x7ffff, PDP_D_POOLING_PADDING_VALUE_1_CFG_0_PAD_VALUE_1X_SHIFT)
> +
> +
> +// Register PDP_D_POOLING_PADDING_VALUE_2_CFG_0
> +#define PDP_D_POOLING_PADDING_VALUE_2_CFG_0			_MK_ADDR_CONST(0xb048)
> +#define PDP_D_POOLING_PADDING_VALUE_2_CFG_0_PAD_VALUE_2X_SHIFT			_MK_SHIFT_CONST(0)
> +#define PDP_D_POOLING_PADDING_VALUE_2_CFG_0_PAD_VALUE_2X_FIELD			_MK_FIELD_CONST(0x7ffff, PDP_D_POOLING_PADDING_VALUE_2_CFG_0_PAD_VALUE_2X_SHIFT)
> +
> +
> +// Register PDP_D_POOLING_PADDING_VALUE_3_CFG_0
> +#define PDP_D_POOLING_PADDING_VALUE_3_CFG_0			_MK_ADDR_CONST(0xb04c)
> +#define PDP_D_POOLING_PADDING_VALUE_3_CFG_0_PAD_VALUE_3X_SHIFT			_MK_SHIFT_CONST(0)
> +#define PDP_D_POOLING_PADDING_VALUE_3_CFG_0_PAD_VALUE_3X_FIELD			_MK_FIELD_CONST(0x7ffff, PDP_D_POOLING_PADDING_VALUE_3_CFG_0_PAD_VALUE_3X_SHIFT)
> +
> +
> +// Register PDP_D_POOLING_PADDING_VALUE_4_CFG_0
> +#define PDP_D_POOLING_PADDING_VALUE_4_CFG_0			_MK_ADDR_CONST(0xb050)
> +#define PDP_D_POOLING_PADDING_VALUE_4_CFG_0_PAD_VALUE_4X_SHIFT			_MK_SHIFT_CONST(0)
> +#define PDP_D_POOLING_PADDING_VALUE_4_CFG_0_PAD_VALUE_4X_FIELD			_MK_FIELD_CONST(0x7ffff, PDP_D_POOLING_PADDING_VALUE_4_CFG_0_PAD_VALUE_4X_SHIFT)
> +
> +
> +// Register PDP_D_POOLING_PADDING_VALUE_5_CFG_0
> +#define PDP_D_POOLING_PADDING_VALUE_5_CFG_0			_MK_ADDR_CONST(0xb054)
> +#define PDP_D_POOLING_PADDING_VALUE_5_CFG_0_PAD_VALUE_5X_SHIFT			_MK_SHIFT_CONST(0)
> +#define PDP_D_POOLING_PADDING_VALUE_5_CFG_0_PAD_VALUE_5X_FIELD			_MK_FIELD_CONST(0x7ffff, PDP_D_POOLING_PADDING_VALUE_5_CFG_0_PAD_VALUE_5X_SHIFT)
> +
> +
> +// Register PDP_D_POOLING_PADDING_VALUE_6_CFG_0
> +#define PDP_D_POOLING_PADDING_VALUE_6_CFG_0			_MK_ADDR_CONST(0xb058)
> +#define PDP_D_POOLING_PADDING_VALUE_6_CFG_0_PAD_VALUE_6X_SHIFT			_MK_SHIFT_CONST(0)
> +#define PDP_D_POOLING_PADDING_VALUE_6_CFG_0_PAD_VALUE_6X_FIELD			_MK_FIELD_CONST(0x7ffff, PDP_D_POOLING_PADDING_VALUE_6_CFG_0_PAD_VALUE_6X_SHIFT)
> +
> +
> +// Register PDP_D_POOLING_PADDING_VALUE_7_CFG_0
> +#define PDP_D_POOLING_PADDING_VALUE_7_CFG_0			_MK_ADDR_CONST(0xb05c)
> +#define PDP_D_POOLING_PADDING_VALUE_7_CFG_0_PAD_VALUE_7X_SHIFT			_MK_SHIFT_CONST(0)
> +#define PDP_D_POOLING_PADDING_VALUE_7_CFG_0_PAD_VALUE_7X_FIELD			_MK_FIELD_CONST(0x7ffff, PDP_D_POOLING_PADDING_VALUE_7_CFG_0_PAD_VALUE_7X_SHIFT)
> +
> +
> +// Register PDP_D_SRC_BASE_ADDR_LOW_0
> +#define PDP_D_SRC_BASE_ADDR_LOW_0			_MK_ADDR_CONST(0xb060)
> +#define PDP_D_SRC_BASE_ADDR_LOW_0_SRC_BASE_ADDR_LOW_SHIFT			_MK_SHIFT_CONST(0)
> +#define PDP_D_SRC_BASE_ADDR_LOW_0_SRC_BASE_ADDR_LOW_FIELD			_MK_FIELD_CONST(0xffffffff, PDP_D_SRC_BASE_ADDR_LOW_0_SRC_BASE_ADDR_LOW_SHIFT)
> +
> +
> +// Register PDP_D_SRC_BASE_ADDR_HIGH_0
> +#define PDP_D_SRC_BASE_ADDR_HIGH_0			_MK_ADDR_CONST(0xb064)
> +#define PDP_D_SRC_BASE_ADDR_HIGH_0_SRC_BASE_ADDR_HIGH_SHIFT			_MK_SHIFT_CONST(0)
> +#define PDP_D_SRC_BASE_ADDR_HIGH_0_SRC_BASE_ADDR_HIGH_FIELD			_MK_FIELD_CONST(0xffffffff, PDP_D_SRC_BASE_ADDR_HIGH_0_SRC_BASE_ADDR_HIGH_SHIFT)
> +
> +
> +// Register PDP_D_SRC_LINE_STRIDE_0
> +#define PDP_D_SRC_LINE_STRIDE_0			_MK_ADDR_CONST(0xb068)
> +#define PDP_D_SRC_LINE_STRIDE_0_SRC_LINE_STRIDE_SHIFT			_MK_SHIFT_CONST(0)
> +#define PDP_D_SRC_LINE_STRIDE_0_SRC_LINE_STRIDE_FIELD			_MK_FIELD_CONST(0xffffffff, PDP_D_SRC_LINE_STRIDE_0_SRC_LINE_STRIDE_SHIFT)
> +
> +
> +// Register PDP_D_SRC_SURFACE_STRIDE_0
> +#define PDP_D_SRC_SURFACE_STRIDE_0			_MK_ADDR_CONST(0xb06c)
> +#define PDP_D_SRC_SURFACE_STRIDE_0_SRC_SURFACE_STRIDE_SHIFT			_MK_SHIFT_CONST(0)
> +#define PDP_D_SRC_SURFACE_STRIDE_0_SRC_SURFACE_STRIDE_FIELD			_MK_FIELD_CONST(0xffffffff, PDP_D_SRC_SURFACE_STRIDE_0_SRC_SURFACE_STRIDE_SHIFT)
> +
> +
> +// Register PDP_D_DST_BASE_ADDR_LOW_0
> +#define PDP_D_DST_BASE_ADDR_LOW_0			_MK_ADDR_CONST(0xb070)
> +#define PDP_D_DST_BASE_ADDR_LOW_0_DST_BASE_ADDR_LOW_SHIFT			_MK_SHIFT_CONST(0)
> +#define PDP_D_DST_BASE_ADDR_LOW_0_DST_BASE_ADDR_LOW_FIELD			_MK_FIELD_CONST(0xffffffff, PDP_D_DST_BASE_ADDR_LOW_0_DST_BASE_ADDR_LOW_SHIFT)
> +
> +
> +// Register PDP_D_DST_BASE_ADDR_HIGH_0
> +#define PDP_D_DST_BASE_ADDR_HIGH_0			_MK_ADDR_CONST(0xb074)
> +#define PDP_D_DST_BASE_ADDR_HIGH_0_DST_BASE_ADDR_HIGH_SHIFT			_MK_SHIFT_CONST(0)
> +#define PDP_D_DST_BASE_ADDR_HIGH_0_DST_BASE_ADDR_HIGH_FIELD			_MK_FIELD_CONST(0xffffffff, PDP_D_DST_BASE_ADDR_HIGH_0_DST_BASE_ADDR_HIGH_SHIFT)
> +
> +
> +// Register PDP_D_DST_LINE_STRIDE_0
> +#define PDP_D_DST_LINE_STRIDE_0			_MK_ADDR_CONST(0xb078)
> +#define PDP_D_DST_LINE_STRIDE_0_DST_LINE_STRIDE_SHIFT			_MK_SHIFT_CONST(0)
> +#define PDP_D_DST_LINE_STRIDE_0_DST_LINE_STRIDE_FIELD			_MK_FIELD_CONST(0xffffffff, PDP_D_DST_LINE_STRIDE_0_DST_LINE_STRIDE_SHIFT)
> +
> +
> +// Register PDP_D_DST_SURFACE_STRIDE_0
> +#define PDP_D_DST_SURFACE_STRIDE_0			_MK_ADDR_CONST(0xb07c)
> +#define PDP_D_DST_SURFACE_STRIDE_0_DST_SURFACE_STRIDE_SHIFT			_MK_SHIFT_CONST(0)
> +#define PDP_D_DST_SURFACE_STRIDE_0_DST_SURFACE_STRIDE_FIELD			_MK_FIELD_CONST(0xffffffff, PDP_D_DST_SURFACE_STRIDE_0_DST_SURFACE_STRIDE_SHIFT)
> +
> +
> +// Register PDP_D_DST_RAM_CFG_0
> +#define PDP_D_DST_RAM_CFG_0			_MK_ADDR_CONST(0xb080)
> +#define PDP_D_DST_RAM_CFG_0_DST_RAM_TYPE_SHIFT			_MK_SHIFT_CONST(0)
> +#define PDP_D_DST_RAM_CFG_0_DST_RAM_TYPE_FIELD			_MK_FIELD_CONST(0x1, PDP_D_DST_RAM_CFG_0_DST_RAM_TYPE_SHIFT)
> +#define PDP_D_DST_RAM_CFG_0_DST_RAM_TYPE_CV			_MK_ENUM_CONST(0x0)
> +#define PDP_D_DST_RAM_CFG_0_DST_RAM_TYPE_MC			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register PDP_D_DATA_FORMAT_0
> +#define PDP_D_DATA_FORMAT_0			_MK_ADDR_CONST(0xb084)
> +#define PDP_D_DATA_FORMAT_0_INPUT_DATA_SHIFT			_MK_SHIFT_CONST(0)
> +#define PDP_D_DATA_FORMAT_0_INPUT_DATA_FIELD			_MK_FIELD_CONST(0x3, PDP_D_DATA_FORMAT_0_INPUT_DATA_SHIFT)
> +#define PDP_D_DATA_FORMAT_0_INPUT_DATA_INT8			_MK_ENUM_CONST(0x0)
> +#define PDP_D_DATA_FORMAT_0_INPUT_DATA_INT16			_MK_ENUM_CONST(0x1)
> +#define PDP_D_DATA_FORMAT_0_INPUT_DATA_FP16			_MK_ENUM_CONST(0x2)
> +
> +
> +// Register PDP_D_INF_INPUT_NUM_0
> +#define PDP_D_INF_INPUT_NUM_0			_MK_ADDR_CONST(0xb088)
> +#define PDP_D_INF_INPUT_NUM_0_INF_INPUT_NUM_SHIFT			_MK_SHIFT_CONST(0)
> +#define PDP_D_INF_INPUT_NUM_0_INF_INPUT_NUM_FIELD			_MK_FIELD_CONST(0xffffffff, PDP_D_INF_INPUT_NUM_0_INF_INPUT_NUM_SHIFT)
> +
> +
> +// Register PDP_D_NAN_INPUT_NUM_0
> +#define PDP_D_NAN_INPUT_NUM_0			_MK_ADDR_CONST(0xb08c)
> +#define PDP_D_NAN_INPUT_NUM_0_NAN_INPUT_NUM_SHIFT			_MK_SHIFT_CONST(0)
> +#define PDP_D_NAN_INPUT_NUM_0_NAN_INPUT_NUM_FIELD			_MK_FIELD_CONST(0xffffffff, PDP_D_NAN_INPUT_NUM_0_NAN_INPUT_NUM_SHIFT)
> +
> +
> +// Register PDP_D_NAN_OUTPUT_NUM_0
> +#define PDP_D_NAN_OUTPUT_NUM_0			_MK_ADDR_CONST(0xb090)
> +#define PDP_D_NAN_OUTPUT_NUM_0_NAN_OUTPUT_NUM_SHIFT			_MK_SHIFT_CONST(0)
> +#define PDP_D_NAN_OUTPUT_NUM_0_NAN_OUTPUT_NUM_FIELD			_MK_FIELD_CONST(0xffffffff, PDP_D_NAN_OUTPUT_NUM_0_NAN_OUTPUT_NUM_SHIFT)
> +
> +
> +// Register PDP_D_PERF_ENABLE_0
> +#define PDP_D_PERF_ENABLE_0			_MK_ADDR_CONST(0xb094)
> +#define PDP_D_PERF_ENABLE_0_DMA_EN_SHIFT			_MK_SHIFT_CONST(0)
> +#define PDP_D_PERF_ENABLE_0_DMA_EN_FIELD			_MK_FIELD_CONST(0x1, PDP_D_PERF_ENABLE_0_DMA_EN_SHIFT)
> +#define PDP_D_PERF_ENABLE_0_DMA_EN_DISABLE			_MK_ENUM_CONST(0x0)
> +#define PDP_D_PERF_ENABLE_0_DMA_EN_ENABLE			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register PDP_D_PERF_WRITE_STALL_0
> +#define PDP_D_PERF_WRITE_STALL_0			_MK_ADDR_CONST(0xb098)
> +#define PDP_D_PERF_WRITE_STALL_0_PERF_WRITE_STALL_SHIFT			_MK_SHIFT_CONST(0)
> +#define PDP_D_PERF_WRITE_STALL_0_PERF_WRITE_STALL_FIELD			_MK_FIELD_CONST(0xffffffff, PDP_D_PERF_WRITE_STALL_0_PERF_WRITE_STALL_SHIFT)
> +
> +
> +// Register PDP_D_CYA_0
> +#define PDP_D_CYA_0			_MK_ADDR_CONST(0xb09c)
> +#define PDP_D_CYA_0_CYA_SHIFT			_MK_SHIFT_CONST(0)
> +#define PDP_D_CYA_0_CYA_FIELD			_MK_FIELD_CONST(0xffffffff, PDP_D_CYA_0_CYA_SHIFT)
> +
> +
> +
> +// To satisfy various compilers and platforms,
> +// we let users control the types and syntax of certain constants, using macros.
> +#ifndef _MK_SHIFT_CONST
> +  #define _MK_SHIFT_CONST(_constant_) _constant_
> +#endif
> +#ifndef _MK_MASK_CONST
> +  #define _MK_MASK_CONST(_constant_) _constant_
> +#endif
> +#ifndef _MK_ENUM_CONST
> +  #define _MK_ENUM_CONST(_constant_) (_constant_ ## UL)
> +#endif
> +#ifndef _MK_ADDR_CONST
> +  #define _MK_ADDR_CONST(_constant_) _constant_
> +#endif
> +#ifndef _MK_FIELD_CONST
> +  #define _MK_FIELD_CONST(_mask_, _shift_) (_MK_MASK_CONST(_mask_) << _MK_SHIFT_CONST(_shift_))
> +#endif
> +
> +
> +// Register CDP_RDMA_S_STATUS_0
> +#define CDP_RDMA_S_STATUS_0			_MK_ADDR_CONST(0xc000)
> +#define CDP_RDMA_S_STATUS_0_STATUS_0_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDP_RDMA_S_STATUS_0_STATUS_0_FIELD			_MK_FIELD_CONST(0x3, CDP_RDMA_S_STATUS_0_STATUS_0_SHIFT)
> +#define CDP_RDMA_S_STATUS_0_STATUS_0_IDLE			_MK_ENUM_CONST(0x0)
> +#define CDP_RDMA_S_STATUS_0_STATUS_0_RUNNING			_MK_ENUM_CONST(0x1)
> +#define CDP_RDMA_S_STATUS_0_STATUS_0_PENDING			_MK_ENUM_CONST(0x2)
> +#define CDP_RDMA_S_STATUS_0_STATUS_1_SHIFT			_MK_SHIFT_CONST(16)
> +#define CDP_RDMA_S_STATUS_0_STATUS_1_FIELD			_MK_FIELD_CONST(0x3, CDP_RDMA_S_STATUS_0_STATUS_1_SHIFT)
> +#define CDP_RDMA_S_STATUS_0_STATUS_1_IDLE			_MK_ENUM_CONST(0x0)
> +#define CDP_RDMA_S_STATUS_0_STATUS_1_RUNNING			_MK_ENUM_CONST(0x1)
> +#define CDP_RDMA_S_STATUS_0_STATUS_1_PENDING			_MK_ENUM_CONST(0x2)
> +
> +
> +// Register CDP_RDMA_S_POINTER_0
> +#define CDP_RDMA_S_POINTER_0			_MK_ADDR_CONST(0xc004)
> +#define CDP_RDMA_S_POINTER_0_PRODUCER_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDP_RDMA_S_POINTER_0_PRODUCER_FIELD			_MK_FIELD_CONST(0x1, CDP_RDMA_S_POINTER_0_PRODUCER_SHIFT)
> +#define CDP_RDMA_S_POINTER_0_PRODUCER_GROUP_0			_MK_ENUM_CONST(0x0)
> +#define CDP_RDMA_S_POINTER_0_PRODUCER_GROUP_1			_MK_ENUM_CONST(0x1)
> +#define CDP_RDMA_S_POINTER_0_CONSUMER_SHIFT			_MK_SHIFT_CONST(16)
> +#define CDP_RDMA_S_POINTER_0_CONSUMER_FIELD			_MK_FIELD_CONST(0x1, CDP_RDMA_S_POINTER_0_CONSUMER_SHIFT)
> +#define CDP_RDMA_S_POINTER_0_CONSUMER_GROUP_0			_MK_ENUM_CONST(0x0)
> +#define CDP_RDMA_S_POINTER_0_CONSUMER_GROUP_1			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register CDP_RDMA_D_OP_ENABLE_0
> +#define CDP_RDMA_D_OP_ENABLE_0			_MK_ADDR_CONST(0xc008)
> +#define CDP_RDMA_D_OP_ENABLE_0_OP_EN_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDP_RDMA_D_OP_ENABLE_0_OP_EN_FIELD			_MK_FIELD_CONST(0x1, CDP_RDMA_D_OP_ENABLE_0_OP_EN_SHIFT)
> +#define CDP_RDMA_D_OP_ENABLE_0_OP_EN_DISABLE			_MK_ENUM_CONST(0x0)
> +#define CDP_RDMA_D_OP_ENABLE_0_OP_EN_ENABLE			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register CDP_RDMA_D_DATA_CUBE_WIDTH_0
> +#define CDP_RDMA_D_DATA_CUBE_WIDTH_0			_MK_ADDR_CONST(0xc00c)
> +#define CDP_RDMA_D_DATA_CUBE_WIDTH_0_WIDTH_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDP_RDMA_D_DATA_CUBE_WIDTH_0_WIDTH_FIELD			_MK_FIELD_CONST(0x1fff, CDP_RDMA_D_DATA_CUBE_WIDTH_0_WIDTH_SHIFT)
> +
> +
> +// Register CDP_RDMA_D_DATA_CUBE_HEIGHT_0
> +#define CDP_RDMA_D_DATA_CUBE_HEIGHT_0			_MK_ADDR_CONST(0xc010)
> +#define CDP_RDMA_D_DATA_CUBE_HEIGHT_0_HEIGHT_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDP_RDMA_D_DATA_CUBE_HEIGHT_0_HEIGHT_FIELD			_MK_FIELD_CONST(0x1fff, CDP_RDMA_D_DATA_CUBE_HEIGHT_0_HEIGHT_SHIFT)
> +
> +
> +// Register CDP_RDMA_D_DATA_CUBE_CHANNEL_0
> +#define CDP_RDMA_D_DATA_CUBE_CHANNEL_0			_MK_ADDR_CONST(0xc014)
> +#define CDP_RDMA_D_DATA_CUBE_CHANNEL_0_CHANNEL_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDP_RDMA_D_DATA_CUBE_CHANNEL_0_CHANNEL_FIELD			_MK_FIELD_CONST(0x1fff, CDP_RDMA_D_DATA_CUBE_CHANNEL_0_CHANNEL_SHIFT)
> +
> +
> +// Register CDP_RDMA_D_SRC_BASE_ADDR_LOW_0
> +#define CDP_RDMA_D_SRC_BASE_ADDR_LOW_0			_MK_ADDR_CONST(0xc018)
> +#define CDP_RDMA_D_SRC_BASE_ADDR_LOW_0_SRC_BASE_ADDR_LOW_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDP_RDMA_D_SRC_BASE_ADDR_LOW_0_SRC_BASE_ADDR_LOW_FIELD			_MK_FIELD_CONST(0xffffffff, CDP_RDMA_D_SRC_BASE_ADDR_LOW_0_SRC_BASE_ADDR_LOW_SHIFT)
> +
> +
> +// Register CDP_RDMA_D_SRC_BASE_ADDR_HIGH_0
> +#define CDP_RDMA_D_SRC_BASE_ADDR_HIGH_0			_MK_ADDR_CONST(0xc01c)
> +#define CDP_RDMA_D_SRC_BASE_ADDR_HIGH_0_SRC_BASE_ADDR_HIGH_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDP_RDMA_D_SRC_BASE_ADDR_HIGH_0_SRC_BASE_ADDR_HIGH_FIELD			_MK_FIELD_CONST(0xffffffff, CDP_RDMA_D_SRC_BASE_ADDR_HIGH_0_SRC_BASE_ADDR_HIGH_SHIFT)
> +
> +
> +// Register CDP_RDMA_D_SRC_LINE_STRIDE_0
> +#define CDP_RDMA_D_SRC_LINE_STRIDE_0			_MK_ADDR_CONST(0xc020)
> +#define CDP_RDMA_D_SRC_LINE_STRIDE_0_SRC_LINE_STRIDE_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDP_RDMA_D_SRC_LINE_STRIDE_0_SRC_LINE_STRIDE_FIELD			_MK_FIELD_CONST(0xffffffff, CDP_RDMA_D_SRC_LINE_STRIDE_0_SRC_LINE_STRIDE_SHIFT)
> +
> +
> +// Register CDP_RDMA_D_SRC_SURFACE_STRIDE_0
> +#define CDP_RDMA_D_SRC_SURFACE_STRIDE_0			_MK_ADDR_CONST(0xc024)
> +#define CDP_RDMA_D_SRC_SURFACE_STRIDE_0_SRC_SURFACE_STRIDE_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDP_RDMA_D_SRC_SURFACE_STRIDE_0_SRC_SURFACE_STRIDE_FIELD			_MK_FIELD_CONST(0xffffffff, CDP_RDMA_D_SRC_SURFACE_STRIDE_0_SRC_SURFACE_STRIDE_SHIFT)
> +
> +
> +// Register CDP_RDMA_D_SRC_DMA_CFG_0
> +#define CDP_RDMA_D_SRC_DMA_CFG_0			_MK_ADDR_CONST(0xc028)
> +#define CDP_RDMA_D_SRC_DMA_CFG_0_SRC_RAM_TYPE_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDP_RDMA_D_SRC_DMA_CFG_0_SRC_RAM_TYPE_FIELD			_MK_FIELD_CONST(0x1, CDP_RDMA_D_SRC_DMA_CFG_0_SRC_RAM_TYPE_SHIFT)
> +#define CDP_RDMA_D_SRC_DMA_CFG_0_SRC_RAM_TYPE_CV			_MK_ENUM_CONST(0x0)
> +#define CDP_RDMA_D_SRC_DMA_CFG_0_SRC_RAM_TYPE_MC			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register CDP_RDMA_D_SRC_COMPRESSION_EN_0
> +#define CDP_RDMA_D_SRC_COMPRESSION_EN_0			_MK_ADDR_CONST(0xc02c)
> +#define CDP_RDMA_D_SRC_COMPRESSION_EN_0_SRC_COMPRESSION_EN_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDP_RDMA_D_SRC_COMPRESSION_EN_0_SRC_COMPRESSION_EN_FIELD			_MK_FIELD_CONST(0x1, CDP_RDMA_D_SRC_COMPRESSION_EN_0_SRC_COMPRESSION_EN_SHIFT)
> +#define CDP_RDMA_D_SRC_COMPRESSION_EN_0_SRC_COMPRESSION_EN_DISABLE			_MK_ENUM_CONST(0x0)
> +#define CDP_RDMA_D_SRC_COMPRESSION_EN_0_SRC_COMPRESSION_EN_ENABLE			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register CDP_RDMA_D_OPERATION_MODE_0
> +#define CDP_RDMA_D_OPERATION_MODE_0			_MK_ADDR_CONST(0xc030)
> +#define CDP_RDMA_D_OPERATION_MODE_0_OPERATION_MODE_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDP_RDMA_D_OPERATION_MODE_0_OPERATION_MODE_FIELD			_MK_FIELD_CONST(0x3, CDP_RDMA_D_OPERATION_MODE_0_OPERATION_MODE_SHIFT)
> +#define CDP_RDMA_D_OPERATION_MODE_0_OPERATION_MODE_READPHILE			_MK_ENUM_CONST(0x0)
> +#define CDP_RDMA_D_OPERATION_MODE_0_OPERATION_MODE_WRITEPHILE			_MK_ENUM_CONST(0x1)
> +#define CDP_RDMA_D_OPERATION_MODE_0_OPERATION_MODE_ORDINARY			_MK_ENUM_CONST(0x2)
> +
> +
> +// Register CDP_RDMA_D_DATA_FORMAT_0
> +#define CDP_RDMA_D_DATA_FORMAT_0			_MK_ADDR_CONST(0xc034)
> +#define CDP_RDMA_D_DATA_FORMAT_0_INPUT_DATA_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDP_RDMA_D_DATA_FORMAT_0_INPUT_DATA_FIELD			_MK_FIELD_CONST(0x3, CDP_RDMA_D_DATA_FORMAT_0_INPUT_DATA_SHIFT)
> +#define CDP_RDMA_D_DATA_FORMAT_0_INPUT_DATA_INT8			_MK_ENUM_CONST(0x0)
> +#define CDP_RDMA_D_DATA_FORMAT_0_INPUT_DATA_INT16			_MK_ENUM_CONST(0x1)
> +#define CDP_RDMA_D_DATA_FORMAT_0_INPUT_DATA_FP16			_MK_ENUM_CONST(0x2)
> +
> +
> +// Register CDP_RDMA_D_PERF_ENABLE_0
> +#define CDP_RDMA_D_PERF_ENABLE_0			_MK_ADDR_CONST(0xc038)
> +#define CDP_RDMA_D_PERF_ENABLE_0_DMA_EN_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDP_RDMA_D_PERF_ENABLE_0_DMA_EN_FIELD			_MK_FIELD_CONST(0x1, CDP_RDMA_D_PERF_ENABLE_0_DMA_EN_SHIFT)
> +#define CDP_RDMA_D_PERF_ENABLE_0_DMA_EN_DISABLE			_MK_ENUM_CONST(0x0)
> +#define CDP_RDMA_D_PERF_ENABLE_0_DMA_EN_ENABLE			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register CDP_RDMA_D_PERF_READ_STALL_0
> +#define CDP_RDMA_D_PERF_READ_STALL_0			_MK_ADDR_CONST(0xc03c)
> +#define CDP_RDMA_D_PERF_READ_STALL_0_PERF_READ_STALL_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDP_RDMA_D_PERF_READ_STALL_0_PERF_READ_STALL_FIELD			_MK_FIELD_CONST(0xffffffff, CDP_RDMA_D_PERF_READ_STALL_0_PERF_READ_STALL_SHIFT)
> +
> +
> +// Register CDP_RDMA_D_CYA_0
> +#define CDP_RDMA_D_CYA_0			_MK_ADDR_CONST(0xc040)
> +#define CDP_RDMA_D_CYA_0_CYA_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDP_RDMA_D_CYA_0_CYA_FIELD			_MK_FIELD_CONST(0xffffffff, CDP_RDMA_D_CYA_0_CYA_SHIFT)
> +
> +
> +
> +// To satisfy various compilers and platforms,
> +// we let users control the types and syntax of certain constants, using macros.
> +#ifndef _MK_SHIFT_CONST
> +  #define _MK_SHIFT_CONST(_constant_) _constant_
> +#endif
> +#ifndef _MK_MASK_CONST
> +  #define _MK_MASK_CONST(_constant_) _constant_
> +#endif
> +#ifndef _MK_ENUM_CONST
> +  #define _MK_ENUM_CONST(_constant_) (_constant_ ## UL)
> +#endif
> +#ifndef _MK_ADDR_CONST
> +  #define _MK_ADDR_CONST(_constant_) _constant_
> +#endif
> +#ifndef _MK_FIELD_CONST
> +  #define _MK_FIELD_CONST(_mask_, _shift_) (_MK_MASK_CONST(_mask_) << _MK_SHIFT_CONST(_shift_))
> +#endif
> +
> +
> +// Register CDP_S_STATUS_0
> +#define CDP_S_STATUS_0			_MK_ADDR_CONST(0xd000)
> +#define CDP_S_STATUS_0_STATUS_0_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDP_S_STATUS_0_STATUS_0_FIELD			_MK_FIELD_CONST(0x3, CDP_S_STATUS_0_STATUS_0_SHIFT)
> +#define CDP_S_STATUS_0_STATUS_0_IDLE			_MK_ENUM_CONST(0x0)
> +#define CDP_S_STATUS_0_STATUS_0_RUNNING			_MK_ENUM_CONST(0x1)
> +#define CDP_S_STATUS_0_STATUS_0_PENDING			_MK_ENUM_CONST(0x2)
> +#define CDP_S_STATUS_0_STATUS_1_SHIFT			_MK_SHIFT_CONST(16)
> +#define CDP_S_STATUS_0_STATUS_1_FIELD			_MK_FIELD_CONST(0x3, CDP_S_STATUS_0_STATUS_1_SHIFT)
> +#define CDP_S_STATUS_0_STATUS_1_IDLE			_MK_ENUM_CONST(0x0)
> +#define CDP_S_STATUS_0_STATUS_1_RUNNING			_MK_ENUM_CONST(0x1)
> +#define CDP_S_STATUS_0_STATUS_1_PENDING			_MK_ENUM_CONST(0x2)
> +
> +
> +// Register CDP_S_POINTER_0
> +#define CDP_S_POINTER_0			_MK_ADDR_CONST(0xd004)
> +#define CDP_S_POINTER_0_PRODUCER_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDP_S_POINTER_0_PRODUCER_FIELD			_MK_FIELD_CONST(0x1, CDP_S_POINTER_0_PRODUCER_SHIFT)
> +#define CDP_S_POINTER_0_PRODUCER_GROUP_0			_MK_ENUM_CONST(0x0)
> +#define CDP_S_POINTER_0_PRODUCER_GROUP_1			_MK_ENUM_CONST(0x1)
> +#define CDP_S_POINTER_0_CONSUMER_SHIFT			_MK_SHIFT_CONST(16)
> +#define CDP_S_POINTER_0_CONSUMER_FIELD			_MK_FIELD_CONST(0x1, CDP_S_POINTER_0_CONSUMER_SHIFT)
> +#define CDP_S_POINTER_0_CONSUMER_GROUP_0			_MK_ENUM_CONST(0x0)
> +#define CDP_S_POINTER_0_CONSUMER_GROUP_1			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register CDP_S_LUT_ACCESS_CFG_0
> +#define CDP_S_LUT_ACCESS_CFG_0			_MK_ADDR_CONST(0xd008)
> +#define CDP_S_LUT_ACCESS_CFG_0_LUT_ADDR_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDP_S_LUT_ACCESS_CFG_0_LUT_ADDR_FIELD			_MK_FIELD_CONST(0x3ff, CDP_S_LUT_ACCESS_CFG_0_LUT_ADDR_SHIFT)
> +#define CDP_S_LUT_ACCESS_CFG_0_LUT_TABLE_ID_SHIFT			_MK_SHIFT_CONST(16)
> +#define CDP_S_LUT_ACCESS_CFG_0_LUT_TABLE_ID_FIELD			_MK_FIELD_CONST(0x1, CDP_S_LUT_ACCESS_CFG_0_LUT_TABLE_ID_SHIFT)
> +#define CDP_S_LUT_ACCESS_CFG_0_LUT_TABLE_ID_LE			_MK_ENUM_CONST(0x0)
> +#define CDP_S_LUT_ACCESS_CFG_0_LUT_TABLE_ID_LO			_MK_ENUM_CONST(0x1)
> +#define CDP_S_LUT_ACCESS_CFG_0_LUT_ACCESS_TYPE_SHIFT			_MK_SHIFT_CONST(17)
> +#define CDP_S_LUT_ACCESS_CFG_0_LUT_ACCESS_TYPE_FIELD			_MK_FIELD_CONST(0x1, CDP_S_LUT_ACCESS_CFG_0_LUT_ACCESS_TYPE_SHIFT)
> +#define CDP_S_LUT_ACCESS_CFG_0_LUT_ACCESS_TYPE_READ			_MK_ENUM_CONST(0x0)
> +#define CDP_S_LUT_ACCESS_CFG_0_LUT_ACCESS_TYPE_WRITE			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register CDP_S_LUT_ACCESS_DATA_0
> +#define CDP_S_LUT_ACCESS_DATA_0			_MK_ADDR_CONST(0xd00c)
> +#define CDP_S_LUT_ACCESS_DATA_0_LUT_DATA_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDP_S_LUT_ACCESS_DATA_0_LUT_DATA_FIELD			_MK_FIELD_CONST(0xffff, CDP_S_LUT_ACCESS_DATA_0_LUT_DATA_SHIFT)
> +
> +
> +// Register CDP_S_LUT_CFG_0
> +#define CDP_S_LUT_CFG_0			_MK_ADDR_CONST(0xd010)
> +#define CDP_S_LUT_CFG_0_LUT_LE_FUNCTION_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDP_S_LUT_CFG_0_LUT_LE_FUNCTION_FIELD			_MK_FIELD_CONST(0x1, CDP_S_LUT_CFG_0_LUT_LE_FUNCTION_SHIFT)
> +#define CDP_S_LUT_CFG_0_LUT_LE_FUNCTION_EXPONENT			_MK_ENUM_CONST(0x0)
> +#define CDP_S_LUT_CFG_0_LUT_LE_FUNCTION_LINEAR			_MK_ENUM_CONST(0x1)
> +#define CDP_S_LUT_CFG_0_LUT_UFLOW_PRIORITY_SHIFT			_MK_SHIFT_CONST(4)
> +#define CDP_S_LUT_CFG_0_LUT_UFLOW_PRIORITY_FIELD			_MK_FIELD_CONST(0x1, CDP_S_LUT_CFG_0_LUT_UFLOW_PRIORITY_SHIFT)
> +#define CDP_S_LUT_CFG_0_LUT_UFLOW_PRIORITY_LE			_MK_ENUM_CONST(0x0)
> +#define CDP_S_LUT_CFG_0_LUT_UFLOW_PRIORITY_LO			_MK_ENUM_CONST(0x1)
> +#define CDP_S_LUT_CFG_0_LUT_OFLOW_PRIORITY_SHIFT			_MK_SHIFT_CONST(5)
> +#define CDP_S_LUT_CFG_0_LUT_OFLOW_PRIORITY_FIELD			_MK_FIELD_CONST(0x1, CDP_S_LUT_CFG_0_LUT_OFLOW_PRIORITY_SHIFT)
> +#define CDP_S_LUT_CFG_0_LUT_OFLOW_PRIORITY_LE			_MK_ENUM_CONST(0x0)
> +#define CDP_S_LUT_CFG_0_LUT_OFLOW_PRIORITY_LO			_MK_ENUM_CONST(0x1)
> +#define CDP_S_LUT_CFG_0_LUT_HYBRID_PRIORITY_SHIFT			_MK_SHIFT_CONST(6)
> +#define CDP_S_LUT_CFG_0_LUT_HYBRID_PRIORITY_FIELD			_MK_FIELD_CONST(0x1, CDP_S_LUT_CFG_0_LUT_HYBRID_PRIORITY_SHIFT)
> +#define CDP_S_LUT_CFG_0_LUT_HYBRID_PRIORITY_LE			_MK_ENUM_CONST(0x0)
> +#define CDP_S_LUT_CFG_0_LUT_HYBRID_PRIORITY_LO			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register CDP_S_LUT_INFO_0
> +#define CDP_S_LUT_INFO_0			_MK_ADDR_CONST(0xd014)
> +#define CDP_S_LUT_INFO_0_LUT_LE_INDEX_OFFSET_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDP_S_LUT_INFO_0_LUT_LE_INDEX_OFFSET_FIELD			_MK_FIELD_CONST(0xff, CDP_S_LUT_INFO_0_LUT_LE_INDEX_OFFSET_SHIFT)
> +#define CDP_S_LUT_INFO_0_LUT_LE_INDEX_SELECT_SHIFT			_MK_SHIFT_CONST(8)
> +#define CDP_S_LUT_INFO_0_LUT_LE_INDEX_SELECT_FIELD			_MK_FIELD_CONST(0xff, CDP_S_LUT_INFO_0_LUT_LE_INDEX_SELECT_SHIFT)
> +#define CDP_S_LUT_INFO_0_LUT_LO_INDEX_SELECT_SHIFT			_MK_SHIFT_CONST(16)
> +#define CDP_S_LUT_INFO_0_LUT_LO_INDEX_SELECT_FIELD			_MK_FIELD_CONST(0xff, CDP_S_LUT_INFO_0_LUT_LO_INDEX_SELECT_SHIFT)
> +
> +
> +// Register CDP_S_LUT_LE_START_LOW_0
> +#define CDP_S_LUT_LE_START_LOW_0			_MK_ADDR_CONST(0xd018)
> +#define CDP_S_LUT_LE_START_LOW_0_LUT_LE_START_LOW_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDP_S_LUT_LE_START_LOW_0_LUT_LE_START_LOW_FIELD			_MK_FIELD_CONST(0xffffffff, CDP_S_LUT_LE_START_LOW_0_LUT_LE_START_LOW_SHIFT)
> +
> +
> +// Register CDP_S_LUT_LE_START_HIGH_0
> +#define CDP_S_LUT_LE_START_HIGH_0			_MK_ADDR_CONST(0xd01c)
> +#define CDP_S_LUT_LE_START_HIGH_0_LUT_LE_START_HIGH_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDP_S_LUT_LE_START_HIGH_0_LUT_LE_START_HIGH_FIELD			_MK_FIELD_CONST(0x3f, CDP_S_LUT_LE_START_HIGH_0_LUT_LE_START_HIGH_SHIFT)
> +
> +
> +// Register CDP_S_LUT_LE_END_LOW_0
> +#define CDP_S_LUT_LE_END_LOW_0			_MK_ADDR_CONST(0xd020)
> +#define CDP_S_LUT_LE_END_LOW_0_LUT_LE_END_LOW_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDP_S_LUT_LE_END_LOW_0_LUT_LE_END_LOW_FIELD			_MK_FIELD_CONST(0xffffffff, CDP_S_LUT_LE_END_LOW_0_LUT_LE_END_LOW_SHIFT)
> +
> +
> +// Register CDP_S_LUT_LE_END_HIGH_0
> +#define CDP_S_LUT_LE_END_HIGH_0			_MK_ADDR_CONST(0xd024)
> +#define CDP_S_LUT_LE_END_HIGH_0_LUT_LE_END_HIGH_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDP_S_LUT_LE_END_HIGH_0_LUT_LE_END_HIGH_FIELD			_MK_FIELD_CONST(0x3f, CDP_S_LUT_LE_END_HIGH_0_LUT_LE_END_HIGH_SHIFT)
> +
> +
> +// Register CDP_S_LUT_LO_START_LOW_0
> +#define CDP_S_LUT_LO_START_LOW_0			_MK_ADDR_CONST(0xd028)
> +#define CDP_S_LUT_LO_START_LOW_0_LUT_LO_START_LOW_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDP_S_LUT_LO_START_LOW_0_LUT_LO_START_LOW_FIELD			_MK_FIELD_CONST(0xffffffff, CDP_S_LUT_LO_START_LOW_0_LUT_LO_START_LOW_SHIFT)
> +
> +
> +// Register CDP_S_LUT_LO_START_HIGH_0
> +#define CDP_S_LUT_LO_START_HIGH_0			_MK_ADDR_CONST(0xd02c)
> +#define CDP_S_LUT_LO_START_HIGH_0_LUT_LO_START_HIGH_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDP_S_LUT_LO_START_HIGH_0_LUT_LO_START_HIGH_FIELD			_MK_FIELD_CONST(0x3f, CDP_S_LUT_LO_START_HIGH_0_LUT_LO_START_HIGH_SHIFT)
> +
> +
> +// Register CDP_S_LUT_LO_END_LOW_0
> +#define CDP_S_LUT_LO_END_LOW_0			_MK_ADDR_CONST(0xd030)
> +#define CDP_S_LUT_LO_END_LOW_0_LUT_LO_END_LOW_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDP_S_LUT_LO_END_LOW_0_LUT_LO_END_LOW_FIELD			_MK_FIELD_CONST(0xffffffff, CDP_S_LUT_LO_END_LOW_0_LUT_LO_END_LOW_SHIFT)
> +
> +
> +// Register CDP_S_LUT_LO_END_HIGH_0
> +#define CDP_S_LUT_LO_END_HIGH_0			_MK_ADDR_CONST(0xd034)
> +#define CDP_S_LUT_LO_END_HIGH_0_LUT_LO_END_HIGH_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDP_S_LUT_LO_END_HIGH_0_LUT_LO_END_HIGH_FIELD			_MK_FIELD_CONST(0x3f, CDP_S_LUT_LO_END_HIGH_0_LUT_LO_END_HIGH_SHIFT)
> +
> +
> +// Register CDP_S_LUT_LE_SLOPE_SCALE_0
> +#define CDP_S_LUT_LE_SLOPE_SCALE_0			_MK_ADDR_CONST(0xd038)
> +#define CDP_S_LUT_LE_SLOPE_SCALE_0_LUT_LE_SLOPE_UFLOW_SCALE_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDP_S_LUT_LE_SLOPE_SCALE_0_LUT_LE_SLOPE_UFLOW_SCALE_FIELD			_MK_FIELD_CONST(0xffff, CDP_S_LUT_LE_SLOPE_SCALE_0_LUT_LE_SLOPE_UFLOW_SCALE_SHIFT)
> +#define CDP_S_LUT_LE_SLOPE_SCALE_0_LUT_LE_SLOPE_OFLOW_SCALE_SHIFT			_MK_SHIFT_CONST(16)
> +#define CDP_S_LUT_LE_SLOPE_SCALE_0_LUT_LE_SLOPE_OFLOW_SCALE_FIELD			_MK_FIELD_CONST(0xffff, CDP_S_LUT_LE_SLOPE_SCALE_0_LUT_LE_SLOPE_OFLOW_SCALE_SHIFT)
> +
> +
> +// Register CDP_S_LUT_LE_SLOPE_SHIFT_0
> +#define CDP_S_LUT_LE_SLOPE_SHIFT_0			_MK_ADDR_CONST(0xd03c)
> +#define CDP_S_LUT_LE_SLOPE_SHIFT_0_LUT_LE_SLOPE_UFLOW_SHIFT_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDP_S_LUT_LE_SLOPE_SHIFT_0_LUT_LE_SLOPE_UFLOW_SHIFT_FIELD			_MK_FIELD_CONST(0x1f, CDP_S_LUT_LE_SLOPE_SHIFT_0_LUT_LE_SLOPE_UFLOW_SHIFT_SHIFT)
> +#define CDP_S_LUT_LE_SLOPE_SHIFT_0_LUT_LE_SLOPE_OFLOW_SHIFT_SHIFT			_MK_SHIFT_CONST(5)
> +#define CDP_S_LUT_LE_SLOPE_SHIFT_0_LUT_LE_SLOPE_OFLOW_SHIFT_FIELD			_MK_FIELD_CONST(0x1f, CDP_S_LUT_LE_SLOPE_SHIFT_0_LUT_LE_SLOPE_OFLOW_SHIFT_SHIFT)
> +
> +
> +// Register CDP_S_LUT_LO_SLOPE_SCALE_0
> +#define CDP_S_LUT_LO_SLOPE_SCALE_0			_MK_ADDR_CONST(0xd040)
> +#define CDP_S_LUT_LO_SLOPE_SCALE_0_LUT_LO_SLOPE_UFLOW_SCALE_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDP_S_LUT_LO_SLOPE_SCALE_0_LUT_LO_SLOPE_UFLOW_SCALE_FIELD			_MK_FIELD_CONST(0xffff, CDP_S_LUT_LO_SLOPE_SCALE_0_LUT_LO_SLOPE_UFLOW_SCALE_SHIFT)
> +#define CDP_S_LUT_LO_SLOPE_SCALE_0_LUT_LO_SLOPE_OFLOW_SCALE_SHIFT			_MK_SHIFT_CONST(16)
> +#define CDP_S_LUT_LO_SLOPE_SCALE_0_LUT_LO_SLOPE_OFLOW_SCALE_FIELD			_MK_FIELD_CONST(0xffff, CDP_S_LUT_LO_SLOPE_SCALE_0_LUT_LO_SLOPE_OFLOW_SCALE_SHIFT)
> +
> +
> +// Register CDP_S_LUT_LO_SLOPE_SHIFT_0
> +#define CDP_S_LUT_LO_SLOPE_SHIFT_0			_MK_ADDR_CONST(0xd044)
> +#define CDP_S_LUT_LO_SLOPE_SHIFT_0_LUT_LO_SLOPE_UFLOW_SHIFT_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDP_S_LUT_LO_SLOPE_SHIFT_0_LUT_LO_SLOPE_UFLOW_SHIFT_FIELD			_MK_FIELD_CONST(0x1f, CDP_S_LUT_LO_SLOPE_SHIFT_0_LUT_LO_SLOPE_UFLOW_SHIFT_SHIFT)
> +#define CDP_S_LUT_LO_SLOPE_SHIFT_0_LUT_LO_SLOPE_OFLOW_SHIFT_SHIFT			_MK_SHIFT_CONST(5)
> +#define CDP_S_LUT_LO_SLOPE_SHIFT_0_LUT_LO_SLOPE_OFLOW_SHIFT_FIELD			_MK_FIELD_CONST(0x1f, CDP_S_LUT_LO_SLOPE_SHIFT_0_LUT_LO_SLOPE_OFLOW_SHIFT_SHIFT)
> +
> +
> +// Register CDP_D_OP_ENABLE_0
> +#define CDP_D_OP_ENABLE_0			_MK_ADDR_CONST(0xd048)
> +#define CDP_D_OP_ENABLE_0_OP_EN_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDP_D_OP_ENABLE_0_OP_EN_FIELD			_MK_FIELD_CONST(0x1, CDP_D_OP_ENABLE_0_OP_EN_SHIFT)
> +#define CDP_D_OP_ENABLE_0_OP_EN_DISABLE			_MK_ENUM_CONST(0x0)
> +#define CDP_D_OP_ENABLE_0_OP_EN_ENABLE			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register CDP_D_FUNC_BYPASS_0
> +#define CDP_D_FUNC_BYPASS_0			_MK_ADDR_CONST(0xd04c)
> +#define CDP_D_FUNC_BYPASS_0_SQSUM_BYPASS_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDP_D_FUNC_BYPASS_0_SQSUM_BYPASS_FIELD			_MK_FIELD_CONST(0x1, CDP_D_FUNC_BYPASS_0_SQSUM_BYPASS_SHIFT)
> +#define CDP_D_FUNC_BYPASS_0_SQSUM_BYPASS_DISABLE			_MK_ENUM_CONST(0x0)
> +#define CDP_D_FUNC_BYPASS_0_SQSUM_BYPASS_ENABLE			_MK_ENUM_CONST(0x1)
> +#define CDP_D_FUNC_BYPASS_0_MUL_BYPASS_SHIFT			_MK_SHIFT_CONST(1)
> +#define CDP_D_FUNC_BYPASS_0_MUL_BYPASS_FIELD			_MK_FIELD_CONST(0x1, CDP_D_FUNC_BYPASS_0_MUL_BYPASS_SHIFT)
> +#define CDP_D_FUNC_BYPASS_0_MUL_BYPASS_DISABLE			_MK_ENUM_CONST(0x0)
> +#define CDP_D_FUNC_BYPASS_0_MUL_BYPASS_ENABLE			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register CDP_D_DST_BASE_ADDR_LOW_0
> +#define CDP_D_DST_BASE_ADDR_LOW_0			_MK_ADDR_CONST(0xd050)
> +#define CDP_D_DST_BASE_ADDR_LOW_0_DST_BASE_ADDR_LOW_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDP_D_DST_BASE_ADDR_LOW_0_DST_BASE_ADDR_LOW_FIELD			_MK_FIELD_CONST(0xffffffff, CDP_D_DST_BASE_ADDR_LOW_0_DST_BASE_ADDR_LOW_SHIFT)
> +
> +
> +// Register CDP_D_DST_BASE_ADDR_HIGH_0
> +#define CDP_D_DST_BASE_ADDR_HIGH_0			_MK_ADDR_CONST(0xd054)
> +#define CDP_D_DST_BASE_ADDR_HIGH_0_DST_BASE_ADDR_HIGH_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDP_D_DST_BASE_ADDR_HIGH_0_DST_BASE_ADDR_HIGH_FIELD			_MK_FIELD_CONST(0xffffffff, CDP_D_DST_BASE_ADDR_HIGH_0_DST_BASE_ADDR_HIGH_SHIFT)
> +
> +
> +// Register CDP_D_DST_LINE_STRIDE_0
> +#define CDP_D_DST_LINE_STRIDE_0			_MK_ADDR_CONST(0xd058)
> +#define CDP_D_DST_LINE_STRIDE_0_DST_LINE_STRIDE_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDP_D_DST_LINE_STRIDE_0_DST_LINE_STRIDE_FIELD			_MK_FIELD_CONST(0xffffffff, CDP_D_DST_LINE_STRIDE_0_DST_LINE_STRIDE_SHIFT)
> +
> +
> +// Register CDP_D_DST_SURFACE_STRIDE_0
> +#define CDP_D_DST_SURFACE_STRIDE_0			_MK_ADDR_CONST(0xd05c)
> +#define CDP_D_DST_SURFACE_STRIDE_0_DST_SURFACE_STRIDE_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDP_D_DST_SURFACE_STRIDE_0_DST_SURFACE_STRIDE_FIELD			_MK_FIELD_CONST(0xffffffff, CDP_D_DST_SURFACE_STRIDE_0_DST_SURFACE_STRIDE_SHIFT)
> +
> +
> +// Register CDP_D_DST_DMA_CFG_0
> +#define CDP_D_DST_DMA_CFG_0			_MK_ADDR_CONST(0xd060)
> +#define CDP_D_DST_DMA_CFG_0_DST_RAM_TYPE_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDP_D_DST_DMA_CFG_0_DST_RAM_TYPE_FIELD			_MK_FIELD_CONST(0x1, CDP_D_DST_DMA_CFG_0_DST_RAM_TYPE_SHIFT)
> +#define CDP_D_DST_DMA_CFG_0_DST_RAM_TYPE_CV			_MK_ENUM_CONST(0x0)
> +#define CDP_D_DST_DMA_CFG_0_DST_RAM_TYPE_MC			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register CDP_D_DST_COMPRESSION_EN_0
> +#define CDP_D_DST_COMPRESSION_EN_0			_MK_ADDR_CONST(0xd064)
> +#define CDP_D_DST_COMPRESSION_EN_0_DST_COMPRESSION_EN_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDP_D_DST_COMPRESSION_EN_0_DST_COMPRESSION_EN_FIELD			_MK_FIELD_CONST(0x1, CDP_D_DST_COMPRESSION_EN_0_DST_COMPRESSION_EN_SHIFT)
> +#define CDP_D_DST_COMPRESSION_EN_0_DST_COMPRESSION_EN_DISABLE			_MK_ENUM_CONST(0x0)
> +#define CDP_D_DST_COMPRESSION_EN_0_DST_COMPRESSION_EN_ENABLE			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register CDP_D_DATA_FORMAT_0
> +#define CDP_D_DATA_FORMAT_0			_MK_ADDR_CONST(0xd068)
> +#define CDP_D_DATA_FORMAT_0_INPUT_DATA_TYPE_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDP_D_DATA_FORMAT_0_INPUT_DATA_TYPE_FIELD			_MK_FIELD_CONST(0x3, CDP_D_DATA_FORMAT_0_INPUT_DATA_TYPE_SHIFT)
> +#define CDP_D_DATA_FORMAT_0_INPUT_DATA_TYPE_INT8			_MK_ENUM_CONST(0x0)
> +#define CDP_D_DATA_FORMAT_0_INPUT_DATA_TYPE_INT16			_MK_ENUM_CONST(0x1)
> +#define CDP_D_DATA_FORMAT_0_INPUT_DATA_TYPE_FP16			_MK_ENUM_CONST(0x2)
> +
> +
> +// Register CDP_D_NAN_FLUSH_TO_ZERO_0
> +#define CDP_D_NAN_FLUSH_TO_ZERO_0			_MK_ADDR_CONST(0xd06c)
> +#define CDP_D_NAN_FLUSH_TO_ZERO_0_NAN_TO_ZERO_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDP_D_NAN_FLUSH_TO_ZERO_0_NAN_TO_ZERO_FIELD			_MK_FIELD_CONST(0x1, CDP_D_NAN_FLUSH_TO_ZERO_0_NAN_TO_ZERO_SHIFT)
> +#define CDP_D_NAN_FLUSH_TO_ZERO_0_NAN_TO_ZERO_DISABLE			_MK_ENUM_CONST(0x0)
> +#define CDP_D_NAN_FLUSH_TO_ZERO_0_NAN_TO_ZERO_ENABLE			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register CDP_D_LRN_CFG_0
> +#define CDP_D_LRN_CFG_0			_MK_ADDR_CONST(0xd070)
> +#define CDP_D_LRN_CFG_0_NORMALZ_LEN_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDP_D_LRN_CFG_0_NORMALZ_LEN_FIELD			_MK_FIELD_CONST(0x3, CDP_D_LRN_CFG_0_NORMALZ_LEN_SHIFT)
> +#define CDP_D_LRN_CFG_0_NORMALZ_LEN_LEN3			_MK_ENUM_CONST(0x0)
> +#define CDP_D_LRN_CFG_0_NORMALZ_LEN_LEN5			_MK_ENUM_CONST(0x1)
> +#define CDP_D_LRN_CFG_0_NORMALZ_LEN_LEN7			_MK_ENUM_CONST(0x2)
> +#define CDP_D_LRN_CFG_0_NORMALZ_LEN_LEN9			_MK_ENUM_CONST(0x3)
> +
> +
> +// Register CDP_D_DATIN_OFFSET_0
> +#define CDP_D_DATIN_OFFSET_0			_MK_ADDR_CONST(0xd074)
> +#define CDP_D_DATIN_OFFSET_0_DATIN_OFFSET_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDP_D_DATIN_OFFSET_0_DATIN_OFFSET_FIELD			_MK_FIELD_CONST(0xffff, CDP_D_DATIN_OFFSET_0_DATIN_OFFSET_SHIFT)
> +
> +
> +// Register CDP_D_DATIN_SCALE_0
> +#define CDP_D_DATIN_SCALE_0			_MK_ADDR_CONST(0xd078)
> +#define CDP_D_DATIN_SCALE_0_DATIN_SCALE_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDP_D_DATIN_SCALE_0_DATIN_SCALE_FIELD			_MK_FIELD_CONST(0xffff, CDP_D_DATIN_SCALE_0_DATIN_SCALE_SHIFT)
> +
> +
> +// Register CDP_D_DATIN_SHIFTER_0
> +#define CDP_D_DATIN_SHIFTER_0			_MK_ADDR_CONST(0xd07c)
> +#define CDP_D_DATIN_SHIFTER_0_DATIN_SHIFTER_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDP_D_DATIN_SHIFTER_0_DATIN_SHIFTER_FIELD			_MK_FIELD_CONST(0x1f, CDP_D_DATIN_SHIFTER_0_DATIN_SHIFTER_SHIFT)
> +
> +
> +// Register CDP_D_DATOUT_OFFSET_0
> +#define CDP_D_DATOUT_OFFSET_0			_MK_ADDR_CONST(0xd080)
> +#define CDP_D_DATOUT_OFFSET_0_DATOUT_OFFSET_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDP_D_DATOUT_OFFSET_0_DATOUT_OFFSET_FIELD			_MK_FIELD_CONST(0xffffffff, CDP_D_DATOUT_OFFSET_0_DATOUT_OFFSET_SHIFT)
> +
> +
> +// Register CDP_D_DATOUT_SCALE_0
> +#define CDP_D_DATOUT_SCALE_0			_MK_ADDR_CONST(0xd084)
> +#define CDP_D_DATOUT_SCALE_0_DATOUT_SCALE_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDP_D_DATOUT_SCALE_0_DATOUT_SCALE_FIELD			_MK_FIELD_CONST(0xffff, CDP_D_DATOUT_SCALE_0_DATOUT_SCALE_SHIFT)
> +
> +
> +// Register CDP_D_DATOUT_SHIFTER_0
> +#define CDP_D_DATOUT_SHIFTER_0			_MK_ADDR_CONST(0xd088)
> +#define CDP_D_DATOUT_SHIFTER_0_DATOUT_SHIFTER_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDP_D_DATOUT_SHIFTER_0_DATOUT_SHIFTER_FIELD			_MK_FIELD_CONST(0x3f, CDP_D_DATOUT_SHIFTER_0_DATOUT_SHIFTER_SHIFT)
> +
> +
> +// Register CDP_D_NAN_INPUT_NUM_0
> +#define CDP_D_NAN_INPUT_NUM_0			_MK_ADDR_CONST(0xd08c)
> +#define CDP_D_NAN_INPUT_NUM_0_NAN_INPUT_NUM_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDP_D_NAN_INPUT_NUM_0_NAN_INPUT_NUM_FIELD			_MK_FIELD_CONST(0xffffffff, CDP_D_NAN_INPUT_NUM_0_NAN_INPUT_NUM_SHIFT)
> +
> +
> +// Register CDP_D_INF_INPUT_NUM_0
> +#define CDP_D_INF_INPUT_NUM_0			_MK_ADDR_CONST(0xd090)
> +#define CDP_D_INF_INPUT_NUM_0_INF_INPUT_NUM_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDP_D_INF_INPUT_NUM_0_INF_INPUT_NUM_FIELD			_MK_FIELD_CONST(0xffffffff, CDP_D_INF_INPUT_NUM_0_INF_INPUT_NUM_SHIFT)
> +
> +
> +// Register CDP_D_NAN_OUTPUT_NUM_0
> +#define CDP_D_NAN_OUTPUT_NUM_0			_MK_ADDR_CONST(0xd094)
> +#define CDP_D_NAN_OUTPUT_NUM_0_NAN_OUTPUT_NUM_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDP_D_NAN_OUTPUT_NUM_0_NAN_OUTPUT_NUM_FIELD			_MK_FIELD_CONST(0xffffffff, CDP_D_NAN_OUTPUT_NUM_0_NAN_OUTPUT_NUM_SHIFT)
> +
> +
> +// Register CDP_D_OUT_SATURATION_0
> +#define CDP_D_OUT_SATURATION_0			_MK_ADDR_CONST(0xd098)
> +#define CDP_D_OUT_SATURATION_0_OUT_SATURATION_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDP_D_OUT_SATURATION_0_OUT_SATURATION_FIELD			_MK_FIELD_CONST(0xffffffff, CDP_D_OUT_SATURATION_0_OUT_SATURATION_SHIFT)
> +
> +
> +// Register CDP_D_PERF_ENABLE_0
> +#define CDP_D_PERF_ENABLE_0			_MK_ADDR_CONST(0xd09c)
> +#define CDP_D_PERF_ENABLE_0_DMA_EN_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDP_D_PERF_ENABLE_0_DMA_EN_FIELD			_MK_FIELD_CONST(0x1, CDP_D_PERF_ENABLE_0_DMA_EN_SHIFT)
> +#define CDP_D_PERF_ENABLE_0_DMA_EN_DISABLE			_MK_ENUM_CONST(0x0)
> +#define CDP_D_PERF_ENABLE_0_DMA_EN_ENABLE			_MK_ENUM_CONST(0x1)
> +#define CDP_D_PERF_ENABLE_0_LUT_EN_SHIFT			_MK_SHIFT_CONST(1)
> +#define CDP_D_PERF_ENABLE_0_LUT_EN_FIELD			_MK_FIELD_CONST(0x1, CDP_D_PERF_ENABLE_0_LUT_EN_SHIFT)
> +#define CDP_D_PERF_ENABLE_0_LUT_EN_DISABLE			_MK_ENUM_CONST(0x0)
> +#define CDP_D_PERF_ENABLE_0_LUT_EN_ENABLE			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register CDP_D_PERF_WRITE_STALL_0
> +#define CDP_D_PERF_WRITE_STALL_0			_MK_ADDR_CONST(0xd0a0)
> +#define CDP_D_PERF_WRITE_STALL_0_PERF_WRITE_STALL_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDP_D_PERF_WRITE_STALL_0_PERF_WRITE_STALL_FIELD			_MK_FIELD_CONST(0xffffffff, CDP_D_PERF_WRITE_STALL_0_PERF_WRITE_STALL_SHIFT)
> +
> +
> +// Register CDP_D_PERF_LUT_UFLOW_0
> +#define CDP_D_PERF_LUT_UFLOW_0			_MK_ADDR_CONST(0xd0a4)
> +#define CDP_D_PERF_LUT_UFLOW_0_PERF_LUT_UFLOW_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDP_D_PERF_LUT_UFLOW_0_PERF_LUT_UFLOW_FIELD			_MK_FIELD_CONST(0xffffffff, CDP_D_PERF_LUT_UFLOW_0_PERF_LUT_UFLOW_SHIFT)
> +
> +
> +// Register CDP_D_PERF_LUT_OFLOW_0
> +#define CDP_D_PERF_LUT_OFLOW_0			_MK_ADDR_CONST(0xd0a8)
> +#define CDP_D_PERF_LUT_OFLOW_0_PERF_LUT_OFLOW_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDP_D_PERF_LUT_OFLOW_0_PERF_LUT_OFLOW_FIELD			_MK_FIELD_CONST(0xffffffff, CDP_D_PERF_LUT_OFLOW_0_PERF_LUT_OFLOW_SHIFT)
> +
> +
> +// Register CDP_D_PERF_LUT_HYBRID_0
> +#define CDP_D_PERF_LUT_HYBRID_0			_MK_ADDR_CONST(0xd0ac)
> +#define CDP_D_PERF_LUT_HYBRID_0_PERF_LUT_HYBRID_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDP_D_PERF_LUT_HYBRID_0_PERF_LUT_HYBRID_FIELD			_MK_FIELD_CONST(0xffffffff, CDP_D_PERF_LUT_HYBRID_0_PERF_LUT_HYBRID_SHIFT)
> +
> +
> +// Register CDP_D_PERF_LUT_LE_HIT_0
> +#define CDP_D_PERF_LUT_LE_HIT_0			_MK_ADDR_CONST(0xd0b0)
> +#define CDP_D_PERF_LUT_LE_HIT_0_PERF_LUT_LE_HIT_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDP_D_PERF_LUT_LE_HIT_0_PERF_LUT_LE_HIT_FIELD			_MK_FIELD_CONST(0xffffffff, CDP_D_PERF_LUT_LE_HIT_0_PERF_LUT_LE_HIT_SHIFT)
> +
> +
> +// Register CDP_D_PERF_LUT_LO_HIT_0
> +#define CDP_D_PERF_LUT_LO_HIT_0			_MK_ADDR_CONST(0xd0b4)
> +#define CDP_D_PERF_LUT_LO_HIT_0_PERF_LUT_LO_HIT_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDP_D_PERF_LUT_LO_HIT_0_PERF_LUT_LO_HIT_FIELD			_MK_FIELD_CONST(0xffffffff, CDP_D_PERF_LUT_LO_HIT_0_PERF_LUT_LO_HIT_SHIFT)
> +
> +
> +// Register CDP_D_CYA_0
> +#define CDP_D_CYA_0			_MK_ADDR_CONST(0xd0b8)
> +#define CDP_D_CYA_0_CYA_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDP_D_CYA_0_CYA_FIELD			_MK_FIELD_CONST(0xffffffff, CDP_D_CYA_0_CYA_SHIFT)
> +
> +
> +
> +// To satisfy various compilers and platforms,
> +// we let users control the types and syntax of certain constants, using macros.
> +#ifndef _MK_SHIFT_CONST
> +  #define _MK_SHIFT_CONST(_constant_) _constant_
> +#endif
> +#ifndef _MK_MASK_CONST
> +  #define _MK_MASK_CONST(_constant_) _constant_
> +#endif
> +#ifndef _MK_ENUM_CONST
> +  #define _MK_ENUM_CONST(_constant_) (_constant_ ## UL)
> +#endif
> +#ifndef _MK_ADDR_CONST
> +  #define _MK_ADDR_CONST(_constant_) _constant_
> +#endif
> +#ifndef _MK_FIELD_CONST
> +  #define _MK_FIELD_CONST(_mask_, _shift_) (_MK_MASK_CONST(_mask_) << _MK_SHIFT_CONST(_shift_))
> +#endif
> +
> +
> +// Register NVDLA_GEC_FEATURE_0
> +#define NVDLA_GEC_FEATURE_0			_MK_ADDR_CONST(0xe000)
> +#define NVDLA_GEC_FEATURE_0_NUM_ERR_SLICES_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_GEC_FEATURE_0_NUM_ERR_SLICES_FIELD			_MK_FIELD_CONST(0x3f, NVDLA_GEC_FEATURE_0_NUM_ERR_SLICES_SHIFT)
> +#define NVDLA_GEC_FEATURE_0_NUM_ERR_SHIFT			_MK_SHIFT_CONST(16)
> +#define NVDLA_GEC_FEATURE_0_NUM_ERR_FIELD			_MK_FIELD_CONST(0xffff, NVDLA_GEC_FEATURE_0_NUM_ERR_SHIFT)
> +
> +
> +// Register NVDLA_GEC_SWRESET_0
> +#define NVDLA_GEC_SWRESET_0			_MK_ADDR_CONST(0xe004)
> +#define NVDLA_GEC_SWRESET_0_SWRST_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_GEC_SWRESET_0_SWRST_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_SWRESET_0_SWRST_SHIFT)
> +
> +
> +// Register NVDLA_GEC_MISSIONERR_TYPE_0
> +#define NVDLA_GEC_MISSIONERR_TYPE_0			_MK_ADDR_CONST(0xe008)
> +#define NVDLA_GEC_MISSIONERR_TYPE_0_CODE_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_GEC_MISSIONERR_TYPE_0_CODE_FIELD			_MK_FIELD_CONST(0x3f, NVDLA_GEC_MISSIONERR_TYPE_0_CODE_SHIFT)
> +
> +
> +// Register NVDLA_GEC_CURRENT_COUNTER_VALUE_0
> +#define NVDLA_GEC_CURRENT_COUNTER_VALUE_0			_MK_ADDR_CONST(0xe00c)
> +#define NVDLA_GEC_CURRENT_COUNTER_VALUE_0_VALUE_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_GEC_CURRENT_COUNTER_VALUE_0_VALUE_FIELD			_MK_FIELD_CONST(0x1ff, NVDLA_GEC_CURRENT_COUNTER_VALUE_0_VALUE_SHIFT)
> +
> +
> +// Register NVDLA_GEC_MISSIONERR_INDEX_0
> +#define NVDLA_GEC_MISSIONERR_INDEX_0			_MK_ADDR_CONST(0xe014)
> +#define NVDLA_GEC_MISSIONERR_INDEX_0_IDX_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_GEC_MISSIONERR_INDEX_0_IDX_FIELD			_MK_FIELD_CONST(0x7f, NVDLA_GEC_MISSIONERR_INDEX_0_IDX_SHIFT)
> +
> +
> +// Register NVDLA_GEC_CORRECTABLE_THRESHOLD_0
> +#define NVDLA_GEC_CORRECTABLE_THRESHOLD_0			_MK_ADDR_CONST(0xe018)
> +#define NVDLA_GEC_CORRECTABLE_THRESHOLD_0_COUNT_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_GEC_CORRECTABLE_THRESHOLD_0_COUNT_FIELD			_MK_FIELD_CONST(0xff, NVDLA_GEC_CORRECTABLE_THRESHOLD_0_COUNT_SHIFT)
> +
> +
> +// Register NVDLA_GEC_MISSIONERR_INJECT_UNLOCK_0
> +#define NVDLA_GEC_MISSIONERR_INJECT_UNLOCK_0			_MK_ADDR_CONST(0xe01c)
> +#define NVDLA_GEC_MISSIONERR_INJECT_UNLOCK_0_VALUE_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_GEC_MISSIONERR_INJECT_UNLOCK_0_VALUE_FIELD			_MK_FIELD_CONST(0xff, NVDLA_GEC_MISSIONERR_INJECT_UNLOCK_0_VALUE_SHIFT)
> +#define NVDLA_GEC_MISSIONERR_INJECT_UNLOCK_0_VALUE_LOCK			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_MISSIONERR_INJECT_UNLOCK_0_VALUE_UNLOCK			_MK_ENUM_CONST(0xe1)
> +
> +
> +// Register NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0			_MK_ADDR_CONST(0xe030)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR0_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR0_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR0_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR0_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR0_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR1_SHIFT			_MK_SHIFT_CONST(1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR1_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR1_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR1_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR1_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR2_SHIFT			_MK_SHIFT_CONST(2)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR2_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR2_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR2_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR2_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR3_SHIFT			_MK_SHIFT_CONST(3)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR3_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR3_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR3_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR3_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR4_SHIFT			_MK_SHIFT_CONST(4)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR4_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR4_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR4_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR4_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR5_SHIFT			_MK_SHIFT_CONST(5)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR5_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR5_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR5_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR5_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR6_SHIFT			_MK_SHIFT_CONST(6)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR6_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR6_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR6_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR6_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR7_SHIFT			_MK_SHIFT_CONST(7)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR7_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR7_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR7_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR7_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR8_SHIFT			_MK_SHIFT_CONST(8)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR8_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR8_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR8_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR8_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR9_SHIFT			_MK_SHIFT_CONST(9)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR9_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR9_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR9_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR9_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR10_SHIFT			_MK_SHIFT_CONST(10)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR10_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR10_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR10_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR10_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR11_SHIFT			_MK_SHIFT_CONST(11)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR11_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR11_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR11_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR11_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR12_SHIFT			_MK_SHIFT_CONST(12)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR12_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR12_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR12_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR12_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR13_SHIFT			_MK_SHIFT_CONST(13)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR13_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR13_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR13_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR13_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR14_SHIFT			_MK_SHIFT_CONST(14)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR14_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR14_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR14_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR14_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR15_SHIFT			_MK_SHIFT_CONST(15)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR15_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR15_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR15_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR15_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR16_SHIFT			_MK_SHIFT_CONST(16)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR16_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR16_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR16_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR16_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR17_SHIFT			_MK_SHIFT_CONST(17)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR17_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR17_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR17_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR17_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR18_SHIFT			_MK_SHIFT_CONST(18)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR18_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR18_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR18_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR18_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR19_SHIFT			_MK_SHIFT_CONST(19)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR19_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR19_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR19_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR19_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR20_SHIFT			_MK_SHIFT_CONST(20)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR20_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR20_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR20_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR20_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR21_SHIFT			_MK_SHIFT_CONST(21)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR21_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR21_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR21_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR21_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR22_SHIFT			_MK_SHIFT_CONST(22)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR22_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR22_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR22_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR22_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR23_SHIFT			_MK_SHIFT_CONST(23)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR23_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR23_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR23_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR23_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR24_SHIFT			_MK_SHIFT_CONST(24)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR24_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR24_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR24_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR24_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR25_SHIFT			_MK_SHIFT_CONST(25)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR25_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR25_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR25_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR25_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR26_SHIFT			_MK_SHIFT_CONST(26)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR26_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR26_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR26_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR26_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR27_SHIFT			_MK_SHIFT_CONST(27)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR27_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR27_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR27_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR27_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR28_SHIFT			_MK_SHIFT_CONST(28)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR28_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR28_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR28_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR28_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR29_SHIFT			_MK_SHIFT_CONST(29)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR29_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR29_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR29_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR29_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR30_SHIFT			_MK_SHIFT_CONST(30)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR30_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR30_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR30_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR30_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR31_SHIFT			_MK_SHIFT_CONST(31)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR31_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR31_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR31_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR31_ENABLE			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0			_MK_ADDR_CONST(0xe034)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR0_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR0_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR0_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR0_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR0_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR1_SHIFT			_MK_SHIFT_CONST(1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR1_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR1_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR1_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR1_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR2_SHIFT			_MK_SHIFT_CONST(2)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR2_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR2_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR2_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR2_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR3_SHIFT			_MK_SHIFT_CONST(3)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR3_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR3_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR3_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR3_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR4_SHIFT			_MK_SHIFT_CONST(4)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR4_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR4_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR4_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR4_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR5_SHIFT			_MK_SHIFT_CONST(5)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR5_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR5_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR5_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR5_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR6_SHIFT			_MK_SHIFT_CONST(6)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR6_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR6_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR6_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR6_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR7_SHIFT			_MK_SHIFT_CONST(7)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR7_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR7_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR7_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR7_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR8_SHIFT			_MK_SHIFT_CONST(8)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR8_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR8_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR8_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR8_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR9_SHIFT			_MK_SHIFT_CONST(9)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR9_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR9_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR9_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR9_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR10_SHIFT			_MK_SHIFT_CONST(10)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR10_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR10_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR10_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR10_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR11_SHIFT			_MK_SHIFT_CONST(11)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR11_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR11_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR11_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR11_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR12_SHIFT			_MK_SHIFT_CONST(12)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR12_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR12_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR12_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR12_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR13_SHIFT			_MK_SHIFT_CONST(13)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR13_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR13_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR13_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR13_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR14_SHIFT			_MK_SHIFT_CONST(14)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR14_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR14_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR14_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR14_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR15_SHIFT			_MK_SHIFT_CONST(15)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR15_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR15_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR15_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR15_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR16_SHIFT			_MK_SHIFT_CONST(16)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR16_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR16_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR16_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR16_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR17_SHIFT			_MK_SHIFT_CONST(17)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR17_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR17_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR17_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR17_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR18_SHIFT			_MK_SHIFT_CONST(18)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR18_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR18_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR18_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR18_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR19_SHIFT			_MK_SHIFT_CONST(19)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR19_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR19_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR19_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR19_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR20_SHIFT			_MK_SHIFT_CONST(20)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR20_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR20_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR20_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR20_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR21_SHIFT			_MK_SHIFT_CONST(21)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR21_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR21_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR21_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR21_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR22_SHIFT			_MK_SHIFT_CONST(22)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR22_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR22_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR22_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR22_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR23_SHIFT			_MK_SHIFT_CONST(23)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR23_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR23_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR23_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR23_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR24_SHIFT			_MK_SHIFT_CONST(24)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR24_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR24_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR24_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR24_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR25_SHIFT			_MK_SHIFT_CONST(25)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR25_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR25_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR25_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR25_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR26_SHIFT			_MK_SHIFT_CONST(26)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR26_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR26_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR26_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR26_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR27_SHIFT			_MK_SHIFT_CONST(27)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR27_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR27_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR27_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR27_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR28_SHIFT			_MK_SHIFT_CONST(28)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR28_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR28_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR28_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR28_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR29_SHIFT			_MK_SHIFT_CONST(29)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR29_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR29_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR29_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR29_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR30_SHIFT			_MK_SHIFT_CONST(30)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR30_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR30_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR30_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR30_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR31_SHIFT			_MK_SHIFT_CONST(31)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR31_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR31_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR31_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR31_FORCE			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0			_MK_ADDR_CONST(0xe038)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR0_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR0_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR0_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR1_SHIFT			_MK_SHIFT_CONST(1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR1_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR1_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR2_SHIFT			_MK_SHIFT_CONST(2)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR2_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR2_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR3_SHIFT			_MK_SHIFT_CONST(3)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR3_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR3_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR4_SHIFT			_MK_SHIFT_CONST(4)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR4_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR4_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR5_SHIFT			_MK_SHIFT_CONST(5)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR5_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR5_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR6_SHIFT			_MK_SHIFT_CONST(6)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR6_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR6_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR7_SHIFT			_MK_SHIFT_CONST(7)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR7_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR7_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR8_SHIFT			_MK_SHIFT_CONST(8)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR8_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR8_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR9_SHIFT			_MK_SHIFT_CONST(9)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR9_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR9_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR10_SHIFT			_MK_SHIFT_CONST(10)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR10_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR10_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR11_SHIFT			_MK_SHIFT_CONST(11)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR11_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR11_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR12_SHIFT			_MK_SHIFT_CONST(12)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR12_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR12_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR13_SHIFT			_MK_SHIFT_CONST(13)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR13_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR13_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR14_SHIFT			_MK_SHIFT_CONST(14)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR14_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR14_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR15_SHIFT			_MK_SHIFT_CONST(15)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR15_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR15_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR16_SHIFT			_MK_SHIFT_CONST(16)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR16_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR16_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR17_SHIFT			_MK_SHIFT_CONST(17)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR17_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR17_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR18_SHIFT			_MK_SHIFT_CONST(18)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR18_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR18_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR19_SHIFT			_MK_SHIFT_CONST(19)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR19_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR19_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR20_SHIFT			_MK_SHIFT_CONST(20)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR20_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR20_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR21_SHIFT			_MK_SHIFT_CONST(21)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR21_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR21_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR22_SHIFT			_MK_SHIFT_CONST(22)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR22_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR22_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR23_SHIFT			_MK_SHIFT_CONST(23)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR23_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR23_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR24_SHIFT			_MK_SHIFT_CONST(24)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR24_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR24_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR25_SHIFT			_MK_SHIFT_CONST(25)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR25_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR25_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR26_SHIFT			_MK_SHIFT_CONST(26)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR26_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR26_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR27_SHIFT			_MK_SHIFT_CONST(27)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR27_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR27_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR28_SHIFT			_MK_SHIFT_CONST(28)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR28_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR28_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR29_SHIFT			_MK_SHIFT_CONST(29)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR29_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR29_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR30_SHIFT			_MK_SHIFT_CONST(30)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR30_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR30_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR31_SHIFT			_MK_SHIFT_CONST(31)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR31_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR31_SHIFT)
> +
> +
> +// Register NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0			_MK_ADDR_CONST(0xe03c)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR0_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR0_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR0_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR0_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR0_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR1_SHIFT			_MK_SHIFT_CONST(1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR1_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR1_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR1_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR1_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR2_SHIFT			_MK_SHIFT_CONST(2)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR2_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR2_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR2_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR2_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR3_SHIFT			_MK_SHIFT_CONST(3)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR3_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR3_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR3_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR3_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR4_SHIFT			_MK_SHIFT_CONST(4)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR4_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR4_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR4_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR4_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR5_SHIFT			_MK_SHIFT_CONST(5)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR5_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR5_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR5_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR5_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR6_SHIFT			_MK_SHIFT_CONST(6)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR6_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR6_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR6_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR6_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR7_SHIFT			_MK_SHIFT_CONST(7)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR7_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR7_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR7_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR7_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR8_SHIFT			_MK_SHIFT_CONST(8)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR8_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR8_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR8_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR8_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR15_SHIFT			_MK_SHIFT_CONST(15)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR15_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR15_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR15_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR15_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR16_SHIFT			_MK_SHIFT_CONST(16)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR16_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR16_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR16_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR16_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR17_SHIFT			_MK_SHIFT_CONST(17)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR17_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR17_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR17_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR17_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR18_SHIFT			_MK_SHIFT_CONST(18)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR18_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR18_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR18_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR18_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR19_SHIFT			_MK_SHIFT_CONST(19)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR19_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR19_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR19_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR19_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR20_SHIFT			_MK_SHIFT_CONST(20)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR20_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR20_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR20_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR20_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR21_SHIFT			_MK_SHIFT_CONST(21)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR21_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR21_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR21_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR21_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR22_SHIFT			_MK_SHIFT_CONST(22)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR22_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR22_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR22_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR22_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR23_SHIFT			_MK_SHIFT_CONST(23)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR23_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR23_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR23_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR23_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR24_SHIFT			_MK_SHIFT_CONST(24)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR24_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR24_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR24_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR24_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR25_SHIFT			_MK_SHIFT_CONST(25)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR25_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR25_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR25_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR25_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR26_SHIFT			_MK_SHIFT_CONST(26)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR26_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR26_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR26_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR26_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR27_SHIFT			_MK_SHIFT_CONST(27)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR27_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR27_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR27_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR27_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR28_SHIFT			_MK_SHIFT_CONST(28)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR28_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR28_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR28_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR28_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR29_SHIFT			_MK_SHIFT_CONST(29)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR29_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR29_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR29_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR29_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR30_SHIFT			_MK_SHIFT_CONST(30)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR30_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR30_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR30_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR30_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR31_SHIFT			_MK_SHIFT_CONST(31)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR31_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR31_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR31_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR31_ENABLE			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0			_MK_ADDR_CONST(0xe040)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR0_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR0_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR0_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR0_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR0_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR1_SHIFT			_MK_SHIFT_CONST(1)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR1_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR1_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR1_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR1_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR2_SHIFT			_MK_SHIFT_CONST(2)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR2_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR2_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR2_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR2_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR3_SHIFT			_MK_SHIFT_CONST(3)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR3_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR3_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR3_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR3_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR4_SHIFT			_MK_SHIFT_CONST(4)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR4_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR4_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR4_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR4_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR5_SHIFT			_MK_SHIFT_CONST(5)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR5_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR5_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR5_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR5_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR6_SHIFT			_MK_SHIFT_CONST(6)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR6_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR6_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR6_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR6_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR7_SHIFT			_MK_SHIFT_CONST(7)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR7_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR7_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR7_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR7_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR8_SHIFT			_MK_SHIFT_CONST(8)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR8_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR8_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR8_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR8_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR9_SHIFT			_MK_SHIFT_CONST(9)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR9_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR9_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR9_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR9_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR10_SHIFT			_MK_SHIFT_CONST(10)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR10_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR10_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR10_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR10_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR11_SHIFT			_MK_SHIFT_CONST(11)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR11_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR11_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR11_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR11_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR12_SHIFT			_MK_SHIFT_CONST(12)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR12_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR12_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR12_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR12_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR13_SHIFT			_MK_SHIFT_CONST(13)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR13_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR13_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR13_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR13_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR14_SHIFT			_MK_SHIFT_CONST(14)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR14_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR14_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR14_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR14_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR15_SHIFT			_MK_SHIFT_CONST(15)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR15_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR15_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR15_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR15_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR16_SHIFT			_MK_SHIFT_CONST(16)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR16_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR16_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR16_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR16_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR17_SHIFT			_MK_SHIFT_CONST(17)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR17_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR17_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR17_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR17_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR18_SHIFT			_MK_SHIFT_CONST(18)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR18_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR18_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR18_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR18_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR19_SHIFT			_MK_SHIFT_CONST(19)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR19_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR19_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR19_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR19_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR20_SHIFT			_MK_SHIFT_CONST(20)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR20_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR20_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR20_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR20_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR21_SHIFT			_MK_SHIFT_CONST(21)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR21_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR21_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR21_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR21_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR22_SHIFT			_MK_SHIFT_CONST(22)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR22_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR22_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR22_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR22_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR23_SHIFT			_MK_SHIFT_CONST(23)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR23_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR23_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR23_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR23_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR24_SHIFT			_MK_SHIFT_CONST(24)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR24_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR24_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR24_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR24_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR25_SHIFT			_MK_SHIFT_CONST(25)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR25_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR25_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR25_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR25_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR26_SHIFT			_MK_SHIFT_CONST(26)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR26_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR26_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR26_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR26_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR27_SHIFT			_MK_SHIFT_CONST(27)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR27_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR27_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR27_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR27_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR28_SHIFT			_MK_SHIFT_CONST(28)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR28_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR28_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR28_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR28_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR29_SHIFT			_MK_SHIFT_CONST(29)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR29_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR29_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR29_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR29_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR30_SHIFT			_MK_SHIFT_CONST(30)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR30_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR30_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR30_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR30_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR31_SHIFT			_MK_SHIFT_CONST(31)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR31_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR31_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR31_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR31_ENABLE			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0			_MK_ADDR_CONST(0xe044)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR0_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR0_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR0_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR0_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR0_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR1_SHIFT			_MK_SHIFT_CONST(1)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR1_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR1_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR1_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR1_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR2_SHIFT			_MK_SHIFT_CONST(2)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR2_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR2_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR2_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR2_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR3_SHIFT			_MK_SHIFT_CONST(3)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR3_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR3_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR3_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR3_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR4_SHIFT			_MK_SHIFT_CONST(4)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR4_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR4_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR4_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR4_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR5_SHIFT			_MK_SHIFT_CONST(5)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR5_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR5_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR5_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR5_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR6_SHIFT			_MK_SHIFT_CONST(6)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR6_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR6_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR6_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR6_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR7_SHIFT			_MK_SHIFT_CONST(7)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR7_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR7_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR7_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR7_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR8_SHIFT			_MK_SHIFT_CONST(8)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR8_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR8_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR8_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR8_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR9_SHIFT			_MK_SHIFT_CONST(9)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR9_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR9_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR9_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR9_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR10_SHIFT			_MK_SHIFT_CONST(10)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR10_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR10_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR10_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR10_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR11_SHIFT			_MK_SHIFT_CONST(11)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR11_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR11_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR11_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR11_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR12_SHIFT			_MK_SHIFT_CONST(12)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR12_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR12_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR12_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR12_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR13_SHIFT			_MK_SHIFT_CONST(13)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR13_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR13_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR13_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR13_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR14_SHIFT			_MK_SHIFT_CONST(14)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR14_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR14_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR14_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR14_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR15_SHIFT			_MK_SHIFT_CONST(15)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR15_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR15_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR15_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR15_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR16_SHIFT			_MK_SHIFT_CONST(16)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR16_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR16_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR16_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR16_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR17_SHIFT			_MK_SHIFT_CONST(17)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR17_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR17_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR17_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR17_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR18_SHIFT			_MK_SHIFT_CONST(18)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR18_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR18_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR18_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR18_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR19_SHIFT			_MK_SHIFT_CONST(19)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR19_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR19_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR19_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR19_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR20_SHIFT			_MK_SHIFT_CONST(20)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR20_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR20_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR20_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR20_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR21_SHIFT			_MK_SHIFT_CONST(21)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR21_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR21_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR21_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR21_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR22_SHIFT			_MK_SHIFT_CONST(22)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR22_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR22_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR22_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR22_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR23_SHIFT			_MK_SHIFT_CONST(23)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR23_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR23_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR23_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR23_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR24_SHIFT			_MK_SHIFT_CONST(24)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR24_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR24_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR24_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR24_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR25_SHIFT			_MK_SHIFT_CONST(25)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR25_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR25_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR25_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR25_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR26_SHIFT			_MK_SHIFT_CONST(26)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR26_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR26_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR26_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR26_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR27_SHIFT			_MK_SHIFT_CONST(27)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR27_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR27_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR27_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR27_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR28_SHIFT			_MK_SHIFT_CONST(28)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR28_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR28_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR28_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR28_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR29_SHIFT			_MK_SHIFT_CONST(29)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR29_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR29_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR29_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR29_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR30_SHIFT			_MK_SHIFT_CONST(30)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR30_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR30_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR30_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR30_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR31_SHIFT			_MK_SHIFT_CONST(31)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR31_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR31_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR31_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR31_FORCE			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0			_MK_ADDR_CONST(0xe048)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR0_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR0_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR0_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR1_SHIFT			_MK_SHIFT_CONST(1)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR1_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR1_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR2_SHIFT			_MK_SHIFT_CONST(2)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR2_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR2_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR3_SHIFT			_MK_SHIFT_CONST(3)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR3_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR3_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR4_SHIFT			_MK_SHIFT_CONST(4)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR4_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR4_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR5_SHIFT			_MK_SHIFT_CONST(5)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR5_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR5_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR6_SHIFT			_MK_SHIFT_CONST(6)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR6_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR6_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR7_SHIFT			_MK_SHIFT_CONST(7)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR7_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR7_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR8_SHIFT			_MK_SHIFT_CONST(8)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR8_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR8_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR9_SHIFT			_MK_SHIFT_CONST(9)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR9_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR9_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR10_SHIFT			_MK_SHIFT_CONST(10)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR10_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR10_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR11_SHIFT			_MK_SHIFT_CONST(11)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR11_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR11_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR12_SHIFT			_MK_SHIFT_CONST(12)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR12_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR12_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR13_SHIFT			_MK_SHIFT_CONST(13)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR13_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR13_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR14_SHIFT			_MK_SHIFT_CONST(14)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR14_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR14_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR15_SHIFT			_MK_SHIFT_CONST(15)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR15_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR15_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR16_SHIFT			_MK_SHIFT_CONST(16)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR16_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR16_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR17_SHIFT			_MK_SHIFT_CONST(17)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR17_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR17_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR18_SHIFT			_MK_SHIFT_CONST(18)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR18_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR18_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR19_SHIFT			_MK_SHIFT_CONST(19)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR19_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR19_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR20_SHIFT			_MK_SHIFT_CONST(20)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR20_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR20_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR21_SHIFT			_MK_SHIFT_CONST(21)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR21_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR21_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR22_SHIFT			_MK_SHIFT_CONST(22)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR22_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR22_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR23_SHIFT			_MK_SHIFT_CONST(23)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR23_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR23_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR24_SHIFT			_MK_SHIFT_CONST(24)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR24_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR24_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR25_SHIFT			_MK_SHIFT_CONST(25)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR25_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR25_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR26_SHIFT			_MK_SHIFT_CONST(26)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR26_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR26_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR27_SHIFT			_MK_SHIFT_CONST(27)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR27_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR27_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR28_SHIFT			_MK_SHIFT_CONST(28)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR28_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR28_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR29_SHIFT			_MK_SHIFT_CONST(29)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR29_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR29_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR30_SHIFT			_MK_SHIFT_CONST(30)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR30_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR30_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR31_SHIFT			_MK_SHIFT_CONST(31)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR31_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR31_SHIFT)
> +
> +
> +// Register NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0			_MK_ADDR_CONST(0xe050)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR0_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR0_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR0_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR0_NORELOAD			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR0_RELOAD			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR1_SHIFT			_MK_SHIFT_CONST(1)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR1_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR1_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR1_NORELOAD			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR1_RELOAD			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR2_SHIFT			_MK_SHIFT_CONST(2)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR2_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR2_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR2_NORELOAD			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR2_RELOAD			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR3_SHIFT			_MK_SHIFT_CONST(3)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR3_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR3_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR3_NORELOAD			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR3_RELOAD			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR4_SHIFT			_MK_SHIFT_CONST(4)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR4_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR4_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR4_NORELOAD			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR4_RELOAD			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR5_SHIFT			_MK_SHIFT_CONST(5)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR5_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR5_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR5_NORELOAD			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR5_RELOAD			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR6_SHIFT			_MK_SHIFT_CONST(6)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR6_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR6_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR6_NORELOAD			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR6_RELOAD			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR7_SHIFT			_MK_SHIFT_CONST(7)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR7_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR7_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR7_NORELOAD			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR7_RELOAD			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR8_SHIFT			_MK_SHIFT_CONST(8)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR8_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR8_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR8_NORELOAD			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR8_RELOAD			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR9_SHIFT			_MK_SHIFT_CONST(9)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR9_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR9_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR9_NORELOAD			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR9_RELOAD			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR10_SHIFT			_MK_SHIFT_CONST(10)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR10_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR10_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR10_NORELOAD			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR10_RELOAD			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR11_SHIFT			_MK_SHIFT_CONST(11)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR11_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR11_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR11_NORELOAD			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR11_RELOAD			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR12_SHIFT			_MK_SHIFT_CONST(12)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR12_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR12_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR12_NORELOAD			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR12_RELOAD			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR13_SHIFT			_MK_SHIFT_CONST(13)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR13_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR13_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR13_NORELOAD			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR13_RELOAD			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR14_SHIFT			_MK_SHIFT_CONST(14)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR14_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR14_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR14_NORELOAD			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR14_RELOAD			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR15_SHIFT			_MK_SHIFT_CONST(15)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR15_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR15_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR15_NORELOAD			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR15_RELOAD			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR16_SHIFT			_MK_SHIFT_CONST(16)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR16_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR16_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR16_NORELOAD			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR16_RELOAD			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR17_SHIFT			_MK_SHIFT_CONST(17)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR17_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR17_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR17_NORELOAD			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR17_RELOAD			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR18_SHIFT			_MK_SHIFT_CONST(18)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR18_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR18_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR18_NORELOAD			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR18_RELOAD			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR19_SHIFT			_MK_SHIFT_CONST(19)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR19_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR19_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR19_NORELOAD			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR19_RELOAD			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR20_SHIFT			_MK_SHIFT_CONST(20)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR20_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR20_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR20_NORELOAD			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR20_RELOAD			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR21_SHIFT			_MK_SHIFT_CONST(21)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR21_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR21_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR21_NORELOAD			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR21_RELOAD			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR22_SHIFT			_MK_SHIFT_CONST(22)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR22_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR22_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR22_NORELOAD			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR22_RELOAD			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR23_SHIFT			_MK_SHIFT_CONST(23)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR23_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR23_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR23_NORELOAD			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR23_RELOAD			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR24_SHIFT			_MK_SHIFT_CONST(24)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR24_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR24_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR24_NORELOAD			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR24_RELOAD			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR25_SHIFT			_MK_SHIFT_CONST(25)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR25_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR25_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR25_NORELOAD			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR25_RELOAD			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR26_SHIFT			_MK_SHIFT_CONST(26)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR26_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR26_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR26_NORELOAD			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR26_RELOAD			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR27_SHIFT			_MK_SHIFT_CONST(27)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR27_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR27_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR27_NORELOAD			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR27_RELOAD			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR28_SHIFT			_MK_SHIFT_CONST(28)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR28_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR28_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR28_NORELOAD			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR28_RELOAD			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR29_SHIFT			_MK_SHIFT_CONST(29)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR29_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR29_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR29_NORELOAD			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR29_RELOAD			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR30_SHIFT			_MK_SHIFT_CONST(30)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR30_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR30_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR30_NORELOAD			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR30_RELOAD			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR31_SHIFT			_MK_SHIFT_CONST(31)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR31_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR31_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR31_NORELOAD			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR31_RELOAD			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0			_MK_ADDR_CONST(0xe060)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR32_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR32_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR32_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR32_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR32_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR33_SHIFT			_MK_SHIFT_CONST(1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR33_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR33_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR33_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR33_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR34_SHIFT			_MK_SHIFT_CONST(2)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR34_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR34_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR34_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR34_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR35_SHIFT			_MK_SHIFT_CONST(3)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR35_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR35_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR35_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR35_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR36_SHIFT			_MK_SHIFT_CONST(4)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR36_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR36_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR36_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR36_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR37_SHIFT			_MK_SHIFT_CONST(5)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR37_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR37_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR37_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR37_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR38_SHIFT			_MK_SHIFT_CONST(6)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR38_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR38_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR38_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR38_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR39_SHIFT			_MK_SHIFT_CONST(7)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR39_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR39_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR39_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR39_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR40_SHIFT			_MK_SHIFT_CONST(8)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR40_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR40_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR40_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR40_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR41_SHIFT			_MK_SHIFT_CONST(9)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR41_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR41_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR41_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR41_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR42_SHIFT			_MK_SHIFT_CONST(10)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR42_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR42_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR42_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR42_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR43_SHIFT			_MK_SHIFT_CONST(11)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR43_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR43_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR43_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR43_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR44_SHIFT			_MK_SHIFT_CONST(12)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR44_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR44_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR44_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR44_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR45_SHIFT			_MK_SHIFT_CONST(13)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR45_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR45_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR45_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR45_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR46_SHIFT			_MK_SHIFT_CONST(14)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR46_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR46_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR46_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR46_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR47_SHIFT			_MK_SHIFT_CONST(15)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR47_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR47_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR47_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR47_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR48_SHIFT			_MK_SHIFT_CONST(16)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR48_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR48_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR48_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR48_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR49_SHIFT			_MK_SHIFT_CONST(17)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR49_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR49_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR49_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR49_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR50_SHIFT			_MK_SHIFT_CONST(18)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR50_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR50_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR50_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR50_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR51_SHIFT			_MK_SHIFT_CONST(19)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR51_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR51_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR51_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR51_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR52_SHIFT			_MK_SHIFT_CONST(20)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR52_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR52_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR52_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR52_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR53_SHIFT			_MK_SHIFT_CONST(21)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR53_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR53_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR53_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR53_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR54_SHIFT			_MK_SHIFT_CONST(22)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR54_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR54_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR54_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR54_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR55_SHIFT			_MK_SHIFT_CONST(23)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR55_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR55_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR55_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR55_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR56_SHIFT			_MK_SHIFT_CONST(24)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR56_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR56_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR56_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR56_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR57_SHIFT			_MK_SHIFT_CONST(25)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR57_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR57_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR57_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR57_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR58_SHIFT			_MK_SHIFT_CONST(26)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR58_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR58_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR58_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR58_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR59_SHIFT			_MK_SHIFT_CONST(27)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR59_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR59_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR59_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR59_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR60_SHIFT			_MK_SHIFT_CONST(28)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR60_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR60_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR60_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR60_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR61_SHIFT			_MK_SHIFT_CONST(29)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR61_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR61_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR61_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR61_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR62_SHIFT			_MK_SHIFT_CONST(30)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR62_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR62_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR62_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR62_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR63_SHIFT			_MK_SHIFT_CONST(31)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR63_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR63_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR63_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR63_ENABLE			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0			_MK_ADDR_CONST(0xe064)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR32_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR32_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR32_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR32_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR32_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR33_SHIFT			_MK_SHIFT_CONST(1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR33_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR33_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR33_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR33_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR34_SHIFT			_MK_SHIFT_CONST(2)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR34_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR34_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR34_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR34_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR35_SHIFT			_MK_SHIFT_CONST(3)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR35_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR35_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR35_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR35_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR36_SHIFT			_MK_SHIFT_CONST(4)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR36_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR36_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR36_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR36_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR37_SHIFT			_MK_SHIFT_CONST(5)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR37_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR37_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR37_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR37_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR38_SHIFT			_MK_SHIFT_CONST(6)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR38_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR38_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR38_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR38_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR39_SHIFT			_MK_SHIFT_CONST(7)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR39_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR39_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR39_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR39_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR40_SHIFT			_MK_SHIFT_CONST(8)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR40_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR40_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR40_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR40_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR41_SHIFT			_MK_SHIFT_CONST(9)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR41_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR41_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR41_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR41_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR42_SHIFT			_MK_SHIFT_CONST(10)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR42_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR42_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR42_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR42_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR43_SHIFT			_MK_SHIFT_CONST(11)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR43_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR43_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR43_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR43_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR44_SHIFT			_MK_SHIFT_CONST(12)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR44_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR44_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR44_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR44_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR45_SHIFT			_MK_SHIFT_CONST(13)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR45_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR45_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR45_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR45_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR46_SHIFT			_MK_SHIFT_CONST(14)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR46_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR46_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR46_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR46_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR47_SHIFT			_MK_SHIFT_CONST(15)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR47_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR47_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR47_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR47_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR48_SHIFT			_MK_SHIFT_CONST(16)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR48_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR48_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR48_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR48_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR49_SHIFT			_MK_SHIFT_CONST(17)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR49_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR49_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR49_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR49_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR50_SHIFT			_MK_SHIFT_CONST(18)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR50_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR50_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR50_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR50_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR51_SHIFT			_MK_SHIFT_CONST(19)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR51_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR51_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR51_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR51_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR52_SHIFT			_MK_SHIFT_CONST(20)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR52_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR52_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR52_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR52_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR53_SHIFT			_MK_SHIFT_CONST(21)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR53_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR53_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR53_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR53_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR54_SHIFT			_MK_SHIFT_CONST(22)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR54_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR54_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR54_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR54_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR55_SHIFT			_MK_SHIFT_CONST(23)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR55_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR55_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR55_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR55_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR56_SHIFT			_MK_SHIFT_CONST(24)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR56_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR56_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR56_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR56_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR57_SHIFT			_MK_SHIFT_CONST(25)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR57_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR57_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR57_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR57_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR58_SHIFT			_MK_SHIFT_CONST(26)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR58_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR58_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR58_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR58_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR59_SHIFT			_MK_SHIFT_CONST(27)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR59_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR59_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR59_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR59_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR60_SHIFT			_MK_SHIFT_CONST(28)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR60_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR60_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR60_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR60_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR61_SHIFT			_MK_SHIFT_CONST(29)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR61_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR61_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR61_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR61_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR62_SHIFT			_MK_SHIFT_CONST(30)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR62_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR62_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR62_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR62_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR63_SHIFT			_MK_SHIFT_CONST(31)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR63_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR63_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR63_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR63_FORCE			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0			_MK_ADDR_CONST(0xe068)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR32_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR32_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR32_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR33_SHIFT			_MK_SHIFT_CONST(1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR33_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR33_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR34_SHIFT			_MK_SHIFT_CONST(2)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR34_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR34_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR35_SHIFT			_MK_SHIFT_CONST(3)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR35_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR35_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR36_SHIFT			_MK_SHIFT_CONST(4)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR36_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR36_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR37_SHIFT			_MK_SHIFT_CONST(5)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR37_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR37_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR38_SHIFT			_MK_SHIFT_CONST(6)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR38_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR38_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR39_SHIFT			_MK_SHIFT_CONST(7)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR39_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR39_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR40_SHIFT			_MK_SHIFT_CONST(8)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR40_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR40_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR41_SHIFT			_MK_SHIFT_CONST(9)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR41_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR41_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR42_SHIFT			_MK_SHIFT_CONST(10)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR42_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR42_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR43_SHIFT			_MK_SHIFT_CONST(11)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR43_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR43_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR44_SHIFT			_MK_SHIFT_CONST(12)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR44_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR44_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR45_SHIFT			_MK_SHIFT_CONST(13)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR45_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR45_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR46_SHIFT			_MK_SHIFT_CONST(14)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR46_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR46_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR47_SHIFT			_MK_SHIFT_CONST(15)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR47_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR47_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR48_SHIFT			_MK_SHIFT_CONST(16)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR48_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR48_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR49_SHIFT			_MK_SHIFT_CONST(17)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR49_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR49_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR50_SHIFT			_MK_SHIFT_CONST(18)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR50_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR50_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR51_SHIFT			_MK_SHIFT_CONST(19)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR51_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR51_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR52_SHIFT			_MK_SHIFT_CONST(20)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR52_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR52_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR53_SHIFT			_MK_SHIFT_CONST(21)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR53_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR53_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR54_SHIFT			_MK_SHIFT_CONST(22)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR54_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR54_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR55_SHIFT			_MK_SHIFT_CONST(23)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR55_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR55_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR56_SHIFT			_MK_SHIFT_CONST(24)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR56_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR56_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR57_SHIFT			_MK_SHIFT_CONST(25)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR57_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR57_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR58_SHIFT			_MK_SHIFT_CONST(26)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR58_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR58_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR59_SHIFT			_MK_SHIFT_CONST(27)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR59_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR59_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR60_SHIFT			_MK_SHIFT_CONST(28)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR60_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR60_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR61_SHIFT			_MK_SHIFT_CONST(29)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR61_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR61_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR62_SHIFT			_MK_SHIFT_CONST(30)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR62_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR62_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR63_SHIFT			_MK_SHIFT_CONST(31)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR63_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR63_SHIFT)
> +
> +
> +// Register NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0			_MK_ADDR_CONST(0xe06c)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR32_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR32_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR32_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR32_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR32_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR33_SHIFT			_MK_SHIFT_CONST(1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR33_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR33_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR33_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR33_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR34_SHIFT			_MK_SHIFT_CONST(2)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR34_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR34_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR34_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR34_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR35_SHIFT			_MK_SHIFT_CONST(3)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR35_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR35_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR35_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR35_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR36_SHIFT			_MK_SHIFT_CONST(4)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR36_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR36_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR36_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR36_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR37_SHIFT			_MK_SHIFT_CONST(5)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR37_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR37_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR37_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR37_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR38_SHIFT			_MK_SHIFT_CONST(6)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR38_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR38_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR38_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR38_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR39_SHIFT			_MK_SHIFT_CONST(7)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR39_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR39_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR39_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR39_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR40_SHIFT			_MK_SHIFT_CONST(8)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR40_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR40_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR40_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR40_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR41_SHIFT			_MK_SHIFT_CONST(9)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR41_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR41_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR41_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR41_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR42_SHIFT			_MK_SHIFT_CONST(10)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR42_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR42_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR42_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR42_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR43_SHIFT			_MK_SHIFT_CONST(11)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR43_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR43_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR43_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR43_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR44_SHIFT			_MK_SHIFT_CONST(12)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR44_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR44_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR44_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR44_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR45_SHIFT			_MK_SHIFT_CONST(13)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR45_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR45_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR45_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR45_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR46_SHIFT			_MK_SHIFT_CONST(14)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR46_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR46_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR46_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR46_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR47_SHIFT			_MK_SHIFT_CONST(15)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR47_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR47_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR47_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR47_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR48_SHIFT			_MK_SHIFT_CONST(16)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR48_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR48_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR48_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR48_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR49_SHIFT			_MK_SHIFT_CONST(17)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR49_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR49_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR49_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR49_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR50_SHIFT			_MK_SHIFT_CONST(18)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR50_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR50_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR50_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR50_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR51_SHIFT			_MK_SHIFT_CONST(19)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR51_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR51_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR51_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR51_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR52_SHIFT			_MK_SHIFT_CONST(20)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR52_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR52_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR52_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR52_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR53_SHIFT			_MK_SHIFT_CONST(21)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR53_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR53_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR53_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR53_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR54_SHIFT			_MK_SHIFT_CONST(22)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR54_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR54_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR54_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR54_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR55_SHIFT			_MK_SHIFT_CONST(23)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR55_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR55_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR55_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR55_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR56_SHIFT			_MK_SHIFT_CONST(24)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR56_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR56_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR56_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR56_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR57_SHIFT			_MK_SHIFT_CONST(25)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR57_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR57_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR57_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR57_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR58_SHIFT			_MK_SHIFT_CONST(26)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR58_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR58_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR58_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR58_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR59_SHIFT			_MK_SHIFT_CONST(27)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR59_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR59_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR59_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR59_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR60_SHIFT			_MK_SHIFT_CONST(28)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR60_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR60_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR60_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR60_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR61_SHIFT			_MK_SHIFT_CONST(29)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR61_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR61_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR61_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR61_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR62_SHIFT			_MK_SHIFT_CONST(30)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR62_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR62_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR62_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR62_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR63_SHIFT			_MK_SHIFT_CONST(31)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR63_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR63_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR63_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR63_ENABLE			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0			_MK_ADDR_CONST(0xe070)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR32_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR32_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR32_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR32_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR32_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR33_SHIFT			_MK_SHIFT_CONST(1)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR33_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR33_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR33_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR33_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR34_SHIFT			_MK_SHIFT_CONST(2)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR34_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR34_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR34_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR34_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR35_SHIFT			_MK_SHIFT_CONST(3)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR35_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR35_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR35_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR35_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR36_SHIFT			_MK_SHIFT_CONST(4)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR36_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR36_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR36_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR36_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR37_SHIFT			_MK_SHIFT_CONST(5)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR37_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR37_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR37_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR37_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR38_SHIFT			_MK_SHIFT_CONST(6)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR38_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR38_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR38_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR38_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR39_SHIFT			_MK_SHIFT_CONST(7)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR39_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR39_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR39_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR39_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR40_SHIFT			_MK_SHIFT_CONST(8)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR40_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR40_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR40_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR40_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR41_SHIFT			_MK_SHIFT_CONST(9)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR41_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR41_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR41_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR41_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR42_SHIFT			_MK_SHIFT_CONST(10)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR42_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR42_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR42_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR42_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR43_SHIFT			_MK_SHIFT_CONST(11)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR43_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR43_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR43_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR43_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR44_SHIFT			_MK_SHIFT_CONST(12)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR44_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR44_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR44_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR44_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR45_SHIFT			_MK_SHIFT_CONST(13)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR45_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR45_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR45_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR45_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR46_SHIFT			_MK_SHIFT_CONST(14)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR46_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR46_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR46_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR46_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR47_SHIFT			_MK_SHIFT_CONST(15)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR47_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR47_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR47_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR47_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR48_SHIFT			_MK_SHIFT_CONST(16)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR48_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR48_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR48_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR48_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR49_SHIFT			_MK_SHIFT_CONST(17)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR49_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR49_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR49_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR49_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR50_SHIFT			_MK_SHIFT_CONST(18)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR50_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR50_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR50_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR50_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR51_SHIFT			_MK_SHIFT_CONST(19)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR51_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR51_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR51_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR51_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR52_SHIFT			_MK_SHIFT_CONST(20)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR52_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR52_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR52_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR52_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR53_SHIFT			_MK_SHIFT_CONST(21)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR53_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR53_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR53_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR53_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR54_SHIFT			_MK_SHIFT_CONST(22)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR54_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR54_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR54_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR54_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR55_SHIFT			_MK_SHIFT_CONST(23)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR55_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR55_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR55_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR55_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR56_SHIFT			_MK_SHIFT_CONST(24)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR56_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR56_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR56_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR56_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR57_SHIFT			_MK_SHIFT_CONST(25)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR57_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR57_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR57_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR57_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR58_SHIFT			_MK_SHIFT_CONST(26)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR58_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR58_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR58_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR58_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR59_SHIFT			_MK_SHIFT_CONST(27)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR59_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR59_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR59_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR59_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR60_SHIFT			_MK_SHIFT_CONST(28)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR60_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR60_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR60_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR60_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR61_SHIFT			_MK_SHIFT_CONST(29)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR61_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR61_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR61_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR61_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR62_SHIFT			_MK_SHIFT_CONST(30)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR62_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR62_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR62_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR62_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR63_SHIFT			_MK_SHIFT_CONST(31)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR63_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR63_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR63_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR63_ENABLE			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0			_MK_ADDR_CONST(0xe074)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR32_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR32_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR32_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR32_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR32_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR33_SHIFT			_MK_SHIFT_CONST(1)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR33_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR33_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR33_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR33_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR34_SHIFT			_MK_SHIFT_CONST(2)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR34_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR34_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR34_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR34_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR35_SHIFT			_MK_SHIFT_CONST(3)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR35_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR35_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR35_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR35_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR36_SHIFT			_MK_SHIFT_CONST(4)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR36_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR36_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR36_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR36_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR37_SHIFT			_MK_SHIFT_CONST(5)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR37_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR37_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR37_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR37_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR38_SHIFT			_MK_SHIFT_CONST(6)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR38_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR38_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR38_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR38_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR39_SHIFT			_MK_SHIFT_CONST(7)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR39_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR39_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR39_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR39_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR40_SHIFT			_MK_SHIFT_CONST(8)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR40_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR40_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR40_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR40_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR41_SHIFT			_MK_SHIFT_CONST(9)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR41_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR41_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR41_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR41_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR42_SHIFT			_MK_SHIFT_CONST(10)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR42_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR42_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR42_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR42_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR43_SHIFT			_MK_SHIFT_CONST(11)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR43_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR43_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR43_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR43_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR44_SHIFT			_MK_SHIFT_CONST(12)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR44_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR44_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR44_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR44_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR45_SHIFT			_MK_SHIFT_CONST(13)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR45_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR45_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR45_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR45_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR46_SHIFT			_MK_SHIFT_CONST(14)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR46_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR46_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR46_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR46_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR47_SHIFT			_MK_SHIFT_CONST(15)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR47_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR47_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR47_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR47_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR48_SHIFT			_MK_SHIFT_CONST(16)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR48_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR48_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR48_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR48_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR49_SHIFT			_MK_SHIFT_CONST(17)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR49_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR49_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR49_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR49_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR50_SHIFT			_MK_SHIFT_CONST(18)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR50_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR50_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR50_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR50_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR51_SHIFT			_MK_SHIFT_CONST(19)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR51_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR51_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR51_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR51_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR52_SHIFT			_MK_SHIFT_CONST(20)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR52_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR52_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR52_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR52_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR53_SHIFT			_MK_SHIFT_CONST(21)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR53_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR53_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR53_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR53_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR54_SHIFT			_MK_SHIFT_CONST(22)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR54_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR54_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR54_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR54_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR55_SHIFT			_MK_SHIFT_CONST(23)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR55_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR55_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR55_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR55_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR56_SHIFT			_MK_SHIFT_CONST(24)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR56_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR56_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR56_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR56_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR57_SHIFT			_MK_SHIFT_CONST(25)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR57_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR57_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR57_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR57_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR58_SHIFT			_MK_SHIFT_CONST(26)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR58_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR58_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR58_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR58_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR59_SHIFT			_MK_SHIFT_CONST(27)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR59_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR59_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR59_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR59_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR60_SHIFT			_MK_SHIFT_CONST(28)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR60_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR60_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR60_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR60_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR61_SHIFT			_MK_SHIFT_CONST(29)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR61_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR61_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR61_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR61_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR62_SHIFT			_MK_SHIFT_CONST(30)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR62_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR62_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR62_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR62_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR63_SHIFT			_MK_SHIFT_CONST(31)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR63_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR63_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR63_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR63_FORCE			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0			_MK_ADDR_CONST(0xe078)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR32_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR32_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR32_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR33_SHIFT			_MK_SHIFT_CONST(1)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR33_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR33_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR34_SHIFT			_MK_SHIFT_CONST(2)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR34_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR34_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR35_SHIFT			_MK_SHIFT_CONST(3)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR35_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR35_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR36_SHIFT			_MK_SHIFT_CONST(4)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR36_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR36_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR37_SHIFT			_MK_SHIFT_CONST(5)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR37_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR37_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR38_SHIFT			_MK_SHIFT_CONST(6)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR38_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR38_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR39_SHIFT			_MK_SHIFT_CONST(7)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR39_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR39_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR40_SHIFT			_MK_SHIFT_CONST(8)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR40_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR40_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR41_SHIFT			_MK_SHIFT_CONST(9)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR41_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR41_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR42_SHIFT			_MK_SHIFT_CONST(10)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR42_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR42_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR43_SHIFT			_MK_SHIFT_CONST(11)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR43_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR43_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR44_SHIFT			_MK_SHIFT_CONST(12)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR44_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR44_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR45_SHIFT			_MK_SHIFT_CONST(13)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR45_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR45_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR46_SHIFT			_MK_SHIFT_CONST(14)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR46_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR46_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR47_SHIFT			_MK_SHIFT_CONST(15)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR47_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR47_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR48_SHIFT			_MK_SHIFT_CONST(16)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR48_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR48_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR49_SHIFT			_MK_SHIFT_CONST(17)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR49_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR49_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR50_SHIFT			_MK_SHIFT_CONST(18)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR50_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR50_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR51_SHIFT			_MK_SHIFT_CONST(19)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR51_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR51_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR52_SHIFT			_MK_SHIFT_CONST(20)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR52_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR52_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR53_SHIFT			_MK_SHIFT_CONST(21)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR53_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR53_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR54_SHIFT			_MK_SHIFT_CONST(22)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR54_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR54_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR55_SHIFT			_MK_SHIFT_CONST(23)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR55_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR55_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR56_SHIFT			_MK_SHIFT_CONST(24)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR56_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR56_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR57_SHIFT			_MK_SHIFT_CONST(25)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR57_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR57_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR58_SHIFT			_MK_SHIFT_CONST(26)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR58_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR58_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR59_SHIFT			_MK_SHIFT_CONST(27)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR59_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR59_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR60_SHIFT			_MK_SHIFT_CONST(28)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR60_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR60_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR61_SHIFT			_MK_SHIFT_CONST(29)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR61_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR61_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR62_SHIFT			_MK_SHIFT_CONST(30)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR62_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR62_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR63_SHIFT			_MK_SHIFT_CONST(31)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR63_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR63_SHIFT)
> +
> +
> +// Register NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0			_MK_ADDR_CONST(0xe080)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR32_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR32_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR32_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR32_NORELOAD			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR32_RELOAD			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR33_SHIFT			_MK_SHIFT_CONST(1)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR33_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR33_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR33_NORELOAD			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR33_RELOAD			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR34_SHIFT			_MK_SHIFT_CONST(2)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR34_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR34_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR34_NORELOAD			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR34_RELOAD			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR35_SHIFT			_MK_SHIFT_CONST(3)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR35_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR35_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR35_NORELOAD			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR35_RELOAD			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR36_SHIFT			_MK_SHIFT_CONST(4)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR36_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR36_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR36_NORELOAD			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR36_RELOAD			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR37_SHIFT			_MK_SHIFT_CONST(5)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR37_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR37_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR37_NORELOAD			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR37_RELOAD			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR38_SHIFT			_MK_SHIFT_CONST(6)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR38_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR38_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR38_NORELOAD			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR38_RELOAD			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR39_SHIFT			_MK_SHIFT_CONST(7)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR39_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR39_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR39_NORELOAD			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR39_RELOAD			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR40_SHIFT			_MK_SHIFT_CONST(8)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR40_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR40_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR40_NORELOAD			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR40_RELOAD			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR41_SHIFT			_MK_SHIFT_CONST(9)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR41_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR41_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR41_NORELOAD			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR41_RELOAD			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR42_SHIFT			_MK_SHIFT_CONST(10)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR42_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR42_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR42_NORELOAD			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR42_RELOAD			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR43_SHIFT			_MK_SHIFT_CONST(11)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR43_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR43_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR43_NORELOAD			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR43_RELOAD			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR44_SHIFT			_MK_SHIFT_CONST(12)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR44_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR44_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR44_NORELOAD			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR44_RELOAD			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR45_SHIFT			_MK_SHIFT_CONST(13)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR45_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR45_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR45_NORELOAD			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR45_RELOAD			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR46_SHIFT			_MK_SHIFT_CONST(14)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR46_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR46_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR46_NORELOAD			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR46_RELOAD			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR47_SHIFT			_MK_SHIFT_CONST(15)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR47_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR47_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR47_NORELOAD			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR47_RELOAD			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR48_SHIFT			_MK_SHIFT_CONST(16)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR48_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR48_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR48_NORELOAD			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR48_RELOAD			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR49_SHIFT			_MK_SHIFT_CONST(17)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR49_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR49_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR49_NORELOAD			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR49_RELOAD			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR50_SHIFT			_MK_SHIFT_CONST(18)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR50_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR50_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR50_NORELOAD			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR50_RELOAD			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR51_SHIFT			_MK_SHIFT_CONST(19)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR51_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR51_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR51_NORELOAD			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR51_RELOAD			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR52_SHIFT			_MK_SHIFT_CONST(20)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR52_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR52_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR52_NORELOAD			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR52_RELOAD			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR53_SHIFT			_MK_SHIFT_CONST(21)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR53_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR53_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR53_NORELOAD			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR53_RELOAD			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR54_SHIFT			_MK_SHIFT_CONST(22)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR54_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR54_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR54_NORELOAD			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR54_RELOAD			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR55_SHIFT			_MK_SHIFT_CONST(23)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR55_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR55_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR55_NORELOAD			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR55_RELOAD			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR56_SHIFT			_MK_SHIFT_CONST(24)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR56_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR56_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR56_NORELOAD			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR56_RELOAD			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR57_SHIFT			_MK_SHIFT_CONST(25)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR57_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR57_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR57_NORELOAD			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR57_RELOAD			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR58_SHIFT			_MK_SHIFT_CONST(26)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR58_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR58_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR58_NORELOAD			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR58_RELOAD			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR59_SHIFT			_MK_SHIFT_CONST(27)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR59_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR59_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR59_NORELOAD			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR59_RELOAD			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR60_SHIFT			_MK_SHIFT_CONST(28)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR60_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR60_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR60_NORELOAD			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR60_RELOAD			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR61_SHIFT			_MK_SHIFT_CONST(29)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR61_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR61_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR61_NORELOAD			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR61_RELOAD			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR62_SHIFT			_MK_SHIFT_CONST(30)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR62_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR62_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR62_NORELOAD			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR62_RELOAD			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR63_SHIFT			_MK_SHIFT_CONST(31)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR63_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR63_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR63_NORELOAD			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR63_RELOAD			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register NVDLA_GEC_ERRSLICE1_MISSIONERR_ECC_CORRECTION_DIS_0
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ECC_CORRECTION_DIS_0			_MK_ADDR_CONST(0xe084)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ECC_CORRECTION_DIS_0_ERR63_SHIFT			_MK_SHIFT_CONST(31)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ECC_CORRECTION_DIS_0_ERR63_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_ECC_CORRECTION_DIS_0_ERR63_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ECC_CORRECTION_DIS_0_ERR63_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ECC_CORRECTION_DIS_0_ERR63_ENABLE			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register NVDLA_GEC_ERRSLICE2_MISSIONERR_ENABLE_0
> +#define NVDLA_GEC_ERRSLICE2_MISSIONERR_ENABLE_0			_MK_ADDR_CONST(0xe090)
> +#define NVDLA_GEC_ERRSLICE2_MISSIONERR_ENABLE_0_ERR64_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_GEC_ERRSLICE2_MISSIONERR_ENABLE_0_ERR64_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE2_MISSIONERR_ENABLE_0_ERR64_SHIFT)
> +#define NVDLA_GEC_ERRSLICE2_MISSIONERR_ENABLE_0_ERR64_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE2_MISSIONERR_ENABLE_0_ERR64_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE2_MISSIONERR_ENABLE_0_ERR65_SHIFT			_MK_SHIFT_CONST(1)
> +#define NVDLA_GEC_ERRSLICE2_MISSIONERR_ENABLE_0_ERR65_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE2_MISSIONERR_ENABLE_0_ERR65_SHIFT)
> +#define NVDLA_GEC_ERRSLICE2_MISSIONERR_ENABLE_0_ERR65_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE2_MISSIONERR_ENABLE_0_ERR65_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE2_MISSIONERR_ENABLE_0_ERR66_SHIFT			_MK_SHIFT_CONST(2)
> +#define NVDLA_GEC_ERRSLICE2_MISSIONERR_ENABLE_0_ERR66_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE2_MISSIONERR_ENABLE_0_ERR66_SHIFT)
> +#define NVDLA_GEC_ERRSLICE2_MISSIONERR_ENABLE_0_ERR66_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE2_MISSIONERR_ENABLE_0_ERR66_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE2_MISSIONERR_ENABLE_0_ERR67_SHIFT			_MK_SHIFT_CONST(3)
> +#define NVDLA_GEC_ERRSLICE2_MISSIONERR_ENABLE_0_ERR67_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE2_MISSIONERR_ENABLE_0_ERR67_SHIFT)
> +#define NVDLA_GEC_ERRSLICE2_MISSIONERR_ENABLE_0_ERR67_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE2_MISSIONERR_ENABLE_0_ERR67_ENABLE			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register NVDLA_GEC_ERRSLICE2_MISSIONERR_FORCE_0
> +#define NVDLA_GEC_ERRSLICE2_MISSIONERR_FORCE_0			_MK_ADDR_CONST(0xe094)
> +#define NVDLA_GEC_ERRSLICE2_MISSIONERR_FORCE_0_ERR64_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_GEC_ERRSLICE2_MISSIONERR_FORCE_0_ERR64_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE2_MISSIONERR_FORCE_0_ERR64_SHIFT)
> +#define NVDLA_GEC_ERRSLICE2_MISSIONERR_FORCE_0_ERR64_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE2_MISSIONERR_FORCE_0_ERR64_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE2_MISSIONERR_FORCE_0_ERR65_SHIFT			_MK_SHIFT_CONST(1)
> +#define NVDLA_GEC_ERRSLICE2_MISSIONERR_FORCE_0_ERR65_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE2_MISSIONERR_FORCE_0_ERR65_SHIFT)
> +#define NVDLA_GEC_ERRSLICE2_MISSIONERR_FORCE_0_ERR65_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE2_MISSIONERR_FORCE_0_ERR65_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE2_MISSIONERR_FORCE_0_ERR66_SHIFT			_MK_SHIFT_CONST(2)
> +#define NVDLA_GEC_ERRSLICE2_MISSIONERR_FORCE_0_ERR66_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE2_MISSIONERR_FORCE_0_ERR66_SHIFT)
> +#define NVDLA_GEC_ERRSLICE2_MISSIONERR_FORCE_0_ERR66_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE2_MISSIONERR_FORCE_0_ERR66_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE2_MISSIONERR_FORCE_0_ERR67_SHIFT			_MK_SHIFT_CONST(3)
> +#define NVDLA_GEC_ERRSLICE2_MISSIONERR_FORCE_0_ERR67_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE2_MISSIONERR_FORCE_0_ERR67_SHIFT)
> +#define NVDLA_GEC_ERRSLICE2_MISSIONERR_FORCE_0_ERR67_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE2_MISSIONERR_FORCE_0_ERR67_FORCE			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register NVDLA_GEC_ERRSLICE2_MISSIONERR_STATUS_0
> +#define NVDLA_GEC_ERRSLICE2_MISSIONERR_STATUS_0			_MK_ADDR_CONST(0xe098)
> +#define NVDLA_GEC_ERRSLICE2_MISSIONERR_STATUS_0_ERR64_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_GEC_ERRSLICE2_MISSIONERR_STATUS_0_ERR64_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE2_MISSIONERR_STATUS_0_ERR64_SHIFT)
> +#define NVDLA_GEC_ERRSLICE2_MISSIONERR_STATUS_0_ERR65_SHIFT			_MK_SHIFT_CONST(1)
> +#define NVDLA_GEC_ERRSLICE2_MISSIONERR_STATUS_0_ERR65_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE2_MISSIONERR_STATUS_0_ERR65_SHIFT)
> +#define NVDLA_GEC_ERRSLICE2_MISSIONERR_STATUS_0_ERR66_SHIFT			_MK_SHIFT_CONST(2)
> +#define NVDLA_GEC_ERRSLICE2_MISSIONERR_STATUS_0_ERR66_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE2_MISSIONERR_STATUS_0_ERR66_SHIFT)
> +#define NVDLA_GEC_ERRSLICE2_MISSIONERR_STATUS_0_ERR67_SHIFT			_MK_SHIFT_CONST(3)
> +#define NVDLA_GEC_ERRSLICE2_MISSIONERR_STATUS_0_ERR67_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE2_MISSIONERR_STATUS_0_ERR67_SHIFT)
> +
> +
> +// Register NVDLA_GEC_ERRSLICE2_MISSIONERR_INJECT_0
> +#define NVDLA_GEC_ERRSLICE2_MISSIONERR_INJECT_0			_MK_ADDR_CONST(0xe09c)
> +#define NVDLA_GEC_ERRSLICE2_MISSIONERR_INJECT_0_ERR64_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_GEC_ERRSLICE2_MISSIONERR_INJECT_0_ERR64_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE2_MISSIONERR_INJECT_0_ERR64_SHIFT)
> +#define NVDLA_GEC_ERRSLICE2_MISSIONERR_INJECT_0_ERR64_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE2_MISSIONERR_INJECT_0_ERR64_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE2_MISSIONERR_INJECT_0_ERR65_SHIFT			_MK_SHIFT_CONST(1)
> +#define NVDLA_GEC_ERRSLICE2_MISSIONERR_INJECT_0_ERR65_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE2_MISSIONERR_INJECT_0_ERR65_SHIFT)
> +#define NVDLA_GEC_ERRSLICE2_MISSIONERR_INJECT_0_ERR65_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE2_MISSIONERR_INJECT_0_ERR65_ENABLE			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register NVDLA_GEC_ERRSLICE2_LATENTERR_ENABLE_0
> +#define NVDLA_GEC_ERRSLICE2_LATENTERR_ENABLE_0			_MK_ADDR_CONST(0xe0a0)
> +#define NVDLA_GEC_ERRSLICE2_LATENTERR_ENABLE_0_ERR64_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_GEC_ERRSLICE2_LATENTERR_ENABLE_0_ERR64_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE2_LATENTERR_ENABLE_0_ERR64_SHIFT)
> +#define NVDLA_GEC_ERRSLICE2_LATENTERR_ENABLE_0_ERR64_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE2_LATENTERR_ENABLE_0_ERR64_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE2_LATENTERR_ENABLE_0_ERR65_SHIFT			_MK_SHIFT_CONST(1)
> +#define NVDLA_GEC_ERRSLICE2_LATENTERR_ENABLE_0_ERR65_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE2_LATENTERR_ENABLE_0_ERR65_SHIFT)
> +#define NVDLA_GEC_ERRSLICE2_LATENTERR_ENABLE_0_ERR65_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE2_LATENTERR_ENABLE_0_ERR65_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE2_LATENTERR_ENABLE_0_ERR66_SHIFT			_MK_SHIFT_CONST(2)
> +#define NVDLA_GEC_ERRSLICE2_LATENTERR_ENABLE_0_ERR66_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE2_LATENTERR_ENABLE_0_ERR66_SHIFT)
> +#define NVDLA_GEC_ERRSLICE2_LATENTERR_ENABLE_0_ERR66_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE2_LATENTERR_ENABLE_0_ERR66_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE2_LATENTERR_ENABLE_0_ERR67_SHIFT			_MK_SHIFT_CONST(3)
> +#define NVDLA_GEC_ERRSLICE2_LATENTERR_ENABLE_0_ERR67_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE2_LATENTERR_ENABLE_0_ERR67_SHIFT)
> +#define NVDLA_GEC_ERRSLICE2_LATENTERR_ENABLE_0_ERR67_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE2_LATENTERR_ENABLE_0_ERR67_ENABLE			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register NVDLA_GEC_ERRSLICE2_LATENTERR_FORCE_0
> +#define NVDLA_GEC_ERRSLICE2_LATENTERR_FORCE_0			_MK_ADDR_CONST(0xe0a4)
> +#define NVDLA_GEC_ERRSLICE2_LATENTERR_FORCE_0_ERR64_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_GEC_ERRSLICE2_LATENTERR_FORCE_0_ERR64_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE2_LATENTERR_FORCE_0_ERR64_SHIFT)
> +#define NVDLA_GEC_ERRSLICE2_LATENTERR_FORCE_0_ERR64_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE2_LATENTERR_FORCE_0_ERR64_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE2_LATENTERR_FORCE_0_ERR65_SHIFT			_MK_SHIFT_CONST(1)
> +#define NVDLA_GEC_ERRSLICE2_LATENTERR_FORCE_0_ERR65_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE2_LATENTERR_FORCE_0_ERR65_SHIFT)
> +#define NVDLA_GEC_ERRSLICE2_LATENTERR_FORCE_0_ERR65_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE2_LATENTERR_FORCE_0_ERR65_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE2_LATENTERR_FORCE_0_ERR66_SHIFT			_MK_SHIFT_CONST(2)
> +#define NVDLA_GEC_ERRSLICE2_LATENTERR_FORCE_0_ERR66_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE2_LATENTERR_FORCE_0_ERR66_SHIFT)
> +#define NVDLA_GEC_ERRSLICE2_LATENTERR_FORCE_0_ERR66_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE2_LATENTERR_FORCE_0_ERR66_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE2_LATENTERR_FORCE_0_ERR67_SHIFT			_MK_SHIFT_CONST(3)
> +#define NVDLA_GEC_ERRSLICE2_LATENTERR_FORCE_0_ERR67_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE2_LATENTERR_FORCE_0_ERR67_SHIFT)
> +#define NVDLA_GEC_ERRSLICE2_LATENTERR_FORCE_0_ERR67_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE2_LATENTERR_FORCE_0_ERR67_FORCE			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register NVDLA_GEC_ERRSLICE2_LATENTERR_STATUS_0
> +#define NVDLA_GEC_ERRSLICE2_LATENTERR_STATUS_0			_MK_ADDR_CONST(0xe0a8)
> +#define NVDLA_GEC_ERRSLICE2_LATENTERR_STATUS_0_ERR64_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_GEC_ERRSLICE2_LATENTERR_STATUS_0_ERR64_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE2_LATENTERR_STATUS_0_ERR64_SHIFT)
> +#define NVDLA_GEC_ERRSLICE2_LATENTERR_STATUS_0_ERR65_SHIFT			_MK_SHIFT_CONST(1)
> +#define NVDLA_GEC_ERRSLICE2_LATENTERR_STATUS_0_ERR65_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE2_LATENTERR_STATUS_0_ERR65_SHIFT)
> +#define NVDLA_GEC_ERRSLICE2_LATENTERR_STATUS_0_ERR66_SHIFT			_MK_SHIFT_CONST(2)
> +#define NVDLA_GEC_ERRSLICE2_LATENTERR_STATUS_0_ERR66_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE2_LATENTERR_STATUS_0_ERR66_SHIFT)
> +#define NVDLA_GEC_ERRSLICE2_LATENTERR_STATUS_0_ERR67_SHIFT			_MK_SHIFT_CONST(3)
> +#define NVDLA_GEC_ERRSLICE2_LATENTERR_STATUS_0_ERR67_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE2_LATENTERR_STATUS_0_ERR67_SHIFT)
> +
> +
> +// Register NVDLA_GEC_ERRSLICE2_COUNTER_RELOAD_0
> +#define NVDLA_GEC_ERRSLICE2_COUNTER_RELOAD_0			_MK_ADDR_CONST(0xe0b0)
> +#define NVDLA_GEC_ERRSLICE2_COUNTER_RELOAD_0_ERR64_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_GEC_ERRSLICE2_COUNTER_RELOAD_0_ERR64_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE2_COUNTER_RELOAD_0_ERR64_SHIFT)
> +#define NVDLA_GEC_ERRSLICE2_COUNTER_RELOAD_0_ERR64_NORELOAD			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE2_COUNTER_RELOAD_0_ERR64_RELOAD			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE2_COUNTER_RELOAD_0_ERR65_SHIFT			_MK_SHIFT_CONST(1)
> +#define NVDLA_GEC_ERRSLICE2_COUNTER_RELOAD_0_ERR65_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE2_COUNTER_RELOAD_0_ERR65_SHIFT)
> +#define NVDLA_GEC_ERRSLICE2_COUNTER_RELOAD_0_ERR65_NORELOAD			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE2_COUNTER_RELOAD_0_ERR65_RELOAD			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE2_COUNTER_RELOAD_0_ERR66_SHIFT			_MK_SHIFT_CONST(2)
> +#define NVDLA_GEC_ERRSLICE2_COUNTER_RELOAD_0_ERR66_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE2_COUNTER_RELOAD_0_ERR66_SHIFT)
> +#define NVDLA_GEC_ERRSLICE2_COUNTER_RELOAD_0_ERR66_NORELOAD			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE2_COUNTER_RELOAD_0_ERR66_RELOAD			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE2_COUNTER_RELOAD_0_ERR67_SHIFT			_MK_SHIFT_CONST(3)
> +#define NVDLA_GEC_ERRSLICE2_COUNTER_RELOAD_0_ERR67_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE2_COUNTER_RELOAD_0_ERR67_SHIFT)
> +#define NVDLA_GEC_ERRSLICE2_COUNTER_RELOAD_0_ERR67_NORELOAD			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE2_COUNTER_RELOAD_0_ERR67_RELOAD			_MK_ENUM_CONST(0x1)
> +
> +
> +
> +// To satisfy various compilers and platforms,
> +// we let users control the types and syntax of certain constants, using macros.
> +#ifndef _MK_SHIFT_CONST
> +  #define _MK_SHIFT_CONST(_constant_) _constant_
> +#endif
> +#ifndef _MK_MASK_CONST
> +  #define _MK_MASK_CONST(_constant_) _constant_
> +#endif
> +#ifndef _MK_ENUM_CONST
> +  #define _MK_ENUM_CONST(_constant_) (_constant_ ## UL)
> +#endif
> +#ifndef _MK_ADDR_CONST
> +  #define _MK_ADDR_CONST(_constant_) _constant_
> +#endif
> +#ifndef _MK_FIELD_CONST
> +  #define _MK_FIELD_CONST(_mask_, _shift_) (_MK_MASK_CONST(_mask_) << _MK_SHIFT_CONST(_shift_))
> +#endif
> +
> +
> +// Register NVDLA_CVIF_CFG_RD_WEIGHT_0_0
> +#define NVDLA_CVIF_CFG_RD_WEIGHT_0_0			_MK_ADDR_CONST(0xf000)
> +#define NVDLA_CVIF_CFG_RD_WEIGHT_0_0_RD_WEIGHT_BDMA_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CVIF_CFG_RD_WEIGHT_0_0_RD_WEIGHT_BDMA_FIELD			_MK_FIELD_CONST(0xff, NVDLA_CVIF_CFG_RD_WEIGHT_0_0_RD_WEIGHT_BDMA_SHIFT)
> +#define NVDLA_CVIF_CFG_RD_WEIGHT_0_0_RD_WEIGHT_SDP_SHIFT			_MK_SHIFT_CONST(8)
> +#define NVDLA_CVIF_CFG_RD_WEIGHT_0_0_RD_WEIGHT_SDP_FIELD			_MK_FIELD_CONST(0xff, NVDLA_CVIF_CFG_RD_WEIGHT_0_0_RD_WEIGHT_SDP_SHIFT)
> +#define NVDLA_CVIF_CFG_RD_WEIGHT_0_0_RD_WEIGHT_PDP_SHIFT			_MK_SHIFT_CONST(16)
> +#define NVDLA_CVIF_CFG_RD_WEIGHT_0_0_RD_WEIGHT_PDP_FIELD			_MK_FIELD_CONST(0xff, NVDLA_CVIF_CFG_RD_WEIGHT_0_0_RD_WEIGHT_PDP_SHIFT)
> +#define NVDLA_CVIF_CFG_RD_WEIGHT_0_0_RD_WEIGHT_CDP_SHIFT			_MK_SHIFT_CONST(24)
> +#define NVDLA_CVIF_CFG_RD_WEIGHT_0_0_RD_WEIGHT_CDP_FIELD			_MK_FIELD_CONST(0xff, NVDLA_CVIF_CFG_RD_WEIGHT_0_0_RD_WEIGHT_CDP_SHIFT)
> +
> +
> +// Register NVDLA_CVIF_CFG_RD_WEIGHT_1_0
> +#define NVDLA_CVIF_CFG_RD_WEIGHT_1_0			_MK_ADDR_CONST(0xf004)
> +#define NVDLA_CVIF_CFG_RD_WEIGHT_1_0_RD_WEIGHT_SDP_B_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CVIF_CFG_RD_WEIGHT_1_0_RD_WEIGHT_SDP_B_FIELD			_MK_FIELD_CONST(0xff, NVDLA_CVIF_CFG_RD_WEIGHT_1_0_RD_WEIGHT_SDP_B_SHIFT)
> +#define NVDLA_CVIF_CFG_RD_WEIGHT_1_0_RD_WEIGHT_SDP_N_SHIFT			_MK_SHIFT_CONST(8)
> +#define NVDLA_CVIF_CFG_RD_WEIGHT_1_0_RD_WEIGHT_SDP_N_FIELD			_MK_FIELD_CONST(0xff, NVDLA_CVIF_CFG_RD_WEIGHT_1_0_RD_WEIGHT_SDP_N_SHIFT)
> +#define NVDLA_CVIF_CFG_RD_WEIGHT_1_0_RD_WEIGHT_SDP_E_SHIFT			_MK_SHIFT_CONST(16)
> +#define NVDLA_CVIF_CFG_RD_WEIGHT_1_0_RD_WEIGHT_SDP_E_FIELD			_MK_FIELD_CONST(0xff, NVDLA_CVIF_CFG_RD_WEIGHT_1_0_RD_WEIGHT_SDP_E_SHIFT)
> +#define NVDLA_CVIF_CFG_RD_WEIGHT_1_0_RD_WEIGHT_CDMA_DAT_SHIFT			_MK_SHIFT_CONST(24)
> +#define NVDLA_CVIF_CFG_RD_WEIGHT_1_0_RD_WEIGHT_CDMA_DAT_FIELD			_MK_FIELD_CONST(0xff, NVDLA_CVIF_CFG_RD_WEIGHT_1_0_RD_WEIGHT_CDMA_DAT_SHIFT)
> +
> +
> +// Register NVDLA_CVIF_CFG_RD_WEIGHT_2_0
> +#define NVDLA_CVIF_CFG_RD_WEIGHT_2_0			_MK_ADDR_CONST(0xf008)
> +#define NVDLA_CVIF_CFG_RD_WEIGHT_2_0_RD_WEIGHT_CDMA_WT_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CVIF_CFG_RD_WEIGHT_2_0_RD_WEIGHT_CDMA_WT_FIELD			_MK_FIELD_CONST(0xff, NVDLA_CVIF_CFG_RD_WEIGHT_2_0_RD_WEIGHT_CDMA_WT_SHIFT)
> +#define NVDLA_CVIF_CFG_RD_WEIGHT_2_0_RD_WEIGHT_RBK_SHIFT			_MK_SHIFT_CONST(8)
> +#define NVDLA_CVIF_CFG_RD_WEIGHT_2_0_RD_WEIGHT_RBK_FIELD			_MK_FIELD_CONST(0xff, NVDLA_CVIF_CFG_RD_WEIGHT_2_0_RD_WEIGHT_RBK_SHIFT)
> +#define NVDLA_CVIF_CFG_RD_WEIGHT_2_0_RD_WEIGHT_RSV_1_SHIFT			_MK_SHIFT_CONST(16)
> +#define NVDLA_CVIF_CFG_RD_WEIGHT_2_0_RD_WEIGHT_RSV_1_FIELD			_MK_FIELD_CONST(0xff, NVDLA_CVIF_CFG_RD_WEIGHT_2_0_RD_WEIGHT_RSV_1_SHIFT)
> +#define NVDLA_CVIF_CFG_RD_WEIGHT_2_0_RD_WEIGHT_RSV_0_SHIFT			_MK_SHIFT_CONST(24)
> +#define NVDLA_CVIF_CFG_RD_WEIGHT_2_0_RD_WEIGHT_RSV_0_FIELD			_MK_FIELD_CONST(0xff, NVDLA_CVIF_CFG_RD_WEIGHT_2_0_RD_WEIGHT_RSV_0_SHIFT)
> +
> +
> +// Register NVDLA_CVIF_CFG_WR_WEIGHT_0_0
> +#define NVDLA_CVIF_CFG_WR_WEIGHT_0_0			_MK_ADDR_CONST(0xf00c)
> +#define NVDLA_CVIF_CFG_WR_WEIGHT_0_0_WR_WEIGHT_BDMA_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CVIF_CFG_WR_WEIGHT_0_0_WR_WEIGHT_BDMA_FIELD			_MK_FIELD_CONST(0xff, NVDLA_CVIF_CFG_WR_WEIGHT_0_0_WR_WEIGHT_BDMA_SHIFT)
> +#define NVDLA_CVIF_CFG_WR_WEIGHT_0_0_WR_WEIGHT_SDP_SHIFT			_MK_SHIFT_CONST(8)
> +#define NVDLA_CVIF_CFG_WR_WEIGHT_0_0_WR_WEIGHT_SDP_FIELD			_MK_FIELD_CONST(0xff, NVDLA_CVIF_CFG_WR_WEIGHT_0_0_WR_WEIGHT_SDP_SHIFT)
> +#define NVDLA_CVIF_CFG_WR_WEIGHT_0_0_WR_WEIGHT_PDP_SHIFT			_MK_SHIFT_CONST(16)
> +#define NVDLA_CVIF_CFG_WR_WEIGHT_0_0_WR_WEIGHT_PDP_FIELD			_MK_FIELD_CONST(0xff, NVDLA_CVIF_CFG_WR_WEIGHT_0_0_WR_WEIGHT_PDP_SHIFT)
> +#define NVDLA_CVIF_CFG_WR_WEIGHT_0_0_WR_WEIGHT_CDP_SHIFT			_MK_SHIFT_CONST(24)
> +#define NVDLA_CVIF_CFG_WR_WEIGHT_0_0_WR_WEIGHT_CDP_FIELD			_MK_FIELD_CONST(0xff, NVDLA_CVIF_CFG_WR_WEIGHT_0_0_WR_WEIGHT_CDP_SHIFT)
> +
> +
> +// Register NVDLA_CVIF_CFG_WR_WEIGHT_1_0
> +#define NVDLA_CVIF_CFG_WR_WEIGHT_1_0			_MK_ADDR_CONST(0xf010)
> +#define NVDLA_CVIF_CFG_WR_WEIGHT_1_0_WR_WEIGHT_RBK_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CVIF_CFG_WR_WEIGHT_1_0_WR_WEIGHT_RBK_FIELD			_MK_FIELD_CONST(0xff, NVDLA_CVIF_CFG_WR_WEIGHT_1_0_WR_WEIGHT_RBK_SHIFT)
> +#define NVDLA_CVIF_CFG_WR_WEIGHT_1_0_WR_WEIGHT_RSV_2_SHIFT			_MK_SHIFT_CONST(8)
> +#define NVDLA_CVIF_CFG_WR_WEIGHT_1_0_WR_WEIGHT_RSV_2_FIELD			_MK_FIELD_CONST(0xff, NVDLA_CVIF_CFG_WR_WEIGHT_1_0_WR_WEIGHT_RSV_2_SHIFT)
> +#define NVDLA_CVIF_CFG_WR_WEIGHT_1_0_WR_WEIGHT_RSV_1_SHIFT			_MK_SHIFT_CONST(16)
> +#define NVDLA_CVIF_CFG_WR_WEIGHT_1_0_WR_WEIGHT_RSV_1_FIELD			_MK_FIELD_CONST(0xff, NVDLA_CVIF_CFG_WR_WEIGHT_1_0_WR_WEIGHT_RSV_1_SHIFT)
> +#define NVDLA_CVIF_CFG_WR_WEIGHT_1_0_WR_WEIGHT_RSV_0_SHIFT			_MK_SHIFT_CONST(24)
> +#define NVDLA_CVIF_CFG_WR_WEIGHT_1_0_WR_WEIGHT_RSV_0_FIELD			_MK_FIELD_CONST(0xff, NVDLA_CVIF_CFG_WR_WEIGHT_1_0_WR_WEIGHT_RSV_0_SHIFT)
> +
> +
> +// Register NVDLA_CVIF_CFG_OUTSTANDING_CNT_0
> +#define NVDLA_CVIF_CFG_OUTSTANDING_CNT_0			_MK_ADDR_CONST(0xf014)
> +#define NVDLA_CVIF_CFG_OUTSTANDING_CNT_0_RD_OS_CNT_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CVIF_CFG_OUTSTANDING_CNT_0_RD_OS_CNT_FIELD			_MK_FIELD_CONST(0xff, NVDLA_CVIF_CFG_OUTSTANDING_CNT_0_RD_OS_CNT_SHIFT)
> +#define NVDLA_CVIF_CFG_OUTSTANDING_CNT_0_WR_OS_CNT_SHIFT			_MK_SHIFT_CONST(8)
> +#define NVDLA_CVIF_CFG_OUTSTANDING_CNT_0_WR_OS_CNT_FIELD			_MK_FIELD_CONST(0xff, NVDLA_CVIF_CFG_OUTSTANDING_CNT_0_WR_OS_CNT_SHIFT)
> +
> +
> +// Register NVDLA_CVIF_STATUS_0
> +#define NVDLA_CVIF_STATUS_0			_MK_ADDR_CONST(0xf018)
> +#define NVDLA_CVIF_STATUS_0_IDLE_SHIFT			_MK_SHIFT_CONST(8)
> +#define NVDLA_CVIF_STATUS_0_IDLE_FIELD			_MK_FIELD_CONST(0x1, NVDLA_CVIF_STATUS_0_IDLE_SHIFT)
> +#define NVDLA_CVIF_STATUS_0_IDLE_NO			_MK_ENUM_CONST(0x0)
> +#define NVDLA_CVIF_STATUS_0_IDLE_YES			_MK_ENUM_CONST(0x1)
> +
> +
> +
> +// To satisfy various compilers and platforms,
> +// we let users control the types and syntax of certain constants, using macros.
> +#ifndef _MK_SHIFT_CONST
> +  #define _MK_SHIFT_CONST(_constant_) _constant_
> +#endif
> +#ifndef _MK_MASK_CONST
> +  #define _MK_MASK_CONST(_constant_) _constant_
> +#endif
> +#ifndef _MK_ENUM_CONST
> +  #define _MK_ENUM_CONST(_constant_) (_constant_ ## UL)
> +#endif
> +#ifndef _MK_ADDR_CONST
> +  #define _MK_ADDR_CONST(_constant_) _constant_
> +#endif
> +#ifndef _MK_FIELD_CONST
> +  #define _MK_FIELD_CONST(_mask_, _shift_) (_MK_MASK_CONST(_mask_) << _MK_SHIFT_CONST(_shift_))
> +#endif
> +
> +
> +// Register BDMA_CFG_SRC_ADDR_LOW_0
> +#define BDMA_CFG_SRC_ADDR_LOW_0			_MK_ADDR_CONST(0x10000)
> +#define BDMA_CFG_SRC_ADDR_LOW_0_V32_SHIFT			_MK_SHIFT_CONST(5)
> +#define BDMA_CFG_SRC_ADDR_LOW_0_V32_FIELD			_MK_FIELD_CONST(0x7ffffff, BDMA_CFG_SRC_ADDR_LOW_0_V32_SHIFT)
> +
> +
> +// Register BDMA_CFG_SRC_ADDR_HIGH_0
> +#define BDMA_CFG_SRC_ADDR_HIGH_0			_MK_ADDR_CONST(0x10004)
> +#define BDMA_CFG_SRC_ADDR_HIGH_0_V8_SHIFT			_MK_SHIFT_CONST(0)
> +#define BDMA_CFG_SRC_ADDR_HIGH_0_V8_FIELD			_MK_FIELD_CONST(0xffffffff, BDMA_CFG_SRC_ADDR_HIGH_0_V8_SHIFT)
> +
> +
> +// Register BDMA_CFG_DST_ADDR_LOW_0
> +#define BDMA_CFG_DST_ADDR_LOW_0			_MK_ADDR_CONST(0x10008)
> +#define BDMA_CFG_DST_ADDR_LOW_0_V32_SHIFT			_MK_SHIFT_CONST(5)
> +#define BDMA_CFG_DST_ADDR_LOW_0_V32_FIELD			_MK_FIELD_CONST(0x7ffffff, BDMA_CFG_DST_ADDR_LOW_0_V32_SHIFT)
> +
> +
> +// Register BDMA_CFG_DST_ADDR_HIGH_0
> +#define BDMA_CFG_DST_ADDR_HIGH_0			_MK_ADDR_CONST(0x1000c)
> +#define BDMA_CFG_DST_ADDR_HIGH_0_V8_SHIFT			_MK_SHIFT_CONST(0)
> +#define BDMA_CFG_DST_ADDR_HIGH_0_V8_FIELD			_MK_FIELD_CONST(0xffffffff, BDMA_CFG_DST_ADDR_HIGH_0_V8_SHIFT)
> +
> +
> +// Register BDMA_CFG_LINE_0
> +#define BDMA_CFG_LINE_0			_MK_ADDR_CONST(0x10010)
> +#define BDMA_CFG_LINE_0_SIZE_SHIFT			_MK_SHIFT_CONST(0)
> +#define BDMA_CFG_LINE_0_SIZE_FIELD			_MK_FIELD_CONST(0x1fff, BDMA_CFG_LINE_0_SIZE_SHIFT)
> +
> +
> +// Register BDMA_CFG_CMD_0
> +#define BDMA_CFG_CMD_0			_MK_ADDR_CONST(0x10014)
> +#define BDMA_CFG_CMD_0_SRC_RAM_TYPE_SHIFT			_MK_SHIFT_CONST(0)
> +#define BDMA_CFG_CMD_0_SRC_RAM_TYPE_FIELD			_MK_FIELD_CONST(0x1, BDMA_CFG_CMD_0_SRC_RAM_TYPE_SHIFT)
> +#define BDMA_CFG_CMD_0_SRC_RAM_TYPE_CVSRAM			_MK_ENUM_CONST(0x0)
> +#define BDMA_CFG_CMD_0_SRC_RAM_TYPE_MC			_MK_ENUM_CONST(0x1)
> +#define BDMA_CFG_CMD_0_DST_RAM_TYPE_SHIFT			_MK_SHIFT_CONST(1)
> +#define BDMA_CFG_CMD_0_DST_RAM_TYPE_FIELD			_MK_FIELD_CONST(0x1, BDMA_CFG_CMD_0_DST_RAM_TYPE_SHIFT)
> +#define BDMA_CFG_CMD_0_DST_RAM_TYPE_CVSRAM			_MK_ENUM_CONST(0x0)
> +#define BDMA_CFG_CMD_0_DST_RAM_TYPE_MC			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register BDMA_CFG_LINE_REPEAT_0
> +#define BDMA_CFG_LINE_REPEAT_0			_MK_ADDR_CONST(0x10018)
> +#define BDMA_CFG_LINE_REPEAT_0_NUMBER_SHIFT			_MK_SHIFT_CONST(0)
> +#define BDMA_CFG_LINE_REPEAT_0_NUMBER_FIELD			_MK_FIELD_CONST(0xffffff, BDMA_CFG_LINE_REPEAT_0_NUMBER_SHIFT)
> +
> +
> +// Register BDMA_CFG_SRC_LINE_0
> +#define BDMA_CFG_SRC_LINE_0			_MK_ADDR_CONST(0x1001c)
> +#define BDMA_CFG_SRC_LINE_0_STRIDE_SHIFT			_MK_SHIFT_CONST(5)
> +#define BDMA_CFG_SRC_LINE_0_STRIDE_FIELD			_MK_FIELD_CONST(0x7ffffff, BDMA_CFG_SRC_LINE_0_STRIDE_SHIFT)
> +
> +
> +// Register BDMA_CFG_DST_LINE_0
> +#define BDMA_CFG_DST_LINE_0			_MK_ADDR_CONST(0x10020)
> +#define BDMA_CFG_DST_LINE_0_STRIDE_SHIFT			_MK_SHIFT_CONST(5)
> +#define BDMA_CFG_DST_LINE_0_STRIDE_FIELD			_MK_FIELD_CONST(0x7ffffff, BDMA_CFG_DST_LINE_0_STRIDE_SHIFT)
> +
> +
> +// Register BDMA_CFG_SURF_REPEAT_0
> +#define BDMA_CFG_SURF_REPEAT_0			_MK_ADDR_CONST(0x10024)
> +#define BDMA_CFG_SURF_REPEAT_0_NUMBER_SHIFT			_MK_SHIFT_CONST(0)
> +#define BDMA_CFG_SURF_REPEAT_0_NUMBER_FIELD			_MK_FIELD_CONST(0xffffff, BDMA_CFG_SURF_REPEAT_0_NUMBER_SHIFT)
> +
> +
> +// Register BDMA_CFG_SRC_SURF_0
> +#define BDMA_CFG_SRC_SURF_0			_MK_ADDR_CONST(0x10028)
> +#define BDMA_CFG_SRC_SURF_0_STRIDE_SHIFT			_MK_SHIFT_CONST(5)
> +#define BDMA_CFG_SRC_SURF_0_STRIDE_FIELD			_MK_FIELD_CONST(0x7ffffff, BDMA_CFG_SRC_SURF_0_STRIDE_SHIFT)
> +
> +
> +// Register BDMA_CFG_DST_SURF_0
> +#define BDMA_CFG_DST_SURF_0			_MK_ADDR_CONST(0x1002c)
> +#define BDMA_CFG_DST_SURF_0_STRIDE_SHIFT			_MK_SHIFT_CONST(5)
> +#define BDMA_CFG_DST_SURF_0_STRIDE_FIELD			_MK_FIELD_CONST(0x7ffffff, BDMA_CFG_DST_SURF_0_STRIDE_SHIFT)
> +
> +
> +// Register BDMA_CFG_OP_0
> +#define BDMA_CFG_OP_0			_MK_ADDR_CONST(0x10030)
> +#define BDMA_CFG_OP_0_EN_SHIFT			_MK_SHIFT_CONST(0)
> +#define BDMA_CFG_OP_0_EN_FIELD			_MK_FIELD_CONST(0x1, BDMA_CFG_OP_0_EN_SHIFT)
> +#define BDMA_CFG_OP_0_EN_DISABLE			_MK_ENUM_CONST(0x0)
> +#define BDMA_CFG_OP_0_EN_ENABLE			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register BDMA_CFG_LAUNCH0_0
> +#define BDMA_CFG_LAUNCH0_0			_MK_ADDR_CONST(0x10034)
> +#define BDMA_CFG_LAUNCH0_0_GRP0_LAUNCH_SHIFT			_MK_SHIFT_CONST(0)
> +#define BDMA_CFG_LAUNCH0_0_GRP0_LAUNCH_FIELD			_MK_FIELD_CONST(0x1, BDMA_CFG_LAUNCH0_0_GRP0_LAUNCH_SHIFT)
> +#define BDMA_CFG_LAUNCH0_0_GRP0_LAUNCH_NO			_MK_ENUM_CONST(0x0)
> +#define BDMA_CFG_LAUNCH0_0_GRP0_LAUNCH_YES			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register BDMA_CFG_LAUNCH1_0
> +#define BDMA_CFG_LAUNCH1_0			_MK_ADDR_CONST(0x10038)
> +#define BDMA_CFG_LAUNCH1_0_GRP1_LAUNCH_SHIFT			_MK_SHIFT_CONST(0)
> +#define BDMA_CFG_LAUNCH1_0_GRP1_LAUNCH_FIELD			_MK_FIELD_CONST(0x1, BDMA_CFG_LAUNCH1_0_GRP1_LAUNCH_SHIFT)
> +#define BDMA_CFG_LAUNCH1_0_GRP1_LAUNCH_NO			_MK_ENUM_CONST(0x0)
> +#define BDMA_CFG_LAUNCH1_0_GRP1_LAUNCH_YES			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register BDMA_CFG_STATUS_0
> +#define BDMA_CFG_STATUS_0			_MK_ADDR_CONST(0x1003c)
> +#define BDMA_CFG_STATUS_0_STALL_COUNT_EN_SHIFT			_MK_SHIFT_CONST(0)
> +#define BDMA_CFG_STATUS_0_STALL_COUNT_EN_FIELD			_MK_FIELD_CONST(0x1, BDMA_CFG_STATUS_0_STALL_COUNT_EN_SHIFT)
> +#define BDMA_CFG_STATUS_0_STALL_COUNT_EN_NO			_MK_ENUM_CONST(0x0)
> +#define BDMA_CFG_STATUS_0_STALL_COUNT_EN_YES			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register BDMA_STATUS_0
> +#define BDMA_STATUS_0			_MK_ADDR_CONST(0x10040)
> +#define BDMA_STATUS_0_FREE_SLOT_SHIFT			_MK_SHIFT_CONST(0)
> +#define BDMA_STATUS_0_FREE_SLOT_FIELD			_MK_FIELD_CONST(0xff, BDMA_STATUS_0_FREE_SLOT_SHIFT)
> +#define BDMA_STATUS_0_IDLE_SHIFT			_MK_SHIFT_CONST(8)
> +#define BDMA_STATUS_0_IDLE_FIELD			_MK_FIELD_CONST(0x1, BDMA_STATUS_0_IDLE_SHIFT)
> +#define BDMA_STATUS_0_IDLE_NO			_MK_ENUM_CONST(0x0)
> +#define BDMA_STATUS_0_IDLE_YES			_MK_ENUM_CONST(0x1)
> +#define BDMA_STATUS_0_GRP0_BUSY_SHIFT			_MK_SHIFT_CONST(9)
> +#define BDMA_STATUS_0_GRP0_BUSY_FIELD			_MK_FIELD_CONST(0x1, BDMA_STATUS_0_GRP0_BUSY_SHIFT)
> +#define BDMA_STATUS_0_GRP0_BUSY_NO			_MK_ENUM_CONST(0x0)
> +#define BDMA_STATUS_0_GRP0_BUSY_YES			_MK_ENUM_CONST(0x1)
> +#define BDMA_STATUS_0_GRP1_BUSY_SHIFT			_MK_SHIFT_CONST(10)
> +#define BDMA_STATUS_0_GRP1_BUSY_FIELD			_MK_FIELD_CONST(0x1, BDMA_STATUS_0_GRP1_BUSY_SHIFT)
> +#define BDMA_STATUS_0_GRP1_BUSY_NO			_MK_ENUM_CONST(0x0)
> +#define BDMA_STATUS_0_GRP1_BUSY_YES			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register BDMA_STATUS_GRP0_READ_STALL_0
> +#define BDMA_STATUS_GRP0_READ_STALL_0			_MK_ADDR_CONST(0x10044)
> +#define BDMA_STATUS_GRP0_READ_STALL_0_COUNT_SHIFT			_MK_SHIFT_CONST(0)
> +#define BDMA_STATUS_GRP0_READ_STALL_0_COUNT_FIELD			_MK_FIELD_CONST(0xffffffff, BDMA_STATUS_GRP0_READ_STALL_0_COUNT_SHIFT)
> +
> +
> +// Register BDMA_STATUS_GRP0_WRITE_STALL_0
> +#define BDMA_STATUS_GRP0_WRITE_STALL_0			_MK_ADDR_CONST(0x10048)
> +#define BDMA_STATUS_GRP0_WRITE_STALL_0_COUNT_SHIFT			_MK_SHIFT_CONST(0)
> +#define BDMA_STATUS_GRP0_WRITE_STALL_0_COUNT_FIELD			_MK_FIELD_CONST(0xffffffff, BDMA_STATUS_GRP0_WRITE_STALL_0_COUNT_SHIFT)
> +
> +
> +// Register BDMA_STATUS_GRP1_READ_STALL_0
> +#define BDMA_STATUS_GRP1_READ_STALL_0			_MK_ADDR_CONST(0x1004c)
> +#define BDMA_STATUS_GRP1_READ_STALL_0_COUNT_SHIFT			_MK_SHIFT_CONST(0)
> +#define BDMA_STATUS_GRP1_READ_STALL_0_COUNT_FIELD			_MK_FIELD_CONST(0xffffffff, BDMA_STATUS_GRP1_READ_STALL_0_COUNT_SHIFT)
> +
> +
> +// Register BDMA_STATUS_GRP1_WRITE_STALL_0
> +#define BDMA_STATUS_GRP1_WRITE_STALL_0			_MK_ADDR_CONST(0x10050)
> +#define BDMA_STATUS_GRP1_WRITE_STALL_0_COUNT_SHIFT			_MK_SHIFT_CONST(0)
> +#define BDMA_STATUS_GRP1_WRITE_STALL_0_COUNT_FIELD			_MK_FIELD_CONST(0xffffffff, BDMA_STATUS_GRP1_WRITE_STALL_0_COUNT_SHIFT)
> +
> +
> +
> +// To satisfy various compilers and platforms,
> +// we let users control the types and syntax of certain constants, using macros.
> +#ifndef _MK_SHIFT_CONST
> +  #define _MK_SHIFT_CONST(_constant_) _constant_
> +#endif
> +#ifndef _MK_MASK_CONST
> +  #define _MK_MASK_CONST(_constant_) _constant_
> +#endif
> +#ifndef _MK_ENUM_CONST
> +  #define _MK_ENUM_CONST(_constant_) (_constant_ ## UL)
> +#endif
> +#ifndef _MK_ADDR_CONST
> +  #define _MK_ADDR_CONST(_constant_) _constant_
> +#endif
> +#ifndef _MK_FIELD_CONST
> +  #define _MK_FIELD_CONST(_mask_, _shift_) (_MK_MASK_CONST(_mask_) << _MK_SHIFT_CONST(_shift_))
> +#endif
> +
> +
> +// Register RBK_S_STATUS_0
> +#define RBK_S_STATUS_0			_MK_ADDR_CONST(0x11000)
> +#define RBK_S_STATUS_0_STATUS_0_SHIFT			_MK_SHIFT_CONST(0)
> +#define RBK_S_STATUS_0_STATUS_0_FIELD			_MK_FIELD_CONST(0x3, RBK_S_STATUS_0_STATUS_0_SHIFT)
> +#define RBK_S_STATUS_0_STATUS_0_IDLE			_MK_ENUM_CONST(0x0)
> +#define RBK_S_STATUS_0_STATUS_0_RUNNING			_MK_ENUM_CONST(0x1)
> +#define RBK_S_STATUS_0_STATUS_0_PENDING			_MK_ENUM_CONST(0x2)
> +#define RBK_S_STATUS_0_STATUS_1_SHIFT			_MK_SHIFT_CONST(16)
> +#define RBK_S_STATUS_0_STATUS_1_FIELD			_MK_FIELD_CONST(0x3, RBK_S_STATUS_0_STATUS_1_SHIFT)
> +#define RBK_S_STATUS_0_STATUS_1_IDLE			_MK_ENUM_CONST(0x0)
> +#define RBK_S_STATUS_0_STATUS_1_RUNNING			_MK_ENUM_CONST(0x1)
> +#define RBK_S_STATUS_0_STATUS_1_PENDING			_MK_ENUM_CONST(0x2)
> +
> +
> +// Register RBK_S_POINTER_0
> +#define RBK_S_POINTER_0			_MK_ADDR_CONST(0x11004)
> +#define RBK_S_POINTER_0_PRODUCER_SHIFT			_MK_SHIFT_CONST(0)
> +#define RBK_S_POINTER_0_PRODUCER_FIELD			_MK_FIELD_CONST(0x1, RBK_S_POINTER_0_PRODUCER_SHIFT)
> +#define RBK_S_POINTER_0_PRODUCER_GROUP_0			_MK_ENUM_CONST(0x0)
> +#define RBK_S_POINTER_0_PRODUCER_GROUP_1			_MK_ENUM_CONST(0x1)
> +#define RBK_S_POINTER_0_CONSUMER_SHIFT			_MK_SHIFT_CONST(16)
> +#define RBK_S_POINTER_0_CONSUMER_FIELD			_MK_FIELD_CONST(0x1, RBK_S_POINTER_0_CONSUMER_SHIFT)
> +#define RBK_S_POINTER_0_CONSUMER_GROUP_0			_MK_ENUM_CONST(0x0)
> +#define RBK_S_POINTER_0_CONSUMER_GROUP_1			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register RBK_D_OP_ENABLE_0
> +#define RBK_D_OP_ENABLE_0			_MK_ADDR_CONST(0x11008)
> +#define RBK_D_OP_ENABLE_0_OP_EN_SHIFT			_MK_SHIFT_CONST(0)
> +#define RBK_D_OP_ENABLE_0_OP_EN_FIELD			_MK_FIELD_CONST(0x1, RBK_D_OP_ENABLE_0_OP_EN_SHIFT)
> +#define RBK_D_OP_ENABLE_0_OP_EN_DISABLE			_MK_ENUM_CONST(0x0)
> +#define RBK_D_OP_ENABLE_0_OP_EN_ENABLE			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register RBK_D_MISC_CFG_0
> +#define RBK_D_MISC_CFG_0			_MK_ADDR_CONST(0x1100c)
> +#define RBK_D_MISC_CFG_0_RUBIK_MODE_SHIFT			_MK_SHIFT_CONST(0)
> +#define RBK_D_MISC_CFG_0_RUBIK_MODE_FIELD			_MK_FIELD_CONST(0x3, RBK_D_MISC_CFG_0_RUBIK_MODE_SHIFT)
> +#define RBK_D_MISC_CFG_0_RUBIK_MODE_CONTRACT			_MK_ENUM_CONST(0x0)
> +#define RBK_D_MISC_CFG_0_RUBIK_MODE_SPLIT			_MK_ENUM_CONST(0x1)
> +#define RBK_D_MISC_CFG_0_RUBIK_MODE_MERGE			_MK_ENUM_CONST(0x2)
> +#define RBK_D_MISC_CFG_0_IN_PRECISION_SHIFT			_MK_SHIFT_CONST(8)
> +#define RBK_D_MISC_CFG_0_IN_PRECISION_FIELD			_MK_FIELD_CONST(0x3, RBK_D_MISC_CFG_0_IN_PRECISION_SHIFT)
> +#define RBK_D_MISC_CFG_0_IN_PRECISION_INT8			_MK_ENUM_CONST(0x0)
> +#define RBK_D_MISC_CFG_0_IN_PRECISION_INT16			_MK_ENUM_CONST(0x1)
> +#define RBK_D_MISC_CFG_0_IN_PRECISION_FP16			_MK_ENUM_CONST(0x2)
> +
> +
> +// Register RBK_D_DAIN_RAM_TYPE_0
> +#define RBK_D_DAIN_RAM_TYPE_0			_MK_ADDR_CONST(0x11010)
> +#define RBK_D_DAIN_RAM_TYPE_0_DATAIN_RAM_TYPE_SHIFT			_MK_SHIFT_CONST(0)
> +#define RBK_D_DAIN_RAM_TYPE_0_DATAIN_RAM_TYPE_FIELD			_MK_FIELD_CONST(0x1, RBK_D_DAIN_RAM_TYPE_0_DATAIN_RAM_TYPE_SHIFT)
> +#define RBK_D_DAIN_RAM_TYPE_0_DATAIN_RAM_TYPE_CVIF			_MK_ENUM_CONST(0x0)
> +#define RBK_D_DAIN_RAM_TYPE_0_DATAIN_RAM_TYPE_MCIF			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register RBK_D_DATAIN_SIZE_0_0
> +#define RBK_D_DATAIN_SIZE_0_0			_MK_ADDR_CONST(0x11014)
> +#define RBK_D_DATAIN_SIZE_0_0_DATAIN_WIDTH_SHIFT			_MK_SHIFT_CONST(0)
> +#define RBK_D_DATAIN_SIZE_0_0_DATAIN_WIDTH_FIELD			_MK_FIELD_CONST(0x1fff, RBK_D_DATAIN_SIZE_0_0_DATAIN_WIDTH_SHIFT)
> +#define RBK_D_DATAIN_SIZE_0_0_DATAIN_HEIGHT_SHIFT			_MK_SHIFT_CONST(16)
> +#define RBK_D_DATAIN_SIZE_0_0_DATAIN_HEIGHT_FIELD			_MK_FIELD_CONST(0x1fff, RBK_D_DATAIN_SIZE_0_0_DATAIN_HEIGHT_SHIFT)
> +
> +
> +// Register RBK_D_DATAIN_SIZE_1_0
> +#define RBK_D_DATAIN_SIZE_1_0			_MK_ADDR_CONST(0x11018)
> +#define RBK_D_DATAIN_SIZE_1_0_DATAIN_CHANNEL_SHIFT			_MK_SHIFT_CONST(0)
> +#define RBK_D_DATAIN_SIZE_1_0_DATAIN_CHANNEL_FIELD			_MK_FIELD_CONST(0x1fff, RBK_D_DATAIN_SIZE_1_0_DATAIN_CHANNEL_SHIFT)
> +
> +
> +// Register RBK_D_DAIN_ADDR_HIGH_0
> +#define RBK_D_DAIN_ADDR_HIGH_0			_MK_ADDR_CONST(0x1101c)
> +#define RBK_D_DAIN_ADDR_HIGH_0_DAIN_ADDR_HIGH_SHIFT			_MK_SHIFT_CONST(0)
> +#define RBK_D_DAIN_ADDR_HIGH_0_DAIN_ADDR_HIGH_FIELD			_MK_FIELD_CONST(0xffffffff, RBK_D_DAIN_ADDR_HIGH_0_DAIN_ADDR_HIGH_SHIFT)
> +
> +
> +// Register RBK_D_DAIN_ADDR_LOW_0
> +#define RBK_D_DAIN_ADDR_LOW_0			_MK_ADDR_CONST(0x11020)
> +#define RBK_D_DAIN_ADDR_LOW_0_DAIN_ADDR_LOW_SHIFT			_MK_SHIFT_CONST(5)
> +#define RBK_D_DAIN_ADDR_LOW_0_DAIN_ADDR_LOW_FIELD			_MK_FIELD_CONST(0x7ffffff, RBK_D_DAIN_ADDR_LOW_0_DAIN_ADDR_LOW_SHIFT)
> +
> +
> +// Register RBK_D_DAIN_LINE_STRIDE_0
> +#define RBK_D_DAIN_LINE_STRIDE_0			_MK_ADDR_CONST(0x11024)
> +#define RBK_D_DAIN_LINE_STRIDE_0_DAIN_LINE_STRIDE_SHIFT			_MK_SHIFT_CONST(5)
> +#define RBK_D_DAIN_LINE_STRIDE_0_DAIN_LINE_STRIDE_FIELD			_MK_FIELD_CONST(0x7ffffff, RBK_D_DAIN_LINE_STRIDE_0_DAIN_LINE_STRIDE_SHIFT)
> +
> +
> +// Register RBK_D_DAIN_SURF_STRIDE_0
> +#define RBK_D_DAIN_SURF_STRIDE_0			_MK_ADDR_CONST(0x11028)
> +#define RBK_D_DAIN_SURF_STRIDE_0_DAIN_SURF_STRIDE_SHIFT			_MK_SHIFT_CONST(5)
> +#define RBK_D_DAIN_SURF_STRIDE_0_DAIN_SURF_STRIDE_FIELD			_MK_FIELD_CONST(0x7ffffff, RBK_D_DAIN_SURF_STRIDE_0_DAIN_SURF_STRIDE_SHIFT)
> +
> +
> +// Register RBK_D_DAIN_PLANAR_STRIDE_0
> +#define RBK_D_DAIN_PLANAR_STRIDE_0			_MK_ADDR_CONST(0x1102c)
> +#define RBK_D_DAIN_PLANAR_STRIDE_0_DAIN_PLANAR_STRIDE_SHIFT			_MK_SHIFT_CONST(5)
> +#define RBK_D_DAIN_PLANAR_STRIDE_0_DAIN_PLANAR_STRIDE_FIELD			_MK_FIELD_CONST(0x7ffffff, RBK_D_DAIN_PLANAR_STRIDE_0_DAIN_PLANAR_STRIDE_SHIFT)
> +
> +
> +// Register RBK_D_DAOUT_RAM_TYPE_0
> +#define RBK_D_DAOUT_RAM_TYPE_0			_MK_ADDR_CONST(0x11030)
> +#define RBK_D_DAOUT_RAM_TYPE_0_DATAOUT_RAM_TYPE_SHIFT			_MK_SHIFT_CONST(0)
> +#define RBK_D_DAOUT_RAM_TYPE_0_DATAOUT_RAM_TYPE_FIELD			_MK_FIELD_CONST(0x1, RBK_D_DAOUT_RAM_TYPE_0_DATAOUT_RAM_TYPE_SHIFT)
> +#define RBK_D_DAOUT_RAM_TYPE_0_DATAOUT_RAM_TYPE_CVIF			_MK_ENUM_CONST(0x0)
> +#define RBK_D_DAOUT_RAM_TYPE_0_DATAOUT_RAM_TYPE_MCIF			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register RBK_D_DATAOUT_SIZE_1_0
> +#define RBK_D_DATAOUT_SIZE_1_0			_MK_ADDR_CONST(0x11034)
> +#define RBK_D_DATAOUT_SIZE_1_0_DATAOUT_CHANNEL_SHIFT			_MK_SHIFT_CONST(0)
> +#define RBK_D_DATAOUT_SIZE_1_0_DATAOUT_CHANNEL_FIELD			_MK_FIELD_CONST(0x1fff, RBK_D_DATAOUT_SIZE_1_0_DATAOUT_CHANNEL_SHIFT)
> +
> +
> +// Register RBK_D_DAOUT_ADDR_HIGH_0
> +#define RBK_D_DAOUT_ADDR_HIGH_0			_MK_ADDR_CONST(0x11038)
> +#define RBK_D_DAOUT_ADDR_HIGH_0_DAOUT_ADDR_HIGH_SHIFT			_MK_SHIFT_CONST(0)
> +#define RBK_D_DAOUT_ADDR_HIGH_0_DAOUT_ADDR_HIGH_FIELD			_MK_FIELD_CONST(0xffffffff, RBK_D_DAOUT_ADDR_HIGH_0_DAOUT_ADDR_HIGH_SHIFT)
> +
> +
> +// Register RBK_D_DAOUT_ADDR_LOW_0
> +#define RBK_D_DAOUT_ADDR_LOW_0			_MK_ADDR_CONST(0x1103c)
> +#define RBK_D_DAOUT_ADDR_LOW_0_DAOUT_ADDR_LOW_SHIFT			_MK_SHIFT_CONST(5)
> +#define RBK_D_DAOUT_ADDR_LOW_0_DAOUT_ADDR_LOW_FIELD			_MK_FIELD_CONST(0x7ffffff, RBK_D_DAOUT_ADDR_LOW_0_DAOUT_ADDR_LOW_SHIFT)
> +
> +
> +// Register RBK_D_DAOUT_LINE_STRIDE_0
> +#define RBK_D_DAOUT_LINE_STRIDE_0			_MK_ADDR_CONST(0x11040)
> +#define RBK_D_DAOUT_LINE_STRIDE_0_DAOUT_LINE_STRIDE_SHIFT			_MK_SHIFT_CONST(5)
> +#define RBK_D_DAOUT_LINE_STRIDE_0_DAOUT_LINE_STRIDE_FIELD			_MK_FIELD_CONST(0x7ffffff, RBK_D_DAOUT_LINE_STRIDE_0_DAOUT_LINE_STRIDE_SHIFT)
> +
> +
> +// Register RBK_D_CONTRACT_STRIDE_0_0
> +#define RBK_D_CONTRACT_STRIDE_0_0			_MK_ADDR_CONST(0x11044)
> +#define RBK_D_CONTRACT_STRIDE_0_0_CONTRACT_STRIDE_0_SHIFT			_MK_SHIFT_CONST(5)
> +#define RBK_D_CONTRACT_STRIDE_0_0_CONTRACT_STRIDE_0_FIELD			_MK_FIELD_CONST(0x7ffffff, RBK_D_CONTRACT_STRIDE_0_0_CONTRACT_STRIDE_0_SHIFT)
> +
> +
> +// Register RBK_D_CONTRACT_STRIDE_1_0
> +#define RBK_D_CONTRACT_STRIDE_1_0			_MK_ADDR_CONST(0x11048)
> +#define RBK_D_CONTRACT_STRIDE_1_0_CONTRACT_STRIDE_1_SHIFT			_MK_SHIFT_CONST(5)
> +#define RBK_D_CONTRACT_STRIDE_1_0_CONTRACT_STRIDE_1_FIELD			_MK_FIELD_CONST(0x7ffffff, RBK_D_CONTRACT_STRIDE_1_0_CONTRACT_STRIDE_1_SHIFT)
> +
> +
> +// Register RBK_D_DAOUT_SURF_STRIDE_0
> +#define RBK_D_DAOUT_SURF_STRIDE_0			_MK_ADDR_CONST(0x1104c)
> +#define RBK_D_DAOUT_SURF_STRIDE_0_DAOUT_SURF_STRIDE_SHIFT			_MK_SHIFT_CONST(5)
> +#define RBK_D_DAOUT_SURF_STRIDE_0_DAOUT_SURF_STRIDE_FIELD			_MK_FIELD_CONST(0x7ffffff, RBK_D_DAOUT_SURF_STRIDE_0_DAOUT_SURF_STRIDE_SHIFT)
> +
> +
> +// Register RBK_D_DAOUT_PLANAR_STRIDE_0
> +#define RBK_D_DAOUT_PLANAR_STRIDE_0			_MK_ADDR_CONST(0x11050)
> +#define RBK_D_DAOUT_PLANAR_STRIDE_0_DAOUT_PLANAR_STRIDE_SHIFT			_MK_SHIFT_CONST(5)
> +#define RBK_D_DAOUT_PLANAR_STRIDE_0_DAOUT_PLANAR_STRIDE_FIELD			_MK_FIELD_CONST(0x7ffffff, RBK_D_DAOUT_PLANAR_STRIDE_0_DAOUT_PLANAR_STRIDE_SHIFT)
> +
> +
> +// Register RBK_D_DECONV_STRIDE_0
> +#define RBK_D_DECONV_STRIDE_0			_MK_ADDR_CONST(0x11054)
> +#define RBK_D_DECONV_STRIDE_0_DECONV_X_STRIDE_SHIFT			_MK_SHIFT_CONST(0)
> +#define RBK_D_DECONV_STRIDE_0_DECONV_X_STRIDE_FIELD			_MK_FIELD_CONST(0x1f, RBK_D_DECONV_STRIDE_0_DECONV_X_STRIDE_SHIFT)
> +#define RBK_D_DECONV_STRIDE_0_DECONV_Y_STRIDE_SHIFT			_MK_SHIFT_CONST(16)
> +#define RBK_D_DECONV_STRIDE_0_DECONV_Y_STRIDE_FIELD			_MK_FIELD_CONST(0x1f, RBK_D_DECONV_STRIDE_0_DECONV_Y_STRIDE_SHIFT)
> +
> +
> +// Register RBK_D_PERF_ENABLE_0
> +#define RBK_D_PERF_ENABLE_0			_MK_ADDR_CONST(0x11058)
> +#define RBK_D_PERF_ENABLE_0_PERF_EN_SHIFT			_MK_SHIFT_CONST(0)
> +#define RBK_D_PERF_ENABLE_0_PERF_EN_FIELD			_MK_FIELD_CONST(0x1, RBK_D_PERF_ENABLE_0_PERF_EN_SHIFT)
> +
> +
> +// Register RBK_D_PERF_READ_STALL_0
> +#define RBK_D_PERF_READ_STALL_0			_MK_ADDR_CONST(0x1105c)
> +#define RBK_D_PERF_READ_STALL_0_RD_STALL_CNT_SHIFT			_MK_SHIFT_CONST(0)
> +#define RBK_D_PERF_READ_STALL_0_RD_STALL_CNT_FIELD			_MK_FIELD_CONST(0xffffffff, RBK_D_PERF_READ_STALL_0_RD_STALL_CNT_SHIFT)
> +
> +
> +// Register RBK_D_PERF_WRITE_STALL_0
> +#define RBK_D_PERF_WRITE_STALL_0			_MK_ADDR_CONST(0x11060)
> +#define RBK_D_PERF_WRITE_STALL_0_WR_STALL_CNT_SHIFT			_MK_SHIFT_CONST(0)
> +#define RBK_D_PERF_WRITE_STALL_0_WR_STALL_CNT_FIELD			_MK_FIELD_CONST(0xffffffff, RBK_D_PERF_WRITE_STALL_0_WR_STALL_CNT_SHIFT)
> +
> +
> +
> +// To satisfy various compilers and platforms,
> +// we let users control the types and syntax of certain constants, using macros.
> +#ifndef _MK_SHIFT_CONST
> +  #define _MK_SHIFT_CONST(_constant_) _constant_
> +#endif
> +#ifndef _MK_MASK_CONST
> +  #define _MK_MASK_CONST(_constant_) _constant_
> +#endif
> +#ifndef _MK_ENUM_CONST
> +  #define _MK_ENUM_CONST(_constant_) (_constant_ ## UL)
> +#endif
> +#ifndef _MK_ADDR_CONST
> +  #define _MK_ADDR_CONST(_constant_) _constant_
> +#endif
> +#ifndef _MK_FIELD_CONST
> +  #define _MK_FIELD_CONST(_mask_, _shift_) (_MK_MASK_CONST(_mask_) << _MK_SHIFT_CONST(_shift_))
> +#endif
> +
> +
> +
> +//
> +// ADDRESS SPACES
> +//
> +
> +#define BASE_ADDRESS_NVDLA_CFGROM	0x0
> +#define BASE_ADDRESS_NVDLA_GLB	0x1000
> +#define BASE_ADDRESS_NVDLA_MCIF	0x2000
> +#define BASE_ADDRESS_NVDLA_CDMA	0x3000
> +#define BASE_ADDRESS_NVDLA_CSC	0x4000
> +#define BASE_ADDRESS_NVDLA_CMAC_A	0x5000
> +#define BASE_ADDRESS_NVDLA_CMAC_B	0x6000
> +#define BASE_ADDRESS_NVDLA_CACC	0x7000
> +#define BASE_ADDRESS_NVDLA_SDP_RDMA	0x8000
> +#define BASE_ADDRESS_NVDLA_SDP	0x9000
> +#define BASE_ADDRESS_NVDLA_PDP_RDMA	0xa000
> +#define BASE_ADDRESS_NVDLA_PDP	0xb000
> +#define BASE_ADDRESS_NVDLA_CDP_RDMA	0xc000
> +#define BASE_ADDRESS_NVDLA_CDP	0xd000
> +#define BASE_ADDRESS_NVDLA_GEC	0xe000
> +#define BASE_ADDRESS_NVDLA_CVIF	0xf000
> +#define BASE_ADDRESS_NVDLA_BDMA	0x10000
> +#define BASE_ADDRESS_NVDLA_RBK	0x11000
> +
> +#endif
> diff --git a/drivers/gpu/drm/nvdla/nvdla_rubik.c b/drivers/gpu/drm/nvdla/nvdla_rubik.c
> new file mode 100644
> index 000000000000..3bfb3b0cb786
> --- /dev/null
> +++ b/drivers/gpu/drm/nvdla/nvdla_rubik.c
> @@ -0,0 +1,217 @@
> +// SPDX-License-Identifier: BSD-3-Clause OR GPL-2.0
> +/*
> + * Copyright (C) 2017-2018 NVIDIA CORPORATION
> + * Copyright (C) 2022 Cai Huoqing
> + */
> +
> +#include "nvdla_common.h"
> +#include "nvdla_drm.h"
> +#include "nvdla_reg.h"
> +#include "nvdla_engine.h"
> +
> +static uint8_t map_rubik_mode[] = {
> +	FIELD_ENUM(RBK_D_MISC_CFG_0, RUBIK_MODE, CONTRACT),
> +	FIELD_ENUM(RBK_D_MISC_CFG_0, RUBIK_MODE, SPLIT),
> +	FIELD_ENUM(RBK_D_MISC_CFG_0, RUBIK_MODE, MERGE),
> +};
> +
> +static uint8_t  map_ram_type[] = {
> +	FIELD_ENUM(RBK_D_DAIN_RAM_TYPE_0, DATAIN_RAM_TYPE, MCIF),
> +	FIELD_ENUM(RBK_D_DAIN_RAM_TYPE_0, DATAIN_RAM_TYPE, CVIF),
> +};
> +
> +static uint8_t  map_precision[] = {
> +	FIELD_ENUM(RBK_D_MISC_CFG_0, IN_PRECISION, INT8),
> +	FIELD_ENUM(RBK_D_MISC_CFG_0, IN_PRECISION, INT16),
> +	FIELD_ENUM(RBK_D_MISC_CFG_0, IN_PRECISION, FP16),
> +};
> +
> +static uint8_t map_bpe[] = {
> +	BPE_PRECISION_INT8,
> +	BPE_PRECISION_INT16,
> +	BPE_PRECISION_FP16,
> +};
> +
> +void
> +dla_rubik_set_producer(struct dla_engine *engine, int32_t group_id, int32_t __unused)
> +{
> +	uint32_t reg;
> +
> +	/**
> +	 * set producer pointer for all sub-modules
> +	 */
> +	reg = group_id << SHIFT(RBK_S_POINTER_0, PRODUCER);
> +	rubik_reg_write(engine, S_POINTER, reg);
> +}
> +
> +int
> +dla_rubik_enable(struct dla_engine *engine, struct dla_processor_group *group)
> +{
> +	uint32_t reg;
> +
> +	/**
> +	 * enable all sub-modules
> +	 */
> +	reg = FIELD_ENUM(RBK_D_OP_ENABLE_0, OP_EN, ENABLE);
> +	rubik_reg_write(engine, D_OP_ENABLE, reg);
> +
> +	return 0;
> +}
> +
> +void
> +dla_rubik_rdma_check(struct dla_processor_group *group)
> +{
> +	group->is_rdma_needed = 0;
> +}
> +
> +static int32_t
> +processor_rubik_program(struct dla_engine *engine, struct dla_processor_group *group)
> +{
> +	int32_t ret = 0;
> +	uint32_t reg, high, low;
> +	uint64_t input_address = 0;
> +	uint64_t output_address = 0;
> +	struct dla_rubik_op_desc *rubik_op;
> +	struct dla_rubik_surface_desc *rubik_surface;
> +
> +	rubik_op = &group->operation_desc->rubik_op;
> +	rubik_surface = &group->surface_desc->rubik_surface;
> +
> +	/* Argument check */
> +	ASSERT_GOTO((rubik_surface->src_data.type != DLA_MEM_HW),
> +		ret, -EINVAL, exit);
> +	ASSERT_GOTO((rubik_surface->dst_data.type != DLA_MEM_HW),
> +		ret, -EINVAL, exit);
> +
> +	/* get the addresses from task descriptor */
> +	ret = dla_read_input_address(engine, &rubik_surface->src_data,
> +						&input_address,
> +						group->op_desc->index,
> +						group->roi_index,
> +						1);
> +	if (ret)
> +		goto exit;
> +
> +	dla_get_dma_cube_address(engine->driver_context,
> +				engine->task->task_data,
> +				rubik_surface->dst_data.address,
> +				rubik_surface->dst_data.offset,
> +				(void *)&output_address,
> +				DESTINATION_DMA);
> +
> +	/* config rubik */
> +	reg = (((uint32_t)map_rubik_mode[rubik_op->mode]) <<
> +			SHIFT(RBK_D_MISC_CFG_0, RUBIK_MODE)) |
> +			(((uint32_t)map_precision[rubik_op->precision]) <<
> +			SHIFT(RBK_D_MISC_CFG_0, IN_PRECISION));
> +	rubik_reg_write(engine, D_MISC_CFG, reg);
> +	reg = (((uint32_t)map_ram_type[rubik_surface->src_data.type]) <<
> +			SHIFT(RBK_D_DAIN_RAM_TYPE_0, DATAIN_RAM_TYPE));
> +	rubik_reg_write(engine, D_DAIN_RAM_TYPE, reg);
> +	reg =  ((rubik_surface->src_data.width-1) <<
> +			SHIFT(RBK_D_DATAIN_SIZE_0_0, DATAIN_WIDTH)) |
> +			((rubik_surface->src_data.height-1) <<
> +			SHIFT(RBK_D_DATAIN_SIZE_0_0, DATAIN_HEIGHT));
> +	rubik_reg_write(engine, D_DATAIN_SIZE_0, reg);
> +	reg =  ((rubik_surface->src_data.channel-1) <<
> +			SHIFT(RBK_D_DATAIN_SIZE_1_0, DATAIN_CHANNEL));
> +	rubik_reg_write(engine, D_DATAIN_SIZE_1, reg);
> +
> +	high = upper_32_bits(input_address);
> +	low = lower_32_bits(input_address);
> +	rubik_reg_write(engine, D_DAIN_ADDR_LOW, low);
> +	rubik_reg_write(engine, D_DAIN_ADDR_HIGH, high);
> +	if (rubik_op->mode == RUBIK_MODE_MERGE) {
> +		ASSERT_GOTO((rubik_surface->src_data.plane_stride != 0),
> +			ret, -EINVAL, exit);
> +		ASSERT_GOTO(((rubik_surface->src_data.plane_stride&0x1F) == 0),
> +			ret, -EINVAL, exit);
> +		rubik_reg_write(engine, D_DAIN_PLANAR_STRIDE,
> +			rubik_surface->src_data.plane_stride);
> +	} else {
> +		rubik_reg_write(engine, D_DAIN_SURF_STRIDE,
> +			rubik_surface->src_data.surf_stride);
> +	}
> +	rubik_reg_write(engine, D_DAIN_LINE_STRIDE,
> +				rubik_surface->src_data.line_stride);
> +
> +	reg = (((uint32_t)map_ram_type[rubik_surface->dst_data.type]) <<
> +			SHIFT(RBK_D_DAOUT_RAM_TYPE_0, DATAOUT_RAM_TYPE));
> +	rubik_reg_write(engine, D_DAOUT_RAM_TYPE, reg);
> +	reg =  ((rubik_surface->dst_data.channel-1) <<
> +			SHIFT(RBK_D_DATAOUT_SIZE_1_0, DATAOUT_CHANNEL));
> +	rubik_reg_write(engine, D_DATAOUT_SIZE_1, reg);
> +
> +	high = upper_32_bits(output_address);
> +	low = lower_32_bits(output_address);
> +	rubik_reg_write(engine, D_DAOUT_ADDR_LOW, low);
> +	rubik_reg_write(engine, D_DAOUT_ADDR_HIGH, high);
> +
> +	rubik_reg_write(engine, D_DAOUT_LINE_STRIDE,
> +			rubik_surface->dst_data.line_stride);
> +	if (rubik_op->mode != RUBIK_MODE_SPLIT) {
> +		rubik_reg_write(engine, D_DAOUT_SURF_STRIDE,
> +				rubik_surface->dst_data.surf_stride);
> +		if (rubik_op->mode == RUBIK_MODE_CONTRACT) {
> +			reg = ((rubik_surface->dst_data.channel *
> +				map_bpe[rubik_op->precision] + 31) >> 5) *
> +				rubik_surface->src_data.surf_stride;
> +			rubik_reg_write(engine, D_CONTRACT_STRIDE_0, reg);
> +
> +			reg = rubik_op->stride_y *
> +				rubik_surface->dst_data.line_stride;
> +			rubik_reg_write(engine, D_CONTRACT_STRIDE_1, reg);
> +
> +			reg = (((uint32_t)(rubik_op->stride_x-1)) <<
> +			SHIFT(RBK_D_DECONV_STRIDE_0, DECONV_X_STRIDE)) |
> +				(((uint32_t)(rubik_op->stride_y-1)) <<
> +			SHIFT(RBK_D_DECONV_STRIDE_0, DECONV_Y_STRIDE));
> +			rubik_reg_write(engine, D_DECONV_STRIDE, reg);
> +		}
> +	} else {
> +		rubik_reg_write(engine, D_DAOUT_PLANAR_STRIDE,
> +				rubik_surface->dst_data.plane_stride);
> +	}
> +
> +exit:
> +	return ret;
> +}
> +
> +int
> +dla_rubik_is_ready(struct dla_processor *processor,
> +			     struct dla_processor_group *group)
> +{
> +	return 1;
> +}
> +
> +void
> +dla_rubik_dump_config(struct dla_processor_group *group)
> +{
> +	struct dla_rubik_op_desc *rubik_op;
> +	struct dla_rubik_surface_desc *rubik_surface;
> +
> +	rubik_surface = &group->surface_desc->rubik_surface;
> +	rubik_op = &group->operation_desc->rubik_op;
> +}
> +
> +int
> +dla_rubik_program(struct dla_engine *engine, struct dla_processor_group *group)
> +{
> +	int32_t ret = 0;
> +
> +	if (!engine->config_data->rubik_enable) {
> +		pr_err("RUBIK is not supported for this configuration\n");
> +		ret = -EINVAL;
> +		goto exit;
> +	}
> +
> +	dla_enable_intr(engine, MASK(GLB_S_INTR_MASK_0, RUBIK_DONE_MASK1) |
> +			MASK(GLB_S_INTR_MASK_0, RUBIK_DONE_MASK0));
> +
> +	ret = processor_rubik_program(engine, group);
> +	if (ret)
> +		goto exit;
> +
> +exit:
> +	return ret;
> +}
> diff --git a/drivers/gpu/drm/nvdla/nvdla_sched.h b/drivers/gpu/drm/nvdla/nvdla_sched.h
> new file mode 100644
> index 000000000000..d3a198127006
> --- /dev/null
> +++ b/drivers/gpu/drm/nvdla/nvdla_sched.h
> @@ -0,0 +1,52 @@
> +/* SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause */
> +/*
> + * Copyright (C) 2017-2018 NVIDIA CORPORATION.
> + * Copyright (C) 2022 Cai Huoqing
> + */
> +
> +#ifndef __NVDLA_SCHED_H_
> +#define __NVDLA_SCHED_H_
> +
> +struct dla_task {
> +	/* platform specific data to communicate with portability layer */
> +	void *task_data;
> +	/* task state */
> +	uint32_t state;
> +	/* Task base address */
> +	uint64_t base;
> +	/* start address of a list of dla_operation_container */
> +	uint64_t operation_desc_addr;
> +	/* start address of a list of dla_surface_container */
> +	uint64_t surface_desc_addr;
> +	/* start address of a list of dla_common_op_desc */
> +	uint64_t dependency_graph_addr;
> +	/* start address of a list of dla_lut_param */
> +	uint64_t lut_data_addr;
> +	/*
> +	 * start address of a list of dla_roi_desc,
> +	 * the first one is dla_roi_array_desc
> +	 * valid when network.dynamic_roi is true
> +	 */
> +	uint64_t roi_array_addr;
> +	/* start address of a list of dla_surface_container */
> +	uint64_t surface_addr;
> +	/* start address of a list of dla_stat_container */
> +	uint64_t stat_data_addr;
> +} __packed __aligned(256);
> +
> +/**
> + * @brief			Configuration parameters supported by the engine
> + *
> + * atom_size			Memory smallest access size
> + * bdma_enable			Defines whether bdma is supported
> + * rubik_enable			Defines whether rubik is supported
> + * weight_compress_support	Defines whether weight data compression is supported
> + */
> +struct dla_config {
> +	uint32_t atom_size;
> +	bool bdma_enable;
> +	bool rubik_enable;
> +	bool weight_compress_support;
> +};
> +
> +#endif
> diff --git a/drivers/gpu/drm/nvdla/nvdla_scheduler.c b/drivers/gpu/drm/nvdla/nvdla_scheduler.c
> new file mode 100644
> index 000000000000..b814077478c6
> --- /dev/null
> +++ b/drivers/gpu/drm/nvdla/nvdla_scheduler.c
> @@ -0,0 +1,1005 @@
> +// SPDX-License-Identifier: BSD-3-Clause OR GPL-2.0
> +/*
> + * Copyright (C) 2017-2018 NVIDIA CORPORATION
> + * Copyright (C) 2022 Cai Huoqing
> + */
> +
> +#include "nvdla_common.h"
> +#include "nvdla_drm.h"
> +#include "nvdla_reg.h"
> +#include "nvdla_engine.h"
> +
> +#define MAX_NUM_ADDRESSES	256
> +
> +static uint64_t roi_array_length __aligned(8);
> +static struct dla_network_desc network;
> +
> +static int
> +dla_update_consumers(struct dla_engine *engine,
> +					 struct dla_processor_group *group,
> +					 struct dla_common_op_desc *op, uint8_t event);
> +
> +static int32_t
> +dla_read_address_list(struct dla_engine *engine)
> +{
> +	return 0;
> +}
> +
> +int32_t
> +dla_read_lut(struct dla_engine *engine, int16_t index, void *dst)
> +{
> +	int32_t ret = 0;
> +	uint64_t src_addr;
> +
> +	if (index == -1) {
> +		ret = -EINVAL;
> +		goto exit;
> +	}
> +
> +	src_addr = engine->task->lut_data_addr;
> +
> +	ret = dla_data_read(engine->driver_context,
> +			engine->task->task_data,
> +			src_addr, (void *)dst,
> +			sizeof(struct dla_lut_param),
> +			(sizeof(struct dla_lut_param) * (uint64_t)index));
> +
> +exit:
> +	return ret;
> +}
> +
> +static int
> +dla_op_enabled(struct dla_engine *engine, struct dla_processor_group *group)
> +{
> +	int32_t ret;
> +	struct dla_common_op_desc *op_desc;
> +
> +	op_desc = group->op_desc;
> +
> +	group->active = 1;
> +
> +	/* update dependency graph for this task */
> +	ret = dla_update_consumers(engine, group, op_desc, DLA_EVENT_OP_ENABLED);
> +
> +	return ret;
> +}
> +
> +static int
> +dla_op_programmed(struct dla_engine *engine, struct dla_processor *processor,
> +		  struct dla_processor_group *group,
> +		  uint8_t rdma_id)
> +{
> +	int32_t ret;
> +	struct dla_common_op_desc *op_desc;
> +
> +	op_desc = group->op_desc;
> +
> +	group->pending = 0;
> +
> +	/* update dependency graph for this task */
> +	ret = dla_update_consumers(engine, group, op_desc, DLA_EVENT_OP_PROGRAMMED);
> +
> +	return ret;
> +}
> +
> +static int32_t
> +dla_read_config(struct dla_engine *engine, struct dla_task *task,
> +				struct dla_processor *processor,
> +				struct dla_processor_group *group)
> +{
> +	int32_t ret;
> +	uint64_t base;
> +	int16_t index;
> +	uint8_t roi_index;
> +
> +	roi_index = group->roi_index;
> +	index = group->op_desc->index;
> +
> +	base = (sizeof(union dla_operation_container) *
> +			(uint64_t)engine->network->num_operations *
> +			(uint64_t)roi_index);
> +	base = base + (sizeof(union dla_operation_container) *
> +			(uint64_t)index);
> +
> +	ret = dla_data_read(engine->driver_context, task->task_data,
> +				task->operation_desc_addr,
> +				(void *)group->operation_desc,
> +				sizeof(union dla_operation_container),
> +				base);
> +	if (ret)
> +		goto exit;
> +
> +	base = (sizeof(union dla_surface_container) *
> +			(uint64_t)engine->network->num_operations *
> +			(uint64_t)roi_index);
> +
> +	base = base + (sizeof(union dla_surface_container) *
> +			(uint64_t)index);
> +
> +	ret = dla_data_read(engine->driver_context, task->task_data,
> +				task->surface_desc_addr,
> +				(void *)group->surface_desc,
> +				sizeof(union dla_surface_container), base);
> +	if (ret)
> +		goto exit;
> +
> +	processor->dump_config(group);
> +
> +exit:
> +	return ret;
> +}
> +
> +static void
> +dla_reset_group(struct dla_engine *engine, struct dla_processor_group *group)
> +{
> +	int32_t i;
> +
> +	for (i = 0; i < DLA_OP_NUM; i++) {
> +		dla_put_op_desc(engine, group->consumers[i]);
> +		group->consumers[i] = NULL;
> +	}
> +
> +	dla_put_op_desc(engine, group->fused_parent);
> +	group->fused_parent = NULL;
> +
> +	dla_put_op_desc(engine, group->op_desc);
> +	group->op_desc = NULL;
> +}
> +
> +static int
> +dla_prepare_operation(struct dla_engine *engine,
> +					  struct dla_processor *processor,
> +					  struct dla_common_op_desc *op_desc,
> +					  uint8_t roi_index, uint32_t *group_number)
> +{
> +	int32_t ret = 0;
> +	uint8_t group_id;
> +	uint8_t rdma_id;
> +	struct dla_processor_group *group;
> +
> +	/*
> +	 * If not already programmed then find out if
> +	 * processor is free and which group is free
> +	 */
> +	ret = utils_get_free_group(engine, processor, &group_id, &rdma_id);
> +	if (ret) {
> +		pr_debug("processor:%s register groups are busy\n",
> +			processor->name);
> +		goto exit;
> +	} else {
> +		pr_info("processor:%s group:%d, rdma_group:%d available\n",
> +				processor->name, group_id, rdma_id);
> +	}
> +	*group_number = group_id;
> +	group = &processor->groups[group_id];
> +
> +	/*
> +	 * update operation descriptor
> +	 */
> +	group->op_desc = op_desc;
> +	dla_get_refcount(op_desc);
> +	group->id = group_id;
> +	group->roi_index = roi_index;
> +	group->rdma_id = rdma_id;
> +
> +	ret = dla_read_config(engine, engine->task, processor, group);
> +	if (ret)
> +		goto exit;
> +
> +	group->pending = 1;
> +
> +	processor->group_status |= (1 << group->id);
> +
> +	processor->rdma_check(group);
> +	if (group->is_rdma_needed) {
> +		group->rdma_id = rdma_id;
> +		processor->rdma_status |= (1 << rdma_id);
> +	}
> +
> +	processor->tail_op = op_desc;
> +exit:
> +	return ret;
> +}
> +
> +static int
> +dla_program_operation(struct dla_engine *engine,
> +					  struct dla_processor *processor,
> +					  struct dla_processor_group *group)
> +{
> +	int32_t i;
> +	int32_t ret = 0;
> +	struct dla_common_op_desc *op_desc;
> +
> +	pr_info("Program %s operation index %d ROI %d Group[%d]\n",
> +					processor->name,
> +					group->op_desc->index,
> +					group->roi_index,
> +					group->id);
> +
> +	group->programming = 1;
> +
> +	op_desc = group->op_desc;
> +
> +	processor->set_producer(engine, group->id, group->rdma_id);
> +
> +	ret = processor->program(engine, group);
> +	if (ret)
> +		goto exit;
> +
> +	/**
> +	 * Pre-fetch consumers
> +	 */
> +	for (i = 0; i < DLA_OP_NUM; i++) {
> +		group->consumers[i] = dla_get_op_desc(engine, engine->task,
> +					op_desc->consumers[i].index, i,
> +					group->roi_index);
> +	}
> +
> +	group->fused_parent = dla_get_op_desc(engine, engine->task,
> +					op_desc->fused_parent.index,
> +					op_desc->op_type - 1,
> +					group->roi_index);
> +
> +	if (group->fused_parent != NULL) {
> +		if (group->fused_parent->op_type != (op_desc->op_type - 1)) {
> +			ret = -EINVAL;
> +			goto exit;
> +		}
> +	}
> +
> +	ret = dla_op_programmed(engine, processor, group, group->rdma_id);
> +	if (!ret)
> +		goto exit;
> +
> +exit:
> +	group->programming = 0;
> +	return ret;
> +}
> +
> +static int
> +dla_enable_operation(struct dla_engine *engine,
> +					 struct dla_processor *processor,
> +					 struct dla_common_op_desc *op_desc)
> +{
> +	int32_t ret = 0;
> +	int32_t group_id;
> +	struct dla_processor_group *group;
> +
> +	/**
> +	 * If some operation has reported error then skip
> +	 * enabling next operations
> +	 */
> +	if (engine->status)
> +		goto exit;
> +
> +	/**
> +	 * Find out if operation is already programmed
> +	 */
> +	group_id = 0;
> +	group = &processor->groups[group_id];
> +	if ((processor->group_status & (1 << group_id)) &&
> +			group->op_desc->index == op_desc->index &&
> +			group->roi_index == op_desc->roi_index &&
> +			!group->pending)
> +		goto enable_op;
> +
> +	group_id = 1;
> +	group = &processor->groups[group_id];
> +	if ((processor->group_status & (1 << group_id)) &&
> +			group->op_desc->index == op_desc->index &&
> +			group->roi_index == op_desc->roi_index &&
> +			!group->pending)
> +		goto enable_op;
> +
> +	/**
> +	 * Operation is not programmed yet, ignore
> +	 */
> +	pr_debug("exit %s without actual enable due to processor "
> +				"hasn't been programmed\n", __func__);
> +	goto exit;
> +
> +enable_op:
> +	/**
> +	 * If this event is triggered as part of programming same
> +	 * group then skip enable, it will get enabled after programming
> +	 * is complete
> +	 */
> +	if (group->programming)
> +		goto exit;
> +
> +	if (group->active) {
> +		pr_debug("Processor:%s already enabled on group:%d\n",
> +			processor->name, group_id);
> +		goto exit;
> +	}
> +
> +	pr_info("Enable %s operation index %d ROI %d\n",
> +					processor->name,
> +					group->op_desc->index,
> +					group->roi_index);
> +
> +	processor->set_producer(engine, group->id, group->rdma_id);
> +
> +	ret = processor->enable(engine, group);
> +	if (ret)
> +		goto exit;
> +
> +	ret = dla_op_enabled(engine, group);
> +exit:
> +	return ret;
> +}
> +
> +static int
> +dla_submit_operation(struct dla_engine *engine,
> +					 struct dla_processor *processor,
> +					 struct dla_common_op_desc *op_desc,
> +					 uint8_t roi_index)
> +{
> +	int32_t err;
> +	uint32_t group_id = 0;
> +
> +	pr_info("Prepare %s operation index %d ROI %d dep_count %d\n",
> +			processor->name, op_desc->index, roi_index,
> +			op_desc->dependency_count);
> +	err = dla_prepare_operation(engine, processor, op_desc, roi_index, &group_id);
> +	if (err)
> +		goto exit;
> +
> +	if (!processor->is_ready(processor, &processor->groups[group_id]))
> +		goto exit;
> +
> +	err = dla_program_operation(engine, processor, &processor->groups[group_id]);
> +	if (err)
> +		goto exit;
> +
> +	if (op_desc->dependency_count == 0)
> +		err = dla_enable_operation(engine, processor, op_desc);
> +
> +exit:
> +	return err;
> +}
> +
> +/**
> + * Dequeue next operation of same type from list of operations
> + */
> +static int32_t
> +dla_dequeue_operation(struct dla_engine *engine,
> +					  struct dla_processor *processor)
> +{
> +	int32_t ret = 0;
> +	int16_t index;
> +	struct dla_common_op_desc *consumer;
> +
> +	if (engine->status) {
> +		pr_debug("Skip dequeue op as engine has reported error\n");
> +		goto exit;
> +	}
> +
> +	/**
> +	 * If we are done processing all ROIs for current op then
> +	 * load next op of same type otherwise reload same op for
> +	 * next ROI.
> +	 */
> +	if (processor->roi_index == (engine->network->num_rois - 1)) {
> +		index = processor->tail_op->consumers[processor->op_type].index;
> +		if (-1 == index) {
> +			/**
> +			 * It means we are done processing
> +			 * all ops of this type
> +			 */
> +			pr_debug("exit %s as there's no further operation\n",
> +				processor->name);
> +			goto exit;
> +		}
> +		processor->roi_index = 0;
> +	} else {
> +		processor->roi_index++;
> +		index = processor->tail_op->index;
> +	}
> +
> +	pr_debug("Dequeue op from %s processor, index=%d ROI=%d\n",
> +			processor->name, index, processor->roi_index);
> +
> +	/**
> +	 * Get operation descriptor
> +	 */
> +	consumer = dla_get_op_desc(engine, engine->task, index,
> +				processor->op_type, processor->roi_index);
> +	if (consumer == NULL) {
> +		ret = -ENOMEM;
> +		pr_err("Failed to allocate op_desc");
> +		goto exit;
> +	}
> +
> +	ret = dla_submit_operation(engine, processor, consumer, processor->roi_index);
> +	dla_put_op_desc(engine, consumer);
> +
> +exit:
> +	return ret;
> +}
> +
> +static int
> +dla_update_dependency(struct dla_engine *engine,
> +					  struct dla_consumer *consumer,
> +					  struct dla_common_op_desc *op_desc,
> +					  uint8_t event, uint8_t roi_index)
> +{
> +	int32_t ret = 0;
> +	struct dla_processor *processor;
> +
> +	if (consumer->index == -1)
> +		goto exit;
> +
> +	/* Update dependency only if event matches */
> +	if (event != consumer->event)
> +		goto exit;
> +
> +	/**
> +	 * If consumer index is valid but op desc is NULL means
> +	 * op desc for consumer was not pre-fetched
> +	 */
> +	if (op_desc == NULL) {
> +		ret = -EINVAL;
> +		pr_err("Operation descriptor is NULL, consumer index %d",
> +				consumer->index);
> +		goto exit;
> +	}
> +
> +	pr_debug("Update dependency operation index %d ROI %d DEP_COUNT=%d\n",
> +					op_desc->index, op_desc->roi_index,
> +					op_desc->dependency_count);
> +	op_desc->dependency_count--;
> +
> +	if (op_desc->dependency_count == 0) {
> +		processor = &engine->processors[op_desc->op_type];
> +		pr_debug("enable %s in %s as depdency are resolved\n",
> +			processor->name, __func__);
> +
> +		ret = dla_enable_operation(engine, processor, op_desc);
> +		if (ret)
> +			goto exit;
> +	}
> +exit:
> +	return ret;
> +}
> +
> +static int
> +dla_update_consumers(struct dla_engine *engine,
> +					 struct dla_processor_group *group,
> +					 struct dla_common_op_desc *op,
> +					 uint8_t event)
> +{
> +	int32_t i;
> +	int32_t ret = 0;
> +
> +	if (engine->status) {
> +		pr_debug("Skip update as engine has reported error\n");
> +		goto exit;
> +	}
> +
> +	for (i = 0; i < DLA_OP_NUM; i++) {
> +		ret = dla_update_dependency(engine, &op->consumers[i],
> +						group->consumers[i],
> +						event, group->roi_index);
> +		if (ret) {
> +			pr_err("Failed to update dependency for consumer %d, ROI %d",
> +				   i, group->roi_index);
> +			goto exit;
> +		}
> +	}
> +
> +	ret = dla_update_dependency(engine, &op->fused_parent,
> +					group->fused_parent,
> +					event, group->roi_index);
> +	if (ret) {
> +		pr_err("Failed to update dependency for "
> +			"fused parent, ROI %d", group->roi_index);
> +		goto exit;
> +	}
> +
> +exit:
> +	return ret;
> +}
> +
> +/**
> + * Handle operation completion notification
> + */
> +int
> +dla_op_completion(struct dla_engine *engine,
> +				  struct dla_processor *processor,
> +				  struct dla_processor_group *group)
> +{
> +	int32_t ret;
> +	struct dla_task *task;
> +	struct dla_common_op_desc *op_desc;
> +	struct dla_processor_group *next_group;
> +
> +	pr_info("Completed %s operation index %d ROI %d\n",
> +			processor->name, group->op_desc->index,
> +			group->roi_index);
> +
> +	task = engine->task;
> +
> +	/**
> +	 * Mark OP as done only when all ROIs are done for that
> +	 * operation
> +	 */
> +	if (group->roi_index == (engine->network->num_rois - 1))
> +		engine->num_proc_hwl++;
> +
> +	op_desc = group->op_desc;
> +
> +	/**
> +	 * Get an extra reference count to keep op descriptor
> +	 * in cache until this operation completes
> +	 */
> +	dla_get_refcount(op_desc);
> +
> +	processor->group_status &= ~(1 << group->id);
> +	if (group->is_rdma_needed) {
> +		group->is_rdma_needed = 0;
> +		processor->rdma_status &= ~(1 << group->rdma_id);
> +		group->rdma_id = 0;
> +	}
> +	group->active = 0;
> +	group->lut_index = -1;
> +	processor->last_group = group->id;
> +
> +	/**
> +	 * Switch consumer pointer to next group
> +	 */
> +	processor->consumer_ptr = !group->id;
> +
> +	/**
> +	 * update dependency graph for this task
> +	 * TODO: Add proper error handling
> +	 */
> +	ret = dla_update_consumers(engine, group, op_desc, DLA_EVENT_OP_COMPLETED);
> +	if (ret)
> +		goto exit;
> +
> +	pr_info("%d HWLs done, totally %d layers\n",
> +				engine->num_proc_hwl,
> +				engine->network->num_operations);
> +
> +	/* free operation descriptor from cache */
> +	dla_reset_group(engine, group);
> +
> +	/* if not hwl pending, means network completed */
> +	if (engine->network->num_operations == engine->num_proc_hwl) {
> +		dla_put_op_desc(engine, op_desc);
> +		goto exit;
> +	}
> +
> +	next_group = &processor->groups[!group->id];
> +	if (next_group->pending && !engine->status) {
> +		/**
> +		 * Next group must be ready here for programming,
> +		 * if not means it is an error
> +		 */
> +		if (!processor->is_ready(processor, next_group))
> +			goto dequeue_op;
> +
> +		ret = dla_program_operation(engine, processor, next_group);
> +		if (ret)
> +			goto exit;
> +
> +		if (next_group->op_desc->dependency_count != 0)
> +			goto dequeue_op;
> +
> +		ret = dla_enable_operation(engine, processor,
> +					   next_group->op_desc);
> +		if (ret)
> +			goto exit;
> +	}
> +
> +dequeue_op:
> +	/* dequeue operation from this processor */
> +	ret = dla_dequeue_operation(engine, processor);
> +
> +exit:
> +	dla_put_op_desc(engine, op_desc);
> +	pr_debug("Exit:%s processor %s group%u status=%d\n",
> +				__func__, processor->name,
> +				group->id, ret);
> +
> +	return ret;
> +}
> +
> +/**
> + * Read network configuration from DRAM, network descriptor address
> + * is always first in the address list. Network configuration contains
> + * offset in address list for addresses of other lists used to
> + * execute network
> + *
> + * @engine: Engine instance
> + * @return: 0 for success
> + */
> +static int
> +dla_read_network_config(struct dla_engine *engine)
> +{
> +	int32_t ret;
> +	uint64_t network_addr;
> +	struct dla_task *task = engine->task;
> +
> +	/**
> +	 * Read address list from DRAM to DMEM
> +	 */
> +	ret = dla_read_address_list(engine);
> +	if (ret) {
> +		pr_err("Failed to read address list");
> +		goto exit;
> +	}
> +
> +	/**
> +	 * Read network descriptor address from address list. It is always
> +	 * at index 0.
> +	 */
> +	ret = dla_get_dma_address(engine->driver_context, task->task_data,
> +							  0, (void *)&network_addr,
> +							  DESTINATION_PROCESSOR);
> +	if (ret) {
> +		pr_err("Failed to read network desc address");
> +		goto exit;
> +	}
> +
> +	/**
> +	 * Read network descriptor, it has information for a network
> +	 * such as all address indexes.
> +	 */
> +	ret = dla_data_read(engine->driver_context, task->task_data,
> +						network_addr, (void *)&network,
> +						sizeof(struct dla_network_desc), 0);
> +	if (ret) {
> +		pr_err("Failed to read network descriptor");
> +		goto exit;
> +	}
> +
> +	if (network.num_operations == 0)
> +		goto exit;
> +
> +	/**
> +	 * Read operation descriptor list address from address list
> +	 */
> +	ret = dla_get_dma_address(engine->driver_context, task->task_data,
> +							  network.operation_desc_index,
> +							  (void *)&task->operation_desc_addr,
> +							  DESTINATION_PROCESSOR);
> +	if (ret) {
> +		pr_err("Failed to read operation desc list address");
> +		goto exit;
> +	}
> +
> +	/**
> +	 * Read surface descriptor list address from address list
> +	 */
> +	ret = dla_get_dma_address(engine->driver_context, task->task_data,
> +							  network.surface_desc_index,
> +							  (void *)&task->surface_desc_addr,
> +							  DESTINATION_PROCESSOR);
> +	if (ret) {
> +		pr_err("Failed to read surface desc list address");
> +		goto exit;
> +	}
> +
> +	/**
> +	 * Read dependency graph address from address list
> +	 */
> +	ret = dla_get_dma_address(engine->driver_context, task->task_data,
> +							  network.dependency_graph_index,
> +							  (void *)&task->dependency_graph_addr,
> +							  DESTINATION_PROCESSOR);
> +	if (ret) {
> +		pr_err("Failed to ready dependency graph address");
> +		goto exit;
> +	}
> +
> +	/**
> +	 * Read LUT data list address from address list
> +	 */
> +	if (network.num_luts) {
> +		ret = dla_get_dma_address(engine->driver_context,
> +								  task->task_data,
> +								  network.lut_data_index,
> +								  (void *)&task->lut_data_addr,
> +								  DESTINATION_PROCESSOR);
> +		if (ret) {
> +			pr_err("Failed to read LUT list address");
> +			goto exit;
> +		}
> +	}
> +
> +	/**
> +	 * Read address for ROI information
> +	 */
> +	if (network.dynamic_roi) {
> +		/**
> +		 * Read ROI array address from address list
> +		 */
> +		ret = dla_get_dma_address(engine->driver_context,
> +								  task->task_data,
> +								  network.roi_array_index,
> +								  (void *)&task->roi_array_addr,
> +								  DESTINATION_PROCESSOR);
> +		if (ret) {
> +			pr_err("Failed to read ROI array address");
> +			goto exit;
> +		}
> +
> +		ret = dla_data_read(engine->driver_context, task->task_data,
> +							task->roi_array_addr,
> +							(void *)&roi_array_length,
> +							sizeof(uint64_t), 0);
> +		if (ret) {
> +			pr_err("Failed to read ROI array length");
> +			goto exit;
> +		}
> +
> +		/**
> +		 * Number of ROIs detected can't be greater than maximum number
> +		 * ROIs this network can process
> +		 */
> +		if (roi_array_length > network.num_rois) {
> +			pr_err("Invalid number of ROIs detected");
> +			ret = -EINVAL;
> +			goto exit;
> +		}
> +
> +		network.num_rois = roi_array_length;
> +
> +		/**
> +		 * Read surface address from address list
> +		 */
> +		ret = dla_get_dma_address(engine->driver_context,
> +								  task->task_data,
> +								  network.surface_index,
> +								  (void *)&task->surface_addr,
> +								  DESTINATION_DMA);
> +		if (ret) {
> +			pr_err("Failed to read surface address");
> +			goto exit;
> +		}
> +	}
> +
> +exit:
> +	return ret;
> +}
> +
> +static int
> +dla_initiate_processors(struct dla_engine *engine)
> +{
> +	int32_t i;
> +	int32_t ret = 0;
> +	int16_t index;
> +	struct dla_processor *processor;
> +	struct dla_common_op_desc *consumer;
> +	struct dla_network_desc *nw;
> +
> +	if (!engine) {
> +		ret = -EINVAL;
> +		goto exit;
> +	}
> +
> +	nw = engine->network;
> +
> +	/* Validate operation heads before initiating processors */
> +	for (i = 0; i < DLA_OP_NUM; i++) {
> +		if (nw->op_head[i] >= nw->num_operations) {
> +			ret = -EINVAL;
> +			pr_err("Invalid op_head %d for op %d",
> +						nw->op_head[i], i);
> +			goto exit;
> +		}
> +	}
> +
> +	for (i = 0; i < DLA_OP_NUM; i++) {
> +		index = nw->op_head[i];
> +
> +		/* If there is no op for this type then continue */
> +		if (-1 == index)
> +			continue;
> +
> +		consumer = dla_get_op_desc(engine, engine->task, index, i, 0);
> +		/*
> +		 * if consumer is NULL, it means either data copy error
> +		 * or cache insufficient - we should fix it
> +		 **/
> +		if (consumer == NULL) {
> +			pr_err("Failed to allocate memory for op_head[%d]=%d",
> +							i, index);
> +			ret = -ENOMEM;
> +			goto exit;
> +		}
> +
> +		processor = &engine->processors[consumer->op_type];
> +
> +		ret = dla_submit_operation(engine, processor, consumer, 0);
> +		dla_put_op_desc(engine, consumer);
> +		if (ret && ret != -EBUSY) {
> +			pr_err("Failed to submit %s op from index %u\n",
> +						processor->name, index);
> +			goto exit;
> +		}
> +
> +		ret = dla_dequeue_operation(engine, processor);
> +		if (ret) {
> +			pr_err("Failed to dequeue op for %s processor",
> +							processor->name);
> +			goto exit;
> +		}
> +	}
> +exit:
> +	return ret;
> +}
> +
> +static int
> +dla_handle_events(struct dla_engine *engine, struct dla_processor *processor)
> +{
> +	int32_t j;
> +	int32_t ret = 0;
> +	uint8_t group_id;
> +	struct dla_processor_group *group;
> +
> +	pr_debug("Enter:%s, processor:%s\n", __func__, processor->name);
> +
> +	group_id = !processor->last_group;
> +
> +	for (j = 0; j < DLA_NUM_GROUPS; j++) {
> +		group = &processor->groups[group_id];
> +
> +		if ((1 << DLA_EVENT_CDMA_WT_DONE) & group->events) {
> +			pr_info("Handle cdma weight done event, processor %s group %u\n",
> +					processor->name, group->id);
> +
> +			ret = dla_update_consumers(engine, group, group->op_desc,
> +									   DLA_EVENT_CDMA_WT_DONE);
> +			if (ret)
> +				goto exit;
> +		}
> +
> +		if ((1 << DLA_EVENT_CDMA_DT_DONE) & group->events) {
> +			pr_info("Handle cdma data done event, processor %s group %u\n",
> +					processor->name, group->id);
> +
> +			ret = dla_update_consumers(engine, group,
> +									   group->op_desc,
> +									   DLA_EVENT_CDMA_DT_DONE);
> +			if (ret)
> +				goto exit;
> +		}
> +
> +		/**
> +		 * Handle complete after all other events
> +		 */
> +		if ((1 << DLA_EVENT_OP_COMPLETED) & group->events) {
> +			pr_info("Handle op complete event, processor %s group %u\n",
> +					processor->name, group->id);
> +
> +			ret = dla_op_completion(engine, processor, group);
> +			if (ret)
> +				goto exit;
> +		}
> +
> +		/**
> +		 * Clear all events
> +		 */
> +		group->events = 0;
> +		group_id = !group_id;
> +	}
> +exit:
> +	return ret;
> +}
> +
> +int
> +dla_process_events(struct dla_engine *engine, uint32_t *task_complete)
> +{
> +	int32_t i;
> +	int32_t ret = 0;
> +
> +	for (i = 0; i < DLA_OP_NUM; i++) {
> +		struct dla_processor *processor;
> +
> +		processor = &engine->processors[i];
> +		ret = dla_handle_events(engine, processor);
> +		/**
> +		 * Incase engine status is non-zero, then don't
> +		 * update the engine status. We should keep its
> +		 * status for later cleaning of engine.
> +		 */
> +		if (!engine->status)
> +			engine->status = ret;
> +	}
> +
> +	if (engine->network->num_operations == engine->num_proc_hwl)
> +		*task_complete = 1;
> +
> +	return ret;
> +}
> +
> +/**
> + * Execute task selected by task scheduler
> + *
> + * 1. Read network configuration for the task
> + * 2. Initiate processors with head of list for same op
> + * 3. Start processing events received
> + */
> +int
> +dla_execute_task(struct dla_engine *engine_context, void *task_data, void *config_data)
> +{
> +	int32_t ret;
> +	struct dla_engine *engine = engine_context;
> +
> +	if (engine == NULL) {
> +		pr_err("engine is NULL\n");
> +		ret = -EINVAL;
> +		goto complete;
> +	}
> +
> +	if (engine->task == NULL) {
> +		pr_err("task is NULL\n");
> +		ret = -EINVAL;
> +		goto complete;
> +	}
> +
> +	if (engine->task->task_data != NULL) {
> +		/* We have on the fly tasks running */
> +		pr_warn("Already some task in progress");
> +		ret = -EBUSY;
> +		goto complete;
> +	}
> +
> +	engine->task->task_data = task_data;
> +	engine->config_data = config_data;
> +	engine->network = &network;
> +	engine->num_proc_hwl = 0;
> +
> +	ret = dla_read_network_config(engine);
> +	if (ret)
> +		goto complete;
> +
> +	/* If no operations in a task means nothing to do, NULL task */
> +	if (engine->network->num_operations == 0)
> +		goto complete;
> +
> +	ret = dla_initiate_processors(engine);
> +	engine->status = ret;
> +
> +complete:
> +	return ret;
> +}
> +
> +void
> +dla_clear_task(struct dla_engine *engine_context)
> +{
> +	int32_t i, j;
> +	struct dla_engine *engine = engine_context;
> +
> +	for (i = 0; i < DLA_OP_NUM; i++) {
> +		struct dla_processor *processor = &engine->processors[i];
> +
> +		processor->roi_index = 0;
> +		processor->group_status = 0;
> +		processor->rdma_status = 0;
> +
> +		processor->tail_op = NULL;
> +
> +		for (j = 0; j < DLA_NUM_GROUPS; j++) {
> +			struct dla_processor_group *group =
> +						&processor->groups[j];
> +
> +			group->rdma_id = group->id;
> +			group->active = 0;
> +			group->events = 0;
> +			group->roi_index = 0;
> +			group->is_rdma_needed = 0;
> +			group->lut_index = -1;
> +		}
> +	}
> +
> +	engine->task->task_data = NULL;
> +	engine->network = NULL;
> +	engine->num_proc_hwl = 0;
> +	engine->status = 0;
> +
> +	pr_info("reset engine done\n");
> +}
> diff --git a/drivers/gpu/drm/nvdla/nvdla_sdp.c b/drivers/gpu/drm/nvdla/nvdla_sdp.c
> new file mode 100644
> index 000000000000..655ec7195ee9
> --- /dev/null
> +++ b/drivers/gpu/drm/nvdla/nvdla_sdp.c
> @@ -0,0 +1,728 @@
> +// SPDX-License-Identifier: BSD-3-Clause OR GPL-2.0
> +/*
> + * Copyright (C) 2017-2018 NVIDIA CORPORATION
> + * Copyright (C) 2022 Cai Huoqing
> + */
> +
> +#include "nvdla_drm.h"
> +#include "nvdla_reg.h"
> +#include "nvdla_common.h"
> +#include "nvdla_engine.h"
> +
> +static const uint8_t map_ena[] = {
> +	FIELD_ENUM(SDP_RDMA_D_BRDMA_CFG_0, BRDMA_DISABLE, YES),
> +	FIELD_ENUM(SDP_RDMA_D_BRDMA_CFG_0, BRDMA_DISABLE, NO),
> +};
> +
> +static const uint8_t map_prelu[] = {
> +	FIELD_ENUM(SDP_D_DP_BS_CFG_0, BS_MUL_PRELU, NO),
> +	FIELD_ENUM(SDP_D_DP_BS_CFG_0, BS_MUL_PRELU, YES),
> +};
> +
> +static const uint8_t map_bypass[] = {
> +	FIELD_ENUM(SDP_D_DP_BS_CFG_0, BS_BYPASS, YES),
> +	FIELD_ENUM(SDP_D_DP_BS_CFG_0, BS_BYPASS, NO),
> +};
> +
> +static const uint8_t map_alu_op[] = {
> +	FIELD_ENUM(SDP_D_DP_EW_CFG_0, EW_ALU_ALGO, MAX),
> +	FIELD_ENUM(SDP_D_DP_EW_CFG_0, EW_ALU_ALGO, MIN),
> +	FIELD_ENUM(SDP_D_DP_EW_CFG_0, EW_ALU_ALGO, SUM),
> +	FIELD_ENUM(SDP_D_DP_EW_CFG_0, EW_ALU_ALGO, EQL),
> +};
> +
> +static const uint8_t map_alu_src[] = {
> +	FIELD_ENUM(SDP_D_DP_BS_ALU_CFG_0, BS_ALU_SRC, MEM),
> +	FIELD_ENUM(SDP_D_DP_BS_ALU_CFG_0, BS_ALU_SRC, REG),
> +};
> +
> +static const uint8_t map_fly[] = {
> +	FIELD_ENUM(SDP_D_FEATURE_MODE_CFG_0, FLYING_MODE, OFF),
> +	FIELD_ENUM(SDP_D_FEATURE_MODE_CFG_0, FLYING_MODE, ON),
> +};
> +
> +static const uint8_t map_dst[] = {
> +	FIELD_ENUM(SDP_D_FEATURE_MODE_CFG_0, OUTPUT_DST, MEM),
> +	FIELD_ENUM(SDP_D_FEATURE_MODE_CFG_0, OUTPUT_DST, PDP),
> +};
> +
> +
> +static const uint8_t map_wg[] = {
> +	FIELD_ENUM(SDP_D_FEATURE_MODE_CFG_0, WINOGRAD, OFF),
> +	FIELD_ENUM(SDP_D_FEATURE_MODE_CFG_0, WINOGRAD, ON),
> +};
> +
> +static const uint8_t map_precision[] = {
> +	FIELD_ENUM(SDP_RDMA_D_FEATURE_MODE_CFG_0, IN_PRECISION, INT8),
> +	FIELD_ENUM(SDP_RDMA_D_FEATURE_MODE_CFG_0, IN_PRECISION, INT16),
> +	FIELD_ENUM(SDP_RDMA_D_FEATURE_MODE_CFG_0, IN_PRECISION, FP16),
> +};
> +
> +static const uint32_t map_proc_precision[3][3] = {
> +	{
> +		FIELD_ENUM(SDP_RDMA_D_FEATURE_MODE_CFG_0, IN_PRECISION, INT8),
> +		FIELD_ENUM(SDP_RDMA_D_FEATURE_MODE_CFG_0, IN_PRECISION, INT8),
> +		FIELD_ENUM(SDP_RDMA_D_FEATURE_MODE_CFG_0, IN_PRECISION, FP16),
> +	},
> +	{
> +		FIELD_ENUM(SDP_RDMA_D_FEATURE_MODE_CFG_0, IN_PRECISION, INT8),
> +		FIELD_ENUM(SDP_RDMA_D_FEATURE_MODE_CFG_0, IN_PRECISION, INT16),
> +		FIELD_ENUM(SDP_RDMA_D_FEATURE_MODE_CFG_0, IN_PRECISION, FP16),
> +	},
> +	{
> +		FIELD_ENUM(SDP_RDMA_D_FEATURE_MODE_CFG_0, IN_PRECISION, INT8),
> +		FIELD_ENUM(SDP_RDMA_D_FEATURE_MODE_CFG_0, IN_PRECISION, INT16),
> +		FIELD_ENUM(SDP_RDMA_D_FEATURE_MODE_CFG_0, IN_PRECISION, FP16),
> +	},
> +};
> +
> +static const uint8_t map_op_type[] = {
> +	FIELD_ENUM(SDP_RDMA_D_BRDMA_CFG_0, BRDMA_DATA_USE, MUL),
> +	FIELD_ENUM(SDP_RDMA_D_BRDMA_CFG_0, BRDMA_DATA_USE, MUL),
> +	FIELD_ENUM(SDP_RDMA_D_BRDMA_CFG_0, BRDMA_DATA_USE, ALU),
> +	FIELD_ENUM(SDP_RDMA_D_BRDMA_CFG_0, BRDMA_DATA_USE, BOTH),
> +};
> +
> +static const uint8_t map_element_size[] = {
> +	FIELD_ENUM(SDP_RDMA_D_BRDMA_CFG_0, BRDMA_DATA_SIZE, ONE_BYTE),
> +	FIELD_ENUM(SDP_RDMA_D_BRDMA_CFG_0, BRDMA_DATA_SIZE, TWO_BYTE),
> +	FIELD_ENUM(SDP_RDMA_D_BRDMA_CFG_0, BRDMA_DATA_SIZE, TWO_BYTE),
> +};
> +
> +static const uint8_t map_op_mode[] = {
> +	FIELD_ENUM(SDP_RDMA_D_BRDMA_CFG_0, BRDMA_DATA_MODE, PER_ELEMENT),
> +	FIELD_ENUM(SDP_RDMA_D_BRDMA_CFG_0, BRDMA_DATA_MODE, PER_KERNEL),
> +	FIELD_ENUM(SDP_RDMA_D_BRDMA_CFG_0, BRDMA_DATA_MODE, PER_ELEMENT),
> +};
> +
> +static const uint8_t map_ram_type[] = {
> +	FIELD_ENUM(SDP_RDMA_D_BRDMA_CFG_0, BRDMA_RAM_TYPE, MC),
> +	FIELD_ENUM(SDP_RDMA_D_BRDMA_CFG_0, BRDMA_RAM_TYPE, CV),
> +};
> +
> +static const uint8_t map_perf_dma[] = {
> +	FIELD_ENUM(SDP_D_PERF_ENABLE_0, PERF_DMA_EN, NO),
> +	FIELD_ENUM(SDP_D_PERF_ENABLE_0, PERF_DMA_EN, YES),
> +};
> +
> +static const uint8_t map_perf_lut[] = {
> +	FIELD_ENUM(SDP_D_PERF_ENABLE_0, PERF_LUT_EN, NO),
> +	FIELD_ENUM(SDP_D_PERF_ENABLE_0, PERF_LUT_EN, YES),
> +};
> +
> +static const uint8_t map_perf_sat[] = {
> +	FIELD_ENUM(SDP_D_PERF_ENABLE_0, PERF_SAT_EN, NO),
> +	FIELD_ENUM(SDP_D_PERF_ENABLE_0, PERF_SAT_EN, YES),
> +};
> +
> +static const uint8_t map_perf_nan_inf[] = {
> +	FIELD_ENUM(SDP_D_PERF_ENABLE_0, PERF_NAN_INF_COUNT_EN, NO),
> +	FIELD_ENUM(SDP_D_PERF_ENABLE_0, PERF_NAN_INF_COUNT_EN, YES),
> +};
> +
> +void
> +dla_sdp_set_producer(struct dla_engine *engine, int32_t group_id, int32_t rdma_group_id)
> +{
> +	uint32_t reg;
> +
> +	/**
> +	 * set producer pointer for all sub-modules
> +	 */
> +	reg = group_id << SHIFT(SDP_S_POINTER_0, PRODUCER);
> +	sdp_reg_write(engine, S_POINTER, reg);
> +	reg = rdma_group_id << SHIFT(SDP_RDMA_S_POINTER_0, PRODUCER);
> +	sdp_rdma_reg_write(engine, S_POINTER, reg);
> +}
> +
> +int
> +dla_sdp_enable(struct dla_engine *engine, struct dla_processor_group *group)
> +{
> +	uint32_t reg;
> +
> +	/**
> +	 * enable all sub-modules
> +	 */
> +	if (group->is_rdma_needed) {
> +		reg = FIELD_ENUM(SDP_RDMA_D_OP_ENABLE_0, OP_EN, ENABLE);
> +		sdp_rdma_reg_write(engine, D_OP_ENABLE, reg);
> +	}
> +	reg = FIELD_ENUM(SDP_D_OP_ENABLE_0, OP_EN, ENABLE);
> +	sdp_reg_write(engine, D_OP_ENABLE, reg);
> +
> +	return 0;
> +}
> +
> +void
> +dla_sdp_rdma_check(struct dla_processor_group *group)
> +{
> +	uint8_t x1_rdma_ena;
> +	uint8_t x2_rdma_ena;
> +	uint8_t y_rdma_ena;
> +	uint8_t fly;
> +	struct dla_sdp_op_desc *sdp_op;
> +	struct dla_sdp_surface_desc *sdp_surface;
> +
> +	sdp_op = &group->operation_desc->sdp_op;
> +	sdp_surface = &group->surface_desc->sdp_surface;
> +
> +	x1_rdma_ena = sdp_op->x1_op.enable;
> +	x2_rdma_ena = sdp_op->x2_op.enable;
> +	y_rdma_ena  = sdp_op->y_op.enable;
> +
> +	x1_rdma_ena &= (sdp_op->x1_op.mode != SDP_OP_PER_LAYER);
> +	x2_rdma_ena &= (sdp_op->x2_op.mode != SDP_OP_PER_LAYER);
> +	y_rdma_ena &= (sdp_op->y_op.mode != SDP_OP_PER_LAYER);
> +
> +	fly = sdp_surface->src_data.type == DLA_MEM_HW;
> +
> +	group->is_rdma_needed = (!fly) || (x1_rdma_ena ||
> +					x2_rdma_ena || y_rdma_ena);
> +}
> +
> +static int32_t
> +processor_sdp_program(struct dla_engine *engine, struct dla_processor_group *group)
> +{
> +	int32_t ret = 0;
> +	uint64_t src_addr = -1, x1_addr = -1, x2_addr = -1;
> +	uint64_t  y_addr = -1, dst_addr = -1;
> +	uint32_t reg, high, low;
> +	uint8_t fly;
> +	uint32_t atom_size;
> +	struct dla_sdp_op *x1_op;
> +	struct dla_sdp_op *x2_op;
> +	struct dla_sdp_op *y_op;
> +	uint8_t x1_rdma_ena;
> +	uint8_t x2_rdma_ena;
> +	uint8_t y_rdma_ena;
> +	uint8_t out_dma_ena;
> +	struct dla_lut_param lut;
> +	struct dla_sdp_op_desc *sdp_op;
> +	struct dla_sdp_surface_desc *sdp_surface;
> +
> +	atom_size = engine->config_data->atom_size;
> +
> +	sdp_op = &group->operation_desc->sdp_op;
> +	sdp_surface = &group->surface_desc->sdp_surface;
> +
> +	fly = sdp_surface->src_data.type == DLA_MEM_HW;
> +	out_dma_ena = sdp_surface->dst_data.type != DLA_MEM_HW;
> +	x1_op = &sdp_op->x1_op;
> +	x2_op = &sdp_op->x2_op;
> +	y_op = &sdp_op->y_op;
> +	x1_rdma_ena = x1_op->enable && x1_op->type != SDP_OP_NONE;
> +	x2_rdma_ena = x2_op->enable && x2_op->type != SDP_OP_NONE;
> +	y_rdma_ena  = y_op->enable && y_op->type != SDP_OP_NONE;
> +
> +	/* load address */
> +	if (!fly) {
> +		ret = dla_read_input_address(engine, &sdp_surface->src_data,
> +						&src_addr,
> +						group->op_desc->index,
> +						group->roi_index,
> +					    1);
> +		if (ret)
> +			goto exit;
> +	}
> +
> +	if (out_dma_ena) {
> +		dla_get_dma_cube_address(engine->driver_context,
> +					engine->task->task_data,
> +					sdp_surface->dst_data.address,
> +					sdp_surface->dst_data.offset,
> +					(void *)&dst_addr,
> +					DESTINATION_DMA);
> +	}
> +
> +	if (sdp_op->lut_index >= 0) {
> +		group->lut_index = sdp_op->lut_index;
> +		dla_read_lut(engine, sdp_op->lut_index, (void *)&lut);
> +	}
> +
> +
> +	x1_rdma_ena &= (x1_op->mode != SDP_OP_PER_LAYER);
> +	x2_rdma_ena &= (x2_op->mode != SDP_OP_PER_LAYER);
> +	y_rdma_ena &= (y_op->mode != SDP_OP_PER_LAYER);
> +
> +	if (x1_rdma_ena) {
> +		dla_get_dma_cube_address(engine->driver_context,
> +					engine->task->task_data,
> +					sdp_surface->x1_data.address,
> +					sdp_surface->x1_data.offset,
> +					(void *)&x1_addr,
> +					DESTINATION_DMA);
> +	}
> +	if (x2_rdma_ena) {
> +		dla_get_dma_cube_address(engine->driver_context,
> +					engine->task->task_data,
> +					sdp_surface->x2_data.address,
> +					sdp_surface->x2_data.offset,
> +					(void *)&x2_addr,
> +					DESTINATION_DMA);
> +	}
> +	if (y_rdma_ena) {
> +		dla_get_dma_cube_address(engine->driver_context,
> +					engine->task->task_data,
> +					sdp_surface->y_data.address,
> +					sdp_surface->y_data.offset,
> +					(void *)&y_addr,
> +					DESTINATION_DMA);
> +	}
> +
> +	reg = (map_fly[0] << SHIFT(SDP_RDMA_D_FEATURE_MODE_CFG_0, FLYING_MODE));
> +	sdp_rdma_reg_write(engine, D_FEATURE_MODE_CFG, reg);
> +
> +	reg = (map_ena[1] << SHIFT(SDP_RDMA_D_BRDMA_CFG_0, BRDMA_DISABLE));
> +	sdp_rdma_reg_write(engine, D_BRDMA_CFG, reg);
> +	reg = (map_ena[1] << SHIFT(SDP_RDMA_D_NRDMA_CFG_0, NRDMA_DISABLE));
> +	sdp_rdma_reg_write(engine, D_NRDMA_CFG, reg);
> +	reg = (map_ena[1] << SHIFT(SDP_RDMA_D_ERDMA_CFG_0, ERDMA_DISABLE));
> +	sdp_rdma_reg_write(engine, D_ERDMA_CFG, reg);
> +
> +	reg = (map_fly[fly] <<
> +			SHIFT(SDP_RDMA_D_FEATURE_MODE_CFG_0, FLYING_MODE)) |
> +	(map_wg[sdp_op->conv_mode == CONV_MODE_WINOGRAD] <<
> +			SHIFT(SDP_RDMA_D_FEATURE_MODE_CFG_0, WINOGRAD)) |
> +	(map_precision[sdp_op->src_precision] <<
> +			SHIFT(SDP_RDMA_D_FEATURE_MODE_CFG_0, IN_PRECISION)) |
> +	(map_precision[sdp_op->dst_precision] <<
> +			SHIFT(SDP_RDMA_D_FEATURE_MODE_CFG_0, OUT_PRECISION)) |
> +	(map_proc_precision[sdp_op->dst_precision][sdp_op->src_precision] <<
> +			SHIFT(SDP_RDMA_D_FEATURE_MODE_CFG_0, PROC_PRECISION)) |
> +	((sdp_op->batch_num-1) <<
> +			SHIFT(SDP_RDMA_D_FEATURE_MODE_CFG_0, BATCH_NUMBER));
> +	sdp_rdma_reg_write(engine, D_FEATURE_MODE_CFG, reg);
> +
> +	if (group->is_rdma_needed) {
> +
> +		sdp_rdma_reg_write(engine, D_DATA_CUBE_WIDTH,
> +					sdp_surface->src_data.width - 1);
> +		sdp_rdma_reg_write(engine, D_DATA_CUBE_HEIGHT,
> +					sdp_surface->src_data.height - 1);
> +		sdp_rdma_reg_write(engine, D_DATA_CUBE_CHANNEL,
> +					sdp_surface->src_data.channel - 1);
> +
> +		/* config SDP source info */
> +		if (!fly) {
> +			/**
> +			 * if not on-the-fly, we have to config
> +			 * the source cube info
> +			 */
> +			high = upper_32_bits(src_addr);
> +			low = lower_32_bits(src_addr);
> +			sdp_rdma_reg_write(engine, D_SRC_BASE_ADDR_LOW, low);
> +			sdp_rdma_reg_write(engine, D_SRC_BASE_ADDR_HIGH, high);
> +			sdp_rdma_reg_write(engine, D_SRC_LINE_STRIDE,
> +					sdp_surface->src_data.line_stride);
> +			sdp_rdma_reg_write(engine, D_SRC_SURFACE_STRIDE,
> +					sdp_surface->src_data.surf_stride);
> +			sdp_rdma_reg_write(engine, D_SRC_DMA_CFG,
> +				map_ram_type[sdp_surface->src_data.type]);
> +		}
> +
> +		/* config x1 source info */
> +		reg = (map_ena[x1_rdma_ena] <<
> +				SHIFT(SDP_RDMA_D_BRDMA_CFG_0,
> +				BRDMA_DISABLE)) |
> +			(map_op_type[x1_op->type] <<
> +				SHIFT(SDP_RDMA_D_BRDMA_CFG_0,
> +				BRDMA_DATA_USE)) |
> +			(map_element_size[x1_op->precision] <<
> +				SHIFT(SDP_RDMA_D_BRDMA_CFG_0,
> +				BRDMA_DATA_SIZE)) |
> +			(map_op_mode[x1_op->mode] <<
> +				SHIFT(SDP_RDMA_D_BRDMA_CFG_0,
> +				BRDMA_DATA_MODE)) |
> +			(map_ram_type[sdp_surface->x1_data.type] <<
> +				SHIFT(SDP_RDMA_D_BRDMA_CFG_0,
> +				BRDMA_RAM_TYPE));
> +		sdp_rdma_reg_write(engine, D_BRDMA_CFG, reg);
> +
> +		if (x1_rdma_ena) {
> +			high = upper_32_bits(x1_addr);
> +			low = lower_32_bits(x1_addr);
> +			sdp_rdma_reg_write(engine, D_BS_BASE_ADDR_LOW,
> +					low);
> +			sdp_rdma_reg_write(engine, D_BS_BASE_ADDR_HIGH,
> +					high);
> +			sdp_rdma_reg_write(engine, D_BS_LINE_STRIDE,
> +					sdp_surface->x1_data.line_stride);
> +			sdp_rdma_reg_write(engine, D_BS_SURFACE_STRIDE,
> +					sdp_surface->x1_data.surf_stride);
> +		}
> +
> +		/* config x2 source info */
> +		reg = (map_ena[x2_rdma_ena] <<
> +					SHIFT(SDP_RDMA_D_NRDMA_CFG_0,
> +					NRDMA_DISABLE)) |
> +			(map_op_type[x2_op->type] <<
> +					SHIFT(SDP_RDMA_D_NRDMA_CFG_0,
> +					NRDMA_DATA_USE)) |
> +			(map_element_size[x2_op->precision] <<
> +					SHIFT(SDP_RDMA_D_NRDMA_CFG_0,
> +					NRDMA_DATA_SIZE)) |
> +			(map_op_mode[x2_op->mode] <<
> +					SHIFT(SDP_RDMA_D_NRDMA_CFG_0,
> +					NRDMA_DATA_MODE)) |
> +			(map_ram_type[sdp_surface->x2_data.type] <<
> +					SHIFT(SDP_RDMA_D_NRDMA_CFG_0,
> +					NRDMA_RAM_TYPE));
> +
> +		sdp_rdma_reg_write(engine, D_NRDMA_CFG, reg);
> +
> +		if (x2_rdma_ena) {
> +			high = upper_32_bits(x2_addr);
> +			low = lower_32_bits(x2_addr);
> +			sdp_rdma_reg_write(engine, D_BN_BASE_ADDR_LOW,
> +					low);
> +			sdp_rdma_reg_write(engine, D_BN_BASE_ADDR_HIGH,
> +					high);
> +			sdp_rdma_reg_write(engine, D_BN_LINE_STRIDE,
> +					sdp_surface->x2_data.line_stride);
> +			sdp_rdma_reg_write(engine, D_BN_SURFACE_STRIDE,
> +					sdp_surface->x2_data.surf_stride);
> +		}
> +
> +		/* config y source info */
> +		reg = (map_ena[y_rdma_ena] <<
> +				SHIFT(SDP_RDMA_D_ERDMA_CFG_0,
> +				ERDMA_DISABLE)) |
> +			(map_op_type[y_op->type] <<
> +				SHIFT(SDP_RDMA_D_ERDMA_CFG_0,
> +				ERDMA_DATA_USE)) |
> +			(map_element_size[y_op->precision] <<
> +				SHIFT(SDP_RDMA_D_ERDMA_CFG_0,
> +				ERDMA_DATA_SIZE)) |
> +			(map_op_mode[y_op->mode] <<
> +				SHIFT(SDP_RDMA_D_ERDMA_CFG_0,
> +				ERDMA_DATA_MODE)) |
> +			(map_ram_type[sdp_surface->y_data.type] <<
> +				SHIFT(SDP_RDMA_D_ERDMA_CFG_0,
> +				ERDMA_RAM_TYPE));
> +
> +		sdp_rdma_reg_write(engine, D_ERDMA_CFG, reg);
> +		if (y_rdma_ena) {
> +			high = upper_32_bits(y_addr);
> +			low = lower_32_bits(y_addr);
> +			sdp_rdma_reg_write(engine, D_EW_BASE_ADDR_LOW,
> +					low);
> +			sdp_rdma_reg_write(engine, D_EW_BASE_ADDR_HIGH,
> +					high);
> +			sdp_rdma_reg_write(engine, D_EW_LINE_STRIDE,
> +					sdp_surface->y_data.line_stride);
> +			sdp_rdma_reg_write(engine, D_EW_SURFACE_STRIDE,
> +					sdp_surface->y_data.surf_stride);
> +		}
> +	}
> +
> +	if (sdp_op->lut_index >= 0)
> +		update_lut(engine, SDP_S_LUT_ACCESS_CFG_0, &lut,
> +					sdp_op->src_precision);
> +
> +	sdp_reg_write(engine, D_DATA_CUBE_WIDTH, sdp_surface->src_data.width - 1);
> +	sdp_reg_write(engine, D_DATA_CUBE_HEIGHT, sdp_surface->src_data.height - 1);
> +	sdp_reg_write(engine, D_DATA_CUBE_CHANNEL, sdp_surface->src_data.channel - 1);
> +
> +	if (out_dma_ena) {
> +		high = upper_32_bits(dst_addr);
> +		low = lower_32_bits(dst_addr);
> +		sdp_reg_write(engine, D_DST_BASE_ADDR_HIGH,
> +				high);
> +		sdp_reg_write(engine, D_DST_BASE_ADDR_LOW,
> +				low);
> +		sdp_reg_write(engine, D_DST_LINE_STRIDE,
> +				sdp_surface->dst_data.line_stride);
> +		sdp_reg_write(engine, D_DST_SURFACE_STRIDE,
> +				sdp_surface->dst_data.surf_stride);
> +	}
> +
> +	/* Config BS module */
> +	reg = (map_bypass[x1_op->enable] <<
> +			SHIFT(SDP_D_DP_BS_CFG_0,
> +			BS_BYPASS)) |
> +		(map_bypass[x1_op->type != SDP_OP_MUL &&
> +				x1_op->type != SDP_OP_NONE] <<
> +			SHIFT(SDP_D_DP_BS_CFG_0,
> +			BS_ALU_BYPASS)) |
> +		(map_alu_op[x1_op->alu_type] <<
> +			SHIFT(SDP_D_DP_BS_CFG_0,
> +			BS_ALU_ALGO)) |
> +		(map_bypass[x1_op->type != SDP_OP_ADD &&
> +			x1_op->type != SDP_OP_NONE] <<
> +			SHIFT(SDP_D_DP_BS_CFG_0,
> +			BS_MUL_BYPASS)) |
> +		(map_prelu[x1_op->act == ACTIVATION_PRELU]
> +			<< SHIFT(SDP_D_DP_BS_CFG_0,
> +			BS_MUL_PRELU)) |
> +		(map_bypass[x1_op->act == ACTIVATION_RELU] <<
> +			SHIFT(SDP_D_DP_BS_CFG_0,
> +			BS_RELU_BYPASS));
> +	sdp_reg_write(engine, D_DP_BS_CFG, reg);
> +
> +	if (x1_op->enable) {
> +		if (x1_op->type == SDP_OP_ADD ||
> +				x1_op->type == SDP_OP_BOTH) {
> +			reg = (map_alu_src[x1_op->mode == SDP_OP_PER_LAYER] <<
> +					SHIFT(SDP_D_DP_BS_ALU_CFG_0,
> +					BS_ALU_SRC)) |
> +				(x1_op->shift_value <<
> +					SHIFT(SDP_D_DP_BS_ALU_CFG_0,
> +					BS_ALU_SHIFT_VALUE));
> +			sdp_reg_write(engine, D_DP_BS_ALU_CFG, reg);
> +		}
> +
> +		if (x1_op->mode == SDP_OP_PER_LAYER) {
> +			sdp_reg_write(engine, D_DP_BS_ALU_SRC_VALUE,
> +					x1_op->alu_operand);
> +			sdp_reg_write(engine, D_DP_BS_MUL_SRC_VALUE,
> +					x1_op->mul_operand);
> +		}
> +
> +		/**
> +		 * MUL truncate will take effect no matter
> +		 * MUL is bypassed or not
> +		 */
> +		reg = (map_alu_src[x1_op->mode == SDP_OP_PER_LAYER] <<
> +			SHIFT(SDP_D_DP_BS_MUL_CFG_0,
> +			BS_MUL_SRC)) |
> +		(x1_op->truncate <<
> +			SHIFT(SDP_D_DP_BS_MUL_CFG_0,
> +			BS_MUL_SHIFT_VALUE));
> +		sdp_reg_write(engine, D_DP_BS_MUL_CFG, reg);
> +	}
> +
> +	/* Config BN module */
> +	reg = (map_bypass[x2_op->enable] <<
> +			SHIFT(SDP_D_DP_BN_CFG_0,
> +			BN_BYPASS)) |
> +		(map_bypass[x2_op->type != SDP_OP_MUL &&
> +			x2_op->type != SDP_OP_NONE] <<
> +			SHIFT(SDP_D_DP_BN_CFG_0,
> +			BN_ALU_BYPASS)) |
> +		(map_alu_op[x2_op->alu_type] <<
> +			SHIFT(SDP_D_DP_BN_CFG_0,
> +			BN_ALU_ALGO)) |
> +		(map_bypass[x2_op->type != SDP_OP_ADD &&
> +			x2_op->type != SDP_OP_NONE] <<
> +			SHIFT(SDP_D_DP_BN_CFG_0,
> +			BN_MUL_BYPASS)) |
> +		(map_prelu[x2_op->act == ACTIVATION_PRELU]
> +			<< SHIFT(SDP_D_DP_BN_CFG_0,
> +			BN_MUL_PRELU)) |
> +		(map_bypass[x2_op->act == ACTIVATION_RELU]
> +			<< SHIFT(SDP_D_DP_BN_CFG_0,
> +			BN_RELU_BYPASS));
> +	sdp_reg_write(engine, D_DP_BN_CFG, reg);
> +
> +	if (x2_op->enable) {
> +		if (x2_op->type == SDP_OP_ADD ||
> +			x2_op->type == SDP_OP_BOTH) {
> +			reg = (map_alu_src[x2_op->mode == SDP_OP_PER_LAYER] <<
> +					SHIFT(SDP_D_DP_BN_ALU_CFG_0,
> +					BN_ALU_SRC)) |
> +				(x2_op->shift_value <<
> +					SHIFT(SDP_D_DP_BN_ALU_CFG_0,
> +					BN_ALU_SHIFT_VALUE));
> +			sdp_reg_write(engine, D_DP_BN_ALU_CFG, reg);
> +		}
> +
> +		if (x2_op->mode == SDP_OP_PER_LAYER) {
> +			sdp_reg_write(engine, D_DP_BN_ALU_SRC_VALUE,
> +					x2_op->alu_operand);
> +			sdp_reg_write(engine, D_DP_BN_MUL_SRC_VALUE,
> +					x2_op->mul_operand);
> +		}
> +
> +		reg = (map_alu_src[x2_op->mode == SDP_OP_PER_LAYER] <<
> +				SHIFT(SDP_D_DP_BN_MUL_CFG_0,
> +				BN_MUL_SRC)) |
> +			(x2_op->truncate <<
> +				SHIFT(SDP_D_DP_BN_MUL_CFG_0,
> +				BN_MUL_SHIFT_VALUE));
> +		sdp_reg_write(engine, D_DP_BN_MUL_CFG, reg);
> +	}
> +
> +	/* Config EW module */
> +	reg = (map_bypass[y_op->enable] <<
> +			SHIFT(SDP_D_DP_EW_CFG_0,
> +			EW_BYPASS)) |
> +		(map_bypass[y_op->type != SDP_OP_MUL &&
> +			y_op->type != SDP_OP_NONE] <<
> +			SHIFT(SDP_D_DP_EW_CFG_0,
> +			EW_ALU_BYPASS)) |
> +		(map_alu_op[y_op->alu_type] <<
> +			SHIFT(SDP_D_DP_EW_CFG_0,
> +			EW_ALU_ALGO)) |
> +		(map_bypass[y_op->type != SDP_OP_ADD &&
> +			y_op->type != SDP_OP_NONE] <<
> +			SHIFT(SDP_D_DP_EW_CFG_0,
> +			EW_MUL_BYPASS)) |
> +		((map_prelu[y_op->act == ACTIVATION_PRELU]) <<
> +			SHIFT(SDP_D_DP_EW_CFG_0,
> +			EW_MUL_PRELU)) |
> +		(map_bypass[y_op->act == ACTIVATION_LUT] <<
> +			SHIFT(SDP_D_DP_EW_CFG_0,
> +			EW_LUT_BYPASS));
> +	sdp_reg_write(engine, D_DP_EW_CFG, reg);
> +
> +	if (y_op->enable) {
> +		if (y_op->type == SDP_OP_ADD || y_op->type == SDP_OP_BOTH) {
> +			reg = (map_alu_src[y_op->mode == SDP_OP_PER_LAYER] <<
> +					SHIFT(SDP_D_DP_EW_ALU_CFG_0,
> +					EW_ALU_SRC)) |
> +				(map_bypass[y_op->cvt.alu_cvt.enable] <<
> +					SHIFT(SDP_D_DP_EW_ALU_CFG_0,
> +					EW_ALU_CVT_BYPASS));
> +			sdp_reg_write(engine, D_DP_EW_ALU_CFG, reg);
> +
> +			if (y_op->mode == SDP_OP_PER_LAYER) {
> +				sdp_reg_write(engine, D_DP_EW_ALU_SRC_VALUE,
> +						y_op->alu_operand);
> +			} else {
> +				sdp_reg_write(engine, D_DP_EW_ALU_CVT_OFFSET_VALUE,
> +						y_op->cvt.alu_cvt.offset);
> +				sdp_reg_write(engine, D_DP_EW_ALU_CVT_SCALE_VALUE,
> +						y_op->cvt.alu_cvt.scale);
> +				sdp_reg_write(engine, D_DP_EW_ALU_CVT_TRUNCATE_VALUE,
> +						y_op->cvt.alu_cvt.truncate);
> +			}
> +		}
> +
> +		if (y_op->type == SDP_OP_MUL || y_op->type == SDP_OP_BOTH) {
> +			reg = (map_alu_src[y_op->mode == SDP_OP_PER_LAYER] <<
> +					SHIFT(SDP_D_DP_EW_MUL_CFG_0,
> +					EW_MUL_SRC)) |
> +				(map_bypass[y_op->cvt.mul_cvt.enable] <<
> +					SHIFT(SDP_D_DP_EW_MUL_CFG_0,
> +					EW_MUL_CVT_BYPASS));
> +			sdp_reg_write(engine, D_DP_EW_MUL_CFG, reg);
> +
> +			if (y_op->mode == SDP_OP_PER_LAYER) {
> +				sdp_reg_write(engine, D_DP_EW_MUL_SRC_VALUE,
> +						y_op->mul_operand);
> +			} else {
> +				sdp_reg_write(engine, D_DP_EW_MUL_CVT_OFFSET_VALUE,
> +						y_op->cvt.mul_cvt.offset);
> +				sdp_reg_write(engine, D_DP_EW_MUL_CVT_SCALE_VALUE,
> +						y_op->cvt.mul_cvt.scale);
> +				sdp_reg_write(engine, D_DP_EW_MUL_CVT_TRUNCATE_VALUE,
> +						y_op->cvt.mul_cvt.truncate);
> +			}
> +		}
> +
> +		sdp_reg_write(engine, D_DP_EW_TRUNCATE_VALUE, y_op->truncate);
> +	}
> +
> +	reg = (map_fly[sdp_surface->src_data.type == DLA_MEM_HW] <<
> +			SHIFT(SDP_D_FEATURE_MODE_CFG_0,
> +			FLYING_MODE)) |
> +		(map_dst[sdp_surface->dst_data.type == DLA_MEM_HW] <<
> +			SHIFT(SDP_D_FEATURE_MODE_CFG_0,
> +			OUTPUT_DST)) |
> +		(map_wg[sdp_op->conv_mode == CONV_MODE_WINOGRAD] <<
> +			SHIFT(SDP_D_FEATURE_MODE_CFG_0,
> +			WINOGRAD)) |
> +		((sdp_op->batch_num - 1) <<
> +			SHIFT(SDP_D_FEATURE_MODE_CFG_0,
> +			BATCH_NUMBER));
> +	sdp_reg_write(engine, D_FEATURE_MODE_CFG, reg);
> +	sdp_reg_write(engine, D_DST_DMA_CFG,
> +			map_ram_type[sdp_surface->dst_data.type]);
> +	if (sdp_op->batch_num > 1)
> +		sdp_reg_write(engine, D_DST_BATCH_STRIDE, sdp_op->batch_stride);
> +
> +	reg =
> +	(map_proc_precision[sdp_op->dst_precision][sdp_op->src_precision] <<
> +			SHIFT(SDP_D_DATA_FORMAT_0,
> +			PROC_PRECISION)) |
> +		(map_precision[sdp_op->dst_precision] <<
> +			SHIFT(SDP_D_DATA_FORMAT_0,
> +			OUT_PRECISION));
> +	sdp_reg_write(engine, D_DATA_FORMAT, reg);
> +	sdp_reg_write(engine, D_CVT_OFFSET, sdp_op->out_cvt.offset);
> +	sdp_reg_write(engine, D_CVT_SCALE, sdp_op->out_cvt.scale);
> +	sdp_reg_write(engine, D_CVT_SHIFT, sdp_op->out_cvt.truncate);
> +
> +exit:
> +	return ret;
> +}
> +
> +int
> +dla_sdp_is_ready(struct dla_processor *processor,
> +			   struct dla_processor_group *group)
> +{
> +	struct dla_processor_group *next_group;
> +	struct dla_sdp_op_desc *sdp_op;
> +
> +	sdp_op = &group->operation_desc->sdp_op;
> +	next_group = &processor->groups[!group->id];
> +
> +	/**
> +	 * Single LUT is shared between two SDP groups, need to make
> +	 * sure that usage does not conflict. Also, LUT write
> +	 * access is locked when SDP sub-engine is active, so delay
> +	 * writing LUT when another group is active.
> +	 */
> +
> +	/**
> +	 * if no LUT required for current group then it can be programmed
> +	 * without further checks
> +	 */
> +	if (sdp_op->lut_index == -1)
> +		return 1;
> +
> +	/**
> +	 * if same LUT is used for both groups then it can be programmed
> +	 * without more checks. Even if another group is active and LUT
> +	 * is locked, it would have been programmed by another group.
> +	 */
> +	if (next_group->lut_index == sdp_op->lut_index)
> +		return 1;
> +
> +	/**
> +	 * if LUT index of another group is not -1 means some LUT is programmed,
> +	 * then do not program current LUT as we already know current LUT is not
> +	 * -1 and neither same as another group.
> +	 */
> +	if (next_group->lut_index != -1)
> +		return 0;
> +
> +	/**
> +	 * if current group needs LUT different than another group and that
> +	 * group is not active then program it.
> +	 */
> +	if (!next_group->active)
> +		return 1;
> +
> +	/**
> +	 * if control is here it means current group is using LUT different than
> +	 * another group and that group is active. Wait for another group to
> +	 * become idle.
> +	 */
> +	return 0;
> +}
> +
> +void
> +dla_sdp_dump_config(struct dla_processor_group *group)
> +{
> +	struct dla_sdp_op_desc *sdp_op;
> +	struct dla_sdp_surface_desc *sdp_surface;
> +
> +	sdp_surface = &group->surface_desc->sdp_surface;
> +	sdp_op = &group->operation_desc->sdp_op;
> +}
> +
> +int
> +dla_sdp_program(struct dla_engine *engine, struct dla_processor_group *group)
> +{
> +	int32_t ret;
> +
> +	dla_enable_intr(engine, MASK(GLB_S_INTR_MASK_0, SDP_DONE_MASK1) |
> +			MASK(GLB_S_INTR_MASK_0, SDP_DONE_MASK0));
> +
> +	ret = processor_sdp_program(engine, group);
> +	if (ret)
> +		goto exit;
> +
> +exit:
> +	return ret;
> +}
> -- 
> 2.25.1
> 

From mboxrd@z Thu Jan  1 00:00:00 1970
Return-Path: <linux-kernel-owner@kernel.org>
X-Spam-Checker-Version: SpamAssassin 3.4.0 (2014-02-07) on
	aws-us-west-2-korg-lkml-1.web.codeaurora.org
Received: from vger.kernel.org (vger.kernel.org [23.128.96.18])
	by smtp.lore.kernel.org (Postfix) with ESMTP id D1B7EC433F5
	for <linux-kernel@archiver.kernel.org>; Thu, 21 Apr 2022 22:01:15 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1442301AbiDUWEE (ORCPT
        <rfc822;linux-kernel@archiver.kernel.org>);
        Thu, 21 Apr 2022 18:04:04 -0400
Received: from lindbergh.monkeyblade.net ([23.128.96.19]:49652 "EHLO
        lindbergh.monkeyblade.net" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1380775AbiDUWEC (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Thu, 21 Apr 2022 18:04:02 -0400
Received: from mail-lf1-x129.google.com (mail-lf1-x129.google.com [IPv6:2a00:1450:4864:20::129])
        by lindbergh.monkeyblade.net (Postfix) with ESMTPS id 945B54EDCC
        for <linux-kernel@vger.kernel.org>; Thu, 21 Apr 2022 15:01:10 -0700 (PDT)
Received: by mail-lf1-x129.google.com with SMTP id g19so11061124lfv.2
        for <linux-kernel@vger.kernel.org>; Thu, 21 Apr 2022 15:01:10 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=stargateuniverse.net; s=google;
        h=message-id:date:mime-version:user-agent:subject:content-language:to
         :cc:references:from:in-reply-to:content-transfer-encoding;
        bh=BHQrbaa/8Rjslj718qjz2Xo3aWzmg7iAozySdIlZ2dw=;
        b=ZG1ZNG6cZ93d2o/qZOHbKfiIDq15KyGGXMLjlNFCW/FaLpi3MAx+CTA70dTgZmX3Gw
         /96cGu69Q2Yy4OshFX5MVXZzu5psMTTeuuFVX2O7s48VU8IgvJMXVM/TUQIYs+lE43uV
         vVKes5uL6aS7bexMX7N/y3eHnatifOEICFi8MFT82W0l43QzGu8YZkK+lT/dfcw5HrHk
         EjSLtDQnSkoI/P/XY3OKQjuhUi50uFUfYLEqn+4jkVk1r8+gDC9GcIfxmaIqQOZvFfYf
         ut+Rg/Ga850owHoJMgkTssDy6qG2mlTATTwftnu5VPA+eOMNbzklA5qWelVrk83XafgG
         P1ZQ==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20210112;
        h=x-gm-message-state:message-id:date:mime-version:user-agent:subject
         :content-language:to:cc:references:from:in-reply-to
         :content-transfer-encoding;
        bh=BHQrbaa/8Rjslj718qjz2Xo3aWzmg7iAozySdIlZ2dw=;
        b=aGmj67mxYsb2kkoO3H592tPvNxd293TtLgqGa4i5lHspRFPIK0KEdK/+4BZugVQ1aq
         iIr3FxSN/+SoOLxGpGqXFOOOATKsmqTknmnosHcN7k4dzCO8KTUbguqkJpkAAsQRdvYy
         s+bicb1Ccs6SFZM07qxNXLK0Ey9tFOuCqqqALELG0rwU/Wm59MWbkTXhtJ/dMiEZzxFa
         elGORzp0SHMQyPmK2ekUamW1L3pofPiIVHPrKb23Dm21L+ginur/ZLpmA8WPmAYrtwDY
         YE2mVWlw2IQN2lMMZr5u1QbyhaGLPAFhPpoicM7zY4ySkMhwH3XmF0lzZT0dTKcd8jvv
         ahBw==
X-Gm-Message-State: AOAM530KrgO+2G59yLxi5zD15xiTC+8z3ir3ldI0s07xf+wCdc5UMPIC
        cfUUMXXy7y0IDKejhMQqM5VgGg==
X-Google-Smtp-Source: ABdhPJyb/gL4JvmW7ap9rNCR69U0P4KSfeb85aDDFnlVBtrqLnvhEZw+k2HMP25FqH9QnhuApEo3wA==
X-Received: by 2002:ac2:47f1:0:b0:46d:1317:aa0d with SMTP id b17-20020ac247f1000000b0046d1317aa0dmr1035070lfp.164.1650578468663;
        Thu, 21 Apr 2022 15:01:08 -0700 (PDT)
Received: from ?IPV6:2001:14ba:9cae:8c00:9682:e720:334f:2fac? (dxw3k4yf2tnxwyp6sg02y-3.rev.dnainternet.fi. [2001:14ba:9cae:8c00:9682:e720:334f:2fac])
        by smtp.gmail.com with ESMTPSA id bn38-20020a05651c17a600b0024b507c5cebsm11295ljb.126.2022.04.21.15.01.08
        (version=TLS1_3 cipher=TLS_AES_128_GCM_SHA256 bits=128/128);
        Thu, 21 Apr 2022 15:01:08 -0700 (PDT)
Message-ID: <0fa9ab41-c18e-a569-e6fe-a0e9d965905e@stargateuniverse.net>
Date:   Fri, 22 Apr 2022 01:01:14 +0300
MIME-Version: 1.0
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:91.0) Gecko/20100101
 Thunderbird/91.8.0
Subject: Re: [PATCH 2/2] drm/nvdla: Add driver support for NVDLA
Content-Language: en-US
To:     Cai Huoqing <cai.huoqing@linux.dev>
Cc:     Maarten Lankhorst <maarten.lankhorst@linux.intel.com>,
        Maxime Ripard <mripard@kernel.org>,
        Thomas Zimmermann <tzimmermann@suse.de>,
        David Airlie <airlied@linux.ie>,
        Daniel Vetter <daniel@ffwll.ch>,
        Sumit Semwal <sumit.semwal@linaro.org>,
        =?UTF-8?Q?Christian_K=c3=b6nig?= <christian.koenig@amd.com>,
        linux-kernel@vger.kernel.org, dri-devel@lists.freedesktop.org,
        linux-media@vger.kernel.org, linaro-mm-sig@lists.linaro.org
References: <20220419135908.39606-1-cai.huoqing@linux.dev>
 <20220419135908.39606-3-cai.huoqing@linux.dev>
From:   Kari Argillander <kari.argillander@stargateuniverse.net>
In-Reply-To: <20220419135908.39606-3-cai.huoqing@linux.dev>
Content-Type: text/plain; charset=UTF-8; format=flowed
Content-Transfer-Encoding: 7bit
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

This is just quick look up. I basically check some style issues and did
some basic static analyzing.

I have run
  - cppcheck (which found couple mistakes)
  - flawfinder (did not found anything to my eyes)
  - codespell (did find couple typo)

You can run these yourself also or check below.

Couple common things which you can ignore or not	.
- Usually in this code there is goto exit and it is just return. Maybe
   use just return straight away. No need to jump.
- Some comments start capital others not. Maybe all should start
   capital. Very small nit, but makes nice touch to the code.
- Lot of oneline comments are unneccessary three line comments.

On 19.4.2022 16.59, Cai Huoqing wrote:
> The NVIDIA Deep Learning Accelerator (NVDLA) is an open source IP
> which is integrated into NVIDIA Jetson AGX Xavier,
> so add driver support for this accelerator.
> 
> Signed-off-by: Cai Huoqing <cai.huoqing@linux.dev>

... snip

> diff --git a/drivers/gpu/drm/nvdla/nvdla_bdma.c b/drivers/gpu/drm/nvdla/nvdla_bdma.c
> new file mode 100644
> index 000000000000..225613f27acf
> --- /dev/null
> +++ b/drivers/gpu/drm/nvdla/nvdla_bdma.c

... snip

> +static int32_t
> +processor_bdma_program_slot(struct dla_engine *engine,
> +							struct dla_bdma_surface_desc *bdma_surface,
> +							struct dla_bdma_transfer_desc *transfer)
> +{
> +	int32_t ret = 0;
> +	uint64_t source_addr = 0;
> +	uint64_t destination_addr = 0;
> +	uint32_t high, low, reg;
> +	uint8_t  bdma_free_slots = 0;
> +
> +	/* make sure there're enough free slots */
> +	if (bdma_free_slots <= 0) {

This is always true right now.

> +		do {
> +			reg = bdma_reg_read(engine, STATUS);
> +			reg = (reg & MASK(BDMA_STATUS_0, FREE_SLOT)) >>
> +					SHIFT(BDMA_STATUS_0, FREE_SLOT);
> +		} while (reg == 0);
> +		bdma_free_slots = (uint8_t)reg;
> +	}
> +
> +	dla_get_dma_address(engine->driver_context, engine->task->task_data,
> +						transfer->source_address,
> +						(void *)&source_addr,
> +						DESTINATION_DMA);
> +	dla_get_dma_address(engine->driver_context, engine->task->task_data,
> +						transfer->destination_address,
> +						(void *)&destination_addr,
> +						DESTINATION_DMA);
> +
> +	ASSERT_GOTO((transfer->line_repeat <= 8192),
> +				ret, -EINVAL, exit);
> +	ASSERT_GOTO((transfer->surface_repeat <= 8192),
> +				ret, -EINVAL, exit);
> +	ASSERT_GOTO((transfer->line_size % 32) == 0,
> +				ret, -EINVAL, exit);
> +	ASSERT_GOTO(transfer->source_line >= transfer->line_size,
> +				ret, -EINVAL, exit);
> +	ASSERT_GOTO(transfer->destination_line >= transfer->line_size,
> +				ret, -EINVAL, exit);
> +	ASSERT_GOTO(transfer->source_surface >=
> +			(transfer->source_line * transfer->line_repeat),
> +				ret, -EINVAL, exit);
> +	ASSERT_GOTO(transfer->destination_surface >=
> +			(transfer->destination_line * transfer->line_repeat),
> +				ret, -EINVAL, exit);
> +
> +	/* config registers */
> +	high = upper_32_bits(source_addr);
> +	low = lower_32_bits(source_addr);
> +	bdma_reg_write(engine, CFG_SRC_ADDR_LOW, low);
> +	bdma_reg_write(engine, CFG_SRC_ADDR_HIGH, high);
> +	high = upper_32_bits(destination_addr);
> +	low = lower_32_bits(destination_addr);
> +	bdma_reg_write(engine, CFG_DST_ADDR_LOW, low);
> +	bdma_reg_write(engine, CFG_DST_ADDR_HIGH, high);
> +	bdma_reg_write(engine, CFG_LINE, (transfer->line_size >> 5) - 1);
> +	reg = (map_mem[bdma_surface->source_type] <<
> +				SHIFT(BDMA_CFG_CMD_0, SRC_RAM_TYPE)) |
> +		(map_mem[bdma_surface->destination_type] <<
> +				SHIFT(BDMA_CFG_CMD_0, DST_RAM_TYPE));
> +	bdma_reg_write(engine, CFG_CMD, reg);
> +	bdma_reg_write(engine, CFG_LINE_REPEAT, transfer->line_repeat - 1);
> +	bdma_reg_write(engine, CFG_SRC_LINE, transfer->source_line);
> +	bdma_reg_write(engine, CFG_DST_LINE, transfer->destination_line);
> +	bdma_reg_write(engine, CFG_SURF_REPEAT, transfer->surface_repeat - 1);
> +	bdma_reg_write(engine, CFG_SRC_SURF, transfer->source_surface);
> +	bdma_reg_write(engine, CFG_DST_SURF, transfer->destination_surface);
> +	bdma_reg_write(engine, CFG_OP, FIELD_ENUM(BDMA_CFG_OP_0, EN, ENABLE));
> +
> +exit:
> +	return ret;
> +}

... snip

> diff --git a/drivers/gpu/drm/nvdla/nvdla_cache.c b/drivers/gpu/drm/nvdla/nvdla_cache.c
> new file mode 100644
> index 000000000000..f8bd7b514aab
> --- /dev/null
> +++ b/drivers/gpu/drm/nvdla/nvdla_cache.c
> @@ -0,0 +1,215 @@
> +// SPDX-License-Identifier: BSD-3-Clause OR GPL-2.0
> +/*
> + * Copyright (C) 2017-2018 NVIDIA CORPORATION
> + * Copyright (C) 2022 Cai Huoqing
> + */
> +
> +#include "nvdla_common.h"
> +#include "nvdla_drm.h"
> +#include "nvdla_reg.h"
> +#include "nvdla_engine.h"
> +
> +#define DLA_OP_CACHE_SIZE (DLA_NUM_GROUPS * ((DLA_OP_NUM + 2) * 2))
> +
> +static struct dla_common_op_desc desc_cache[DLA_OP_NUM][DLA_OP_CACHE_SIZE];
> +static int32_t desc_refcount[DLA_OP_NUM][DLA_OP_CACHE_SIZE];
> +
> +void
> +dla_get_refcount(struct dla_common_op_desc *op_desc)
> +{
> +	int32_t i;
> +	struct dla_common_op_desc *desc = NULL;
> +
> +	if (op_desc == NULL)
> +		return;
> +
> +	if (op_desc->index == -1)
> +		return;
> +
> +	desc = &desc_cache[op_desc->op_type][0];
> +
> +	for (i = 0; i < DLA_OP_CACHE_SIZE; i++, desc++) {
> +		if (desc->index == op_desc->index &&
> +				desc->roi_index == op_desc->roi_index) {

reverse if

		if (desc->index != op_desc->index)
			continue;
		if (desc->roi_index != op_desc->roi_index)
			continue;

> +			desc_refcount[op_desc->op_type][i]++;
> +			return;
> +		}
> +	}
> +}
> +
> +struct dla_common_op_desc *
> +dla_get_op_desc(struct dla_engine *engine,
> +				struct dla_task *task, int16_t index,
> +				uint8_t op_type, uint8_t roi_index)
> +{
> +	int32_t i;
> +	int32_t ret;
> +	uint64_t op_base;
> +	uint64_t dep_graph_addr;
> +	struct dla_common_op_desc *desc = NULL;
> +
> +	if (index == -1) {
> +		pr_debug("no desc get due to index==-1\n");
> +		goto exit;
> +	}
> +
> +	dep_graph_addr = (sizeof(struct dla_common_op_desc) *
> +				engine->network->num_operations * roi_index);
> +
> +	desc = &desc_cache[op_type][0];
> +
> +	for (i = 0; i < DLA_OP_CACHE_SIZE; i++, desc++) {
> +		if (desc->index == index && desc->roi_index == roi_index) {
> +			if (desc->op_type != op_type) {
> +				pr_err("op_cache[op=%u] contains incorrect entry of op[%u]\n",
> +					   op_type, desc->op_type);
> +				continue;
> +			}

reverse if so this will be pretty clean

		if (desc->index != index)
			continue;
		if (desc->roi_index != roi_index)
			continue;
		if (desc->op_type != op_type) {
			pr_err("op_cache[op=%u] contains incorrect entry of op[%u]\n",
					op_type, desc->op_type);
			continue;
		}


> +			desc_refcount[op_type][i]++;
> +			goto exit;
> +		}
> +	}
> +
> +	desc = &desc_cache[op_type][0];
> +
> +	for (i = 0; i < DLA_OP_CACHE_SIZE; i++, desc++) {
> +		if (desc->index == -1) {

reverse if
		if (desc->index != -1)
			continue;

> +			op_base = dep_graph_addr +
> +					(sizeof(struct dla_common_op_desc) *
> +					(uint64_t)index);
> +			ret = dla_data_read(engine->driver_context,
> +					task->task_data,
> +					task->dependency_graph_addr,
> +					(void *)(desc),
> +					sizeof(struct dla_common_op_desc),
> +					op_base);
> +			if (ret) {
> +				desc = NULL;
> +				goto exit;
> +			}
> +
> +			if (op_type != desc->op_type) {
> +				/*
> +				 * op_type of entry read from DRAM should not
> +				 * mismatch with given op_type. If they
> +				 * mismatches, then wrong entry is fetched, so
> +				 * report this issue by throwing error.
> +				 */
> +				pr_err("Fetched [op_type=%u] from DRAM doesn't match with op_type[%u]\n",
> +					   desc->op_type, op_type);
> +				desc->op_type = op_type;
> +				desc->index = -1;
> +				desc->roi_index = -1;
> +				desc = NULL;
> +				goto exit;
> +			}
> +
> +			desc->index = index;
> +			desc->roi_index = roi_index;
> +
> +			desc_refcount[op_type][i]++;
> +			goto exit;
> +		}
> +	}
> +
> +exit:
> +	return desc;
> +}
> +
> +static void
> +dla_free_op_desc(struct dla_engine *engine, struct dla_common_op_desc *op_desc)
> +{
> +	uint64_t op_base;
> +	uint64_t dep_graph_addr;
> +	struct dla_task *task;
> +
> +	pr_debug("Enter: %s op desc index %u ROI %d\n", __func__,
> +				op_desc->index, op_desc->roi_index);

Possiple null pointer dereference

> +	task = engine->task;
> +	dep_graph_addr = (sizeof(struct dla_common_op_desc) *
> +				engine->network->num_operations *
> +				op_desc->roi_index);
> +
> +	if (op_desc->index == -1)
> +		goto exit;

Possiple null pointer dereference

> +	if (op_desc == NULL)
> +		goto exit;

Or this is unnecessary.

> +
> +	/**
> +	 * TODO: keeping the depth value hardcoded as 0 for now,
> +	 * need to replace it once corresponding implementation is done.
> +	 */
> +	op_base = (dep_graph_addr +
> +			(sizeof(struct dla_common_op_desc) *
> +			(uint64_t)op_desc->index));
> +
> +	/**
> +	 * Flush descriptor to DRAM
> +	 */
> +	dla_data_write(engine->driver_context,
> +			task->task_data,
> +			(void *)op_desc,
> +			task->dependency_graph_addr,
> +			sizeof(struct dla_common_op_desc),
> +			op_base);
> +
> +	/**
> +	 * Release it
> +	 */
> +	op_desc->index = -1;
> +	op_desc->roi_index = -1;
> +exit:
> +	return;
> +}
> +
> +void
> +dla_put_op_desc(struct dla_engine *engine, struct dla_common_op_desc *op_desc)
> +{
> +	int32_t i;
> +	struct dla_common_op_desc *desc;
> +
> +	if (op_desc == NULL)
> +		return;
> +
> +	if (op_desc->index == -1)
> +		return;
> +
> +	desc = &desc_cache[op_desc->op_type][0];
> +
> +	for (i = 0; i < DLA_OP_CACHE_SIZE; i++, desc++) {
> +		if (desc->index == op_desc->index &&
> +				desc->roi_index == op_desc->roi_index) {

Reverse if.

		if (desc->index != op_desc->index)
			continue;
		if (desc->roi_index != op_desc->roi_index)
			continue;

> +
> +			desc_refcount[op_desc->op_type][i]--;
> +
> +			/**
> +			 * Free desc if refcount is 0
> +			 */
Pretty useless comment and totally not needed three line for this.

> +			if (desc_refcount[op_desc->op_type][i] == 0)
> +				dla_free_op_desc(engine, op_desc);
> +
> +			return;
> +		}
> +	}
> +}
> +
> +void
> +dla_init_op_cache(struct dla_engine *engine)
> +{
> +	int32_t i, j;
> +	struct dla_common_op_desc *desc = &desc_cache[0][0];
> +
> +	memset((uint8_t *)&desc_cache[0][0], 0, sizeof(desc_cache));
> +	memset((uint8_t *)&desc_refcount[0][0], 0, sizeof(desc_refcount));
> +
> +	for (i = 0; i < DLA_OP_NUM; i++) {
> +		for (j = 0; j < DLA_OP_CACHE_SIZE; j++) {
> +			desc->index = -1;
> +			desc->roi_index = -1;
> +			desc->op_type = (uint8_t)i;
> +			desc++;
> +		}
> +	}
> +}

... snip

> diff --git a/drivers/gpu/drm/nvdla/nvdla_common.h b/drivers/gpu/drm/nvdla/nvdla_common.h
> new file mode 100644
> index 000000000000..38cf43246890
> --- /dev/null
> +++ b/drivers/gpu/drm/nvdla/nvdla_common.h
> @@ -0,0 +1,835 @@

... snip

> +struct dla_conv_op_desc {
> +	/* Performance parameters */
> +
> +	/* dla_conv_mode */
> +	uint8_t conv_mode;
> +	uint8_t data_reuse;
> +	uint8_t weight_reuse;
> +	uint8_t skip_data_rls;
> +
> +	uint8_t skip_weight_rls;
> +	uint8_t reserved0;
> +	uint16_t entry_per_slice;
> +
> +	/* dla_data_format */
> +	uint8_t data_format;
> +	/* dla_pixel_mapping */
> +	uint8_t pixel_mapping;
> +	/* number of free slices before fetch */
> +	uint16_t fetch_grain;
> +
> +	uint8_t reserved_b[8];
> +
> +	/* batch_num */
> +	uint8_t batch;
> +	/* dla_weight_format */
> +	uint8_t weight_format;
> +	uint8_t data_bank;
> +	uint8_t weight_bank;
> +
> +	/* the offset in bytes of each data cube in a batch */
> +	uint32_t batch_stride;
> +
> +	uint8_t post_extension;
> +	uint8_t pixel_override;
> +	/* number of slices need to be released */
> +	uint16_t release;
> +
> +	 /* The input cube dimension for CSC */
> +	uint16_t input_width_csc;
> +	uint16_t input_height_csc;
> +
> +	uint16_t input_channel_csc;
> +	uint16_t kernel_width_csc;
> +
> +	uint16_t kernel_height_csc;
> +	uint16_t kernel_channel_csc;
> +
> +	/* The input cube dimension for CMAC */
> +	uint16_t input_width_cmac;
> +	uint16_t input_height_cmac;
> +
> +	/* actual size in bytes */
> +	uint32_t bytes_per_kernel;
> +
> +	/* Algorithm parameters */
> +
> +	int16_t mean_ry; /* mean value for red in RGB or Y in YUV */
> +	int16_t mean_gu; /* mean value for green in RGB or U in YUV */
> +
> +	int16_t mean_bv; /* mean value for blue in RGB or V in YUV */
> +	int16_t mean_ax;
> +
> +	uint8_t mean_format; /* dla_mean_format */
> +	uint8_t conv_stride_x;
> +	uint8_t conv_stride_y;
> +	uint8_t pad_x_left;
> +
> +	uint8_t pad_x_right;
> +	uint8_t pad_y_top;
> +	uint8_t pad_y_bottom;
> +	uint8_t dilation_x;
> +
> +	uint8_t dilation_y;
> +	uint8_t reserved2[2];
> +
> +	/* Precision parameters */
> +	uint8_t pra_truncate;
> +
> +	uint8_t in_precision;
> +	/* The output precision from CONV, it's the MAC processing precison */

./nvdla_common.h:428: precison ==> precision

> +	uint8_t out_precision;
> +	int16_t pad_val;
> +
> +	/* input converter parameters */
> +	struct dla_cvt_param in_cvt;
> +	/* output converter parameters, support truncate only */
> +	struct dla_cvt_param out_cvt;
> +
> +} __packed __aligned(4);
> +
> +struct dla_conv_stat_desc {
> +	uint32_t data_read_stall;
> +	uint32_t weight_read_stall;
> +	uint32_t data_read_latency;
> +	uint32_t weight_read_latency;
> +	uint32_t saturation_count;
> +	uint32_t nan_data_num;
> +	uint32_t nan_weight_num;
> +	uint32_t inf_data_num;
> +	uint32_t inf_weight_num;
> +} __packed __aligned(4);
> +
> +/**
> + * @ingroup SDP
> + * @name Activation functions
> + * @brief Activation functions supported in SDP
> + * @{
> + */
> +#define ACTIVATION_NONE		0
> +#define ACTIVATION_RELU		1
> +#define ACTIVATION_LUT		2
> +#define ACTIVATION_PRELU	3
> +/** @} */
> +
> +/**
> + * @ingroup LUT
> + * @name LUT size
> + * @brief LUT sizes for linear and exponentila LUT
> + * @{
> + */
> +#define LUT_LINEAR_EXP_TABLE_ENTRY_LOG2		6
> +#define LUT_LINEAR_ONLY_TABLE_ENTRY_LOG2	8
> +/** @} */
> +
> +/**
> + * @ingroup LUT
> + * @name LUT types
> + * @brief DLA supports two types of LUT, linear and exonential
> + * @{
> + */
> +#define LUT_LINEAR_EXP_TABLE		0
> +#define LUT_LINEAR_ONLY_TABLE		1
> +/** @} */
> +
> +/**
> + * @ingroup LUT
> + * @name LUT methods
> + * @brief DLA supports two types of LUT, linear and exonential
> + * @{
> + */
> +#define LUT_METHOD_EXPONENTIAL		0
> +#define LUT_METHOD_LINEAR		1
> +/** @} */
> +
> +/**
> + * @ingroup LUT
> + * @name LUT
> + * @brief DLA supports two types of LUT, linear and exonential
> + * @{
> + */
> +#define LUT_PRI_LINEAR_EXP		0
> +#define LUT_PRI_LINEAR_ONLY		1
> +/** @} */
> +
> +union dla_lut_offset {
> +	/**
> +	 * Number should be substracted on log domain before look up

./nvdla_common.h:505: substracted ==> subtracted

> +	 * exponetial table it has the same definition as hardware

./nvdla_common.h:506: exponetial ==> exponential

> +	 * thus input scaling should also take into account when
> +	 * set this field.
> +	 */
> +	int8_t exp_offset;
> +	/**
> +	 * Number of bits should be right shift before looking
> +	 * up linear table
> +	 */
> +	int8_t frac_bits;
> +	uint16_t reserved0;
> +};

... snip

> diff --git a/drivers/gpu/drm/nvdla/nvdla_drm.c b/drivers/gpu/drm/nvdla/nvdla_drm.c
> new file mode 100644
> index 000000000000..9217eee1de3b
> --- /dev/null
> +++ b/drivers/gpu/drm/nvdla/nvdla_drm.c
> @@ -0,0 +1,695 @@
> +// SPDX-License-Identifier: BSD-3-Clause OR GPL-2.0
> +/*
> + * Copyright (C) 2017-2018 NVIDIA CORPORATION
> + * Copyright (C) 2022 Cai Huoqing
> + */
> +
> +#include <linux/dma-buf.h>
> +#include <linux/dma-mapping.h>
> +#include <linux/fs.h>
> +#include <linux/interrupt.h>
> +#include <linux/irq.h>
> +#include <linux/irqdomain.h>
> +#include <linux/module.h>
> +#include <linux/of.h>
> +#include <linux/of_device.h>
> +#include <linux/of_irq.h>
> +#include <linux/of_platform.h>
> +#include <linux/platform_device.h>
> +#include <linux/printk.h>
> +#include <linux/slab.h>
> +#include <linux/spinlock.h>
> +#include <linux/time.h>
> +#include <linux/uaccess.h>
> +#include <linux/types.h>
> +
> +#include "nvdla_drm.h"
> +#include "nvdla_ioctl.h"
> +#include "nvdla_engine.h"
> +
> +static struct nvdla_config nvdla_config_os_initial = {
> +	.atom_size = 32,
> +	.bdma_enable = true,
> +	.rubik_enable = true,
> +	.weight_compress_support = true,
> +};
> +
> +static struct nvdla_config nvdla_config_small = {
> +	//.atom_size = 8,
> +	.atom_size = 32,  // nv_large config
> +	.bdma_enable = false,
> +	.rubik_enable = false,
> +	.weight_compress_support = false,
> +};
> +
> +int64_t dla_get_time_us(void)

Funtion is never used.

> +{
> +	return ktime_get_ns() / NSEC_PER_USEC;
> +}
> +
> +void dla_reg_write(void *driver_context, uint32_t addr, uint32_t reg)
> +{
> +	struct nvdla_device *nvdla_dev =
> +			(struct nvdla_device *)driver_context;
> +
> +	if (!nvdla_dev)
> +		return;
> +
> +	writel(reg, nvdla_dev->base + addr);
> +}
> +
> +uint32_t dla_reg_read(void *driver_context, uint32_t addr)
> +{
> +	struct nvdla_device *nvdla_dev =
> +			(struct nvdla_device *)driver_context;
> +
> +	if (!nvdla_dev)
> +		return 0;
> +
> +	return readl(nvdla_dev->base + addr);
> +}
> +
> +static irqreturn_t nvdla_engine_isr(int32_t irq, void *data)
> +{
> +	unsigned long flags;
> +	uint32_t mask;
> +	uint32_t reg;
> +	struct dla_processor *processor = NULL;
> +	struct dla_processor_group *group;
> +	struct dla_engine *engine;
> +	struct nvdla_device *nvdla_dev = (struct nvdla_device *)data;
> +
> +	if (!nvdla_dev)
> +		return IRQ_NONE;
> +
> +	engine = nvdla_dev->engine_context;
> +	spin_lock_irqsave(&nvdla_dev->nvdla_lock, flags);
> +
> +	mask = glb_reg_read(engine, S_INTR_MASK);

Never used. It would be nice so that static analyzer will not complain
these anymore, but your choice what you want to do.

> +	reg = glb_reg_read(engine, S_INTR_STATUS);
> +
> +	if (reg & MASK(GLB_S_INTR_STATUS_0, CACC_DONE_STATUS0)) {
> +		processor = &engine->processors[DLA_OP_CONV];
> +		group = &processor->groups[0];
> +		group->events |= (1 << DLA_EVENT_OP_COMPLETED);
> +	}
> +	if (reg & MASK(GLB_S_INTR_STATUS_0, CACC_DONE_STATUS1)) {
> +		processor = &engine->processors[DLA_OP_CONV];
> +		group = &processor->groups[1];
> +		group->events |= (1 << DLA_EVENT_OP_COMPLETED);
> +	}
> +	if (reg & MASK(GLB_S_INTR_STATUS_0, SDP_DONE_STATUS0)) {
> +		processor = &engine->processors[DLA_OP_SDP];
> +		group = &processor->groups[0];
> +		group->events |= (1 << DLA_EVENT_OP_COMPLETED);
> +	}
> +	if (reg & MASK(GLB_S_INTR_STATUS_0, SDP_DONE_STATUS1)) {
> +		processor = &engine->processors[DLA_OP_SDP];
> +		group = &processor->groups[1];
> +		group->events |= (1 << DLA_EVENT_OP_COMPLETED);
> +	}
> +	if (reg & MASK(GLB_S_INTR_STATUS_0, CDP_DONE_STATUS0)) {
> +		processor = &engine->processors[DLA_OP_CDP];
> +		group = &processor->groups[0];
> +		group->events |= (1 << DLA_EVENT_OP_COMPLETED);
> +	}
> +	if (reg & MASK(GLB_S_INTR_STATUS_0, CDP_DONE_STATUS1)) {
> +		processor = &engine->processors[DLA_OP_CDP];
> +		group = &processor->groups[1];
> +		group->events |= (1 << DLA_EVENT_OP_COMPLETED);
> +	}
> +	if (reg & MASK(GLB_S_INTR_STATUS_0, RUBIK_DONE_STATUS0)) {
> +		processor = &engine->processors[DLA_OP_RUBIK];
> +		group = &processor->groups[0];
> +		group->events |= (1 << DLA_EVENT_OP_COMPLETED);
> +	}
> +	if (reg & MASK(GLB_S_INTR_STATUS_0, RUBIK_DONE_STATUS1)) {
> +		processor = &engine->processors[DLA_OP_RUBIK];
> +		group = &processor->groups[1];
> +		group->events |= (1 << DLA_EVENT_OP_COMPLETED);
> +	}
> +	if (reg & MASK(GLB_S_INTR_STATUS_0, PDP_DONE_STATUS0)) {
> +		processor = &engine->processors[DLA_OP_PDP];
> +		group = &processor->groups[0];
> +		group->events |= (1 << DLA_EVENT_OP_COMPLETED);
> +	}
> +	if (reg & MASK(GLB_S_INTR_STATUS_0, PDP_DONE_STATUS1)) {
> +		processor = &engine->processors[DLA_OP_PDP];
> +		group = &processor->groups[1];
> +		group->events |= (1 << DLA_EVENT_OP_COMPLETED);
> +	}
> +	if (reg & MASK(GLB_S_INTR_STATUS_0, BDMA_DONE_STATUS0)) {
> +		processor = &engine->processors[DLA_OP_BDMA];
> +		group = &processor->groups[0];
> +		group->events |= (1 << DLA_EVENT_OP_COMPLETED);
> +	}
> +	if (reg & MASK(GLB_S_INTR_STATUS_0, BDMA_DONE_STATUS1)) {
> +		processor = &engine->processors[DLA_OP_BDMA];
> +		group = &processor->groups[1];
> +		group->events |= (1 << DLA_EVENT_OP_COMPLETED);
> +	}
> +	if (reg & MASK(GLB_S_INTR_STATUS_0, CDMA_DAT_DONE_STATUS0)) {
> +		processor = &engine->processors[DLA_OP_CONV];
> +		group = &processor->groups[0];
> +		group->events |= (1 << DLA_EVENT_CDMA_DT_DONE);
> +	}
> +	if (reg & MASK(GLB_S_INTR_STATUS_0, CDMA_DAT_DONE_STATUS1)) {
> +		processor = &engine->processors[DLA_OP_CONV];
> +		group = &processor->groups[1];
> +		group->events |= (1 << DLA_EVENT_CDMA_DT_DONE);
> +	}
> +	if (reg & MASK(GLB_S_INTR_STATUS_0, CDMA_WT_DONE_STATUS0)) {
> +		processor = &engine->processors[DLA_OP_CONV];
> +		group = &processor->groups[0];
> +		group->events |= (1 << DLA_EVENT_CDMA_WT_DONE);
> +	}
> +	if (reg & MASK(GLB_S_INTR_STATUS_0, CDMA_WT_DONE_STATUS1)) {
> +		processor = &engine->processors[DLA_OP_CONV];
> +		group = &processor->groups[1];
> +		group->events |= (1 << DLA_EVENT_CDMA_WT_DONE);
> +	}
> +
> +	glb_reg_write(engine, S_INTR_STATUS, reg);
> +	mask = glb_reg_read(engine, S_INTR_MASK);

Never used

> +	reg = glb_reg_read(engine, S_INTR_STATUS);

Never used.

> +
> +	complete(&nvdla_dev->event_notifier);
> +	spin_unlock_irqrestore(&nvdla_dev->nvdla_lock, flags);
> +
> +	return IRQ_HANDLED;
> +}

... snip

> diff --git a/drivers/gpu/drm/nvdla/nvdla_gem.c b/drivers/gpu/drm/nvdla/nvdla_gem.c
> new file mode 100644
> index 000000000000..cccf6d01a564
> --- /dev/null
> +++ b/drivers/gpu/drm/nvdla/nvdla_gem.c

... snip

> +static const struct drm_ioctl_desc nvdla_drm_ioctls[] = {
> +	DRM_IOCTL_DEF_DRV(NVDLA_SUBMIT, nvdla_submit, DRM_RENDER_ALLOW),
> +	DRM_IOCTL_DEF_DRV(NVDLA_GEM_CREATE, nvdla_gem_create, DRM_RENDER_ALLOW),
> +	DRM_IOCTL_DEF_DRV(NVDLA_GEM_MMAP, nvdla_gem_map_offset, DRM_RENDER_ALLOW),
> +	/* use DRM_IOCTL_MODE_DESTROY_DUMB to destory */

./nvdla_gem.c:347: destory ==> destroy

> +};

... snip

> diff --git a/drivers/gpu/drm/nvdla/nvdla_scheduler.c b/drivers/gpu/drm/nvdla/nvdla_scheduler.c
> new file mode 100644
> index 000000000000..b814077478c6
> --- /dev/null
> +++ b/drivers/gpu/drm/nvdla/nvdla_scheduler.c

... snip

> +static int
> +dla_update_dependency(struct dla_engine *engine,
> +					  struct dla_consumer *consumer,
> +					  struct dla_common_op_desc *op_desc,
> +					  uint8_t event, uint8_t roi_index)
> +{
> +	int32_t ret = 0;
> +	struct dla_processor *processor;
> +
> +	if (consumer->index == -1)
> +		goto exit;
> +
> +	/* Update dependency only if event matches */
> +	if (event != consumer->event)
> +		goto exit;
> +
> +	/**
> +	 * If consumer index is valid but op desc is NULL means
> +	 * op desc for consumer was not pre-fetched
> +	 */
> +	if (op_desc == NULL) {
> +		ret = -EINVAL;
> +		pr_err("Operation descriptor is NULL, consumer index %d",
> +				consumer->index);
> +		goto exit;
> +	}
> +
> +	pr_debug("Update dependency operation index %d ROI %d DEP_COUNT=%d\n",
> +					op_desc->index, op_desc->roi_index,
> +					op_desc->dependency_count);
> +	op_desc->dependency_count--;
> +
> +	if (op_desc->dependency_count == 0) {
> +		processor = &engine->processors[op_desc->op_type];
> +		pr_debug("enable %s in %s as depdency are resolved\n",

./nvdla_scheduler.c:455: depdency ==> dependency

> +			processor->name, __func__);
> +
> +		ret = dla_enable_operation(engine, processor, op_desc);
> +		if (ret)
> +			goto exit;
> +	}
> +exit:
> +	return ret;
> +}

... snip

> +int
> +dla_process_events(struct dla_engine *engine, uint32_t *task_complete)
> +{
> +	int32_t i;
> +	int32_t ret = 0;
> +
> +	for (i = 0; i < DLA_OP_NUM; i++) {
> +		struct dla_processor *processor;
> +
> +		processor = &engine->processors[i];
> +		ret = dla_handle_events(engine, processor);
> +		/**
> +		 * Incase engine status is non-zero, then don't

./nvdla_scheduler.c:905: Incase ==> In case

> +		 * update the engine status. We should keep its
> +		 * status for later cleaning of engine.
> +		 */
> +		if (!engine->status)
> +			engine->status = ret;
> +	}
> +
> +	if (engine->network->num_operations == engine->num_proc_hwl)
> +		*task_complete = 1;
> +
> +	return ret;
> +}

... snip

   Argillander

From mboxrd@z Thu Jan  1 00:00:00 1970
Return-Path: <linux-kernel-owner@kernel.org>
X-Spam-Checker-Version: SpamAssassin 3.4.0 (2014-02-07) on
	aws-us-west-2-korg-lkml-1.web.codeaurora.org
Received: from vger.kernel.org (vger.kernel.org [23.128.96.18])
	by smtp.lore.kernel.org (Postfix) with ESMTP id DAA93C4321E
	for <linux-kernel@archiver.kernel.org>; Mon, 25 Apr 2022 14:29:37 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S240432AbiDYOcj (ORCPT <rfc822;linux-kernel@archiver.kernel.org>);
        Mon, 25 Apr 2022 10:32:39 -0400
Received: from lindbergh.monkeyblade.net ([23.128.96.19]:42636 "EHLO
        lindbergh.monkeyblade.net" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S236703AbiDYOcb (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Mon, 25 Apr 2022 10:32:31 -0400
Received: from out0.migadu.com (out0.migadu.com [IPv6:2001:41d0:2:267::])
        by lindbergh.monkeyblade.net (Postfix) with ESMTPS id 634B534BB5;
        Mon, 25 Apr 2022 07:29:25 -0700 (PDT)
Date:   Mon, 25 Apr 2022 22:28:57 +0800
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=linux.dev; s=key1;
        t=1650896963;
        h=from:from:reply-to:subject:subject:date:date:message-id:message-id:
         to:to:cc:cc:mime-version:mime-version:content-type:content-type:
         content-transfer-encoding:content-transfer-encoding:
         in-reply-to:in-reply-to:references:references;
        bh=P65HNv5ma4iEwXeu4Ihdg+26rWgcMaxrOyZ7fEWBapo=;
        b=cjWiF3AxJaKhJhKov3WeBmhdlT3Tt0grMqAOSEiTezM40nJ1RVl+dCmRJKQpGDpe5iKPVh
        kF/CcCZwQIOHoXDvUqslQpjeYUF/MYQrL3fxdDpbz//gPw6nQdYMk8mpPjn28Ysynu90BM
        A2S0O6ZlbK5/W6vkWP1iejqcHuvuaxg=
X-Report-Abuse: Please report any abuse attempt to abuse@migadu.com and include these headers.
From:   Cai Huoqing <cai.huoqing@linux.dev>
To:     Kari Argillander <kari.argillander@stargateuniverse.net>
Cc:     Maarten Lankhorst <maarten.lankhorst@linux.intel.com>,
        Maxime Ripard <mripard@kernel.org>,
        Thomas Zimmermann <tzimmermann@suse.de>,
        David Airlie <airlied@linux.ie>,
        Daniel Vetter <daniel@ffwll.ch>,
        Sumit Semwal <sumit.semwal@linaro.org>,
        Christian =?utf-8?B?S8O2bmln?= <christian.koenig@amd.com>,
        linux-kernel@vger.kernel.org, dri-devel@lists.freedesktop.org,
        linux-media@vger.kernel.org, linaro-mm-sig@lists.linaro.org
Subject: Re: [PATCH 2/2] drm/nvdla: Add driver support for NVDLA
Message-ID: <20220425142857.GA4678@chq-T47>
References: <20220419135908.39606-1-cai.huoqing@linux.dev>
 <20220419135908.39606-3-cai.huoqing@linux.dev>
 <0fa9ab41-c18e-a569-e6fe-a0e9d965905e@stargateuniverse.net>
MIME-Version: 1.0
Content-Type: text/plain; charset=utf-8
Content-Disposition: inline
Content-Transfer-Encoding: 8bit
In-Reply-To: <0fa9ab41-c18e-a569-e6fe-a0e9d965905e@stargateuniverse.net>
X-Migadu-Flow: FLOW_OUT
X-Migadu-Auth-User: linux.dev
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On 22 4月 22 01:01:14, Kari Argillander wrote:
> This is just quick look up. I basically check some style issues and did
> some basic static analyzing.
> 
> I have run
>  - cppcheck (which found couple mistakes)
>  - flawfinder (did not found anything to my eyes)
>  - codespell (did find couple typo)
> 
> You can run these yourself also or check below.
> 
> Couple common things which you can ignore or not	.
> - Usually in this code there is goto exit and it is just return. Maybe
>   use just return straight away. No need to jump.
> - Some comments start capital others not. Maybe all should start
>   capital. Very small nit, but makes nice touch to the code.
> - Lot of oneline comments are unneccessary three line comments.
> 
> On 19.4.2022 16.59, Cai Huoqing wrote:
> > The NVIDIA Deep Learning Accelerator (NVDLA) is an open source IP
> > which is integrated into NVIDIA Jetson AGX Xavier,
> > so add driver support for this accelerator.
> > 
> > Signed-off-by: Cai Huoqing <cai.huoqing@linux.dev>
> 
> ... snip
> 
> > diff --git a/drivers/gpu/drm/nvdla/nvdla_bdma.c b/drivers/gpu/drm/nvdla/nvdla_bdma.c
> > new file mode 100644
> > index 000000000000..225613f27acf
> > --- /dev/null
> > +++ b/drivers/gpu/drm/nvdla/nvdla_bdma.c
> 
> ... snip
> 
> > +static int32_t
> > +processor_bdma_program_slot(struct dla_engine *engine,
> > +							struct dla_bdma_surface_desc *bdma_surface,
> > +							struct dla_bdma_transfer_desc *transfer)
> > +{
> > +	int32_t ret = 0;
> > +	uint64_t source_addr = 0;
> > +	uint64_t destination_addr = 0;
> > +	uint32_t high, low, reg;
> > +	uint8_t  bdma_free_slots = 0;
> > +
> > +	/* make sure there're enough free slots */
> > +	if (bdma_free_slots <= 0) {
> 
> This is always true right now.
> 
> > +		do {
> > +			reg = bdma_reg_read(engine, STATUS);
> > +			reg = (reg & MASK(BDMA_STATUS_0, FREE_SLOT)) >>
> > +					SHIFT(BDMA_STATUS_0, FREE_SLOT);
> > +		} while (reg == 0);
> > +		bdma_free_slots = (uint8_t)reg;
> > +	}
> > +
> > +	dla_get_dma_address(engine->driver_context, engine->task->task_data,
> > +						transfer->source_address,
> > +						(void *)&source_addr,
> > +						DESTINATION_DMA);
> > +	dla_get_dma_address(engine->driver_context, engine->task->task_data,
> > +						transfer->destination_address,
> > +						(void *)&destination_addr,
> > +						DESTINATION_DMA);
> > +
> > +	ASSERT_GOTO((transfer->line_repeat <= 8192),
> > +				ret, -EINVAL, exit);
> > +	ASSERT_GOTO((transfer->surface_repeat <= 8192),
> > +				ret, -EINVAL, exit);
> > +	ASSERT_GOTO((transfer->line_size % 32) == 0,
> > +				ret, -EINVAL, exit);
> > +	ASSERT_GOTO(transfer->source_line >= transfer->line_size,
> > +				ret, -EINVAL, exit);
> > +	ASSERT_GOTO(transfer->destination_line >= transfer->line_size,
> > +				ret, -EINVAL, exit);
> > +	ASSERT_GOTO(transfer->source_surface >=
> > +			(transfer->source_line * transfer->line_repeat),
> > +				ret, -EINVAL, exit);
> > +	ASSERT_GOTO(transfer->destination_surface >=
> > +			(transfer->destination_line * transfer->line_repeat),
> > +				ret, -EINVAL, exit);
> > +
> > +	/* config registers */
> > +	high = upper_32_bits(source_addr);
> > +	low = lower_32_bits(source_addr);
> > +	bdma_reg_write(engine, CFG_SRC_ADDR_LOW, low);
> > +	bdma_reg_write(engine, CFG_SRC_ADDR_HIGH, high);
> > +	high = upper_32_bits(destination_addr);
> > +	low = lower_32_bits(destination_addr);
> > +	bdma_reg_write(engine, CFG_DST_ADDR_LOW, low);
> > +	bdma_reg_write(engine, CFG_DST_ADDR_HIGH, high);
> > +	bdma_reg_write(engine, CFG_LINE, (transfer->line_size >> 5) - 1);
> > +	reg = (map_mem[bdma_surface->source_type] <<
> > +				SHIFT(BDMA_CFG_CMD_0, SRC_RAM_TYPE)) |
> > +		(map_mem[bdma_surface->destination_type] <<
> > +				SHIFT(BDMA_CFG_CMD_0, DST_RAM_TYPE));
> > +	bdma_reg_write(engine, CFG_CMD, reg);
> > +	bdma_reg_write(engine, CFG_LINE_REPEAT, transfer->line_repeat - 1);
> > +	bdma_reg_write(engine, CFG_SRC_LINE, transfer->source_line);
> > +	bdma_reg_write(engine, CFG_DST_LINE, transfer->destination_line);
> > +	bdma_reg_write(engine, CFG_SURF_REPEAT, transfer->surface_repeat - 1);
> > +	bdma_reg_write(engine, CFG_SRC_SURF, transfer->source_surface);
> > +	bdma_reg_write(engine, CFG_DST_SURF, transfer->destination_surface);
> > +	bdma_reg_write(engine, CFG_OP, FIELD_ENUM(BDMA_CFG_OP_0, EN, ENABLE));
> > +
> > +exit:
> > +	return ret;
> > +}
> 
> ... snip
> 
> > diff --git a/drivers/gpu/drm/nvdla/nvdla_cache.c b/drivers/gpu/drm/nvdla/nvdla_cache.c
> > new file mode 100644
> > index 000000000000..f8bd7b514aab
> > --- /dev/null
> > +++ b/drivers/gpu/drm/nvdla/nvdla_cache.c
> > @@ -0,0 +1,215 @@
> > +// SPDX-License-Identifier: BSD-3-Clause OR GPL-2.0
> > +/*
> > + * Copyright (C) 2017-2018 NVIDIA CORPORATION
> > + * Copyright (C) 2022 Cai Huoqing
> > + */
> > +
> > +#include "nvdla_common.h"
> > +#include "nvdla_drm.h"
> > +#include "nvdla_reg.h"
> > +#include "nvdla_engine.h"
> > +
> > +#define DLA_OP_CACHE_SIZE (DLA_NUM_GROUPS * ((DLA_OP_NUM + 2) * 2))
> > +
> > +static struct dla_common_op_desc desc_cache[DLA_OP_NUM][DLA_OP_CACHE_SIZE];
> > +static int32_t desc_refcount[DLA_OP_NUM][DLA_OP_CACHE_SIZE];
> > +
> > +void
> > +dla_get_refcount(struct dla_common_op_desc *op_desc)
> > +{
> > +	int32_t i;
> > +	struct dla_common_op_desc *desc = NULL;
> > +
> > +	if (op_desc == NULL)
> > +		return;
> > +
> > +	if (op_desc->index == -1)
> > +		return;
> > +
> > +	desc = &desc_cache[op_desc->op_type][0];
> > +
> > +	for (i = 0; i < DLA_OP_CACHE_SIZE; i++, desc++) {
> > +		if (desc->index == op_desc->index &&
> > +				desc->roi_index == op_desc->roi_index) {
> 
> reverse if
> 
> 		if (desc->index != op_desc->index)
> 			continue;
> 		if (desc->roi_index != op_desc->roi_index)
> 			continue;
> 
> > +			desc_refcount[op_desc->op_type][i]++;
> > +			return;
> > +		}
> > +	}
> > +}
> > +
> > +struct dla_common_op_desc *
> > +dla_get_op_desc(struct dla_engine *engine,
> > +				struct dla_task *task, int16_t index,
> > +				uint8_t op_type, uint8_t roi_index)
> > +{
> > +	int32_t i;
> > +	int32_t ret;
> > +	uint64_t op_base;
> > +	uint64_t dep_graph_addr;
> > +	struct dla_common_op_desc *desc = NULL;
> > +
> > +	if (index == -1) {
> > +		pr_debug("no desc get due to index==-1\n");
> > +		goto exit;
> > +	}
> > +
> > +	dep_graph_addr = (sizeof(struct dla_common_op_desc) *
> > +				engine->network->num_operations * roi_index);
> > +
> > +	desc = &desc_cache[op_type][0];
> > +
> > +	for (i = 0; i < DLA_OP_CACHE_SIZE; i++, desc++) {
> > +		if (desc->index == index && desc->roi_index == roi_index) {
> > +			if (desc->op_type != op_type) {
> > +				pr_err("op_cache[op=%u] contains incorrect entry of op[%u]\n",
> > +					   op_type, desc->op_type);
> > +				continue;
> > +			}
> 
> reverse if so this will be pretty clean
> 
> 		if (desc->index != index)
> 			continue;
> 		if (desc->roi_index != roi_index)
> 			continue;
> 		if (desc->op_type != op_type) {
> 			pr_err("op_cache[op=%u] contains incorrect entry of op[%u]\n",
> 					op_type, desc->op_type);
> 			continue;
> 		}
> 
> 
> > +			desc_refcount[op_type][i]++;
> > +			goto exit;
> > +		}
> > +	}
> > +
> > +	desc = &desc_cache[op_type][0];
> > +
> > +	for (i = 0; i < DLA_OP_CACHE_SIZE; i++, desc++) {
> > +		if (desc->index == -1) {
> 
> reverse if
> 		if (desc->index != -1)
> 			continue;
> 
> > +			op_base = dep_graph_addr +
> > +					(sizeof(struct dla_common_op_desc) *
> > +					(uint64_t)index);
> > +			ret = dla_data_read(engine->driver_context,
> > +					task->task_data,
> > +					task->dependency_graph_addr,
> > +					(void *)(desc),
> > +					sizeof(struct dla_common_op_desc),
> > +					op_base);
> > +			if (ret) {
> > +				desc = NULL;
> > +				goto exit;
> > +			}
> > +
> > +			if (op_type != desc->op_type) {
> > +				/*
> > +				 * op_type of entry read from DRAM should not
> > +				 * mismatch with given op_type. If they
> > +				 * mismatches, then wrong entry is fetched, so
> > +				 * report this issue by throwing error.
> > +				 */
> > +				pr_err("Fetched [op_type=%u] from DRAM doesn't match with op_type[%u]\n",
> > +					   desc->op_type, op_type);
> > +				desc->op_type = op_type;
> > +				desc->index = -1;
> > +				desc->roi_index = -1;
> > +				desc = NULL;
> > +				goto exit;
> > +			}
> > +
> > +			desc->index = index;
> > +			desc->roi_index = roi_index;
> > +
> > +			desc_refcount[op_type][i]++;
> > +			goto exit;
> > +		}
> > +	}
> > +
> > +exit:
> > +	return desc;
> > +}
> > +
> > +static void
> > +dla_free_op_desc(struct dla_engine *engine, struct dla_common_op_desc *op_desc)
> > +{
> > +	uint64_t op_base;
> > +	uint64_t dep_graph_addr;
> > +	struct dla_task *task;
> > +
> > +	pr_debug("Enter: %s op desc index %u ROI %d\n", __func__,
> > +				op_desc->index, op_desc->roi_index);
> 
> Possiple null pointer dereference
> 
> > +	task = engine->task;
> > +	dep_graph_addr = (sizeof(struct dla_common_op_desc) *
> > +				engine->network->num_operations *
> > +				op_desc->roi_index);
> > +
> > +	if (op_desc->index == -1)
> > +		goto exit;
> 
> Possiple null pointer dereference
> 
> > +	if (op_desc == NULL)
> > +		goto exit;
> 
> Or this is unnecessary.
> 
> > +
> > +	/**
> > +	 * TODO: keeping the depth value hardcoded as 0 for now,
> > +	 * need to replace it once corresponding implementation is done.
> > +	 */
> > +	op_base = (dep_graph_addr +
> > +			(sizeof(struct dla_common_op_desc) *
> > +			(uint64_t)op_desc->index));
> > +
> > +	/**
> > +	 * Flush descriptor to DRAM
> > +	 */
> > +	dla_data_write(engine->driver_context,
> > +			task->task_data,
> > +			(void *)op_desc,
> > +			task->dependency_graph_addr,
> > +			sizeof(struct dla_common_op_desc),
> > +			op_base);
> > +
> > +	/**
> > +	 * Release it
> > +	 */
> > +	op_desc->index = -1;
> > +	op_desc->roi_index = -1;
> > +exit:
> > +	return;
> > +}
> > +
> > +void
> > +dla_put_op_desc(struct dla_engine *engine, struct dla_common_op_desc *op_desc)
> > +{
> > +	int32_t i;
> > +	struct dla_common_op_desc *desc;
> > +
> > +	if (op_desc == NULL)
> > +		return;
> > +
> > +	if (op_desc->index == -1)
> > +		return;
> > +
> > +	desc = &desc_cache[op_desc->op_type][0];
> > +
> > +	for (i = 0; i < DLA_OP_CACHE_SIZE; i++, desc++) {
> > +		if (desc->index == op_desc->index &&
> > +				desc->roi_index == op_desc->roi_index) {
> 
> Reverse if.
> 
> 		if (desc->index != op_desc->index)
> 			continue;
> 		if (desc->roi_index != op_desc->roi_index)
> 			continue;
> 
> > +
> > +			desc_refcount[op_desc->op_type][i]--;
> > +
> > +			/**
> > +			 * Free desc if refcount is 0
> > +			 */
> Pretty useless comment and totally not needed three line for this.
> 
> > +			if (desc_refcount[op_desc->op_type][i] == 0)
> > +				dla_free_op_desc(engine, op_desc);
> > +
> > +			return;
> > +		}
> > +	}
> > +}
> > +
> > +void
> > +dla_init_op_cache(struct dla_engine *engine)
> > +{
> > +	int32_t i, j;
> > +	struct dla_common_op_desc *desc = &desc_cache[0][0];
> > +
> > +	memset((uint8_t *)&desc_cache[0][0], 0, sizeof(desc_cache));
> > +	memset((uint8_t *)&desc_refcount[0][0], 0, sizeof(desc_refcount));
> > +
> > +	for (i = 0; i < DLA_OP_NUM; i++) {
> > +		for (j = 0; j < DLA_OP_CACHE_SIZE; j++) {
> > +			desc->index = -1;
> > +			desc->roi_index = -1;
> > +			desc->op_type = (uint8_t)i;
> > +			desc++;
> > +		}
> > +	}
> > +}
> 
> ... snip
> 
> > diff --git a/drivers/gpu/drm/nvdla/nvdla_common.h b/drivers/gpu/drm/nvdla/nvdla_common.h
> > new file mode 100644
> > index 000000000000..38cf43246890
> > --- /dev/null
> > +++ b/drivers/gpu/drm/nvdla/nvdla_common.h
> > @@ -0,0 +1,835 @@
> 
> ... snip
> 
> > +struct dla_conv_op_desc {
> > +	/* Performance parameters */
> > +
> > +	/* dla_conv_mode */
> > +	uint8_t conv_mode;
> > +	uint8_t data_reuse;
> > +	uint8_t weight_reuse;
> > +	uint8_t skip_data_rls;
> > +
> > +	uint8_t skip_weight_rls;
> > +	uint8_t reserved0;
> > +	uint16_t entry_per_slice;
> > +
> > +	/* dla_data_format */
> > +	uint8_t data_format;
> > +	/* dla_pixel_mapping */
> > +	uint8_t pixel_mapping;
> > +	/* number of free slices before fetch */
> > +	uint16_t fetch_grain;
> > +
> > +	uint8_t reserved_b[8];
> > +
> > +	/* batch_num */
> > +	uint8_t batch;
> > +	/* dla_weight_format */
> > +	uint8_t weight_format;
> > +	uint8_t data_bank;
> > +	uint8_t weight_bank;
> > +
> > +	/* the offset in bytes of each data cube in a batch */
> > +	uint32_t batch_stride;
> > +
> > +	uint8_t post_extension;
> > +	uint8_t pixel_override;
> > +	/* number of slices need to be released */
> > +	uint16_t release;
> > +
> > +	 /* The input cube dimension for CSC */
> > +	uint16_t input_width_csc;
> > +	uint16_t input_height_csc;
> > +
> > +	uint16_t input_channel_csc;
> > +	uint16_t kernel_width_csc;
> > +
> > +	uint16_t kernel_height_csc;
> > +	uint16_t kernel_channel_csc;
> > +
> > +	/* The input cube dimension for CMAC */
> > +	uint16_t input_width_cmac;
> > +	uint16_t input_height_cmac;
> > +
> > +	/* actual size in bytes */
> > +	uint32_t bytes_per_kernel;
> > +
> > +	/* Algorithm parameters */
> > +
> > +	int16_t mean_ry; /* mean value for red in RGB or Y in YUV */
> > +	int16_t mean_gu; /* mean value for green in RGB or U in YUV */
> > +
> > +	int16_t mean_bv; /* mean value for blue in RGB or V in YUV */
> > +	int16_t mean_ax;
> > +
> > +	uint8_t mean_format; /* dla_mean_format */
> > +	uint8_t conv_stride_x;
> > +	uint8_t conv_stride_y;
> > +	uint8_t pad_x_left;
> > +
> > +	uint8_t pad_x_right;
> > +	uint8_t pad_y_top;
> > +	uint8_t pad_y_bottom;
> > +	uint8_t dilation_x;
> > +
> > +	uint8_t dilation_y;
> > +	uint8_t reserved2[2];
> > +
> > +	/* Precision parameters */
> > +	uint8_t pra_truncate;
> > +
> > +	uint8_t in_precision;
> > +	/* The output precision from CONV, it's the MAC processing precison */
> 
> ./nvdla_common.h:428: precison ==> precision
> 
> > +	uint8_t out_precision;
> > +	int16_t pad_val;
> > +
> > +	/* input converter parameters */
> > +	struct dla_cvt_param in_cvt;
> > +	/* output converter parameters, support truncate only */
> > +	struct dla_cvt_param out_cvt;
> > +
> > +} __packed __aligned(4);
> > +
> > +struct dla_conv_stat_desc {
> > +	uint32_t data_read_stall;
> > +	uint32_t weight_read_stall;
> > +	uint32_t data_read_latency;
> > +	uint32_t weight_read_latency;
> > +	uint32_t saturation_count;
> > +	uint32_t nan_data_num;
> > +	uint32_t nan_weight_num;
> > +	uint32_t inf_data_num;
> > +	uint32_t inf_weight_num;
> > +} __packed __aligned(4);
> > +
> > +/**
> > + * @ingroup SDP
> > + * @name Activation functions
> > + * @brief Activation functions supported in SDP
> > + * @{
> > + */
> > +#define ACTIVATION_NONE		0
> > +#define ACTIVATION_RELU		1
> > +#define ACTIVATION_LUT		2
> > +#define ACTIVATION_PRELU	3
> > +/** @} */
> > +
> > +/**
> > + * @ingroup LUT
> > + * @name LUT size
> > + * @brief LUT sizes for linear and exponentila LUT
> > + * @{
> > + */
> > +#define LUT_LINEAR_EXP_TABLE_ENTRY_LOG2		6
> > +#define LUT_LINEAR_ONLY_TABLE_ENTRY_LOG2	8
> > +/** @} */
> > +
> > +/**
> > + * @ingroup LUT
> > + * @name LUT types
> > + * @brief DLA supports two types of LUT, linear and exonential
> > + * @{
> > + */
> > +#define LUT_LINEAR_EXP_TABLE		0
> > +#define LUT_LINEAR_ONLY_TABLE		1
> > +/** @} */
> > +
> > +/**
> > + * @ingroup LUT
> > + * @name LUT methods
> > + * @brief DLA supports two types of LUT, linear and exonential
> > + * @{
> > + */
> > +#define LUT_METHOD_EXPONENTIAL		0
> > +#define LUT_METHOD_LINEAR		1
> > +/** @} */
> > +
> > +/**
> > + * @ingroup LUT
> > + * @name LUT
> > + * @brief DLA supports two types of LUT, linear and exonential
> > + * @{
> > + */
> > +#define LUT_PRI_LINEAR_EXP		0
> > +#define LUT_PRI_LINEAR_ONLY		1
> > +/** @} */
> > +
> > +union dla_lut_offset {
> > +	/**
> > +	 * Number should be substracted on log domain before look up
> 
> ./nvdla_common.h:505: substracted ==> subtracted
> 
> > +	 * exponetial table it has the same definition as hardware
> 
> ./nvdla_common.h:506: exponetial ==> exponential
> 
> > +	 * thus input scaling should also take into account when
> > +	 * set this field.
> > +	 */
> > +	int8_t exp_offset;
> > +	/**
> > +	 * Number of bits should be right shift before looking
> > +	 * up linear table
> > +	 */
> > +	int8_t frac_bits;
> > +	uint16_t reserved0;
> > +};
> 
> ... snip
> 
> > diff --git a/drivers/gpu/drm/nvdla/nvdla_drm.c b/drivers/gpu/drm/nvdla/nvdla_drm.c
> > new file mode 100644
> > index 000000000000..9217eee1de3b
> > --- /dev/null
> > +++ b/drivers/gpu/drm/nvdla/nvdla_drm.c
> > @@ -0,0 +1,695 @@
> > +// SPDX-License-Identifier: BSD-3-Clause OR GPL-2.0
> > +/*
> > + * Copyright (C) 2017-2018 NVIDIA CORPORATION
> > + * Copyright (C) 2022 Cai Huoqing
> > + */
> > +
> > +#include <linux/dma-buf.h>
> > +#include <linux/dma-mapping.h>
> > +#include <linux/fs.h>
> > +#include <linux/interrupt.h>
> > +#include <linux/irq.h>
> > +#include <linux/irqdomain.h>
> > +#include <linux/module.h>
> > +#include <linux/of.h>
> > +#include <linux/of_device.h>
> > +#include <linux/of_irq.h>
> > +#include <linux/of_platform.h>
> > +#include <linux/platform_device.h>
> > +#include <linux/printk.h>
> > +#include <linux/slab.h>
> > +#include <linux/spinlock.h>
> > +#include <linux/time.h>
> > +#include <linux/uaccess.h>
> > +#include <linux/types.h>
> > +
> > +#include "nvdla_drm.h"
> > +#include "nvdla_ioctl.h"
> > +#include "nvdla_engine.h"
> > +
> > +static struct nvdla_config nvdla_config_os_initial = {
> > +	.atom_size = 32,
> > +	.bdma_enable = true,
> > +	.rubik_enable = true,
> > +	.weight_compress_support = true,
> > +};
> > +
> > +static struct nvdla_config nvdla_config_small = {
> > +	//.atom_size = 8,
> > +	.atom_size = 32,  // nv_large config
> > +	.bdma_enable = false,
> > +	.rubik_enable = false,
> > +	.weight_compress_support = false,
> > +};
> > +
> > +int64_t dla_get_time_us(void)
> 
> Funtion is never used.
> 
> > +{
> > +	return ktime_get_ns() / NSEC_PER_USEC;
> > +}
> > +
> > +void dla_reg_write(void *driver_context, uint32_t addr, uint32_t reg)
> > +{
> > +	struct nvdla_device *nvdla_dev =
> > +			(struct nvdla_device *)driver_context;
> > +
> > +	if (!nvdla_dev)
> > +		return;
> > +
> > +	writel(reg, nvdla_dev->base + addr);
> > +}
> > +
> > +uint32_t dla_reg_read(void *driver_context, uint32_t addr)
> > +{
> > +	struct nvdla_device *nvdla_dev =
> > +			(struct nvdla_device *)driver_context;
> > +
> > +	if (!nvdla_dev)
> > +		return 0;
> > +
> > +	return readl(nvdla_dev->base + addr);
> > +}
> > +
> > +static irqreturn_t nvdla_engine_isr(int32_t irq, void *data)
> > +{
> > +	unsigned long flags;
> > +	uint32_t mask;
> > +	uint32_t reg;
> > +	struct dla_processor *processor = NULL;
> > +	struct dla_processor_group *group;
> > +	struct dla_engine *engine;
> > +	struct nvdla_device *nvdla_dev = (struct nvdla_device *)data;
> > +
> > +	if (!nvdla_dev)
> > +		return IRQ_NONE;
> > +
> > +	engine = nvdla_dev->engine_context;
> > +	spin_lock_irqsave(&nvdla_dev->nvdla_lock, flags);
> > +
> > +	mask = glb_reg_read(engine, S_INTR_MASK);
> 
> Never used. It would be nice so that static analyzer will not complain
> these anymore, but your choice what you want to do.
thanks for your check. this line is an read clear register to clear interrupt,
it'is ok to leave here.
for others, code style and typo. I will try to fix

Thanks,
Cai
> 
> > +	reg = glb_reg_read(engine, S_INTR_STATUS);
> > +
> > +	if (reg & MASK(GLB_S_INTR_STATUS_0, CACC_DONE_STATUS0)) {
> > +		processor = &engine->processors[DLA_OP_CONV];
> > +		group = &processor->groups[0];
> > +		group->events |= (1 << DLA_EVENT_OP_COMPLETED);
> > +	}
> > +	if (reg & MASK(GLB_S_INTR_STATUS_0, CACC_DONE_STATUS1)) {
> > +		processor = &engine->processors[DLA_OP_CONV];
> > +		group = &processor->groups[1];
> > +		group->events |= (1 << DLA_EVENT_OP_COMPLETED);
> > +	}
> > +	if (reg & MASK(GLB_S_INTR_STATUS_0, SDP_DONE_STATUS0)) {
> > +		processor = &engine->processors[DLA_OP_SDP];
> > +		group = &processor->groups[0];
> > +		group->events |= (1 << DLA_EVENT_OP_COMPLETED);
> > +	}
> > +	if (reg & MASK(GLB_S_INTR_STATUS_0, SDP_DONE_STATUS1)) {
> > +		processor = &engine->processors[DLA_OP_SDP];
> > +		group = &processor->groups[1];
> > +		group->events |= (1 << DLA_EVENT_OP_COMPLETED);
> > +	}
> > +	if (reg & MASK(GLB_S_INTR_STATUS_0, CDP_DONE_STATUS0)) {
> > +		processor = &engine->processors[DLA_OP_CDP];
> > +		group = &processor->groups[0];
> > +		group->events |= (1 << DLA_EVENT_OP_COMPLETED);
> > +	}
> > +	if (reg & MASK(GLB_S_INTR_STATUS_0, CDP_DONE_STATUS1)) {
> > +		processor = &engine->processors[DLA_OP_CDP];
> > +		group = &processor->groups[1];
> > +		group->events |= (1 << DLA_EVENT_OP_COMPLETED);
> > +	}
> > +	if (reg & MASK(GLB_S_INTR_STATUS_0, RUBIK_DONE_STATUS0)) {
> > +		processor = &engine->processors[DLA_OP_RUBIK];
> > +		group = &processor->groups[0];
> > +		group->events |= (1 << DLA_EVENT_OP_COMPLETED);
> > +	}
> > +	if (reg & MASK(GLB_S_INTR_STATUS_0, RUBIK_DONE_STATUS1)) {
> > +		processor = &engine->processors[DLA_OP_RUBIK];
> > +		group = &processor->groups[1];
> > +		group->events |= (1 << DLA_EVENT_OP_COMPLETED);
> > +	}
> > +	if (reg & MASK(GLB_S_INTR_STATUS_0, PDP_DONE_STATUS0)) {
> > +		processor = &engine->processors[DLA_OP_PDP];
> > +		group = &processor->groups[0];
> > +		group->events |= (1 << DLA_EVENT_OP_COMPLETED);
> > +	}
> > +	if (reg & MASK(GLB_S_INTR_STATUS_0, PDP_DONE_STATUS1)) {
> > +		processor = &engine->processors[DLA_OP_PDP];
> > +		group = &processor->groups[1];
> > +		group->events |= (1 << DLA_EVENT_OP_COMPLETED);
> > +	}
> > +	if (reg & MASK(GLB_S_INTR_STATUS_0, BDMA_DONE_STATUS0)) {
> > +		processor = &engine->processors[DLA_OP_BDMA];
> > +		group = &processor->groups[0];
> > +		group->events |= (1 << DLA_EVENT_OP_COMPLETED);
> > +	}
> > +	if (reg & MASK(GLB_S_INTR_STATUS_0, BDMA_DONE_STATUS1)) {
> > +		processor = &engine->processors[DLA_OP_BDMA];
> > +		group = &processor->groups[1];
> > +		group->events |= (1 << DLA_EVENT_OP_COMPLETED);
> > +	}
> > +	if (reg & MASK(GLB_S_INTR_STATUS_0, CDMA_DAT_DONE_STATUS0)) {
> > +		processor = &engine->processors[DLA_OP_CONV];
> > +		group = &processor->groups[0];
> > +		group->events |= (1 << DLA_EVENT_CDMA_DT_DONE);
> > +	}
> > +	if (reg & MASK(GLB_S_INTR_STATUS_0, CDMA_DAT_DONE_STATUS1)) {
> > +		processor = &engine->processors[DLA_OP_CONV];
> > +		group = &processor->groups[1];
> > +		group->events |= (1 << DLA_EVENT_CDMA_DT_DONE);
> > +	}
> > +	if (reg & MASK(GLB_S_INTR_STATUS_0, CDMA_WT_DONE_STATUS0)) {
> > +		processor = &engine->processors[DLA_OP_CONV];
> > +		group = &processor->groups[0];
> > +		group->events |= (1 << DLA_EVENT_CDMA_WT_DONE);
> > +	}
> > +	if (reg & MASK(GLB_S_INTR_STATUS_0, CDMA_WT_DONE_STATUS1)) {
> > +		processor = &engine->processors[DLA_OP_CONV];
> > +		group = &processor->groups[1];
> > +		group->events |= (1 << DLA_EVENT_CDMA_WT_DONE);
> > +	}
> > +
> > +	glb_reg_write(engine, S_INTR_STATUS, reg);
> > +	mask = glb_reg_read(engine, S_INTR_MASK);
> 
> Never used
> 
> > +	reg = glb_reg_read(engine, S_INTR_STATUS);
> 
> Never used.
> 
> > +
> > +	complete(&nvdla_dev->event_notifier);
> > +	spin_unlock_irqrestore(&nvdla_dev->nvdla_lock, flags);
> > +
> > +	return IRQ_HANDLED;
> > +}
> 
> ... snip
> 
> > diff --git a/drivers/gpu/drm/nvdla/nvdla_gem.c b/drivers/gpu/drm/nvdla/nvdla_gem.c
> > new file mode 100644
> > index 000000000000..cccf6d01a564
> > --- /dev/null
> > +++ b/drivers/gpu/drm/nvdla/nvdla_gem.c
> 
> ... snip
> 
> > +static const struct drm_ioctl_desc nvdla_drm_ioctls[] = {
> > +	DRM_IOCTL_DEF_DRV(NVDLA_SUBMIT, nvdla_submit, DRM_RENDER_ALLOW),
> > +	DRM_IOCTL_DEF_DRV(NVDLA_GEM_CREATE, nvdla_gem_create, DRM_RENDER_ALLOW),
> > +	DRM_IOCTL_DEF_DRV(NVDLA_GEM_MMAP, nvdla_gem_map_offset, DRM_RENDER_ALLOW),
> > +	/* use DRM_IOCTL_MODE_DESTROY_DUMB to destory */
> 
> ./nvdla_gem.c:347: destory ==> destroy
> 
> > +};
> 
> ... snip
> 
> > diff --git a/drivers/gpu/drm/nvdla/nvdla_scheduler.c b/drivers/gpu/drm/nvdla/nvdla_scheduler.c
> > new file mode 100644
> > index 000000000000..b814077478c6
> > --- /dev/null
> > +++ b/drivers/gpu/drm/nvdla/nvdla_scheduler.c
> 
> ... snip
> 
> > +static int
> > +dla_update_dependency(struct dla_engine *engine,
> > +					  struct dla_consumer *consumer,
> > +					  struct dla_common_op_desc *op_desc,
> > +					  uint8_t event, uint8_t roi_index)
> > +{
> > +	int32_t ret = 0;
> > +	struct dla_processor *processor;
> > +
> > +	if (consumer->index == -1)
> > +		goto exit;
> > +
> > +	/* Update dependency only if event matches */
> > +	if (event != consumer->event)
> > +		goto exit;
> > +
> > +	/**
> > +	 * If consumer index is valid but op desc is NULL means
> > +	 * op desc for consumer was not pre-fetched
> > +	 */
> > +	if (op_desc == NULL) {
> > +		ret = -EINVAL;
> > +		pr_err("Operation descriptor is NULL, consumer index %d",
> > +				consumer->index);
> > +		goto exit;
> > +	}
> > +
> > +	pr_debug("Update dependency operation index %d ROI %d DEP_COUNT=%d\n",
> > +					op_desc->index, op_desc->roi_index,
> > +					op_desc->dependency_count);
> > +	op_desc->dependency_count--;
> > +
> > +	if (op_desc->dependency_count == 0) {
> > +		processor = &engine->processors[op_desc->op_type];
> > +		pr_debug("enable %s in %s as depdency are resolved\n",
> 
> ./nvdla_scheduler.c:455: depdency ==> dependency
> 
> > +			processor->name, __func__);
> > +
> > +		ret = dla_enable_operation(engine, processor, op_desc);
> > +		if (ret)
> > +			goto exit;
> > +	}
> > +exit:
> > +	return ret;
> > +}
> 
> ... snip
> 
> > +int
> > +dla_process_events(struct dla_engine *engine, uint32_t *task_complete)
> > +{
> > +	int32_t i;
> > +	int32_t ret = 0;
> > +
> > +	for (i = 0; i < DLA_OP_NUM; i++) {
> > +		struct dla_processor *processor;
> > +
> > +		processor = &engine->processors[i];
> > +		ret = dla_handle_events(engine, processor);
> > +		/**
> > +		 * Incase engine status is non-zero, then don't
> 
> ./nvdla_scheduler.c:905: Incase ==> In case
> 
> > +		 * update the engine status. We should keep its
> > +		 * status for later cleaning of engine.
> > +		 */
> > +		if (!engine->status)
> > +			engine->status = ret;
> > +	}
> > +
> > +	if (engine->network->num_operations == engine->num_proc_hwl)
> > +		*task_complete = 1;
> > +
> > +	return ret;
> > +}
> 
> ... snip
> 
>   Argillander

From mboxrd@z Thu Jan  1 00:00:00 1970
Return-Path: <linux-kernel-owner@kernel.org>
X-Spam-Checker-Version: SpamAssassin 3.4.0 (2014-02-07) on
	aws-us-west-2-korg-lkml-1.web.codeaurora.org
Received: from vger.kernel.org (vger.kernel.org [23.128.96.18])
	by smtp.lore.kernel.org (Postfix) with ESMTP id 3F6F9C433F5
	for <linux-kernel@archiver.kernel.org>; Tue, 26 Apr 2022 05:20:34 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S244335AbiDZFXi (ORCPT <rfc822;linux-kernel@archiver.kernel.org>);
        Tue, 26 Apr 2022 01:23:38 -0400
Received: from lindbergh.monkeyblade.net ([23.128.96.19]:33326 "EHLO
        lindbergh.monkeyblade.net" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S233119AbiDZFXe (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Tue, 26 Apr 2022 01:23:34 -0400
Received: from mail-vs1-xe2a.google.com (mail-vs1-xe2a.google.com [IPv6:2607:f8b0:4864:20::e2a])
        by lindbergh.monkeyblade.net (Postfix) with ESMTPS id 72FE0DEE5;
        Mon, 25 Apr 2022 22:20:27 -0700 (PDT)
Received: by mail-vs1-xe2a.google.com with SMTP id q2so2555364vsr.5;
        Mon, 25 Apr 2022 22:20:27 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20210112;
        h=mime-version:references:in-reply-to:from:date:message-id:subject:to
         :cc;
        bh=qmipgUUMUxm6hMiwU+RA9EjYQMfT2FPr6LOz5agz4nY=;
        b=YReamCBovqxWJMpctPfDpKZNrx1dmPy/xjCTi+m48IelAKatIYLGf3lCKhKQFPrsgZ
         AsDjGq/B7lC/s/JDzPp/2t3Id3Z4WppDo5cfo0N1xS9bcRDTjSMFMmregTw0QqtHUT5+
         QqTubU+P2H7VCCr/CXPw+q2O7r2G6RaT7rU8Rjww1FVngj29exEVbfRnwW9XMQisQ2fP
         T3So57d/E5ftsGh1/V159jPSYVkNlCk2m4hH1uj5zv+pazl5KzRgbryKHTc3uK5Q0gDV
         HCXHahhWEwRey/g5xxUpmiNIYc2g1oIAOmIcCcwnekFqEk0bOQaQNjzWmgIntpiCoe4/
         CtNw==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20210112;
        h=x-gm-message-state:mime-version:references:in-reply-to:from:date
         :message-id:subject:to:cc;
        bh=qmipgUUMUxm6hMiwU+RA9EjYQMfT2FPr6LOz5agz4nY=;
        b=1NUg9Dxy9ZIRY9gVdhPd8bERBccHm47mCEXV7KUKyPKlFI1Tsq2PELhOafmfhxBPVG
         11L5yaih4mZLjLtlRBGfCV9gy44JIRI05+WxEGkeF0V6YarnMBBbS3VT3ATamh6H6taj
         vm44iEsq4vF/Nvyv9UgASPTDZyLy6MARsil6kvLrnolOQPqqVTuG8eGw0S2ET61WQGZK
         ycPOlJHLi6RSjX4q3gbffHgUV6fIPTfXmrB7BNfIH0mhbkBms4+AnZ98HjUkyPNybVFW
         mglyipBJ3YaOw3V0CM8G8aB1Ce8a2Q1yXoxcItZ2mj9bGmPCJBlscBlYEO8jnRu2qlN0
         /ubw==
X-Gm-Message-State: AOAM532w4Cw18L/no1D+D5HSJUqzpcg+g2Sl5XkLo+UeGNldSAq+sBwP
        x5bU90SoeCV8dNjLZyF+HFlH0aljSkR1XoocBxA=
X-Google-Smtp-Source: ABdhPJwW7mSpFATTE7BSdK+yHISsvHvDyufD5OFhDBveJm9IFoOlVggyKp3WbRiXt2XfYMoessN1mzZ2tYzvpxGGMho=
X-Received: by 2002:a67:dd03:0:b0:32c:a569:4f17 with SMTP id
 y3-20020a67dd03000000b0032ca5694f17mr4129187vsj.86.1650950426553; Mon, 25 Apr
 2022 22:20:26 -0700 (PDT)
MIME-Version: 1.0
References: <20220419135908.39606-1-cai.huoqing@linux.dev>
In-Reply-To: <20220419135908.39606-1-cai.huoqing@linux.dev>
From:   Peter Robinson <pbrobinson@gmail.com>
Date:   Tue, 26 Apr 2022 06:20:14 +0100
Message-ID: <CALeDE9NJcruoVU1v0uG2GSJFoPbsob+YTzW94wG2+DbPiu2xKA@mail.gmail.com>
Subject: Re: [PATCH 0/2] drm/nvdla: Add driver support for NVDLA
To:     Cai Huoqing <cai.huoqing@linux.dev>
Cc:     Thomas Zimmermann <tzimmermann@suse.de>,
        David Airlie <airlied@linux.ie>, linux-kernel@vger.kernel.org,
        =?UTF-8?Q?Christian_K=C3=B6nig?= <christian.koenig@amd.com>,
        linaro-mm-sig@lists.linaro.org, dri-devel@lists.freedesktop.org,
        Sumit Semwal <sumit.semwal@linaro.org>,
        linux-media@vger.kernel.org
Content-Type: text/plain; charset="UTF-8"
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Tue, Apr 19, 2022 at 3:08 PM Cai Huoqing <cai.huoqing@linux.dev> wrote:
>
> The NVIDIA Deep Learning Accelerator (NVDLA) is an open source IP
> which is integrated into NVIDIA Jetson AGX Xavier,
> so add driver support for this accelerator.
>
> NVDLA introduce:
> http://nvdla.org/primer.html
>
> User mode driver:
> https://github.com/caihuoq/nvdla/tree/main/sw/umd
>
>
> Cai Huoqing (2):
>   MAINTAINERS: Add the driver info of the NVDLA
>   drm/nvdla: Add driver support for NVDLA

Are there device tree bindings that are required to test this IP, are
there additions for the Xavier SoCs to test them? They should also be
published as patches as part of this series.

>  MAINTAINERS                             |    7 +
>  drivers/gpu/drm/Kconfig                 |    2 +
>  drivers/gpu/drm/Makefile                |    1 +
>  drivers/gpu/drm/nvdla/Kconfig           |    8 +
>  drivers/gpu/drm/nvdla/Makefile          |   19 +
>  drivers/gpu/drm/nvdla/nvdla_bdma.c      |  200 +
>  drivers/gpu/drm/nvdla/nvdla_cache.c     |  215 +
>  drivers/gpu/drm/nvdla/nvdla_cdp.c       |  300 ++
>  drivers/gpu/drm/nvdla/nvdla_common.c    |  295 ++
>  drivers/gpu/drm/nvdla/nvdla_common.h    |  835 +++
>  drivers/gpu/drm/nvdla/nvdla_conv.c      |  683 +++
>  drivers/gpu/drm/nvdla/nvdla_drm.c       |  695 +++
>  drivers/gpu/drm/nvdla/nvdla_drm.h       |  127 +
>  drivers/gpu/drm/nvdla/nvdla_engine.c    |  233 +
>  drivers/gpu/drm/nvdla/nvdla_engine.h    |  272 +
>  drivers/gpu/drm/nvdla/nvdla_gem.c       |  393 ++
>  drivers/gpu/drm/nvdla/nvdla_ioctl.h     |   99 +
>  drivers/gpu/drm/nvdla/nvdla_pdp.c       |  446 ++
>  drivers/gpu/drm/nvdla/nvdla_reg.h       | 6411 +++++++++++++++++++++++
>  drivers/gpu/drm/nvdla/nvdla_rubik.c     |  217 +
>  drivers/gpu/drm/nvdla/nvdla_sched.h     |   52 +
>  drivers/gpu/drm/nvdla/nvdla_scheduler.c | 1005 ++++
>  drivers/gpu/drm/nvdla/nvdla_sdp.c       |  728 +++
>  23 files changed, 13243 insertions(+)
>  create mode 100644 drivers/gpu/drm/nvdla/Kconfig
>  create mode 100644 drivers/gpu/drm/nvdla/Makefile
>  create mode 100644 drivers/gpu/drm/nvdla/nvdla_bdma.c
>  create mode 100644 drivers/gpu/drm/nvdla/nvdla_cache.c
>  create mode 100644 drivers/gpu/drm/nvdla/nvdla_cdp.c
>  create mode 100644 drivers/gpu/drm/nvdla/nvdla_common.c
>  create mode 100644 drivers/gpu/drm/nvdla/nvdla_common.h
>  create mode 100644 drivers/gpu/drm/nvdla/nvdla_conv.c
>  create mode 100644 drivers/gpu/drm/nvdla/nvdla_drm.c
>  create mode 100644 drivers/gpu/drm/nvdla/nvdla_drm.h
>  create mode 100644 drivers/gpu/drm/nvdla/nvdla_engine.c
>  create mode 100644 drivers/gpu/drm/nvdla/nvdla_engine.h
>  create mode 100644 drivers/gpu/drm/nvdla/nvdla_gem.c
>  create mode 100644 drivers/gpu/drm/nvdla/nvdla_ioctl.h
>  create mode 100644 drivers/gpu/drm/nvdla/nvdla_pdp.c
>  create mode 100644 drivers/gpu/drm/nvdla/nvdla_reg.h
>  create mode 100644 drivers/gpu/drm/nvdla/nvdla_rubik.c
>  create mode 100644 drivers/gpu/drm/nvdla/nvdla_sched.h
>  create mode 100644 drivers/gpu/drm/nvdla/nvdla_scheduler.c
>  create mode 100644 drivers/gpu/drm/nvdla/nvdla_sdp.c
>
> --
> 2.25.1
>

From mboxrd@z Thu Jan  1 00:00:00 1970
Return-Path: <linux-kernel-owner@kernel.org>
Received: from vger.kernel.org (vger.kernel.org [23.128.96.18])
	by smtp.lore.kernel.org (Postfix) with ESMTP id D4883C433EF
	for <linux-kernel@archiver.kernel.org>; Wed, 27 Apr 2022 15:24:04 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S239709AbiD0P1N (ORCPT <rfc822;linux-kernel@archiver.kernel.org>);
        Wed, 27 Apr 2022 11:27:13 -0400
Received: from lindbergh.monkeyblade.net ([23.128.96.19]:55488 "EHLO
        lindbergh.monkeyblade.net" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S239616AbiD0P1K (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Wed, 27 Apr 2022 11:27:10 -0400
Received: from mail-ej1-x62b.google.com (mail-ej1-x62b.google.com [IPv6:2a00:1450:4864:20::62b])
        by lindbergh.monkeyblade.net (Postfix) with ESMTPS id B719E5DA3D
        for <linux-kernel@vger.kernel.org>; Wed, 27 Apr 2022 08:23:57 -0700 (PDT)
Received: by mail-ej1-x62b.google.com with SMTP id dk23so4104898ejb.8
        for <linux-kernel@vger.kernel.org>; Wed, 27 Apr 2022 08:23:57 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=ffwll.ch; s=google;
        h=date:from:to:cc:subject:message-id:mail-followup-to:references
         :mime-version:content-disposition:in-reply-to;
        bh=gCdxmhevpt/8ahlQXz9peHJwDZngXZff1zJL0hB+RQU=;
        b=RZlks8q6lruQfYc2mzUZWcDNmsIa4piyfT/8lWHw7js8gCKVGqy8j+7XIajhyfe8Xp
         ppvcsQkIeNPUT8Z/a7eayniN4R3ERUa6UMV/P3EmPZsJ9+VTCkEhPws1B2H2azzTWWf/
         k2NGtzZaif+o3lnsQL01OOf3OAa7zPzXJP86Q=
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20210112;
        h=x-gm-message-state:date:from:to:cc:subject:message-id
         :mail-followup-to:references:mime-version:content-disposition
         :in-reply-to;
        bh=gCdxmhevpt/8ahlQXz9peHJwDZngXZff1zJL0hB+RQU=;
        b=AHKftSLF81HHsq9YwoyAk++QAkQFf4wTU6vcpWPSLmcKbe/6RMVX4JprH3Prgvt6NX
         0C+swKs8s1mmT+BCYAW6TrNH/e6jh53HdzSVu5AyzD9bQ3W+HANM1Vqim3cZnU5nuKwf
         kVE9RoA6eRkPoguiboBxD4N5lm9vj1keyUVd+9p1aas7CZzC/f1IcACKLE0289aqRqyO
         Lg8T17T/uqeoPEU9S41TiTDdrCJizHJKG25FrL+HKXqq/uBqx04yWMYWU1CU/oBv1TSy
         txYiswMNR3V3PBmTYRKI0iM9kHGHg/Rq2igAW1oQ3l5POSVVinSU0hb6Ll0BPzjcVQwu
         gWQA==
X-Gm-Message-State: AOAM531IGUfcqUNFn1bRfxzk6fdkPbBpOsRsijqvG3gdI0zktQGtTedW
        d2fHm4PIzVDfptKEaDLuhTBEoA==
X-Google-Smtp-Source: ABdhPJwxpsnS9I++fKtVg2mkJRez5C/ov4JNnziXAlfFjX9rx4kEXyYlYT0CCdMFi9/+3s5X1Ypngw==
X-Received: by 2002:a17:907:3f0f:b0:6f3:8e24:e9e6 with SMTP id hq15-20020a1709073f0f00b006f38e24e9e6mr16833059ejc.128.1651073035308;
        Wed, 27 Apr 2022 08:23:55 -0700 (PDT)
Received: from phenom.ffwll.local ([2a02:168:57f4:0:efd0:b9e5:5ae6:c2fa])
        by smtp.gmail.com with ESMTPSA id x1-20020a1709060ee100b006e8a49f215dsm6916777eji.73.2022.04.27.08.23.53
        (version=TLS1_3 cipher=TLS_AES_256_GCM_SHA384 bits=256/256);
        Wed, 27 Apr 2022 08:23:54 -0700 (PDT)
Date:   Wed, 27 Apr 2022 17:23:52 +0200
From:   Daniel Vetter <daniel@ffwll.ch>
To:     Cai Huoqing <cai.huoqing@linux.dev>
Cc:     Maarten Lankhorst <maarten.lankhorst@linux.intel.com>,
        Maxime Ripard <mripard@kernel.org>,
        Thomas Zimmermann <tzimmermann@suse.de>,
        David Airlie <airlied@linux.ie>,
        Daniel Vetter <daniel@ffwll.ch>,
        Sumit Semwal <sumit.semwal@linaro.org>,
        Christian =?iso-8859-1?Q?K=F6nig?= <christian.koenig@amd.com>,
        linux-kernel@vger.kernel.org, dri-devel@lists.freedesktop.org,
        linux-media@vger.kernel.org, linaro-mm-sig@lists.linaro.org
Subject: Re: [PATCH 2/2] drm/nvdla: Add driver support for NVDLA
Message-ID: <YmlgCPpqXaa2SJT+@phenom.ffwll.local>
Mail-Followup-To: Cai Huoqing <cai.huoqing@linux.dev>,
        Maarten Lankhorst <maarten.lankhorst@linux.intel.com>,
        Maxime Ripard <mripard@kernel.org>,
        Thomas Zimmermann <tzimmermann@suse.de>,
        David Airlie <airlied@linux.ie>,
        Sumit Semwal <sumit.semwal@linaro.org>,
        Christian =?iso-8859-1?Q?K=F6nig?= <christian.koenig@amd.com>,
        linux-kernel@vger.kernel.org, dri-devel@lists.freedesktop.org,
        linux-media@vger.kernel.org, linaro-mm-sig@lists.linaro.org
References: <20220419135908.39606-1-cai.huoqing@linux.dev>
 <20220419135908.39606-3-cai.huoqing@linux.dev>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <20220419135908.39606-3-cai.huoqing@linux.dev>
X-Operating-System: Linux phenom 5.10.0-8-amd64
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Tue, Apr 19, 2022 at 09:59:00PM +0800, Cai Huoqing wrote:
> The NVIDIA Deep Learning Accelerator (NVDLA) is an open source IP
> which is integrated into NVIDIA Jetson AGX Xavier,
> so add driver support for this accelerator.
> 
> Signed-off-by: Cai Huoqing <cai.huoqing@linux.dev>

I'm way behind on mails, so just a few things that popped up to me:

- Would be good to look at drm/sched instead of hand-rolling something.
  Least this makes it easier to read the driver for others :-)

- devm is for hw stuff, not allocating memory. You want devm_drm_dev_alloc
  instead and allocating pretty much all sw related things with drmm. That
  should also give you the neater embedding approach.

- Maybe include the link to the userspace here in this commit message too.

- You seem to hand-roll large chunks of cma helpers? There's a pile of
  standard scaffolding in here that really shouldn't be per-driver. We
  might need to improve things a bit in the shared code, since thus far
  there's not been many render/compute cma-based drivers, almost all of
  those are for display.

- I found this comment.

	/* use DRM_IOCTL_MODE_DESTROY_DUMB to destory */

  Nope :-) You need to use GEM_CLOSE, and if you somehow can get access to
  the dumb ioctls there is something rather wrong in drm code, since those
  should only be accessible for DRM_MODESET drivers with display support,
  not rendering stuff.

- You somehow call drm_gem_prime_fd_to_handle() deep in your own ioctl
  code. That's not how buffer sharing is supposed to work, instead it's
  multi-step.
  1. userspace establishes a prime import with the FD2HANDLE and these
  ioctls, there's a bunch of stuff to wire through for these
  2. uapi then only operates on gem handles, nothing else

- Related to this, what's the sync model for your driver? There's no
  dma_fence anywhere in here, is the idea that the submit ioctl just
  blocks synchronously?

  My recommendation would be drm_syncobj (together with drm/sched you get
  it all for free), and if you ever happen to have a need for implicit
  sync for shared dma-buf, that could be done with the import/export
  dma-buf ioctl from Jason Ekstrand.

I think these are the biggest ones - once you're driver's adopted all the
various helpers we have it should be a lot easier to read and review for
outsiders, since the hw specific code is all in the usual places.

Cheers, Daniel


> ---
>  drivers/gpu/drm/Kconfig                 |    2 +
>  drivers/gpu/drm/Makefile                |    1 +
>  drivers/gpu/drm/nvdla/Kconfig           |    8 +
>  drivers/gpu/drm/nvdla/Makefile          |   19 +
>  drivers/gpu/drm/nvdla/nvdla_bdma.c      |  200 +
>  drivers/gpu/drm/nvdla/nvdla_cache.c     |  215 +
>  drivers/gpu/drm/nvdla/nvdla_cdp.c       |  300 ++
>  drivers/gpu/drm/nvdla/nvdla_common.c    |  295 ++
>  drivers/gpu/drm/nvdla/nvdla_common.h    |  835 +++
>  drivers/gpu/drm/nvdla/nvdla_conv.c      |  683 +++
>  drivers/gpu/drm/nvdla/nvdla_drm.c       |  695 +++
>  drivers/gpu/drm/nvdla/nvdla_drm.h       |  127 +
>  drivers/gpu/drm/nvdla/nvdla_engine.c    |  233 +
>  drivers/gpu/drm/nvdla/nvdla_engine.h    |  272 +
>  drivers/gpu/drm/nvdla/nvdla_gem.c       |  393 ++
>  drivers/gpu/drm/nvdla/nvdla_ioctl.h     |   99 +
>  drivers/gpu/drm/nvdla/nvdla_pdp.c       |  446 ++
>  drivers/gpu/drm/nvdla/nvdla_reg.h       | 6411 +++++++++++++++++++++++
>  drivers/gpu/drm/nvdla/nvdla_rubik.c     |  217 +
>  drivers/gpu/drm/nvdla/nvdla_sched.h     |   52 +
>  drivers/gpu/drm/nvdla/nvdla_scheduler.c | 1005 ++++
>  drivers/gpu/drm/nvdla/nvdla_sdp.c       |  728 +++
>  22 files changed, 13236 insertions(+)
>  create mode 100644 drivers/gpu/drm/nvdla/Kconfig
>  create mode 100644 drivers/gpu/drm/nvdla/Makefile
>  create mode 100644 drivers/gpu/drm/nvdla/nvdla_bdma.c
>  create mode 100644 drivers/gpu/drm/nvdla/nvdla_cache.c
>  create mode 100644 drivers/gpu/drm/nvdla/nvdla_cdp.c
>  create mode 100644 drivers/gpu/drm/nvdla/nvdla_common.c
>  create mode 100644 drivers/gpu/drm/nvdla/nvdla_common.h
>  create mode 100644 drivers/gpu/drm/nvdla/nvdla_conv.c
>  create mode 100644 drivers/gpu/drm/nvdla/nvdla_drm.c
>  create mode 100644 drivers/gpu/drm/nvdla/nvdla_drm.h
>  create mode 100644 drivers/gpu/drm/nvdla/nvdla_engine.c
>  create mode 100644 drivers/gpu/drm/nvdla/nvdla_engine.h
>  create mode 100644 drivers/gpu/drm/nvdla/nvdla_gem.c
>  create mode 100644 drivers/gpu/drm/nvdla/nvdla_ioctl.h
>  create mode 100644 drivers/gpu/drm/nvdla/nvdla_pdp.c
>  create mode 100644 drivers/gpu/drm/nvdla/nvdla_reg.h
>  create mode 100644 drivers/gpu/drm/nvdla/nvdla_rubik.c
>  create mode 100644 drivers/gpu/drm/nvdla/nvdla_sched.h
>  create mode 100644 drivers/gpu/drm/nvdla/nvdla_scheduler.c
>  create mode 100644 drivers/gpu/drm/nvdla/nvdla_sdp.c
> 
> diff --git a/drivers/gpu/drm/Kconfig b/drivers/gpu/drm/Kconfig
> index 5133c3f028ab..a55cff374abd 100644
> --- a/drivers/gpu/drm/Kconfig
> +++ b/drivers/gpu/drm/Kconfig
> @@ -409,6 +409,8 @@ source "drivers/gpu/drm/solomon/Kconfig"
>  
>  source "drivers/gpu/drm/sprd/Kconfig"
>  
> +source "drivers/gpu/drm/nvdla/Kconfig"
> +
>  config DRM_HYPERV
>  	tristate "DRM Support for Hyper-V synthetic video device"
>  	depends on DRM && PCI && MMU && HYPERV
> diff --git a/drivers/gpu/drm/Makefile b/drivers/gpu/drm/Makefile
> index c2ef5f9fce54..8fa3537f308a 100644
> --- a/drivers/gpu/drm/Makefile
> +++ b/drivers/gpu/drm/Makefile
> @@ -134,3 +134,4 @@ obj-y			+= gud/
>  obj-$(CONFIG_DRM_HYPERV) += hyperv/
>  obj-y			+= solomon/
>  obj-$(CONFIG_DRM_SPRD) += sprd/
> +obj-$(CONFIG_DRM_NVDLA) += nvdla/
> diff --git a/drivers/gpu/drm/nvdla/Kconfig b/drivers/gpu/drm/nvdla/Kconfig
> new file mode 100644
> index 000000000000..11c04f5da877
> --- /dev/null
> +++ b/drivers/gpu/drm/nvdla/Kconfig
> @@ -0,0 +1,8 @@
> +# SPDX-License-Identifier: GPL-2.0-only
> +config DRM_NVDLA
> +	tristate "NVDLA DRM"
> +	depends on DRM
> +	select DRM_GEM_CMA_HELPER
> +	help
> +	  Choose this option for open-source NVIDIA DLA support.
> +	  If M is selected the module will be called nvdla-drm.
> diff --git a/drivers/gpu/drm/nvdla/Makefile b/drivers/gpu/drm/nvdla/Makefile
> new file mode 100644
> index 000000000000..74f37d258f8d
> --- /dev/null
> +++ b/drivers/gpu/drm/nvdla/Makefile
> @@ -0,0 +1,19 @@
> +
> +# SPDX-License-Identifier: GPL-2.0
> +nvdla-drm-y := \
> +	nvdla_drm.o \
> +	nvdla_gem.o \
> +	nvdla_scheduler.o \
> +	nvdla_engine.o \
> +	nvdla_bdma.o \
> +	nvdla_conv.o \
> +	nvdla_sdp.o \
> +	nvdla_cdp.o \
> +	nvdla_pdp.o \
> +	nvdla_rubik.o \
> +	nvdla_cache.o \
> +	nvdla_common.o \
> +	nvdla_engine_data.o \
> +	nvdla_engine_debug.o \
> +
> +obj-$(CONFIG_DRM_NVDLA) += nvdla-drm.o
> diff --git a/drivers/gpu/drm/nvdla/nvdla_bdma.c b/drivers/gpu/drm/nvdla/nvdla_bdma.c
> new file mode 100644
> index 000000000000..225613f27acf
> --- /dev/null
> +++ b/drivers/gpu/drm/nvdla/nvdla_bdma.c
> @@ -0,0 +1,200 @@
> +// SPDX-License-Identifier: BSD-3-Clause OR GPL-2.0
> +/*
> + * Copyright (C) 2017-2018 NVIDIA CORPORATION
> + * Copyright (C) 2022 Cai Huoqing
> + */
> +
> +#include "nvdla_common.h"
> +#include "nvdla_drm.h"
> +#include "nvdla_reg.h"
> +#include "nvdla_engine.h"
> +
> +static const uint8_t map_mem[] = {
> +	FIELD_ENUM(BDMA_CFG_CMD_0, SRC_RAM_TYPE, MC),
> +	FIELD_ENUM(BDMA_CFG_CMD_0, SRC_RAM_TYPE, CVSRAM),
> +};
> +
> +void
> +dla_bdma_set_producer(struct dla_engine *engine, int32_t group_id, int32_t rdma_group_id)
> +{
> +	/**
> +	 * There is no producer bit for BDMA operation,
> +	 * interrupt pointer decides which outstanding request
> +	 * to use for this BDMA operation
> +	 */
> +}
> +
> +int
> +dla_bdma_enable(struct dla_engine *engine, struct dla_processor_group *group)
> +{
> +	if (group->surface_desc->bdma_surface.num_transfers == (uint16_t)0) {
> +		group->events |= ((uint8_t)1 << DLA_EVENT_OP_COMPLETED);
> +		goto exit;
> +	}
> +
> +	/**
> +	 * Launch BDMA transfer
> +	 */
> +	if (group->id == 0)
> +		bdma_reg_write(engine, CFG_LAUNCH0, FIELD_ENUM(BDMA_CFG_LAUNCH0_0,
> +							GRP0_LAUNCH, YES));
> +	else
> +		bdma_reg_write(engine, CFG_LAUNCH1, FIELD_ENUM(BDMA_CFG_LAUNCH1_0,
> +							GRP1_LAUNCH, YES));
> +
> +exit:
> +	return 0;
> +}
> +
> +void
> +dla_bdma_rdma_check(struct dla_processor_group *group)
> +{
> +	group->is_rdma_needed = 0;
> +}
> +
> +/**
> + * Program BDMA slot for transfer
> + */
> +static int32_t
> +processor_bdma_program_slot(struct dla_engine *engine,
> +							struct dla_bdma_surface_desc *bdma_surface,
> +							struct dla_bdma_transfer_desc *transfer)
> +{
> +	int32_t ret = 0;
> +	uint64_t source_addr = 0;
> +	uint64_t destination_addr = 0;
> +	uint32_t high, low, reg;
> +	uint8_t  bdma_free_slots = 0;
> +
> +	/* make sure there're enough free slots */
> +	if (bdma_free_slots <= 0) {
> +		do {
> +			reg = bdma_reg_read(engine, STATUS);
> +			reg = (reg & MASK(BDMA_STATUS_0, FREE_SLOT)) >>
> +					SHIFT(BDMA_STATUS_0, FREE_SLOT);
> +		} while (reg == 0);
> +		bdma_free_slots = (uint8_t)reg;
> +	}
> +
> +	dla_get_dma_address(engine->driver_context, engine->task->task_data,
> +						transfer->source_address,
> +						(void *)&source_addr,
> +						DESTINATION_DMA);
> +	dla_get_dma_address(engine->driver_context, engine->task->task_data,
> +						transfer->destination_address,
> +						(void *)&destination_addr,
> +						DESTINATION_DMA);
> +
> +	ASSERT_GOTO((transfer->line_repeat <= 8192),
> +				ret, -EINVAL, exit);
> +	ASSERT_GOTO((transfer->surface_repeat <= 8192),
> +				ret, -EINVAL, exit);
> +	ASSERT_GOTO((transfer->line_size % 32) == 0,
> +				ret, -EINVAL, exit);
> +	ASSERT_GOTO(transfer->source_line >= transfer->line_size,
> +				ret, -EINVAL, exit);
> +	ASSERT_GOTO(transfer->destination_line >= transfer->line_size,
> +				ret, -EINVAL, exit);
> +	ASSERT_GOTO(transfer->source_surface >=
> +			(transfer->source_line * transfer->line_repeat),
> +				ret, -EINVAL, exit);
> +	ASSERT_GOTO(transfer->destination_surface >=
> +			(transfer->destination_line * transfer->line_repeat),
> +				ret, -EINVAL, exit);
> +
> +	/* config registers */
> +	high = upper_32_bits(source_addr);
> +	low = lower_32_bits(source_addr);
> +	bdma_reg_write(engine, CFG_SRC_ADDR_LOW, low);
> +	bdma_reg_write(engine, CFG_SRC_ADDR_HIGH, high);
> +	high = upper_32_bits(destination_addr);
> +	low = lower_32_bits(destination_addr);
> +	bdma_reg_write(engine, CFG_DST_ADDR_LOW, low);
> +	bdma_reg_write(engine, CFG_DST_ADDR_HIGH, high);
> +	bdma_reg_write(engine, CFG_LINE, (transfer->line_size >> 5) - 1);
> +	reg = (map_mem[bdma_surface->source_type] <<
> +				SHIFT(BDMA_CFG_CMD_0, SRC_RAM_TYPE)) |
> +		(map_mem[bdma_surface->destination_type] <<
> +				SHIFT(BDMA_CFG_CMD_0, DST_RAM_TYPE));
> +	bdma_reg_write(engine, CFG_CMD, reg);
> +	bdma_reg_write(engine, CFG_LINE_REPEAT, transfer->line_repeat - 1);
> +	bdma_reg_write(engine, CFG_SRC_LINE, transfer->source_line);
> +	bdma_reg_write(engine, CFG_DST_LINE, transfer->destination_line);
> +	bdma_reg_write(engine, CFG_SURF_REPEAT, transfer->surface_repeat - 1);
> +	bdma_reg_write(engine, CFG_SRC_SURF, transfer->source_surface);
> +	bdma_reg_write(engine, CFG_DST_SURF, transfer->destination_surface);
> +	bdma_reg_write(engine, CFG_OP, FIELD_ENUM(BDMA_CFG_OP_0, EN, ENABLE));
> +
> +exit:
> +	return ret;
> +}
> +
> +int
> +dla_bdma_is_ready(struct dla_processor *processor,
> +				  struct dla_processor_group *group)
> +{
> +	struct dla_processor_group *next_group;
> +
> +	next_group = &processor->groups[!group->id];
> +
> +	/**
> +	 * If another group is already programmed but not active then
> +	 * do not program this operation as BDMA does not really
> +	 * have shadow copies for groups. It will end programming
> +	 * same group. Wait for another group to get enabled.
> +	 */
> +	if ((processor->group_status & (1 << next_group->id)) &&
> +						!next_group->active)
> +		return 0;
> +
> +	return 1;
> +}
> +
> +void
> +dla_bdma_dump_config(struct dla_processor_group *group)
> +{
> +	struct dla_bdma_op_desc *bdma_op;
> +	struct dla_bdma_surface_desc *bdma_surface;
> +
> +	bdma_surface = &group->surface_desc->bdma_surface;
> +	bdma_op = &group->operation_desc->bdma_op;
> +}
> +
> +int
> +dla_bdma_program(struct dla_engine *engine, struct dla_processor_group *group)
> +{
> +	int32_t i;
> +	int32_t ret = 0;
> +	struct dla_bdma_surface_desc *bdma_surface;
> +
> +	if (!engine->config_data->bdma_enable) {
> +		pr_err("BDMA is not supported for this configuration\n");
> +		ret = -EINVAL;
> +		goto exit;
> +	}
> +
> +	bdma_surface = &group->surface_desc->bdma_surface;
> +
> +	pr_debug("Num of transfers %u\n", bdma_surface->num_transfers);
> +	if (bdma_surface->num_transfers == (uint16_t)0)
> +		goto exit;
> +
> +	if (bdma_surface->num_transfers > NUM_MAX_BDMA_OPS) {
> +		pr_err("Invalid number of transfers\n");
> +		ret = -EINVAL;
> +		goto exit;
> +	}
> +
> +	for (i = 0; i < bdma_surface->num_transfers; i++) {
> +		ret = processor_bdma_program_slot(engine, bdma_surface,
> +					&bdma_surface->transfers[i]);
> +		if (ret)
> +			goto exit;
> +	}
> +
> +	dla_enable_intr(engine, MASK(GLB_S_INTR_MASK_0, BDMA_DONE_MASK1) |
> +			MASK(GLB_S_INTR_MASK_0, BDMA_DONE_MASK0));
> +
> +exit:
> +	return ret;
> +}
> diff --git a/drivers/gpu/drm/nvdla/nvdla_cache.c b/drivers/gpu/drm/nvdla/nvdla_cache.c
> new file mode 100644
> index 000000000000..f8bd7b514aab
> --- /dev/null
> +++ b/drivers/gpu/drm/nvdla/nvdla_cache.c
> @@ -0,0 +1,215 @@
> +// SPDX-License-Identifier: BSD-3-Clause OR GPL-2.0
> +/*
> + * Copyright (C) 2017-2018 NVIDIA CORPORATION
> + * Copyright (C) 2022 Cai Huoqing
> + */
> +
> +#include "nvdla_common.h"
> +#include "nvdla_drm.h"
> +#include "nvdla_reg.h"
> +#include "nvdla_engine.h"
> +
> +#define DLA_OP_CACHE_SIZE (DLA_NUM_GROUPS * ((DLA_OP_NUM + 2) * 2))
> +
> +static struct dla_common_op_desc desc_cache[DLA_OP_NUM][DLA_OP_CACHE_SIZE];
> +static int32_t desc_refcount[DLA_OP_NUM][DLA_OP_CACHE_SIZE];
> +
> +void
> +dla_get_refcount(struct dla_common_op_desc *op_desc)
> +{
> +	int32_t i;
> +	struct dla_common_op_desc *desc = NULL;
> +
> +	if (op_desc == NULL)
> +		return;
> +
> +	if (op_desc->index == -1)
> +		return;
> +
> +	desc = &desc_cache[op_desc->op_type][0];
> +
> +	for (i = 0; i < DLA_OP_CACHE_SIZE; i++, desc++) {
> +		if (desc->index == op_desc->index &&
> +				desc->roi_index == op_desc->roi_index) {
> +			desc_refcount[op_desc->op_type][i]++;
> +			return;
> +		}
> +	}
> +}
> +
> +struct dla_common_op_desc *
> +dla_get_op_desc(struct dla_engine *engine,
> +				struct dla_task *task, int16_t index,
> +				uint8_t op_type, uint8_t roi_index)
> +{
> +	int32_t i;
> +	int32_t ret;
> +	uint64_t op_base;
> +	uint64_t dep_graph_addr;
> +	struct dla_common_op_desc *desc = NULL;
> +
> +	if (index == -1) {
> +		pr_debug("no desc get due to index==-1\n");
> +		goto exit;
> +	}
> +
> +	dep_graph_addr = (sizeof(struct dla_common_op_desc) *
> +				engine->network->num_operations * roi_index);
> +
> +	desc = &desc_cache[op_type][0];
> +
> +	for (i = 0; i < DLA_OP_CACHE_SIZE; i++, desc++) {
> +		if (desc->index == index && desc->roi_index == roi_index) {
> +			if (desc->op_type != op_type) {
> +				pr_err("op_cache[op=%u] contains incorrect entry of op[%u]\n",
> +					   op_type, desc->op_type);
> +				continue;
> +			}
> +			desc_refcount[op_type][i]++;
> +			goto exit;
> +		}
> +	}
> +
> +	desc = &desc_cache[op_type][0];
> +
> +	for (i = 0; i < DLA_OP_CACHE_SIZE; i++, desc++) {
> +		if (desc->index == -1) {
> +			op_base = dep_graph_addr +
> +					(sizeof(struct dla_common_op_desc) *
> +					(uint64_t)index);
> +			ret = dla_data_read(engine->driver_context,
> +					task->task_data,
> +					task->dependency_graph_addr,
> +					(void *)(desc),
> +					sizeof(struct dla_common_op_desc),
> +					op_base);
> +			if (ret) {
> +				desc = NULL;
> +				goto exit;
> +			}
> +
> +			if (op_type != desc->op_type) {
> +				/*
> +				 * op_type of entry read from DRAM should not
> +				 * mismatch with given op_type. If they
> +				 * mismatches, then wrong entry is fetched, so
> +				 * report this issue by throwing error.
> +				 */
> +				pr_err("Fetched [op_type=%u] from DRAM doesn't match with op_type[%u]\n",
> +					   desc->op_type, op_type);
> +				desc->op_type = op_type;
> +				desc->index = -1;
> +				desc->roi_index = -1;
> +				desc = NULL;
> +				goto exit;
> +			}
> +
> +			desc->index = index;
> +			desc->roi_index = roi_index;
> +
> +			desc_refcount[op_type][i]++;
> +			goto exit;
> +		}
> +	}
> +
> +exit:
> +	return desc;
> +}
> +
> +static void
> +dla_free_op_desc(struct dla_engine *engine, struct dla_common_op_desc *op_desc)
> +{
> +	uint64_t op_base;
> +	uint64_t dep_graph_addr;
> +	struct dla_task *task;
> +
> +	pr_debug("Enter: %s op desc index %u ROI %d\n", __func__,
> +				op_desc->index, op_desc->roi_index);
> +
> +	task = engine->task;
> +	dep_graph_addr = (sizeof(struct dla_common_op_desc) *
> +				engine->network->num_operations *
> +				op_desc->roi_index);
> +
> +	if (op_desc->index == -1)
> +		goto exit;
> +
> +	if (op_desc == NULL)
> +		goto exit;
> +
> +	/**
> +	 * TODO: keeping the depth value hardcoded as 0 for now,
> +	 * need to replace it once corresponding implementation is done.
> +	 */
> +	op_base = (dep_graph_addr +
> +			(sizeof(struct dla_common_op_desc) *
> +			(uint64_t)op_desc->index));
> +
> +	/**
> +	 * Flush descriptor to DRAM
> +	 */
> +	dla_data_write(engine->driver_context,
> +			task->task_data,
> +			(void *)op_desc,
> +			task->dependency_graph_addr,
> +			sizeof(struct dla_common_op_desc),
> +			op_base);
> +
> +	/**
> +	 * Release it
> +	 */
> +	op_desc->index = -1;
> +	op_desc->roi_index = -1;
> +exit:
> +	return;
> +}
> +
> +void
> +dla_put_op_desc(struct dla_engine *engine, struct dla_common_op_desc *op_desc)
> +{
> +	int32_t i;
> +	struct dla_common_op_desc *desc;
> +
> +	if (op_desc == NULL)
> +		return;
> +
> +	if (op_desc->index == -1)
> +		return;
> +
> +	desc = &desc_cache[op_desc->op_type][0];
> +
> +	for (i = 0; i < DLA_OP_CACHE_SIZE; i++, desc++) {
> +		if (desc->index == op_desc->index &&
> +				desc->roi_index == op_desc->roi_index) {
> +
> +			desc_refcount[op_desc->op_type][i]--;
> +
> +			/**
> +			 * Free desc if refcount is 0
> +			 */
> +			if (desc_refcount[op_desc->op_type][i] == 0)
> +				dla_free_op_desc(engine, op_desc);
> +
> +			return;
> +		}
> +	}
> +}
> +
> +void
> +dla_init_op_cache(struct dla_engine *engine)
> +{
> +	int32_t i, j;
> +	struct dla_common_op_desc *desc = &desc_cache[0][0];
> +
> +	memset((uint8_t *)&desc_cache[0][0], 0, sizeof(desc_cache));
> +	memset((uint8_t *)&desc_refcount[0][0], 0, sizeof(desc_refcount));
> +
> +	for (i = 0; i < DLA_OP_NUM; i++) {
> +		for (j = 0; j < DLA_OP_CACHE_SIZE; j++) {
> +			desc->index = -1;
> +			desc->roi_index = -1;
> +			desc->op_type = (uint8_t)i;
> +			desc++;
> +		}
> +	}
> +}
> diff --git a/drivers/gpu/drm/nvdla/nvdla_cdp.c b/drivers/gpu/drm/nvdla/nvdla_cdp.c
> new file mode 100644
> index 000000000000..793161e50b1c
> --- /dev/null
> +++ b/drivers/gpu/drm/nvdla/nvdla_cdp.c
> @@ -0,0 +1,300 @@
> +// SPDX-License-Identifier: BSD-3-Clause OR GPL-2.0
> +/*
> + * Copyright (C) 2017-2018 NVIDIA CORPORATION
> + * Copyright (C) 2022 Cai Huoqing
> + */
> +
> +#include "nvdla_common.h"
> +#include "nvdla_drm.h"
> +#include "nvdla_reg.h"
> +#include "nvdla_engine.h"
> +
> +static const uint8_t map_ram[] = {
> +	FIELD_ENUM(CDP_RDMA_D_SRC_DMA_CFG_0, SRC_RAM_TYPE, MC),
> +	FIELD_ENUM(CDP_RDMA_D_SRC_DMA_CFG_0, SRC_RAM_TYPE, CV),
> +};
> +
> +static const uint8_t map_precision[] = {
> +	FIELD_ENUM(CDP_RDMA_D_DATA_FORMAT_0, INPUT_DATA, INT8),
> +	FIELD_ENUM(CDP_RDMA_D_DATA_FORMAT_0, INPUT_DATA, INT16),
> +	FIELD_ENUM(CDP_RDMA_D_DATA_FORMAT_0, INPUT_DATA, FP16),
> +};
> +
> +static const uint8_t map_perf_dma[] = {
> +	FIELD_ENUM(CDP_D_PERF_ENABLE_0, DMA_EN, DISABLE),
> +	FIELD_ENUM(CDP_D_PERF_ENABLE_0, DMA_EN, ENABLE),
> +};
> +
> +static const uint8_t map_perf_lut[] = {
> +	FIELD_ENUM(CDP_D_PERF_ENABLE_0, LUT_EN, DISABLE),
> +	FIELD_ENUM(CDP_D_PERF_ENABLE_0, LUT_EN, ENABLE),
> +};
> +
> +
> +static uint32_t
> +map_local_size(uint8_t local_size)
> +{
> +	return ((local_size-1)/2)-1;
> +}
> +
> +void
> +dla_cdp_set_producer(struct dla_engine *engine, int32_t group_id, int32_t rdma_group_id)
> +{
> +	uint32_t reg;
> +
> +	/**
> +	 * set producer pointer for all sub-modules
> +	 */
> +	reg = group_id << SHIFT(CDP_S_POINTER_0, PRODUCER);
> +	cdp_reg_write(engine, S_POINTER, reg);
> +	reg = group_id << SHIFT(CDP_RDMA_S_POINTER_0, PRODUCER);
> +	cdp_rdma_reg_write(engine, S_POINTER, reg);
> +}
> +
> +int
> +dla_cdp_enable(struct dla_engine *engine, struct dla_processor_group *group)
> +{
> +	uint32_t reg;
> +
> +	/**
> +	 * enable all sub-modules
> +	 */
> +	reg = FIELD_ENUM(CDP_RDMA_D_OP_ENABLE_0, OP_EN, ENABLE);
> +	cdp_rdma_reg_write(engine, D_OP_ENABLE, reg);
> +	reg = FIELD_ENUM(CDP_D_OP_ENABLE_0, OP_EN, ENABLE);
> +	cdp_reg_write(engine, D_OP_ENABLE, reg);
> +
> +	return 0;
> +}
> +
> +void
> +dla_cdp_rdma_check(struct dla_processor_group *group)
> +{
> +	group->is_rdma_needed = 1;
> +}
> +
> +static int32_t
> +processor_cdp_program(struct dla_engine *engine, struct dla_processor_group *group)
> +{
> +	int32_t ret = 0;
> +	uint32_t reg, high, low;
> +	uint64_t input_address = 0;
> +	uint64_t output_address = 0;
> +	struct dla_lut_param lut;
> +	struct dla_cdp_op_desc *cdp_op;
> +	struct dla_cdp_surface_desc *cdp_surface;
> +
> +	cdp_op = &group->operation_desc->cdp_op;
> +	cdp_surface = &group->surface_desc->cdp_surface;
> +
> +	/* Argument check */
> +	if (cdp_surface->src_data.type == DLA_MEM_HW) {
> +		pr_err("Invalid source memory type\n");
> +		ret = -EINVAL;
> +		goto exit;
> +	}
> +	if (cdp_surface->dst_data.type == DLA_MEM_HW) {
> +		pr_err("Invalid destination memory type\n");
> +		ret = -EINVAL;
> +		goto exit;
> +	}
> +
> +	if (cdp_op->in_precision != cdp_op->out_precision) {
> +		pr_err("CDP does not support precision conversion\n");
> +		ret = -EINVAL;
> +		goto exit;
> +	}
> +
> +	/* get the addresses from task descriptor */
> +	ret = dla_read_input_address(engine, &cdp_surface->src_data,
> +								 &input_address,
> +								 group->op_desc->index,
> +								 group->roi_index, 1);
> +	if (ret)
> +		goto exit;
> +
> +	dla_get_dma_cube_address(engine->driver_context,
> +							 engine->task->task_data,
> +							 cdp_surface->dst_data.address,
> +							 cdp_surface->dst_data.offset,
> +							 (void *)&output_address,
> +							 DESTINATION_DMA);
> +	if (cdp_op->lut_index >= 0) {
> +		group->lut_index = cdp_op->lut_index;
> +		dla_read_lut(engine, cdp_op->lut_index, (void *)&lut);
> +	}
> +
> +	/* config CDP RDMA registers */
> +	reg = ((cdp_surface->src_data.width - 1)
> +		<< SHIFT(CDP_RDMA_D_DATA_CUBE_WIDTH_0, WIDTH));
> +	cdp_rdma_reg_write(engine, D_DATA_CUBE_WIDTH, reg);
> +
> +	reg = ((cdp_surface->src_data.height - 1)
> +		<< SHIFT(CDP_RDMA_D_DATA_CUBE_HEIGHT_0, HEIGHT));
> +	cdp_rdma_reg_write(engine, D_DATA_CUBE_HEIGHT, reg);
> +
> +	reg = ((cdp_surface->src_data.channel - 1)
> +		<< SHIFT(CDP_RDMA_D_DATA_CUBE_CHANNEL_0, CHANNEL));
> +	cdp_rdma_reg_write(engine, D_DATA_CUBE_CHANNEL, reg);
> +
> +	high = upper_32_bits(input_address);
> +	low = lower_32_bits(input_address);
> +	cdp_rdma_reg_write(engine, D_SRC_BASE_ADDR_LOW, low);
> +	cdp_rdma_reg_write(engine, D_SRC_BASE_ADDR_HIGH, high);
> +
> +	cdp_rdma_reg_write(engine, D_SRC_LINE_STRIDE,
> +			cdp_surface->src_data.line_stride);
> +	cdp_rdma_reg_write(engine, D_SRC_SURFACE_STRIDE,
> +			cdp_surface->src_data.surf_stride);
> +
> +	reg = (map_ram[cdp_surface->src_data.type]
> +		<< SHIFT(CDP_RDMA_D_SRC_DMA_CFG_0, SRC_RAM_TYPE));
> +	cdp_rdma_reg_write(engine, D_SRC_DMA_CFG, reg);
> +
> +	reg = (map_precision[cdp_op->in_precision]
> +		<< SHIFT(CDP_RDMA_D_DATA_FORMAT_0, INPUT_DATA));
> +	cdp_rdma_reg_write(engine, D_DATA_FORMAT, reg);
> +
> +	/* config CDP */
> +	if (cdp_op->lut_index >= 0)
> +		update_lut(engine, CDP_S_LUT_ACCESS_CFG_0, &lut, cdp_op->in_precision);
> +
> +	high = upper_32_bits(output_address);
> +	low = lower_32_bits(output_address);
> +	cdp_reg_write(engine, D_DST_BASE_ADDR_LOW, low);
> +	cdp_reg_write(engine, D_DST_BASE_ADDR_HIGH, high);
> +
> +	cdp_reg_write(engine, D_DST_LINE_STRIDE, cdp_surface->dst_data.line_stride);
> +	cdp_reg_write(engine, D_DST_SURFACE_STRIDE, cdp_surface->dst_data.surf_stride);
> +
> +	reg = (map_ram[cdp_surface->dst_data.type]
> +		<< SHIFT(CDP_D_DST_DMA_CFG_0, DST_RAM_TYPE));
> +	cdp_reg_write(engine, D_DST_DMA_CFG, reg);
> +
> +	reg = (map_precision[cdp_op->in_precision]
> +		<< SHIFT(CDP_D_DATA_FORMAT_0, INPUT_DATA_TYPE));
> +	cdp_reg_write(engine, D_DATA_FORMAT, reg);
> +
> +	reg = (map_local_size(cdp_op->local_size)
> +		<< SHIFT(CDP_D_LRN_CFG_0, NORMALZ_LEN));
> +	cdp_reg_write(engine, D_LRN_CFG, reg);
> +
> +	reg = (cdp_op->in_cvt.offset
> +		<< SHIFT(CDP_D_DATIN_OFFSET_0, DATIN_OFFSET));
> +	cdp_reg_write(engine, D_DATIN_OFFSET, reg);
> +
> +	reg = (cdp_op->in_cvt.scale
> +		<< SHIFT(CDP_D_DATIN_SCALE_0, DATIN_SCALE));
> +	cdp_reg_write(engine, D_DATIN_SCALE, reg);
> +
> +	reg = (cdp_op->in_cvt.truncate
> +		<< SHIFT(CDP_D_DATIN_SHIFTER_0, DATIN_SHIFTER));
> +	cdp_reg_write(engine, D_DATIN_SHIFTER, reg);
> +
> +	reg = (cdp_op->out_cvt.offset
> +		<< SHIFT(CDP_D_DATOUT_OFFSET_0, DATOUT_OFFSET));
> +	cdp_reg_write(engine, D_DATOUT_OFFSET, reg);
> +
> +	reg = (cdp_op->out_cvt.scale
> +		<< SHIFT(CDP_D_DATOUT_SCALE_0, DATOUT_SCALE));
> +	cdp_reg_write(engine, D_DATOUT_SCALE, reg);
> +
> +	reg = (cdp_op->out_cvt.truncate
> +		<< SHIFT(CDP_D_DATOUT_SHIFTER_0, DATOUT_SHIFTER));
> +	cdp_reg_write(engine, D_DATOUT_SHIFTER, reg);
> +
> +	reg = ((cdp_op->bypass_sqsum ?
> +		FIELD_ENUM(CDP_D_FUNC_BYPASS_0, SQSUM_BYPASS, ENABLE) :
> +		FIELD_ENUM(CDP_D_FUNC_BYPASS_0, SQSUM_BYPASS, DISABLE)) <<
> +		SHIFT(CDP_D_FUNC_BYPASS_0, SQSUM_BYPASS)) |
> +		((cdp_op->bypass_out_mul ?
> +		FIELD_ENUM(CDP_D_FUNC_BYPASS_0, MUL_BYPASS, ENABLE) :
> +		FIELD_ENUM(CDP_D_FUNC_BYPASS_0, MUL_BYPASS, DISABLE)) <<
> +		SHIFT(CDP_D_FUNC_BYPASS_0, MUL_BYPASS));
> +	cdp_reg_write(engine, D_FUNC_BYPASS, reg);
> +
> +exit:
> +	return ret;
> +}
> +
> +int
> +dla_cdp_is_ready(struct dla_processor *processor,
> +				 struct dla_processor_group *group)
> +{
> +	struct dla_processor_group *next_group;
> +	struct dla_cdp_op_desc *cdp_op;
> +
> +	cdp_op = &group->operation_desc->cdp_op;
> +	next_group = &processor->groups[!group->id];
> +
> +	/**
> +	 * Single LUT is shared between two CDP groups, need to make
> +	 * sure that usage does not conflict. Also, LUT write
> +	 * access is locked when CDP sub-engine is active, so delay
> +	 * writing LUT when another group is active.
> +	 */
> +
> +	/**
> +	 * if no LUT required for current group then it can be programmed
> +	 * without further checks
> +	 */
> +	if (cdp_op->lut_index == -1)
> +		return 1;
> +
> +	/**
> +	 * if same LUT is used for both groups then it can be programmed
> +	 * without more checks. Even if another group is active and LUT
> +	 * is locked, it would have been programmed by another group.
> +	 */
> +	if (next_group->lut_index == cdp_op->lut_index)
> +		return 1;
> +
> +	/**
> +	 * if LUT index of another group is not -1 means some LUT is programmed,
> +	 * then do not program current LUT as we already know current LUT is not
> +	 * -1 and neither same as another group.
> +	 */
> +	if (next_group->lut_index != -1)
> +		return 0;
> +
> +	/**
> +	 * if current group needs LUT different than another group and that
> +	 * group is not active then program it.
> +	 */
> +	if (!next_group->active)
> +		return 1;
> +
> +	/**
> +	 * if control is here it means current group is using LUT different than
> +	 * another group and that group is active. Wait for another group to
> +	 * become idle.
> +	 */
> +
> +	return 0;
> +}
> +
> +void
> +dla_cdp_dump_config(struct dla_processor_group *group)
> +{
> +	struct dla_cdp_op_desc *cdp_op;
> +	struct dla_cdp_surface_desc *cdp_surface;
> +
> +	cdp_surface = &group->surface_desc->cdp_surface;
> +	cdp_op = &group->operation_desc->cdp_op;
> +}
> +
> +int
> +dla_cdp_program(struct dla_engine *engine, struct dla_processor_group *group)
> +{
> +	int32_t ret;
> +
> +	dla_enable_intr(engine, MASK(GLB_S_INTR_MASK_0, CDP_DONE_MASK1) |
> +					MASK(GLB_S_INTR_MASK_0, CDP_DONE_MASK0));
> +
> +	ret = processor_cdp_program(engine, group);
> +	if (ret)
> +		goto exit;
> +
> +exit:
> +	return ret;
> +}
> diff --git a/drivers/gpu/drm/nvdla/nvdla_common.c b/drivers/gpu/drm/nvdla/nvdla_common.c
> new file mode 100644
> index 000000000000..3abc863d9fce
> --- /dev/null
> +++ b/drivers/gpu/drm/nvdla/nvdla_common.c
> @@ -0,0 +1,295 @@
> +// SPDX-License-Identifier: BSD-3-Clause OR GPL-2.0
> +/*
> + * Copyright (C) 2017-2018 NVIDIA CORPORATION
> + * Copyright (C) 2022 Cai Huoqing
> + */
> +
> +#include "nvdla_reg.h"
> +#include "nvdla_common.h"
> +#include "nvdla_drm.h"
> +#include "nvdla_engine.h"
> +
> +static const uint8_t map_lut_method[] = {
> +	FIELD_ENUM(CDP_S_LUT_CFG_0, LUT_LE_FUNCTION, EXPONENT),
> +	FIELD_ENUM(CDP_S_LUT_CFG_0, LUT_LE_FUNCTION, LINEAR)
> +};
> +static const uint8_t map_lut_out[] = {
> +	FIELD_ENUM(CDP_S_LUT_CFG_0, LUT_UFLOW_PRIORITY, LE),
> +	FIELD_ENUM(CDP_S_LUT_CFG_0, LUT_UFLOW_PRIORITY, LO)
> +};
> +
> +static const uint16_t access_data_offset[] = {
> +	CDP_S_LUT_ACCESS_DATA_0 - CDP_S_LUT_ACCESS_CFG_0,
> +	SDP_S_LUT_ACCESS_DATA_0 - SDP_S_LUT_ACCESS_CFG_0,
> +};
> +static const uint16_t lut_cfg_offset[] = {
> +	CDP_S_LUT_CFG_0 - CDP_S_LUT_ACCESS_CFG_0,
> +	SDP_S_LUT_CFG_0 - SDP_S_LUT_ACCESS_CFG_0,
> +};
> +static const uint16_t lut_info_offset[] = {
> +	CDP_S_LUT_INFO_0 - CDP_S_LUT_ACCESS_CFG_0,
> +	SDP_S_LUT_INFO_0 - SDP_S_LUT_ACCESS_CFG_0,
> +};
> +static const uint16_t le_start_offset[] = {
> +	CDP_S_LUT_LE_START_LOW_0 - CDP_S_LUT_ACCESS_CFG_0,
> +	SDP_S_LUT_LE_START_0 - SDP_S_LUT_ACCESS_CFG_0,
> +};
> +static const uint16_t le_end_offset[] = {
> +	CDP_S_LUT_LE_END_LOW_0 - CDP_S_LUT_ACCESS_CFG_0,
> +	SDP_S_LUT_LE_END_0 - SDP_S_LUT_ACCESS_CFG_0,
> +};
> +static const uint16_t lo_start_offset[] = {
> +	CDP_S_LUT_LO_START_LOW_0 - CDP_S_LUT_ACCESS_CFG_0,
> +	SDP_S_LUT_LO_START_0 - SDP_S_LUT_ACCESS_CFG_0,
> +};
> +static const uint16_t lo_end_offset[] = {
> +	CDP_S_LUT_LO_END_LOW_0 - CDP_S_LUT_ACCESS_CFG_0,
> +	SDP_S_LUT_LO_END_0 - SDP_S_LUT_ACCESS_CFG_0,
> +};
> +static const uint16_t le_slope_scale_offset[] = {
> +	CDP_S_LUT_LE_SLOPE_SCALE_0 - CDP_S_LUT_ACCESS_CFG_0,
> +	SDP_S_LUT_LE_SLOPE_SCALE_0 - SDP_S_LUT_ACCESS_CFG_0,
> +};
> +static const uint16_t le_slope_shift_offset[] = {
> +	CDP_S_LUT_LE_SLOPE_SHIFT_0 - CDP_S_LUT_ACCESS_CFG_0,
> +	SDP_S_LUT_LE_SLOPE_SHIFT_0 - SDP_S_LUT_ACCESS_CFG_0,
> +};
> +static const uint16_t lo_slope_scale_offset[] = {
> +	CDP_S_LUT_LO_SLOPE_SCALE_0 - CDP_S_LUT_ACCESS_CFG_0,
> +	SDP_S_LUT_LO_SLOPE_SCALE_0 - SDP_S_LUT_ACCESS_CFG_0,
> +};
> +static const uint16_t lo_slope_shift_offset[] = {
> +	CDP_S_LUT_LO_SLOPE_SHIFT_0 - CDP_S_LUT_ACCESS_CFG_0,
> +	SDP_S_LUT_LO_SLOPE_SHIFT_0 - SDP_S_LUT_ACCESS_CFG_0,
> +};
> +
> +void update_lut(struct dla_engine *engine, uint32_t reg_base,
> +				struct dla_lut_param *lut, uint8_t precision)
> +{
> +	int32_t i;
> +	uint32_t reg;
> +	uint32_t high, low;
> +	int32_t is_sdp = reg_base == SDP_S_LUT_ACCESS_CFG_0;
> +
> +	/* program raw table */
> +	reg = (FIELD_ENUM(CDP_S_LUT_ACCESS_CFG_0, LUT_TABLE_ID, LE)
> +		<< SHIFT(CDP_S_LUT_ACCESS_CFG_0, LUT_TABLE_ID)) |
> +		(FIELD_ENUM(CDP_S_LUT_ACCESS_CFG_0, LUT_ACCESS_TYPE, WRITE)
> +		<< SHIFT(CDP_S_LUT_ACCESS_CFG_0, LUT_ACCESS_TYPE));
> +	reg_write(engine, reg_base, reg);
> +
> +	for (i = 0; i < (1<<LUT_LINEAR_EXP_TABLE_ENTRY_LOG2)+1; i++) {
> +		dla_reg_write(engine->driver_context,
> +				reg_base + access_data_offset[is_sdp],
> +				lut->linear_exp_table[i]);
> +	}
> +
> +	/* program density table */
> +	reg = (FIELD_ENUM(CDP_S_LUT_ACCESS_CFG_0, LUT_TABLE_ID, LO)
> +		<< SHIFT(CDP_S_LUT_ACCESS_CFG_0, LUT_TABLE_ID)) |
> +		(FIELD_ENUM(CDP_S_LUT_ACCESS_CFG_0, LUT_ACCESS_TYPE, WRITE)
> +		<< SHIFT(CDP_S_LUT_ACCESS_CFG_0, LUT_ACCESS_TYPE));
> +	dla_reg_write(engine->driver_context, reg_base, reg);
> +
> +	for (i = 0; i < (1<<LUT_LINEAR_ONLY_TABLE_ENTRY_LOG2)+1; i++) {
> +		dla_reg_write(engine->driver_context,
> +				reg_base + access_data_offset[is_sdp],
> +				lut->linear_only_table[i]);
> +	}
> +
> +	/* program other configurations */
> +	reg = (map_lut_method[lut->method] <<
> +		SHIFT(CDP_S_LUT_CFG_0, LUT_LE_FUNCTION)) |
> +		(map_lut_out[lut->hybrid_priority] <<
> +		SHIFT(CDP_S_LUT_CFG_0, LUT_HYBRID_PRIORITY)) |
> +		(map_lut_out[lut->underflow_priority] <<
> +		SHIFT(CDP_S_LUT_CFG_0, LUT_UFLOW_PRIORITY)) |
> +		(map_lut_out[lut->overflow_priority] <<
> +		SHIFT(CDP_S_LUT_CFG_0, LUT_OFLOW_PRIORITY));
> +	dla_reg_write(engine->driver_context,
> +			reg_base + lut_cfg_offset[is_sdp], reg);
> +
> +	if (lut->method == FIELD_ENUM(CDP_S_LUT_CFG_0,
> +					LUT_LE_FUNCTION, EXPONENT)) {
> +		reg = ((((uint32_t)lut->linear_exp_offset.exp_offset) <<
> +			SHIFT(CDP_S_LUT_INFO_0, LUT_LE_INDEX_OFFSET))&
> +		MASK(CDP_S_LUT_INFO_0, LUT_LE_INDEX_OFFSET)) |
> +			((((uint32_t)lut->linear_only_offset.frac_bits) <<
> +			SHIFT(CDP_S_LUT_INFO_0, LUT_LO_INDEX_SELECT))&
> +		MASK(CDP_S_LUT_INFO_0, LUT_LO_INDEX_SELECT));
> +	} else {
> +		reg = ((((uint32_t)lut->linear_exp_offset.frac_bits) <<
> +			SHIFT(CDP_S_LUT_INFO_0, LUT_LE_INDEX_SELECT))&
> +		MASK(CDP_S_LUT_INFO_0, LUT_LE_INDEX_SELECT)) |
> +			((((uint32_t)lut->linear_only_offset.frac_bits) <<
> +			SHIFT(CDP_S_LUT_INFO_0, LUT_LO_INDEX_SELECT))&
> +		MASK(CDP_S_LUT_INFO_0, LUT_LO_INDEX_SELECT));
> +	}
> +	dla_reg_write(engine->driver_context,
> +			reg_base + lut_info_offset[is_sdp], reg);
> +	high = upper_32_bits(lut->linear_exp_start);
> +	low = lower_32_bits(lut->linear_exp_start);
> +	dla_reg_write(engine->driver_context,
> +			reg_base + le_start_offset[is_sdp], low);
> +	if (!is_sdp)
> +		dla_reg_write(engine->driver_context,
> +				reg_base + le_start_offset[is_sdp] + 4, high);
> +
> +	high = upper_32_bits(lut->linear_exp_end);
> +	low = lower_32_bits(lut->linear_exp_end);
> +	dla_reg_write(engine->driver_context,
> +				reg_base + le_end_offset[is_sdp], low);
> +	if (!is_sdp)
> +		dla_reg_write(engine->driver_context,
> +				reg_base + le_end_offset[is_sdp] + 4, high);
> +
> +	high = upper_32_bits(lut->linear_only_start);
> +	low = lower_32_bits(lut->linear_only_start);
> +	dla_reg_write(engine->driver_context,
> +				reg_base + lo_start_offset[is_sdp], low);
> +	if (!is_sdp)
> +		dla_reg_write(engine->driver_context,
> +				reg_base + lo_start_offset[is_sdp] + 4, high);
> +
> +	high = upper_32_bits(lut->linear_only_end);
> +	low = lower_32_bits(lut->linear_only_end);
> +	dla_reg_write(engine->driver_context,
> +				reg_base + lo_end_offset[is_sdp], low);
> +	if (!is_sdp)
> +		dla_reg_write(engine->driver_context,
> +				reg_base + lo_end_offset[is_sdp] + 4, high);
> +
> +	if (precision == PRECISION_FP16) {
> +		reg = (lut->linear_exp_underflow_slope.data_f <<
> +			SHIFT(CDP_S_LUT_LE_SLOPE_SCALE_0,
> +					LUT_LE_SLOPE_UFLOW_SCALE)) |
> +			(lut->linear_exp_overflow_slope.data_f <<
> +			SHIFT(CDP_S_LUT_LE_SLOPE_SCALE_0,
> +					LUT_LE_SLOPE_OFLOW_SCALE));
> +		dla_reg_write(engine->driver_context,
> +				reg_base + le_slope_scale_offset[is_sdp], reg);
> +
> +		reg = (lut->linear_only_underflow_slope.data_f <<
> +			SHIFT(CDP_S_LUT_LO_SLOPE_SCALE_0,
> +					LUT_LO_SLOPE_UFLOW_SCALE)) |
> +			(lut->linear_only_overflow_slope.data_f <<
> +			SHIFT(CDP_S_LUT_LO_SLOPE_SCALE_0,
> +					LUT_LO_SLOPE_OFLOW_SCALE));
> +		dla_reg_write(engine->driver_context,
> +				reg_base + lo_slope_scale_offset[is_sdp], reg);
> +	} else {
> +		union dla_slope *oslope;
> +		union dla_slope *uslope;
> +
> +		uslope = &lut->linear_exp_underflow_slope;
> +		oslope = &lut->linear_exp_overflow_slope;
> +		reg = ((((uint32_t)uslope->data_i.scale)
> +			<< SHIFT(CDP_S_LUT_LE_SLOPE_SCALE_0,
> +					LUT_LE_SLOPE_UFLOW_SCALE))&
> +			MASK(CDP_S_LUT_LE_SLOPE_SCALE_0,
> +					LUT_LE_SLOPE_UFLOW_SCALE)) |
> +			((((uint32_t)oslope->data_i.scale)
> +			<< SHIFT(CDP_S_LUT_LE_SLOPE_SCALE_0,
> +					LUT_LE_SLOPE_OFLOW_SCALE))&
> +			MASK(CDP_S_LUT_LE_SLOPE_SCALE_0,
> +					LUT_LE_SLOPE_OFLOW_SCALE));
> +		dla_reg_write(engine->driver_context,
> +				reg_base + le_slope_scale_offset[is_sdp], reg);
> +
> +		reg = ((((uint32_t)uslope->data_i.shifter) <<
> +			SHIFT(CDP_S_LUT_LE_SLOPE_SHIFT_0,
> +					LUT_LE_SLOPE_UFLOW_SHIFT))&
> +			MASK(CDP_S_LUT_LE_SLOPE_SHIFT_0,
> +					LUT_LE_SLOPE_UFLOW_SHIFT)) |
> +			((((uint32_t)oslope->data_i.shifter) <<
> +			SHIFT(CDP_S_LUT_LE_SLOPE_SHIFT_0,
> +					LUT_LE_SLOPE_OFLOW_SHIFT))&
> +			MASK(CDP_S_LUT_LE_SLOPE_SHIFT_0,
> +					LUT_LE_SLOPE_OFLOW_SHIFT));
> +		dla_reg_write(engine->driver_context,
> +				reg_base + le_slope_shift_offset[is_sdp], reg);
> +
> +		uslope = &lut->linear_only_underflow_slope;
> +		oslope = &lut->linear_only_overflow_slope;
> +		reg = ((((uint32_t)uslope->data_i.scale) <<
> +			SHIFT(CDP_S_LUT_LO_SLOPE_SCALE_0,
> +					LUT_LO_SLOPE_UFLOW_SCALE))&
> +			MASK(CDP_S_LUT_LO_SLOPE_SCALE_0,
> +					LUT_LO_SLOPE_UFLOW_SCALE)) |
> +			((((uint32_t)oslope->data_i.scale) <<
> +			SHIFT(CDP_S_LUT_LO_SLOPE_SCALE_0,
> +					LUT_LO_SLOPE_OFLOW_SCALE))&
> +			MASK(CDP_S_LUT_LO_SLOPE_SCALE_0,
> +					LUT_LO_SLOPE_OFLOW_SCALE));
> +		dla_reg_write(engine->driver_context,
> +				reg_base + lo_slope_scale_offset[is_sdp], reg);
> +		reg = ((((uint32_t)uslope->data_i.shifter) <<
> +			SHIFT(CDP_S_LUT_LO_SLOPE_SHIFT_0,
> +					LUT_LO_SLOPE_UFLOW_SHIFT))&
> +			MASK(CDP_S_LUT_LO_SLOPE_SHIFT_0,
> +					LUT_LO_SLOPE_UFLOW_SHIFT)) |
> +			((((uint32_t)oslope->data_i.shifter) <<
> +			SHIFT(CDP_S_LUT_LO_SLOPE_SHIFT_0,
> +					LUT_LO_SLOPE_OFLOW_SHIFT))&
> +			MASK(CDP_S_LUT_LO_SLOPE_SHIFT_0,
> +					LUT_LO_SLOPE_OFLOW_SHIFT));
> +		dla_reg_write(engine->driver_context,
> +				reg_base + lo_slope_shift_offset[is_sdp], reg);
> +	}
> +}
> +
> +int
> +validate_data_cube(struct dla_data_cube src_data_cube,
> +				   struct dla_data_cube dst_data_cube,
> +				   uint8_t mem_type)
> +{
> +	int32_t ret = 0;
> +
> +	if ((src_data_cube.width > DCUBE_MAX_WIDTH) ||
> +	    (src_data_cube.height > DCUBE_MAX_HEIGHT) ||
> +	    (src_data_cube.channel > DCUBE_MAX_CHANNEL)) {
> +		pr_err("Invalid SrcInput Cude[W: %u, H: %u, C: %u]",
> +				src_data_cube.width, src_data_cube.height,
> +				src_data_cube.channel);
> +		ret = -EINVAL;
> +		goto exit;
> +	}
> +
> +	if ((dst_data_cube.width > DCUBE_MAX_WIDTH) ||
> +	    (dst_data_cube.height > DCUBE_MAX_HEIGHT) ||
> +	    (dst_data_cube.channel > DCUBE_MAX_CHANNEL)) {
> +		pr_err("Invalid DstInput Cude[W: %u, H: %u, C: %u]",
> +				dst_data_cube.width, dst_data_cube.height,
> +				dst_data_cube.channel);
> +		ret = -EINVAL;
> +		goto exit;
> +	}
> +
> +	if (src_data_cube.type > mem_type) {
> +		pr_err("Invalid src_data.mem_type: %u\n", src_data_cube.type);
> +		ret = -EINVAL;
> +		goto exit;
> +	}
> +
> +	if (dst_data_cube.type > mem_type) {
> +		pr_err("Invalid dst_data.mem_type: %u\n", dst_data_cube.type);
> +		ret = -EINVAL;
> +		goto exit;
> +	}
> +
> +exit:
> +	return ret;
> +}
> +
> +int
> +validate_precision(uint8_t precision, uint8_t map_precision)
> +{
> +	int32_t ret = 0;
> +
> +	if (precision >= map_precision) {
> +		pr_err("Invalid precision: %u\n", precision);
> +		ret = -EINVAL;
> +	}
> +
> +	return ret;
> +}
> diff --git a/drivers/gpu/drm/nvdla/nvdla_common.h b/drivers/gpu/drm/nvdla/nvdla_common.h
> new file mode 100644
> index 000000000000..38cf43246890
> --- /dev/null
> +++ b/drivers/gpu/drm/nvdla/nvdla_common.h
> @@ -0,0 +1,835 @@
> +/* SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause */
> +/*
> + * Copyright (C) 2017-2018 NVIDIA CORPORATION.
> + * Copyright (C) 2022 Cai Huoqing
> + */
> +
> +#ifndef __NVDLA_COMMON_H_
> +#define __NVDLA_COMMON_H_
> +
> +#include <linux/types.h>
> +
> +#define DCUBE_MAX_WIDTH		8192
> +#define DCUBE_MAX_HEIGHT	8192
> +#define DCUBE_MAX_CHANNEL	8192
> +
> +/**
> + * @ingroup Processors
> + * @name DLA Processors
> + * Processor modules in DLA engine. Each processor has it's
> + * own operation a.k.a. HW layer. Network is formed using
> + * graph of these operations
> + * @{
> + */
> +#define DLA_OP_BDMA		0
> +#define DLA_OP_CONV		1
> +#define DLA_OP_SDP		2
> +#define DLA_OP_PDP		3
> +#define DLA_OP_CDP		4
> +#define DLA_OP_RUBIK	5
> +/** @} */
> +
> +/**
> + * @ingroup Processors
> + * @name Maximum number of processors
> + * @brief DLA ash 6 processors
> + * @{
> + */
> +#define DLA_OP_NUM		6
> +/** @} */
> +
> +/**
> + * @ingroup Processors
> + * @name Number of groups
> + * @brief Each processor has 2 groups of registers
> + * @{
> + */
> +#define DLA_NUM_GROUPS		2
> +/** @} */
> +
> +/**
> + * Network descriptor
> + *
> + * Contains all information to execute a network
> + *
> + * @op_head: Index of first operation of each type in operations list
> + * @num_rois: Number of ROIs
> + * @num_operations: Number of operations in one list
> + * @num_luts: Number of LUTs
> + */
> +struct dla_network_desc {
> +	int16_t operation_desc_index;
> +	int16_t surface_desc_index;
> +
> +	int16_t dependency_graph_index;
> +	int16_t lut_data_index;
> +
> +	int16_t roi_array_index;
> +	int16_t surface_index;
> +
> +	int16_t stat_list_index;
> +	int16_t reserved1;
> +
> +	int16_t op_head[DLA_OP_NUM];
> +
> +	uint16_t num_rois;
> +	uint16_t num_operations;
> +
> +	uint16_t num_luts;
> +	uint16_t num_addresses;
> +
> +	int16_t input_layer;
> +	uint8_t dynamic_roi;
> +	uint8_t reserved0;
> +} __packed __aligned(4);
> +
> +/**
> + * @name Memory types
> + * @brief DLA engnine can read/write to/from 3 memory types
> + * @{
> + */
> +#define DLA_MEM_MC			0 /* External DRAM */
> +#define DLA_MEM_CV			1 /* CV-SRAM */
> +#define DLA_MEM_HW			2 /* DLA sub-module */
> +/** @} */
> +
> +/**
> + * @ingroup Events
> + * @name Operation events
> + * @brief Different events triggered by an operations
> + * @{
> + */
> +#define DLA_EVENT_OP_COMPLETED		1
> +#define DLA_EVENT_OP_PROGRAMMED		2
> +#define DLA_EVENT_OP_ENABLED		3
> +#define DLA_EVENT_CDMA_WT_DONE		4
> +#define DLA_EVENT_CDMA_DT_DONE		5
> +/** @} */
> +
> +struct dla_consumer {
> +	int16_t index; /* the index of dla_common_op_desc in dep_graph_addr */
> +	uint8_t event;
> +	uint8_t res;
> +} __packed __aligned(4);
> +
> +struct dla_common_op_desc {
> +	int16_t index; /* set by ucode */
> +	int8_t roi_index;
> +	uint8_t op_type;
> +
> +	uint8_t dependency_count;
> +	uint8_t reserved0[3];
> +
> +	struct dla_consumer consumers[DLA_OP_NUM];
> +	struct dla_consumer fused_parent;
> +} __packed __aligned(4);
> +
> +struct dla_roi_array_desc {
> +	uint32_t array_length;
> +
> +	uint32_t array_reserved;
> +} __packed __aligned(4);
> +
> +struct dla_roi_desc {
> +	uint32_t left;
> +
> +	uint32_t top;
> +
> +	uint32_t right;
> +
> +	uint32_t bottom;
> +} __packed __aligned(4);
> +
> +/**
> + * @ingroup BDMA
> + * @name Maximum BDMA transfers
> + * @brief BDMA supports multiple transfers in operation. This indicates
> + *        maximum number of transfers possible in one operation.
> + * @{
> + */
> +#define NUM_MAX_BDMA_OPS	20
> +/** @} */
> +
> +struct dla_bdma_transfer_desc {
> +	int16_t source_address;
> +	int16_t destination_address;
> +
> +	uint32_t line_size;
> +
> +	uint32_t line_repeat;
> +
> +	uint32_t source_line;
> +
> +	uint32_t destination_line;
> +
> +	uint32_t surface_repeat;
> +
> +	uint32_t source_surface;
> +
> +	uint32_t destination_surface;
> +} __packed __aligned(4);
> +
> +struct dla_bdma_surface_desc {
> +	uint8_t source_type;
> +	uint8_t destination_type;
> +	uint16_t num_transfers;
> +
> +	struct dla_bdma_transfer_desc transfers[NUM_MAX_BDMA_OPS];
> +} __packed __aligned(4);
> +
> +struct dla_bdma_op_desc {
> +	uint16_t num_transfers;
> +	uint16_t reserved0;
> +} __packed __aligned(4);
> +
> +struct dla_bdma_stat_desc {
> +	uint32_t read_stall;
> +	uint32_t write_stall;
> +} __packed __aligned(4);
> +
> +/**
> + * @ingroup Convolution
> + * @name Convolution mode
> + * @brief Convolution modes support by DLA
> + * @{
> + */
> +#define CONV_MODE_DIRECT	0
> +#define CONV_MODE_WINOGRAD	1
> +/** @} */
> +
> +/**
> + * @ingroup Processors
> + * @name Precision BPE mapping
> + * @brief Precision formats and Bit Per Elements mapping
> + * @{
> + */
> +#define BPE_PRECISION_INT8		1
> +#define BPE_PRECISION_INT16		2
> +#define BPE_PRECISION_FP16		2
> +/** @} */
> +
> +
> +/**
> + * @ingroup Processors
> + * @name Precision types
> + * @brief Precision formats supported by DLA engine
> + * @{
> + */
> +#define PRECISION_INT8		0
> +#define PRECISION_INT16		1
> +#define PRECISION_FP16		2
> +/** @} */
> +
> +/**
> + * @ingroup Processors
> + * @name Data formats
> + * @brief Data formats supported by DLA engine
> + * @{
> + */
> +#define FORMAT_T_R8			0
> +#define FORMAT_T_R10			1
> +#define FORMAT_T_R12			2
> +#define FORMAT_T_R16			3
> +#define FORMAT_T_R16_I			4
> +#define FORMAT_T_R16_F			5
> +#define FORMAT_T_A16B16G16R16		6
> +#define FORMAT_T_X16B16G16R16		7
> +#define FORMAT_T_A16B16G16R16_F		8
> +#define FORMAT_T_A16Y16U16V16		9
> +#define FORMAT_T_V16U16Y16A16		10
> +#define FORMAT_T_A16Y16U16V16_F		11
> +#define FORMAT_T_A8B8G8R8		12
> +#define FORMAT_T_A8R8G8B8		13
> +#define FORMAT_T_B8G8R8A8		14
> +#define FORMAT_T_R8G8B8A8		15
> +#define FORMAT_T_X8B8G8R8		16
> +#define FORMAT_T_X8R8G8B8		17
> +#define FORMAT_T_B8G8R8X8		18
> +#define FORMAT_T_R8G8B8X8		19
> +#define FORMAT_T_A2B10G10R10		20
> +#define FORMAT_T_A2R10G10B10		21
> +#define FORMAT_T_B10G10R10A2		22
> +#define FORMAT_T_R10G10B10A2		23
> +#define FORMAT_T_A2Y10U10V10		24
> +#define FORMAT_T_V10U10Y10A2		25
> +#define FORMAT_T_A8Y8U8V8			26
> +#define FORMAT_T_V8U8Y8A8			27
> +#define FORMAT_T_Y8___U8V8_N444		28
> +#define FORMAT_T_Y8___V8U8_N444		29
> +#define FORMAT_T_Y10___U10V10_N444	30
> +#define FORMAT_T_Y10___V10U10_N444	31
> +#define FORMAT_T_Y12___U12V12_N444	32
> +#define FORMAT_T_Y12___V12U12_N444	33
> +#define FORMAT_T_Y16___U16V16_N444	34
> +#define FORMAT_T_Y16___V16U16_N444	35
> +#define FORMAT_FEATURE			36
> +/** @} */
> +
> +/**
> + * @ingroup Convolution
> + * @name Pixel mapping
> + * @brief Pixel mapping formats supported for image input in Convolution
> + * @{
> + */
> +#define MAP_PITCH_LINEAR		0
> +/** @} */
> +
> +/**
> + * @ingroup Convolution
> + * @name Weight formats
> + * @brief Weight data formats supported in Convolution
> + * @{
> + */
> +#define WEIGHT_FORMAT_UNCOMPRESSED	0
> +#define WEIGHT_FORMAT_COMPRESSED	1
> +/** @} */
> +
> +/**
> + * @ingroup Convolution
> + * @name Mean data format
> + * @brief Mean data formats supported in Convolution
> + * @{
> + */
> +#define MEAN_FORMAT_DISABLE     0
> +#define MEAN_FORMAT_ENABLE      1
> +/** @} */
> +
> +struct dla_cvt_param {
> +	int16_t  scale;
> +	uint8_t  truncate;
> +	uint8_t  enable;
> +
> +	int32_t  offset;
> +} __packed __aligned(4);
> +
> +struct dla_data_cube {
> +	uint16_t type; /* dla_mem_type */
> +	int16_t address; /* offset to the actual IOVA in task.address_list */
> +
> +	uint32_t offset; /* offset within address */
> +	uint32_t size;
> +
> +	/* cube dimensions */
> +	uint16_t width;
> +	uint16_t height;
> +
> +	uint16_t channel;
> +	uint16_t reserved0;
> +
> +	/* stride information */
> +	uint32_t line_stride;
> +	uint32_t surf_stride;
> +
> +	/* For Rubik only */
> +	uint32_t plane_stride;
> +} __packed __aligned(4);
> +
> +#define PIXEL_OVERRIDE_UINT 0
> +#define PIXEL_OVERRIDE_INT  1
> +
> +struct dla_conv_surface_desc {
> +	/* Data cube */
> +	struct dla_data_cube weight_data;
> +	struct dla_data_cube wmb_data;
> +	struct dla_data_cube wgs_data;
> +	struct dla_data_cube src_data;
> +	struct dla_data_cube dst_data;
> +
> +	/**
> +	 * u_addr = input_data.source_addr + offset_u
> +	 * this field should be set when YUV is not interleave format
> +	 *
> +	 */
> +	int64_t offset_u;
> +
> +	/* line stride for 2nd plane, must be 32bytes aligned */
> +	uint32_t in_line_uv_stride;
> +} __packed __aligned(4);
> +
> +struct dla_conv_op_desc {
> +	/* Performance parameters */
> +
> +	/* dla_conv_mode */
> +	uint8_t conv_mode;
> +	uint8_t data_reuse;
> +	uint8_t weight_reuse;
> +	uint8_t skip_data_rls;
> +
> +	uint8_t skip_weight_rls;
> +	uint8_t reserved0;
> +	uint16_t entry_per_slice;
> +
> +	/* dla_data_format */
> +	uint8_t data_format;
> +	/* dla_pixel_mapping */
> +	uint8_t pixel_mapping;
> +	/* number of free slices before fetch */
> +	uint16_t fetch_grain;
> +
> +	uint8_t reserved_b[8];
> +
> +	/* batch_num */
> +	uint8_t batch;
> +	/* dla_weight_format */
> +	uint8_t weight_format;
> +	uint8_t data_bank;
> +	uint8_t weight_bank;
> +
> +	/* the offset in bytes of each data cube in a batch */
> +	uint32_t batch_stride;
> +
> +	uint8_t post_extension;
> +	uint8_t pixel_override;
> +	/* number of slices need to be released */
> +	uint16_t release;
> +
> +	 /* The input cube dimension for CSC */
> +	uint16_t input_width_csc;
> +	uint16_t input_height_csc;
> +
> +	uint16_t input_channel_csc;
> +	uint16_t kernel_width_csc;
> +
> +	uint16_t kernel_height_csc;
> +	uint16_t kernel_channel_csc;
> +
> +	/* The input cube dimension for CMAC */
> +	uint16_t input_width_cmac;
> +	uint16_t input_height_cmac;
> +
> +	/* actual size in bytes */
> +	uint32_t bytes_per_kernel;
> +
> +	/* Algorithm parameters */
> +
> +	int16_t mean_ry; /* mean value for red in RGB or Y in YUV */
> +	int16_t mean_gu; /* mean value for green in RGB or U in YUV */
> +
> +	int16_t mean_bv; /* mean value for blue in RGB or V in YUV */
> +	int16_t mean_ax;
> +
> +	uint8_t mean_format; /* dla_mean_format */
> +	uint8_t conv_stride_x;
> +	uint8_t conv_stride_y;
> +	uint8_t pad_x_left;
> +
> +	uint8_t pad_x_right;
> +	uint8_t pad_y_top;
> +	uint8_t pad_y_bottom;
> +	uint8_t dilation_x;
> +
> +	uint8_t dilation_y;
> +	uint8_t reserved2[2];
> +
> +	/* Precision parameters */
> +	uint8_t pra_truncate;
> +
> +	uint8_t in_precision;
> +	/* The output precision from CONV, it's the MAC processing precison */
> +	uint8_t out_precision;
> +	int16_t pad_val;
> +
> +	/* input converter parameters */
> +	struct dla_cvt_param in_cvt;
> +	/* output converter parameters, support truncate only */
> +	struct dla_cvt_param out_cvt;
> +
> +} __packed __aligned(4);
> +
> +struct dla_conv_stat_desc {
> +	uint32_t data_read_stall;
> +	uint32_t weight_read_stall;
> +	uint32_t data_read_latency;
> +	uint32_t weight_read_latency;
> +	uint32_t saturation_count;
> +	uint32_t nan_data_num;
> +	uint32_t nan_weight_num;
> +	uint32_t inf_data_num;
> +	uint32_t inf_weight_num;
> +} __packed __aligned(4);
> +
> +/**
> + * @ingroup SDP
> + * @name Activation functions
> + * @brief Activation functions supported in SDP
> + * @{
> + */
> +#define ACTIVATION_NONE		0
> +#define ACTIVATION_RELU		1
> +#define ACTIVATION_LUT		2
> +#define ACTIVATION_PRELU	3
> +/** @} */
> +
> +/**
> + * @ingroup LUT
> + * @name LUT size
> + * @brief LUT sizes for linear and exponentila LUT
> + * @{
> + */
> +#define LUT_LINEAR_EXP_TABLE_ENTRY_LOG2		6
> +#define LUT_LINEAR_ONLY_TABLE_ENTRY_LOG2	8
> +/** @} */
> +
> +/**
> + * @ingroup LUT
> + * @name LUT types
> + * @brief DLA supports two types of LUT, linear and exonential
> + * @{
> + */
> +#define LUT_LINEAR_EXP_TABLE		0
> +#define LUT_LINEAR_ONLY_TABLE		1
> +/** @} */
> +
> +/**
> + * @ingroup LUT
> + * @name LUT methods
> + * @brief DLA supports two types of LUT, linear and exonential
> + * @{
> + */
> +#define LUT_METHOD_EXPONENTIAL		0
> +#define LUT_METHOD_LINEAR		1
> +/** @} */
> +
> +/**
> + * @ingroup LUT
> + * @name LUT
> + * @brief DLA supports two types of LUT, linear and exonential
> + * @{
> + */
> +#define LUT_PRI_LINEAR_EXP		0
> +#define LUT_PRI_LINEAR_ONLY		1
> +/** @} */
> +
> +union dla_lut_offset {
> +	/**
> +	 * Number should be substracted on log domain before look up
> +	 * exponetial table it has the same definition as hardware
> +	 * thus input scaling should also take into account when
> +	 * set this field.
> +	 */
> +	int8_t exp_offset;
> +	/**
> +	 * Number of bits should be right shift before looking
> +	 * up linear table
> +	 */
> +	int8_t frac_bits;
> +	uint16_t reserved0;
> +};
> +
> +/**
> + * This struct is used to represent floating point values by INT
> + * suppose we have a float point number fp_x, it will be represented
> + * as:
> + *
> + * fp_x = scale_int_x>>(shifter_x)
> + *
> + * This is very useful for INT pipeline;
> + */
> +struct dla_float_data {
> +	int16_t scale;
> +	int8_t shifter;
> +	uint8_t reserved0;
> +} __packed __aligned(4);
> +
> +/**
> + * For INT pipeline, we use the struct above to represent a floating number;
> + * For FP16 pipeline, we should store the FP16 encoded value into a uint16_t
> + * container
> + */
> +union dla_slope {
> +	struct dla_float_data data_i;
> +
> +	uint16_t data_f;
> +};
> +
> +struct dla_lut_param {
> +	/**
> +	 * value of expression ((1<<LUT_LINEAR_EXP_TABLE_ENTRY_LOG2)+1) is 65,
> +	 * ((1<<LUT_LINEAR_ONLY_TABLE_ENTRY_LOG2)+1) is 257, and int16_t is of
> +	 * 2Byte. And below two statement's combined memory size is 644 Byte.
> +	 *
> +	 * NOTE: below two declaration combined size should always be multiple
> +	 * of 4.
> +	 */
> +	int16_t linear_exp_table[(1<<LUT_LINEAR_EXP_TABLE_ENTRY_LOG2)+1];
> +	int16_t linear_only_table[(1<<LUT_LINEAR_ONLY_TABLE_ENTRY_LOG2)+1];
> +
> +	union dla_lut_offset linear_exp_offset;
> +	union dla_lut_offset linear_only_offset;
> +
> +	/**
> +	 * The start and end point of raw table,
> +	 * valid when raw_method=LINEAR only
> +	 */
> +	uint64_t linear_exp_start;
> +	uint64_t linear_exp_end;
> +	uint64_t linear_only_start;
> +	uint64_t linear_only_end;
> +
> +	union dla_slope linear_exp_underflow_slope;
> +	union dla_slope linear_exp_overflow_slope;
> +	union dla_slope linear_only_underflow_slope;
> +	union dla_slope linear_only_overflow_slope;
> +
> +	/**
> +	 * dla_lut_priority, when both lut are hit(or one overflow,
> +	 * the other underflow), which one should be selected as output
> +	 */
> +	uint8_t hybrid_priority;
> +	uint8_t underflow_priority;
> +	uint8_t overflow_priority;
> +	uint8_t method; /* dla_lut_method */
> +} __packed __aligned(4);
> +
> +struct dla_sdp_surface_desc {
> +	/* Data cube */
> +	/* source input cube, available when SDP working on offline mode */
> +	struct dla_data_cube src_data;
> +
> +	/* X1 input cube */
> +	struct dla_data_cube x1_data;
> +
> +	/* X2 input cube */
> +	struct dla_data_cube x2_data;
> +
> +	/* Y input cube */
> +	struct dla_data_cube y_data;
> +
> +	/* Output cube */
> +	struct dla_data_cube dst_data;
> +} __packed __aligned(4);
> +
> +#define SDP_OP_NONE		0
> +#define SDP_OP_MUL		1
> +#define SDP_OP_ADD		2
> +#define SDP_OP_BOTH		3
> +
> +#define SDP_ALU_OP_MAX		0
> +#define SDP_ALU_OP_MIN		1
> +#define SDP_ALU_OP_SUM		2
> +#define SDP_ALU_OP_EQL		3
> +
> +#define SDP_OP_PER_LAYER	0
> +#define SDP_OP_PER_KERNEL	1
> +#define SDP_OP_PER_POINT	2
> +
> +struct dla_sdp_cvt {
> +	struct dla_cvt_param alu_cvt;
> +	struct dla_cvt_param mul_cvt;
> +} __packed __aligned(4);
> +
> +struct dla_sdp_op {
> +	uint8_t enable;
> +	uint8_t alu_type; /* dla_sdp_alu_op_type */
> +	uint8_t type; /* dla_sdp_op_type */
> +	uint8_t mode; /* dla_sdp_op_mode */
> +
> +	uint8_t act; /* dla_act_type */
> +	uint8_t shift_value; /* left shift */
> +	uint8_t truncate;
> +	uint8_t precision;
> +
> +	int32_t alu_operand;
> +	int32_t mul_operand;
> +
> +	struct dla_sdp_cvt  cvt;
> +} __packed __aligned(4);
> +
> +struct dla_sdp_op_desc {
> +	/* Precision parameters */
> +	/* dla_precision */
> +	uint8_t src_precision;
> +	uint8_t dst_precision;
> +	int16_t lut_index;
> +
> +	struct dla_cvt_param out_cvt;
> +
> +	/* Performance parameters */
> +	/* dla_conv_mode */
> +	uint8_t conv_mode;
> +	uint8_t batch_num;
> +	uint16_t reserved0;
> +
> +	uint32_t batch_stride;	/* will be used when batch_num > 1 */
> +
> +	/* Algorithm parameters */
> +	struct dla_sdp_op x1_op;
> +	struct dla_sdp_op x2_op;
> +	struct dla_sdp_op y_op;
> +} __packed __aligned(4);
> +
> +#define POOL_MODE_AVG		0
> +#define POOL_MODE_MAX		1
> +#define POOL_MODE_MIN		2
> +
> +#define POOL_SIZE_1		0
> +#define POOL_SIZE_2		1
> +#define POOL_SIZE_3		2
> +#define POOL_SIZE_4		3
> +#define POOL_SIZE_5		4
> +#define POOL_SIZE_6		5
> +#define POOL_SIZE_7		6
> +#define POOL_SIZE_8		7
> +
> +#define PDP_PAD_VAL_NUM	7
> +
> +struct dla_pdp_surface_desc {
> +	/* Data cube */
> +	struct dla_data_cube src_data;
> +
> +	struct dla_data_cube dst_data;
> +} __packed __aligned(4);
> +
> +struct dla_pdp_op_desc {
> +	/* Performance parameters */
> +	uint16_t  partial_in_width_first;
> +	uint16_t  partial_in_width_mid;
> +
> +	uint16_t  partial_in_width_last;
> +	uint16_t  partial_width_first;
> +
> +	uint16_t  partial_width_mid;
> +	uint16_t  partial_width_last;
> +
> +	uint8_t   split_num;
> +
> +	/* Algorithm parameters */
> +	uint8_t  pool_mode; /* dla_pool_mode */
> +	uint8_t  pool_width; /* dla_pool_width */
> +	uint8_t  pool_height; /* dla_pool_height */
> +
> +	uint8_t  stride_x;
> +	uint8_t  stride_y;
> +
> +	/**
> +	 * The left/right padding size,
> +	 * pad_right might be less than pad_left
> +	 */
> +	uint8_t  pad_left;
> +	uint8_t  pad_right;
> +
> +	/* The top/bottom padding size */
> +	uint8_t  pad_top;
> +	uint8_t  pad_bottom;
> +
> +	/* Precision parameters */
> +	uint8_t  precision; /* dla_precision */
> +	uint8_t  reserved0;
> +	/**
> +	 * if input has non-zero "offset", this value should be set
> +	 * There'll be 7 different paddding values, the relationship between
> +	 * those versions are:
> +	 * padding_value[0] = -offset*scaling;
> +	 * padding_value[1] = 2*padding_value[0]
> +	 * padding_value[2] = 3*padding_value[0]
> +	 * ...
> +	 * The purpose is to avoid ucode implement FP16
> +	 * multiplier(for FP16 mode)
> +	 */
> +	int32_t  padding_value[PDP_PAD_VAL_NUM];
> +} __packed __aligned(4);
> +
> +struct dla_pdp_stat_desc {
> +	uint32_t inf_input_num;
> +	uint32_t nan_input_num;
> +	uint32_t nan_output_num;
> +	uint32_t write_stall;
> +	uint32_t runtime;
> +} __packed __aligned(4);
> +
> +struct dla_cdp_surface_desc {
> +	/* Data cube */
> +	struct dla_data_cube src_data;
> +
> +	struct dla_data_cube dst_data;
> +} __packed __aligned(4);
> +
> +struct dla_cdp_op_desc {
> +	/* Precision parameters */
> +
> +	/* dla_precision */
> +	uint8_t  in_precision;
> +	uint8_t  out_precision;
> +	int16_t  lut_index;
> +
> +	struct dla_cvt_param in_cvt;
> +	struct dla_cvt_param out_cvt;
> +
> +	/* Performance parameters */
> +
> +	/* Algorithm parameters */
> +	uint8_t  local_size;
> +	uint8_t  bypass_sqsum;
> +	uint8_t  bypass_out_mul;
> +	uint8_t  reserved0;
> +} __packed __aligned(4);
> +
> +struct dla_cdp_stat_desc {
> +	uint32_t nan_input_num;
> +	uint32_t inf_input_num;
> +	uint32_t nan_output_num;
> +	uint32_t write_stall;
> +	uint32_t lut_uflow;
> +	uint32_t lut_oflow;
> +	uint32_t lut_hybrid;
> +	uint32_t lut_le_hit;
> +	uint32_t lut_lo_hit;
> +	uint32_t saturation_count;
> +	uint32_t runtime;
> +} __packed __aligned(4);
> +
> +struct dla_rubik_surface_desc {
> +	/* Data cube */
> +	struct dla_data_cube src_data;
> +
> +	struct dla_data_cube dst_data;
> +} __packed __aligned(4);
> +
> +/* rubik mode */
> +#define RUBIK_MODE_CONTRACT	0
> +#define RUBIK_MODE_SPLIT	1
> +#define RUBIK_MODE_MERGE	2
> +
> +struct dla_rubik_op_desc {
> +	/* Precision parameters */
> +	uint8_t mode;
> +	uint8_t precision;
> +	uint8_t stride_x;
> +	uint8_t stride_y;
> +} __packed __aligned(4);
> +
> +struct dla_rubik_stat_desc {
> +	uint32_t read_stall;
> +	uint32_t write_stall;
> +	uint32_t runtime;
> +} __packed __aligned(4);
> +
> +union dla_surface_container {
> +	struct dla_bdma_surface_desc bdma_surface;
> +	struct dla_conv_surface_desc conv_surface;
> +	struct dla_sdp_surface_desc sdp_surface;
> +	struct dla_pdp_surface_desc pdp_surface;
> +	struct dla_cdp_surface_desc cdp_surface;
> +	struct dla_rubik_surface_desc rubik_surface;
> +};
> +
> +union dla_operation_container {
> +	struct dla_bdma_op_desc bdma_op;
> +	struct dla_conv_op_desc conv_op;
> +	struct dla_sdp_op_desc sdp_op;
> +	struct dla_pdp_op_desc pdp_op;
> +	struct dla_cdp_op_desc cdp_op;
> +	struct dla_rubik_op_desc rubik_op;
> +};
> +
> +struct dla_engine;
> +void update_lut(struct dla_engine *engine, uint32_t reg_base,
> +		struct dla_lut_param *lut,
> +		uint8_t precision);
> +int32_t validate_data_cube(struct dla_data_cube src_data_cube,
> +			struct dla_data_cube dst_data_cube,
> +			uint8_t mem_type);
> +int32_t validate_precision(uint8_t precision,
> +			uint8_t map_precision);
> +
> +#endif
> diff --git a/drivers/gpu/drm/nvdla/nvdla_conv.c b/drivers/gpu/drm/nvdla/nvdla_conv.c
> new file mode 100644
> index 000000000000..bb24909e1afa
> --- /dev/null
> +++ b/drivers/gpu/drm/nvdla/nvdla_conv.c
> @@ -0,0 +1,683 @@
> +// SPDX-License-Identifier: BSD-3-Clause OR GPL-2.0
> +/*
> + * Copyright (C) 2017-2018 NVIDIA CORPORATION
> + * Copyright (C) 2022 Cai Huoqing
> + */
> +
> +#include "nvdla_common.h"
> +#include "nvdla_drm.h"
> +#include "nvdla_reg.h"
> +#include "nvdla_common.h"
> +#include "nvdla_engine.h"
> +
> +static const uint8_t map_precision[] = {
> +	FIELD_ENUM(CDMA_D_MISC_CFG_0, IN_PRECISION, INT8),
> +	FIELD_ENUM(CDMA_D_MISC_CFG_0, IN_PRECISION, INT16),
> +	FIELD_ENUM(CDMA_D_MISC_CFG_0, IN_PRECISION, FP16),
> +};
> +
> +static const uint8_t map_conv[] = {
> +	FIELD_ENUM(CACC_D_MISC_CFG_0, CONV_MODE, DIRECT),
> +	FIELD_ENUM(CACC_D_MISC_CFG_0, CONV_MODE, WINOGRAD),
> +};
> +
> +static const uint8_t map_weight_fmt[] = {
> +	FIELD_ENUM(CSC_D_WEIGHT_FORMAT_0, WEIGHT_FORMAT, UNCOMPRESSED),
> +	FIELD_ENUM(CSC_D_WEIGHT_FORMAT_0, WEIGHT_FORMAT, COMPRESSED),
> +};
> +
> +static const uint8_t map_img_fmt[][2] = {
> +	{FIELD_ENUM(CDMA_D_DATAIN_FORMAT_0,
> +			PIXEL_FORMAT, T_R8), 1},
> +	{FIELD_ENUM(CDMA_D_DATAIN_FORMAT_0,
> +			PIXEL_FORMAT, T_R10), 2},
> +	{FIELD_ENUM(CDMA_D_DATAIN_FORMAT_0,
> +			PIXEL_FORMAT, T_R12), 2},
> +	{FIELD_ENUM(CDMA_D_DATAIN_FORMAT_0,
> +			PIXEL_FORMAT, T_R16), 2},
> +	{FIELD_ENUM(CDMA_D_DATAIN_FORMAT_0,
> +			PIXEL_FORMAT, T_R16_I), 2},
> +	{FIELD_ENUM(CDMA_D_DATAIN_FORMAT_0,
> +			PIXEL_FORMAT, T_R16_F), 2},
> +	{FIELD_ENUM(CDMA_D_DATAIN_FORMAT_0,
> +			PIXEL_FORMAT, T_A16B16G16R16), 8},
> +	{FIELD_ENUM(CDMA_D_DATAIN_FORMAT_0,
> +			PIXEL_FORMAT, T_X16B16G16R16), 8},
> +	{FIELD_ENUM(CDMA_D_DATAIN_FORMAT_0,
> +			PIXEL_FORMAT, T_A16B16G16R16_F), 8},
> +	{FIELD_ENUM(CDMA_D_DATAIN_FORMAT_0,
> +			PIXEL_FORMAT, T_A16Y16U16V16), 8},
> +	{FIELD_ENUM(CDMA_D_DATAIN_FORMAT_0,
> +			PIXEL_FORMAT, T_V16U16Y16A16), 8},
> +	{FIELD_ENUM(CDMA_D_DATAIN_FORMAT_0,
> +			PIXEL_FORMAT, T_A16Y16U16V16_F), 8},
> +	{FIELD_ENUM(CDMA_D_DATAIN_FORMAT_0,
> +			PIXEL_FORMAT, T_A8B8G8R8), 4},
> +	{FIELD_ENUM(CDMA_D_DATAIN_FORMAT_0,
> +			PIXEL_FORMAT, T_A8R8G8B8), 4},
> +	{FIELD_ENUM(CDMA_D_DATAIN_FORMAT_0,
> +			PIXEL_FORMAT, T_B8G8R8A8), 4},
> +	{FIELD_ENUM(CDMA_D_DATAIN_FORMAT_0,
> +			PIXEL_FORMAT, T_R8G8B8A8), 4},
> +	{FIELD_ENUM(CDMA_D_DATAIN_FORMAT_0,
> +			PIXEL_FORMAT, T_X8B8G8R8), 4},
> +	{FIELD_ENUM(CDMA_D_DATAIN_FORMAT_0,
> +			PIXEL_FORMAT, T_X8R8G8B8), 4},
> +	{FIELD_ENUM(CDMA_D_DATAIN_FORMAT_0,
> +			PIXEL_FORMAT, T_B8G8R8X8), 4},
> +	{FIELD_ENUM(CDMA_D_DATAIN_FORMAT_0,
> +			PIXEL_FORMAT, T_R8G8B8X8), 4},
> +	{FIELD_ENUM(CDMA_D_DATAIN_FORMAT_0,
> +			PIXEL_FORMAT, T_A2B10G10R10), 4},
> +	{FIELD_ENUM(CDMA_D_DATAIN_FORMAT_0,
> +			PIXEL_FORMAT, T_A2R10G10B10), 4},
> +	{FIELD_ENUM(CDMA_D_DATAIN_FORMAT_0,
> +			PIXEL_FORMAT, T_B10G10R10A2), 4},
> +	{FIELD_ENUM(CDMA_D_DATAIN_FORMAT_0,
> +			PIXEL_FORMAT, T_R10G10B10A2), 4},
> +	{FIELD_ENUM(CDMA_D_DATAIN_FORMAT_0,
> +			PIXEL_FORMAT, T_A2Y10U10V10), 4},
> +	{FIELD_ENUM(CDMA_D_DATAIN_FORMAT_0,
> +			PIXEL_FORMAT, T_V10U10Y10A2), 4},
> +	{FIELD_ENUM(CDMA_D_DATAIN_FORMAT_0,
> +			PIXEL_FORMAT, T_A8Y8U8V8), 4},
> +	{FIELD_ENUM(CDMA_D_DATAIN_FORMAT_0,
> +			PIXEL_FORMAT, T_V8U8Y8A8), 4},
> +	{FIELD_ENUM(CDMA_D_DATAIN_FORMAT_0,
> +			PIXEL_FORMAT, T_Y8___U8V8_N444), 1},
> +	{FIELD_ENUM(CDMA_D_DATAIN_FORMAT_0,
> +			PIXEL_FORMAT, T_Y8___V8U8_N444), 1},
> +	{FIELD_ENUM(CDMA_D_DATAIN_FORMAT_0,
> +			PIXEL_FORMAT, T_Y10___U10V10_N444), 2},
> +	{FIELD_ENUM(CDMA_D_DATAIN_FORMAT_0,
> +			PIXEL_FORMAT, T_Y10___V10U10_N444), 2},
> +	{FIELD_ENUM(CDMA_D_DATAIN_FORMAT_0,
> +			PIXEL_FORMAT, T_Y12___U12V12_N444), 2},
> +	{FIELD_ENUM(CDMA_D_DATAIN_FORMAT_0,
> +			PIXEL_FORMAT, T_Y12___V12U12_N444), 2},
> +	{FIELD_ENUM(CDMA_D_DATAIN_FORMAT_0,
> +			PIXEL_FORMAT, T_Y16___U16V16_N444), 2},
> +	{FIELD_ENUM(CDMA_D_DATAIN_FORMAT_0,
> +			PIXEL_FORMAT, T_Y16___V16U16_N444), 2},
> +	{FIELD_ENUM(CDMA_D_DATAIN_FORMAT_0,
> +			DATAIN_FORMAT, FEATURE), 2},
> +	{FIELD_ENUM(CDMA_D_DATAIN_FORMAT_0,
> +			DATAIN_FORMAT, PIXEL), 1},
> +};
> +
> +static const uint8_t map_pixel[] = {
> +	FIELD_ENUM(CDMA_D_DATAIN_FORMAT_0, PIXEL_MAPPING, PITCH_LINEAR),
> +};
> +
> +static const uint8_t map_ram[] = {
> +	FIELD_ENUM(CDMA_D_DAIN_RAM_TYPE_0, DATAIN_RAM_TYPE, MCIF),
> +	FIELD_ENUM(CDMA_D_DAIN_RAM_TYPE_0, DATAIN_RAM_TYPE, CVIF),
> +};
> +
> +static const uint8_t map_mean[] = {
> +	FIELD_ENUM(CDMA_D_MEAN_FORMAT_0, MEAN_FORMAT, DISABLE),
> +	FIELD_ENUM(CDMA_D_MEAN_FORMAT_0, MEAN_FORMAT, ENABLE),
> +};
> +
> +static uint32_t
> +get_in_format(uint8_t format)
> +{
> +	uint32_t in_format = 0;
> +
> +	if (format >= FORMAT_T_R8 && format < FORMAT_FEATURE) {
> +		in_format = FIELD_ENUM(CDMA_D_DATAIN_FORMAT_0,
> +						DATAIN_FORMAT, PIXEL);
> +	} else if (format == FORMAT_FEATURE) {
> +		in_format = FIELD_ENUM(CDMA_D_DATAIN_FORMAT_0,
> +						DATAIN_FORMAT, FEATURE);
> +	}
> +
> +	return in_format;
> +}
> +
> +void
> +dla_conv_set_producer(struct dla_engine *engine, int32_t group_id, int32_t rdma_group_id)
> +{
> +	uint32_t reg;
> +
> +	/* set producer pointer for all sub-modules */
> +	reg = group_id << SHIFT(CACC_S_POINTER_0, PRODUCER);
> +	cacc_reg_write(engine, S_POINTER, reg);
> +	cmac_a_reg_write(engine, S_POINTER, reg);
> +	cmac_b_reg_write(engine, S_POINTER, reg);
> +	csc_reg_write(engine, S_POINTER, reg);
> +	cdma_reg_write(engine, S_POINTER, reg);
> +}
> +
> +int
> +dla_conv_enable(struct dla_engine *engine, struct dla_processor_group *group)
> +{
> +	uint32_t reg;
> +
> +	do {
> +		reg = cdma_reg_read(engine, S_CBUF_FLUSH_STATUS);
> +	} while (!(reg & MASK(CDMA_S_CBUF_FLUSH_STATUS_0, FLUSH_DONE)));
> +
> +	/* enable all sub-modules */
> +	reg = FIELD_ENUM(CACC_D_OP_ENABLE_0, OP_EN, ENABLE);
> +	cacc_reg_write(engine, D_OP_ENABLE, reg);
> +	cmac_a_reg_write(engine, D_OP_ENABLE, reg);
> +	cmac_b_reg_write(engine, D_OP_ENABLE, reg);
> +	csc_reg_write(engine, D_OP_ENABLE, reg);
> +	cdma_reg_write(engine, D_OP_ENABLE, reg);
> +
> +	return 0;
> +}
> +
> +void
> +dla_conv_rdma_check(struct dla_processor_group *group)
> +{
> +	group->is_rdma_needed = 0;
> +}
> +
> +static int32_t
> +processor_conv_program(struct dla_engine *engine, struct dla_processor_group *group)
> +{
> +	int32_t ret = 0;
> +	uint32_t reg, high, low, shift, mask;
> +	uint32_t stride_x, stride_y, pad_x, pad_y;
> +	uint64_t weight_address = 0;
> +	uint64_t wmb_address = 0;
> +	uint64_t wgs_address = 0;
> +	uint64_t input_address = 0;
> +	uint64_t output_address = 0;
> +	uint32_t atom_size = 0;
> +	bool weight_compress_support = false;
> +	struct dla_conv_op_desc *conv_op;
> +	struct dla_conv_surface_desc *conv_surface;
> +
> +	weight_compress_support = engine->config_data->weight_compress_support;
> +	atom_size = engine->config_data->atom_size;
> +	conv_op = &group->operation_desc->conv_op;
> +	conv_surface = &group->surface_desc->conv_surface;
> +
> +	if (conv_op->weight_format == WEIGHT_FORMAT_COMPRESSED) {
> +		ASSERT_GOTO((weight_compress_support), ret, -EINVAL, exit);
> +		ASSERT_GOTO((conv_surface->wmb_data.address != -1),
> +			ret, -EINVAL, exit);
> +		dla_get_dma_cube_address(engine->driver_context,
> +								 engine->task->task_data,
> +								 conv_surface->wmb_data.address,
> +								 conv_surface->wmb_data.offset,
> +								 (void *)&wmb_address,
> +								 DESTINATION_DMA);
> +
> +		ASSERT_GOTO((conv_surface->wgs_data.address != -1),
> +			ret, -EINVAL, exit);
> +		dla_get_dma_cube_address(engine->driver_context,
> +								 engine->task->task_data,
> +								 conv_surface->wgs_data.address,
> +								 conv_surface->wgs_data.offset,
> +								 (void *)&wgs_address,
> +								 DESTINATION_DMA);
> +	}
> +
> +	if (conv_surface->weight_data.address != -1) {
> +		dla_get_dma_cube_address(engine->driver_context,
> +								 engine->task->task_data,
> +								 conv_surface->weight_data.address,
> +								 conv_surface->weight_data.offset,
> +								 (void *)&weight_address,
> +								 DESTINATION_DMA);
> +	}
> +
> +	if (conv_surface->dst_data.address != -1) {
> +		dla_get_dma_cube_address(engine->driver_context,
> +								 engine->task->task_data,
> +								 conv_surface->dst_data.address,
> +								 conv_surface->dst_data.offset,
> +								 (void *)&output_address,
> +								 DESTINATION_DMA);
> +	}
> +
> +	ret = dla_read_input_address(engine, &conv_surface->src_data, &input_address,
> +								 group->op_desc->index,
> +								 group->roi_index,
> +								 map_img_fmt[conv_op->data_format][1]);
> +	if (ret)
> +		goto exit;
> +
> +	ASSERT_GOTO((conv_op->out_cvt.scale  == 1), ret, -EINVAL, exit);
> +	ASSERT_GOTO((conv_op->out_cvt.offset == 0), ret, -EINVAL, exit);
> +
> +	/* check if the register group is idle */
> +	reg = cacc_reg_read(engine, S_STATUS);
> +	mask = group->id ? MASK(CACC_S_STATUS_0, STATUS_1) :
> +		MASK(CACC_S_STATUS_0, STATUS_0);
> +	shift = group->id ? SHIFT(CACC_S_STATUS_0, STATUS_1) :
> +		SHIFT(CACC_S_STATUS_0, STATUS_0);
> +	reg = (reg & mask) >> shift;
> +	ASSERT_GOTO((reg == FIELD_ENUM(CACC_S_STATUS_0, STATUS_0, IDLE)),
> +				ret, -EINVAL, exit);
> +
> +	reg = cmac_a_reg_read(engine, S_STATUS);
> +	mask = group->id ? MASK(CMAC_A_S_STATUS_0, STATUS_1) :
> +		MASK(CMAC_A_S_STATUS_0, STATUS_0);
> +	shift = group->id ? SHIFT(CMAC_A_S_STATUS_0, STATUS_1) :
> +		SHIFT(CMAC_A_S_STATUS_0, STATUS_0);
> +	reg = (reg & mask) >> shift;
> +	ASSERT_GOTO((reg == FIELD_ENUM(CMAC_A_S_STATUS_0, STATUS_0, IDLE)),
> +				ret, -EINVAL, exit);
> +
> +	reg = cmac_b_reg_read(engine, S_STATUS);
> +	mask = group->id ? MASK(CMAC_B_S_STATUS_0, STATUS_1) :
> +		MASK(CMAC_B_S_STATUS_0, STATUS_0);
> +	shift = group->id ? SHIFT(CMAC_B_S_STATUS_0, STATUS_1) :
> +		SHIFT(CMAC_B_S_STATUS_0, STATUS_0);
> +	reg = (reg & mask) >> shift;
> +	ASSERT_GOTO((reg == FIELD_ENUM(CMAC_B_S_STATUS_0, STATUS_0, IDLE)),
> +				ret, -EINVAL, exit);
> +
> +	reg = csc_reg_read(engine, S_STATUS);
> +	mask = group->id ? MASK(CSC_S_STATUS_0, STATUS_1) :
> +		MASK(CSC_S_STATUS_0, STATUS_0);
> +	shift = group->id ? SHIFT(CSC_S_STATUS_0, STATUS_1) :
> +		SHIFT(CSC_S_STATUS_0, STATUS_0);
> +	reg = (reg & mask) >> shift;
> +	ASSERT_GOTO((reg == FIELD_ENUM(CSC_S_STATUS_0, STATUS_0, IDLE)),
> +				ret, -EINVAL, exit);
> +
> +	reg = cdma_reg_read(engine, S_STATUS);
> +	mask = group->id ? MASK(CDMA_S_STATUS_0, STATUS_1) :
> +		MASK(CDMA_S_STATUS_0, STATUS_0);
> +	shift = group->id ? SHIFT(CDMA_S_STATUS_0, STATUS_1) :
> +		SHIFT(CDMA_S_STATUS_0, STATUS_0);
> +	reg = (reg & mask) >> shift;
> +	ASSERT_GOTO((reg == FIELD_ENUM(CDMA_S_STATUS_0, STATUS_0, IDLE)),
> +		ret, -EINVAL, exit);
> +
> +	/* reverse config each sub-module in CC */
> +
> +	/* CACC */
> +	reg = (map_conv[conv_op->conv_mode]
> +		<< SHIFT(CACC_D_MISC_CFG_0, CONV_MODE)) |
> +		(map_precision[conv_op->out_precision]
> +		<< SHIFT(CACC_D_MISC_CFG_0, PROC_PRECISION));
> +	cacc_reg_write(engine, D_MISC_CFG, reg);
> +
> +	reg = ((conv_surface->dst_data.width - 1)
> +		<< SHIFT(CACC_D_DATAOUT_SIZE_0_0, DATAOUT_WIDTH)) |
> +		((conv_surface->dst_data.height - 1)
> +		<< SHIFT(CACC_D_DATAOUT_SIZE_0_0, DATAOUT_HEIGHT));
> +	cacc_reg_write(engine, D_DATAOUT_SIZE_0, reg);
> +
> +	reg = ((conv_surface->dst_data.channel - 1)
> +		<< SHIFT(CACC_D_DATAOUT_SIZE_1_0, DATAOUT_CHANNEL));
> +	cacc_reg_write(engine, D_DATAOUT_SIZE_1, reg);
> +
> +	low = lower_32_bits(output_address);
> +	cacc_reg_write(engine, D_DATAOUT_ADDR, low);
> +	cacc_reg_write(engine, D_BATCH_NUMBER, conv_op->batch - 1);
> +	cacc_reg_write(engine, D_LINE_STRIDE, conv_surface->dst_data.line_stride);
> +	cacc_reg_write(engine, D_SURF_STRIDE, conv_surface->dst_data.surf_stride);
> +
> +	if (conv_surface->dst_data.width == 1 &&
> +				conv_surface->dst_data.height == 1) {
> +		ASSERT_GOTO((((uint32_t)conv_surface->dst_data.line_stride ==
> +			(uint32_t)(conv_surface->dst_data.width * atom_size))),
> +			ret, -EINVAL, exit);
> +		reg = (CACC_D_DATAOUT_MAP_0_LINE_PACKED_TRUE <<
> +				SHIFT(CACC_D_DATAOUT_MAP_0, LINE_PACKED));
> +		reg |= (CACC_D_DATAOUT_MAP_0_SURF_PACKED_TRUE <<
> +				SHIFT(CACC_D_DATAOUT_MAP_0, SURF_PACKED));
> +	} else {
> +		reg = (FIELD_ENUM(CACC_D_DATAOUT_MAP_0, LINE_PACKED, FALSE) <<
> +				SHIFT(CACC_D_DATAOUT_MAP_0, LINE_PACKED));
> +		reg |= (FIELD_ENUM(CACC_D_DATAOUT_MAP_0, SURF_PACKED, FALSE) <<
> +				SHIFT(CACC_D_DATAOUT_MAP_0, SURF_PACKED));
> +	}
> +	cacc_reg_write(engine, D_DATAOUT_MAP, reg);
> +
> +	cacc_reg_write(engine, D_CLIP_CFG, conv_op->out_cvt.truncate);
> +
> +	/* CMAC */
> +	reg = (map_conv[conv_op->conv_mode]
> +		<< SHIFT(CMAC_A_D_MISC_CFG_0, CONV_MODE)) |
> +		(map_precision[conv_op->out_precision]
> +		<< SHIFT(CMAC_A_D_MISC_CFG_0, PROC_PRECISION));
> +	cmac_a_reg_write(engine, D_MISC_CFG, reg);
> +	cmac_b_reg_write(engine, D_MISC_CFG, reg);
> +
> +	/* CSC */
> +	reg = (map_conv[conv_op->conv_mode]
> +		<< SHIFT(CSC_D_MISC_CFG_0, CONV_MODE)) |
> +		(map_precision[conv_op->out_precision]
> +		<< SHIFT(CSC_D_MISC_CFG_0, IN_PRECISION)) |
> +		(map_precision[conv_op->out_precision]
> +		<< SHIFT(CSC_D_MISC_CFG_0, PROC_PRECISION)) |
> +		(conv_op->data_reuse
> +		<< SHIFT(CSC_D_MISC_CFG_0, DATA_REUSE)) |
> +		(conv_op->weight_reuse
> +		<< SHIFT(CSC_D_MISC_CFG_0, WEIGHT_REUSE)) |
> +		(conv_op->skip_data_rls
> +		<< SHIFT(CSC_D_MISC_CFG_0, SKIP_DATA_RLS)) |
> +		(conv_op->skip_weight_rls
> +		<< SHIFT(CSC_D_MISC_CFG_0, SKIP_WEIGHT_RLS));
> +	csc_reg_write(engine, D_MISC_CFG, reg);
> +
> +	reg = (get_in_format(conv_op->data_format) <<
> +		SHIFT(CSC_D_DATAIN_FORMAT_0, DATAIN_FORMAT));
> +	csc_reg_write(engine, D_DATAIN_FORMAT, reg);
> +
> +	reg = ((conv_op->input_width_csc - 1)
> +		<< SHIFT(CSC_D_DATAIN_SIZE_EXT_0_0, DATAIN_WIDTH_EXT)) |
> +		((conv_op->input_height_csc - 1)
> +		<< SHIFT(CSC_D_DATAIN_SIZE_EXT_0_0, DATAIN_HEIGHT_EXT));
> +	csc_reg_write(engine, D_DATAIN_SIZE_EXT_0, reg);
> +
> +	reg = ((conv_op->input_channel_csc - 1)
> +		<< SHIFT(CSC_D_DATAIN_SIZE_EXT_1_0, DATAIN_CHANNEL_EXT));
> +	csc_reg_write(engine, D_DATAIN_SIZE_EXT_1, reg);
> +
> +	reg = ((conv_op->batch - 1)
> +		<< SHIFT(CSC_D_BATCH_NUMBER_0, BATCHES));
> +	csc_reg_write(engine, D_BATCH_NUMBER, reg);
> +	reg = ((conv_op->post_extension)
> +		<< SHIFT(CSC_D_POST_Y_EXTENSION_0, Y_EXTENSION));
> +	csc_reg_write(engine, D_POST_Y_EXTENSION, reg);
> +
> +	reg = ((conv_op->entry_per_slice - 1)
> +		<< SHIFT(CSC_D_ENTRY_PER_SLICE_0, ENTRIES));
> +	csc_reg_write(engine, D_ENTRY_PER_SLICE, reg);
> +
> +	reg = (map_weight_fmt[conv_op->weight_format]
> +		<< SHIFT(CSC_D_WEIGHT_FORMAT_0, WEIGHT_FORMAT));
> +	csc_reg_write(engine, D_WEIGHT_FORMAT, reg);
> +
> +	reg = ((conv_op->kernel_width_csc - 1)
> +		<< SHIFT(CSC_D_WEIGHT_SIZE_EXT_0_0, WEIGHT_WIDTH_EXT)) |
> +		((conv_op->kernel_height_csc - 1)
> +		<< SHIFT(CSC_D_WEIGHT_SIZE_EXT_0_0, WEIGHT_HEIGHT_EXT));
> +	csc_reg_write(engine, D_WEIGHT_SIZE_EXT_0, reg);
> +
> +	reg = ((conv_op->kernel_channel_csc - 1)
> +		<< SHIFT(CSC_D_WEIGHT_SIZE_EXT_1_0, WEIGHT_CHANNEL_EXT)) |
> +		((conv_surface->dst_data.channel - 1)
> +		<< SHIFT(CSC_D_WEIGHT_SIZE_EXT_1_0, WEIGHT_KERNEL));
> +	csc_reg_write(engine, D_WEIGHT_SIZE_EXT_1, reg);
> +
> +	csc_reg_write(engine, D_WEIGHT_BYTES, conv_surface->weight_data.size);
> +	csc_reg_write(engine, D_WMB_BYTES, conv_surface->wmb_data.size);
> +
> +	reg = ((conv_op->input_width_cmac - 1)
> +		<< SHIFT(CSC_D_DATAOUT_SIZE_0_0, DATAOUT_WIDTH)) |
> +		((conv_op->input_height_cmac - 1)
> +		<< SHIFT(CSC_D_DATAOUT_SIZE_0_0, DATAOUT_HEIGHT));
> +	csc_reg_write(engine, D_DATAOUT_SIZE_0, reg);
> +
> +	reg = ((conv_surface->dst_data.channel - 1)
> +		<< SHIFT(CSC_D_DATAOUT_SIZE_1_0, DATAOUT_CHANNEL));
> +	csc_reg_write(engine, D_DATAOUT_SIZE_1, reg);
> +
> +	reg = ((conv_surface->dst_data.width *
> +				conv_surface->dst_data.height - 1)
> +		<< SHIFT(CSC_D_ATOMICS_0, ATOMICS));
> +	csc_reg_write(engine, D_ATOMICS, reg);
> +	reg = ((conv_op->release - 1)
> +		<< SHIFT(CSC_D_RELEASE_0, RLS_SLICES));
> +	csc_reg_write(engine, D_RELEASE, reg);
> +
> +	if (conv_op->conv_mode == CONV_MODE_DIRECT) {
> +		stride_x = conv_op->conv_stride_x - 1;
> +		stride_y = conv_op->conv_stride_y - 1;
> +		pad_x = conv_op->pad_x_left;
> +		pad_y = conv_op->pad_y_top;
> +	} else {
> +		stride_x = 0;
> +		stride_y = 0;
> +		pad_x = 0;
> +		pad_y = 0;
> +	}
> +
> +	reg = (stride_x
> +		<< SHIFT(CSC_D_CONV_STRIDE_EXT_0, CONV_X_STRIDE_EXT)) |
> +		(stride_y
> +		<< SHIFT(CSC_D_CONV_STRIDE_EXT_0, CONV_Y_STRIDE_EXT));
> +	csc_reg_write(engine, D_CONV_STRIDE_EXT, reg);
> +
> +	reg = ((conv_op->dilation_x - 1)
> +		<< SHIFT(CSC_D_DILATION_EXT_0, X_DILATION_EXT)) |
> +		((conv_op->dilation_y - 1)
> +		<< SHIFT(CSC_D_DILATION_EXT_0, Y_DILATION_EXT));
> +	csc_reg_write(engine, D_DILATION_EXT, reg);
> +
> +	reg = (pad_x
> +		<< SHIFT(CSC_D_ZERO_PADDING_0, PAD_LEFT)) |
> +		(pad_y
> +		<< SHIFT(CSC_D_ZERO_PADDING_0, PAD_TOP));
> +	csc_reg_write(engine, D_ZERO_PADDING, reg);
> +
> +	reg = (conv_op->pad_val
> +		<< SHIFT(CSC_D_ZERO_PADDING_VALUE_0, PAD_VALUE)) &
> +		MASK(CSC_D_ZERO_PADDING_VALUE_0, PAD_VALUE);
> +	csc_reg_write(engine, D_ZERO_PADDING_VALUE, reg);
> +
> +	reg = ((conv_op->data_bank - 1)
> +		<< SHIFT(CSC_D_BANK_0, DATA_BANK)) |
> +		((conv_op->weight_bank - 1)
> +		<< SHIFT(CSC_D_BANK_0, WEIGHT_BANK));
> +	csc_reg_write(engine, D_BANK, reg);
> +	csc_reg_write(engine, D_PRA_CFG, conv_op->pra_truncate);
> +
> +	/* CBUF */
> +	/* there's no CBUF register */
> +
> +	/* CDMA */
> +	reg = (map_conv[conv_op->conv_mode]
> +		<< SHIFT(CDMA_D_MISC_CFG_0, CONV_MODE)) |
> +		(map_precision[conv_op->in_precision]
> +		<< SHIFT(CDMA_D_MISC_CFG_0, IN_PRECISION)) |
> +		(map_precision[conv_op->out_precision]
> +		<< SHIFT(CDMA_D_MISC_CFG_0, PROC_PRECISION)) |
> +		(conv_op->data_reuse
> +		<< SHIFT(CDMA_D_MISC_CFG_0, DATA_REUSE)) |
> +		(conv_op->weight_reuse
> +		<< SHIFT(CDMA_D_MISC_CFG_0, WEIGHT_REUSE)) |
> +		(conv_op->skip_data_rls
> +		<< SHIFT(CDMA_D_MISC_CFG_0, SKIP_DATA_RLS)) |
> +		(conv_op->skip_weight_rls
> +		<< SHIFT(CDMA_D_MISC_CFG_0, SKIP_WEIGHT_RLS));
> +	cdma_reg_write(engine, D_MISC_CFG, reg);
> +
> +	reg = (get_in_format(conv_op->data_format) <<
> +		SHIFT(CDMA_D_DATAIN_FORMAT_0, DATAIN_FORMAT)) |
> +		(map_img_fmt[conv_op->data_format][0]
> +		<< SHIFT(CDMA_D_DATAIN_FORMAT_0, PIXEL_FORMAT)) |
> +		(map_pixel[conv_op->pixel_mapping]
> +		<< SHIFT(CDMA_D_DATAIN_FORMAT_0, PIXEL_MAPPING)) |
> +		(conv_op->pixel_override
> +		<< SHIFT(CDMA_D_DATAIN_FORMAT_0, PIXEL_SIGN_OVERRIDE));
> +	cdma_reg_write(engine, D_DATAIN_FORMAT, reg);
> +
> +	reg = ((conv_surface->src_data.width - 1)
> +		<< SHIFT(CDMA_D_DATAIN_SIZE_0_0, DATAIN_WIDTH)) |
> +		((conv_surface->src_data.height - 1)
> +		<< SHIFT(CDMA_D_DATAIN_SIZE_0_0, DATAIN_HEIGHT));
> +	cdma_reg_write(engine, D_DATAIN_SIZE_0, reg);
> +
> +	reg = ((conv_surface->src_data.channel - 1)
> +		<< SHIFT(CDMA_D_DATAIN_SIZE_1_0, DATAIN_CHANNEL));
> +	cdma_reg_write(engine, D_DATAIN_SIZE_1, reg);
> +
> +	reg = ((conv_op->input_width_csc - 1)
> +		<< SHIFT(CDMA_D_DATAIN_SIZE_EXT_0_0, DATAIN_WIDTH_EXT)) |
> +		((conv_op->input_height_csc - 1)
> +		<< SHIFT(CDMA_D_DATAIN_SIZE_EXT_0_0, DATAIN_HEIGHT_EXT));
> +	cdma_reg_write(engine, D_DATAIN_SIZE_EXT_0, reg);
> +
> +	reg = (map_ram[conv_surface->src_data.type]
> +		<< SHIFT(CDMA_D_DAIN_RAM_TYPE_0, DATAIN_RAM_TYPE));
> +	cdma_reg_write(engine, D_DAIN_RAM_TYPE, reg);
> +
> +	high = upper_32_bits(input_address);
> +	low = lower_32_bits(input_address);
> +	cdma_reg_write(engine, D_DAIN_ADDR_HIGH_0, high);
> +	cdma_reg_write(engine, D_DAIN_ADDR_LOW_0, low);
> +
> +	high = upper_32_bits((input_address + conv_surface->offset_u));
> +	low = lower_32_bits(input_address + conv_surface->offset_u);
> +	cdma_reg_write(engine, D_DAIN_ADDR_HIGH_1, high);
> +	cdma_reg_write(engine, D_DAIN_ADDR_LOW_1, low);
> +
> +	cdma_reg_write(engine, D_LINE_STRIDE, conv_surface->src_data.line_stride);
> +	cdma_reg_write(engine, D_SURF_STRIDE, conv_surface->src_data.surf_stride);
> +	cdma_reg_write(engine, D_LINE_UV_STRIDE, conv_surface->in_line_uv_stride);
> +
> +	reg = ((conv_surface->src_data.line_stride ==
> +			((uint32_t)conv_surface->src_data.width * atom_size))
> +		<< SHIFT(CDMA_D_DAIN_MAP_0, LINE_PACKED));
> +	reg |= ((conv_surface->src_data.surf_stride ==
> +			((uint32_t)(conv_surface->src_data.width *
> +			conv_surface->src_data.height) * atom_size))
> +		<< SHIFT(CDMA_D_DAIN_MAP_0, SURF_PACKED));
> +	cdma_reg_write(engine, D_DAIN_MAP, reg);
> +
> +	reg = ((conv_op->batch - 1)
> +		<< SHIFT(CDMA_D_BATCH_NUMBER_0, BATCHES));
> +	cdma_reg_write(engine, D_BATCH_NUMBER, reg);
> +
> +	cdma_reg_write(engine, D_BATCH_STRIDE, conv_op->batch_stride);
> +
> +	reg = ((conv_op->entry_per_slice - 1)
> +		<< SHIFT(CDMA_D_ENTRY_PER_SLICE_0, ENTRIES));
> +	cdma_reg_write(engine, D_ENTRY_PER_SLICE, reg);
> +
> +	reg = ((conv_op->fetch_grain - 1)
> +		<< SHIFT(CDMA_D_FETCH_GRAIN_0, GRAINS));
> +	cdma_reg_write(engine, D_FETCH_GRAIN, reg);
> +
> +	reg = (map_weight_fmt[conv_op->weight_format]
> +		<< SHIFT(CDMA_D_WEIGHT_FORMAT_0, WEIGHT_FORMAT));
> +	cdma_reg_write(engine, D_WEIGHT_FORMAT, reg);
> +
> +	reg = ((conv_op->bytes_per_kernel - 1)
> +		<< SHIFT(CDMA_D_WEIGHT_SIZE_0_0, BYTE_PER_KERNEL));
> +	cdma_reg_write(engine, D_WEIGHT_SIZE_0, reg);
> +
> +	reg = ((conv_surface->dst_data.channel - 1)
> +		<< SHIFT(CDMA_D_WEIGHT_SIZE_1_0, WEIGHT_KERNEL));
> +	cdma_reg_write(engine, D_WEIGHT_SIZE_1, reg);
> +
> +	reg = (map_ram[conv_surface->weight_data.type]
> +		<< SHIFT(CDMA_D_WEIGHT_RAM_TYPE_0, WEIGHT_RAM_TYPE));
> +	cdma_reg_write(engine, D_WEIGHT_RAM_TYPE, reg);
> +
> +	high = upper_32_bits(weight_address);
> +	low = lower_32_bits(weight_address);
> +	cdma_reg_write(engine, D_WEIGHT_ADDR_HIGH, high);
> +	cdma_reg_write(engine, D_WEIGHT_ADDR_LOW, low);
> +	cdma_reg_write(engine, D_WEIGHT_BYTES, conv_surface->weight_data.size);
> +
> +	if (conv_op->weight_format == WEIGHT_FORMAT_COMPRESSED) {
> +		high = upper_32_bits(wgs_address);
> +		low = lower_32_bits(wgs_address);
> +		cdma_reg_write(engine, D_WGS_ADDR_HIGH, high);
> +		cdma_reg_write(engine, D_WGS_ADDR_LOW, low);
> +
> +		high = upper_32_bits(wmb_address);
> +		low = lower_32_bits(wmb_address);
> +		cdma_reg_write(engine, D_WMB_ADDR_HIGH, high);
> +		cdma_reg_write(engine, D_WMB_ADDR_LOW, low);
> +		cdma_reg_write(engine, D_WMB_BYTES, conv_surface->wmb_data.size);
> +	}
> +
> +	reg = (map_mean[conv_op->mean_format]
> +		<< SHIFT(CDMA_D_MEAN_FORMAT_0, MEAN_FORMAT));
> +	cdma_reg_write(engine, D_MEAN_FORMAT, reg);
> +
> +	if (conv_op->mean_format == MEAN_FORMAT_ENABLE) {
> +		reg = ((conv_op->mean_ry
> +			<< SHIFT(CDMA_D_MEAN_GLOBAL_0_0, MEAN_RY)) &
> +			MASK(CDMA_D_MEAN_GLOBAL_0_0, MEAN_RY)) |
> +			((conv_op->mean_gu
> +			<< SHIFT(CDMA_D_MEAN_GLOBAL_0_0, MEAN_GU)) &
> +			MASK(CDMA_D_MEAN_GLOBAL_0_0, MEAN_GU));
> +		cdma_reg_write(engine, D_MEAN_GLOBAL_0, reg);
> +
> +		reg = ((conv_op->mean_bv
> +			<< SHIFT(CDMA_D_MEAN_GLOBAL_1_0, MEAN_BV))&
> +			MASK(CDMA_D_MEAN_GLOBAL_1_0, MEAN_BV)) |
> +			((conv_op->mean_ax
> +			<< SHIFT(CDMA_D_MEAN_GLOBAL_1_0, MEAN_AX))&
> +			MASK(CDMA_D_MEAN_GLOBAL_1_0, MEAN_AX));
> +		cdma_reg_write(engine, D_MEAN_GLOBAL_1, reg);
> +	}
> +
> +	if (conv_op->in_cvt.enable) {
> +		reg = ((FIELD_ENUM(CDMA_D_CVT_CFG_0, CVT_EN, ENABLE))
> +			<< SHIFT(CDMA_D_CVT_CFG_0, CVT_EN)) |
> +			(conv_op->in_cvt.truncate
> +			<< SHIFT(CDMA_D_CVT_CFG_0, CVT_TRUNCATE));
> +		cdma_reg_write(engine, D_CVT_CFG, reg);
> +		cdma_reg_write(engine, D_CVT_OFFSET, conv_op->in_cvt.offset);
> +		cdma_reg_write(engine, D_CVT_SCALE, conv_op->in_cvt.scale);
> +	} else {
> +		reg = ((FIELD_ENUM(CDMA_D_CVT_CFG_0, CVT_EN, DISABLE))
> +			<< SHIFT(CDMA_D_CVT_CFG_0, CVT_EN));
> +		cdma_reg_write(engine, D_CVT_CFG, reg);
> +	}
> +
> +	reg = ((conv_op->conv_stride_x - 1)
> +		<< SHIFT(CDMA_D_CONV_STRIDE_0, CONV_X_STRIDE)) |
> +		((conv_op->conv_stride_y - 1)
> +		<< SHIFT(CDMA_D_CONV_STRIDE_0, CONV_Y_STRIDE));
> +	cdma_reg_write(engine, D_CONV_STRIDE, reg);
> +
> +	reg = (conv_op->pad_x_left <<
> +		SHIFT(CDMA_D_ZERO_PADDING_0, PAD_LEFT)) |
> +		(conv_op->pad_x_right
> +		<< SHIFT(CDMA_D_ZERO_PADDING_0, PAD_RIGHT)) |
> +		(conv_op->pad_y_top
> +		<< SHIFT(CDMA_D_ZERO_PADDING_0, PAD_TOP)) |
> +		(conv_op->pad_y_bottom
> +		<< SHIFT(CDMA_D_ZERO_PADDING_0, PAD_BOTTOM));
> +	cdma_reg_write(engine, D_ZERO_PADDING,   reg);
> +
> +	reg = conv_op->pad_val <<
> +		SHIFT(CDMA_D_ZERO_PADDING_VALUE_0, PAD_VALUE) &
> +		MASK(CDMA_D_ZERO_PADDING_VALUE_0, PAD_VALUE);
> +	cdma_reg_write(engine, D_ZERO_PADDING_VALUE, reg);
> +	reg = ((conv_op->weight_bank - 1)
> +		<< SHIFT(CDMA_D_BANK_0, WEIGHT_BANK)) |
> +		((conv_op->data_bank - 1)
> +		<< SHIFT(CDMA_D_BANK_0, DATA_BANK));
> +	cdma_reg_write(engine, D_BANK, reg);
> +
> +exit:
> +	return ret;
> +}
> +
> +int
> +dla_conv_is_ready(struct dla_processor *processor,
> +				  struct dla_processor_group *group)
> +{
> +	return 1;
> +}
> +
> +void
> +dla_conv_dump_config(struct dla_processor_group *group)
> +{
> +	struct dla_conv_op_desc *conv_op;
> +	struct dla_conv_surface_desc *conv_surface;
> +
> +	conv_surface = &group->surface_desc->conv_surface;
> +	conv_op = &group->operation_desc->conv_op;
> +}
> +
> +int
> +dla_conv_program(struct dla_engine *engine, struct dla_processor_group *group)
> +{
> +	int32_t ret;
> +
> +	ret = processor_conv_program(engine, group);
> +	if (ret)
> +		goto exit;
> +
> +exit:
> +	return ret;
> +}
> diff --git a/drivers/gpu/drm/nvdla/nvdla_drm.c b/drivers/gpu/drm/nvdla/nvdla_drm.c
> new file mode 100644
> index 000000000000..9217eee1de3b
> --- /dev/null
> +++ b/drivers/gpu/drm/nvdla/nvdla_drm.c
> @@ -0,0 +1,695 @@
> +// SPDX-License-Identifier: BSD-3-Clause OR GPL-2.0
> +/*
> + * Copyright (C) 2017-2018 NVIDIA CORPORATION
> + * Copyright (C) 2022 Cai Huoqing
> + */
> +
> +#include <linux/dma-buf.h>
> +#include <linux/dma-mapping.h>
> +#include <linux/fs.h>
> +#include <linux/interrupt.h>
> +#include <linux/irq.h>
> +#include <linux/irqdomain.h>
> +#include <linux/module.h>
> +#include <linux/of.h>
> +#include <linux/of_device.h>
> +#include <linux/of_irq.h>
> +#include <linux/of_platform.h>
> +#include <linux/platform_device.h>
> +#include <linux/printk.h>
> +#include <linux/slab.h>
> +#include <linux/spinlock.h>
> +#include <linux/time.h>
> +#include <linux/uaccess.h>
> +#include <linux/types.h>
> +
> +#include "nvdla_drm.h"
> +#include "nvdla_ioctl.h"
> +#include "nvdla_engine.h"
> +
> +static struct nvdla_config nvdla_config_os_initial = {
> +	.atom_size = 32,
> +	.bdma_enable = true,
> +	.rubik_enable = true,
> +	.weight_compress_support = true,
> +};
> +
> +static struct nvdla_config nvdla_config_small = {
> +	//.atom_size = 8,
> +	.atom_size = 32,  // nv_large config
> +	.bdma_enable = false,
> +	.rubik_enable = false,
> +	.weight_compress_support = false,
> +};
> +
> +int64_t dla_get_time_us(void)
> +{
> +	return ktime_get_ns() / NSEC_PER_USEC;
> +}
> +
> +void dla_reg_write(void *driver_context, uint32_t addr, uint32_t reg)
> +{
> +	struct nvdla_device *nvdla_dev =
> +			(struct nvdla_device *)driver_context;
> +
> +	if (!nvdla_dev)
> +		return;
> +
> +	writel(reg, nvdla_dev->base + addr);
> +}
> +
> +uint32_t dla_reg_read(void *driver_context, uint32_t addr)
> +{
> +	struct nvdla_device *nvdla_dev =
> +			(struct nvdla_device *)driver_context;
> +
> +	if (!nvdla_dev)
> +		return 0;
> +
> +	return readl(nvdla_dev->base + addr);
> +}
> +
> +static irqreturn_t nvdla_engine_isr(int32_t irq, void *data)
> +{
> +	unsigned long flags;
> +	uint32_t mask;
> +	uint32_t reg;
> +	struct dla_processor *processor = NULL;
> +	struct dla_processor_group *group;
> +	struct dla_engine *engine;
> +	struct nvdla_device *nvdla_dev = (struct nvdla_device *)data;
> +
> +	if (!nvdla_dev)
> +		return IRQ_NONE;
> +
> +	engine = nvdla_dev->engine_context;
> +	spin_lock_irqsave(&nvdla_dev->nvdla_lock, flags);
> +
> +	mask = glb_reg_read(engine, S_INTR_MASK);
> +	reg = glb_reg_read(engine, S_INTR_STATUS);
> +
> +	if (reg & MASK(GLB_S_INTR_STATUS_0, CACC_DONE_STATUS0)) {
> +		processor = &engine->processors[DLA_OP_CONV];
> +		group = &processor->groups[0];
> +		group->events |= (1 << DLA_EVENT_OP_COMPLETED);
> +	}
> +	if (reg & MASK(GLB_S_INTR_STATUS_0, CACC_DONE_STATUS1)) {
> +		processor = &engine->processors[DLA_OP_CONV];
> +		group = &processor->groups[1];
> +		group->events |= (1 << DLA_EVENT_OP_COMPLETED);
> +	}
> +	if (reg & MASK(GLB_S_INTR_STATUS_0, SDP_DONE_STATUS0)) {
> +		processor = &engine->processors[DLA_OP_SDP];
> +		group = &processor->groups[0];
> +		group->events |= (1 << DLA_EVENT_OP_COMPLETED);
> +	}
> +	if (reg & MASK(GLB_S_INTR_STATUS_0, SDP_DONE_STATUS1)) {
> +		processor = &engine->processors[DLA_OP_SDP];
> +		group = &processor->groups[1];
> +		group->events |= (1 << DLA_EVENT_OP_COMPLETED);
> +	}
> +	if (reg & MASK(GLB_S_INTR_STATUS_0, CDP_DONE_STATUS0)) {
> +		processor = &engine->processors[DLA_OP_CDP];
> +		group = &processor->groups[0];
> +		group->events |= (1 << DLA_EVENT_OP_COMPLETED);
> +	}
> +	if (reg & MASK(GLB_S_INTR_STATUS_0, CDP_DONE_STATUS1)) {
> +		processor = &engine->processors[DLA_OP_CDP];
> +		group = &processor->groups[1];
> +		group->events |= (1 << DLA_EVENT_OP_COMPLETED);
> +	}
> +	if (reg & MASK(GLB_S_INTR_STATUS_0, RUBIK_DONE_STATUS0)) {
> +		processor = &engine->processors[DLA_OP_RUBIK];
> +		group = &processor->groups[0];
> +		group->events |= (1 << DLA_EVENT_OP_COMPLETED);
> +	}
> +	if (reg & MASK(GLB_S_INTR_STATUS_0, RUBIK_DONE_STATUS1)) {
> +		processor = &engine->processors[DLA_OP_RUBIK];
> +		group = &processor->groups[1];
> +		group->events |= (1 << DLA_EVENT_OP_COMPLETED);
> +	}
> +	if (reg & MASK(GLB_S_INTR_STATUS_0, PDP_DONE_STATUS0)) {
> +		processor = &engine->processors[DLA_OP_PDP];
> +		group = &processor->groups[0];
> +		group->events |= (1 << DLA_EVENT_OP_COMPLETED);
> +	}
> +	if (reg & MASK(GLB_S_INTR_STATUS_0, PDP_DONE_STATUS1)) {
> +		processor = &engine->processors[DLA_OP_PDP];
> +		group = &processor->groups[1];
> +		group->events |= (1 << DLA_EVENT_OP_COMPLETED);
> +	}
> +	if (reg & MASK(GLB_S_INTR_STATUS_0, BDMA_DONE_STATUS0)) {
> +		processor = &engine->processors[DLA_OP_BDMA];
> +		group = &processor->groups[0];
> +		group->events |= (1 << DLA_EVENT_OP_COMPLETED);
> +	}
> +	if (reg & MASK(GLB_S_INTR_STATUS_0, BDMA_DONE_STATUS1)) {
> +		processor = &engine->processors[DLA_OP_BDMA];
> +		group = &processor->groups[1];
> +		group->events |= (1 << DLA_EVENT_OP_COMPLETED);
> +	}
> +	if (reg & MASK(GLB_S_INTR_STATUS_0, CDMA_DAT_DONE_STATUS0)) {
> +		processor = &engine->processors[DLA_OP_CONV];
> +		group = &processor->groups[0];
> +		group->events |= (1 << DLA_EVENT_CDMA_DT_DONE);
> +	}
> +	if (reg & MASK(GLB_S_INTR_STATUS_0, CDMA_DAT_DONE_STATUS1)) {
> +		processor = &engine->processors[DLA_OP_CONV];
> +		group = &processor->groups[1];
> +		group->events |= (1 << DLA_EVENT_CDMA_DT_DONE);
> +	}
> +	if (reg & MASK(GLB_S_INTR_STATUS_0, CDMA_WT_DONE_STATUS0)) {
> +		processor = &engine->processors[DLA_OP_CONV];
> +		group = &processor->groups[0];
> +		group->events |= (1 << DLA_EVENT_CDMA_WT_DONE);
> +	}
> +	if (reg & MASK(GLB_S_INTR_STATUS_0, CDMA_WT_DONE_STATUS1)) {
> +		processor = &engine->processors[DLA_OP_CONV];
> +		group = &processor->groups[1];
> +		group->events |= (1 << DLA_EVENT_CDMA_WT_DONE);
> +	}
> +
> +	glb_reg_write(engine, S_INTR_STATUS, reg);
> +	mask = glb_reg_read(engine, S_INTR_MASK);
> +	reg = glb_reg_read(engine, S_INTR_STATUS);
> +
> +	complete(&nvdla_dev->event_notifier);
> +	spin_unlock_irqrestore(&nvdla_dev->nvdla_lock, flags);
> +
> +	return IRQ_HANDLED;
> +}
> +
> +static int32_t dla_read_dma_address(void *driver_context, void *task_data,
> +						int16_t index, void *dst)
> +{
> +	int32_t ret = 0;
> +	struct nvdla_mem_handle *handles;
> +	dma_addr_t *phys_addr = (dma_addr_t *)(dst);
> +	struct nvdla_device *nvdla_dev =
> +			(struct nvdla_device *)driver_context;
> +	struct nvdla_task *task = (struct nvdla_task *)task_data;
> +
> +	if (index == -1 || index > task->num_addresses)
> +		return -EINVAL;
> +
> +	handles = (struct nvdla_mem_handle *)task->address_list;
> +	ret = nvdla_gem_dma_addr(nvdla_dev->drm, task->file,
> +					handles[index].handle,
> +					phys_addr);
> +
> +	/* Add offset to IOVA address */
> +	*phys_addr = *phys_addr + handles[index].offset;
> +
> +	return ret;
> +}
> +
> +static int32_t dla_read_cpu_address(void *driver_context, void *task_data,
> +						int16_t index, void *dst)
> +{
> +	uint64_t *temp = (uint64_t *)dst;
> +	struct nvdla_task *task = (struct nvdla_task *)task_data;
> +
> +	if (index == -1 || index > task->num_addresses)
> +		return -EINVAL;
> +
> +	*temp = (uint64_t)index;
> +	return 0;
> +}
> +
> +int32_t dla_get_dma_address(void *driver_context, void *task_data,
> +					int16_t index, void *dst_ptr,
> +					uint32_t destination)
> +{
> +	int32_t ret = 0;
> +
> +	if (destination == DESTINATION_PROCESSOR) {
> +		ret = dla_read_cpu_address(driver_context, task_data,
> +						index, dst_ptr);
> +	} else if (destination == DESTINATION_DMA) {
> +		ret = dla_read_dma_address(driver_context, task_data,
> +						index, dst_ptr);
> +	} else {
> +		ret = -EINVAL;
> +	}
> +
> +	return ret;
> +}
> +
> +int32_t dla_data_write(void *driver_context, void *task_data,
> +				void *src, uint64_t dst,
> +				uint32_t size, uint64_t offset)
> +{
> +	int32_t ret;
> +	void *ptr = NULL;
> +	struct dma_buf *buf;
> +	struct iosys_map map;
> +	struct nvdla_mem_handle *handles;
> +	struct nvdla_task *task = (struct nvdla_task *)task_data;
> +
> +	handles = task->address_list;
> +	buf = dma_buf_get(handles[dst].handle);
> +	if (IS_ERR(buf)) {
> +		pr_err("%s: Failed get dma_buf for handle=%d\n", __func__,
> +						handles[dst].handle);
> +		return -EFAULT;
> +	}
> +
> +	ret = dma_buf_begin_cpu_access(buf, DMA_BIDIRECTIONAL);
> +	if (ret)
> +		goto put_dma_buf;
> +
> +	ret = dma_buf_vmap(buf, &map);
> +	ptr = ret ? NULL : map.vaddr;
> +	if (!ptr) {
> +		pr_err("%s: Failed to vmap dma_buf for handle=%d\n", __func__,
> +						handles[dst].handle);
> +		ret = -ENOMEM;
> +		goto end_cpu_access;
> +	}
> +
> +
> +	memcpy((void *)((uint8_t *)ptr + offset), src, size);
> +
> +	dma_buf_vunmap(buf, ptr);
> +
> +end_cpu_access:
> +	dma_buf_end_cpu_access(buf, DMA_BIDIRECTIONAL);
> +
> +put_dma_buf:
> +	dma_buf_put(buf);
> +
> +	return ret;
> +}
> +
> +int32_t dla_data_read(void *driver_context, void *task_data,
> +				uint64_t src, void *dst,
> +				uint32_t size, uint64_t offset)
> +{
> +	int32_t ret;
> +	void *ptr = NULL;
> +	struct dma_buf *buf;
> +	struct iosys_map map;
> +	struct nvdla_mem_handle *handles;
> +	struct nvdla_task *task = (struct nvdla_task *)task_data;
> +
> +	handles = task->address_list;
> +
> +	buf = dma_buf_get(handles[src].handle);
> +	if (IS_ERR(buf)) {
> +		pr_err("%s: Failed get dma_buf for handle=%d\n", __func__,
> +						handles[src].handle);
> +		return -EFAULT;
> +	}
> +
> +	ret = dma_buf_begin_cpu_access(buf, DMA_BIDIRECTIONAL);
> +	if (ret)
> +		goto put_dma_buf;
> +
> +	ret = dma_buf_vmap(buf, &map);
> +	ptr = ret ? NULL : map.vaddr;
> +	if (!ptr) {
> +		pr_err("%s: Failed to vmap dma_buf for handle=%d\n", __func__,
> +						handles[src].handle);
> +		ret = -ENOMEM;
> +		goto end_cpu_access;
> +	}
> +
> +	memcpy(dst, (void *)(((uint8_t *)ptr) + offset), size);
> +
> +	dma_buf_vunmap(buf, ptr);
> +
> +end_cpu_access:
> +	dma_buf_end_cpu_access(buf, DMA_BIDIRECTIONAL);
> +
> +put_dma_buf:
> +	dma_buf_put(buf);
> +
> +	return ret;
> +}
> +
> +int32_t nvdla_task_submit(struct nvdla_device *nvdla_dev, struct nvdla_task *task)
> +{
> +	int32_t err = 0;
> +	uint32_t task_complete = 0;
> +
> +	//trace_printk("__nvdla_task_submit_entry\n");
> +	nvdla_dev->task = task;
> +
> +	err = dla_execute_task(nvdla_dev->engine_context, (void *)task, nvdla_dev->config_data);
> +	if (err) {
> +		pr_err("Task execution failed\n");
> +		return err;
> +	}
> +
> +	pr_debug("Wait for task complete\n");
> +
> +	while (1) {
> +		unsigned long flags;
> +
> +		wait_for_completion(&nvdla_dev->event_notifier);
> +
> +		spin_lock_irqsave(&nvdla_dev->nvdla_lock, flags);
> +
> +		err = dla_process_events(nvdla_dev->engine_context, &task_complete);
> +
> +		spin_unlock_irqrestore(&nvdla_dev->nvdla_lock, flags);
> +
> +		if (err || task_complete)
> +			break;
> +	}
> +
> +	pr_debug("Task complete\n");
> +	dla_clear_task(nvdla_dev->engine_context);
> +	//trace_printk("__nvdla_task_submit_exit\n");
> +
> +	return err;
> +}
> +
> +static union dla_operation_container operation_desc[DLA_OP_NUM][DLA_NUM_GROUPS];
> +static union dla_surface_container surface_desc[DLA_OP_NUM][DLA_NUM_GROUPS];
> +
> +static struct dla_task global_task;
> +
> +static struct dla_engine engine = {
> +	.processors[DLA_OP_BDMA] = {
> +		.name = "BDMA",
> +		.op_type = DLA_OP_BDMA,
> +		.program = dla_bdma_program,
> +		.enable = dla_bdma_enable,
> +		.set_producer = dla_bdma_set_producer,
> +		.is_ready = dla_bdma_is_ready,
> +		.dump_config = dla_bdma_dump_config,
> +		.rdma_check = dla_bdma_rdma_check,
> +		.consumer_ptr = 0,
> +		.roi_index = 0,
> +		.group_status = 0,
> +		.rdma_status = 0,
> +		.last_group = 1,
> +		.groups[0] = {
> +			.id = 0,
> +			.rdma_id = 0,
> +			.active = 0,
> +			.events = 0,
> +			.roi_index = 0,
> +			.is_rdma_needed = 0,
> +			.lut_index = -1,
> +			.operation_desc = &operation_desc[DLA_OP_BDMA][0],
> +			.surface_desc = &surface_desc[DLA_OP_BDMA][0],
> +		},
> +		.groups[1] = {
> +			.id = 1,
> +			.rdma_id = 0,
> +			.active = 0,
> +			.events = 0,
> +			.roi_index = 0,
> +			.is_rdma_needed = 0,
> +			.lut_index = -1,
> +			.operation_desc = &operation_desc[DLA_OP_BDMA][1],
> +			.surface_desc = &surface_desc[DLA_OP_BDMA][1],
> +		},
> +	},
> +	.processors[DLA_OP_CONV] = {
> +		.name = "Convolution",
> +		.op_type = DLA_OP_CONV,
> +		.program = dla_conv_program,
> +		.enable = dla_conv_enable,
> +		.set_producer = dla_conv_set_producer,
> +		.is_ready = dla_conv_is_ready,
> +		.dump_config = dla_conv_dump_config,
> +		.rdma_check = dla_conv_rdma_check,
> +		.consumer_ptr = 0,
> +		.roi_index = 0,
> +		.group_status = 0,
> +		.rdma_status = 0,
> +		.last_group = 1,
> +		.groups[0] = {
> +			.id = 0,
> +			.rdma_id = 0,
> +			.active = 0,
> +			.events = 0,
> +			.roi_index = 0,
> +			.is_rdma_needed = 0,
> +			.lut_index = -1,
> +			.operation_desc = &operation_desc[DLA_OP_CONV][0],
> +			.surface_desc = &surface_desc[DLA_OP_CONV][0],
> +		},
> +		.groups[1] = {
> +			.id = 1,
> +			.rdma_id = 0,
> +			.active = 0,
> +			.events = 0,
> +			.roi_index = 0,
> +			.is_rdma_needed = 0,
> +			.lut_index = -1,
> +			.operation_desc = &operation_desc[DLA_OP_CONV][1],
> +			.surface_desc = &surface_desc[DLA_OP_CONV][1],
> +		},
> +	},
> +	.processors[DLA_OP_SDP] = {
> +		.name = "SDP",
> +		.op_type = DLA_OP_SDP,
> +		.program = dla_sdp_program,
> +		.enable = dla_sdp_enable,
> +		.set_producer = dla_sdp_set_producer,
> +		.is_ready = dla_sdp_is_ready,
> +		.dump_config = dla_sdp_dump_config,
> +		.rdma_check = dla_sdp_rdma_check,
> +		.consumer_ptr = 0,
> +		.roi_index = 0,
> +		.group_status = 0,
> +		.rdma_status = 0,
> +		.last_group = 1,
> +		.groups[0] = {
> +			.id = 0,
> +			.rdma_id = 0,
> +			.active = 0,
> +			.events = 0,
> +			.roi_index = 0,
> +			.is_rdma_needed = 0,
> +			.lut_index = -1,
> +			.operation_desc = &operation_desc[DLA_OP_SDP][0],
> +			.surface_desc = &surface_desc[DLA_OP_SDP][0],
> +		},
> +		.groups[1] = {
> +			.id = 1,
> +			.rdma_id = 0,
> +			.active = 0,
> +			.events = 0,
> +			.roi_index = 0,
> +			.is_rdma_needed = 0,
> +			.lut_index = -1,
> +			.operation_desc = &operation_desc[DLA_OP_SDP][1],
> +			.surface_desc = &surface_desc[DLA_OP_SDP][1],
> +		},
> +	},
> +	.processors[DLA_OP_PDP] = {
> +		.name = "PDP",
> +		.op_type = DLA_OP_PDP,
> +		.program = dla_pdp_program,
> +		.enable = dla_pdp_enable,
> +		.set_producer = dla_pdp_set_producer,
> +		.is_ready = dla_pdp_is_ready,
> +		.dump_config = dla_pdp_dump_config,
> +		.rdma_check = dla_pdp_rdma_check,
> +		.consumer_ptr = 0,
> +		.roi_index = 0,
> +		.group_status = 0,
> +		.rdma_status = 0,
> +		.last_group = 1,
> +		.groups[0] = {
> +			.id = 0,
> +			.rdma_id = 0,
> +			.active = 0,
> +			.events = 0,
> +			.roi_index = 0,
> +			.is_rdma_needed = 0,
> +			.lut_index = -1,
> +			.operation_desc = &operation_desc[DLA_OP_PDP][0],
> +			.surface_desc = &surface_desc[DLA_OP_PDP][0],
> +		},
> +		.groups[1] = {
> +			.id = 1,
> +			.rdma_id = 0,
> +			.active = 0,
> +			.events = 0,
> +			.roi_index = 0,
> +			.is_rdma_needed = 0,
> +			.lut_index = -1,
> +			.operation_desc = &operation_desc[DLA_OP_PDP][1],
> +			.surface_desc = &surface_desc[DLA_OP_PDP][1],
> +		},
> +	},
> +	.processors[DLA_OP_CDP] = {
> +		.name = "CDP",
> +		.op_type = DLA_OP_CDP,
> +		.program = dla_cdp_program,
> +		.enable = dla_cdp_enable,
> +		.set_producer = dla_cdp_set_producer,
> +		.is_ready = dla_cdp_is_ready,
> +		.dump_config = dla_cdp_dump_config,
> +		.rdma_check = dla_cdp_rdma_check,
> +		.consumer_ptr = 0,
> +		.roi_index = 0,
> +		.group_status = 0,
> +		.rdma_status = 0,
> +		.last_group = 1,
> +		.groups[0] = {
> +			.id = 0,
> +			.rdma_id = 0,
> +			.active = 0,
> +			.events = 0,
> +			.roi_index = 0,
> +			.is_rdma_needed = 0,
> +			.lut_index = -1,
> +			.operation_desc = &operation_desc[DLA_OP_CDP][0],
> +			.surface_desc = &surface_desc[DLA_OP_CDP][0],
> +		},
> +		.groups[1] = {
> +			.id = 1,
> +			.rdma_id = 0,
> +			.active = 0,
> +			.events = 0,
> +			.roi_index = 0,
> +			.is_rdma_needed = 0,
> +			.lut_index = -1,
> +			.operation_desc = &operation_desc[DLA_OP_CDP][1],
> +			.surface_desc = &surface_desc[DLA_OP_CDP][1],
> +		},
> +	},
> +
> +	.processors[DLA_OP_RUBIK] = {
> +		.name = "RUBIK",
> +		.op_type = DLA_OP_RUBIK,
> +		.program = dla_rubik_program,
> +		.enable = dla_rubik_enable,
> +		.set_producer = dla_rubik_set_producer,
> +		.is_ready = dla_rubik_is_ready,
> +		.dump_config = dla_rubik_dump_config,
> +		.rdma_check = dla_rubik_rdma_check,
> +		.consumer_ptr = 0,
> +		.roi_index = 0,
> +		.group_status = 0,
> +		.rdma_status = 0,
> +		.last_group = 1,
> +		.groups[0] = {
> +			.id = 0,
> +			.rdma_id = 0,
> +			.active = 0,
> +			.events = 0,
> +			.roi_index = 0,
> +			.is_rdma_needed = 0,
> +			.lut_index = -1,
> +			.operation_desc = &operation_desc[DLA_OP_RUBIK][0],
> +			.surface_desc = &surface_desc[DLA_OP_RUBIK][0],
> +		},
> +		.groups[1] = {
> +			.id = 1,
> +			.rdma_id = 0,
> +			.active = 0,
> +			.events = 0,
> +			.roi_index = 0,
> +			.is_rdma_needed = 0,
> +			.lut_index = -1,
> +			.operation_desc = &operation_desc[DLA_OP_RUBIK][1],
> +			.surface_desc = &surface_desc[DLA_OP_RUBIK][1],
> +		},
> +	},
> +
> +};
> +
> +/* driver probe and init */
> +static const struct of_device_id nvdla_of_match[] = {
> +	{
> +		.compatible = "nvidia,nvdla_os_initial",
> +		.data = &nvdla_config_os_initial,
> +	},
> +	{
> +		.compatible = "nvidia,nvdla_2",
> +		.data = &nvdla_config_small,
> +	},
> +	{ },
> +};
> +
> +static int32_t nvdla_probe(struct platform_device *pdev)
> +{
> +	int32_t err = 0;
> +	struct resource *res;
> +	struct nvdla_device *nvdla_dev;
> +	struct device *dev = &pdev->dev;
> +	const struct of_device_id *match;
> +
> +	if (!pdev->dev.of_node)
> +		return -EINVAL;
> +
> +	match = of_match_device(nvdla_of_match, &pdev->dev);
> +	if (!match) {
> +		pr_err("Missing DT entry!\n");
> +		return -EINVAL;
> +	}
> +
> +	nvdla_dev = devm_kzalloc(dev, sizeof(*nvdla_dev), GFP_KERNEL);
> +	if (!nvdla_dev)
> +		return -ENOMEM;
> +
> +	platform_set_drvdata(pdev, nvdla_dev);
> +	nvdla_dev->pdev = pdev;
> +	nvdla_dev->config_data = (struct nvdla_config *)match->data;
> +
> +	init_completion(&nvdla_dev->event_notifier);
> +
> +	res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
> +	nvdla_dev->base = devm_ioremap_resource(&pdev->dev, res);
> +	if (IS_ERR(nvdla_dev->base))
> +		return PTR_ERR(nvdla_dev->base);
> +
> +	res = platform_get_resource(pdev, IORESOURCE_IRQ, 0);
> +	if (!res) {
> +		dev_err(&pdev->dev, "no irq resource\n");
> +		return -EINVAL;
> +	}
> +	nvdla_dev->irq = res->start;
> +
> +	err = devm_request_irq(&pdev->dev, nvdla_dev->irq,
> +				nvdla_engine_isr, 0,
> +				dev_name(&pdev->dev), nvdla_dev);
> +	if (err)
> +		return err;
> +
> +	nvdla_dev->engine_context = &engine;
> +	engine.task = &global_task;
> +	engine.driver_context = (void *)nvdla_dev;
> +	engine.task->task_data = NULL;
> +
> +	dla_init_op_cache(&engine);
> +	dla_clear_task(nvdla_dev->engine_context);
> +
> +	err = nvdla_drm_probe(nvdla_dev);
> +	if (err)
> +		dev_err(&pdev->dev, "failed to register drm device\n");
> +
> +	return err;
> +}
> +
> +static int32_t __exit nvdla_remove(struct platform_device *pdev)
> +{
> +	struct nvdla_device *nvdla_dev = dev_get_drvdata(&pdev->dev);
> +
> +	nvdla_drm_remove(nvdla_dev);
> +
> +	return 0;
> +}
> +
> +static struct platform_driver nvdla_driver = {
> +	.probe = nvdla_probe,
> +	.remove = __exit_p(nvdla_remove),
> +	.driver = {
> +		.owner = THIS_MODULE,
> +		.name = "NVDLA",
> +		.of_match_table = of_match_ptr(nvdla_of_match),
> +	},
> +};
> +module_platform_driver(nvdla_driver);
> +
> +MODULE_LICENSE("Dual BSD/GPL");
> +MODULE_DESCRIPTION("Nvidia Deep Learning Accelerator driver");
> +MODULE_IMPORT_NS(DMA_BUF);
> diff --git a/drivers/gpu/drm/nvdla/nvdla_drm.h b/drivers/gpu/drm/nvdla/nvdla_drm.h
> new file mode 100644
> index 000000000000..356fc399accb
> --- /dev/null
> +++ b/drivers/gpu/drm/nvdla/nvdla_drm.h
> @@ -0,0 +1,127 @@
> +/* SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause */
> +/*
> + * Copyright (C) 2017-2018 NVIDIA CORPORATION.
> + * Copyright (C) 2022 Cai Huoqing
> + */
> +
> +#ifndef __NVDLA_DRM_H_
> +#define __NVDLA_DRM_H_
> +
> +#include <linux/completion.h>
> +#include <linux/device.h>
> +#include <linux/kref.h>
> +#include <linux/platform_device.h>
> +#include <linux/spinlock.h>
> +#include <linux/errno.h>
> +#include <linux/bits.h>
> +#include <linux/types.h>
> +
> +#include "nvdla_engine.h"
> +
> +#define ASSERT_GOTO(_condition, _ret, _err_value, _goto)	   \
> +do {														   \
> +	if (!(_condition)) {									   \
> +		_ret = _err_value;									   \
> +		pr_err("%s:%d failed %d\n", __func__, __LINE__, _ret); \
> +		goto _goto;											   \
> +	} else {												   \
> +		_ret = 0;											   \
> +	}														   \
> +} while (0)
> +
> +/**
> + * @brief			Task information submitted from user space
> + *
> + * ref				Reference count for task
> + * num_addresses		Number of addresses in address list
> + * nvdla_dev			Pointer to NVDLA device
> + * address_list			Address list
> + * file				DRM file instance
> + */
> +struct nvdla_task {
> +	struct kref ref;
> +	uint32_t num_addresses;
> +	struct nvdla_device *nvdla_dev;
> +	struct nvdla_mem_handle *address_list;
> +	struct drm_file *file;
> +};
> +
> +/**
> + * @brief			Configuration parameters supported by the engine
> + *
> + * atom_size			Memory smallest access size
> + * bdma_enable			Defines whether bdma is supported
> + * rubik_enable			Defines whether rubik is supported
> + * weight_compress_support	Defines whether weight data compression is supported
> + */
> +struct nvdla_config {
> +	uint32_t atom_size;
> +	bool bdma_enable;
> +	bool rubik_enable;
> +	bool weight_compress_support;
> +};
> +
> +/**
> + * @brief			NVDLA device
> + *
> + * irq				Interrupt number associated with this device
> + * ref				Reference count for device
> + * base				IO mapped base address for device
> + * nvdla_lock			Spinlock used for synchronization
> + * drm				DRM device instance
> + * task				Pointer to task in execution
> + * config_data			Pointer to the configuration data
> + * pdev				Pointer to NVDLA platform device
> + * event_notifier		Completion object used to wait for events from HW
> + * engine_context		Private data passed from engine in dla_engine_init
> + */
> +struct nvdla_device {
> +	int32_t irq;
> +	struct kref ref;
> +	void __iomem *base;
> +	spinlock_t nvdla_lock;
> +	struct drm_device *drm;
> +	struct nvdla_task *task;
> +	struct nvdla_config *config_data;
> +	struct platform_device *pdev;
> +	struct completion event_notifier;
> +
> +	struct dla_engine *engine_context;
> +};
> +
> +int32_t nvdla_task_submit(struct nvdla_device *nvdla_dev, struct nvdla_task *task);
> +
> +int32_t nvdla_gem_dma_addr(struct drm_device *dev, struct drm_file *file,
> +					uint32_t fd, dma_addr_t *addr);
> +
> +int32_t nvdla_drm_probe(struct nvdla_device *nvdla_dev);
> +
> +void nvdla_drm_remove(struct nvdla_device *nvdla_dev);
> +
> +int32_t dla_process_events(struct dla_engine *engine_context, uint32_t *task_complete);
> +
> +void dla_clear_task(struct dla_engine *engine_context);
> +
> +int32_t dla_execute_task(struct dla_engine *engine_context, void *task_data, void *config_data);
> +
> +uint32_t dla_reg_read(void *driver_context, uint32_t addr);
> +
> +void dla_reg_write(void *driver_context, uint32_t addr, uint32_t reg);
> +
> +int32_t dla_data_read(void *driver_context, void *task_data,
> +				uint64_t src, void *dst,
> +				uint32_t size, uint64_t offset);
> +
> +int32_t dla_data_write(void *driver_context, void *task_data,
> +				void *src, uint64_t dst,
> +				uint32_t size, uint64_t offset);
> +
> +/* Destination for DMA buffer */
> +#define DESTINATION_PROCESSOR	0
> +#define DESTINATION_DMA		1
> +
> +int32_t dla_get_dma_address(void *driver_context, void *task_data,
> +					int16_t index, void *dst_ptr,
> +					uint32_t destination);
> +
> +#endif
> diff --git a/drivers/gpu/drm/nvdla/nvdla_engine.c b/drivers/gpu/drm/nvdla/nvdla_engine.c
> new file mode 100644
> index 000000000000..26ebd6c362b0
> --- /dev/null
> +++ b/drivers/gpu/drm/nvdla/nvdla_engine.c
> @@ -0,0 +1,233 @@
> +// SPDX-License-Identifier: BSD-3-Clause OR GPL-2.0
> +/*
> + * Copyright (C) 2017-2018 NVIDIA CORPORATION
> + * Copyright (C) 2022 Cai Huoqing
> + */
> +
> +#include "nvdla_common.h"
> +#include "nvdla_drm.h"
> +#include "nvdla_reg.h"
> +#include "nvdla_engine.h"
> +
> +static const uint32_t map_rdma_ptr_addr[] = {
> +	0xFFFFFFFF,
> +	0xFFFFFFFF,
> +	SDP_REG(RDMA_S_POINTER),
> +	PDP_REG(RDMA_S_POINTER),
> +	CDP_REG(RDMA_S_POINTER),
> +	0xFFFFFFFF,
> +};
> +
> +static const uint32_t map_sts_addr[] = {
> +	BDMA_REG(STATUS),
> +	CACC_REG(S_STATUS),
> +	SDP_REG(S_STATUS),
> +	PDP_REG(S_STATUS),
> +	CDP_REG(S_STATUS),
> +	RBK_REG(S_STATUS),
> +};
> +
> +static const uint32_t map_ptr_addr[] = {
> +	BDMA_REG(STATUS),
> +	CACC_REG(S_POINTER),
> +	SDP_REG(S_POINTER),
> +	PDP_REG(S_POINTER),
> +	CDP_REG(S_POINTER),
> +	RBK_REG(S_POINTER),
> +};
> +
> +uint32_t reg_read(struct dla_engine *engine, uint32_t addr)
> +{
> +	return dla_reg_read(engine->driver_context, addr);
> +}
> +
> +void reg_write(struct dla_engine *engine, uint32_t addr, uint32_t reg)
> +{
> +	dla_reg_write(engine->driver_context, addr, reg);
> +}
> +
> +int32_t dla_enable_intr(struct dla_engine *engine, uint32_t mask)
> +{
> +	uint32_t reg = glb_reg_read(engine, S_INTR_MASK);
> +
> +	reg = reg & (~mask);
> +	glb_reg_write(engine, S_INTR_MASK, reg);
> +
> +	return 0;
> +}
> +
> +uint8_t bdma_grp_sts[2] = {
> +	FIELD_ENUM(BDMA_STATUS_0, IDLE, YES),
> +	FIELD_ENUM(BDMA_STATUS_0, IDLE, YES)
> +};
> +
> +struct dla_roi_desc roi_desc;
> +
> +/**
> + * Get DMA data cube address
> + */
> +int32_t
> +dla_get_dma_cube_address(void *driver_context, void *task_data,
> +						 int16_t index, uint32_t offset, void *dst_ptr,
> +						 uint32_t destination)
> +{
> +	int32_t ret = 0;
> +	uint64_t *pdst = (uint64_t *)dst_ptr;
> +       ret = dla_get_dma_address(driver_context, task_data, index,
> +								dst_ptr, destination);
> +	if (ret)
> +		goto exit;
> +
> +	pdst[0] += offset;
> +
> +exit:
> +	return ret;
> +}
> +
> +/**
> + * Read input buffer address
> + *
> + * For input layer, in case of static ROI this address is read
> + * from address list and index is specified in data cube. In case
> + * dynamic ROI, it has to be read depending on ROI information
> + * and using surface address
> + *
> + * For all other layers, this address is read from address list
> + * using index specified in data cube
> + */
> +int
> +dla_read_input_address(struct dla_engine *engine, struct dla_data_cube *data,
> +					   uint64_t *address, int16_t op_index,
> +					   uint8_t roi_index, uint8_t bpp)
> +{
> +	uint64_t roi_desc_addr;
> +	int32_t ret = -EINVAL;
> +
> +	/**
> +	 * If memory type is HW then no address required
> +	 */
> +	if (data->type == DLA_MEM_HW) {
> +		ret = 0;
> +		goto exit;
> +	}
> +
> +	/**
> +	 * If address list index is not -1 means this address has to
> +	 * be read from address list
> +	 */
> +	if (data->address != -1) {
> +
> +		/**
> +		 * But if other parameters indicate that this is input layer
> +		 * for dynamic ROI then it is an error
> +		 */
> +		if (engine->network->dynamic_roi &&
> +			engine->network->input_layer == op_index)
> +			goto exit;
> +		ret = dla_get_dma_cube_address(engine->driver_context,
> +						engine->task->task_data,
> +						data->address,
> +						data->offset,
> +						(void *)address,
> +						DESTINATION_DMA);
> +		goto exit;
> +	}
> +
> +	/**
> +	 * Check if it is dynamic ROI and this is input layer
> +	 */
> +	if (engine->network->dynamic_roi && engine->network->input_layer == op_index) {
> +		if (!engine->task->surface_addr)
> +			goto exit;
> +
> +		/* Calculate address of ROI descriptor in array */
> +		roi_desc_addr = engine->task->roi_array_addr;
> +
> +		/* Read ROI descriptor */
> +		ret = dla_data_read(engine->driver_context,
> +				engine->task->task_data,
> +				roi_desc_addr,
> +				(void *)&roi_desc,
> +				sizeof(roi_desc),
> +				sizeof(struct dla_roi_array_desc) +
> +				roi_index * sizeof(struct dla_roi_desc));
> +		if (ret)
> +			goto exit;
> +
> +		/* Calculate ROI address */
> +		*address = engine->task->surface_addr;
> +		*address += (roi_desc.top * data->line_stride) +
> +						(bpp * roi_desc.left);
> +	}
> +
> +exit:
> +	return ret;
> +}
> +
> +int
> +utils_get_free_group(struct dla_engine *engine, struct dla_processor *processor,
> +					 uint8_t *group_id, uint8_t *rdma_id)
> +{
> +	int32_t ret = 0;
> +	uint32_t pointer;
> +	uint32_t hw_consumer_ptr;
> +	uint32_t hw_rdma_ptr;
> +
> +	hw_rdma_ptr = 0;
> +
> +	if (processor->op_type == DLA_OP_BDMA) {
> +		pointer = reg_read(engine, map_ptr_addr[processor->op_type]);
> +		hw_consumer_ptr = ((pointer & MASK(BDMA_STATUS_0, GRP0_BUSY)) >>
> +				SHIFT(BDMA_STATUS_0, GRP0_BUSY)) ==
> +				FIELD_ENUM(BDMA_STATUS_0, GRP0_BUSY, YES) ?
> +				1 : 0;
> +	} else {
> +		pointer = reg_read(engine, map_ptr_addr[processor->op_type]);
> +		hw_consumer_ptr = (pointer & MASK(CDP_S_POINTER_0, CONSUMER)) >>
> +				SHIFT(CDP_S_POINTER_0, CONSUMER);
> +
> +		/**
> +		 * Read current consumer pointer for RDMA only if processor
> +		 * has RDMA module
> +		 */
> +		if (map_rdma_ptr_addr[processor->op_type] != 0xFFFFFFFF) {
> +			pointer =
> +			reg_read(engine, map_rdma_ptr_addr[processor->op_type]);
> +			hw_rdma_ptr = (pointer &
> +					MASK(CDP_S_POINTER_0, CONSUMER)) >>
> +					SHIFT(CDP_S_POINTER_0, CONSUMER);
> +		}
> +	}
> +
> +	/**
> +	 * If both processors are programmed then exit
> +	 */
> +	if (processor->group_status == 0x3) {
> +		ret = -EBUSY;
> +		goto exit;
> +	}
> +
> +	if (!processor->group_status)
> +		/**
> +		 * If both groups are idle then use consumer pointer
> +		 */
> +		*group_id = hw_consumer_ptr;
> +	else
> +		/**
> +		 * Here it is assumed that only one group is idle or busy
> +		 * and hence right shift will work to get correct
> +		 * group id
> +		 */
> +		*group_id = !(processor->group_status >> 1);
> +
> +	/**
> +	 * If both groups are idle then read group id from pointer
> +	 */
> +	if (!processor->rdma_status)
> +		*rdma_id = hw_rdma_ptr;
> +	else
> +		*rdma_id = !(processor->rdma_status >> 1);
> +
> +exit:
> +	return ret;
> +}
> diff --git a/drivers/gpu/drm/nvdla/nvdla_engine.h b/drivers/gpu/drm/nvdla/nvdla_engine.h
> new file mode 100644
> index 000000000000..1976f5919543
> --- /dev/null
> +++ b/drivers/gpu/drm/nvdla/nvdla_engine.h
> @@ -0,0 +1,272 @@
> +/* SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause */
> +/*
> + * Copyright (C) 2017-2018 NVIDIA CORPORATION.
> + * Copyright (C) 2022 Cai Huoqing
> + */
> +
> +#ifndef __NVDLA_ENGINE_H_
> +#define __NVDLA_ENGINE_H_
> +
> +#include "nvdla_common.h"
> +#include "nvdla_sched.h"
> +#include "nvdla_engine.h"
> +#include "nvdla_reg.h"
> +
> +/*********************************************************/
> +/******************** Utilities **************************/
> +/*********************************************************/
> +#define MASK(reg, field)		(reg##_##field##_FIELD)
> +#define FIELD_ENUM(r, f, e)		(r##_##f##_##e)
> +#define SHIFT(reg, field)		(reg##_##field##_SHIFT)
> +
> +#define GLB_REG(name)                GLB_##name##_0
> +#define MCIF_REG(name)               MCIF_##name##_0
> +#define CVIF_REG(name)               CVIF_##name##_0
> +#define BDMA_REG(name)               BDMA_##name##_0
> +#define CDMA_REG(name)               CDMA_##name##_0
> +#define CSC_REG(name)                CSC_##name##_0
> +#define CMAC_A_REG(name)             CMAC_A_##name##_0
> +#define CMAC_B_REG(name)             CMAC_B_##name##_0
> +#define CACC_REG(name)               CACC_##name##_0
> +#define SDP_RDMA_REG(name)           SDP_RDMA_##name##_0
> +#define SDP_REG(name)                SDP_##name##_0
> +#define PDP_RDMA_REG(name)           PDP_RDMA_##name##_0
> +#define PDP_REG(name)                PDP_##name##_0
> +#define CDP_RDMA_REG(name)           CDP_RDMA_##name##_0
> +#define CDP_REG(name)                CDP_##name##_0
> +#define RBK_REG(name)                RBK_##name##_0
> +
> +/* alias for register read for each sub-module */
> +#define glb_reg_read(engine, reg)           reg_read(engine, GLB_REG(reg))
> +#define bdma_reg_read(engine, reg)          reg_read(engine, BDMA_REG(reg))
> +#define cdma_reg_read(engine, reg)          reg_read(engine, CDMA_REG(reg))
> +#define csc_reg_read(engine, reg)           reg_read(engine, CSC_REG(reg))
> +#define cmac_a_reg_read(engine, reg)        reg_read(engine, CMAC_A_REG(reg))
> +#define cmac_b_reg_read(engine, reg)        reg_read(engine, CMAC_B_REG(reg))
> +#define cacc_reg_read(engine, reg)          reg_read(engine, CACC_REG(reg))
> +#define sdp_rdma_reg_read(engine, reg)      reg_read(engine, SDP_RDMA_REG(reg))
> +#define sdp_reg_read(engine, reg)           reg_read(engine, SDP_REG(reg))
> +#define pdp_rdma_reg_read(engine, reg)      reg_read(engine, PDP_RDMA_REG(reg))
> +#define pdp_reg_read(engine, reg)           reg_read(engine, PDP_REG(reg))
> +#define cdp_rdma_reg_read(engine, reg)      reg_read(engine, CDP_RDMA_REG(reg))
> +#define cdp_reg_read(engine, reg)           reg_read(engine, CDP_REG(reg))
> +#define rubik_reg_read(engine, reg)         reg_read(engine, RBK_REG(reg))
> +
> +/* alias for register write for each sub-module */
> +#define glb_reg_write(engine, reg, val)      reg_write(engine, GLB_REG(reg), val)
> +#define bdma_reg_write(engine, reg, val)     reg_write(engine, BDMA_REG(reg), val)
> +#define cdma_reg_write(engine, reg, val)     reg_write(engine, CDMA_REG(reg), val)
> +#define csc_reg_write(engine, reg, val)      reg_write(engine, CSC_REG(reg), val)
> +#define cmac_a_reg_write(engine, reg, val)   reg_write(engine, CMAC_A_REG(reg), val)
> +#define cmac_b_reg_write(engine, reg, val)   reg_write(engine, CMAC_B_REG(reg), val)
> +#define cacc_reg_write(engine, reg, val)     reg_write(engine, CACC_REG(reg), val)
> +#define sdp_rdma_reg_write(engine, reg, val) reg_write(engine, SDP_RDMA_REG(reg), val)
> +#define sdp_reg_write(engine, reg, val)      reg_write(engine, SDP_REG(reg), val)
> +#define pdp_rdma_reg_write(engine, reg, val) reg_write(engine, PDP_RDMA_REG(reg), val)
> +#define pdp_reg_write(engine, reg, val)      reg_write(engine, PDP_REG(reg), val)
> +#define cdp_rdma_reg_write(engine, reg, val) reg_write(engine, CDP_RDMA_REG(reg), val)
> +#define cdp_reg_write(engine, reg, val)      reg_write(engine, CDP_REG(reg), val)
> +#define rubik_reg_write(engine, reg, val)    reg_write(engine, RBK_REG(reg), val)
> +
> +struct dla_processor_group {
> +	uint8_t id;
> +	uint8_t rdma_id;
> +	uint8_t active;
> +	uint8_t events;
> +	uint8_t roi_index;
> +	uint8_t is_rdma_needed;
> +	uint8_t pending;
> +	int32_t lut_index;
> +	uint8_t programming;
> +
> +	struct dla_common_op_desc *op_desc;
> +	struct dla_common_op_desc *consumers[DLA_OP_NUM];
> +	struct dla_common_op_desc *fused_parent;
> +	union dla_operation_container *operation_desc;
> +	union dla_surface_container *surface_desc;
> +};
> +
> +struct dla_processor {
> +	const char *name;
> +	uint8_t op_type;
> +	uint8_t consumer_ptr;
> +	uint8_t roi_index;
> +	uint8_t group_status;
> +	uint8_t rdma_status;
> +	uint8_t last_group;
> +
> +	struct dla_common_op_desc *tail_op;
> +	struct dla_processor_group groups[DLA_NUM_GROUPS];
> +	struct dla_engine *engine;
> +
> +	int (*is_ready)(struct dla_processor *processor,
> +				  struct dla_processor_group *group);
> +	int (*enable)(struct dla_engine *engine, struct dla_processor_group *group);
> +	int (*program)(struct dla_engine *engine, struct dla_processor_group *group);
> +	void (*set_producer)(struct dla_engine *engine, int32_t group_id, int32_t rdma_id);
> +	void (*dump_config)(struct dla_processor_group *group);
> +	void (*rdma_check)(struct dla_processor_group *group);
> +};
> +
> +struct dla_engine {
> +	struct dla_task *task;
> +	struct dla_config *config_data;
> +	struct dla_network_desc *network;
> +	struct dla_processor processors[DLA_OP_NUM];
> +
> +	uint16_t num_proc_hwl;
> +	int32_t status;
> +
> +	void *driver_context;
> +};
> +
> +void reg_write(struct dla_engine *engine, uint32_t addr, uint32_t reg);
> +uint32_t reg_read(struct dla_engine *engine, uint32_t addr);
> +
> +/**
> + * Operation descriptor cache functions
> + */
> +void
> +dla_put_op_desc(struct dla_engine *engine, struct dla_common_op_desc *op_desc);
> +struct dla_common_op_desc
> +*dla_get_op_desc(struct dla_engine *engine, struct dla_task *task,
> +			   int16_t index,
> +			   uint8_t op_type,
> +			   uint8_t roi_index);
> +void
> +dla_get_refcount(struct dla_common_op_desc *op_desc);
> +void
> +dla_init_op_cache(struct dla_engine *engine);
> +
> +/**
> + * Operation completion handler
> + */
> +int
> +dla_op_completion(struct dla_engine *engine, struct dla_processor *processor,
> +		      struct dla_processor_group *group);
> +
> +int32_t
> +dla_read_lut(struct dla_engine *engine, int16_t index, void *dst);
> +int
> +dla_enable_intr(struct dla_engine *engine, uint32_t mask);
> +int
> +utils_get_free_group(struct dla_engine *engine, struct dla_processor *processor,
> +			uint8_t *group_id,
> +			uint8_t *rdma_id);
> +int32_t
> +dla_get_dma_cube_address(void *driver_context,
> +						void *task_data,
> +						int16_t index,
> +						uint32_t offset,
> +						void *dst_ptr,
> +						uint32_t destination);
> +int
> +dla_read_input_address(struct dla_engine *engine, struct dla_data_cube *data,
> +		       uint64_t *address,
> +		       int16_t op_index,
> +		       uint8_t roi_index,
> +		       uint8_t bpp);
> +
> +/**
> + * BDMA operations
> + */
> +void
> +dla_bdma_set_producer(struct dla_engine *engine, int32_t group_id, int32_t rdma_group_id);
> +int
> +dla_bdma_enable(struct dla_engine *engine, struct dla_processor_group *group);
> +int
> +dla_bdma_program(struct dla_engine *engine, struct dla_processor_group *group);
> +int
> +dla_bdma_is_ready(struct dla_processor *processor,
> +			    struct dla_processor_group *group);
> +void
> +dla_bdma_dump_config(struct dla_processor_group *group);
> +void
> +dla_bdma_rdma_check(struct dla_processor_group *group);
> +
> +/**
> + * Convolution operations
> + */
> +void
> +dla_conv_set_producer(struct dla_engine *engine, int32_t group_id, int32_t rdma_group_id);
> +int
> +dla_conv_enable(struct dla_engine *engine, struct dla_processor_group *group);
> +int
> +dla_conv_program(struct dla_engine *engine, struct dla_processor_group *group);
> +int
> +dla_conv_is_ready(struct dla_processor *processor,
> +			    struct dla_processor_group *group);
> +void
> +dla_conv_dump_config(struct dla_processor_group *group);
> +void
> +dla_conv_rdma_check(struct dla_processor_group *group);
> +
> +/**
> + * SDP operations
> + */
> +void
> +dla_sdp_set_producer(struct dla_engine *engine, int32_t group_id, int32_t rdma_group_id);
> +int
> +dla_sdp_enable(struct dla_engine *engine, struct dla_processor_group *group);
> +int
> +dla_sdp_program(struct dla_engine *engine, struct dla_processor_group *group);
> +int
> +dla_sdp_is_ready(struct dla_processor *processor,
> +			   struct dla_processor_group *group);
> +void
> +dla_sdp_dump_config(struct dla_processor_group *group);
> +void
> +dla_sdp_rdma_check(struct dla_processor_group *group);
> +
> +/**
> + * PDP operations
> + */
> +void
> +dla_pdp_set_producer(struct dla_engine *engine, int32_t group_id, int32_t rdma_group_id);
> +int
> +dla_pdp_enable(struct dla_engine *engine, struct dla_processor_group *group);
> +int
> +dla_pdp_program(struct dla_engine *engine, struct dla_processor_group *group);
> +int
> +dla_pdp_is_ready(struct dla_processor *processor,
> +			   struct dla_processor_group *group);
> +void
> +dla_pdp_dump_config(struct dla_processor_group *group);
> +void
> +dla_pdp_rdma_check(struct dla_processor_group *group);
> +
> +/**
> + * CDP operations
> + */
> +void
> +dla_cdp_set_producer(struct dla_engine *engine, int32_t group_id, int32_t rdma_group_id);
> +int
> +dla_cdp_enable(struct dla_engine *engine, struct dla_processor_group *group);
> +int
> +dla_cdp_program(struct dla_engine *engine, struct dla_processor_group *group);
> +int
> +dla_cdp_is_ready(struct dla_processor *processor,
> +			   struct dla_processor_group *group);
> +void
> +dla_cdp_dump_config(struct dla_processor_group *group);
> +void
> +dla_cdp_rdma_check(struct dla_processor_group *group);
> +
> +/**
> + * RUBIK operations
> + */
> +void
> +dla_rubik_set_producer(struct dla_engine *engine, int32_t group_id, int32_t rdma_group_id);
> +int
> +dla_rubik_enable(struct dla_engine *engine, struct dla_processor_group *group);
> +int
> +dla_rubik_program(struct dla_engine *engine, struct dla_processor_group *group);
> +int
> +dla_rubik_is_ready(struct dla_processor *processor,
> +			     struct dla_processor_group *group);
> +void
> +dla_rubik_dump_config(struct dla_processor_group *group);
> +void
> +dla_rubik_rdma_check(struct dla_processor_group *group);
> +
> +#endif
> diff --git a/drivers/gpu/drm/nvdla/nvdla_gem.c b/drivers/gpu/drm/nvdla/nvdla_gem.c
> new file mode 100644
> index 000000000000..cccf6d01a564
> --- /dev/null
> +++ b/drivers/gpu/drm/nvdla/nvdla_gem.c
> @@ -0,0 +1,393 @@
> +// SPDX-License-Identifier: BSD-3-Clause OR GPL-2.0
> +/*
> + * Copyright (C) 2017-2018 NVIDIA CORPORATION
> + * Copyright (C) 2022 Cai Huoqing
> + */
> +
> +#include <linux/dma-buf.h>
> +#include <drm/drm_drv.h>
> +#include <drm/drm_gem_cma_helper.h>
> +
> +#include "nvdla_drm.h"
> +#include "nvdla_ioctl.h"
> +
> +#define to_nvdla_obj(x) container_of(x, struct nvdla_gem_object, object)
> +
> +struct nvdla_gem_object {
> +	struct drm_gem_object object;
> +
> +	void *kvaddr;
> +	dma_addr_t dma_addr;
> +	unsigned long dma_attrs;
> +};
> +
> +static int32_t nvdla_fill_task_desc(struct nvdla_ioctl_submit_task *local_task,
> +				struct nvdla_task *task)
> +{
> +	struct nvdla_mem_handle *handles;
> +
> +	/* update task desc fields */
> +	task->num_addresses = local_task->num_addresses;
> +
> +	handles = kzalloc(local_task->num_addresses * sizeof(struct nvdla_mem_handle),
> +					  GFP_KERNEL);
> +	if (handles == NULL)
> +		return -EFAULT;
> +
> +	/* get user addresses list */
> +	if (copy_from_user(handles,
> +		(void __user *)local_task->address_list,
> +		(task->num_addresses *
> +			sizeof(struct nvdla_mem_handle)))) {
> +		pr_err("failed to copy address list from user ptr\n");
> +		kfree(handles);
> +		return -EFAULT;
> +	}
> +
> +	task->address_list = handles;
> +
> +	return 0;
> +}
> +
> +static int32_t nvdla_submit(struct drm_device *drm, void *arg,
> +					struct drm_file *file)
> +{
> +	int32_t err = 0;
> +	struct nvdla_task *task;
> +	struct nvdla_ioctl_submit_task local_task;
> +	struct nvdla_ioctl_submit_task __user *user_task;
> +	struct nvdla_device *nvdla_dev = dev_get_drvdata(drm->dev);
> +	struct nvdla_submit_args *args =
> +			(struct nvdla_submit_args *)arg;
> +
> +	user_task = (struct nvdla_ioctl_submit_task __user *)
> +			(uintptr_t)args->tasks;
> +	if (!user_task)
> +		return -EINVAL;
> +
> +	/* IOCTL copy descriptors */
> +	if (copy_from_user(&local_task, (void __user *)user_task,
> +			(sizeof(*user_task))))
> +		return -EFAULT;
> +
> +	task = kzalloc(sizeof(*task), GFP_KERNEL);
> +	if (task == NULL)
> +		return -EFAULT;
> +
> +	nvdla_dev->task = task;
> +	kref_init(&task->ref);
> +	task->nvdla_dev = nvdla_dev;
> +	task->file = file;
> +
> +	/* update task desc fields */
> +	err = nvdla_fill_task_desc(&local_task, task);
> +	if (err)
> +		goto free_task_desc;
> +
> +	err = nvdla_task_submit(nvdla_dev, task);
> +
> +	kfree(task->address_list);
> +
> +free_task_desc:
> +	kfree(task);
> +	return err;
> +}
> +
> +static int32_t nvdla_gem_alloc(struct nvdla_gem_object *nobj)
> +{
> +	struct drm_gem_object *dobj = &nobj->object;
> +	struct drm_device *drm = dobj->dev;
> +
> +	nobj->dma_attrs = DMA_ATTR_WRITE_COMBINE;
> +
> +	nobj->kvaddr = dma_alloc_attrs(drm->dev, dobj->size, &nobj->dma_addr,
> +						GFP_KERNEL, nobj->dma_attrs);
> +
> +	if (!nobj->kvaddr)
> +		return -ENOMEM;
> +
> +	return 0;
> +}
> +
> +static void nvdla_gem_free(struct nvdla_gem_object *nobj)
> +{
> +	struct drm_gem_object *dobj = &nobj->object;
> +	struct drm_device *drm = dobj->dev;
> +
> +	dma_free_attrs(drm->dev, dobj->size, nobj->kvaddr, nobj->dma_addr,
> +				nobj->dma_attrs);
> +}
> +
> +static void nvdla_gem_free_object(struct drm_gem_object *dobj)
> +{
> +	struct nvdla_gem_object *nobj;
> +
> +	drm_gem_free_mmap_offset(dobj);
> +
> +	nobj = to_nvdla_obj(dobj);
> +
> +	nvdla_gem_free(nobj);
> +
> +	kfree(nobj);
> +}
> +
> +static struct nvdla_gem_object *
> +nvdla_gem_create_object(struct drm_device *drm, uint32_t size)
> +{
> +	int32_t ret;
> +	struct drm_gem_object *dobj;
> +	struct nvdla_gem_object *nobj;
> +
> +	size = round_up(size, PAGE_SIZE);
> +
> +	nobj = kzalloc(sizeof(*nobj), GFP_KERNEL);
> +	if (!nobj)
> +		return ERR_PTR(-ENOMEM);
> +
> +	dobj = &nobj->object;
> +
> +	drm_gem_private_object_init(drm, dobj, size);
> +
> +	ret = nvdla_gem_alloc(nobj);
> +	if (ret)
> +		goto free_nvdla_obj;
> +
> +	return nobj;
> +
> +free_nvdla_obj:
> +	kfree(nobj);
> +	return ERR_PTR(ret);
> +}
> +
> +static struct sg_table*
> +nvdla_drm_gem_prime_get_sg_table(struct drm_gem_object *dobj)
> +{
> +	int32_t ret;
> +	struct sg_table *sgt;
> +	struct drm_device *drm = dobj->dev;
> +	struct nvdla_gem_object *nobj = to_nvdla_obj(dobj);
> +
> +	sgt = kzalloc(sizeof(*sgt), GFP_KERNEL);
> +	if (!sgt)
> +		return ERR_PTR(-ENOMEM);
> +
> +	ret = dma_get_sgtable_attrs(drm->dev, sgt, nobj->kvaddr,
> +				    nobj->dma_addr, dobj->size,
> +				    nobj->dma_attrs);
> +	if (ret) {
> +		DRM_ERROR("failed to allocate sgt, %d\n", ret);
> +		kfree(sgt);
> +		return ERR_PTR(ret);
> +	}
> +
> +	return sgt;
> +}
> +
> +static int nvdla_drm_gem_prime_vmap(struct drm_gem_object *obj, struct iosys_map *map)
> +{
> +	struct nvdla_gem_object *nobj = to_nvdla_obj(obj);
> +
> +	map->vaddr = nobj->kvaddr;
> +
> +	return 0;
> +}
> +
> +static void nvdla_drm_gem_prime_vunmap(struct drm_gem_object *obj, struct iosys_map *map)
> +{
> +	/* Nothing to do */
> +}
> +
> +static int32_t nvdla_drm_gem_object_mmap(struct drm_gem_object *dobj,
> +					struct vm_area_struct *vma)
> +{
> +	int32_t ret;
> +	struct nvdla_gem_object *nobj = to_nvdla_obj(dobj);
> +	struct drm_device *drm = dobj->dev;
> +
> +	vma->vm_flags &= ~VM_PFNMAP;
> +	vma->vm_pgoff = 0;
> +
> +	ret = dma_mmap_attrs(drm->dev, vma, nobj->kvaddr, nobj->dma_addr,
> +			     dobj->size, nobj->dma_attrs);
> +	if (ret)
> +		drm_gem_vm_close(vma);
> +
> +	return ret;
> +}
> +
> +static const struct drm_gem_object_funcs nvdla_gem_object_funcs = {
> +	.free = nvdla_gem_free_object,
> +	.get_sg_table = nvdla_drm_gem_prime_get_sg_table,
> +	.vmap = nvdla_drm_gem_prime_vmap,
> +	.vunmap = nvdla_drm_gem_prime_vunmap,
> +	.mmap = nvdla_drm_gem_object_mmap,
> +};
> +
> +static struct nvdla_gem_object*
> +nvdla_gem_create_with_handle(struct drm_file *file_priv,
> +							 struct drm_device *drm, uint32_t size,
> +							 uint32_t *handle)
> +{
> +	int32_t ret;
> +	struct drm_gem_object *dobj;
> +	struct nvdla_gem_object *nobj;
> +
> +	nobj = nvdla_gem_create_object(drm, size);
> +	if (IS_ERR(nobj))
> +		return ERR_CAST(nobj);
> +
> +	dobj = &nobj->object;
> +	dobj->funcs = &nvdla_gem_object_funcs;
> +	ret = drm_gem_handle_create(file_priv, dobj, handle);
> +	if (ret)
> +		goto free_drm_object;
> +
> +	drm_gem_object_put(dobj);
> +
> +	return nobj;
> +
> +free_drm_object:
> +	nvdla_gem_free_object(dobj);
> +
> +	return ERR_PTR(ret);
> +}
> +
> +static int32_t nvdla_gem_create(struct drm_device *drm, void *data,
> +								struct drm_file *file)
> +{
> +	struct nvdla_gem_object *nobj;
> +	struct nvdla_gem_create_args *args = data;
> +
> +	nobj = nvdla_gem_create_with_handle(file, drm, args->size,
> +					 &args->handle);
> +	if (IS_ERR(nobj))
> +		return PTR_ERR(nobj);
> +
> +	return 0;
> +}
> +
> +static int32_t nvdla_drm_gem_mmap_buf(struct drm_gem_object *obj,
> +									  struct vm_area_struct *vma)
> +{
> +	int32_t ret;
> +
> +	ret = drm_gem_mmap_obj(obj, obj->size, vma);
> +	if (ret)
> +		return ret;
> +
> +	return nvdla_drm_gem_object_mmap(obj, vma);
> +}
> +
> +static int32_t nvdla_drm_gem_mmap(struct file *filp, struct vm_area_struct *vma)
> +{
> +	int32_t ret;
> +	struct drm_gem_object *obj;
> +
> +	ret = drm_gem_mmap(filp, vma);
> +	if (ret)
> +		return ret;
> +
> +	obj = vma->vm_private_data;
> +
> +	return nvdla_drm_gem_object_mmap(obj, vma);
> +}
> +
> +int32_t nvdla_gem_dma_addr(struct drm_device *dev, struct drm_file *file,
> +						   uint32_t fd, dma_addr_t *addr)
> +{
> +	int32_t ret;
> +	uint32_t handle;
> +	struct nvdla_gem_object *nobj;
> +	struct drm_gem_object *dobj;
> +
> +	ret = drm_gem_prime_fd_to_handle(dev, file, fd, &handle);
> +	if (ret)
> +		return ret;
> +
> +	dobj = drm_gem_object_lookup(file, handle);
> +	if (!dobj)
> +		return -EINVAL;
> +
> +	nobj = to_nvdla_obj(dobj);
> +
> +	*addr = nobj->dma_addr;
> +
> +	drm_gem_object_put(dobj);
> +
> +	return 0;
> +}
> +
> +static int32_t nvdla_gem_map_offset(struct drm_device *drm, void *data,
> +									struct drm_file *file)
> +{
> +	struct nvdla_gem_map_offset_args *args = data;
> +
> +	return drm_gem_dumb_map_offset(file, drm, args->handle,
> +								   &args->offset);
> +}
> +
> +static const struct file_operations nvdla_drm_fops = {
> +	.owner = THIS_MODULE,
> +	.open = drm_open,
> +	.release = drm_release,
> +	.unlocked_ioctl = drm_ioctl,
> +	.mmap = nvdla_drm_gem_mmap,
> +	.poll = drm_poll,
> +	.read = drm_read,
> +#ifdef CONFIG_COMPAT
> +	.compat_ioctl = drm_compat_ioctl,
> +#endif
> +	.llseek = noop_llseek,
> +};
> +
> +static const struct drm_ioctl_desc nvdla_drm_ioctls[] = {
> +	DRM_IOCTL_DEF_DRV(NVDLA_SUBMIT, nvdla_submit, DRM_RENDER_ALLOW),
> +	DRM_IOCTL_DEF_DRV(NVDLA_GEM_CREATE, nvdla_gem_create, DRM_RENDER_ALLOW),
> +	DRM_IOCTL_DEF_DRV(NVDLA_GEM_MMAP, nvdla_gem_map_offset, DRM_RENDER_ALLOW),
> +	/* use DRM_IOCTL_MODE_DESTROY_DUMB to destory */
> +};
> +
> +static struct drm_driver nvdla_drm_driver = {
> +	.driver_features = DRIVER_GEM | DRIVER_RENDER,
> +
> +	.ioctls = nvdla_drm_ioctls,
> +	.num_ioctls = ARRAY_SIZE(nvdla_drm_ioctls),
> +	.fops = &nvdla_drm_fops,
> +	.gem_prime_mmap		= nvdla_drm_gem_mmap_buf,
> +
> +	.name = "nvdla",
> +	.desc = "NVDLA driver",
> +	.date = "20171017",
> +	.major = 0,
> +	.minor = 0,
> +	.patchlevel = 0,
> +};
> +
> +int32_t nvdla_drm_probe(struct nvdla_device *nvdla_dev)
> +{
> +	int32_t err;
> +	struct drm_device *drm;
> +	struct drm_driver *driver = &nvdla_drm_driver;
> +
> +	drm = drm_dev_alloc(driver, &nvdla_dev->pdev->dev);
> +	if (IS_ERR(drm))
> +		return PTR_ERR(drm);
> +
> +	nvdla_dev->drm = drm;
> +
> +	err = drm_dev_register(drm, 0);
> +	if (err < 0)
> +		goto unref;
> +
> +	return 0;
> +
> +unref:
> +	drm_dev_put(drm);
> +	return err;
> +}
> +
> +void nvdla_drm_remove(struct nvdla_device *nvdla_dev)
> +{
> +	drm_dev_unregister(nvdla_dev->drm);
> +	drm_dev_put(nvdla_dev->drm);
> +}
> diff --git a/drivers/gpu/drm/nvdla/nvdla_ioctl.h b/drivers/gpu/drm/nvdla/nvdla_ioctl.h
> new file mode 100644
> index 000000000000..e21d4007b7f4
> --- /dev/null
> +++ b/drivers/gpu/drm/nvdla/nvdla_ioctl.h
> @@ -0,0 +1,99 @@
> +/* SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause */
> +/*
> + * Copyright (C) 2017-2018 NVIDIA CORPORATION.
> + * Copyright (C) 2022 Cai Huoqing
> + */
> +
> +#ifndef __LINUX_NVDLA_IOCTL_H
> +#define __LINUX_NVDLA_IOCTL_H
> +
> +#include <linux/ioctl.h>
> +#include <linux/types.h>
> +
> +#if !defined(__KERNEL__)
> +#define __user
> +#endif
> +
> +/**
> + * struct nvdla_mem_handle structure for memory handles
> + *
> + * @handle		handle to DMA buffer allocated in userspace
> + * @reserved		Reserved for padding
> + * @offset		offset in bytes from start address of buffer
> + *
> + */
> +struct nvdla_mem_handle {
> +	__u32 handle;
> +	__u32 reserved;
> +	__u64 offset;
> +};
> +
> +/**
> + * struct nvdla_ioctl_submit_task structure for single task information
> + *
> + * @num_addresses		total number of entries in address_list
> + * @reserved			Reserved for padding
> + * @address_list		pointer to array of struct nvdla_mem_handle
> + *
> + */
> +struct nvdla_ioctl_submit_task {
> +#define NVDLA_MAX_BUFFERS_PER_TASK (6144)
> +	__u32 num_addresses;
> +#define NVDLA_NO_TIMEOUT    (0xffffffff)
> +	__u32 timeout;
> +	__u64 address_list;
> +};
> +
> +/**
> + * struct nvdla_submit_args structure for task submit
> + *
> + * @tasks		pointer to array of struct nvdla_ioctl_submit_task
> + * @num_tasks		number of entries in tasks
> + * @flags		flags for task submit, no flags defined yet
> + * @version		version of task structure
> + *
> + */
> +struct nvdla_submit_args {
> +	__u64 tasks;
> +	__u16 num_tasks;
> +#define NVDLA_MAX_TASKS_PER_SUBMIT	24
> +#define NVDLA_SUBMIT_FLAGS_ATOMIC	(1 << 0)
> +	__u16 flags;
> +	__u32 version;
> +};
> +
> +/**
> + * struct nvdla_gem_create_args for allocating DMA buffer through GEM
> + *
> + * @handle		handle updated by kernel after allocation
> + * @flags		implementation specific flags
> + * @size		size of buffer to allocate
> + */
> +struct nvdla_gem_create_args {
> +	__u32 handle;
> +	__u32 flags;
> +	__u64 size;
> +};
> +
> +/**
> + * struct nvdla_gem_map_offset_args for mapping DMA buffer
> + *
> + * @handle		handle of the buffer
> + * @reserved		reserved for padding
> + * @offset		offset updated by kernel after mapping
> + */
> +struct nvdla_gem_map_offset_args {
> +	__u32 handle;
> +	__u32 reserved;
> +	__u64 offset;
> +};
> +
> +#define DRM_NVDLA_SUBMIT		0x00
> +#define DRM_NVDLA_GEM_CREATE		0x01
> +#define DRM_NVDLA_GEM_MMAP		0x02
> +
> +#define DRM_IOCTL_NVDLA_SUBMIT DRM_IOWR(DRM_COMMAND_BASE + DRM_NVDLA_SUBMIT, struct nvdla_submit_args)
> +#define DRM_IOCTL_NVDLA_GEM_CREATE DRM_IOWR(DRM_COMMAND_BASE + DRM_NVDLA_GEM_CREATE, struct nvdla_gem_create_args)
> +#define DRM_IOCTL_NVDLA_GEM_MMAP DRM_IOWR(DRM_COMMAND_BASE + DRM_NVDLA_GEM_MMAP, struct nvdla_gem_map_offset_args)
> +
> +#endif
> diff --git a/drivers/gpu/drm/nvdla/nvdla_pdp.c b/drivers/gpu/drm/nvdla/nvdla_pdp.c
> new file mode 100644
> index 000000000000..2ed0ac0f021a
> --- /dev/null
> +++ b/drivers/gpu/drm/nvdla/nvdla_pdp.c
> @@ -0,0 +1,446 @@
> +// SPDX-License-Identifier: BSD-3-Clause OR GPL-2.0
> +/*
> + * Copyright (C) 2017-2018 NVIDIA CORPORATION
> + * Copyright (C) 2022 Cai Huoqing
> + */
> +
> +#include "nvdla_drm.h"
> +#include "nvdla_reg.h"
> +#include "nvdla_common.h"
> +#include "nvdla_engine.h"
> +
> +#define MAX_SPLIT_NUM	64
> +//#define ARRAY_SIZE(a)	(sizeof(a) / sizeof((a[0])))
> +
> +static const uint8_t map_ram[] = {
> +	FIELD_ENUM(PDP_RDMA_D_SRC_RAM_CFG_0, SRC_RAM_TYPE, MC),
> +	FIELD_ENUM(PDP_RDMA_D_SRC_RAM_CFG_0, SRC_RAM_TYPE, CV),
> +};
> +
> +static const uint8_t map_pool[] = {
> +	FIELD_ENUM(PDP_D_OPERATION_MODE_CFG_0,
> +			POOLING_METHOD, POOLING_METHOD_AVERAGE),
> +	FIELD_ENUM(PDP_D_OPERATION_MODE_CFG_0,
> +			POOLING_METHOD, POOLING_METHOD_MAX),
> +	FIELD_ENUM(PDP_D_OPERATION_MODE_CFG_0,
> +			POOLING_METHOD, POOLING_METHOD_MIN),
> +};
> +
> +static const uint8_t map_precision[] = {
> +	FIELD_ENUM(PDP_D_DATA_FORMAT_0, INPUT_DATA, INT8),
> +	FIELD_ENUM(PDP_D_DATA_FORMAT_0, INPUT_DATA, INT16),
> +	FIELD_ENUM(PDP_D_DATA_FORMAT_0, INPUT_DATA, FP16),
> +};
> +
> +static const uint8_t map_pool_kernel[] = {
> +	FIELD_ENUM(PDP_D_POOLING_KERNEL_CFG_0, KERNEL_WIDTH, KERNEL_WIDTH_1),
> +	FIELD_ENUM(PDP_D_POOLING_KERNEL_CFG_0, KERNEL_WIDTH, KERNEL_WIDTH_2),
> +	FIELD_ENUM(PDP_D_POOLING_KERNEL_CFG_0, KERNEL_WIDTH, KERNEL_WIDTH_3),
> +	FIELD_ENUM(PDP_D_POOLING_KERNEL_CFG_0, KERNEL_WIDTH, KERNEL_WIDTH_4),
> +	FIELD_ENUM(PDP_D_POOLING_KERNEL_CFG_0, KERNEL_WIDTH, KERNEL_WIDTH_5),
> +	FIELD_ENUM(PDP_D_POOLING_KERNEL_CFG_0, KERNEL_WIDTH, KERNEL_WIDTH_6),
> +	FIELD_ENUM(PDP_D_POOLING_KERNEL_CFG_0, KERNEL_WIDTH, KERNEL_WIDTH_7),
> +	FIELD_ENUM(PDP_D_POOLING_KERNEL_CFG_0, KERNEL_WIDTH, KERNEL_WIDTH_8),
> +};
> +
> +/* The reciprocal of kernel width: 1/1, 1/2, 1/3, ... */
> +static const uint32_t recip_kernel_size[2][8] = {
> +	/*
> +	 * INT8/16
> +	 * 1      1/2     1/3     1/4     1/5     1/6     1/7     1/8
> +	 */
> +	{0x10000, 0x8000, 0x5555, 0x4000, 0x3333, 0x2aaa, 0x2492, 0x2000},
> +	{0x7c00, 0x7800, 0x7555,  0x7400, 0x7266, 0x7155, 0x7092, 0x7000},
> +};
> +
> +static uint32_t
> +get_fly_mode(uint8_t type)
> +{
> +	uint32_t val;
> +
> +	val = type == DLA_MEM_HW ?
> +			FIELD_ENUM(PDP_D_OPERATION_MODE_CFG_0,
> +						FLYING_MODE, ON_FLYING) :
> +			FIELD_ENUM(PDP_D_OPERATION_MODE_CFG_0,
> +						FLYING_MODE, OFF_FLYING);
> +
> +	return val;
> +}
> +
> +void
> +dla_pdp_set_producer(struct dla_engine *engine, int32_t group_id, int32_t rdma_group_id)
> +{
> +	uint32_t reg;
> +
> +	pr_debug("group id %d rdma id %d\n", group_id, rdma_group_id);
> +
> +	reg = group_id << SHIFT(PDP_S_POINTER_0, PRODUCER);
> +	pdp_reg_write(engine, S_POINTER, reg);
> +
> +	reg = rdma_group_id << SHIFT(PDP_RDMA_S_POINTER_0, PRODUCER);
> +	pdp_rdma_reg_write(engine, S_POINTER, reg);
> +}
> +
> +int
> +dla_pdp_enable(struct dla_engine *engine, struct dla_processor_group *group)
> +{
> +	int32_t ret = 0;
> +	uint32_t reg;
> +
> +	if (!group) {
> +		ret = -EINVAL;
> +		goto exit;
> +	}
> +
> +	pr_debug("rdma needed %u\n", group->is_rdma_needed);
> +
> +	/**
> +	 * enable all sub-modules
> +	 */
> +	if (group->is_rdma_needed) {
> +		reg = FIELD_ENUM(PDP_RDMA_D_OP_ENABLE_0, OP_EN, ENABLE);
> +		pdp_rdma_reg_write(engine, D_OP_ENABLE, reg);
> +	}
> +	reg = FIELD_ENUM(PDP_D_OP_ENABLE_0, OP_EN, ENABLE);
> +	pdp_reg_write(engine, D_OP_ENABLE, reg);
> +
> +exit:
> +	return ret;
> +}
> +
> +void
> +dla_pdp_rdma_check(struct dla_processor_group *group)
> +{
> +	struct dla_pdp_surface_desc *pdp_surface;
> +
> +	pdp_surface = &group->surface_desc->pdp_surface;
> +
> +	group->is_rdma_needed = 0;
> +
> +	if (pdp_surface->src_data.type != DLA_MEM_HW)
> +		group->is_rdma_needed = 1;
> +}
> +
> +static int
> +validate_strides(uint8_t stride_x, uint8_t stride_y)
> +{
> +	int32_t ret = 0;
> +
> +	if (stride_x < 1 || stride_y < 1 || stride_x > 8 || stride_y > 8) {
> +		pr_err("Invalid Stride (x[%d], y[%d])\n", stride_x, stride_y);
> +		ret = -EINVAL;
> +	}
> +
> +	return ret;
> +}
> +
> +static int
> +vaildate_pdp_configs(struct dla_processor_group *group)
> +{
> +	int32_t ret = 0;
> +	struct dla_pdp_op_desc *pdp_op;
> +	struct dla_pdp_surface_desc *pdp_surface;
> +
> +	pdp_op = &group->operation_desc->pdp_op;
> +	pdp_surface = &group->surface_desc->pdp_surface;
> +
> +	if (pdp_surface->dst_data.type == DLA_MEM_HW) {
> +		pr_err("Destination buffer for PDP has to be either MC or CV");
> +		ret = -EINVAL;
> +		goto exit;
> +	}
> +
> +	ret = validate_data_cube(pdp_surface->src_data, pdp_surface->dst_data,
> +								DLA_MEM_HW);
> +	if (ret)
> +		goto exit;
> +
> +	ret = validate_precision(pdp_op->precision, ARRAY_SIZE(map_precision));
> +	if (ret)
> +		goto exit;
> +
> +	ret = validate_strides(pdp_op->stride_x, pdp_op->stride_y);
> +	if (ret)
> +		goto exit;
> +
> +	if (pdp_op->split_num > MAX_SPLIT_NUM) {
> +		pr_err("Invalid split_num: %u\n", pdp_op->split_num);
> +		ret = -EINVAL;
> +		goto exit;
> +	}
> +
> +	if (pdp_op->pool_width >= ARRAY_SIZE(map_pool_kernel)) {
> +		pr_err("Invalid pool_width: %u\n", pdp_op->pool_width);
> +		ret = -EINVAL;
> +		goto exit;
> +	}
> +
> +	if (pdp_op->pool_height >= ARRAY_SIZE(map_pool_kernel)) {
> +		pr_err("Invalid pool_height: %u\n", pdp_op->pool_height);
> +		ret = -EINVAL;
> +		goto exit;
> +	}
> +
> +	if (pdp_op->pool_mode >= ARRAY_SIZE(map_pool)) {
> +		pr_err("Invalid pool_mode: %u\n", pdp_op->pool_mode);
> +		ret = -EINVAL;
> +		goto exit;
> +	}
> +
> +exit:
> +	return ret;
> +}
> +
> +static int
> +processor_pdp_program(struct dla_engine *engine, struct dla_processor_group *group)
> +{
> +	int32_t ret = 0;
> +	uint32_t reg, high, low;
> +	uint64_t input_address = 0;
> +	uint64_t output_address = 0;
> +	struct dla_pdp_op_desc *pdp_op;
> +	struct dla_pdp_surface_desc *pdp_surface;
> +
> +	pdp_op = &group->operation_desc->pdp_op;
> +	pdp_surface = &group->surface_desc->pdp_surface;
> +
> +	ret = vaildate_pdp_configs(group);
> +	if (ret)
> +		goto exit;
> +
> +	ret = dla_read_input_address(engine, &pdp_surface->src_data,
> +					&input_address,
> +					group->op_desc->index,
> +					group->roi_index,
> +					1);
> +	if (ret)
> +		goto exit;
> +
> +	if (pdp_surface->dst_data.address != -1)
> +		dla_get_dma_cube_address(engine->driver_context,
> +					engine->task->task_data,
> +					pdp_surface->dst_data.address,
> +					pdp_surface->dst_data.offset,
> +					(void *)&output_address,
> +					DESTINATION_DMA);
> +
> +	if (pdp_surface->src_data.type != DLA_MEM_HW) {
> +		/* PDP RDMA */
> +		pdp_rdma_reg_write(engine, D_DATA_CUBE_IN_WIDTH,
> +				pdp_surface->src_data.width - 1);
> +		pdp_rdma_reg_write(engine, D_DATA_CUBE_IN_HEIGHT,
> +				pdp_surface->src_data.height - 1);
> +		pdp_rdma_reg_write(engine, D_DATA_CUBE_IN_CHANNEL,
> +				pdp_surface->src_data.channel - 1);
> +
> +		high = upper_32_bits(input_address);
> +		low  = lower_32_bits(input_address);
> +		pdp_rdma_reg_write(engine, D_SRC_BASE_ADDR_HIGH, high);
> +		pdp_rdma_reg_write(engine, D_SRC_BASE_ADDR_LOW, low);
> +		pdp_rdma_reg_write(engine, D_SRC_LINE_STRIDE,
> +				pdp_surface->src_data.line_stride);
> +		pdp_rdma_reg_write(engine, D_SRC_SURFACE_STRIDE,
> +				pdp_surface->src_data.surf_stride);
> +
> +		reg = (map_precision[pdp_op->precision]
> +			<< SHIFT(PDP_RDMA_D_DATA_FORMAT_0, INPUT_DATA));
> +		pdp_rdma_reg_write(engine, D_DATA_FORMAT, reg);
> +
> +		reg = map_ram[pdp_surface->src_data.type]
> +			<< SHIFT(PDP_RDMA_D_SRC_RAM_CFG_0, SRC_RAM_TYPE);
> +		pdp_rdma_reg_write(engine, D_SRC_RAM_CFG, reg);
> +
> +		reg = ((pdp_op->split_num - 1)
> +			 << SHIFT(PDP_RDMA_D_OPERATION_MODE_CFG_0, SPLIT_NUM));
> +		pdp_rdma_reg_write(engine, D_OPERATION_MODE_CFG, reg);
> +
> +		reg = (map_pool_kernel[pdp_op->pool_width]
> +			<< SHIFT(PDP_RDMA_D_POOLING_KERNEL_CFG_0,
> +							KERNEL_WIDTH)) |
> +			((pdp_op->stride_x - 1)
> +			<< SHIFT(PDP_RDMA_D_POOLING_KERNEL_CFG_0,
> +							KERNEL_STRIDE_WIDTH));
> +		pdp_rdma_reg_write(engine, D_POOLING_KERNEL_CFG, reg);
> +
> +		reg = (pdp_op->pad_left
> +			<< SHIFT(PDP_RDMA_D_POOLING_PADDING_CFG_0, PAD_WIDTH));
> +		pdp_rdma_reg_write(engine, D_POOLING_PADDING_CFG, reg);
> +
> +		reg = ((pdp_op->partial_in_width_first == 0 ? 0 :
> +				pdp_op->partial_in_width_first - 1)
> +			<< SHIFT(PDP_RDMA_D_PARTIAL_WIDTH_IN_0,
> +				PARTIAL_WIDTH_IN_FIRST)) |
> +			((pdp_op->partial_in_width_mid == 0 ? 0 :
> +				pdp_op->partial_in_width_mid - 1)
> +			<< SHIFT(PDP_RDMA_D_PARTIAL_WIDTH_IN_0,
> +				PARTIAL_WIDTH_IN_MID)) |
> +			((pdp_op->partial_in_width_last == 0 ? 0 :
> +				pdp_op->partial_in_width_last - 1)
> +			<< SHIFT(PDP_RDMA_D_PARTIAL_WIDTH_IN_0,
> +				PARTIAL_WIDTH_IN_LAST));
> +		pdp_rdma_reg_write(engine, D_PARTIAL_WIDTH_IN, reg);
> +	} else {
> +		ASSERT_GOTO(pdp_op->split_num == 1, ret,
> +					-EINVAL, exit);
> +	}
> +
> +	reg = ((pdp_surface->src_data.width - 1)
> +		<< SHIFT(PDP_D_DATA_CUBE_IN_WIDTH_0, CUBE_IN_WIDTH));
> +	pdp_reg_write(engine, D_DATA_CUBE_IN_WIDTH, reg);
> +
> +	reg = ((pdp_surface->src_data.height - 1)
> +		<< SHIFT(PDP_D_DATA_CUBE_IN_HEIGHT_0, CUBE_IN_HEIGHT));
> +	pdp_reg_write(engine, D_DATA_CUBE_IN_HEIGHT, reg);
> +
> +	reg = ((pdp_surface->src_data.channel - 1)
> +		<< SHIFT(PDP_D_DATA_CUBE_IN_CHANNEL_0, CUBE_IN_CHANNEL));
> +	pdp_reg_write(engine, D_DATA_CUBE_IN_CHANNEL, reg);
> +
> +	reg = ((pdp_surface->dst_data.width - 1)
> +		<< SHIFT(PDP_D_DATA_CUBE_OUT_WIDTH_0, CUBE_OUT_WIDTH));
> +	pdp_reg_write(engine, D_DATA_CUBE_OUT_WIDTH, reg);
> +
> +	reg = ((pdp_surface->dst_data.height - 1)
> +		<< SHIFT(PDP_D_DATA_CUBE_OUT_HEIGHT_0, CUBE_OUT_HEIGHT));
> +	pdp_reg_write(engine, D_DATA_CUBE_OUT_HEIGHT, reg);
> +
> +	reg = ((pdp_surface->dst_data.channel - 1)
> +		<< SHIFT(PDP_D_DATA_CUBE_OUT_CHANNEL_0, CUBE_OUT_CHANNEL));
> +	pdp_reg_write(engine, D_DATA_CUBE_OUT_CHANNEL, reg);
> +
> +	reg = (map_pool[pdp_op->pool_mode]
> +		<< SHIFT(PDP_D_OPERATION_MODE_CFG_0, POOLING_METHOD)) |
> +		(get_fly_mode(pdp_surface->src_data.type)
> +		<< SHIFT(PDP_D_OPERATION_MODE_CFG_0, FLYING_MODE)) |
> +		((pdp_op->split_num - 1)
> +		<< SHIFT(PDP_D_OPERATION_MODE_CFG_0, SPLIT_NUM));
> +	pdp_reg_write(engine, D_OPERATION_MODE_CFG, reg);
> +
> +	reg = ((pdp_op->partial_in_width_first == 0 ? 0 :
> +			pdp_op->partial_in_width_first-1)
> +		<< SHIFT(PDP_D_PARTIAL_WIDTH_IN_0, PARTIAL_WIDTH_IN_FIRST)) |
> +		((pdp_op->partial_in_width_mid == 0 ? 0 :
> +			pdp_op->partial_in_width_mid-1)
> +		<< SHIFT(PDP_D_PARTIAL_WIDTH_IN_0, PARTIAL_WIDTH_IN_MID)) |
> +		((pdp_op->partial_in_width_last == 0 ? 0 :
> +			pdp_op->partial_in_width_last-1)
> +		<< SHIFT(PDP_D_PARTIAL_WIDTH_IN_0, PARTIAL_WIDTH_IN_LAST));
> +	pdp_reg_write(engine, D_PARTIAL_WIDTH_IN, reg);
> +
> +	reg = ((pdp_op->partial_width_first == 0 ? 0 :
> +			pdp_op->partial_width_first-1)
> +		<< SHIFT(PDP_D_PARTIAL_WIDTH_OUT_0, PARTIAL_WIDTH_OUT_FIRST)) |
> +		((pdp_op->partial_width_mid == 0 ? 0 :
> +			pdp_op->partial_width_mid-1)
> +		<< SHIFT(PDP_D_PARTIAL_WIDTH_OUT_0, PARTIAL_WIDTH_OUT_MID))   |
> +		((pdp_op->partial_width_last == 0 ? 0 :
> +			pdp_op->partial_width_last-1)
> +		<< SHIFT(PDP_D_PARTIAL_WIDTH_OUT_0, PARTIAL_WIDTH_OUT_LAST));
> +	pdp_reg_write(engine, D_PARTIAL_WIDTH_OUT, reg);
> +
> +	reg = (map_pool_kernel[pdp_op->pool_width]
> +		<< SHIFT(PDP_D_POOLING_KERNEL_CFG_0, KERNEL_WIDTH)) |
> +		(map_pool_kernel[pdp_op->pool_height]
> +		<< SHIFT(PDP_D_POOLING_KERNEL_CFG_0, KERNEL_HEIGHT))|
> +		((pdp_op->stride_x - 1)
> +		<< SHIFT(PDP_D_POOLING_KERNEL_CFG_0, KERNEL_STRIDE_WIDTH)) |
> +		((pdp_op->stride_y - 1)
> +		<< SHIFT(PDP_D_POOLING_KERNEL_CFG_0, KERNEL_STRIDE_HEIGHT));
> +	pdp_reg_write(engine, D_POOLING_KERNEL_CFG, reg);
> +
> +	pdp_reg_write(engine, D_RECIP_KERNEL_WIDTH,
> +			recip_kernel_size[pdp_op->precision ==
> +					PRECISION_FP16][pdp_op->pool_width]);
> +	pdp_reg_write(engine, D_RECIP_KERNEL_HEIGHT,
> +			recip_kernel_size[pdp_op->precision ==
> +					PRECISION_FP16][pdp_op->pool_height]);
> +
> +	reg = (pdp_op->pad_left
> +		<< SHIFT(PDP_D_POOLING_PADDING_CFG_0, PAD_LEFT)) |
> +		(pdp_op->pad_right
> +		<< SHIFT(PDP_D_POOLING_PADDING_CFG_0, PAD_RIGHT)) |
> +		(pdp_op->pad_top
> +		<< SHIFT(PDP_D_POOLING_PADDING_CFG_0, PAD_TOP)) |
> +		(pdp_op->pad_bottom
> +		<< SHIFT(PDP_D_POOLING_PADDING_CFG_0, PAD_BOTTOM));
> +	if (pdp_op->precision == PRECISION_FP16) {
> +		int32_t i;
> +
> +		for (i = 0; i < 7; i++)
> +			ASSERT_GOTO(pdp_op->padding_value[i] == 0, ret,
> +						-EINVAL, exit);
> +	}
> +
> +	pdp_reg_write(engine, D_POOLING_PADDING_CFG, reg);
> +	pdp_reg_write(engine, D_POOLING_PADDING_VALUE_1_CFG, pdp_op->padding_value[0]);
> +	pdp_reg_write(engine, D_POOLING_PADDING_VALUE_2_CFG, pdp_op->padding_value[1]);
> +	pdp_reg_write(engine, D_POOLING_PADDING_VALUE_3_CFG, pdp_op->padding_value[2]);
> +	pdp_reg_write(engine, D_POOLING_PADDING_VALUE_4_CFG, pdp_op->padding_value[3]);
> +	pdp_reg_write(engine, D_POOLING_PADDING_VALUE_5_CFG, pdp_op->padding_value[4]);
> +	pdp_reg_write(engine, D_POOLING_PADDING_VALUE_6_CFG, pdp_op->padding_value[5]);
> +	pdp_reg_write(engine, D_POOLING_PADDING_VALUE_7_CFG, pdp_op->padding_value[6]);
> +
> +	if (pdp_surface->src_data.type != DLA_MEM_HW) {
> +		pdp_reg_write(engine, D_SRC_LINE_STRIDE,
> +				pdp_surface->src_data.line_stride);
> +		pdp_reg_write(engine, D_SRC_SURFACE_STRIDE,
> +				pdp_surface->src_data.surf_stride);
> +	}
> +
> +	high = upper_32_bits(output_address);
> +	low = lower_32_bits(output_address);
> +	pdp_reg_write(engine, D_DST_BASE_ADDR_LOW, low);
> +	pdp_reg_write(engine, D_DST_BASE_ADDR_HIGH, high);
> +
> +	pdp_reg_write(engine, D_DST_LINE_STRIDE, pdp_surface->dst_data.line_stride);
> +	pdp_reg_write(engine, D_DST_SURFACE_STRIDE, pdp_surface->dst_data.surf_stride);
> +
> +	reg = (map_ram[pdp_surface->dst_data.type]
> +		<< SHIFT(PDP_D_DST_RAM_CFG_0, DST_RAM_TYPE));
> +	pdp_reg_write(engine, D_DST_RAM_CFG, reg);
> +
> +	reg = (map_precision[pdp_op->precision]
> +		<< SHIFT(PDP_D_DATA_FORMAT_0, INPUT_DATA));
> +	pdp_reg_write(engine, D_DATA_FORMAT, reg);
> +
> +exit:
> +	return ret;
> +}
> +
> +int
> +dla_pdp_is_ready(struct dla_processor *processor,
> +			   struct dla_processor_group *group)
> +{
> +	return 1;
> +}
> +
> +void
> +dla_pdp_dump_config(struct dla_processor_group *group)
> +{
> +	struct dla_pdp_op_desc *pdp_op;
> +	struct dla_pdp_surface_desc *pdp_surface;
> +
> +	pdp_surface = &group->surface_desc->pdp_surface;
> +	pdp_op = &group->operation_desc->pdp_op;
> +}
> +
> +int
> +dla_pdp_program(struct dla_engine *engine, struct dla_processor_group *group)
> +{
> +	int32_t ret;
> +
> +	if (!group) {
> +		ret = -EINVAL;
> +		goto exit;
> +	}
> +
> +	dla_enable_intr(engine, MASK(GLB_S_INTR_MASK_0, PDP_DONE_MASK1) |
> +			MASK(GLB_S_INTR_MASK_0, PDP_DONE_MASK0));
> +
> +	ret = processor_pdp_program(engine, group);
> +	if (ret)
> +		goto exit;
> +
> +exit:
> +	return ret;
> +}
> diff --git a/drivers/gpu/drm/nvdla/nvdla_reg.h b/drivers/gpu/drm/nvdla/nvdla_reg.h
> new file mode 100644
> index 000000000000..5ca2897405bc
> --- /dev/null
> +++ b/drivers/gpu/drm/nvdla/nvdla_reg.h
> @@ -0,0 +1,6411 @@
> +/* SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause */
> +/*
> + * Copyright (C) 2017-2018 NVIDIA CORPORATION.
> + * Copyright (C) 2022 Cai Huoqing
> + */
> +
> +#ifndef __NVDLA_REG_H_
> +#define __NVDLA_REG_H_
> +
> +// Register NVDLA_CFGROM_CFGROM_HW_VERSION_0
> +#define NVDLA_CFGROM_CFGROM_HW_VERSION_0			_MK_ADDR_CONST(0x0)
> +#define NVDLA_CFGROM_CFGROM_HW_VERSION_0_HW_VERSION_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_HW_VERSION_0_HW_VERSION_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_HW_VERSION_0_HW_VERSION_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_GLB_DESC_0
> +#define NVDLA_CFGROM_CFGROM_GLB_DESC_0			_MK_ADDR_CONST(0x4)
> +#define NVDLA_CFGROM_CFGROM_GLB_DESC_0_GLB_DESC_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_GLB_DESC_0_GLB_DESC_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_GLB_DESC_0_GLB_DESC_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_CIF_DESC_0
> +#define NVDLA_CFGROM_CFGROM_CIF_DESC_0			_MK_ADDR_CONST(0x8)
> +#define NVDLA_CFGROM_CFGROM_CIF_DESC_0_CIF_DESC_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_CIF_DESC_0_CIF_DESC_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CIF_DESC_0_CIF_DESC_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_CIF_CAP_INCOMPAT_0
> +#define NVDLA_CFGROM_CFGROM_CIF_CAP_INCOMPAT_0			_MK_ADDR_CONST(0xc)
> +#define NVDLA_CFGROM_CFGROM_CIF_CAP_INCOMPAT_0_CIF_CAP_INCOMPAT_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_CIF_CAP_INCOMPAT_0_CIF_CAP_INCOMPAT_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CIF_CAP_INCOMPAT_0_CIF_CAP_INCOMPAT_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_CIF_CAP_COMPAT_0
> +#define NVDLA_CFGROM_CFGROM_CIF_CAP_COMPAT_0			_MK_ADDR_CONST(0x10)
> +#define NVDLA_CFGROM_CFGROM_CIF_CAP_COMPAT_0_CIF_CAP_COMPAT_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_CIF_CAP_COMPAT_0_CIF_CAP_COMPAT_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CIF_CAP_COMPAT_0_CIF_CAP_COMPAT_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_CIF_BASE_WIDTH_0
> +#define NVDLA_CFGROM_CFGROM_CIF_BASE_WIDTH_0			_MK_ADDR_CONST(0x14)
> +#define NVDLA_CFGROM_CFGROM_CIF_BASE_WIDTH_0_CIF_BASE_WIDTH_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_CIF_BASE_WIDTH_0_CIF_BASE_WIDTH_FIELD			_MK_FIELD_CONST(0xff, NVDLA_CFGROM_CFGROM_CIF_BASE_WIDTH_0_CIF_BASE_WIDTH_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_CIF_BASE_LATENCY_0
> +#define NVDLA_CFGROM_CFGROM_CIF_BASE_LATENCY_0			_MK_ADDR_CONST(0x18)
> +#define NVDLA_CFGROM_CFGROM_CIF_BASE_LATENCY_0_CIF_BASE_LATENCY_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_CIF_BASE_LATENCY_0_CIF_BASE_LATENCY_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CIF_BASE_LATENCY_0_CIF_BASE_LATENCY_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_CIF_BASE_BURST_LENGTH_MAX_0
> +#define NVDLA_CFGROM_CFGROM_CIF_BASE_BURST_LENGTH_MAX_0			_MK_ADDR_CONST(0x1c)
> +#define NVDLA_CFGROM_CFGROM_CIF_BASE_BURST_LENGTH_MAX_0_BASE_BURST_LENGTH_MAX_SHIFT			_MK_SHIFT_CONST(5)
> +#define NVDLA_CFGROM_CFGROM_CIF_BASE_BURST_LENGTH_MAX_0_BASE_BURST_LENGTH_MAX_FIELD			_MK_FIELD_CONST(0x7ffffff, NVDLA_CFGROM_CFGROM_CIF_BASE_BURST_LENGTH_MAX_0_BASE_BURST_LENGTH_MAX_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_CIF_BASE_MEM_ADDR_WIDTH_0
> +#define NVDLA_CFGROM_CFGROM_CIF_BASE_MEM_ADDR_WIDTH_0			_MK_ADDR_CONST(0x20)
> +#define NVDLA_CFGROM_CFGROM_CIF_BASE_MEM_ADDR_WIDTH_0_CIF_BASE_MEM_ADDR_WIDTH_SHIFT			_MK_SHIFT_CONST(5)
> +#define NVDLA_CFGROM_CFGROM_CIF_BASE_MEM_ADDR_WIDTH_0_CIF_BASE_MEM_ADDR_WIDTH_FIELD			_MK_FIELD_CONST(0x7ffffff, NVDLA_CFGROM_CFGROM_CIF_BASE_MEM_ADDR_WIDTH_0_CIF_BASE_MEM_ADDR_WIDTH_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_CDMA_DESC_0
> +#define NVDLA_CFGROM_CFGROM_CDMA_DESC_0			_MK_ADDR_CONST(0x24)
> +#define NVDLA_CFGROM_CFGROM_CDMA_DESC_0_CDMA_DESC_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_CDMA_DESC_0_CDMA_DESC_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CDMA_DESC_0_CDMA_DESC_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_CDMA_CAP_INCOMPAT_0
> +#define NVDLA_CFGROM_CFGROM_CDMA_CAP_INCOMPAT_0			_MK_ADDR_CONST(0x28)
> +#define NVDLA_CFGROM_CFGROM_CDMA_CAP_INCOMPAT_0_CDMA_CAP_INCOMPAT_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_CDMA_CAP_INCOMPAT_0_CDMA_CAP_INCOMPAT_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CDMA_CAP_INCOMPAT_0_CDMA_CAP_INCOMPAT_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_CDMA_CAP_COMPAT_0
> +#define NVDLA_CFGROM_CFGROM_CDMA_CAP_COMPAT_0			_MK_ADDR_CONST(0x2c)
> +#define NVDLA_CFGROM_CFGROM_CDMA_CAP_COMPAT_0_CDMA_CAP_COMPAT_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_CDMA_CAP_COMPAT_0_CDMA_CAP_COMPAT_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CDMA_CAP_COMPAT_0_CDMA_CAP_COMPAT_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_CDMA_BASE_FEATURE_TYPES_0
> +#define NVDLA_CFGROM_CFGROM_CDMA_BASE_FEATURE_TYPES_0			_MK_ADDR_CONST(0x30)
> +#define NVDLA_CFGROM_CFGROM_CDMA_BASE_FEATURE_TYPES_0_CDMA_BASE_FEATURE_TYPES_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_CDMA_BASE_FEATURE_TYPES_0_CDMA_BASE_FEATURE_TYPES_FIELD			_MK_FIELD_CONST(0xfff, NVDLA_CFGROM_CFGROM_CDMA_BASE_FEATURE_TYPES_0_CDMA_BASE_FEATURE_TYPES_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_CDMA_BASE_WEIGHT_TYPES_0
> +#define NVDLA_CFGROM_CFGROM_CDMA_BASE_WEIGHT_TYPES_0			_MK_ADDR_CONST(0x34)
> +#define NVDLA_CFGROM_CFGROM_CDMA_BASE_WEIGHT_TYPES_0_CDMA_BASE_WEIGHT_TYPES_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_CDMA_BASE_WEIGHT_TYPES_0_CDMA_BASE_WEIGHT_TYPES_FIELD			_MK_FIELD_CONST(0xfff, NVDLA_CFGROM_CFGROM_CDMA_BASE_WEIGHT_TYPES_0_CDMA_BASE_WEIGHT_TYPES_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_CDMA_BASE_ATOMIC_C_0
> +#define NVDLA_CFGROM_CFGROM_CDMA_BASE_ATOMIC_C_0			_MK_ADDR_CONST(0x38)
> +#define NVDLA_CFGROM_CFGROM_CDMA_BASE_ATOMIC_C_0_CDMA_BASE_ATOMIC_C_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_CDMA_BASE_ATOMIC_C_0_CDMA_BASE_ATOMIC_C_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CDMA_BASE_ATOMIC_C_0_CDMA_BASE_ATOMIC_C_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_CDMA_BASE_ATOMIC_K_0
> +#define NVDLA_CFGROM_CFGROM_CDMA_BASE_ATOMIC_K_0			_MK_ADDR_CONST(0x3c)
> +#define NVDLA_CFGROM_CFGROM_CDMA_BASE_ATOMIC_K_0_CDMA_BASE_ATOMIC_K_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_CDMA_BASE_ATOMIC_K_0_CDMA_BASE_ATOMIC_K_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CDMA_BASE_ATOMIC_K_0_CDMA_BASE_ATOMIC_K_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_CDMA_BASE_ATOMIC_M_0
> +#define NVDLA_CFGROM_CFGROM_CDMA_BASE_ATOMIC_M_0			_MK_ADDR_CONST(0x40)
> +#define NVDLA_CFGROM_CFGROM_CDMA_BASE_ATOMIC_M_0_CDMA_BASE_ATOMIC_M_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_CDMA_BASE_ATOMIC_M_0_CDMA_BASE_ATOMIC_M_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CDMA_BASE_ATOMIC_M_0_CDMA_BASE_ATOMIC_M_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_CDMA_BASE_CBUF_BANK_NUM_0
> +#define NVDLA_CFGROM_CFGROM_CDMA_BASE_CBUF_BANK_NUM_0			_MK_ADDR_CONST(0x44)
> +#define NVDLA_CFGROM_CFGROM_CDMA_BASE_CBUF_BANK_NUM_0_CDMA_BASE_CBUF_BANK_NUM_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_CDMA_BASE_CBUF_BANK_NUM_0_CDMA_BASE_CBUF_BANK_NUM_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CDMA_BASE_CBUF_BANK_NUM_0_CDMA_BASE_CBUF_BANK_NUM_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_CDMA_BASE_CBUF_BANK_WIDTH_0
> +#define NVDLA_CFGROM_CFGROM_CDMA_BASE_CBUF_BANK_WIDTH_0			_MK_ADDR_CONST(0x48)
> +#define NVDLA_CFGROM_CFGROM_CDMA_BASE_CBUF_BANK_WIDTH_0_CDMA_BASE_CBUF_BANK_WIDTH_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_CDMA_BASE_CBUF_BANK_WIDTH_0_CDMA_BASE_CBUF_BANK_WIDTH_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CDMA_BASE_CBUF_BANK_WIDTH_0_CDMA_BASE_CBUF_BANK_WIDTH_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_CDMA_BASE_CBUF_BANK_DEPTH_0
> +#define NVDLA_CFGROM_CFGROM_CDMA_BASE_CBUF_BANK_DEPTH_0			_MK_ADDR_CONST(0x4c)
> +#define NVDLA_CFGROM_CFGROM_CDMA_BASE_CBUF_BANK_DEPTH_0_CDMA_BASE_CBUF_BANK_DEPTH_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_CDMA_BASE_CBUF_BANK_DEPTH_0_CDMA_BASE_CBUF_BANK_DEPTH_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CDMA_BASE_CBUF_BANK_DEPTH_0_CDMA_BASE_CBUF_BANK_DEPTH_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_CDMA_MULTI_BATCH_MAX_0
> +#define NVDLA_CFGROM_CFGROM_CDMA_MULTI_BATCH_MAX_0			_MK_ADDR_CONST(0x50)
> +#define NVDLA_CFGROM_CFGROM_CDMA_MULTI_BATCH_MAX_0_CDMA_MULTI_BATCH_MAX_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_CDMA_MULTI_BATCH_MAX_0_CDMA_MULTI_BATCH_MAX_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CDMA_MULTI_BATCH_MAX_0_CDMA_MULTI_BATCH_MAX_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_CDMA_IMAGE_IN_FORMATS_PACKED_0
> +#define NVDLA_CFGROM_CFGROM_CDMA_IMAGE_IN_FORMATS_PACKED_0			_MK_ADDR_CONST(0x54)
> +#define NVDLA_CFGROM_CFGROM_CDMA_IMAGE_IN_FORMATS_PACKED_0_CDMA_IMAGE_IN_FORMATS_PACKED_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_CDMA_IMAGE_IN_FORMATS_PACKED_0_CDMA_IMAGE_IN_FORMATS_PACKED_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CDMA_IMAGE_IN_FORMATS_PACKED_0_CDMA_IMAGE_IN_FORMATS_PACKED_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_CDMA_IMAGE_IN_FORMATS_SEMI_0
> +#define NVDLA_CFGROM_CFGROM_CDMA_IMAGE_IN_FORMATS_SEMI_0			_MK_ADDR_CONST(0x58)
> +#define NVDLA_CFGROM_CFGROM_CDMA_IMAGE_IN_FORMATS_SEMI_0_CDMA_IMAGE_IN_FORMATS_SEMI_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_CDMA_IMAGE_IN_FORMATS_SEMI_0_CDMA_IMAGE_IN_FORMATS_SEMI_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CDMA_IMAGE_IN_FORMATS_SEMI_0_CDMA_IMAGE_IN_FORMATS_SEMI_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_CBUF_DESC_0
> +#define NVDLA_CFGROM_CFGROM_CBUF_DESC_0			_MK_ADDR_CONST(0x5c)
> +#define NVDLA_CFGROM_CFGROM_CBUF_DESC_0_CBUF_DESC_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_CBUF_DESC_0_CBUF_DESC_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CBUF_DESC_0_CBUF_DESC_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_CBUF_CAP_INCOMPAT_0
> +#define NVDLA_CFGROM_CFGROM_CBUF_CAP_INCOMPAT_0			_MK_ADDR_CONST(0x60)
> +#define NVDLA_CFGROM_CFGROM_CBUF_CAP_INCOMPAT_0_CBUF_CAP_INCOMPAT_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_CBUF_CAP_INCOMPAT_0_CBUF_CAP_INCOMPAT_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CBUF_CAP_INCOMPAT_0_CBUF_CAP_INCOMPAT_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_CBUF_CAP_COMPAT_0
> +#define NVDLA_CFGROM_CFGROM_CBUF_CAP_COMPAT_0			_MK_ADDR_CONST(0x64)
> +#define NVDLA_CFGROM_CFGROM_CBUF_CAP_COMPAT_0_CBUF_CAP_COMPAT_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_CBUF_CAP_COMPAT_0_CBUF_CAP_COMPAT_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CBUF_CAP_COMPAT_0_CBUF_CAP_COMPAT_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_CBUF_BASE_CBUF_BANK_NUM_0
> +#define NVDLA_CFGROM_CFGROM_CBUF_BASE_CBUF_BANK_NUM_0			_MK_ADDR_CONST(0x68)
> +#define NVDLA_CFGROM_CFGROM_CBUF_BASE_CBUF_BANK_NUM_0_CBUF_BASE_CBUF_BANK_NUM_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_CBUF_BASE_CBUF_BANK_NUM_0_CBUF_BASE_CBUF_BANK_NUM_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CBUF_BASE_CBUF_BANK_NUM_0_CBUF_BASE_CBUF_BANK_NUM_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_CBUF_BASE_CBUF_BANK_WIDTH_0
> +#define NVDLA_CFGROM_CFGROM_CBUF_BASE_CBUF_BANK_WIDTH_0			_MK_ADDR_CONST(0x6c)
> +#define NVDLA_CFGROM_CFGROM_CBUF_BASE_CBUF_BANK_WIDTH_0_CBUF_BASE_CBUF_BANK_WIDTH_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_CBUF_BASE_CBUF_BANK_WIDTH_0_CBUF_BASE_CBUF_BANK_WIDTH_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CBUF_BASE_CBUF_BANK_WIDTH_0_CBUF_BASE_CBUF_BANK_WIDTH_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_CBUF_BASE_CBUF_BANK_DEPTH_0
> +#define NVDLA_CFGROM_CFGROM_CBUF_BASE_CBUF_BANK_DEPTH_0			_MK_ADDR_CONST(0x70)
> +#define NVDLA_CFGROM_CFGROM_CBUF_BASE_CBUF_BANK_DEPTH_0_CBUF_BASE_CBUF_BANK_DEPTH_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_CBUF_BASE_CBUF_BANK_DEPTH_0_CBUF_BASE_CBUF_BANK_DEPTH_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CBUF_BASE_CBUF_BANK_DEPTH_0_CBUF_BASE_CBUF_BANK_DEPTH_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_CBUF_BASE_CDMA_ID_0
> +#define NVDLA_CFGROM_CFGROM_CBUF_BASE_CDMA_ID_0			_MK_ADDR_CONST(0x74)
> +#define NVDLA_CFGROM_CFGROM_CBUF_BASE_CDMA_ID_0_CBUF_BASE_CDMA_ID_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_CBUF_BASE_CDMA_ID_0_CBUF_BASE_CDMA_ID_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CBUF_BASE_CDMA_ID_0_CBUF_BASE_CDMA_ID_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_CSC_DESC_0
> +#define NVDLA_CFGROM_CFGROM_CSC_DESC_0			_MK_ADDR_CONST(0x78)
> +#define NVDLA_CFGROM_CFGROM_CSC_DESC_0_CSC_DESC_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_CSC_DESC_0_CSC_DESC_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CSC_DESC_0_CSC_DESC_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_CSC_CAP_INCOMPAT_0
> +#define NVDLA_CFGROM_CFGROM_CSC_CAP_INCOMPAT_0			_MK_ADDR_CONST(0x7c)
> +#define NVDLA_CFGROM_CFGROM_CSC_CAP_INCOMPAT_0_CSC_CAP_INCOMPAT_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_CSC_CAP_INCOMPAT_0_CSC_CAP_INCOMPAT_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CSC_CAP_INCOMPAT_0_CSC_CAP_INCOMPAT_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_CSC_CAP_COMPAT_0
> +#define NVDLA_CFGROM_CFGROM_CSC_CAP_COMPAT_0			_MK_ADDR_CONST(0x80)
> +#define NVDLA_CFGROM_CFGROM_CSC_CAP_COMPAT_0_CSC_CAP_COMPAT_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_CSC_CAP_COMPAT_0_CSC_CAP_COMPAT_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CSC_CAP_COMPAT_0_CSC_CAP_COMPAT_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_CSC_BASE_FEATURE_TYPES_0
> +#define NVDLA_CFGROM_CFGROM_CSC_BASE_FEATURE_TYPES_0			_MK_ADDR_CONST(0x84)
> +#define NVDLA_CFGROM_CFGROM_CSC_BASE_FEATURE_TYPES_0_CSC_BASE_FEATURE_TYPES_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_CSC_BASE_FEATURE_TYPES_0_CSC_BASE_FEATURE_TYPES_FIELD			_MK_FIELD_CONST(0xfff, NVDLA_CFGROM_CFGROM_CSC_BASE_FEATURE_TYPES_0_CSC_BASE_FEATURE_TYPES_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_CSC_BASE_WEIGHT_TYPES_0
> +#define NVDLA_CFGROM_CFGROM_CSC_BASE_WEIGHT_TYPES_0			_MK_ADDR_CONST(0x88)
> +#define NVDLA_CFGROM_CFGROM_CSC_BASE_WEIGHT_TYPES_0_CSC_BASE_WEIGHT_TYPES_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_CSC_BASE_WEIGHT_TYPES_0_CSC_BASE_WEIGHT_TYPES_FIELD			_MK_FIELD_CONST(0xfff, NVDLA_CFGROM_CFGROM_CSC_BASE_WEIGHT_TYPES_0_CSC_BASE_WEIGHT_TYPES_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_CSC_BASE_ATOMIC_C_0
> +#define NVDLA_CFGROM_CFGROM_CSC_BASE_ATOMIC_C_0			_MK_ADDR_CONST(0x8c)
> +#define NVDLA_CFGROM_CFGROM_CSC_BASE_ATOMIC_C_0_CSC_BASE_ATOMIC_C_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_CSC_BASE_ATOMIC_C_0_CSC_BASE_ATOMIC_C_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CSC_BASE_ATOMIC_C_0_CSC_BASE_ATOMIC_C_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_CSC_BASE_ATOMIC_K_0
> +#define NVDLA_CFGROM_CFGROM_CSC_BASE_ATOMIC_K_0			_MK_ADDR_CONST(0x90)
> +#define NVDLA_CFGROM_CFGROM_CSC_BASE_ATOMIC_K_0_CSC_BASE_ATOMIC_K_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_CSC_BASE_ATOMIC_K_0_CSC_BASE_ATOMIC_K_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CSC_BASE_ATOMIC_K_0_CSC_BASE_ATOMIC_K_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_CSC_BASE_ATOMIC_M_0
> +#define NVDLA_CFGROM_CFGROM_CSC_BASE_ATOMIC_M_0			_MK_ADDR_CONST(0x94)
> +#define NVDLA_CFGROM_CFGROM_CSC_BASE_ATOMIC_M_0_CSC_BASE_ATOMIC_M_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_CSC_BASE_ATOMIC_M_0_CSC_BASE_ATOMIC_M_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CSC_BASE_ATOMIC_M_0_CSC_BASE_ATOMIC_M_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_CSC_BASE_CBUF_BANK_NUM_0
> +#define NVDLA_CFGROM_CFGROM_CSC_BASE_CBUF_BANK_NUM_0			_MK_ADDR_CONST(0x98)
> +#define NVDLA_CFGROM_CFGROM_CSC_BASE_CBUF_BANK_NUM_0_CSC_BASE_CBUF_BANK_NUM_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_CSC_BASE_CBUF_BANK_NUM_0_CSC_BASE_CBUF_BANK_NUM_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CSC_BASE_CBUF_BANK_NUM_0_CSC_BASE_CBUF_BANK_NUM_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_CSC_BASE_CBUF_BANK_WIDTH_0
> +#define NVDLA_CFGROM_CFGROM_CSC_BASE_CBUF_BANK_WIDTH_0			_MK_ADDR_CONST(0x9c)
> +#define NVDLA_CFGROM_CFGROM_CSC_BASE_CBUF_BANK_WIDTH_0_CSC_BASE_CBUF_BANK_WIDTH_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_CSC_BASE_CBUF_BANK_WIDTH_0_CSC_BASE_CBUF_BANK_WIDTH_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CSC_BASE_CBUF_BANK_WIDTH_0_CSC_BASE_CBUF_BANK_WIDTH_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_CSC_BASE_CBUF_BANK_DEPTH_0
> +#define NVDLA_CFGROM_CFGROM_CSC_BASE_CBUF_BANK_DEPTH_0			_MK_ADDR_CONST(0xa0)
> +#define NVDLA_CFGROM_CFGROM_CSC_BASE_CBUF_BANK_DEPTH_0_CSC_BASE_CBUF_BANK_DEPTH_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_CSC_BASE_CBUF_BANK_DEPTH_0_CSC_BASE_CBUF_BANK_DEPTH_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CSC_BASE_CBUF_BANK_DEPTH_0_CSC_BASE_CBUF_BANK_DEPTH_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_CSC_BASE_CDMA_ID_0
> +#define NVDLA_CFGROM_CFGROM_CSC_BASE_CDMA_ID_0			_MK_ADDR_CONST(0xa4)
> +#define NVDLA_CFGROM_CFGROM_CSC_BASE_CDMA_ID_0_CSC_BASE_CDMA_ID_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_CSC_BASE_CDMA_ID_0_CSC_BASE_CDMA_ID_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CSC_BASE_CDMA_ID_0_CSC_BASE_CDMA_ID_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_CSC_MULTI_BATCH_MAX_0
> +#define NVDLA_CFGROM_CFGROM_CSC_MULTI_BATCH_MAX_0			_MK_ADDR_CONST(0xa8)
> +#define NVDLA_CFGROM_CFGROM_CSC_MULTI_BATCH_MAX_0_CSC_MULTI_BATCH_MAX_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_CSC_MULTI_BATCH_MAX_0_CSC_MULTI_BATCH_MAX_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CSC_MULTI_BATCH_MAX_0_CSC_MULTI_BATCH_MAX_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_CMAC_A_DESC_0
> +#define NVDLA_CFGROM_CFGROM_CMAC_A_DESC_0			_MK_ADDR_CONST(0xac)
> +#define NVDLA_CFGROM_CFGROM_CMAC_A_DESC_0_CMAC_A_DESC_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_CMAC_A_DESC_0_CMAC_A_DESC_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CMAC_A_DESC_0_CMAC_A_DESC_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_CMAC_A_CAP_INCOMPAT_0
> +#define NVDLA_CFGROM_CFGROM_CMAC_A_CAP_INCOMPAT_0			_MK_ADDR_CONST(0xb0)
> +#define NVDLA_CFGROM_CFGROM_CMAC_A_CAP_INCOMPAT_0_CMAC_A_CAP_INCOMPAT_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_CMAC_A_CAP_INCOMPAT_0_CMAC_A_CAP_INCOMPAT_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CMAC_A_CAP_INCOMPAT_0_CMAC_A_CAP_INCOMPAT_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_CMAC_A_CAP_COMPAT_0
> +#define NVDLA_CFGROM_CFGROM_CMAC_A_CAP_COMPAT_0			_MK_ADDR_CONST(0xb4)
> +#define NVDLA_CFGROM_CFGROM_CMAC_A_CAP_COMPAT_0_CMAC_A_CAP_COMPAT_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_CMAC_A_CAP_COMPAT_0_CMAC_A_CAP_COMPAT_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CMAC_A_CAP_COMPAT_0_CMAC_A_CAP_COMPAT_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_CMAC_A_BASE_FEATURE_TYPES_0
> +#define NVDLA_CFGROM_CFGROM_CMAC_A_BASE_FEATURE_TYPES_0			_MK_ADDR_CONST(0xb8)
> +#define NVDLA_CFGROM_CFGROM_CMAC_A_BASE_FEATURE_TYPES_0_CMAC_A_BASE_FEATURE_TYPES_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_CMAC_A_BASE_FEATURE_TYPES_0_CMAC_A_BASE_FEATURE_TYPES_FIELD			_MK_FIELD_CONST(0xfff, NVDLA_CFGROM_CFGROM_CMAC_A_BASE_FEATURE_TYPES_0_CMAC_A_BASE_FEATURE_TYPES_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_CMAC_A_BASE_WEIGHT_TYPES_0
> +#define NVDLA_CFGROM_CFGROM_CMAC_A_BASE_WEIGHT_TYPES_0			_MK_ADDR_CONST(0xbc)
> +#define NVDLA_CFGROM_CFGROM_CMAC_A_BASE_WEIGHT_TYPES_0_CMAC_A_BASE_WEIGHT_TYPES_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_CMAC_A_BASE_WEIGHT_TYPES_0_CMAC_A_BASE_WEIGHT_TYPES_FIELD			_MK_FIELD_CONST(0xfff, NVDLA_CFGROM_CFGROM_CMAC_A_BASE_WEIGHT_TYPES_0_CMAC_A_BASE_WEIGHT_TYPES_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_CMAC_A_BASE_ATOMIC_C_0
> +#define NVDLA_CFGROM_CFGROM_CMAC_A_BASE_ATOMIC_C_0			_MK_ADDR_CONST(0xc0)
> +#define NVDLA_CFGROM_CFGROM_CMAC_A_BASE_ATOMIC_C_0_CMAC_A_BASE_ATOMIC_C_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_CMAC_A_BASE_ATOMIC_C_0_CMAC_A_BASE_ATOMIC_C_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CMAC_A_BASE_ATOMIC_C_0_CMAC_A_BASE_ATOMIC_C_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_CMAC_A_BASE_ATOMIC_K_0
> +#define NVDLA_CFGROM_CFGROM_CMAC_A_BASE_ATOMIC_K_0			_MK_ADDR_CONST(0xc4)
> +#define NVDLA_CFGROM_CFGROM_CMAC_A_BASE_ATOMIC_K_0_CMAC_A_BASE_ATOMIC_K_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_CMAC_A_BASE_ATOMIC_K_0_CMAC_A_BASE_ATOMIC_K_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CMAC_A_BASE_ATOMIC_K_0_CMAC_A_BASE_ATOMIC_K_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_CMAC_A_BASE_CDMA_ID_0
> +#define NVDLA_CFGROM_CFGROM_CMAC_A_BASE_CDMA_ID_0			_MK_ADDR_CONST(0xc8)
> +#define NVDLA_CFGROM_CFGROM_CMAC_A_BASE_CDMA_ID_0_CMAC_A_BASE_CDMA_ID_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_CMAC_A_BASE_CDMA_ID_0_CMAC_A_BASE_CDMA_ID_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CMAC_A_BASE_CDMA_ID_0_CMAC_A_BASE_CDMA_ID_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_CMAC_B_DESC_0
> +#define NVDLA_CFGROM_CFGROM_CMAC_B_DESC_0			_MK_ADDR_CONST(0xcc)
> +#define NVDLA_CFGROM_CFGROM_CMAC_B_DESC_0_CMAC_B_DESC_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_CMAC_B_DESC_0_CMAC_B_DESC_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CMAC_B_DESC_0_CMAC_B_DESC_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_CMAC_B_CAP_INCOMPAT_0
> +#define NVDLA_CFGROM_CFGROM_CMAC_B_CAP_INCOMPAT_0			_MK_ADDR_CONST(0xd0)
> +#define NVDLA_CFGROM_CFGROM_CMAC_B_CAP_INCOMPAT_0_CMAC_B_CAP_INCOMPAT_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_CMAC_B_CAP_INCOMPAT_0_CMAC_B_CAP_INCOMPAT_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CMAC_B_CAP_INCOMPAT_0_CMAC_B_CAP_INCOMPAT_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_CMAC_B_CAP_COMPAT_0
> +#define NVDLA_CFGROM_CFGROM_CMAC_B_CAP_COMPAT_0			_MK_ADDR_CONST(0xd4)
> +#define NVDLA_CFGROM_CFGROM_CMAC_B_CAP_COMPAT_0_CMAC_B_CAP_COMPAT_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_CMAC_B_CAP_COMPAT_0_CMAC_B_CAP_COMPAT_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CMAC_B_CAP_COMPAT_0_CMAC_B_CAP_COMPAT_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_CMAC_B_BASE_FEATURE_TYPES_0
> +#define NVDLA_CFGROM_CFGROM_CMAC_B_BASE_FEATURE_TYPES_0			_MK_ADDR_CONST(0xd8)
> +#define NVDLA_CFGROM_CFGROM_CMAC_B_BASE_FEATURE_TYPES_0_CMAC_B_BASE_FEATURE_TYPES_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_CMAC_B_BASE_FEATURE_TYPES_0_CMAC_B_BASE_FEATURE_TYPES_FIELD			_MK_FIELD_CONST(0xfff, NVDLA_CFGROM_CFGROM_CMAC_B_BASE_FEATURE_TYPES_0_CMAC_B_BASE_FEATURE_TYPES_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_CMAC_B_BASE_WEIGHT_TYPES_0
> +#define NVDLA_CFGROM_CFGROM_CMAC_B_BASE_WEIGHT_TYPES_0			_MK_ADDR_CONST(0xdc)
> +#define NVDLA_CFGROM_CFGROM_CMAC_B_BASE_WEIGHT_TYPES_0_CMAC_B_BASE_WEIGHT_TYPES_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_CMAC_B_BASE_WEIGHT_TYPES_0_CMAC_B_BASE_WEIGHT_TYPES_FIELD			_MK_FIELD_CONST(0xfff, NVDLA_CFGROM_CFGROM_CMAC_B_BASE_WEIGHT_TYPES_0_CMAC_B_BASE_WEIGHT_TYPES_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_CMAC_B_BASE_ATOMIC_C_0
> +#define NVDLA_CFGROM_CFGROM_CMAC_B_BASE_ATOMIC_C_0			_MK_ADDR_CONST(0xe0)
> +#define NVDLA_CFGROM_CFGROM_CMAC_B_BASE_ATOMIC_C_0_CMAC_B_BASE_ATOMIC_C_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_CMAC_B_BASE_ATOMIC_C_0_CMAC_B_BASE_ATOMIC_C_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CMAC_B_BASE_ATOMIC_C_0_CMAC_B_BASE_ATOMIC_C_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_CMAC_B_BASE_ATOMIC_K_0
> +#define NVDLA_CFGROM_CFGROM_CMAC_B_BASE_ATOMIC_K_0			_MK_ADDR_CONST(0xe4)
> +#define NVDLA_CFGROM_CFGROM_CMAC_B_BASE_ATOMIC_K_0_CMAC_B_BASE_ATOMIC_K_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_CMAC_B_BASE_ATOMIC_K_0_CMAC_B_BASE_ATOMIC_K_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CMAC_B_BASE_ATOMIC_K_0_CMAC_B_BASE_ATOMIC_K_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_CMAC_B_BASE_CDMA_ID_0
> +#define NVDLA_CFGROM_CFGROM_CMAC_B_BASE_CDMA_ID_0			_MK_ADDR_CONST(0xe8)
> +#define NVDLA_CFGROM_CFGROM_CMAC_B_BASE_CDMA_ID_0_CMAC_B_BASE_CDMA_ID_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_CMAC_B_BASE_CDMA_ID_0_CMAC_B_BASE_CDMA_ID_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CMAC_B_BASE_CDMA_ID_0_CMAC_B_BASE_CDMA_ID_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_CACC_DESC_0
> +#define NVDLA_CFGROM_CFGROM_CACC_DESC_0			_MK_ADDR_CONST(0xec)
> +#define NVDLA_CFGROM_CFGROM_CACC_DESC_0_CACC_DESC_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_CACC_DESC_0_CACC_DESC_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CACC_DESC_0_CACC_DESC_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_CACC_CAP_INCOMPAT_0
> +#define NVDLA_CFGROM_CFGROM_CACC_CAP_INCOMPAT_0			_MK_ADDR_CONST(0xf0)
> +#define NVDLA_CFGROM_CFGROM_CACC_CAP_INCOMPAT_0_CACC_CAP_INCOMPAT_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_CACC_CAP_INCOMPAT_0_CACC_CAP_INCOMPAT_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CACC_CAP_INCOMPAT_0_CACC_CAP_INCOMPAT_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_CACC_CAP_COMPAT_0
> +#define NVDLA_CFGROM_CFGROM_CACC_CAP_COMPAT_0			_MK_ADDR_CONST(0xf4)
> +#define NVDLA_CFGROM_CFGROM_CACC_CAP_COMPAT_0_CACC_CAP_COMPAT_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_CACC_CAP_COMPAT_0_CACC_CAP_COMPAT_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CACC_CAP_COMPAT_0_CACC_CAP_COMPAT_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_CACC_BASE_FEATURE_TYPES_0
> +#define NVDLA_CFGROM_CFGROM_CACC_BASE_FEATURE_TYPES_0			_MK_ADDR_CONST(0xf8)
> +#define NVDLA_CFGROM_CFGROM_CACC_BASE_FEATURE_TYPES_0_CACC_BASE_FEATURE_TYPES_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_CACC_BASE_FEATURE_TYPES_0_CACC_BASE_FEATURE_TYPES_FIELD			_MK_FIELD_CONST(0xfff, NVDLA_CFGROM_CFGROM_CACC_BASE_FEATURE_TYPES_0_CACC_BASE_FEATURE_TYPES_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_CACC_BASE_WEIGHT_TYPES_0
> +#define NVDLA_CFGROM_CFGROM_CACC_BASE_WEIGHT_TYPES_0			_MK_ADDR_CONST(0xfc)
> +#define NVDLA_CFGROM_CFGROM_CACC_BASE_WEIGHT_TYPES_0_CACC_BASE_WEIGHT_TYPES_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_CACC_BASE_WEIGHT_TYPES_0_CACC_BASE_WEIGHT_TYPES_FIELD			_MK_FIELD_CONST(0xfff, NVDLA_CFGROM_CFGROM_CACC_BASE_WEIGHT_TYPES_0_CACC_BASE_WEIGHT_TYPES_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_CACC_BASE_ATOMIC_C_0
> +#define NVDLA_CFGROM_CFGROM_CACC_BASE_ATOMIC_C_0			_MK_ADDR_CONST(0x100)
> +#define NVDLA_CFGROM_CFGROM_CACC_BASE_ATOMIC_C_0_CACC_BASE_ATOMIC_C_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_CACC_BASE_ATOMIC_C_0_CACC_BASE_ATOMIC_C_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CACC_BASE_ATOMIC_C_0_CACC_BASE_ATOMIC_C_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_CACC_BASE_ATOMIC_K_0
> +#define NVDLA_CFGROM_CFGROM_CACC_BASE_ATOMIC_K_0			_MK_ADDR_CONST(0x104)
> +#define NVDLA_CFGROM_CFGROM_CACC_BASE_ATOMIC_K_0_CACC_BASE_ATOMIC_K_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_CACC_BASE_ATOMIC_K_0_CACC_BASE_ATOMIC_K_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CACC_BASE_ATOMIC_K_0_CACC_BASE_ATOMIC_K_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_CACC_BASE_CDMA_ID_0
> +#define NVDLA_CFGROM_CFGROM_CACC_BASE_CDMA_ID_0			_MK_ADDR_CONST(0x108)
> +#define NVDLA_CFGROM_CFGROM_CACC_BASE_CDMA_ID_0_CACC_BASE_CDMA_ID_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_CACC_BASE_CDMA_ID_0_CACC_BASE_CDMA_ID_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CACC_BASE_CDMA_ID_0_CACC_BASE_CDMA_ID_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_CACC_MULTI_BATCH_MAX_0
> +#define NVDLA_CFGROM_CFGROM_CACC_MULTI_BATCH_MAX_0			_MK_ADDR_CONST(0x10c)
> +#define NVDLA_CFGROM_CFGROM_CACC_MULTI_BATCH_MAX_0_CACC_MULTI_BATCH_MAX_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_CACC_MULTI_BATCH_MAX_0_CACC_MULTI_BATCH_MAX_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CACC_MULTI_BATCH_MAX_0_CACC_MULTI_BATCH_MAX_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_SDP_RDMA_DESC_0
> +#define NVDLA_CFGROM_CFGROM_SDP_RDMA_DESC_0			_MK_ADDR_CONST(0x110)
> +#define NVDLA_CFGROM_CFGROM_SDP_RDMA_DESC_0_SDP_RDMA_DESC_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_SDP_RDMA_DESC_0_SDP_RDMA_DESC_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_SDP_RDMA_DESC_0_SDP_RDMA_DESC_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_SDP_RDMA_CAP_INCOMPAT_0
> +#define NVDLA_CFGROM_CFGROM_SDP_RDMA_CAP_INCOMPAT_0			_MK_ADDR_CONST(0x114)
> +#define NVDLA_CFGROM_CFGROM_SDP_RDMA_CAP_INCOMPAT_0_SDP_RDMA_CAP_INCOMPAT_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_SDP_RDMA_CAP_INCOMPAT_0_SDP_RDMA_CAP_INCOMPAT_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_SDP_RDMA_CAP_INCOMPAT_0_SDP_RDMA_CAP_INCOMPAT_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_SDP_RDMA_CAP_COMPAT_0
> +#define NVDLA_CFGROM_CFGROM_SDP_RDMA_CAP_COMPAT_0			_MK_ADDR_CONST(0x118)
> +#define NVDLA_CFGROM_CFGROM_SDP_RDMA_CAP_COMPAT_0_SDP_RDMA_CAP_COMPAT_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_SDP_RDMA_CAP_COMPAT_0_SDP_RDMA_CAP_COMPAT_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_SDP_RDMA_CAP_COMPAT_0_SDP_RDMA_CAP_COMPAT_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_SDP_RDMA_BASE_ATOMIC_M_0
> +#define NVDLA_CFGROM_CFGROM_SDP_RDMA_BASE_ATOMIC_M_0			_MK_ADDR_CONST(0x11c)
> +#define NVDLA_CFGROM_CFGROM_SDP_RDMA_BASE_ATOMIC_M_0_SDP_RDMA_BASE_ATOMIC_M_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_SDP_RDMA_BASE_ATOMIC_M_0_SDP_RDMA_BASE_ATOMIC_M_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_SDP_RDMA_BASE_ATOMIC_M_0_SDP_RDMA_BASE_ATOMIC_M_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_SDP_RDMA_BASE_SDP_ID_0
> +#define NVDLA_CFGROM_CFGROM_SDP_RDMA_BASE_SDP_ID_0			_MK_ADDR_CONST(0x120)
> +#define NVDLA_CFGROM_CFGROM_SDP_RDMA_BASE_SDP_ID_0_SDP_RDMA_BASE_SDP_ID_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_SDP_RDMA_BASE_SDP_ID_0_SDP_RDMA_BASE_SDP_ID_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_SDP_RDMA_BASE_SDP_ID_0_SDP_RDMA_BASE_SDP_ID_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_SDP_DESC_0
> +#define NVDLA_CFGROM_CFGROM_SDP_DESC_0			_MK_ADDR_CONST(0x124)
> +#define NVDLA_CFGROM_CFGROM_SDP_DESC_0_SDP_DESC_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_SDP_DESC_0_SDP_DESC_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_SDP_DESC_0_SDP_DESC_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_SDP_CAP_INCOMPAT_0
> +#define NVDLA_CFGROM_CFGROM_SDP_CAP_INCOMPAT_0			_MK_ADDR_CONST(0x128)
> +#define NVDLA_CFGROM_CFGROM_SDP_CAP_INCOMPAT_0_SDP_CAP_INCOMPAT_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_SDP_CAP_INCOMPAT_0_SDP_CAP_INCOMPAT_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_SDP_CAP_INCOMPAT_0_SDP_CAP_INCOMPAT_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_SDP_CAP_COMPAT_0
> +#define NVDLA_CFGROM_CFGROM_SDP_CAP_COMPAT_0			_MK_ADDR_CONST(0x12c)
> +#define NVDLA_CFGROM_CFGROM_SDP_CAP_COMPAT_0_SDP_CAP_COMPAT_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_SDP_CAP_COMPAT_0_SDP_CAP_COMPAT_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_SDP_CAP_COMPAT_0_SDP_CAP_COMPAT_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_SDP_BASE_FEATURE_TYPES_0
> +#define NVDLA_CFGROM_CFGROM_SDP_BASE_FEATURE_TYPES_0			_MK_ADDR_CONST(0x130)
> +#define NVDLA_CFGROM_CFGROM_SDP_BASE_FEATURE_TYPES_0_SDP_BASE_FEATURE_TYPES_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_SDP_BASE_FEATURE_TYPES_0_SDP_BASE_FEATURE_TYPES_FIELD			_MK_FIELD_CONST(0xfff, NVDLA_CFGROM_CFGROM_SDP_BASE_FEATURE_TYPES_0_SDP_BASE_FEATURE_TYPES_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_SDP_BASE_WEIGHT_TYPES_0
> +#define NVDLA_CFGROM_CFGROM_SDP_BASE_WEIGHT_TYPES_0			_MK_ADDR_CONST(0x134)
> +#define NVDLA_CFGROM_CFGROM_SDP_BASE_WEIGHT_TYPES_0_SDP_BASE_WEIGHT_TYPES_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_SDP_BASE_WEIGHT_TYPES_0_SDP_BASE_WEIGHT_TYPES_FIELD			_MK_FIELD_CONST(0xfff, NVDLA_CFGROM_CFGROM_SDP_BASE_WEIGHT_TYPES_0_SDP_BASE_WEIGHT_TYPES_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_SDP_BASE_CDMA_ID_0
> +#define NVDLA_CFGROM_CFGROM_SDP_BASE_CDMA_ID_0			_MK_ADDR_CONST(0x138)
> +#define NVDLA_CFGROM_CFGROM_SDP_BASE_CDMA_ID_0_SDP_BASE_CDMA_ID_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_SDP_BASE_CDMA_ID_0_SDP_BASE_CDMA_ID_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_SDP_BASE_CDMA_ID_0_SDP_BASE_CDMA_ID_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_SDP_MULTI_BATCH_MAX_0
> +#define NVDLA_CFGROM_CFGROM_SDP_MULTI_BATCH_MAX_0			_MK_ADDR_CONST(0x13c)
> +#define NVDLA_CFGROM_CFGROM_SDP_MULTI_BATCH_MAX_0_SDP_MULTI_BATCH_MAX_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_SDP_MULTI_BATCH_MAX_0_SDP_MULTI_BATCH_MAX_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_SDP_MULTI_BATCH_MAX_0_SDP_MULTI_BATCH_MAX_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_SDP_BS_THROUGHPUT_0
> +#define NVDLA_CFGROM_CFGROM_SDP_BS_THROUGHPUT_0			_MK_ADDR_CONST(0x140)
> +#define NVDLA_CFGROM_CFGROM_SDP_BS_THROUGHPUT_0_SDP_BS_THROUGHPUT_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_SDP_BS_THROUGHPUT_0_SDP_BS_THROUGHPUT_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_SDP_BS_THROUGHPUT_0_SDP_BS_THROUGHPUT_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_SDP_BN_THROUGHPUT_0
> +#define NVDLA_CFGROM_CFGROM_SDP_BN_THROUGHPUT_0			_MK_ADDR_CONST(0x144)
> +#define NVDLA_CFGROM_CFGROM_SDP_BN_THROUGHPUT_0_SDP_BN_THROUGHPUT_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_SDP_BN_THROUGHPUT_0_SDP_BN_THROUGHPUT_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_SDP_BN_THROUGHPUT_0_SDP_BN_THROUGHPUT_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_SDP_EW_THROUGHPUT_0
> +#define NVDLA_CFGROM_CFGROM_SDP_EW_THROUGHPUT_0			_MK_ADDR_CONST(0x148)
> +#define NVDLA_CFGROM_CFGROM_SDP_EW_THROUGHPUT_0_SDP_EW_THROUGHPUT_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_SDP_EW_THROUGHPUT_0_SDP_EW_THROUGHPUT_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_SDP_EW_THROUGHPUT_0_SDP_EW_THROUGHPUT_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_PDP_RDMA_DESC_0
> +#define NVDLA_CFGROM_CFGROM_PDP_RDMA_DESC_0			_MK_ADDR_CONST(0x14c)
> +#define NVDLA_CFGROM_CFGROM_PDP_RDMA_DESC_0_PDP_RDMA_DESC_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_PDP_RDMA_DESC_0_PDP_RDMA_DESC_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_PDP_RDMA_DESC_0_PDP_RDMA_DESC_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_PDP_RDMA_CAP_INCOMPAT_0
> +#define NVDLA_CFGROM_CFGROM_PDP_RDMA_CAP_INCOMPAT_0			_MK_ADDR_CONST(0x150)
> +#define NVDLA_CFGROM_CFGROM_PDP_RDMA_CAP_INCOMPAT_0_PDP_RDMA_CAP_INCOMPAT_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_PDP_RDMA_CAP_INCOMPAT_0_PDP_RDMA_CAP_INCOMPAT_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_PDP_RDMA_CAP_INCOMPAT_0_PDP_RDMA_CAP_INCOMPAT_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_PDP_RDMA_CAP_COMPAT_0
> +#define NVDLA_CFGROM_CFGROM_PDP_RDMA_CAP_COMPAT_0			_MK_ADDR_CONST(0x154)
> +#define NVDLA_CFGROM_CFGROM_PDP_RDMA_CAP_COMPAT_0_PDP_RDMA_CAP_COMPAT_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_PDP_RDMA_CAP_COMPAT_0_PDP_RDMA_CAP_COMPAT_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_PDP_RDMA_CAP_COMPAT_0_PDP_RDMA_CAP_COMPAT_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_PDP_RDMA_BASE_ATOMIC_M_0
> +#define NVDLA_CFGROM_CFGROM_PDP_RDMA_BASE_ATOMIC_M_0			_MK_ADDR_CONST(0x158)
> +#define NVDLA_CFGROM_CFGROM_PDP_RDMA_BASE_ATOMIC_M_0_PDP_RDMA_BASE_ATOMIC_M_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_PDP_RDMA_BASE_ATOMIC_M_0_PDP_RDMA_BASE_ATOMIC_M_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_PDP_RDMA_BASE_ATOMIC_M_0_PDP_RDMA_BASE_ATOMIC_M_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_PDP_RDMA_BASE_PDP_ID_0
> +#define NVDLA_CFGROM_CFGROM_PDP_RDMA_BASE_PDP_ID_0			_MK_ADDR_CONST(0x15c)
> +#define NVDLA_CFGROM_CFGROM_PDP_RDMA_BASE_PDP_ID_0_PDP_RDMA_BASE_PDP_ID_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_PDP_RDMA_BASE_PDP_ID_0_PDP_RDMA_BASE_PDP_ID_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_PDP_RDMA_BASE_PDP_ID_0_PDP_RDMA_BASE_PDP_ID_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_PDP_DESC_0
> +#define NVDLA_CFGROM_CFGROM_PDP_DESC_0			_MK_ADDR_CONST(0x160)
> +#define NVDLA_CFGROM_CFGROM_PDP_DESC_0_PDP_DESC_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_PDP_DESC_0_PDP_DESC_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_PDP_DESC_0_PDP_DESC_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_PDP_CAP_INCOMPAT_0
> +#define NVDLA_CFGROM_CFGROM_PDP_CAP_INCOMPAT_0			_MK_ADDR_CONST(0x164)
> +#define NVDLA_CFGROM_CFGROM_PDP_CAP_INCOMPAT_0_PDP_CAP_INCOMPAT_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_PDP_CAP_INCOMPAT_0_PDP_CAP_INCOMPAT_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_PDP_CAP_INCOMPAT_0_PDP_CAP_INCOMPAT_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_PDP_CAP_COMPAT_0
> +#define NVDLA_CFGROM_CFGROM_PDP_CAP_COMPAT_0			_MK_ADDR_CONST(0x168)
> +#define NVDLA_CFGROM_CFGROM_PDP_CAP_COMPAT_0_PDP_CAP_COMPAT_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_PDP_CAP_COMPAT_0_PDP_CAP_COMPAT_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_PDP_CAP_COMPAT_0_PDP_CAP_COMPAT_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_PDP_BASE_FEATURE_TYPES_0
> +#define NVDLA_CFGROM_CFGROM_PDP_BASE_FEATURE_TYPES_0			_MK_ADDR_CONST(0x16c)
> +#define NVDLA_CFGROM_CFGROM_PDP_BASE_FEATURE_TYPES_0_PDP_BASE_FEATURE_TYPES_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_PDP_BASE_FEATURE_TYPES_0_PDP_BASE_FEATURE_TYPES_FIELD			_MK_FIELD_CONST(0xfff, NVDLA_CFGROM_CFGROM_PDP_BASE_FEATURE_TYPES_0_PDP_BASE_FEATURE_TYPES_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_PDP_BASE_THROUGHPUT_0
> +#define NVDLA_CFGROM_CFGROM_PDP_BASE_THROUGHPUT_0			_MK_ADDR_CONST(0x170)
> +#define NVDLA_CFGROM_CFGROM_PDP_BASE_THROUGHPUT_0_PDP_BASE_THROUGHPUT_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_PDP_BASE_THROUGHPUT_0_PDP_BASE_THROUGHPUT_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_PDP_BASE_THROUGHPUT_0_PDP_BASE_THROUGHPUT_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_CDP_RDMA_DESC_0
> +#define NVDLA_CFGROM_CFGROM_CDP_RDMA_DESC_0			_MK_ADDR_CONST(0x174)
> +#define NVDLA_CFGROM_CFGROM_CDP_RDMA_DESC_0_CDP_RDMA_DESC_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_CDP_RDMA_DESC_0_CDP_RDMA_DESC_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CDP_RDMA_DESC_0_CDP_RDMA_DESC_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_CDP_RDMA_CAP_INCOMPAT_0
> +#define NVDLA_CFGROM_CFGROM_CDP_RDMA_CAP_INCOMPAT_0			_MK_ADDR_CONST(0x178)
> +#define NVDLA_CFGROM_CFGROM_CDP_RDMA_CAP_INCOMPAT_0_CDP_RDMA_CAP_INCOMPAT_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_CDP_RDMA_CAP_INCOMPAT_0_CDP_RDMA_CAP_INCOMPAT_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CDP_RDMA_CAP_INCOMPAT_0_CDP_RDMA_CAP_INCOMPAT_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_CDP_RDMA_CAP_COMPAT_0
> +#define NVDLA_CFGROM_CFGROM_CDP_RDMA_CAP_COMPAT_0			_MK_ADDR_CONST(0x17c)
> +#define NVDLA_CFGROM_CFGROM_CDP_RDMA_CAP_COMPAT_0_CDP_RDMA_CAP_COMPAT_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_CDP_RDMA_CAP_COMPAT_0_CDP_RDMA_CAP_COMPAT_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CDP_RDMA_CAP_COMPAT_0_CDP_RDMA_CAP_COMPAT_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_CDP_RDMA_BASE_ATOMIC_M_0
> +#define NVDLA_CFGROM_CFGROM_CDP_RDMA_BASE_ATOMIC_M_0			_MK_ADDR_CONST(0x180)
> +#define NVDLA_CFGROM_CFGROM_CDP_RDMA_BASE_ATOMIC_M_0_CDP_RDMA_BASE_ATOMIC_M_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_CDP_RDMA_BASE_ATOMIC_M_0_CDP_RDMA_BASE_ATOMIC_M_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CDP_RDMA_BASE_ATOMIC_M_0_CDP_RDMA_BASE_ATOMIC_M_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_CDP_RDMA_BASE_CDP_ID_0
> +#define NVDLA_CFGROM_CFGROM_CDP_RDMA_BASE_CDP_ID_0			_MK_ADDR_CONST(0x184)
> +#define NVDLA_CFGROM_CFGROM_CDP_RDMA_BASE_CDP_ID_0_CDP_RDMA_BASE_CDP_ID_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_CDP_RDMA_BASE_CDP_ID_0_CDP_RDMA_BASE_CDP_ID_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CDP_RDMA_BASE_CDP_ID_0_CDP_RDMA_BASE_CDP_ID_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_CDP_DESC_0
> +#define NVDLA_CFGROM_CFGROM_CDP_DESC_0			_MK_ADDR_CONST(0x188)
> +#define NVDLA_CFGROM_CFGROM_CDP_DESC_0_CDP_DESC_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_CDP_DESC_0_CDP_DESC_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CDP_DESC_0_CDP_DESC_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_CDP_CAP_INCOMPAT_0
> +#define NVDLA_CFGROM_CFGROM_CDP_CAP_INCOMPAT_0			_MK_ADDR_CONST(0x18c)
> +#define NVDLA_CFGROM_CFGROM_CDP_CAP_INCOMPAT_0_CDP_CAP_INCOMPAT_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_CDP_CAP_INCOMPAT_0_CDP_CAP_INCOMPAT_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CDP_CAP_INCOMPAT_0_CDP_CAP_INCOMPAT_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_CDP_CAP_COMPAT_0
> +#define NVDLA_CFGROM_CFGROM_CDP_CAP_COMPAT_0			_MK_ADDR_CONST(0x190)
> +#define NVDLA_CFGROM_CFGROM_CDP_CAP_COMPAT_0_CDP_CAP_COMPAT_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_CDP_CAP_COMPAT_0_CDP_CAP_COMPAT_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CDP_CAP_COMPAT_0_CDP_CAP_COMPAT_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_CDP_BASE_FEATURE_TYPES_0
> +#define NVDLA_CFGROM_CFGROM_CDP_BASE_FEATURE_TYPES_0			_MK_ADDR_CONST(0x194)
> +#define NVDLA_CFGROM_CFGROM_CDP_BASE_FEATURE_TYPES_0_CDP_BASE_FEATURE_TYPES_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_CDP_BASE_FEATURE_TYPES_0_CDP_BASE_FEATURE_TYPES_FIELD			_MK_FIELD_CONST(0xfff, NVDLA_CFGROM_CFGROM_CDP_BASE_FEATURE_TYPES_0_CDP_BASE_FEATURE_TYPES_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_CDP_BASE_THROUGHPUT_0
> +#define NVDLA_CFGROM_CFGROM_CDP_BASE_THROUGHPUT_0			_MK_ADDR_CONST(0x198)
> +#define NVDLA_CFGROM_CFGROM_CDP_BASE_THROUGHPUT_0_CDP_BASE_THROUGHPUT_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_CDP_BASE_THROUGHPUT_0_CDP_BASE_THROUGHPUT_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_CDP_BASE_THROUGHPUT_0_CDP_BASE_THROUGHPUT_SHIFT)
> +
> +
> +// Register NVDLA_CFGROM_CFGROM_END_OF_LIST_0
> +#define NVDLA_CFGROM_CFGROM_END_OF_LIST_0			_MK_ADDR_CONST(0x19c)
> +#define NVDLA_CFGROM_CFGROM_END_OF_LIST_0_END_OF_LIST_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CFGROM_CFGROM_END_OF_LIST_0_END_OF_LIST_FIELD			_MK_FIELD_CONST(0xffffffff, NVDLA_CFGROM_CFGROM_END_OF_LIST_0_END_OF_LIST_SHIFT)
> +
> +
> +
> +// To satisfy various compilers and platforms,
> +// we let users control the types and syntax of certain constants, using macros.
> +#ifndef _MK_SHIFT_CONST
> +  #define _MK_SHIFT_CONST(_constant_) _constant_
> +#endif
> +#ifndef _MK_MASK_CONST
> +  #define _MK_MASK_CONST(_constant_) _constant_
> +#endif
> +#ifndef _MK_ENUM_CONST
> +  #define _MK_ENUM_CONST(_constant_) (_constant_ ## UL)
> +#endif
> +#ifndef _MK_ADDR_CONST
> +  #define _MK_ADDR_CONST(_constant_) _constant_
> +#endif
> +#ifndef _MK_FIELD_CONST
> +  #define _MK_FIELD_CONST(_mask_, _shift_) (_MK_MASK_CONST(_mask_) << _MK_SHIFT_CONST(_shift_))
> +#endif
> +
> +
> +// Register GLB_S_NVDLA_HW_VERSION_0
> +#define GLB_S_NVDLA_HW_VERSION_0			_MK_ADDR_CONST(0x1000)
> +#define GLB_S_NVDLA_HW_VERSION_0_MAJOR_SHIFT			_MK_SHIFT_CONST(0)
> +#define GLB_S_NVDLA_HW_VERSION_0_MAJOR_FIELD			_MK_FIELD_CONST(0xff, GLB_S_NVDLA_HW_VERSION_0_MAJOR_SHIFT)
> +#define GLB_S_NVDLA_HW_VERSION_0_MINOR_SHIFT			_MK_SHIFT_CONST(8)
> +#define GLB_S_NVDLA_HW_VERSION_0_MINOR_FIELD			_MK_FIELD_CONST(0xffff, GLB_S_NVDLA_HW_VERSION_0_MINOR_SHIFT)
> +
> +
> +// Register GLB_S_INTR_MASK_0
> +#define GLB_S_INTR_MASK_0			_MK_ADDR_CONST(0x1004)
> +#define GLB_S_INTR_MASK_0_SDP_DONE_MASK0_SHIFT			_MK_SHIFT_CONST(0)
> +#define GLB_S_INTR_MASK_0_SDP_DONE_MASK0_FIELD			_MK_FIELD_CONST(0x1, GLB_S_INTR_MASK_0_SDP_DONE_MASK0_SHIFT)
> +#define GLB_S_INTR_MASK_0_SDP_DONE_MASK1_SHIFT			_MK_SHIFT_CONST(1)
> +#define GLB_S_INTR_MASK_0_SDP_DONE_MASK1_FIELD			_MK_FIELD_CONST(0x1, GLB_S_INTR_MASK_0_SDP_DONE_MASK1_SHIFT)
> +#define GLB_S_INTR_MASK_0_CDP_DONE_MASK0_SHIFT			_MK_SHIFT_CONST(2)
> +#define GLB_S_INTR_MASK_0_CDP_DONE_MASK0_FIELD			_MK_FIELD_CONST(0x1, GLB_S_INTR_MASK_0_CDP_DONE_MASK0_SHIFT)
> +#define GLB_S_INTR_MASK_0_CDP_DONE_MASK1_SHIFT			_MK_SHIFT_CONST(3)
> +#define GLB_S_INTR_MASK_0_CDP_DONE_MASK1_FIELD			_MK_FIELD_CONST(0x1, GLB_S_INTR_MASK_0_CDP_DONE_MASK1_SHIFT)
> +#define GLB_S_INTR_MASK_0_PDP_DONE_MASK0_SHIFT			_MK_SHIFT_CONST(4)
> +#define GLB_S_INTR_MASK_0_PDP_DONE_MASK0_FIELD			_MK_FIELD_CONST(0x1, GLB_S_INTR_MASK_0_PDP_DONE_MASK0_SHIFT)
> +#define GLB_S_INTR_MASK_0_PDP_DONE_MASK1_SHIFT			_MK_SHIFT_CONST(5)
> +#define GLB_S_INTR_MASK_0_PDP_DONE_MASK1_FIELD			_MK_FIELD_CONST(0x1, GLB_S_INTR_MASK_0_PDP_DONE_MASK1_SHIFT)
> +#define GLB_S_INTR_MASK_0_BDMA_DONE_MASK0_SHIFT			_MK_SHIFT_CONST(6)
> +#define GLB_S_INTR_MASK_0_BDMA_DONE_MASK0_FIELD			_MK_FIELD_CONST(0x1, GLB_S_INTR_MASK_0_BDMA_DONE_MASK0_SHIFT)
> +#define GLB_S_INTR_MASK_0_BDMA_DONE_MASK1_SHIFT			_MK_SHIFT_CONST(7)
> +#define GLB_S_INTR_MASK_0_BDMA_DONE_MASK1_FIELD			_MK_FIELD_CONST(0x1, GLB_S_INTR_MASK_0_BDMA_DONE_MASK1_SHIFT)
> +#define GLB_S_INTR_MASK_0_RUBIK_DONE_MASK0_SHIFT			_MK_SHIFT_CONST(8)
> +#define GLB_S_INTR_MASK_0_RUBIK_DONE_MASK0_FIELD			_MK_FIELD_CONST(0x1, GLB_S_INTR_MASK_0_RUBIK_DONE_MASK0_SHIFT)
> +#define GLB_S_INTR_MASK_0_RUBIK_DONE_MASK1_SHIFT			_MK_SHIFT_CONST(9)
> +#define GLB_S_INTR_MASK_0_RUBIK_DONE_MASK1_FIELD			_MK_FIELD_CONST(0x1, GLB_S_INTR_MASK_0_RUBIK_DONE_MASK1_SHIFT)
> +#define GLB_S_INTR_MASK_0_CDMA_DAT_DONE_MASK0_SHIFT			_MK_SHIFT_CONST(16)
> +#define GLB_S_INTR_MASK_0_CDMA_DAT_DONE_MASK0_FIELD			_MK_FIELD_CONST(0x1, GLB_S_INTR_MASK_0_CDMA_DAT_DONE_MASK0_SHIFT)
> +#define GLB_S_INTR_MASK_0_CDMA_DAT_DONE_MASK1_SHIFT			_MK_SHIFT_CONST(17)
> +#define GLB_S_INTR_MASK_0_CDMA_DAT_DONE_MASK1_FIELD			_MK_FIELD_CONST(0x1, GLB_S_INTR_MASK_0_CDMA_DAT_DONE_MASK1_SHIFT)
> +#define GLB_S_INTR_MASK_0_CDMA_WT_DONE_MASK0_SHIFT			_MK_SHIFT_CONST(18)
> +#define GLB_S_INTR_MASK_0_CDMA_WT_DONE_MASK0_FIELD			_MK_FIELD_CONST(0x1, GLB_S_INTR_MASK_0_CDMA_WT_DONE_MASK0_SHIFT)
> +#define GLB_S_INTR_MASK_0_CDMA_WT_DONE_MASK1_SHIFT			_MK_SHIFT_CONST(19)
> +#define GLB_S_INTR_MASK_0_CDMA_WT_DONE_MASK1_FIELD			_MK_FIELD_CONST(0x1, GLB_S_INTR_MASK_0_CDMA_WT_DONE_MASK1_SHIFT)
> +#define GLB_S_INTR_MASK_0_CACC_DONE_MASK0_SHIFT			_MK_SHIFT_CONST(20)
> +#define GLB_S_INTR_MASK_0_CACC_DONE_MASK0_FIELD			_MK_FIELD_CONST(0x1, GLB_S_INTR_MASK_0_CACC_DONE_MASK0_SHIFT)
> +#define GLB_S_INTR_MASK_0_CACC_DONE_MASK1_SHIFT			_MK_SHIFT_CONST(21)
> +#define GLB_S_INTR_MASK_0_CACC_DONE_MASK1_FIELD			_MK_FIELD_CONST(0x1, GLB_S_INTR_MASK_0_CACC_DONE_MASK1_SHIFT)
> +
> +
> +// Register GLB_S_INTR_SET_0
> +#define GLB_S_INTR_SET_0			_MK_ADDR_CONST(0x1008)
> +#define GLB_S_INTR_SET_0_SDP_DONE_SET0_SHIFT			_MK_SHIFT_CONST(0)
> +#define GLB_S_INTR_SET_0_SDP_DONE_SET0_FIELD			_MK_FIELD_CONST(0x1, GLB_S_INTR_SET_0_SDP_DONE_SET0_SHIFT)
> +#define GLB_S_INTR_SET_0_SDP_DONE_SET1_SHIFT			_MK_SHIFT_CONST(1)
> +#define GLB_S_INTR_SET_0_SDP_DONE_SET1_FIELD			_MK_FIELD_CONST(0x1, GLB_S_INTR_SET_0_SDP_DONE_SET1_SHIFT)
> +#define GLB_S_INTR_SET_0_CDP_DONE_SET0_SHIFT			_MK_SHIFT_CONST(2)
> +#define GLB_S_INTR_SET_0_CDP_DONE_SET0_FIELD			_MK_FIELD_CONST(0x1, GLB_S_INTR_SET_0_CDP_DONE_SET0_SHIFT)
> +#define GLB_S_INTR_SET_0_CDP_DONE_SET1_SHIFT			_MK_SHIFT_CONST(3)
> +#define GLB_S_INTR_SET_0_CDP_DONE_SET1_FIELD			_MK_FIELD_CONST(0x1, GLB_S_INTR_SET_0_CDP_DONE_SET1_SHIFT)
> +#define GLB_S_INTR_SET_0_PDP_DONE_SET0_SHIFT			_MK_SHIFT_CONST(4)
> +#define GLB_S_INTR_SET_0_PDP_DONE_SET0_FIELD			_MK_FIELD_CONST(0x1, GLB_S_INTR_SET_0_PDP_DONE_SET0_SHIFT)
> +#define GLB_S_INTR_SET_0_PDP_DONE_SET1_SHIFT			_MK_SHIFT_CONST(5)
> +#define GLB_S_INTR_SET_0_PDP_DONE_SET1_FIELD			_MK_FIELD_CONST(0x1, GLB_S_INTR_SET_0_PDP_DONE_SET1_SHIFT)
> +#define GLB_S_INTR_SET_0_BDMA_DONE_SET0_SHIFT			_MK_SHIFT_CONST(6)
> +#define GLB_S_INTR_SET_0_BDMA_DONE_SET0_FIELD			_MK_FIELD_CONST(0x1, GLB_S_INTR_SET_0_BDMA_DONE_SET0_SHIFT)
> +#define GLB_S_INTR_SET_0_BDMA_DONE_SET1_SHIFT			_MK_SHIFT_CONST(7)
> +#define GLB_S_INTR_SET_0_BDMA_DONE_SET1_FIELD			_MK_FIELD_CONST(0x1, GLB_S_INTR_SET_0_BDMA_DONE_SET1_SHIFT)
> +#define GLB_S_INTR_SET_0_RUBIK_DONE_SET0_SHIFT			_MK_SHIFT_CONST(8)
> +#define GLB_S_INTR_SET_0_RUBIK_DONE_SET0_FIELD			_MK_FIELD_CONST(0x1, GLB_S_INTR_SET_0_RUBIK_DONE_SET0_SHIFT)
> +#define GLB_S_INTR_SET_0_RUBIK_DONE_SET1_SHIFT			_MK_SHIFT_CONST(9)
> +#define GLB_S_INTR_SET_0_RUBIK_DONE_SET1_FIELD			_MK_FIELD_CONST(0x1, GLB_S_INTR_SET_0_RUBIK_DONE_SET1_SHIFT)
> +#define GLB_S_INTR_SET_0_CDMA_DAT_DONE_SET0_SHIFT			_MK_SHIFT_CONST(16)
> +#define GLB_S_INTR_SET_0_CDMA_DAT_DONE_SET0_FIELD			_MK_FIELD_CONST(0x1, GLB_S_INTR_SET_0_CDMA_DAT_DONE_SET0_SHIFT)
> +#define GLB_S_INTR_SET_0_CDMA_DAT_DONE_SET1_SHIFT			_MK_SHIFT_CONST(17)
> +#define GLB_S_INTR_SET_0_CDMA_DAT_DONE_SET1_FIELD			_MK_FIELD_CONST(0x1, GLB_S_INTR_SET_0_CDMA_DAT_DONE_SET1_SHIFT)
> +#define GLB_S_INTR_SET_0_CDMA_WT_DONE_SET0_SHIFT			_MK_SHIFT_CONST(18)
> +#define GLB_S_INTR_SET_0_CDMA_WT_DONE_SET0_FIELD			_MK_FIELD_CONST(0x1, GLB_S_INTR_SET_0_CDMA_WT_DONE_SET0_SHIFT)
> +#define GLB_S_INTR_SET_0_CDMA_WT_DONE_SET1_SHIFT			_MK_SHIFT_CONST(19)
> +#define GLB_S_INTR_SET_0_CDMA_WT_DONE_SET1_FIELD			_MK_FIELD_CONST(0x1, GLB_S_INTR_SET_0_CDMA_WT_DONE_SET1_SHIFT)
> +#define GLB_S_INTR_SET_0_CACC_DONE_SET0_SHIFT			_MK_SHIFT_CONST(20)
> +#define GLB_S_INTR_SET_0_CACC_DONE_SET0_FIELD			_MK_FIELD_CONST(0x1, GLB_S_INTR_SET_0_CACC_DONE_SET0_SHIFT)
> +#define GLB_S_INTR_SET_0_CACC_DONE_SET1_SHIFT			_MK_SHIFT_CONST(21)
> +#define GLB_S_INTR_SET_0_CACC_DONE_SET1_FIELD			_MK_FIELD_CONST(0x1, GLB_S_INTR_SET_0_CACC_DONE_SET1_SHIFT)
> +
> +
> +// Register GLB_S_INTR_STATUS_0
> +#define GLB_S_INTR_STATUS_0			_MK_ADDR_CONST(0x100c)
> +#define GLB_S_INTR_STATUS_0_SDP_DONE_STATUS0_SHIFT			_MK_SHIFT_CONST(0)
> +#define GLB_S_INTR_STATUS_0_SDP_DONE_STATUS0_FIELD			_MK_FIELD_CONST(0x1, GLB_S_INTR_STATUS_0_SDP_DONE_STATUS0_SHIFT)
> +#define GLB_S_INTR_STATUS_0_SDP_DONE_STATUS1_SHIFT			_MK_SHIFT_CONST(1)
> +#define GLB_S_INTR_STATUS_0_SDP_DONE_STATUS1_FIELD			_MK_FIELD_CONST(0x1, GLB_S_INTR_STATUS_0_SDP_DONE_STATUS1_SHIFT)
> +#define GLB_S_INTR_STATUS_0_CDP_DONE_STATUS0_SHIFT			_MK_SHIFT_CONST(2)
> +#define GLB_S_INTR_STATUS_0_CDP_DONE_STATUS0_FIELD			_MK_FIELD_CONST(0x1, GLB_S_INTR_STATUS_0_CDP_DONE_STATUS0_SHIFT)
> +#define GLB_S_INTR_STATUS_0_CDP_DONE_STATUS1_SHIFT			_MK_SHIFT_CONST(3)
> +#define GLB_S_INTR_STATUS_0_CDP_DONE_STATUS1_FIELD			_MK_FIELD_CONST(0x1, GLB_S_INTR_STATUS_0_CDP_DONE_STATUS1_SHIFT)
> +#define GLB_S_INTR_STATUS_0_PDP_DONE_STATUS0_SHIFT			_MK_SHIFT_CONST(4)
> +#define GLB_S_INTR_STATUS_0_PDP_DONE_STATUS0_FIELD			_MK_FIELD_CONST(0x1, GLB_S_INTR_STATUS_0_PDP_DONE_STATUS0_SHIFT)
> +#define GLB_S_INTR_STATUS_0_PDP_DONE_STATUS1_SHIFT			_MK_SHIFT_CONST(5)
> +#define GLB_S_INTR_STATUS_0_PDP_DONE_STATUS1_FIELD			_MK_FIELD_CONST(0x1, GLB_S_INTR_STATUS_0_PDP_DONE_STATUS1_SHIFT)
> +#define GLB_S_INTR_STATUS_0_BDMA_DONE_STATUS0_SHIFT			_MK_SHIFT_CONST(6)
> +#define GLB_S_INTR_STATUS_0_BDMA_DONE_STATUS0_FIELD			_MK_FIELD_CONST(0x1, GLB_S_INTR_STATUS_0_BDMA_DONE_STATUS0_SHIFT)
> +#define GLB_S_INTR_STATUS_0_BDMA_DONE_STATUS1_SHIFT			_MK_SHIFT_CONST(7)
> +#define GLB_S_INTR_STATUS_0_BDMA_DONE_STATUS1_FIELD			_MK_FIELD_CONST(0x1, GLB_S_INTR_STATUS_0_BDMA_DONE_STATUS1_SHIFT)
> +#define GLB_S_INTR_STATUS_0_RUBIK_DONE_STATUS0_SHIFT			_MK_SHIFT_CONST(8)
> +#define GLB_S_INTR_STATUS_0_RUBIK_DONE_STATUS0_FIELD			_MK_FIELD_CONST(0x1, GLB_S_INTR_STATUS_0_RUBIK_DONE_STATUS0_SHIFT)
> +#define GLB_S_INTR_STATUS_0_RUBIK_DONE_STATUS1_SHIFT			_MK_SHIFT_CONST(9)
> +#define GLB_S_INTR_STATUS_0_RUBIK_DONE_STATUS1_FIELD			_MK_FIELD_CONST(0x1, GLB_S_INTR_STATUS_0_RUBIK_DONE_STATUS1_SHIFT)
> +#define GLB_S_INTR_STATUS_0_CDMA_DAT_DONE_STATUS0_SHIFT			_MK_SHIFT_CONST(16)
> +#define GLB_S_INTR_STATUS_0_CDMA_DAT_DONE_STATUS0_FIELD			_MK_FIELD_CONST(0x1, GLB_S_INTR_STATUS_0_CDMA_DAT_DONE_STATUS0_SHIFT)
> +#define GLB_S_INTR_STATUS_0_CDMA_DAT_DONE_STATUS1_SHIFT			_MK_SHIFT_CONST(17)
> +#define GLB_S_INTR_STATUS_0_CDMA_DAT_DONE_STATUS1_FIELD			_MK_FIELD_CONST(0x1, GLB_S_INTR_STATUS_0_CDMA_DAT_DONE_STATUS1_SHIFT)
> +#define GLB_S_INTR_STATUS_0_CDMA_WT_DONE_STATUS0_SHIFT			_MK_SHIFT_CONST(18)
> +#define GLB_S_INTR_STATUS_0_CDMA_WT_DONE_STATUS0_FIELD			_MK_FIELD_CONST(0x1, GLB_S_INTR_STATUS_0_CDMA_WT_DONE_STATUS0_SHIFT)
> +#define GLB_S_INTR_STATUS_0_CDMA_WT_DONE_STATUS1_SHIFT			_MK_SHIFT_CONST(19)
> +#define GLB_S_INTR_STATUS_0_CDMA_WT_DONE_STATUS1_FIELD			_MK_FIELD_CONST(0x1, GLB_S_INTR_STATUS_0_CDMA_WT_DONE_STATUS1_SHIFT)
> +#define GLB_S_INTR_STATUS_0_CACC_DONE_STATUS0_SHIFT			_MK_SHIFT_CONST(20)
> +#define GLB_S_INTR_STATUS_0_CACC_DONE_STATUS0_FIELD			_MK_FIELD_CONST(0x1, GLB_S_INTR_STATUS_0_CACC_DONE_STATUS0_SHIFT)
> +#define GLB_S_INTR_STATUS_0_CACC_DONE_STATUS1_SHIFT			_MK_SHIFT_CONST(21)
> +#define GLB_S_INTR_STATUS_0_CACC_DONE_STATUS1_FIELD			_MK_FIELD_CONST(0x1, GLB_S_INTR_STATUS_0_CACC_DONE_STATUS1_SHIFT)
> +
> +
> +
> +// To satisfy various compilers and platforms,
> +// we let users control the types and syntax of certain constants, using macros.
> +#ifndef _MK_SHIFT_CONST
> +  #define _MK_SHIFT_CONST(_constant_) _constant_
> +#endif
> +#ifndef _MK_MASK_CONST
> +  #define _MK_MASK_CONST(_constant_) _constant_
> +#endif
> +#ifndef _MK_ENUM_CONST
> +  #define _MK_ENUM_CONST(_constant_) (_constant_ ## UL)
> +#endif
> +#ifndef _MK_ADDR_CONST
> +  #define _MK_ADDR_CONST(_constant_) _constant_
> +#endif
> +#ifndef _MK_FIELD_CONST
> +  #define _MK_FIELD_CONST(_mask_, _shift_) (_MK_MASK_CONST(_mask_) << _MK_SHIFT_CONST(_shift_))
> +#endif
> +
> +
> +// Register NVDLA_MCIF_CFG_RD_WEIGHT_0_0
> +#define NVDLA_MCIF_CFG_RD_WEIGHT_0_0			_MK_ADDR_CONST(0x2000)
> +#define NVDLA_MCIF_CFG_RD_WEIGHT_0_0_RD_WEIGHT_BDMA_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_MCIF_CFG_RD_WEIGHT_0_0_RD_WEIGHT_BDMA_FIELD			_MK_FIELD_CONST(0xff, NVDLA_MCIF_CFG_RD_WEIGHT_0_0_RD_WEIGHT_BDMA_SHIFT)
> +#define NVDLA_MCIF_CFG_RD_WEIGHT_0_0_RD_WEIGHT_SDP_SHIFT			_MK_SHIFT_CONST(8)
> +#define NVDLA_MCIF_CFG_RD_WEIGHT_0_0_RD_WEIGHT_SDP_FIELD			_MK_FIELD_CONST(0xff, NVDLA_MCIF_CFG_RD_WEIGHT_0_0_RD_WEIGHT_SDP_SHIFT)
> +#define NVDLA_MCIF_CFG_RD_WEIGHT_0_0_RD_WEIGHT_PDP_SHIFT			_MK_SHIFT_CONST(16)
> +#define NVDLA_MCIF_CFG_RD_WEIGHT_0_0_RD_WEIGHT_PDP_FIELD			_MK_FIELD_CONST(0xff, NVDLA_MCIF_CFG_RD_WEIGHT_0_0_RD_WEIGHT_PDP_SHIFT)
> +#define NVDLA_MCIF_CFG_RD_WEIGHT_0_0_RD_WEIGHT_CDP_SHIFT			_MK_SHIFT_CONST(24)
> +#define NVDLA_MCIF_CFG_RD_WEIGHT_0_0_RD_WEIGHT_CDP_FIELD			_MK_FIELD_CONST(0xff, NVDLA_MCIF_CFG_RD_WEIGHT_0_0_RD_WEIGHT_CDP_SHIFT)
> +
> +
> +// Register NVDLA_MCIF_CFG_RD_WEIGHT_1_0
> +#define NVDLA_MCIF_CFG_RD_WEIGHT_1_0			_MK_ADDR_CONST(0x2004)
> +#define NVDLA_MCIF_CFG_RD_WEIGHT_1_0_RD_WEIGHT_SDP_B_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_MCIF_CFG_RD_WEIGHT_1_0_RD_WEIGHT_SDP_B_FIELD			_MK_FIELD_CONST(0xff, NVDLA_MCIF_CFG_RD_WEIGHT_1_0_RD_WEIGHT_SDP_B_SHIFT)
> +#define NVDLA_MCIF_CFG_RD_WEIGHT_1_0_RD_WEIGHT_SDP_N_SHIFT			_MK_SHIFT_CONST(8)
> +#define NVDLA_MCIF_CFG_RD_WEIGHT_1_0_RD_WEIGHT_SDP_N_FIELD			_MK_FIELD_CONST(0xff, NVDLA_MCIF_CFG_RD_WEIGHT_1_0_RD_WEIGHT_SDP_N_SHIFT)
> +#define NVDLA_MCIF_CFG_RD_WEIGHT_1_0_RD_WEIGHT_SDP_E_SHIFT			_MK_SHIFT_CONST(16)
> +#define NVDLA_MCIF_CFG_RD_WEIGHT_1_0_RD_WEIGHT_SDP_E_FIELD			_MK_FIELD_CONST(0xff, NVDLA_MCIF_CFG_RD_WEIGHT_1_0_RD_WEIGHT_SDP_E_SHIFT)
> +#define NVDLA_MCIF_CFG_RD_WEIGHT_1_0_RD_WEIGHT_CDMA_DAT_SHIFT			_MK_SHIFT_CONST(24)
> +#define NVDLA_MCIF_CFG_RD_WEIGHT_1_0_RD_WEIGHT_CDMA_DAT_FIELD			_MK_FIELD_CONST(0xff, NVDLA_MCIF_CFG_RD_WEIGHT_1_0_RD_WEIGHT_CDMA_DAT_SHIFT)
> +
> +
> +// Register NVDLA_MCIF_CFG_RD_WEIGHT_2_0
> +#define NVDLA_MCIF_CFG_RD_WEIGHT_2_0			_MK_ADDR_CONST(0x2008)
> +#define NVDLA_MCIF_CFG_RD_WEIGHT_2_0_RD_WEIGHT_CDMA_WT_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_MCIF_CFG_RD_WEIGHT_2_0_RD_WEIGHT_CDMA_WT_FIELD			_MK_FIELD_CONST(0xff, NVDLA_MCIF_CFG_RD_WEIGHT_2_0_RD_WEIGHT_CDMA_WT_SHIFT)
> +#define NVDLA_MCIF_CFG_RD_WEIGHT_2_0_RD_WEIGHT_RBK_SHIFT			_MK_SHIFT_CONST(8)
> +#define NVDLA_MCIF_CFG_RD_WEIGHT_2_0_RD_WEIGHT_RBK_FIELD			_MK_FIELD_CONST(0xff, NVDLA_MCIF_CFG_RD_WEIGHT_2_0_RD_WEIGHT_RBK_SHIFT)
> +#define NVDLA_MCIF_CFG_RD_WEIGHT_2_0_RD_WEIGHT_RSV_1_SHIFT			_MK_SHIFT_CONST(16)
> +#define NVDLA_MCIF_CFG_RD_WEIGHT_2_0_RD_WEIGHT_RSV_1_FIELD			_MK_FIELD_CONST(0xff, NVDLA_MCIF_CFG_RD_WEIGHT_2_0_RD_WEIGHT_RSV_1_SHIFT)
> +#define NVDLA_MCIF_CFG_RD_WEIGHT_2_0_RD_WEIGHT_RSV_0_SHIFT			_MK_SHIFT_CONST(24)
> +#define NVDLA_MCIF_CFG_RD_WEIGHT_2_0_RD_WEIGHT_RSV_0_FIELD			_MK_FIELD_CONST(0xff, NVDLA_MCIF_CFG_RD_WEIGHT_2_0_RD_WEIGHT_RSV_0_SHIFT)
> +
> +
> +// Register NVDLA_MCIF_CFG_WR_WEIGHT_0_0
> +#define NVDLA_MCIF_CFG_WR_WEIGHT_0_0			_MK_ADDR_CONST(0x200c)
> +#define NVDLA_MCIF_CFG_WR_WEIGHT_0_0_WR_WEIGHT_BDMA_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_MCIF_CFG_WR_WEIGHT_0_0_WR_WEIGHT_BDMA_FIELD			_MK_FIELD_CONST(0xff, NVDLA_MCIF_CFG_WR_WEIGHT_0_0_WR_WEIGHT_BDMA_SHIFT)
> +#define NVDLA_MCIF_CFG_WR_WEIGHT_0_0_WR_WEIGHT_SDP_SHIFT			_MK_SHIFT_CONST(8)
> +#define NVDLA_MCIF_CFG_WR_WEIGHT_0_0_WR_WEIGHT_SDP_FIELD			_MK_FIELD_CONST(0xff, NVDLA_MCIF_CFG_WR_WEIGHT_0_0_WR_WEIGHT_SDP_SHIFT)
> +#define NVDLA_MCIF_CFG_WR_WEIGHT_0_0_WR_WEIGHT_PDP_SHIFT			_MK_SHIFT_CONST(16)
> +#define NVDLA_MCIF_CFG_WR_WEIGHT_0_0_WR_WEIGHT_PDP_FIELD			_MK_FIELD_CONST(0xff, NVDLA_MCIF_CFG_WR_WEIGHT_0_0_WR_WEIGHT_PDP_SHIFT)
> +#define NVDLA_MCIF_CFG_WR_WEIGHT_0_0_WR_WEIGHT_CDP_SHIFT			_MK_SHIFT_CONST(24)
> +#define NVDLA_MCIF_CFG_WR_WEIGHT_0_0_WR_WEIGHT_CDP_FIELD			_MK_FIELD_CONST(0xff, NVDLA_MCIF_CFG_WR_WEIGHT_0_0_WR_WEIGHT_CDP_SHIFT)
> +
> +
> +// Register NVDLA_MCIF_CFG_WR_WEIGHT_1_0
> +#define NVDLA_MCIF_CFG_WR_WEIGHT_1_0			_MK_ADDR_CONST(0x2010)
> +#define NVDLA_MCIF_CFG_WR_WEIGHT_1_0_WR_WEIGHT_RBK_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_MCIF_CFG_WR_WEIGHT_1_0_WR_WEIGHT_RBK_FIELD			_MK_FIELD_CONST(0xff, NVDLA_MCIF_CFG_WR_WEIGHT_1_0_WR_WEIGHT_RBK_SHIFT)
> +#define NVDLA_MCIF_CFG_WR_WEIGHT_1_0_WR_WEIGHT_RSV_2_SHIFT			_MK_SHIFT_CONST(8)
> +#define NVDLA_MCIF_CFG_WR_WEIGHT_1_0_WR_WEIGHT_RSV_2_FIELD			_MK_FIELD_CONST(0xff, NVDLA_MCIF_CFG_WR_WEIGHT_1_0_WR_WEIGHT_RSV_2_SHIFT)
> +#define NVDLA_MCIF_CFG_WR_WEIGHT_1_0_WR_WEIGHT_RSV_1_SHIFT			_MK_SHIFT_CONST(16)
> +#define NVDLA_MCIF_CFG_WR_WEIGHT_1_0_WR_WEIGHT_RSV_1_FIELD			_MK_FIELD_CONST(0xff, NVDLA_MCIF_CFG_WR_WEIGHT_1_0_WR_WEIGHT_RSV_1_SHIFT)
> +#define NVDLA_MCIF_CFG_WR_WEIGHT_1_0_WR_WEIGHT_RSV_0_SHIFT			_MK_SHIFT_CONST(24)
> +#define NVDLA_MCIF_CFG_WR_WEIGHT_1_0_WR_WEIGHT_RSV_0_FIELD			_MK_FIELD_CONST(0xff, NVDLA_MCIF_CFG_WR_WEIGHT_1_0_WR_WEIGHT_RSV_0_SHIFT)
> +
> +
> +// Register NVDLA_MCIF_CFG_OUTSTANDING_CNT_0
> +#define NVDLA_MCIF_CFG_OUTSTANDING_CNT_0			_MK_ADDR_CONST(0x2014)
> +#define NVDLA_MCIF_CFG_OUTSTANDING_CNT_0_RD_OS_CNT_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_MCIF_CFG_OUTSTANDING_CNT_0_RD_OS_CNT_FIELD			_MK_FIELD_CONST(0xff, NVDLA_MCIF_CFG_OUTSTANDING_CNT_0_RD_OS_CNT_SHIFT)
> +#define NVDLA_MCIF_CFG_OUTSTANDING_CNT_0_WR_OS_CNT_SHIFT			_MK_SHIFT_CONST(8)
> +#define NVDLA_MCIF_CFG_OUTSTANDING_CNT_0_WR_OS_CNT_FIELD			_MK_FIELD_CONST(0xff, NVDLA_MCIF_CFG_OUTSTANDING_CNT_0_WR_OS_CNT_SHIFT)
> +
> +
> +// Register NVDLA_MCIF_STATUS_0
> +#define NVDLA_MCIF_STATUS_0			_MK_ADDR_CONST(0x2018)
> +#define NVDLA_MCIF_STATUS_0_IDLE_SHIFT			_MK_SHIFT_CONST(8)
> +#define NVDLA_MCIF_STATUS_0_IDLE_FIELD			_MK_FIELD_CONST(0x1, NVDLA_MCIF_STATUS_0_IDLE_SHIFT)
> +#define NVDLA_MCIF_STATUS_0_IDLE_NO			_MK_ENUM_CONST(0x0)
> +#define NVDLA_MCIF_STATUS_0_IDLE_YES			_MK_ENUM_CONST(0x1)
> +
> +
> +
> +// To satisfy various compilers and platforms,
> +// we let users control the types and syntax of certain constants, using macros.
> +#ifndef _MK_SHIFT_CONST
> +  #define _MK_SHIFT_CONST(_constant_) _constant_
> +#endif
> +#ifndef _MK_MASK_CONST
> +  #define _MK_MASK_CONST(_constant_) _constant_
> +#endif
> +#ifndef _MK_ENUM_CONST
> +  #define _MK_ENUM_CONST(_constant_) (_constant_ ## UL)
> +#endif
> +#ifndef _MK_ADDR_CONST
> +  #define _MK_ADDR_CONST(_constant_) _constant_
> +#endif
> +#ifndef _MK_FIELD_CONST
> +  #define _MK_FIELD_CONST(_mask_, _shift_) (_MK_MASK_CONST(_mask_) << _MK_SHIFT_CONST(_shift_))
> +#endif
> +
> +
> +// Register CDMA_S_STATUS_0
> +#define CDMA_S_STATUS_0			_MK_ADDR_CONST(0x3000)
> +#define CDMA_S_STATUS_0_STATUS_0_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDMA_S_STATUS_0_STATUS_0_FIELD			_MK_FIELD_CONST(0x3, CDMA_S_STATUS_0_STATUS_0_SHIFT)
> +#define CDMA_S_STATUS_0_STATUS_0_IDLE			_MK_ENUM_CONST(0x0)
> +#define CDMA_S_STATUS_0_STATUS_0_RUNNING			_MK_ENUM_CONST(0x1)
> +#define CDMA_S_STATUS_0_STATUS_0_PENDING			_MK_ENUM_CONST(0x2)
> +#define CDMA_S_STATUS_0_STATUS_1_SHIFT			_MK_SHIFT_CONST(16)
> +#define CDMA_S_STATUS_0_STATUS_1_FIELD			_MK_FIELD_CONST(0x3, CDMA_S_STATUS_0_STATUS_1_SHIFT)
> +#define CDMA_S_STATUS_0_STATUS_1_IDLE			_MK_ENUM_CONST(0x0)
> +#define CDMA_S_STATUS_0_STATUS_1_RUNNING			_MK_ENUM_CONST(0x1)
> +#define CDMA_S_STATUS_0_STATUS_1_PENDING			_MK_ENUM_CONST(0x2)
> +
> +
> +// Register CDMA_S_POINTER_0
> +#define CDMA_S_POINTER_0			_MK_ADDR_CONST(0x3004)
> +#define CDMA_S_POINTER_0_PRODUCER_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDMA_S_POINTER_0_PRODUCER_FIELD			_MK_FIELD_CONST(0x1, CDMA_S_POINTER_0_PRODUCER_SHIFT)
> +#define CDMA_S_POINTER_0_PRODUCER_GROUP_0			_MK_ENUM_CONST(0x0)
> +#define CDMA_S_POINTER_0_PRODUCER_GROUP_1			_MK_ENUM_CONST(0x1)
> +#define CDMA_S_POINTER_0_CONSUMER_SHIFT			_MK_SHIFT_CONST(16)
> +#define CDMA_S_POINTER_0_CONSUMER_FIELD			_MK_FIELD_CONST(0x1, CDMA_S_POINTER_0_CONSUMER_SHIFT)
> +#define CDMA_S_POINTER_0_CONSUMER_GROUP_0			_MK_ENUM_CONST(0x0)
> +#define CDMA_S_POINTER_0_CONSUMER_GROUP_1			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register CDMA_S_ARBITER_0
> +#define CDMA_S_ARBITER_0			_MK_ADDR_CONST(0x3008)
> +#define CDMA_S_ARBITER_0_ARB_WEIGHT_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDMA_S_ARBITER_0_ARB_WEIGHT_FIELD			_MK_FIELD_CONST(0xf, CDMA_S_ARBITER_0_ARB_WEIGHT_SHIFT)
> +#define CDMA_S_ARBITER_0_ARB_WMB_SHIFT			_MK_SHIFT_CONST(16)
> +#define CDMA_S_ARBITER_0_ARB_WMB_FIELD			_MK_FIELD_CONST(0xf, CDMA_S_ARBITER_0_ARB_WMB_SHIFT)
> +
> +
> +// Register CDMA_S_CBUF_FLUSH_STATUS_0
> +#define CDMA_S_CBUF_FLUSH_STATUS_0			_MK_ADDR_CONST(0x300c)
> +#define CDMA_S_CBUF_FLUSH_STATUS_0_FLUSH_DONE_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDMA_S_CBUF_FLUSH_STATUS_0_FLUSH_DONE_FIELD			_MK_FIELD_CONST(0x1, CDMA_S_CBUF_FLUSH_STATUS_0_FLUSH_DONE_SHIFT)
> +
> +
> +// Register CDMA_D_OP_ENABLE_0
> +#define CDMA_D_OP_ENABLE_0			_MK_ADDR_CONST(0x3010)
> +#define CDMA_D_OP_ENABLE_0_OP_EN_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDMA_D_OP_ENABLE_0_OP_EN_FIELD			_MK_FIELD_CONST(0x1, CDMA_D_OP_ENABLE_0_OP_EN_SHIFT)
> +#define CDMA_D_OP_ENABLE_0_OP_EN_DISABLE			_MK_ENUM_CONST(0x0)
> +#define CDMA_D_OP_ENABLE_0_OP_EN_ENABLE			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register CDMA_D_MISC_CFG_0
> +#define CDMA_D_MISC_CFG_0			_MK_ADDR_CONST(0x3014)
> +#define CDMA_D_MISC_CFG_0_CONV_MODE_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDMA_D_MISC_CFG_0_CONV_MODE_FIELD			_MK_FIELD_CONST(0x1, CDMA_D_MISC_CFG_0_CONV_MODE_SHIFT)
> +#define CDMA_D_MISC_CFG_0_CONV_MODE_DIRECT			_MK_ENUM_CONST(0x0)
> +#define CDMA_D_MISC_CFG_0_CONV_MODE_WINOGRAD			_MK_ENUM_CONST(0x1)
> +#define CDMA_D_MISC_CFG_0_IN_PRECISION_SHIFT			_MK_SHIFT_CONST(8)
> +#define CDMA_D_MISC_CFG_0_IN_PRECISION_FIELD			_MK_FIELD_CONST(0x3, CDMA_D_MISC_CFG_0_IN_PRECISION_SHIFT)
> +#define CDMA_D_MISC_CFG_0_IN_PRECISION_INT8			_MK_ENUM_CONST(0x0)
> +#define CDMA_D_MISC_CFG_0_IN_PRECISION_INT16			_MK_ENUM_CONST(0x1)
> +#define CDMA_D_MISC_CFG_0_IN_PRECISION_FP16			_MK_ENUM_CONST(0x2)
> +#define CDMA_D_MISC_CFG_0_PROC_PRECISION_SHIFT			_MK_SHIFT_CONST(12)
> +#define CDMA_D_MISC_CFG_0_PROC_PRECISION_FIELD			_MK_FIELD_CONST(0x3, CDMA_D_MISC_CFG_0_PROC_PRECISION_SHIFT)
> +#define CDMA_D_MISC_CFG_0_PROC_PRECISION_INT8			_MK_ENUM_CONST(0x0)
> +#define CDMA_D_MISC_CFG_0_PROC_PRECISION_INT16			_MK_ENUM_CONST(0x1)
> +#define CDMA_D_MISC_CFG_0_PROC_PRECISION_FP16			_MK_ENUM_CONST(0x2)
> +#define CDMA_D_MISC_CFG_0_DATA_REUSE_SHIFT			_MK_SHIFT_CONST(16)
> +#define CDMA_D_MISC_CFG_0_DATA_REUSE_FIELD			_MK_FIELD_CONST(0x1, CDMA_D_MISC_CFG_0_DATA_REUSE_SHIFT)
> +#define CDMA_D_MISC_CFG_0_DATA_REUSE_DISABLE			_MK_ENUM_CONST(0x0)
> +#define CDMA_D_MISC_CFG_0_DATA_REUSE_ENABLE			_MK_ENUM_CONST(0x1)
> +#define CDMA_D_MISC_CFG_0_WEIGHT_REUSE_SHIFT			_MK_SHIFT_CONST(20)
> +#define CDMA_D_MISC_CFG_0_WEIGHT_REUSE_FIELD			_MK_FIELD_CONST(0x1, CDMA_D_MISC_CFG_0_WEIGHT_REUSE_SHIFT)
> +#define CDMA_D_MISC_CFG_0_WEIGHT_REUSE_DISABLE			_MK_ENUM_CONST(0x0)
> +#define CDMA_D_MISC_CFG_0_WEIGHT_REUSE_ENABLE			_MK_ENUM_CONST(0x1)
> +#define CDMA_D_MISC_CFG_0_SKIP_DATA_RLS_SHIFT			_MK_SHIFT_CONST(24)
> +#define CDMA_D_MISC_CFG_0_SKIP_DATA_RLS_FIELD			_MK_FIELD_CONST(0x1, CDMA_D_MISC_CFG_0_SKIP_DATA_RLS_SHIFT)
> +#define CDMA_D_MISC_CFG_0_SKIP_DATA_RLS_DISABLE			_MK_ENUM_CONST(0x0)
> +#define CDMA_D_MISC_CFG_0_SKIP_DATA_RLS_ENABLE			_MK_ENUM_CONST(0x1)
> +#define CDMA_D_MISC_CFG_0_SKIP_WEIGHT_RLS_SHIFT			_MK_SHIFT_CONST(28)
> +#define CDMA_D_MISC_CFG_0_SKIP_WEIGHT_RLS_FIELD			_MK_FIELD_CONST(0x1, CDMA_D_MISC_CFG_0_SKIP_WEIGHT_RLS_SHIFT)
> +#define CDMA_D_MISC_CFG_0_SKIP_WEIGHT_RLS_DISABLE			_MK_ENUM_CONST(0x0)
> +#define CDMA_D_MISC_CFG_0_SKIP_WEIGHT_RLS_ENABLE			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register CDMA_D_DATAIN_FORMAT_0
> +#define CDMA_D_DATAIN_FORMAT_0			_MK_ADDR_CONST(0x3018)
> +#define CDMA_D_DATAIN_FORMAT_0_DATAIN_FORMAT_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDMA_D_DATAIN_FORMAT_0_DATAIN_FORMAT_FIELD			_MK_FIELD_CONST(0x1, CDMA_D_DATAIN_FORMAT_0_DATAIN_FORMAT_SHIFT)
> +#define CDMA_D_DATAIN_FORMAT_0_DATAIN_FORMAT_FEATURE			_MK_ENUM_CONST(0x0)
> +#define CDMA_D_DATAIN_FORMAT_0_DATAIN_FORMAT_PIXEL			_MK_ENUM_CONST(0x1)
> +#define CDMA_D_DATAIN_FORMAT_0_PIXEL_FORMAT_SHIFT			_MK_SHIFT_CONST(8)
> +#define CDMA_D_DATAIN_FORMAT_0_PIXEL_FORMAT_FIELD			_MK_FIELD_CONST(0x3f, CDMA_D_DATAIN_FORMAT_0_PIXEL_FORMAT_SHIFT)
> +#define CDMA_D_DATAIN_FORMAT_0_PIXEL_FORMAT_T_R8			_MK_ENUM_CONST(0x0)
> +#define CDMA_D_DATAIN_FORMAT_0_PIXEL_FORMAT_T_R10			_MK_ENUM_CONST(0x1)
> +#define CDMA_D_DATAIN_FORMAT_0_PIXEL_FORMAT_T_R12			_MK_ENUM_CONST(0x2)
> +#define CDMA_D_DATAIN_FORMAT_0_PIXEL_FORMAT_T_R16			_MK_ENUM_CONST(0x3)
> +#define CDMA_D_DATAIN_FORMAT_0_PIXEL_FORMAT_T_R16_I			_MK_ENUM_CONST(0x4)
> +#define CDMA_D_DATAIN_FORMAT_0_PIXEL_FORMAT_T_R16_F			_MK_ENUM_CONST(0x5)
> +#define CDMA_D_DATAIN_FORMAT_0_PIXEL_FORMAT_T_A16B16G16R16			_MK_ENUM_CONST(0x6)
> +#define CDMA_D_DATAIN_FORMAT_0_PIXEL_FORMAT_T_X16B16G16R16			_MK_ENUM_CONST(0x7)
> +#define CDMA_D_DATAIN_FORMAT_0_PIXEL_FORMAT_T_A16B16G16R16_F			_MK_ENUM_CONST(0x8)
> +#define CDMA_D_DATAIN_FORMAT_0_PIXEL_FORMAT_T_A16Y16U16V16			_MK_ENUM_CONST(0x9)
> +#define CDMA_D_DATAIN_FORMAT_0_PIXEL_FORMAT_T_V16U16Y16A16			_MK_ENUM_CONST(0xa)
> +#define CDMA_D_DATAIN_FORMAT_0_PIXEL_FORMAT_T_A16Y16U16V16_F			_MK_ENUM_CONST(0xb)
> +#define CDMA_D_DATAIN_FORMAT_0_PIXEL_FORMAT_T_A8B8G8R8			_MK_ENUM_CONST(0xc)
> +#define CDMA_D_DATAIN_FORMAT_0_PIXEL_FORMAT_T_A8R8G8B8			_MK_ENUM_CONST(0xd)
> +#define CDMA_D_DATAIN_FORMAT_0_PIXEL_FORMAT_T_B8G8R8A8			_MK_ENUM_CONST(0xe)
> +#define CDMA_D_DATAIN_FORMAT_0_PIXEL_FORMAT_T_R8G8B8A8			_MK_ENUM_CONST(0xf)
> +#define CDMA_D_DATAIN_FORMAT_0_PIXEL_FORMAT_T_X8B8G8R8			_MK_ENUM_CONST(0x10)
> +#define CDMA_D_DATAIN_FORMAT_0_PIXEL_FORMAT_T_X8R8G8B8			_MK_ENUM_CONST(0x11)
> +#define CDMA_D_DATAIN_FORMAT_0_PIXEL_FORMAT_T_B8G8R8X8			_MK_ENUM_CONST(0x12)
> +#define CDMA_D_DATAIN_FORMAT_0_PIXEL_FORMAT_T_R8G8B8X8			_MK_ENUM_CONST(0x13)
> +#define CDMA_D_DATAIN_FORMAT_0_PIXEL_FORMAT_T_A2B10G10R10			_MK_ENUM_CONST(0x14)
> +#define CDMA_D_DATAIN_FORMAT_0_PIXEL_FORMAT_T_A2R10G10B10			_MK_ENUM_CONST(0x15)
> +#define CDMA_D_DATAIN_FORMAT_0_PIXEL_FORMAT_T_B10G10R10A2			_MK_ENUM_CONST(0x16)
> +#define CDMA_D_DATAIN_FORMAT_0_PIXEL_FORMAT_T_R10G10B10A2			_MK_ENUM_CONST(0x17)
> +#define CDMA_D_DATAIN_FORMAT_0_PIXEL_FORMAT_T_A2Y10U10V10			_MK_ENUM_CONST(0x18)
> +#define CDMA_D_DATAIN_FORMAT_0_PIXEL_FORMAT_T_V10U10Y10A2			_MK_ENUM_CONST(0x19)
> +#define CDMA_D_DATAIN_FORMAT_0_PIXEL_FORMAT_T_A8Y8U8V8			_MK_ENUM_CONST(0x1a)
> +#define CDMA_D_DATAIN_FORMAT_0_PIXEL_FORMAT_T_V8U8Y8A8			_MK_ENUM_CONST(0x1b)
> +#define CDMA_D_DATAIN_FORMAT_0_PIXEL_FORMAT_T_Y8___U8V8_N444			_MK_ENUM_CONST(0x1c)
> +#define CDMA_D_DATAIN_FORMAT_0_PIXEL_FORMAT_T_Y8___V8U8_N444			_MK_ENUM_CONST(0x1d)
> +#define CDMA_D_DATAIN_FORMAT_0_PIXEL_FORMAT_T_Y10___U10V10_N444			_MK_ENUM_CONST(0x1e)
> +#define CDMA_D_DATAIN_FORMAT_0_PIXEL_FORMAT_T_Y10___V10U10_N444			_MK_ENUM_CONST(0x1f)
> +#define CDMA_D_DATAIN_FORMAT_0_PIXEL_FORMAT_T_Y12___U12V12_N444			_MK_ENUM_CONST(0x20)
> +#define CDMA_D_DATAIN_FORMAT_0_PIXEL_FORMAT_T_Y12___V12U12_N444			_MK_ENUM_CONST(0x21)
> +#define CDMA_D_DATAIN_FORMAT_0_PIXEL_FORMAT_T_Y16___U16V16_N444			_MK_ENUM_CONST(0x22)
> +#define CDMA_D_DATAIN_FORMAT_0_PIXEL_FORMAT_T_Y16___V16U16_N444			_MK_ENUM_CONST(0x23)
> +#define CDMA_D_DATAIN_FORMAT_0_PIXEL_MAPPING_SHIFT			_MK_SHIFT_CONST(16)
> +#define CDMA_D_DATAIN_FORMAT_0_PIXEL_MAPPING_FIELD			_MK_FIELD_CONST(0x1, CDMA_D_DATAIN_FORMAT_0_PIXEL_MAPPING_SHIFT)
> +#define CDMA_D_DATAIN_FORMAT_0_PIXEL_MAPPING_PITCH_LINEAR			_MK_ENUM_CONST(0x0)
> +#define CDMA_D_DATAIN_FORMAT_0_PIXEL_MAPPING_RESERVED_LINEAR			_MK_ENUM_CONST(0x1)
> +#define CDMA_D_DATAIN_FORMAT_0_PIXEL_SIGN_OVERRIDE_SHIFT			_MK_SHIFT_CONST(20)
> +#define CDMA_D_DATAIN_FORMAT_0_PIXEL_SIGN_OVERRIDE_FIELD			_MK_FIELD_CONST(0x1, CDMA_D_DATAIN_FORMAT_0_PIXEL_SIGN_OVERRIDE_SHIFT)
> +#define CDMA_D_DATAIN_FORMAT_0_PIXEL_SIGN_OVERRIDE_UNSIGNED_INT			_MK_ENUM_CONST(0x0)
> +#define CDMA_D_DATAIN_FORMAT_0_PIXEL_SIGN_OVERRIDE_SIGNED_INT			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register CDMA_D_DATAIN_SIZE_0_0
> +#define CDMA_D_DATAIN_SIZE_0_0			_MK_ADDR_CONST(0x301c)
> +#define CDMA_D_DATAIN_SIZE_0_0_DATAIN_WIDTH_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDMA_D_DATAIN_SIZE_0_0_DATAIN_WIDTH_FIELD			_MK_FIELD_CONST(0x1fff, CDMA_D_DATAIN_SIZE_0_0_DATAIN_WIDTH_SHIFT)
> +#define CDMA_D_DATAIN_SIZE_0_0_DATAIN_HEIGHT_SHIFT			_MK_SHIFT_CONST(16)
> +#define CDMA_D_DATAIN_SIZE_0_0_DATAIN_HEIGHT_FIELD			_MK_FIELD_CONST(0x1fff, CDMA_D_DATAIN_SIZE_0_0_DATAIN_HEIGHT_SHIFT)
> +
> +
> +// Register CDMA_D_DATAIN_SIZE_1_0
> +#define CDMA_D_DATAIN_SIZE_1_0			_MK_ADDR_CONST(0x3020)
> +#define CDMA_D_DATAIN_SIZE_1_0_DATAIN_CHANNEL_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDMA_D_DATAIN_SIZE_1_0_DATAIN_CHANNEL_FIELD			_MK_FIELD_CONST(0x1fff, CDMA_D_DATAIN_SIZE_1_0_DATAIN_CHANNEL_SHIFT)
> +
> +
> +// Register CDMA_D_DATAIN_SIZE_EXT_0_0
> +#define CDMA_D_DATAIN_SIZE_EXT_0_0			_MK_ADDR_CONST(0x3024)
> +#define CDMA_D_DATAIN_SIZE_EXT_0_0_DATAIN_WIDTH_EXT_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDMA_D_DATAIN_SIZE_EXT_0_0_DATAIN_WIDTH_EXT_FIELD			_MK_FIELD_CONST(0x1fff, CDMA_D_DATAIN_SIZE_EXT_0_0_DATAIN_WIDTH_EXT_SHIFT)
> +#define CDMA_D_DATAIN_SIZE_EXT_0_0_DATAIN_HEIGHT_EXT_SHIFT			_MK_SHIFT_CONST(16)
> +#define CDMA_D_DATAIN_SIZE_EXT_0_0_DATAIN_HEIGHT_EXT_FIELD			_MK_FIELD_CONST(0x1fff, CDMA_D_DATAIN_SIZE_EXT_0_0_DATAIN_HEIGHT_EXT_SHIFT)
> +
> +
> +// Register CDMA_D_PIXEL_OFFSET_0
> +#define CDMA_D_PIXEL_OFFSET_0			_MK_ADDR_CONST(0x3028)
> +#define CDMA_D_PIXEL_OFFSET_0_PIXEL_X_OFFSET_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDMA_D_PIXEL_OFFSET_0_PIXEL_X_OFFSET_FIELD			_MK_FIELD_CONST(0x1f, CDMA_D_PIXEL_OFFSET_0_PIXEL_X_OFFSET_SHIFT)
> +#define CDMA_D_PIXEL_OFFSET_0_PIXEL_Y_OFFSET_SHIFT			_MK_SHIFT_CONST(16)
> +#define CDMA_D_PIXEL_OFFSET_0_PIXEL_Y_OFFSET_FIELD			_MK_FIELD_CONST(0x7, CDMA_D_PIXEL_OFFSET_0_PIXEL_Y_OFFSET_SHIFT)
> +
> +
> +// Register CDMA_D_DAIN_RAM_TYPE_0
> +#define CDMA_D_DAIN_RAM_TYPE_0			_MK_ADDR_CONST(0x302c)
> +#define CDMA_D_DAIN_RAM_TYPE_0_DATAIN_RAM_TYPE_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDMA_D_DAIN_RAM_TYPE_0_DATAIN_RAM_TYPE_FIELD			_MK_FIELD_CONST(0x1, CDMA_D_DAIN_RAM_TYPE_0_DATAIN_RAM_TYPE_SHIFT)
> +#define CDMA_D_DAIN_RAM_TYPE_0_DATAIN_RAM_TYPE_CVIF			_MK_ENUM_CONST(0x0)
> +#define CDMA_D_DAIN_RAM_TYPE_0_DATAIN_RAM_TYPE_MCIF			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register CDMA_D_DAIN_ADDR_HIGH_0_0
> +#define CDMA_D_DAIN_ADDR_HIGH_0_0			_MK_ADDR_CONST(0x3030)
> +#define CDMA_D_DAIN_ADDR_HIGH_0_0_DATAIN_ADDR_HIGH_0_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDMA_D_DAIN_ADDR_HIGH_0_0_DATAIN_ADDR_HIGH_0_FIELD			_MK_FIELD_CONST(0xffffffff, CDMA_D_DAIN_ADDR_HIGH_0_0_DATAIN_ADDR_HIGH_0_SHIFT)
> +
> +
> +// Register CDMA_D_DAIN_ADDR_LOW_0_0
> +#define CDMA_D_DAIN_ADDR_LOW_0_0			_MK_ADDR_CONST(0x3034)
> +#define CDMA_D_DAIN_ADDR_LOW_0_0_DATAIN_ADDR_LOW_0_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDMA_D_DAIN_ADDR_LOW_0_0_DATAIN_ADDR_LOW_0_FIELD			_MK_FIELD_CONST(0xffffffff, CDMA_D_DAIN_ADDR_LOW_0_0_DATAIN_ADDR_LOW_0_SHIFT)
> +
> +
> +// Register CDMA_D_DAIN_ADDR_HIGH_1_0
> +#define CDMA_D_DAIN_ADDR_HIGH_1_0			_MK_ADDR_CONST(0x3038)
> +#define CDMA_D_DAIN_ADDR_HIGH_1_0_DATAIN_ADDR_HIGH_1_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDMA_D_DAIN_ADDR_HIGH_1_0_DATAIN_ADDR_HIGH_1_FIELD			_MK_FIELD_CONST(0xffffffff, CDMA_D_DAIN_ADDR_HIGH_1_0_DATAIN_ADDR_HIGH_1_SHIFT)
> +
> +
> +// Register CDMA_D_DAIN_ADDR_LOW_1_0
> +#define CDMA_D_DAIN_ADDR_LOW_1_0			_MK_ADDR_CONST(0x303c)
> +#define CDMA_D_DAIN_ADDR_LOW_1_0_DATAIN_ADDR_LOW_1_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDMA_D_DAIN_ADDR_LOW_1_0_DATAIN_ADDR_LOW_1_FIELD			_MK_FIELD_CONST(0xffffffff, CDMA_D_DAIN_ADDR_LOW_1_0_DATAIN_ADDR_LOW_1_SHIFT)
> +
> +
> +// Register CDMA_D_LINE_STRIDE_0
> +#define CDMA_D_LINE_STRIDE_0			_MK_ADDR_CONST(0x3040)
> +#define CDMA_D_LINE_STRIDE_0_LINE_STRIDE_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDMA_D_LINE_STRIDE_0_LINE_STRIDE_FIELD			_MK_FIELD_CONST(0xffffffff, CDMA_D_LINE_STRIDE_0_LINE_STRIDE_SHIFT)
> +
> +
> +// Register CDMA_D_LINE_UV_STRIDE_0
> +#define CDMA_D_LINE_UV_STRIDE_0			_MK_ADDR_CONST(0x3044)
> +#define CDMA_D_LINE_UV_STRIDE_0_UV_LINE_STRIDE_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDMA_D_LINE_UV_STRIDE_0_UV_LINE_STRIDE_FIELD			_MK_FIELD_CONST(0xffffffff, CDMA_D_LINE_UV_STRIDE_0_UV_LINE_STRIDE_SHIFT)
> +
> +
> +// Register CDMA_D_SURF_STRIDE_0
> +#define CDMA_D_SURF_STRIDE_0			_MK_ADDR_CONST(0x3048)
> +#define CDMA_D_SURF_STRIDE_0_SURF_STRIDE_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDMA_D_SURF_STRIDE_0_SURF_STRIDE_FIELD			_MK_FIELD_CONST(0xffffffff, CDMA_D_SURF_STRIDE_0_SURF_STRIDE_SHIFT)
> +
> +
> +// Register CDMA_D_DAIN_MAP_0
> +#define CDMA_D_DAIN_MAP_0			_MK_ADDR_CONST(0x304c)
> +#define CDMA_D_DAIN_MAP_0_LINE_PACKED_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDMA_D_DAIN_MAP_0_LINE_PACKED_FIELD			_MK_FIELD_CONST(0x1, CDMA_D_DAIN_MAP_0_LINE_PACKED_SHIFT)
> +#define CDMA_D_DAIN_MAP_0_LINE_PACKED_FALSE			_MK_ENUM_CONST(0x0)
> +#define CDMA_D_DAIN_MAP_0_LINE_PACKED_TRUE			_MK_ENUM_CONST(0x1)
> +#define CDMA_D_DAIN_MAP_0_SURF_PACKED_SHIFT			_MK_SHIFT_CONST(16)
> +#define CDMA_D_DAIN_MAP_0_SURF_PACKED_FIELD			_MK_FIELD_CONST(0x1, CDMA_D_DAIN_MAP_0_SURF_PACKED_SHIFT)
> +#define CDMA_D_DAIN_MAP_0_SURF_PACKED_FALSE			_MK_ENUM_CONST(0x0)
> +#define CDMA_D_DAIN_MAP_0_SURF_PACKED_TRUE			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register CDMA_D_RESERVED_X_CFG_0
> +#define CDMA_D_RESERVED_X_CFG_0			_MK_ADDR_CONST(0x3050)
> +#define CDMA_D_RESERVED_X_CFG_0_RSV_PER_LINE_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDMA_D_RESERVED_X_CFG_0_RSV_PER_LINE_FIELD			_MK_FIELD_CONST(0x3ff, CDMA_D_RESERVED_X_CFG_0_RSV_PER_LINE_SHIFT)
> +#define CDMA_D_RESERVED_X_CFG_0_RSV_PER_UV_LINE_SHIFT			_MK_SHIFT_CONST(16)
> +#define CDMA_D_RESERVED_X_CFG_0_RSV_PER_UV_LINE_FIELD			_MK_FIELD_CONST(0x3ff, CDMA_D_RESERVED_X_CFG_0_RSV_PER_UV_LINE_SHIFT)
> +
> +
> +// Register CDMA_D_RESERVED_Y_CFG_0
> +#define CDMA_D_RESERVED_Y_CFG_0			_MK_ADDR_CONST(0x3054)
> +#define CDMA_D_RESERVED_Y_CFG_0_RSV_HEIGHT_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDMA_D_RESERVED_Y_CFG_0_RSV_HEIGHT_FIELD			_MK_FIELD_CONST(0x7, CDMA_D_RESERVED_Y_CFG_0_RSV_HEIGHT_SHIFT)
> +#define CDMA_D_RESERVED_Y_CFG_0_RSV_Y_INDEX_SHIFT			_MK_SHIFT_CONST(16)
> +#define CDMA_D_RESERVED_Y_CFG_0_RSV_Y_INDEX_FIELD			_MK_FIELD_CONST(0x1f, CDMA_D_RESERVED_Y_CFG_0_RSV_Y_INDEX_SHIFT)
> +
> +
> +// Register CDMA_D_BATCH_NUMBER_0
> +#define CDMA_D_BATCH_NUMBER_0			_MK_ADDR_CONST(0x3058)
> +#define CDMA_D_BATCH_NUMBER_0_BATCHES_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDMA_D_BATCH_NUMBER_0_BATCHES_FIELD			_MK_FIELD_CONST(0x1f, CDMA_D_BATCH_NUMBER_0_BATCHES_SHIFT)
> +
> +
> +// Register CDMA_D_BATCH_STRIDE_0
> +#define CDMA_D_BATCH_STRIDE_0			_MK_ADDR_CONST(0x305c)
> +#define CDMA_D_BATCH_STRIDE_0_BATCH_STRIDE_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDMA_D_BATCH_STRIDE_0_BATCH_STRIDE_FIELD			_MK_FIELD_CONST(0xffffffff, CDMA_D_BATCH_STRIDE_0_BATCH_STRIDE_SHIFT)
> +
> +
> +// Register CDMA_D_ENTRY_PER_SLICE_0
> +#define CDMA_D_ENTRY_PER_SLICE_0			_MK_ADDR_CONST(0x3060)
> +#define CDMA_D_ENTRY_PER_SLICE_0_ENTRIES_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDMA_D_ENTRY_PER_SLICE_0_ENTRIES_FIELD			_MK_FIELD_CONST(0x3fff, CDMA_D_ENTRY_PER_SLICE_0_ENTRIES_SHIFT)
> +
> +
> +// Register CDMA_D_FETCH_GRAIN_0
> +#define CDMA_D_FETCH_GRAIN_0			_MK_ADDR_CONST(0x3064)
> +#define CDMA_D_FETCH_GRAIN_0_GRAINS_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDMA_D_FETCH_GRAIN_0_GRAINS_FIELD			_MK_FIELD_CONST(0xfff, CDMA_D_FETCH_GRAIN_0_GRAINS_SHIFT)
> +
> +
> +// Register CDMA_D_WEIGHT_FORMAT_0
> +#define CDMA_D_WEIGHT_FORMAT_0			_MK_ADDR_CONST(0x3068)
> +#define CDMA_D_WEIGHT_FORMAT_0_WEIGHT_FORMAT_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDMA_D_WEIGHT_FORMAT_0_WEIGHT_FORMAT_FIELD			_MK_FIELD_CONST(0x1, CDMA_D_WEIGHT_FORMAT_0_WEIGHT_FORMAT_SHIFT)
> +#define CDMA_D_WEIGHT_FORMAT_0_WEIGHT_FORMAT_UNCOMPRESSED			_MK_ENUM_CONST(0x0)
> +#define CDMA_D_WEIGHT_FORMAT_0_WEIGHT_FORMAT_COMPRESSED			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register CDMA_D_WEIGHT_SIZE_0_0
> +#define CDMA_D_WEIGHT_SIZE_0_0			_MK_ADDR_CONST(0x306c)
> +#define CDMA_D_WEIGHT_SIZE_0_0_BYTE_PER_KERNEL_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDMA_D_WEIGHT_SIZE_0_0_BYTE_PER_KERNEL_FIELD			_MK_FIELD_CONST(0x3ffff, CDMA_D_WEIGHT_SIZE_0_0_BYTE_PER_KERNEL_SHIFT)
> +
> +
> +// Register CDMA_D_WEIGHT_SIZE_1_0
> +#define CDMA_D_WEIGHT_SIZE_1_0			_MK_ADDR_CONST(0x3070)
> +#define CDMA_D_WEIGHT_SIZE_1_0_WEIGHT_KERNEL_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDMA_D_WEIGHT_SIZE_1_0_WEIGHT_KERNEL_FIELD			_MK_FIELD_CONST(0x1fff, CDMA_D_WEIGHT_SIZE_1_0_WEIGHT_KERNEL_SHIFT)
> +
> +
> +// Register CDMA_D_WEIGHT_RAM_TYPE_0
> +#define CDMA_D_WEIGHT_RAM_TYPE_0			_MK_ADDR_CONST(0x3074)
> +#define CDMA_D_WEIGHT_RAM_TYPE_0_WEIGHT_RAM_TYPE_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDMA_D_WEIGHT_RAM_TYPE_0_WEIGHT_RAM_TYPE_FIELD			_MK_FIELD_CONST(0x1, CDMA_D_WEIGHT_RAM_TYPE_0_WEIGHT_RAM_TYPE_SHIFT)
> +#define CDMA_D_WEIGHT_RAM_TYPE_0_WEIGHT_RAM_TYPE_CVIF			_MK_ENUM_CONST(0x0)
> +#define CDMA_D_WEIGHT_RAM_TYPE_0_WEIGHT_RAM_TYPE_MCIF			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register CDMA_D_WEIGHT_ADDR_HIGH_0
> +#define CDMA_D_WEIGHT_ADDR_HIGH_0			_MK_ADDR_CONST(0x3078)
> +#define CDMA_D_WEIGHT_ADDR_HIGH_0_WEIGHT_ADDR_HIGH_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDMA_D_WEIGHT_ADDR_HIGH_0_WEIGHT_ADDR_HIGH_FIELD			_MK_FIELD_CONST(0xffffffff, CDMA_D_WEIGHT_ADDR_HIGH_0_WEIGHT_ADDR_HIGH_SHIFT)
> +
> +
> +// Register CDMA_D_WEIGHT_ADDR_LOW_0
> +#define CDMA_D_WEIGHT_ADDR_LOW_0			_MK_ADDR_CONST(0x307c)
> +#define CDMA_D_WEIGHT_ADDR_LOW_0_WEIGHT_ADDR_LOW_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDMA_D_WEIGHT_ADDR_LOW_0_WEIGHT_ADDR_LOW_FIELD			_MK_FIELD_CONST(0xffffffff, CDMA_D_WEIGHT_ADDR_LOW_0_WEIGHT_ADDR_LOW_SHIFT)
> +
> +
> +// Register CDMA_D_WEIGHT_BYTES_0
> +#define CDMA_D_WEIGHT_BYTES_0			_MK_ADDR_CONST(0x3080)
> +#define CDMA_D_WEIGHT_BYTES_0_WEIGHT_BYTES_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDMA_D_WEIGHT_BYTES_0_WEIGHT_BYTES_FIELD			_MK_FIELD_CONST(0xffffffff, CDMA_D_WEIGHT_BYTES_0_WEIGHT_BYTES_SHIFT)
> +
> +
> +// Register CDMA_D_WGS_ADDR_HIGH_0
> +#define CDMA_D_WGS_ADDR_HIGH_0			_MK_ADDR_CONST(0x3084)
> +#define CDMA_D_WGS_ADDR_HIGH_0_WGS_ADDR_HIGH_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDMA_D_WGS_ADDR_HIGH_0_WGS_ADDR_HIGH_FIELD			_MK_FIELD_CONST(0xffffffff, CDMA_D_WGS_ADDR_HIGH_0_WGS_ADDR_HIGH_SHIFT)
> +
> +
> +// Register CDMA_D_WGS_ADDR_LOW_0
> +#define CDMA_D_WGS_ADDR_LOW_0			_MK_ADDR_CONST(0x3088)
> +#define CDMA_D_WGS_ADDR_LOW_0_WGS_ADDR_LOW_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDMA_D_WGS_ADDR_LOW_0_WGS_ADDR_LOW_FIELD			_MK_FIELD_CONST(0xffffffff, CDMA_D_WGS_ADDR_LOW_0_WGS_ADDR_LOW_SHIFT)
> +
> +
> +// Register CDMA_D_WMB_ADDR_HIGH_0
> +#define CDMA_D_WMB_ADDR_HIGH_0			_MK_ADDR_CONST(0x308c)
> +#define CDMA_D_WMB_ADDR_HIGH_0_WMB_ADDR_HIGH_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDMA_D_WMB_ADDR_HIGH_0_WMB_ADDR_HIGH_FIELD			_MK_FIELD_CONST(0xffffffff, CDMA_D_WMB_ADDR_HIGH_0_WMB_ADDR_HIGH_SHIFT)
> +
> +
> +// Register CDMA_D_WMB_ADDR_LOW_0
> +#define CDMA_D_WMB_ADDR_LOW_0			_MK_ADDR_CONST(0x3090)
> +#define CDMA_D_WMB_ADDR_LOW_0_WMB_ADDR_LOW_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDMA_D_WMB_ADDR_LOW_0_WMB_ADDR_LOW_FIELD			_MK_FIELD_CONST(0xffffffff, CDMA_D_WMB_ADDR_LOW_0_WMB_ADDR_LOW_SHIFT)
> +
> +
> +// Register CDMA_D_WMB_BYTES_0
> +#define CDMA_D_WMB_BYTES_0			_MK_ADDR_CONST(0x3094)
> +#define CDMA_D_WMB_BYTES_0_WMB_BYTES_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDMA_D_WMB_BYTES_0_WMB_BYTES_FIELD			_MK_FIELD_CONST(0xfffffff, CDMA_D_WMB_BYTES_0_WMB_BYTES_SHIFT)
> +
> +
> +// Register CDMA_D_MEAN_FORMAT_0
> +#define CDMA_D_MEAN_FORMAT_0			_MK_ADDR_CONST(0x3098)
> +#define CDMA_D_MEAN_FORMAT_0_MEAN_FORMAT_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDMA_D_MEAN_FORMAT_0_MEAN_FORMAT_FIELD			_MK_FIELD_CONST(0x1, CDMA_D_MEAN_FORMAT_0_MEAN_FORMAT_SHIFT)
> +#define CDMA_D_MEAN_FORMAT_0_MEAN_FORMAT_DISABLE			_MK_ENUM_CONST(0x0)
> +#define CDMA_D_MEAN_FORMAT_0_MEAN_FORMAT_ENABLE			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register CDMA_D_MEAN_GLOBAL_0_0
> +#define CDMA_D_MEAN_GLOBAL_0_0			_MK_ADDR_CONST(0x309c)
> +#define CDMA_D_MEAN_GLOBAL_0_0_MEAN_RY_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDMA_D_MEAN_GLOBAL_0_0_MEAN_RY_FIELD			_MK_FIELD_CONST(0xffff, CDMA_D_MEAN_GLOBAL_0_0_MEAN_RY_SHIFT)
> +#define CDMA_D_MEAN_GLOBAL_0_0_MEAN_GU_SHIFT			_MK_SHIFT_CONST(16)
> +#define CDMA_D_MEAN_GLOBAL_0_0_MEAN_GU_FIELD			_MK_FIELD_CONST(0xffff, CDMA_D_MEAN_GLOBAL_0_0_MEAN_GU_SHIFT)
> +
> +
> +// Register CDMA_D_MEAN_GLOBAL_1_0
> +#define CDMA_D_MEAN_GLOBAL_1_0			_MK_ADDR_CONST(0x30a0)
> +#define CDMA_D_MEAN_GLOBAL_1_0_MEAN_BV_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDMA_D_MEAN_GLOBAL_1_0_MEAN_BV_FIELD			_MK_FIELD_CONST(0xffff, CDMA_D_MEAN_GLOBAL_1_0_MEAN_BV_SHIFT)
> +#define CDMA_D_MEAN_GLOBAL_1_0_MEAN_AX_SHIFT			_MK_SHIFT_CONST(16)
> +#define CDMA_D_MEAN_GLOBAL_1_0_MEAN_AX_FIELD			_MK_FIELD_CONST(0xffff, CDMA_D_MEAN_GLOBAL_1_0_MEAN_AX_SHIFT)
> +
> +
> +// Register CDMA_D_CVT_CFG_0
> +#define CDMA_D_CVT_CFG_0			_MK_ADDR_CONST(0x30a4)
> +#define CDMA_D_CVT_CFG_0_CVT_EN_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDMA_D_CVT_CFG_0_CVT_EN_FIELD			_MK_FIELD_CONST(0x1, CDMA_D_CVT_CFG_0_CVT_EN_SHIFT)
> +#define CDMA_D_CVT_CFG_0_CVT_EN_DISABLE			_MK_ENUM_CONST(0x0)
> +#define CDMA_D_CVT_CFG_0_CVT_EN_ENABLE			_MK_ENUM_CONST(0x1)
> +#define CDMA_D_CVT_CFG_0_CVT_TRUNCATE_SHIFT			_MK_SHIFT_CONST(4)
> +#define CDMA_D_CVT_CFG_0_CVT_TRUNCATE_FIELD			_MK_FIELD_CONST(0x3f, CDMA_D_CVT_CFG_0_CVT_TRUNCATE_SHIFT)
> +
> +
> +// Register CDMA_D_CVT_OFFSET_0
> +#define CDMA_D_CVT_OFFSET_0			_MK_ADDR_CONST(0x30a8)
> +#define CDMA_D_CVT_OFFSET_0_CVT_OFFSET_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDMA_D_CVT_OFFSET_0_CVT_OFFSET_FIELD			_MK_FIELD_CONST(0xffff, CDMA_D_CVT_OFFSET_0_CVT_OFFSET_SHIFT)
> +
> +
> +// Register CDMA_D_CVT_SCALE_0
> +#define CDMA_D_CVT_SCALE_0			_MK_ADDR_CONST(0x30ac)
> +#define CDMA_D_CVT_SCALE_0_CVT_SCALE_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDMA_D_CVT_SCALE_0_CVT_SCALE_FIELD			_MK_FIELD_CONST(0xffff, CDMA_D_CVT_SCALE_0_CVT_SCALE_SHIFT)
> +
> +
> +// Register CDMA_D_CONV_STRIDE_0
> +#define CDMA_D_CONV_STRIDE_0			_MK_ADDR_CONST(0x30b0)
> +#define CDMA_D_CONV_STRIDE_0_CONV_X_STRIDE_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDMA_D_CONV_STRIDE_0_CONV_X_STRIDE_FIELD			_MK_FIELD_CONST(0x7, CDMA_D_CONV_STRIDE_0_CONV_X_STRIDE_SHIFT)
> +#define CDMA_D_CONV_STRIDE_0_CONV_Y_STRIDE_SHIFT			_MK_SHIFT_CONST(16)
> +#define CDMA_D_CONV_STRIDE_0_CONV_Y_STRIDE_FIELD			_MK_FIELD_CONST(0x7, CDMA_D_CONV_STRIDE_0_CONV_Y_STRIDE_SHIFT)
> +
> +
> +// Register CDMA_D_ZERO_PADDING_0
> +#define CDMA_D_ZERO_PADDING_0			_MK_ADDR_CONST(0x30b4)
> +#define CDMA_D_ZERO_PADDING_0_PAD_LEFT_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDMA_D_ZERO_PADDING_0_PAD_LEFT_FIELD			_MK_FIELD_CONST(0x1f, CDMA_D_ZERO_PADDING_0_PAD_LEFT_SHIFT)
> +#define CDMA_D_ZERO_PADDING_0_PAD_RIGHT_SHIFT			_MK_SHIFT_CONST(8)
> +#define CDMA_D_ZERO_PADDING_0_PAD_RIGHT_FIELD			_MK_FIELD_CONST(0x3f, CDMA_D_ZERO_PADDING_0_PAD_RIGHT_SHIFT)
> +#define CDMA_D_ZERO_PADDING_0_PAD_TOP_SHIFT			_MK_SHIFT_CONST(16)
> +#define CDMA_D_ZERO_PADDING_0_PAD_TOP_FIELD			_MK_FIELD_CONST(0x1f, CDMA_D_ZERO_PADDING_0_PAD_TOP_SHIFT)
> +#define CDMA_D_ZERO_PADDING_0_PAD_BOTTOM_SHIFT			_MK_SHIFT_CONST(24)
> +#define CDMA_D_ZERO_PADDING_0_PAD_BOTTOM_FIELD			_MK_FIELD_CONST(0x3f, CDMA_D_ZERO_PADDING_0_PAD_BOTTOM_SHIFT)
> +
> +
> +// Register CDMA_D_ZERO_PADDING_VALUE_0
> +#define CDMA_D_ZERO_PADDING_VALUE_0			_MK_ADDR_CONST(0x30b8)
> +#define CDMA_D_ZERO_PADDING_VALUE_0_PAD_VALUE_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDMA_D_ZERO_PADDING_VALUE_0_PAD_VALUE_FIELD			_MK_FIELD_CONST(0xffff, CDMA_D_ZERO_PADDING_VALUE_0_PAD_VALUE_SHIFT)
> +
> +
> +// Register CDMA_D_BANK_0
> +#define CDMA_D_BANK_0			_MK_ADDR_CONST(0x30bc)
> +#define CDMA_D_BANK_0_DATA_BANK_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDMA_D_BANK_0_DATA_BANK_FIELD			_MK_FIELD_CONST(0x1f, CDMA_D_BANK_0_DATA_BANK_SHIFT)
> +#define CDMA_D_BANK_0_WEIGHT_BANK_SHIFT			_MK_SHIFT_CONST(16)
> +#define CDMA_D_BANK_0_WEIGHT_BANK_FIELD			_MK_FIELD_CONST(0x1f, CDMA_D_BANK_0_WEIGHT_BANK_SHIFT)
> +
> +
> +// Register CDMA_D_NAN_FLUSH_TO_ZERO_0
> +#define CDMA_D_NAN_FLUSH_TO_ZERO_0			_MK_ADDR_CONST(0x30c0)
> +#define CDMA_D_NAN_FLUSH_TO_ZERO_0_NAN_TO_ZERO_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDMA_D_NAN_FLUSH_TO_ZERO_0_NAN_TO_ZERO_FIELD			_MK_FIELD_CONST(0x1, CDMA_D_NAN_FLUSH_TO_ZERO_0_NAN_TO_ZERO_SHIFT)
> +#define CDMA_D_NAN_FLUSH_TO_ZERO_0_NAN_TO_ZERO_DISABLE			_MK_ENUM_CONST(0x0)
> +#define CDMA_D_NAN_FLUSH_TO_ZERO_0_NAN_TO_ZERO_ENABLE			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register CDMA_D_NAN_INPUT_DATA_NUM_0
> +#define CDMA_D_NAN_INPUT_DATA_NUM_0			_MK_ADDR_CONST(0x30c4)
> +#define CDMA_D_NAN_INPUT_DATA_NUM_0_NAN_DATA_NUM_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDMA_D_NAN_INPUT_DATA_NUM_0_NAN_DATA_NUM_FIELD			_MK_FIELD_CONST(0xffffffff, CDMA_D_NAN_INPUT_DATA_NUM_0_NAN_DATA_NUM_SHIFT)
> +
> +
> +// Register CDMA_D_NAN_INPUT_WEIGHT_NUM_0
> +#define CDMA_D_NAN_INPUT_WEIGHT_NUM_0			_MK_ADDR_CONST(0x30c8)
> +#define CDMA_D_NAN_INPUT_WEIGHT_NUM_0_NAN_WEIGHT_NUM_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDMA_D_NAN_INPUT_WEIGHT_NUM_0_NAN_WEIGHT_NUM_FIELD			_MK_FIELD_CONST(0xffffffff, CDMA_D_NAN_INPUT_WEIGHT_NUM_0_NAN_WEIGHT_NUM_SHIFT)
> +
> +
> +// Register CDMA_D_INF_INPUT_DATA_NUM_0
> +#define CDMA_D_INF_INPUT_DATA_NUM_0			_MK_ADDR_CONST(0x30cc)
> +#define CDMA_D_INF_INPUT_DATA_NUM_0_INF_DATA_NUM_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDMA_D_INF_INPUT_DATA_NUM_0_INF_DATA_NUM_FIELD			_MK_FIELD_CONST(0xffffffff, CDMA_D_INF_INPUT_DATA_NUM_0_INF_DATA_NUM_SHIFT)
> +
> +
> +// Register CDMA_D_INF_INPUT_WEIGHT_NUM_0
> +#define CDMA_D_INF_INPUT_WEIGHT_NUM_0			_MK_ADDR_CONST(0x30d0)
> +#define CDMA_D_INF_INPUT_WEIGHT_NUM_0_INF_WEIGHT_NUM_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDMA_D_INF_INPUT_WEIGHT_NUM_0_INF_WEIGHT_NUM_FIELD			_MK_FIELD_CONST(0xffffffff, CDMA_D_INF_INPUT_WEIGHT_NUM_0_INF_WEIGHT_NUM_SHIFT)
> +
> +
> +// Register CDMA_D_PERF_ENABLE_0
> +#define CDMA_D_PERF_ENABLE_0			_MK_ADDR_CONST(0x30d4)
> +#define CDMA_D_PERF_ENABLE_0_DMA_EN_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDMA_D_PERF_ENABLE_0_DMA_EN_FIELD			_MK_FIELD_CONST(0x1, CDMA_D_PERF_ENABLE_0_DMA_EN_SHIFT)
> +
> +
> +// Register CDMA_D_PERF_DAT_READ_STALL_0
> +#define CDMA_D_PERF_DAT_READ_STALL_0			_MK_ADDR_CONST(0x30d8)
> +#define CDMA_D_PERF_DAT_READ_STALL_0_DAT_RD_STALL_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDMA_D_PERF_DAT_READ_STALL_0_DAT_RD_STALL_FIELD			_MK_FIELD_CONST(0xffffffff, CDMA_D_PERF_DAT_READ_STALL_0_DAT_RD_STALL_SHIFT)
> +
> +
> +// Register CDMA_D_PERF_WT_READ_STALL_0
> +#define CDMA_D_PERF_WT_READ_STALL_0			_MK_ADDR_CONST(0x30dc)
> +#define CDMA_D_PERF_WT_READ_STALL_0_WT_RD_STALL_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDMA_D_PERF_WT_READ_STALL_0_WT_RD_STALL_FIELD			_MK_FIELD_CONST(0xffffffff, CDMA_D_PERF_WT_READ_STALL_0_WT_RD_STALL_SHIFT)
> +
> +
> +// Register CDMA_D_PERF_DAT_READ_LATENCY_0
> +#define CDMA_D_PERF_DAT_READ_LATENCY_0			_MK_ADDR_CONST(0x30e0)
> +#define CDMA_D_PERF_DAT_READ_LATENCY_0_DAT_RD_LATENCY_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDMA_D_PERF_DAT_READ_LATENCY_0_DAT_RD_LATENCY_FIELD			_MK_FIELD_CONST(0xffffffff, CDMA_D_PERF_DAT_READ_LATENCY_0_DAT_RD_LATENCY_SHIFT)
> +
> +
> +// Register CDMA_D_PERF_WT_READ_LATENCY_0
> +#define CDMA_D_PERF_WT_READ_LATENCY_0			_MK_ADDR_CONST(0x30e4)
> +#define CDMA_D_PERF_WT_READ_LATENCY_0_WT_RD_LATENCY_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDMA_D_PERF_WT_READ_LATENCY_0_WT_RD_LATENCY_FIELD			_MK_FIELD_CONST(0xffffffff, CDMA_D_PERF_WT_READ_LATENCY_0_WT_RD_LATENCY_SHIFT)
> +
> +
> +// Register CDMA_D_CYA_0
> +#define CDMA_D_CYA_0			_MK_ADDR_CONST(0x30e8)
> +#define CDMA_D_CYA_0_CYA_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDMA_D_CYA_0_CYA_FIELD			_MK_FIELD_CONST(0xffffffff, CDMA_D_CYA_0_CYA_SHIFT)
> +
> +
> +
> +// To satisfy various compilers and platforms,
> +// we let users control the types and syntax of certain constants, using macros.
> +#ifndef _MK_SHIFT_CONST
> +  #define _MK_SHIFT_CONST(_constant_) _constant_
> +#endif
> +#ifndef _MK_MASK_CONST
> +  #define _MK_MASK_CONST(_constant_) _constant_
> +#endif
> +#ifndef _MK_ENUM_CONST
> +  #define _MK_ENUM_CONST(_constant_) (_constant_ ## UL)
> +#endif
> +#ifndef _MK_ADDR_CONST
> +  #define _MK_ADDR_CONST(_constant_) _constant_
> +#endif
> +#ifndef _MK_FIELD_CONST
> +  #define _MK_FIELD_CONST(_mask_, _shift_) (_MK_MASK_CONST(_mask_) << _MK_SHIFT_CONST(_shift_))
> +#endif
> +
> +
> +// Register CSC_S_STATUS_0
> +#define CSC_S_STATUS_0			_MK_ADDR_CONST(0x4000)
> +#define CSC_S_STATUS_0_STATUS_0_SHIFT			_MK_SHIFT_CONST(0)
> +#define CSC_S_STATUS_0_STATUS_0_FIELD			_MK_FIELD_CONST(0x3, CSC_S_STATUS_0_STATUS_0_SHIFT)
> +#define CSC_S_STATUS_0_STATUS_0_IDLE			_MK_ENUM_CONST(0x0)
> +#define CSC_S_STATUS_0_STATUS_0_RUNNING			_MK_ENUM_CONST(0x1)
> +#define CSC_S_STATUS_0_STATUS_0_PENDING			_MK_ENUM_CONST(0x2)
> +#define CSC_S_STATUS_0_STATUS_1_SHIFT			_MK_SHIFT_CONST(16)
> +#define CSC_S_STATUS_0_STATUS_1_FIELD			_MK_FIELD_CONST(0x3, CSC_S_STATUS_0_STATUS_1_SHIFT)
> +#define CSC_S_STATUS_0_STATUS_1_IDLE			_MK_ENUM_CONST(0x0)
> +#define CSC_S_STATUS_0_STATUS_1_RUNNING			_MK_ENUM_CONST(0x1)
> +#define CSC_S_STATUS_0_STATUS_1_PENDING			_MK_ENUM_CONST(0x2)
> +
> +
> +// Register CSC_S_POINTER_0
> +#define CSC_S_POINTER_0			_MK_ADDR_CONST(0x4004)
> +#define CSC_S_POINTER_0_PRODUCER_SHIFT			_MK_SHIFT_CONST(0)
> +#define CSC_S_POINTER_0_PRODUCER_FIELD			_MK_FIELD_CONST(0x1, CSC_S_POINTER_0_PRODUCER_SHIFT)
> +#define CSC_S_POINTER_0_PRODUCER_GROUP_0			_MK_ENUM_CONST(0x0)
> +#define CSC_S_POINTER_0_PRODUCER_GROUP_1			_MK_ENUM_CONST(0x1)
> +#define CSC_S_POINTER_0_CONSUMER_SHIFT			_MK_SHIFT_CONST(16)
> +#define CSC_S_POINTER_0_CONSUMER_FIELD			_MK_FIELD_CONST(0x1, CSC_S_POINTER_0_CONSUMER_SHIFT)
> +#define CSC_S_POINTER_0_CONSUMER_GROUP_0			_MK_ENUM_CONST(0x0)
> +#define CSC_S_POINTER_0_CONSUMER_GROUP_1			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register CSC_D_OP_ENABLE_0
> +#define CSC_D_OP_ENABLE_0			_MK_ADDR_CONST(0x4008)
> +#define CSC_D_OP_ENABLE_0_OP_EN_SHIFT			_MK_SHIFT_CONST(0)
> +#define CSC_D_OP_ENABLE_0_OP_EN_FIELD			_MK_FIELD_CONST(0x1, CSC_D_OP_ENABLE_0_OP_EN_SHIFT)
> +#define CSC_D_OP_ENABLE_0_OP_EN_DISABLE			_MK_ENUM_CONST(0x0)
> +#define CSC_D_OP_ENABLE_0_OP_EN_ENABLE			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register CSC_D_MISC_CFG_0
> +#define CSC_D_MISC_CFG_0			_MK_ADDR_CONST(0x400c)
> +#define CSC_D_MISC_CFG_0_CONV_MODE_SHIFT			_MK_SHIFT_CONST(0)
> +#define CSC_D_MISC_CFG_0_CONV_MODE_FIELD			_MK_FIELD_CONST(0x1, CSC_D_MISC_CFG_0_CONV_MODE_SHIFT)
> +#define CSC_D_MISC_CFG_0_CONV_MODE_DIRECT			_MK_ENUM_CONST(0x0)
> +#define CSC_D_MISC_CFG_0_CONV_MODE_WINOGRAD			_MK_ENUM_CONST(0x1)
> +#define CSC_D_MISC_CFG_0_IN_PRECISION_SHIFT			_MK_SHIFT_CONST(8)
> +#define CSC_D_MISC_CFG_0_IN_PRECISION_FIELD			_MK_FIELD_CONST(0x3, CSC_D_MISC_CFG_0_IN_PRECISION_SHIFT)
> +#define CSC_D_MISC_CFG_0_IN_PRECISION_INT8			_MK_ENUM_CONST(0x0)
> +#define CSC_D_MISC_CFG_0_IN_PRECISION_INT16			_MK_ENUM_CONST(0x1)
> +#define CSC_D_MISC_CFG_0_IN_PRECISION_FP16			_MK_ENUM_CONST(0x2)
> +#define CSC_D_MISC_CFG_0_PROC_PRECISION_SHIFT			_MK_SHIFT_CONST(12)
> +#define CSC_D_MISC_CFG_0_PROC_PRECISION_FIELD			_MK_FIELD_CONST(0x3, CSC_D_MISC_CFG_0_PROC_PRECISION_SHIFT)
> +#define CSC_D_MISC_CFG_0_PROC_PRECISION_INT8			_MK_ENUM_CONST(0x0)
> +#define CSC_D_MISC_CFG_0_PROC_PRECISION_INT16			_MK_ENUM_CONST(0x1)
> +#define CSC_D_MISC_CFG_0_PROC_PRECISION_FP16			_MK_ENUM_CONST(0x2)
> +#define CSC_D_MISC_CFG_0_DATA_REUSE_SHIFT			_MK_SHIFT_CONST(16)
> +#define CSC_D_MISC_CFG_0_DATA_REUSE_FIELD			_MK_FIELD_CONST(0x1, CSC_D_MISC_CFG_0_DATA_REUSE_SHIFT)
> +#define CSC_D_MISC_CFG_0_DATA_REUSE_DISABLE			_MK_ENUM_CONST(0x0)
> +#define CSC_D_MISC_CFG_0_DATA_REUSE_ENABLE			_MK_ENUM_CONST(0x1)
> +#define CSC_D_MISC_CFG_0_WEIGHT_REUSE_SHIFT			_MK_SHIFT_CONST(20)
> +#define CSC_D_MISC_CFG_0_WEIGHT_REUSE_FIELD			_MK_FIELD_CONST(0x1, CSC_D_MISC_CFG_0_WEIGHT_REUSE_SHIFT)
> +#define CSC_D_MISC_CFG_0_WEIGHT_REUSE_DISABLE			_MK_ENUM_CONST(0x0)
> +#define CSC_D_MISC_CFG_0_WEIGHT_REUSE_ENABLE			_MK_ENUM_CONST(0x1)
> +#define CSC_D_MISC_CFG_0_SKIP_DATA_RLS_SHIFT			_MK_SHIFT_CONST(24)
> +#define CSC_D_MISC_CFG_0_SKIP_DATA_RLS_FIELD			_MK_FIELD_CONST(0x1, CSC_D_MISC_CFG_0_SKIP_DATA_RLS_SHIFT)
> +#define CSC_D_MISC_CFG_0_SKIP_DATA_RLS_DISABLE			_MK_ENUM_CONST(0x0)
> +#define CSC_D_MISC_CFG_0_SKIP_DATA_RLS_ENABLE			_MK_ENUM_CONST(0x1)
> +#define CSC_D_MISC_CFG_0_SKIP_WEIGHT_RLS_SHIFT			_MK_SHIFT_CONST(28)
> +#define CSC_D_MISC_CFG_0_SKIP_WEIGHT_RLS_FIELD			_MK_FIELD_CONST(0x1, CSC_D_MISC_CFG_0_SKIP_WEIGHT_RLS_SHIFT)
> +#define CSC_D_MISC_CFG_0_SKIP_WEIGHT_RLS_DISABLE			_MK_ENUM_CONST(0x0)
> +#define CSC_D_MISC_CFG_0_SKIP_WEIGHT_RLS_ENABLE			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register CSC_D_DATAIN_FORMAT_0
> +#define CSC_D_DATAIN_FORMAT_0			_MK_ADDR_CONST(0x4010)
> +#define CSC_D_DATAIN_FORMAT_0_DATAIN_FORMAT_SHIFT			_MK_SHIFT_CONST(0)
> +#define CSC_D_DATAIN_FORMAT_0_DATAIN_FORMAT_FIELD			_MK_FIELD_CONST(0x1, CSC_D_DATAIN_FORMAT_0_DATAIN_FORMAT_SHIFT)
> +#define CSC_D_DATAIN_FORMAT_0_DATAIN_FORMAT_FEATURE			_MK_ENUM_CONST(0x0)
> +#define CSC_D_DATAIN_FORMAT_0_DATAIN_FORMAT_PIXEL			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register CSC_D_DATAIN_SIZE_EXT_0_0
> +#define CSC_D_DATAIN_SIZE_EXT_0_0			_MK_ADDR_CONST(0x4014)
> +#define CSC_D_DATAIN_SIZE_EXT_0_0_DATAIN_WIDTH_EXT_SHIFT			_MK_SHIFT_CONST(0)
> +#define CSC_D_DATAIN_SIZE_EXT_0_0_DATAIN_WIDTH_EXT_FIELD			_MK_FIELD_CONST(0x1fff, CSC_D_DATAIN_SIZE_EXT_0_0_DATAIN_WIDTH_EXT_SHIFT)
> +#define CSC_D_DATAIN_SIZE_EXT_0_0_DATAIN_HEIGHT_EXT_SHIFT			_MK_SHIFT_CONST(16)
> +#define CSC_D_DATAIN_SIZE_EXT_0_0_DATAIN_HEIGHT_EXT_FIELD			_MK_FIELD_CONST(0x1fff, CSC_D_DATAIN_SIZE_EXT_0_0_DATAIN_HEIGHT_EXT_SHIFT)
> +
> +
> +// Register CSC_D_DATAIN_SIZE_EXT_1_0
> +#define CSC_D_DATAIN_SIZE_EXT_1_0			_MK_ADDR_CONST(0x4018)
> +#define CSC_D_DATAIN_SIZE_EXT_1_0_DATAIN_CHANNEL_EXT_SHIFT			_MK_SHIFT_CONST(0)
> +#define CSC_D_DATAIN_SIZE_EXT_1_0_DATAIN_CHANNEL_EXT_FIELD			_MK_FIELD_CONST(0x1fff, CSC_D_DATAIN_SIZE_EXT_1_0_DATAIN_CHANNEL_EXT_SHIFT)
> +
> +
> +// Register CSC_D_BATCH_NUMBER_0
> +#define CSC_D_BATCH_NUMBER_0			_MK_ADDR_CONST(0x401c)
> +#define CSC_D_BATCH_NUMBER_0_BATCHES_SHIFT			_MK_SHIFT_CONST(0)
> +#define CSC_D_BATCH_NUMBER_0_BATCHES_FIELD			_MK_FIELD_CONST(0x1f, CSC_D_BATCH_NUMBER_0_BATCHES_SHIFT)
> +
> +
> +// Register CSC_D_POST_Y_EXTENSION_0
> +#define CSC_D_POST_Y_EXTENSION_0			_MK_ADDR_CONST(0x4020)
> +#define CSC_D_POST_Y_EXTENSION_0_Y_EXTENSION_SHIFT			_MK_SHIFT_CONST(0)
> +#define CSC_D_POST_Y_EXTENSION_0_Y_EXTENSION_FIELD			_MK_FIELD_CONST(0x3, CSC_D_POST_Y_EXTENSION_0_Y_EXTENSION_SHIFT)
> +
> +
> +// Register CSC_D_ENTRY_PER_SLICE_0
> +#define CSC_D_ENTRY_PER_SLICE_0			_MK_ADDR_CONST(0x4024)
> +#define CSC_D_ENTRY_PER_SLICE_0_ENTRIES_SHIFT			_MK_SHIFT_CONST(0)
> +#define CSC_D_ENTRY_PER_SLICE_0_ENTRIES_FIELD			_MK_FIELD_CONST(0x3fff, CSC_D_ENTRY_PER_SLICE_0_ENTRIES_SHIFT)
> +
> +
> +// Register CSC_D_WEIGHT_FORMAT_0
> +#define CSC_D_WEIGHT_FORMAT_0			_MK_ADDR_CONST(0x4028)
> +#define CSC_D_WEIGHT_FORMAT_0_WEIGHT_FORMAT_SHIFT			_MK_SHIFT_CONST(0)
> +#define CSC_D_WEIGHT_FORMAT_0_WEIGHT_FORMAT_FIELD			_MK_FIELD_CONST(0x1, CSC_D_WEIGHT_FORMAT_0_WEIGHT_FORMAT_SHIFT)
> +#define CSC_D_WEIGHT_FORMAT_0_WEIGHT_FORMAT_UNCOMPRESSED			_MK_ENUM_CONST(0x0)
> +#define CSC_D_WEIGHT_FORMAT_0_WEIGHT_FORMAT_COMPRESSED			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register CSC_D_WEIGHT_SIZE_EXT_0_0
> +#define CSC_D_WEIGHT_SIZE_EXT_0_0			_MK_ADDR_CONST(0x402c)
> +#define CSC_D_WEIGHT_SIZE_EXT_0_0_WEIGHT_WIDTH_EXT_SHIFT			_MK_SHIFT_CONST(0)
> +#define CSC_D_WEIGHT_SIZE_EXT_0_0_WEIGHT_WIDTH_EXT_FIELD			_MK_FIELD_CONST(0x1f, CSC_D_WEIGHT_SIZE_EXT_0_0_WEIGHT_WIDTH_EXT_SHIFT)
> +#define CSC_D_WEIGHT_SIZE_EXT_0_0_WEIGHT_HEIGHT_EXT_SHIFT			_MK_SHIFT_CONST(16)
> +#define CSC_D_WEIGHT_SIZE_EXT_0_0_WEIGHT_HEIGHT_EXT_FIELD			_MK_FIELD_CONST(0x1f, CSC_D_WEIGHT_SIZE_EXT_0_0_WEIGHT_HEIGHT_EXT_SHIFT)
> +
> +
> +// Register CSC_D_WEIGHT_SIZE_EXT_1_0
> +#define CSC_D_WEIGHT_SIZE_EXT_1_0			_MK_ADDR_CONST(0x4030)
> +#define CSC_D_WEIGHT_SIZE_EXT_1_0_WEIGHT_CHANNEL_EXT_SHIFT			_MK_SHIFT_CONST(0)
> +#define CSC_D_WEIGHT_SIZE_EXT_1_0_WEIGHT_CHANNEL_EXT_FIELD			_MK_FIELD_CONST(0x1fff, CSC_D_WEIGHT_SIZE_EXT_1_0_WEIGHT_CHANNEL_EXT_SHIFT)
> +#define CSC_D_WEIGHT_SIZE_EXT_1_0_WEIGHT_KERNEL_SHIFT			_MK_SHIFT_CONST(16)
> +#define CSC_D_WEIGHT_SIZE_EXT_1_0_WEIGHT_KERNEL_FIELD			_MK_FIELD_CONST(0x1fff, CSC_D_WEIGHT_SIZE_EXT_1_0_WEIGHT_KERNEL_SHIFT)
> +
> +
> +// Register CSC_D_WEIGHT_BYTES_0
> +#define CSC_D_WEIGHT_BYTES_0			_MK_ADDR_CONST(0x4034)
> +#define CSC_D_WEIGHT_BYTES_0_WEIGHT_BYTES_SHIFT			_MK_SHIFT_CONST(0)
> +#define CSC_D_WEIGHT_BYTES_0_WEIGHT_BYTES_FIELD			_MK_FIELD_CONST(0xffffffff, CSC_D_WEIGHT_BYTES_0_WEIGHT_BYTES_SHIFT)
> +
> +
> +// Register CSC_D_WMB_BYTES_0
> +#define CSC_D_WMB_BYTES_0			_MK_ADDR_CONST(0x4038)
> +#define CSC_D_WMB_BYTES_0_WMB_BYTES_SHIFT			_MK_SHIFT_CONST(0)
> +#define CSC_D_WMB_BYTES_0_WMB_BYTES_FIELD			_MK_FIELD_CONST(0xfffffff, CSC_D_WMB_BYTES_0_WMB_BYTES_SHIFT)
> +
> +
> +// Register CSC_D_DATAOUT_SIZE_0_0
> +#define CSC_D_DATAOUT_SIZE_0_0			_MK_ADDR_CONST(0x403c)
> +#define CSC_D_DATAOUT_SIZE_0_0_DATAOUT_WIDTH_SHIFT			_MK_SHIFT_CONST(0)
> +#define CSC_D_DATAOUT_SIZE_0_0_DATAOUT_WIDTH_FIELD			_MK_FIELD_CONST(0x1fff, CSC_D_DATAOUT_SIZE_0_0_DATAOUT_WIDTH_SHIFT)
> +#define CSC_D_DATAOUT_SIZE_0_0_DATAOUT_HEIGHT_SHIFT			_MK_SHIFT_CONST(16)
> +#define CSC_D_DATAOUT_SIZE_0_0_DATAOUT_HEIGHT_FIELD			_MK_FIELD_CONST(0x1fff, CSC_D_DATAOUT_SIZE_0_0_DATAOUT_HEIGHT_SHIFT)
> +
> +
> +// Register CSC_D_DATAOUT_SIZE_1_0
> +#define CSC_D_DATAOUT_SIZE_1_0			_MK_ADDR_CONST(0x4040)
> +#define CSC_D_DATAOUT_SIZE_1_0_DATAOUT_CHANNEL_SHIFT			_MK_SHIFT_CONST(0)
> +#define CSC_D_DATAOUT_SIZE_1_0_DATAOUT_CHANNEL_FIELD			_MK_FIELD_CONST(0x1fff, CSC_D_DATAOUT_SIZE_1_0_DATAOUT_CHANNEL_SHIFT)
> +
> +
> +// Register CSC_D_ATOMICS_0
> +#define CSC_D_ATOMICS_0			_MK_ADDR_CONST(0x4044)
> +#define CSC_D_ATOMICS_0_ATOMICS_SHIFT			_MK_SHIFT_CONST(0)
> +#define CSC_D_ATOMICS_0_ATOMICS_FIELD			_MK_FIELD_CONST(0x1fffff, CSC_D_ATOMICS_0_ATOMICS_SHIFT)
> +
> +
> +// Register CSC_D_RELEASE_0
> +#define CSC_D_RELEASE_0			_MK_ADDR_CONST(0x4048)
> +#define CSC_D_RELEASE_0_RLS_SLICES_SHIFT			_MK_SHIFT_CONST(0)
> +#define CSC_D_RELEASE_0_RLS_SLICES_FIELD			_MK_FIELD_CONST(0xfff, CSC_D_RELEASE_0_RLS_SLICES_SHIFT)
> +
> +
> +// Register CSC_D_CONV_STRIDE_EXT_0
> +#define CSC_D_CONV_STRIDE_EXT_0			_MK_ADDR_CONST(0x404c)
> +#define CSC_D_CONV_STRIDE_EXT_0_CONV_X_STRIDE_EXT_SHIFT			_MK_SHIFT_CONST(0)
> +#define CSC_D_CONV_STRIDE_EXT_0_CONV_X_STRIDE_EXT_FIELD			_MK_FIELD_CONST(0x7, CSC_D_CONV_STRIDE_EXT_0_CONV_X_STRIDE_EXT_SHIFT)
> +#define CSC_D_CONV_STRIDE_EXT_0_CONV_Y_STRIDE_EXT_SHIFT			_MK_SHIFT_CONST(16)
> +#define CSC_D_CONV_STRIDE_EXT_0_CONV_Y_STRIDE_EXT_FIELD			_MK_FIELD_CONST(0x7, CSC_D_CONV_STRIDE_EXT_0_CONV_Y_STRIDE_EXT_SHIFT)
> +
> +
> +// Register CSC_D_DILATION_EXT_0
> +#define CSC_D_DILATION_EXT_0			_MK_ADDR_CONST(0x4050)
> +#define CSC_D_DILATION_EXT_0_X_DILATION_EXT_SHIFT			_MK_SHIFT_CONST(0)
> +#define CSC_D_DILATION_EXT_0_X_DILATION_EXT_FIELD			_MK_FIELD_CONST(0x1f, CSC_D_DILATION_EXT_0_X_DILATION_EXT_SHIFT)
> +#define CSC_D_DILATION_EXT_0_Y_DILATION_EXT_SHIFT			_MK_SHIFT_CONST(16)
> +#define CSC_D_DILATION_EXT_0_Y_DILATION_EXT_FIELD			_MK_FIELD_CONST(0x1f, CSC_D_DILATION_EXT_0_Y_DILATION_EXT_SHIFT)
> +
> +
> +// Register CSC_D_ZERO_PADDING_0
> +#define CSC_D_ZERO_PADDING_0			_MK_ADDR_CONST(0x4054)
> +#define CSC_D_ZERO_PADDING_0_PAD_LEFT_SHIFT			_MK_SHIFT_CONST(0)
> +#define CSC_D_ZERO_PADDING_0_PAD_LEFT_FIELD			_MK_FIELD_CONST(0x1f, CSC_D_ZERO_PADDING_0_PAD_LEFT_SHIFT)
> +#define CSC_D_ZERO_PADDING_0_PAD_TOP_SHIFT			_MK_SHIFT_CONST(16)
> +#define CSC_D_ZERO_PADDING_0_PAD_TOP_FIELD			_MK_FIELD_CONST(0x1f, CSC_D_ZERO_PADDING_0_PAD_TOP_SHIFT)
> +
> +
> +// Register CSC_D_ZERO_PADDING_VALUE_0
> +#define CSC_D_ZERO_PADDING_VALUE_0			_MK_ADDR_CONST(0x4058)
> +#define CSC_D_ZERO_PADDING_VALUE_0_PAD_VALUE_SHIFT			_MK_SHIFT_CONST(0)
> +#define CSC_D_ZERO_PADDING_VALUE_0_PAD_VALUE_FIELD			_MK_FIELD_CONST(0xffff, CSC_D_ZERO_PADDING_VALUE_0_PAD_VALUE_SHIFT)
> +
> +
> +// Register CSC_D_BANK_0
> +#define CSC_D_BANK_0			_MK_ADDR_CONST(0x405c)
> +#define CSC_D_BANK_0_DATA_BANK_SHIFT			_MK_SHIFT_CONST(0)
> +#define CSC_D_BANK_0_DATA_BANK_FIELD			_MK_FIELD_CONST(0x1f, CSC_D_BANK_0_DATA_BANK_SHIFT)
> +#define CSC_D_BANK_0_WEIGHT_BANK_SHIFT			_MK_SHIFT_CONST(16)
> +#define CSC_D_BANK_0_WEIGHT_BANK_FIELD			_MK_FIELD_CONST(0x1f, CSC_D_BANK_0_WEIGHT_BANK_SHIFT)
> +
> +
> +// Register CSC_D_PRA_CFG_0
> +#define CSC_D_PRA_CFG_0			_MK_ADDR_CONST(0x4060)
> +#define CSC_D_PRA_CFG_0_PRA_TRUNCATE_SHIFT			_MK_SHIFT_CONST(0)
> +#define CSC_D_PRA_CFG_0_PRA_TRUNCATE_FIELD			_MK_FIELD_CONST(0x3, CSC_D_PRA_CFG_0_PRA_TRUNCATE_SHIFT)
> +
> +
> +// Register CSC_D_CYA_0
> +#define CSC_D_CYA_0			_MK_ADDR_CONST(0x4064)
> +#define CSC_D_CYA_0_CYA_SHIFT			_MK_SHIFT_CONST(0)
> +#define CSC_D_CYA_0_CYA_FIELD			_MK_FIELD_CONST(0xffffffff, CSC_D_CYA_0_CYA_SHIFT)
> +
> +
> +
> +// To satisfy various compilers and platforms,
> +// we let users control the types and syntax of certain constants, using macros.
> +#ifndef _MK_SHIFT_CONST
> +  #define _MK_SHIFT_CONST(_constant_) _constant_
> +#endif
> +#ifndef _MK_MASK_CONST
> +  #define _MK_MASK_CONST(_constant_) _constant_
> +#endif
> +#ifndef _MK_ENUM_CONST
> +  #define _MK_ENUM_CONST(_constant_) (_constant_ ## UL)
> +#endif
> +#ifndef _MK_ADDR_CONST
> +  #define _MK_ADDR_CONST(_constant_) _constant_
> +#endif
> +#ifndef _MK_FIELD_CONST
> +  #define _MK_FIELD_CONST(_mask_, _shift_) (_MK_MASK_CONST(_mask_) << _MK_SHIFT_CONST(_shift_))
> +#endif
> +
> +
> +// Register CMAC_A_S_STATUS_0
> +#define CMAC_A_S_STATUS_0			_MK_ADDR_CONST(0x5000)
> +#define CMAC_A_S_STATUS_0_STATUS_0_SHIFT			_MK_SHIFT_CONST(0)
> +#define CMAC_A_S_STATUS_0_STATUS_0_FIELD			_MK_FIELD_CONST(0x3, CMAC_A_S_STATUS_0_STATUS_0_SHIFT)
> +#define CMAC_A_S_STATUS_0_STATUS_0_IDLE			_MK_ENUM_CONST(0x0)
> +#define CMAC_A_S_STATUS_0_STATUS_0_RUNNING			_MK_ENUM_CONST(0x1)
> +#define CMAC_A_S_STATUS_0_STATUS_0_PENDING			_MK_ENUM_CONST(0x2)
> +#define CMAC_A_S_STATUS_0_STATUS_1_SHIFT			_MK_SHIFT_CONST(16)
> +#define CMAC_A_S_STATUS_0_STATUS_1_FIELD			_MK_FIELD_CONST(0x3, CMAC_A_S_STATUS_0_STATUS_1_SHIFT)
> +#define CMAC_A_S_STATUS_0_STATUS_1_IDLE			_MK_ENUM_CONST(0x0)
> +#define CMAC_A_S_STATUS_0_STATUS_1_RUNNING			_MK_ENUM_CONST(0x1)
> +#define CMAC_A_S_STATUS_0_STATUS_1_PENDING			_MK_ENUM_CONST(0x2)
> +
> +
> +// Register CMAC_A_S_POINTER_0
> +#define CMAC_A_S_POINTER_0			_MK_ADDR_CONST(0x5004)
> +#define CMAC_A_S_POINTER_0_PRODUCER_SHIFT			_MK_SHIFT_CONST(0)
> +#define CMAC_A_S_POINTER_0_PRODUCER_FIELD			_MK_FIELD_CONST(0x1, CMAC_A_S_POINTER_0_PRODUCER_SHIFT)
> +#define CMAC_A_S_POINTER_0_PRODUCER_GROUP_0			_MK_ENUM_CONST(0x0)
> +#define CMAC_A_S_POINTER_0_PRODUCER_GROUP_1			_MK_ENUM_CONST(0x1)
> +#define CMAC_A_S_POINTER_0_CONSUMER_SHIFT			_MK_SHIFT_CONST(16)
> +#define CMAC_A_S_POINTER_0_CONSUMER_FIELD			_MK_FIELD_CONST(0x1, CMAC_A_S_POINTER_0_CONSUMER_SHIFT)
> +#define CMAC_A_S_POINTER_0_CONSUMER_GROUP_0			_MK_ENUM_CONST(0x0)
> +#define CMAC_A_S_POINTER_0_CONSUMER_GROUP_1			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register CMAC_A_D_OP_ENABLE_0
> +#define CMAC_A_D_OP_ENABLE_0			_MK_ADDR_CONST(0x5008)
> +#define CMAC_A_D_OP_ENABLE_0_OP_EN_SHIFT			_MK_SHIFT_CONST(0)
> +#define CMAC_A_D_OP_ENABLE_0_OP_EN_FIELD			_MK_FIELD_CONST(0x1, CMAC_A_D_OP_ENABLE_0_OP_EN_SHIFT)
> +#define CMAC_A_D_OP_ENABLE_0_OP_EN_DISABLE			_MK_ENUM_CONST(0x0)
> +#define CMAC_A_D_OP_ENABLE_0_OP_EN_ENABLE			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register CMAC_A_D_MISC_CFG_0
> +#define CMAC_A_D_MISC_CFG_0			_MK_ADDR_CONST(0x500c)
> +#define CMAC_A_D_MISC_CFG_0_CONV_MODE_SHIFT			_MK_SHIFT_CONST(0)
> +#define CMAC_A_D_MISC_CFG_0_CONV_MODE_FIELD			_MK_FIELD_CONST(0x1, CMAC_A_D_MISC_CFG_0_CONV_MODE_SHIFT)
> +#define CMAC_A_D_MISC_CFG_0_CONV_MODE_DIRECT			_MK_ENUM_CONST(0x0)
> +#define CMAC_A_D_MISC_CFG_0_CONV_MODE_WINOGRAD			_MK_ENUM_CONST(0x1)
> +#define CMAC_A_D_MISC_CFG_0_PROC_PRECISION_SHIFT			_MK_SHIFT_CONST(12)
> +#define CMAC_A_D_MISC_CFG_0_PROC_PRECISION_FIELD			_MK_FIELD_CONST(0x3, CMAC_A_D_MISC_CFG_0_PROC_PRECISION_SHIFT)
> +#define CMAC_A_D_MISC_CFG_0_PROC_PRECISION_INT8			_MK_ENUM_CONST(0x0)
> +#define CMAC_A_D_MISC_CFG_0_PROC_PRECISION_INT16			_MK_ENUM_CONST(0x1)
> +#define CMAC_A_D_MISC_CFG_0_PROC_PRECISION_FP16			_MK_ENUM_CONST(0x2)
> +
> +
> +
> +// To satisfy various compilers and platforms,
> +// we let users control the types and syntax of certain constants, using macros.
> +#ifndef _MK_SHIFT_CONST
> +  #define _MK_SHIFT_CONST(_constant_) _constant_
> +#endif
> +#ifndef _MK_MASK_CONST
> +  #define _MK_MASK_CONST(_constant_) _constant_
> +#endif
> +#ifndef _MK_ENUM_CONST
> +  #define _MK_ENUM_CONST(_constant_) (_constant_ ## UL)
> +#endif
> +#ifndef _MK_ADDR_CONST
> +  #define _MK_ADDR_CONST(_constant_) _constant_
> +#endif
> +#ifndef _MK_FIELD_CONST
> +  #define _MK_FIELD_CONST(_mask_, _shift_) (_MK_MASK_CONST(_mask_) << _MK_SHIFT_CONST(_shift_))
> +#endif
> +
> +
> +// Register CMAC_B_S_STATUS_0
> +#define CMAC_B_S_STATUS_0			_MK_ADDR_CONST(0x6000)
> +#define CMAC_B_S_STATUS_0_STATUS_0_SHIFT			_MK_SHIFT_CONST(0)
> +#define CMAC_B_S_STATUS_0_STATUS_0_FIELD			_MK_FIELD_CONST(0x3, CMAC_B_S_STATUS_0_STATUS_0_SHIFT)
> +#define CMAC_B_S_STATUS_0_STATUS_0_IDLE			_MK_ENUM_CONST(0x0)
> +#define CMAC_B_S_STATUS_0_STATUS_0_RUNNING			_MK_ENUM_CONST(0x1)
> +#define CMAC_B_S_STATUS_0_STATUS_0_PENDING			_MK_ENUM_CONST(0x2)
> +#define CMAC_B_S_STATUS_0_STATUS_1_SHIFT			_MK_SHIFT_CONST(16)
> +#define CMAC_B_S_STATUS_0_STATUS_1_FIELD			_MK_FIELD_CONST(0x3, CMAC_B_S_STATUS_0_STATUS_1_SHIFT)
> +#define CMAC_B_S_STATUS_0_STATUS_1_IDLE			_MK_ENUM_CONST(0x0)
> +#define CMAC_B_S_STATUS_0_STATUS_1_RUNNING			_MK_ENUM_CONST(0x1)
> +#define CMAC_B_S_STATUS_0_STATUS_1_PENDING			_MK_ENUM_CONST(0x2)
> +
> +
> +// Register CMAC_B_S_POINTER_0
> +#define CMAC_B_S_POINTER_0			_MK_ADDR_CONST(0x6004)
> +#define CMAC_B_S_POINTER_0_PRODUCER_SHIFT			_MK_SHIFT_CONST(0)
> +#define CMAC_B_S_POINTER_0_PRODUCER_FIELD			_MK_FIELD_CONST(0x1, CMAC_B_S_POINTER_0_PRODUCER_SHIFT)
> +#define CMAC_B_S_POINTER_0_PRODUCER_GROUP_0			_MK_ENUM_CONST(0x0)
> +#define CMAC_B_S_POINTER_0_PRODUCER_GROUP_1			_MK_ENUM_CONST(0x1)
> +#define CMAC_B_S_POINTER_0_CONSUMER_SHIFT			_MK_SHIFT_CONST(16)
> +#define CMAC_B_S_POINTER_0_CONSUMER_FIELD			_MK_FIELD_CONST(0x1, CMAC_B_S_POINTER_0_CONSUMER_SHIFT)
> +#define CMAC_B_S_POINTER_0_CONSUMER_GROUP_0			_MK_ENUM_CONST(0x0)
> +#define CMAC_B_S_POINTER_0_CONSUMER_GROUP_1			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register CMAC_B_D_OP_ENABLE_0
> +#define CMAC_B_D_OP_ENABLE_0			_MK_ADDR_CONST(0x6008)
> +#define CMAC_B_D_OP_ENABLE_0_OP_EN_SHIFT			_MK_SHIFT_CONST(0)
> +#define CMAC_B_D_OP_ENABLE_0_OP_EN_FIELD			_MK_FIELD_CONST(0x1, CMAC_B_D_OP_ENABLE_0_OP_EN_SHIFT)
> +#define CMAC_B_D_OP_ENABLE_0_OP_EN_DISABLE			_MK_ENUM_CONST(0x0)
> +#define CMAC_B_D_OP_ENABLE_0_OP_EN_ENABLE			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register CMAC_B_D_MISC_CFG_0
> +#define CMAC_B_D_MISC_CFG_0			_MK_ADDR_CONST(0x600c)
> +#define CMAC_B_D_MISC_CFG_0_CONV_MODE_SHIFT			_MK_SHIFT_CONST(0)
> +#define CMAC_B_D_MISC_CFG_0_CONV_MODE_FIELD			_MK_FIELD_CONST(0x1, CMAC_B_D_MISC_CFG_0_CONV_MODE_SHIFT)
> +#define CMAC_B_D_MISC_CFG_0_CONV_MODE_DIRECT			_MK_ENUM_CONST(0x0)
> +#define CMAC_B_D_MISC_CFG_0_CONV_MODE_WINOGRAD			_MK_ENUM_CONST(0x1)
> +#define CMAC_B_D_MISC_CFG_0_PROC_PRECISION_SHIFT			_MK_SHIFT_CONST(12)
> +#define CMAC_B_D_MISC_CFG_0_PROC_PRECISION_FIELD			_MK_FIELD_CONST(0x3, CMAC_B_D_MISC_CFG_0_PROC_PRECISION_SHIFT)
> +#define CMAC_B_D_MISC_CFG_0_PROC_PRECISION_INT8			_MK_ENUM_CONST(0x0)
> +#define CMAC_B_D_MISC_CFG_0_PROC_PRECISION_INT16			_MK_ENUM_CONST(0x1)
> +#define CMAC_B_D_MISC_CFG_0_PROC_PRECISION_FP16			_MK_ENUM_CONST(0x2)
> +
> +
> +
> +// To satisfy various compilers and platforms,
> +// we let users control the types and syntax of certain constants, using macros.
> +#ifndef _MK_SHIFT_CONST
> +  #define _MK_SHIFT_CONST(_constant_) _constant_
> +#endif
> +#ifndef _MK_MASK_CONST
> +  #define _MK_MASK_CONST(_constant_) _constant_
> +#endif
> +#ifndef _MK_ENUM_CONST
> +  #define _MK_ENUM_CONST(_constant_) (_constant_ ## UL)
> +#endif
> +#ifndef _MK_ADDR_CONST
> +  #define _MK_ADDR_CONST(_constant_) _constant_
> +#endif
> +#ifndef _MK_FIELD_CONST
> +  #define _MK_FIELD_CONST(_mask_, _shift_) (_MK_MASK_CONST(_mask_) << _MK_SHIFT_CONST(_shift_))
> +#endif
> +
> +
> +// Register CACC_S_STATUS_0
> +#define CACC_S_STATUS_0			_MK_ADDR_CONST(0x7000)
> +#define CACC_S_STATUS_0_STATUS_0_SHIFT			_MK_SHIFT_CONST(0)
> +#define CACC_S_STATUS_0_STATUS_0_FIELD			_MK_FIELD_CONST(0x3, CACC_S_STATUS_0_STATUS_0_SHIFT)
> +#define CACC_S_STATUS_0_STATUS_0_IDLE			_MK_ENUM_CONST(0x0)
> +#define CACC_S_STATUS_0_STATUS_0_RUNNING			_MK_ENUM_CONST(0x1)
> +#define CACC_S_STATUS_0_STATUS_0_PENDING			_MK_ENUM_CONST(0x2)
> +#define CACC_S_STATUS_0_STATUS_1_SHIFT			_MK_SHIFT_CONST(16)
> +#define CACC_S_STATUS_0_STATUS_1_FIELD			_MK_FIELD_CONST(0x3, CACC_S_STATUS_0_STATUS_1_SHIFT)
> +#define CACC_S_STATUS_0_STATUS_1_IDLE			_MK_ENUM_CONST(0x0)
> +#define CACC_S_STATUS_0_STATUS_1_RUNNING			_MK_ENUM_CONST(0x1)
> +#define CACC_S_STATUS_0_STATUS_1_PENDING			_MK_ENUM_CONST(0x2)
> +
> +
> +// Register CACC_S_POINTER_0
> +#define CACC_S_POINTER_0			_MK_ADDR_CONST(0x7004)
> +#define CACC_S_POINTER_0_PRODUCER_SHIFT			_MK_SHIFT_CONST(0)
> +#define CACC_S_POINTER_0_PRODUCER_FIELD			_MK_FIELD_CONST(0x1, CACC_S_POINTER_0_PRODUCER_SHIFT)
> +#define CACC_S_POINTER_0_PRODUCER_GROUP_0			_MK_ENUM_CONST(0x0)
> +#define CACC_S_POINTER_0_PRODUCER_GROUP_1			_MK_ENUM_CONST(0x1)
> +#define CACC_S_POINTER_0_CONSUMER_SHIFT			_MK_SHIFT_CONST(16)
> +#define CACC_S_POINTER_0_CONSUMER_FIELD			_MK_FIELD_CONST(0x1, CACC_S_POINTER_0_CONSUMER_SHIFT)
> +#define CACC_S_POINTER_0_CONSUMER_GROUP_0			_MK_ENUM_CONST(0x0)
> +#define CACC_S_POINTER_0_CONSUMER_GROUP_1			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register CACC_D_OP_ENABLE_0
> +#define CACC_D_OP_ENABLE_0			_MK_ADDR_CONST(0x7008)
> +#define CACC_D_OP_ENABLE_0_OP_EN_SHIFT			_MK_SHIFT_CONST(0)
> +#define CACC_D_OP_ENABLE_0_OP_EN_FIELD			_MK_FIELD_CONST(0x1, CACC_D_OP_ENABLE_0_OP_EN_SHIFT)
> +#define CACC_D_OP_ENABLE_0_OP_EN_DISABLE			_MK_ENUM_CONST(0x0)
> +#define CACC_D_OP_ENABLE_0_OP_EN_ENABLE			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register CACC_D_MISC_CFG_0
> +#define CACC_D_MISC_CFG_0			_MK_ADDR_CONST(0x700c)
> +#define CACC_D_MISC_CFG_0_CONV_MODE_SHIFT			_MK_SHIFT_CONST(0)
> +#define CACC_D_MISC_CFG_0_CONV_MODE_FIELD			_MK_FIELD_CONST(0x1, CACC_D_MISC_CFG_0_CONV_MODE_SHIFT)
> +#define CACC_D_MISC_CFG_0_CONV_MODE_DIRECT			_MK_ENUM_CONST(0x0)
> +#define CACC_D_MISC_CFG_0_CONV_MODE_WINOGRAD			_MK_ENUM_CONST(0x1)
> +#define CACC_D_MISC_CFG_0_PROC_PRECISION_SHIFT			_MK_SHIFT_CONST(12)
> +#define CACC_D_MISC_CFG_0_PROC_PRECISION_FIELD			_MK_FIELD_CONST(0x3, CACC_D_MISC_CFG_0_PROC_PRECISION_SHIFT)
> +#define CACC_D_MISC_CFG_0_PROC_PRECISION_INT8			_MK_ENUM_CONST(0x0)
> +#define CACC_D_MISC_CFG_0_PROC_PRECISION_INT16			_MK_ENUM_CONST(0x1)
> +#define CACC_D_MISC_CFG_0_PROC_PRECISION_FP16			_MK_ENUM_CONST(0x2)
> +
> +
> +// Register CACC_D_DATAOUT_SIZE_0_0
> +#define CACC_D_DATAOUT_SIZE_0_0			_MK_ADDR_CONST(0x7010)
> +#define CACC_D_DATAOUT_SIZE_0_0_DATAOUT_WIDTH_SHIFT			_MK_SHIFT_CONST(0)
> +#define CACC_D_DATAOUT_SIZE_0_0_DATAOUT_WIDTH_FIELD			_MK_FIELD_CONST(0x1fff, CACC_D_DATAOUT_SIZE_0_0_DATAOUT_WIDTH_SHIFT)
> +#define CACC_D_DATAOUT_SIZE_0_0_DATAOUT_HEIGHT_SHIFT			_MK_SHIFT_CONST(16)
> +#define CACC_D_DATAOUT_SIZE_0_0_DATAOUT_HEIGHT_FIELD			_MK_FIELD_CONST(0x1fff, CACC_D_DATAOUT_SIZE_0_0_DATAOUT_HEIGHT_SHIFT)
> +
> +
> +// Register CACC_D_DATAOUT_SIZE_1_0
> +#define CACC_D_DATAOUT_SIZE_1_0			_MK_ADDR_CONST(0x7014)
> +#define CACC_D_DATAOUT_SIZE_1_0_DATAOUT_CHANNEL_SHIFT			_MK_SHIFT_CONST(0)
> +#define CACC_D_DATAOUT_SIZE_1_0_DATAOUT_CHANNEL_FIELD			_MK_FIELD_CONST(0x1fff, CACC_D_DATAOUT_SIZE_1_0_DATAOUT_CHANNEL_SHIFT)
> +
> +
> +// Register CACC_D_DATAOUT_ADDR_0
> +#define CACC_D_DATAOUT_ADDR_0			_MK_ADDR_CONST(0x7018)
> +#define CACC_D_DATAOUT_ADDR_0_DATAOUT_ADDR_SHIFT			_MK_SHIFT_CONST(0)
> +#define CACC_D_DATAOUT_ADDR_0_DATAOUT_ADDR_FIELD			_MK_FIELD_CONST(0xffffffff, CACC_D_DATAOUT_ADDR_0_DATAOUT_ADDR_SHIFT)
> +
> +
> +// Register CACC_D_BATCH_NUMBER_0
> +#define CACC_D_BATCH_NUMBER_0			_MK_ADDR_CONST(0x701c)
> +#define CACC_D_BATCH_NUMBER_0_BATCHES_SHIFT			_MK_SHIFT_CONST(0)
> +#define CACC_D_BATCH_NUMBER_0_BATCHES_FIELD			_MK_FIELD_CONST(0x1f, CACC_D_BATCH_NUMBER_0_BATCHES_SHIFT)
> +
> +
> +// Register CACC_D_LINE_STRIDE_0
> +#define CACC_D_LINE_STRIDE_0			_MK_ADDR_CONST(0x7020)
> +#define CACC_D_LINE_STRIDE_0_LINE_STRIDE_SHIFT			_MK_SHIFT_CONST(0)
> +#define CACC_D_LINE_STRIDE_0_LINE_STRIDE_FIELD			_MK_FIELD_CONST(0xffffff, CACC_D_LINE_STRIDE_0_LINE_STRIDE_SHIFT)
> +
> +
> +// Register CACC_D_SURF_STRIDE_0
> +#define CACC_D_SURF_STRIDE_0			_MK_ADDR_CONST(0x7024)
> +#define CACC_D_SURF_STRIDE_0_SURF_STRIDE_SHIFT			_MK_SHIFT_CONST(0)
> +#define CACC_D_SURF_STRIDE_0_SURF_STRIDE_FIELD			_MK_FIELD_CONST(0xffffff, CACC_D_SURF_STRIDE_0_SURF_STRIDE_SHIFT)
> +
> +
> +// Register CACC_D_DATAOUT_MAP_0
> +#define CACC_D_DATAOUT_MAP_0			_MK_ADDR_CONST(0x7028)
> +#define CACC_D_DATAOUT_MAP_0_LINE_PACKED_SHIFT			_MK_SHIFT_CONST(0)
> +#define CACC_D_DATAOUT_MAP_0_LINE_PACKED_FIELD			_MK_FIELD_CONST(0x1, CACC_D_DATAOUT_MAP_0_LINE_PACKED_SHIFT)
> +#define CACC_D_DATAOUT_MAP_0_LINE_PACKED_FALSE			_MK_ENUM_CONST(0x0)
> +#define CACC_D_DATAOUT_MAP_0_LINE_PACKED_TRUE			_MK_ENUM_CONST(0x1)
> +#define CACC_D_DATAOUT_MAP_0_SURF_PACKED_SHIFT			_MK_SHIFT_CONST(16)
> +#define CACC_D_DATAOUT_MAP_0_SURF_PACKED_FIELD			_MK_FIELD_CONST(0x1, CACC_D_DATAOUT_MAP_0_SURF_PACKED_SHIFT)
> +#define CACC_D_DATAOUT_MAP_0_SURF_PACKED_FALSE			_MK_ENUM_CONST(0x0)
> +#define CACC_D_DATAOUT_MAP_0_SURF_PACKED_TRUE			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register CACC_D_CLIP_CFG_0
> +#define CACC_D_CLIP_CFG_0			_MK_ADDR_CONST(0x702c)
> +#define CACC_D_CLIP_CFG_0_CLIP_TRUNCATE_SHIFT			_MK_SHIFT_CONST(0)
> +#define CACC_D_CLIP_CFG_0_CLIP_TRUNCATE_FIELD			_MK_FIELD_CONST(0x1f, CACC_D_CLIP_CFG_0_CLIP_TRUNCATE_SHIFT)
> +
> +
> +// Register CACC_D_OUT_SATURATION_0
> +#define CACC_D_OUT_SATURATION_0			_MK_ADDR_CONST(0x7030)
> +#define CACC_D_OUT_SATURATION_0_SAT_COUNT_SHIFT			_MK_SHIFT_CONST(0)
> +#define CACC_D_OUT_SATURATION_0_SAT_COUNT_FIELD			_MK_FIELD_CONST(0xffffffff, CACC_D_OUT_SATURATION_0_SAT_COUNT_SHIFT)
> +
> +
> +// Register CACC_D_CYA_0
> +#define CACC_D_CYA_0			_MK_ADDR_CONST(0x7034)
> +#define CACC_D_CYA_0_CYA_SHIFT			_MK_SHIFT_CONST(0)
> +#define CACC_D_CYA_0_CYA_FIELD			_MK_FIELD_CONST(0xffffffff, CACC_D_CYA_0_CYA_SHIFT)
> +
> +
> +
> +// To satisfy various compilers and platforms,
> +// we let users control the types and syntax of certain constants, using macros.
> +#ifndef _MK_SHIFT_CONST
> +  #define _MK_SHIFT_CONST(_constant_) _constant_
> +#endif
> +#ifndef _MK_MASK_CONST
> +  #define _MK_MASK_CONST(_constant_) _constant_
> +#endif
> +#ifndef _MK_ENUM_CONST
> +  #define _MK_ENUM_CONST(_constant_) (_constant_ ## UL)
> +#endif
> +#ifndef _MK_ADDR_CONST
> +  #define _MK_ADDR_CONST(_constant_) _constant_
> +#endif
> +#ifndef _MK_FIELD_CONST
> +  #define _MK_FIELD_CONST(_mask_, _shift_) (_MK_MASK_CONST(_mask_) << _MK_SHIFT_CONST(_shift_))
> +#endif
> +
> +
> +// Register SDP_RDMA_S_STATUS_0
> +#define SDP_RDMA_S_STATUS_0			_MK_ADDR_CONST(0x8000)
> +#define SDP_RDMA_S_STATUS_0_STATUS_0_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_RDMA_S_STATUS_0_STATUS_0_FIELD			_MK_FIELD_CONST(0x3, SDP_RDMA_S_STATUS_0_STATUS_0_SHIFT)
> +#define SDP_RDMA_S_STATUS_0_STATUS_0_IDLE			_MK_ENUM_CONST(0x0)
> +#define SDP_RDMA_S_STATUS_0_STATUS_0_RUNNING			_MK_ENUM_CONST(0x1)
> +#define SDP_RDMA_S_STATUS_0_STATUS_0_PENDING			_MK_ENUM_CONST(0x2)
> +#define SDP_RDMA_S_STATUS_0_STATUS_1_SHIFT			_MK_SHIFT_CONST(16)
> +#define SDP_RDMA_S_STATUS_0_STATUS_1_FIELD			_MK_FIELD_CONST(0x3, SDP_RDMA_S_STATUS_0_STATUS_1_SHIFT)
> +#define SDP_RDMA_S_STATUS_0_STATUS_1_IDLE			_MK_ENUM_CONST(0x0)
> +#define SDP_RDMA_S_STATUS_0_STATUS_1_RUNNING			_MK_ENUM_CONST(0x1)
> +#define SDP_RDMA_S_STATUS_0_STATUS_1_PENDING			_MK_ENUM_CONST(0x2)
> +
> +
> +// Register SDP_RDMA_S_POINTER_0
> +#define SDP_RDMA_S_POINTER_0			_MK_ADDR_CONST(0x8004)
> +#define SDP_RDMA_S_POINTER_0_PRODUCER_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_RDMA_S_POINTER_0_PRODUCER_FIELD			_MK_FIELD_CONST(0x1, SDP_RDMA_S_POINTER_0_PRODUCER_SHIFT)
> +#define SDP_RDMA_S_POINTER_0_PRODUCER_GROUP_0			_MK_ENUM_CONST(0x0)
> +#define SDP_RDMA_S_POINTER_0_PRODUCER_GROUP_1			_MK_ENUM_CONST(0x1)
> +#define SDP_RDMA_S_POINTER_0_CONSUMER_SHIFT			_MK_SHIFT_CONST(16)
> +#define SDP_RDMA_S_POINTER_0_CONSUMER_FIELD			_MK_FIELD_CONST(0x1, SDP_RDMA_S_POINTER_0_CONSUMER_SHIFT)
> +#define SDP_RDMA_S_POINTER_0_CONSUMER_GROUP_0			_MK_ENUM_CONST(0x0)
> +#define SDP_RDMA_S_POINTER_0_CONSUMER_GROUP_1			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register SDP_RDMA_D_OP_ENABLE_0
> +#define SDP_RDMA_D_OP_ENABLE_0			_MK_ADDR_CONST(0x8008)
> +#define SDP_RDMA_D_OP_ENABLE_0_OP_EN_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_RDMA_D_OP_ENABLE_0_OP_EN_FIELD			_MK_FIELD_CONST(0x1, SDP_RDMA_D_OP_ENABLE_0_OP_EN_SHIFT)
> +#define SDP_RDMA_D_OP_ENABLE_0_OP_EN_DISABLE			_MK_ENUM_CONST(0x0)
> +#define SDP_RDMA_D_OP_ENABLE_0_OP_EN_ENABLE			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register SDP_RDMA_D_DATA_CUBE_WIDTH_0
> +#define SDP_RDMA_D_DATA_CUBE_WIDTH_0			_MK_ADDR_CONST(0x800c)
> +#define SDP_RDMA_D_DATA_CUBE_WIDTH_0_WIDTH_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_RDMA_D_DATA_CUBE_WIDTH_0_WIDTH_FIELD			_MK_FIELD_CONST(0x1fff, SDP_RDMA_D_DATA_CUBE_WIDTH_0_WIDTH_SHIFT)
> +
> +
> +// Register SDP_RDMA_D_DATA_CUBE_HEIGHT_0
> +#define SDP_RDMA_D_DATA_CUBE_HEIGHT_0			_MK_ADDR_CONST(0x8010)
> +#define SDP_RDMA_D_DATA_CUBE_HEIGHT_0_HEIGHT_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_RDMA_D_DATA_CUBE_HEIGHT_0_HEIGHT_FIELD			_MK_FIELD_CONST(0x1fff, SDP_RDMA_D_DATA_CUBE_HEIGHT_0_HEIGHT_SHIFT)
> +
> +
> +// Register SDP_RDMA_D_DATA_CUBE_CHANNEL_0
> +#define SDP_RDMA_D_DATA_CUBE_CHANNEL_0			_MK_ADDR_CONST(0x8014)
> +#define SDP_RDMA_D_DATA_CUBE_CHANNEL_0_CHANNEL_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_RDMA_D_DATA_CUBE_CHANNEL_0_CHANNEL_FIELD			_MK_FIELD_CONST(0x1fff, SDP_RDMA_D_DATA_CUBE_CHANNEL_0_CHANNEL_SHIFT)
> +
> +
> +// Register SDP_RDMA_D_SRC_BASE_ADDR_LOW_0
> +#define SDP_RDMA_D_SRC_BASE_ADDR_LOW_0			_MK_ADDR_CONST(0x8018)
> +#define SDP_RDMA_D_SRC_BASE_ADDR_LOW_0_SRC_BASE_ADDR_LOW_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_RDMA_D_SRC_BASE_ADDR_LOW_0_SRC_BASE_ADDR_LOW_FIELD			_MK_FIELD_CONST(0xffffffff, SDP_RDMA_D_SRC_BASE_ADDR_LOW_0_SRC_BASE_ADDR_LOW_SHIFT)
> +
> +
> +// Register SDP_RDMA_D_SRC_BASE_ADDR_HIGH_0
> +#define SDP_RDMA_D_SRC_BASE_ADDR_HIGH_0			_MK_ADDR_CONST(0x801c)
> +#define SDP_RDMA_D_SRC_BASE_ADDR_HIGH_0_SRC_BASE_ADDR_HIGH_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_RDMA_D_SRC_BASE_ADDR_HIGH_0_SRC_BASE_ADDR_HIGH_FIELD			_MK_FIELD_CONST(0xffffffff, SDP_RDMA_D_SRC_BASE_ADDR_HIGH_0_SRC_BASE_ADDR_HIGH_SHIFT)
> +
> +
> +// Register SDP_RDMA_D_SRC_LINE_STRIDE_0
> +#define SDP_RDMA_D_SRC_LINE_STRIDE_0			_MK_ADDR_CONST(0x8020)
> +#define SDP_RDMA_D_SRC_LINE_STRIDE_0_SRC_LINE_STRIDE_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_RDMA_D_SRC_LINE_STRIDE_0_SRC_LINE_STRIDE_FIELD			_MK_FIELD_CONST(0xffffffff, SDP_RDMA_D_SRC_LINE_STRIDE_0_SRC_LINE_STRIDE_SHIFT)
> +
> +
> +// Register SDP_RDMA_D_SRC_SURFACE_STRIDE_0
> +#define SDP_RDMA_D_SRC_SURFACE_STRIDE_0			_MK_ADDR_CONST(0x8024)
> +#define SDP_RDMA_D_SRC_SURFACE_STRIDE_0_SRC_SURFACE_STRIDE_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_RDMA_D_SRC_SURFACE_STRIDE_0_SRC_SURFACE_STRIDE_FIELD			_MK_FIELD_CONST(0xffffffff, SDP_RDMA_D_SRC_SURFACE_STRIDE_0_SRC_SURFACE_STRIDE_SHIFT)
> +
> +
> +// Register SDP_RDMA_D_BRDMA_CFG_0
> +#define SDP_RDMA_D_BRDMA_CFG_0			_MK_ADDR_CONST(0x8028)
> +#define SDP_RDMA_D_BRDMA_CFG_0_BRDMA_DISABLE_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_RDMA_D_BRDMA_CFG_0_BRDMA_DISABLE_FIELD			_MK_FIELD_CONST(0x1, SDP_RDMA_D_BRDMA_CFG_0_BRDMA_DISABLE_SHIFT)
> +#define SDP_RDMA_D_BRDMA_CFG_0_BRDMA_DISABLE_NO			_MK_ENUM_CONST(0x0)
> +#define SDP_RDMA_D_BRDMA_CFG_0_BRDMA_DISABLE_YES			_MK_ENUM_CONST(0x1)
> +#define SDP_RDMA_D_BRDMA_CFG_0_BRDMA_DATA_USE_SHIFT			_MK_SHIFT_CONST(1)
> +#define SDP_RDMA_D_BRDMA_CFG_0_BRDMA_DATA_USE_FIELD			_MK_FIELD_CONST(0x3, SDP_RDMA_D_BRDMA_CFG_0_BRDMA_DATA_USE_SHIFT)
> +#define SDP_RDMA_D_BRDMA_CFG_0_BRDMA_DATA_USE_MUL			_MK_ENUM_CONST(0x0)
> +#define SDP_RDMA_D_BRDMA_CFG_0_BRDMA_DATA_USE_ALU			_MK_ENUM_CONST(0x1)
> +#define SDP_RDMA_D_BRDMA_CFG_0_BRDMA_DATA_USE_BOTH			_MK_ENUM_CONST(0x2)
> +#define SDP_RDMA_D_BRDMA_CFG_0_BRDMA_DATA_SIZE_SHIFT			_MK_SHIFT_CONST(3)
> +#define SDP_RDMA_D_BRDMA_CFG_0_BRDMA_DATA_SIZE_FIELD			_MK_FIELD_CONST(0x1, SDP_RDMA_D_BRDMA_CFG_0_BRDMA_DATA_SIZE_SHIFT)
> +#define SDP_RDMA_D_BRDMA_CFG_0_BRDMA_DATA_SIZE_ONE_BYTE			_MK_ENUM_CONST(0x0)
> +#define SDP_RDMA_D_BRDMA_CFG_0_BRDMA_DATA_SIZE_TWO_BYTE			_MK_ENUM_CONST(0x1)
> +#define SDP_RDMA_D_BRDMA_CFG_0_BRDMA_DATA_MODE_SHIFT			_MK_SHIFT_CONST(4)
> +#define SDP_RDMA_D_BRDMA_CFG_0_BRDMA_DATA_MODE_FIELD			_MK_FIELD_CONST(0x1, SDP_RDMA_D_BRDMA_CFG_0_BRDMA_DATA_MODE_SHIFT)
> +#define SDP_RDMA_D_BRDMA_CFG_0_BRDMA_DATA_MODE_PER_KERNEL			_MK_ENUM_CONST(0x0)
> +#define SDP_RDMA_D_BRDMA_CFG_0_BRDMA_DATA_MODE_PER_ELEMENT			_MK_ENUM_CONST(0x1)
> +#define SDP_RDMA_D_BRDMA_CFG_0_BRDMA_RAM_TYPE_SHIFT			_MK_SHIFT_CONST(5)
> +#define SDP_RDMA_D_BRDMA_CFG_0_BRDMA_RAM_TYPE_FIELD			_MK_FIELD_CONST(0x1, SDP_RDMA_D_BRDMA_CFG_0_BRDMA_RAM_TYPE_SHIFT)
> +#define SDP_RDMA_D_BRDMA_CFG_0_BRDMA_RAM_TYPE_CV			_MK_ENUM_CONST(0x0)
> +#define SDP_RDMA_D_BRDMA_CFG_0_BRDMA_RAM_TYPE_MC			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register SDP_RDMA_D_BS_BASE_ADDR_LOW_0
> +#define SDP_RDMA_D_BS_BASE_ADDR_LOW_0			_MK_ADDR_CONST(0x802c)
> +#define SDP_RDMA_D_BS_BASE_ADDR_LOW_0_BS_BASE_ADDR_LOW_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_RDMA_D_BS_BASE_ADDR_LOW_0_BS_BASE_ADDR_LOW_FIELD			_MK_FIELD_CONST(0xffffffff, SDP_RDMA_D_BS_BASE_ADDR_LOW_0_BS_BASE_ADDR_LOW_SHIFT)
> +
> +
> +// Register SDP_RDMA_D_BS_BASE_ADDR_HIGH_0
> +#define SDP_RDMA_D_BS_BASE_ADDR_HIGH_0			_MK_ADDR_CONST(0x8030)
> +#define SDP_RDMA_D_BS_BASE_ADDR_HIGH_0_BS_BASE_ADDR_HIGH_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_RDMA_D_BS_BASE_ADDR_HIGH_0_BS_BASE_ADDR_HIGH_FIELD			_MK_FIELD_CONST(0xffffffff, SDP_RDMA_D_BS_BASE_ADDR_HIGH_0_BS_BASE_ADDR_HIGH_SHIFT)
> +
> +
> +// Register SDP_RDMA_D_BS_LINE_STRIDE_0
> +#define SDP_RDMA_D_BS_LINE_STRIDE_0			_MK_ADDR_CONST(0x8034)
> +#define SDP_RDMA_D_BS_LINE_STRIDE_0_BS_LINE_STRIDE_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_RDMA_D_BS_LINE_STRIDE_0_BS_LINE_STRIDE_FIELD			_MK_FIELD_CONST(0xffffffff, SDP_RDMA_D_BS_LINE_STRIDE_0_BS_LINE_STRIDE_SHIFT)
> +
> +
> +// Register SDP_RDMA_D_BS_SURFACE_STRIDE_0
> +#define SDP_RDMA_D_BS_SURFACE_STRIDE_0			_MK_ADDR_CONST(0x8038)
> +#define SDP_RDMA_D_BS_SURFACE_STRIDE_0_BS_SURFACE_STRIDE_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_RDMA_D_BS_SURFACE_STRIDE_0_BS_SURFACE_STRIDE_FIELD			_MK_FIELD_CONST(0xffffffff, SDP_RDMA_D_BS_SURFACE_STRIDE_0_BS_SURFACE_STRIDE_SHIFT)
> +
> +
> +// Register SDP_RDMA_D_BS_BATCH_STRIDE_0
> +#define SDP_RDMA_D_BS_BATCH_STRIDE_0			_MK_ADDR_CONST(0x803c)
> +#define SDP_RDMA_D_BS_BATCH_STRIDE_0_BS_BATCH_STRIDE_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_RDMA_D_BS_BATCH_STRIDE_0_BS_BATCH_STRIDE_FIELD			_MK_FIELD_CONST(0xffffffff, SDP_RDMA_D_BS_BATCH_STRIDE_0_BS_BATCH_STRIDE_SHIFT)
> +
> +
> +// Register SDP_RDMA_D_NRDMA_CFG_0
> +#define SDP_RDMA_D_NRDMA_CFG_0			_MK_ADDR_CONST(0x8040)
> +#define SDP_RDMA_D_NRDMA_CFG_0_NRDMA_DISABLE_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_RDMA_D_NRDMA_CFG_0_NRDMA_DISABLE_FIELD			_MK_FIELD_CONST(0x1, SDP_RDMA_D_NRDMA_CFG_0_NRDMA_DISABLE_SHIFT)
> +#define SDP_RDMA_D_NRDMA_CFG_0_NRDMA_DISABLE_NO			_MK_ENUM_CONST(0x0)
> +#define SDP_RDMA_D_NRDMA_CFG_0_NRDMA_DISABLE_YES			_MK_ENUM_CONST(0x1)
> +#define SDP_RDMA_D_NRDMA_CFG_0_NRDMA_DATA_USE_SHIFT			_MK_SHIFT_CONST(1)
> +#define SDP_RDMA_D_NRDMA_CFG_0_NRDMA_DATA_USE_FIELD			_MK_FIELD_CONST(0x3, SDP_RDMA_D_NRDMA_CFG_0_NRDMA_DATA_USE_SHIFT)
> +#define SDP_RDMA_D_NRDMA_CFG_0_NRDMA_DATA_USE_MUL			_MK_ENUM_CONST(0x0)
> +#define SDP_RDMA_D_NRDMA_CFG_0_NRDMA_DATA_USE_ALU			_MK_ENUM_CONST(0x1)
> +#define SDP_RDMA_D_NRDMA_CFG_0_NRDMA_DATA_USE_BOTH			_MK_ENUM_CONST(0x2)
> +#define SDP_RDMA_D_NRDMA_CFG_0_NRDMA_DATA_SIZE_SHIFT			_MK_SHIFT_CONST(3)
> +#define SDP_RDMA_D_NRDMA_CFG_0_NRDMA_DATA_SIZE_FIELD			_MK_FIELD_CONST(0x1, SDP_RDMA_D_NRDMA_CFG_0_NRDMA_DATA_SIZE_SHIFT)
> +#define SDP_RDMA_D_NRDMA_CFG_0_NRDMA_DATA_SIZE_ONE_BYTE			_MK_ENUM_CONST(0x0)
> +#define SDP_RDMA_D_NRDMA_CFG_0_NRDMA_DATA_SIZE_TWO_BYTE			_MK_ENUM_CONST(0x1)
> +#define SDP_RDMA_D_NRDMA_CFG_0_NRDMA_DATA_MODE_SHIFT			_MK_SHIFT_CONST(4)
> +#define SDP_RDMA_D_NRDMA_CFG_0_NRDMA_DATA_MODE_FIELD			_MK_FIELD_CONST(0x1, SDP_RDMA_D_NRDMA_CFG_0_NRDMA_DATA_MODE_SHIFT)
> +#define SDP_RDMA_D_NRDMA_CFG_0_NRDMA_DATA_MODE_PER_KERNEL			_MK_ENUM_CONST(0x0)
> +#define SDP_RDMA_D_NRDMA_CFG_0_NRDMA_DATA_MODE_PER_ELEMENT			_MK_ENUM_CONST(0x1)
> +#define SDP_RDMA_D_NRDMA_CFG_0_NRDMA_RAM_TYPE_SHIFT			_MK_SHIFT_CONST(5)
> +#define SDP_RDMA_D_NRDMA_CFG_0_NRDMA_RAM_TYPE_FIELD			_MK_FIELD_CONST(0x1, SDP_RDMA_D_NRDMA_CFG_0_NRDMA_RAM_TYPE_SHIFT)
> +#define SDP_RDMA_D_NRDMA_CFG_0_NRDMA_RAM_TYPE_CV			_MK_ENUM_CONST(0x0)
> +#define SDP_RDMA_D_NRDMA_CFG_0_NRDMA_RAM_TYPE_MC			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register SDP_RDMA_D_BN_BASE_ADDR_LOW_0
> +#define SDP_RDMA_D_BN_BASE_ADDR_LOW_0			_MK_ADDR_CONST(0x8044)
> +#define SDP_RDMA_D_BN_BASE_ADDR_LOW_0_BN_BASE_ADDR_LOW_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_RDMA_D_BN_BASE_ADDR_LOW_0_BN_BASE_ADDR_LOW_FIELD			_MK_FIELD_CONST(0xffffffff, SDP_RDMA_D_BN_BASE_ADDR_LOW_0_BN_BASE_ADDR_LOW_SHIFT)
> +
> +
> +// Register SDP_RDMA_D_BN_BASE_ADDR_HIGH_0
> +#define SDP_RDMA_D_BN_BASE_ADDR_HIGH_0			_MK_ADDR_CONST(0x8048)
> +#define SDP_RDMA_D_BN_BASE_ADDR_HIGH_0_BN_BASE_ADDR_HIGH_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_RDMA_D_BN_BASE_ADDR_HIGH_0_BN_BASE_ADDR_HIGH_FIELD			_MK_FIELD_CONST(0xffffffff, SDP_RDMA_D_BN_BASE_ADDR_HIGH_0_BN_BASE_ADDR_HIGH_SHIFT)
> +
> +
> +// Register SDP_RDMA_D_BN_LINE_STRIDE_0
> +#define SDP_RDMA_D_BN_LINE_STRIDE_0			_MK_ADDR_CONST(0x804c)
> +#define SDP_RDMA_D_BN_LINE_STRIDE_0_BN_LINE_STRIDE_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_RDMA_D_BN_LINE_STRIDE_0_BN_LINE_STRIDE_FIELD			_MK_FIELD_CONST(0xffffffff, SDP_RDMA_D_BN_LINE_STRIDE_0_BN_LINE_STRIDE_SHIFT)
> +
> +
> +// Register SDP_RDMA_D_BN_SURFACE_STRIDE_0
> +#define SDP_RDMA_D_BN_SURFACE_STRIDE_0			_MK_ADDR_CONST(0x8050)
> +#define SDP_RDMA_D_BN_SURFACE_STRIDE_0_BN_SURFACE_STRIDE_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_RDMA_D_BN_SURFACE_STRIDE_0_BN_SURFACE_STRIDE_FIELD			_MK_FIELD_CONST(0xffffffff, SDP_RDMA_D_BN_SURFACE_STRIDE_0_BN_SURFACE_STRIDE_SHIFT)
> +
> +
> +// Register SDP_RDMA_D_BN_BATCH_STRIDE_0
> +#define SDP_RDMA_D_BN_BATCH_STRIDE_0			_MK_ADDR_CONST(0x8054)
> +#define SDP_RDMA_D_BN_BATCH_STRIDE_0_BN_BATCH_STRIDE_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_RDMA_D_BN_BATCH_STRIDE_0_BN_BATCH_STRIDE_FIELD			_MK_FIELD_CONST(0xffffffff, SDP_RDMA_D_BN_BATCH_STRIDE_0_BN_BATCH_STRIDE_SHIFT)
> +
> +
> +// Register SDP_RDMA_D_ERDMA_CFG_0
> +#define SDP_RDMA_D_ERDMA_CFG_0			_MK_ADDR_CONST(0x8058)
> +#define SDP_RDMA_D_ERDMA_CFG_0_ERDMA_DISABLE_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_RDMA_D_ERDMA_CFG_0_ERDMA_DISABLE_FIELD			_MK_FIELD_CONST(0x1, SDP_RDMA_D_ERDMA_CFG_0_ERDMA_DISABLE_SHIFT)
> +#define SDP_RDMA_D_ERDMA_CFG_0_ERDMA_DISABLE_NO			_MK_ENUM_CONST(0x0)
> +#define SDP_RDMA_D_ERDMA_CFG_0_ERDMA_DISABLE_YES			_MK_ENUM_CONST(0x1)
> +#define SDP_RDMA_D_ERDMA_CFG_0_ERDMA_DATA_USE_SHIFT			_MK_SHIFT_CONST(1)
> +#define SDP_RDMA_D_ERDMA_CFG_0_ERDMA_DATA_USE_FIELD			_MK_FIELD_CONST(0x3, SDP_RDMA_D_ERDMA_CFG_0_ERDMA_DATA_USE_SHIFT)
> +#define SDP_RDMA_D_ERDMA_CFG_0_ERDMA_DATA_USE_MUL			_MK_ENUM_CONST(0x0)
> +#define SDP_RDMA_D_ERDMA_CFG_0_ERDMA_DATA_USE_ALU			_MK_ENUM_CONST(0x1)
> +#define SDP_RDMA_D_ERDMA_CFG_0_ERDMA_DATA_USE_BOTH			_MK_ENUM_CONST(0x2)
> +#define SDP_RDMA_D_ERDMA_CFG_0_ERDMA_DATA_SIZE_SHIFT			_MK_SHIFT_CONST(3)
> +#define SDP_RDMA_D_ERDMA_CFG_0_ERDMA_DATA_SIZE_FIELD			_MK_FIELD_CONST(0x1, SDP_RDMA_D_ERDMA_CFG_0_ERDMA_DATA_SIZE_SHIFT)
> +#define SDP_RDMA_D_ERDMA_CFG_0_ERDMA_DATA_SIZE_ONE_BYTE			_MK_ENUM_CONST(0x0)
> +#define SDP_RDMA_D_ERDMA_CFG_0_ERDMA_DATA_SIZE_TWO_BYTE			_MK_ENUM_CONST(0x1)
> +#define SDP_RDMA_D_ERDMA_CFG_0_ERDMA_DATA_MODE_SHIFT			_MK_SHIFT_CONST(4)
> +#define SDP_RDMA_D_ERDMA_CFG_0_ERDMA_DATA_MODE_FIELD			_MK_FIELD_CONST(0x1, SDP_RDMA_D_ERDMA_CFG_0_ERDMA_DATA_MODE_SHIFT)
> +#define SDP_RDMA_D_ERDMA_CFG_0_ERDMA_DATA_MODE_PER_KERNEL			_MK_ENUM_CONST(0x0)
> +#define SDP_RDMA_D_ERDMA_CFG_0_ERDMA_DATA_MODE_PER_ELEMENT			_MK_ENUM_CONST(0x1)
> +#define SDP_RDMA_D_ERDMA_CFG_0_ERDMA_RAM_TYPE_SHIFT			_MK_SHIFT_CONST(5)
> +#define SDP_RDMA_D_ERDMA_CFG_0_ERDMA_RAM_TYPE_FIELD			_MK_FIELD_CONST(0x1, SDP_RDMA_D_ERDMA_CFG_0_ERDMA_RAM_TYPE_SHIFT)
> +#define SDP_RDMA_D_ERDMA_CFG_0_ERDMA_RAM_TYPE_CV			_MK_ENUM_CONST(0x0)
> +#define SDP_RDMA_D_ERDMA_CFG_0_ERDMA_RAM_TYPE_MC			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register SDP_RDMA_D_EW_BASE_ADDR_LOW_0
> +#define SDP_RDMA_D_EW_BASE_ADDR_LOW_0			_MK_ADDR_CONST(0x805c)
> +#define SDP_RDMA_D_EW_BASE_ADDR_LOW_0_EW_BASE_ADDR_LOW_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_RDMA_D_EW_BASE_ADDR_LOW_0_EW_BASE_ADDR_LOW_FIELD			_MK_FIELD_CONST(0xffffffff, SDP_RDMA_D_EW_BASE_ADDR_LOW_0_EW_BASE_ADDR_LOW_SHIFT)
> +
> +
> +// Register SDP_RDMA_D_EW_BASE_ADDR_HIGH_0
> +#define SDP_RDMA_D_EW_BASE_ADDR_HIGH_0			_MK_ADDR_CONST(0x8060)
> +#define SDP_RDMA_D_EW_BASE_ADDR_HIGH_0_EW_BASE_ADDR_HIGH_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_RDMA_D_EW_BASE_ADDR_HIGH_0_EW_BASE_ADDR_HIGH_FIELD			_MK_FIELD_CONST(0xffffffff, SDP_RDMA_D_EW_BASE_ADDR_HIGH_0_EW_BASE_ADDR_HIGH_SHIFT)
> +
> +
> +// Register SDP_RDMA_D_EW_LINE_STRIDE_0
> +#define SDP_RDMA_D_EW_LINE_STRIDE_0			_MK_ADDR_CONST(0x8064)
> +#define SDP_RDMA_D_EW_LINE_STRIDE_0_EW_LINE_STRIDE_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_RDMA_D_EW_LINE_STRIDE_0_EW_LINE_STRIDE_FIELD			_MK_FIELD_CONST(0xffffffff, SDP_RDMA_D_EW_LINE_STRIDE_0_EW_LINE_STRIDE_SHIFT)
> +
> +
> +// Register SDP_RDMA_D_EW_SURFACE_STRIDE_0
> +#define SDP_RDMA_D_EW_SURFACE_STRIDE_0			_MK_ADDR_CONST(0x8068)
> +#define SDP_RDMA_D_EW_SURFACE_STRIDE_0_EW_SURFACE_STRIDE_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_RDMA_D_EW_SURFACE_STRIDE_0_EW_SURFACE_STRIDE_FIELD			_MK_FIELD_CONST(0xffffffff, SDP_RDMA_D_EW_SURFACE_STRIDE_0_EW_SURFACE_STRIDE_SHIFT)
> +
> +
> +// Register SDP_RDMA_D_EW_BATCH_STRIDE_0
> +#define SDP_RDMA_D_EW_BATCH_STRIDE_0			_MK_ADDR_CONST(0x806c)
> +#define SDP_RDMA_D_EW_BATCH_STRIDE_0_EW_BATCH_STRIDE_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_RDMA_D_EW_BATCH_STRIDE_0_EW_BATCH_STRIDE_FIELD			_MK_FIELD_CONST(0xffffffff, SDP_RDMA_D_EW_BATCH_STRIDE_0_EW_BATCH_STRIDE_SHIFT)
> +
> +
> +// Register SDP_RDMA_D_FEATURE_MODE_CFG_0
> +#define SDP_RDMA_D_FEATURE_MODE_CFG_0			_MK_ADDR_CONST(0x8070)
> +#define SDP_RDMA_D_FEATURE_MODE_CFG_0_FLYING_MODE_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_RDMA_D_FEATURE_MODE_CFG_0_FLYING_MODE_FIELD			_MK_FIELD_CONST(0x1, SDP_RDMA_D_FEATURE_MODE_CFG_0_FLYING_MODE_SHIFT)
> +#define SDP_RDMA_D_FEATURE_MODE_CFG_0_FLYING_MODE_OFF			_MK_ENUM_CONST(0x0)
> +#define SDP_RDMA_D_FEATURE_MODE_CFG_0_FLYING_MODE_ON			_MK_ENUM_CONST(0x1)
> +#define SDP_RDMA_D_FEATURE_MODE_CFG_0_WINOGRAD_SHIFT			_MK_SHIFT_CONST(1)
> +#define SDP_RDMA_D_FEATURE_MODE_CFG_0_WINOGRAD_FIELD			_MK_FIELD_CONST(0x1, SDP_RDMA_D_FEATURE_MODE_CFG_0_WINOGRAD_SHIFT)
> +#define SDP_RDMA_D_FEATURE_MODE_CFG_0_WINOGRAD_OFF			_MK_ENUM_CONST(0x0)
> +#define SDP_RDMA_D_FEATURE_MODE_CFG_0_WINOGRAD_ON			_MK_ENUM_CONST(0x1)
> +#define SDP_RDMA_D_FEATURE_MODE_CFG_0_IN_PRECISION_SHIFT			_MK_SHIFT_CONST(2)
> +#define SDP_RDMA_D_FEATURE_MODE_CFG_0_IN_PRECISION_FIELD			_MK_FIELD_CONST(0x3, SDP_RDMA_D_FEATURE_MODE_CFG_0_IN_PRECISION_SHIFT)
> +#define SDP_RDMA_D_FEATURE_MODE_CFG_0_IN_PRECISION_INT8			_MK_ENUM_CONST(0x0)
> +#define SDP_RDMA_D_FEATURE_MODE_CFG_0_IN_PRECISION_INT16			_MK_ENUM_CONST(0x1)
> +#define SDP_RDMA_D_FEATURE_MODE_CFG_0_IN_PRECISION_FP16			_MK_ENUM_CONST(0x2)
> +#define SDP_RDMA_D_FEATURE_MODE_CFG_0_PROC_PRECISION_SHIFT			_MK_SHIFT_CONST(4)
> +#define SDP_RDMA_D_FEATURE_MODE_CFG_0_PROC_PRECISION_FIELD			_MK_FIELD_CONST(0x3, SDP_RDMA_D_FEATURE_MODE_CFG_0_PROC_PRECISION_SHIFT)
> +#define SDP_RDMA_D_FEATURE_MODE_CFG_0_PROC_PRECISION_INT8			_MK_ENUM_CONST(0x0)
> +#define SDP_RDMA_D_FEATURE_MODE_CFG_0_PROC_PRECISION_INT16			_MK_ENUM_CONST(0x1)
> +#define SDP_RDMA_D_FEATURE_MODE_CFG_0_PROC_PRECISION_FP16			_MK_ENUM_CONST(0x2)
> +#define SDP_RDMA_D_FEATURE_MODE_CFG_0_OUT_PRECISION_SHIFT			_MK_SHIFT_CONST(6)
> +#define SDP_RDMA_D_FEATURE_MODE_CFG_0_OUT_PRECISION_FIELD			_MK_FIELD_CONST(0x3, SDP_RDMA_D_FEATURE_MODE_CFG_0_OUT_PRECISION_SHIFT)
> +#define SDP_RDMA_D_FEATURE_MODE_CFG_0_OUT_PRECISION_INT8			_MK_ENUM_CONST(0x0)
> +#define SDP_RDMA_D_FEATURE_MODE_CFG_0_OUT_PRECISION_INT16			_MK_ENUM_CONST(0x1)
> +#define SDP_RDMA_D_FEATURE_MODE_CFG_0_OUT_PRECISION_FP16			_MK_ENUM_CONST(0x2)
> +#define SDP_RDMA_D_FEATURE_MODE_CFG_0_BATCH_NUMBER_SHIFT			_MK_SHIFT_CONST(8)
> +#define SDP_RDMA_D_FEATURE_MODE_CFG_0_BATCH_NUMBER_FIELD			_MK_FIELD_CONST(0x1f, SDP_RDMA_D_FEATURE_MODE_CFG_0_BATCH_NUMBER_SHIFT)
> +
> +
> +// Register SDP_RDMA_D_SRC_DMA_CFG_0
> +#define SDP_RDMA_D_SRC_DMA_CFG_0			_MK_ADDR_CONST(0x8074)
> +#define SDP_RDMA_D_SRC_DMA_CFG_0_SRC_RAM_TYPE_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_RDMA_D_SRC_DMA_CFG_0_SRC_RAM_TYPE_FIELD			_MK_FIELD_CONST(0x1, SDP_RDMA_D_SRC_DMA_CFG_0_SRC_RAM_TYPE_SHIFT)
> +#define SDP_RDMA_D_SRC_DMA_CFG_0_SRC_RAM_TYPE_CV			_MK_ENUM_CONST(0x0)
> +#define SDP_RDMA_D_SRC_DMA_CFG_0_SRC_RAM_TYPE_MC			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register SDP_RDMA_D_STATUS_NAN_INPUT_NUM_0
> +#define SDP_RDMA_D_STATUS_NAN_INPUT_NUM_0			_MK_ADDR_CONST(0x8078)
> +#define SDP_RDMA_D_STATUS_NAN_INPUT_NUM_0_STATUS_NAN_INPUT_NUM_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_RDMA_D_STATUS_NAN_INPUT_NUM_0_STATUS_NAN_INPUT_NUM_FIELD			_MK_FIELD_CONST(0xffffffff, SDP_RDMA_D_STATUS_NAN_INPUT_NUM_0_STATUS_NAN_INPUT_NUM_SHIFT)
> +
> +
> +// Register SDP_RDMA_D_STATUS_INF_INPUT_NUM_0
> +#define SDP_RDMA_D_STATUS_INF_INPUT_NUM_0			_MK_ADDR_CONST(0x807c)
> +#define SDP_RDMA_D_STATUS_INF_INPUT_NUM_0_STATUS_INF_INPUT_NUM_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_RDMA_D_STATUS_INF_INPUT_NUM_0_STATUS_INF_INPUT_NUM_FIELD			_MK_FIELD_CONST(0xffffffff, SDP_RDMA_D_STATUS_INF_INPUT_NUM_0_STATUS_INF_INPUT_NUM_SHIFT)
> +
> +
> +// Register SDP_RDMA_D_PERF_ENABLE_0
> +#define SDP_RDMA_D_PERF_ENABLE_0			_MK_ADDR_CONST(0x8080)
> +#define SDP_RDMA_D_PERF_ENABLE_0_PERF_DMA_EN_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_RDMA_D_PERF_ENABLE_0_PERF_DMA_EN_FIELD			_MK_FIELD_CONST(0x1, SDP_RDMA_D_PERF_ENABLE_0_PERF_DMA_EN_SHIFT)
> +#define SDP_RDMA_D_PERF_ENABLE_0_PERF_DMA_EN_NO			_MK_ENUM_CONST(0x0)
> +#define SDP_RDMA_D_PERF_ENABLE_0_PERF_DMA_EN_YES			_MK_ENUM_CONST(0x1)
> +#define SDP_RDMA_D_PERF_ENABLE_0_PERF_NAN_INF_COUNT_EN_SHIFT			_MK_SHIFT_CONST(1)
> +#define SDP_RDMA_D_PERF_ENABLE_0_PERF_NAN_INF_COUNT_EN_FIELD			_MK_FIELD_CONST(0x1, SDP_RDMA_D_PERF_ENABLE_0_PERF_NAN_INF_COUNT_EN_SHIFT)
> +#define SDP_RDMA_D_PERF_ENABLE_0_PERF_NAN_INF_COUNT_EN_NO			_MK_ENUM_CONST(0x0)
> +#define SDP_RDMA_D_PERF_ENABLE_0_PERF_NAN_INF_COUNT_EN_YES			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register SDP_RDMA_D_PERF_MRDMA_READ_STALL_0
> +#define SDP_RDMA_D_PERF_MRDMA_READ_STALL_0			_MK_ADDR_CONST(0x8084)
> +#define SDP_RDMA_D_PERF_MRDMA_READ_STALL_0_MRDMA_STALL_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_RDMA_D_PERF_MRDMA_READ_STALL_0_MRDMA_STALL_FIELD			_MK_FIELD_CONST(0xffffffff, SDP_RDMA_D_PERF_MRDMA_READ_STALL_0_MRDMA_STALL_SHIFT)
> +
> +
> +// Register SDP_RDMA_D_PERF_BRDMA_READ_STALL_0
> +#define SDP_RDMA_D_PERF_BRDMA_READ_STALL_0			_MK_ADDR_CONST(0x8088)
> +#define SDP_RDMA_D_PERF_BRDMA_READ_STALL_0_BRDMA_STALL_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_RDMA_D_PERF_BRDMA_READ_STALL_0_BRDMA_STALL_FIELD			_MK_FIELD_CONST(0xffffffff, SDP_RDMA_D_PERF_BRDMA_READ_STALL_0_BRDMA_STALL_SHIFT)
> +
> +
> +// Register SDP_RDMA_D_PERF_NRDMA_READ_STALL_0
> +#define SDP_RDMA_D_PERF_NRDMA_READ_STALL_0			_MK_ADDR_CONST(0x808c)
> +#define SDP_RDMA_D_PERF_NRDMA_READ_STALL_0_NRDMA_STALL_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_RDMA_D_PERF_NRDMA_READ_STALL_0_NRDMA_STALL_FIELD			_MK_FIELD_CONST(0xffffffff, SDP_RDMA_D_PERF_NRDMA_READ_STALL_0_NRDMA_STALL_SHIFT)
> +
> +
> +// Register SDP_RDMA_D_PERF_ERDMA_READ_STALL_0
> +#define SDP_RDMA_D_PERF_ERDMA_READ_STALL_0			_MK_ADDR_CONST(0x8090)
> +#define SDP_RDMA_D_PERF_ERDMA_READ_STALL_0_ERDMA_STALL_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_RDMA_D_PERF_ERDMA_READ_STALL_0_ERDMA_STALL_FIELD			_MK_FIELD_CONST(0xffffffff, SDP_RDMA_D_PERF_ERDMA_READ_STALL_0_ERDMA_STALL_SHIFT)
> +
> +
> +
> +// To satisfy various compilers and platforms,
> +// we let users control the types and syntax of certain constants, using macros.
> +#ifndef _MK_SHIFT_CONST
> +  #define _MK_SHIFT_CONST(_constant_) _constant_
> +#endif
> +#ifndef _MK_MASK_CONST
> +  #define _MK_MASK_CONST(_constant_) _constant_
> +#endif
> +#ifndef _MK_ENUM_CONST
> +  #define _MK_ENUM_CONST(_constant_) (_constant_ ## UL)
> +#endif
> +#ifndef _MK_ADDR_CONST
> +  #define _MK_ADDR_CONST(_constant_) _constant_
> +#endif
> +#ifndef _MK_FIELD_CONST
> +  #define _MK_FIELD_CONST(_mask_, _shift_) (_MK_MASK_CONST(_mask_) << _MK_SHIFT_CONST(_shift_))
> +#endif
> +
> +
> +// Register SDP_S_STATUS_0
> +#define SDP_S_STATUS_0			_MK_ADDR_CONST(0x9000)
> +#define SDP_S_STATUS_0_STATUS_0_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_S_STATUS_0_STATUS_0_FIELD			_MK_FIELD_CONST(0x3, SDP_S_STATUS_0_STATUS_0_SHIFT)
> +#define SDP_S_STATUS_0_STATUS_0_IDLE			_MK_ENUM_CONST(0x0)
> +#define SDP_S_STATUS_0_STATUS_0_RUNNING			_MK_ENUM_CONST(0x1)
> +#define SDP_S_STATUS_0_STATUS_0_PENDING			_MK_ENUM_CONST(0x2)
> +#define SDP_S_STATUS_0_STATUS_1_SHIFT			_MK_SHIFT_CONST(16)
> +#define SDP_S_STATUS_0_STATUS_1_FIELD			_MK_FIELD_CONST(0x3, SDP_S_STATUS_0_STATUS_1_SHIFT)
> +#define SDP_S_STATUS_0_STATUS_1_IDLE			_MK_ENUM_CONST(0x0)
> +#define SDP_S_STATUS_0_STATUS_1_RUNNING			_MK_ENUM_CONST(0x1)
> +#define SDP_S_STATUS_0_STATUS_1_PENDING			_MK_ENUM_CONST(0x2)
> +
> +
> +// Register SDP_S_POINTER_0
> +#define SDP_S_POINTER_0			_MK_ADDR_CONST(0x9004)
> +#define SDP_S_POINTER_0_PRODUCER_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_S_POINTER_0_PRODUCER_FIELD			_MK_FIELD_CONST(0x1, SDP_S_POINTER_0_PRODUCER_SHIFT)
> +#define SDP_S_POINTER_0_PRODUCER_GROUP_0			_MK_ENUM_CONST(0x0)
> +#define SDP_S_POINTER_0_PRODUCER_GROUP_1			_MK_ENUM_CONST(0x1)
> +#define SDP_S_POINTER_0_CONSUMER_SHIFT			_MK_SHIFT_CONST(16)
> +#define SDP_S_POINTER_0_CONSUMER_FIELD			_MK_FIELD_CONST(0x1, SDP_S_POINTER_0_CONSUMER_SHIFT)
> +#define SDP_S_POINTER_0_CONSUMER_GROUP_0			_MK_ENUM_CONST(0x0)
> +#define SDP_S_POINTER_0_CONSUMER_GROUP_1			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register SDP_S_LUT_ACCESS_CFG_0
> +#define SDP_S_LUT_ACCESS_CFG_0			_MK_ADDR_CONST(0x9008)
> +#define SDP_S_LUT_ACCESS_CFG_0_LUT_ADDR_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_S_LUT_ACCESS_CFG_0_LUT_ADDR_FIELD			_MK_FIELD_CONST(0x3ff, SDP_S_LUT_ACCESS_CFG_0_LUT_ADDR_SHIFT)
> +#define SDP_S_LUT_ACCESS_CFG_0_LUT_TABLE_ID_SHIFT			_MK_SHIFT_CONST(16)
> +#define SDP_S_LUT_ACCESS_CFG_0_LUT_TABLE_ID_FIELD			_MK_FIELD_CONST(0x1, SDP_S_LUT_ACCESS_CFG_0_LUT_TABLE_ID_SHIFT)
> +#define SDP_S_LUT_ACCESS_CFG_0_LUT_TABLE_ID_LE			_MK_ENUM_CONST(0x0)
> +#define SDP_S_LUT_ACCESS_CFG_0_LUT_TABLE_ID_LO			_MK_ENUM_CONST(0x1)
> +#define SDP_S_LUT_ACCESS_CFG_0_LUT_ACCESS_TYPE_SHIFT			_MK_SHIFT_CONST(17)
> +#define SDP_S_LUT_ACCESS_CFG_0_LUT_ACCESS_TYPE_FIELD			_MK_FIELD_CONST(0x1, SDP_S_LUT_ACCESS_CFG_0_LUT_ACCESS_TYPE_SHIFT)
> +#define SDP_S_LUT_ACCESS_CFG_0_LUT_ACCESS_TYPE_READ			_MK_ENUM_CONST(0x0)
> +#define SDP_S_LUT_ACCESS_CFG_0_LUT_ACCESS_TYPE_WRITE			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register SDP_S_LUT_ACCESS_DATA_0
> +#define SDP_S_LUT_ACCESS_DATA_0			_MK_ADDR_CONST(0x900c)
> +#define SDP_S_LUT_ACCESS_DATA_0_LUT_DATA_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_S_LUT_ACCESS_DATA_0_LUT_DATA_FIELD			_MK_FIELD_CONST(0xffff, SDP_S_LUT_ACCESS_DATA_0_LUT_DATA_SHIFT)
> +
> +
> +// Register SDP_S_LUT_CFG_0
> +#define SDP_S_LUT_CFG_0			_MK_ADDR_CONST(0x9010)
> +#define SDP_S_LUT_CFG_0_LUT_LE_FUNCTION_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_S_LUT_CFG_0_LUT_LE_FUNCTION_FIELD			_MK_FIELD_CONST(0x1, SDP_S_LUT_CFG_0_LUT_LE_FUNCTION_SHIFT)
> +#define SDP_S_LUT_CFG_0_LUT_LE_FUNCTION_EXPONENT			_MK_ENUM_CONST(0x0)
> +#define SDP_S_LUT_CFG_0_LUT_LE_FUNCTION_LINEAR			_MK_ENUM_CONST(0x1)
> +#define SDP_S_LUT_CFG_0_LUT_UFLOW_PRIORITY_SHIFT			_MK_SHIFT_CONST(4)
> +#define SDP_S_LUT_CFG_0_LUT_UFLOW_PRIORITY_FIELD			_MK_FIELD_CONST(0x1, SDP_S_LUT_CFG_0_LUT_UFLOW_PRIORITY_SHIFT)
> +#define SDP_S_LUT_CFG_0_LUT_UFLOW_PRIORITY_LE			_MK_ENUM_CONST(0x0)
> +#define SDP_S_LUT_CFG_0_LUT_UFLOW_PRIORITY_LO			_MK_ENUM_CONST(0x1)
> +#define SDP_S_LUT_CFG_0_LUT_OFLOW_PRIORITY_SHIFT			_MK_SHIFT_CONST(5)
> +#define SDP_S_LUT_CFG_0_LUT_OFLOW_PRIORITY_FIELD			_MK_FIELD_CONST(0x1, SDP_S_LUT_CFG_0_LUT_OFLOW_PRIORITY_SHIFT)
> +#define SDP_S_LUT_CFG_0_LUT_OFLOW_PRIORITY_LE			_MK_ENUM_CONST(0x0)
> +#define SDP_S_LUT_CFG_0_LUT_OFLOW_PRIORITY_LO			_MK_ENUM_CONST(0x1)
> +#define SDP_S_LUT_CFG_0_LUT_HYBRID_PRIORITY_SHIFT			_MK_SHIFT_CONST(6)
> +#define SDP_S_LUT_CFG_0_LUT_HYBRID_PRIORITY_FIELD			_MK_FIELD_CONST(0x1, SDP_S_LUT_CFG_0_LUT_HYBRID_PRIORITY_SHIFT)
> +#define SDP_S_LUT_CFG_0_LUT_HYBRID_PRIORITY_LE			_MK_ENUM_CONST(0x0)
> +#define SDP_S_LUT_CFG_0_LUT_HYBRID_PRIORITY_LO			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register SDP_S_LUT_INFO_0
> +#define SDP_S_LUT_INFO_0			_MK_ADDR_CONST(0x9014)
> +#define SDP_S_LUT_INFO_0_LUT_LE_INDEX_OFFSET_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_S_LUT_INFO_0_LUT_LE_INDEX_OFFSET_FIELD			_MK_FIELD_CONST(0xff, SDP_S_LUT_INFO_0_LUT_LE_INDEX_OFFSET_SHIFT)
> +#define SDP_S_LUT_INFO_0_LUT_LE_INDEX_SELECT_SHIFT			_MK_SHIFT_CONST(8)
> +#define SDP_S_LUT_INFO_0_LUT_LE_INDEX_SELECT_FIELD			_MK_FIELD_CONST(0xff, SDP_S_LUT_INFO_0_LUT_LE_INDEX_SELECT_SHIFT)
> +#define SDP_S_LUT_INFO_0_LUT_LO_INDEX_SELECT_SHIFT			_MK_SHIFT_CONST(16)
> +#define SDP_S_LUT_INFO_0_LUT_LO_INDEX_SELECT_FIELD			_MK_FIELD_CONST(0xff, SDP_S_LUT_INFO_0_LUT_LO_INDEX_SELECT_SHIFT)
> +
> +
> +// Register SDP_S_LUT_LE_START_0
> +#define SDP_S_LUT_LE_START_0			_MK_ADDR_CONST(0x9018)
> +#define SDP_S_LUT_LE_START_0_LUT_LE_START_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_S_LUT_LE_START_0_LUT_LE_START_FIELD			_MK_FIELD_CONST(0xffffffff, SDP_S_LUT_LE_START_0_LUT_LE_START_SHIFT)
> +
> +
> +// Register SDP_S_LUT_LE_END_0
> +#define SDP_S_LUT_LE_END_0			_MK_ADDR_CONST(0x901c)
> +#define SDP_S_LUT_LE_END_0_LUT_LE_END_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_S_LUT_LE_END_0_LUT_LE_END_FIELD			_MK_FIELD_CONST(0xffffffff, SDP_S_LUT_LE_END_0_LUT_LE_END_SHIFT)
> +
> +
> +// Register SDP_S_LUT_LO_START_0
> +#define SDP_S_LUT_LO_START_0			_MK_ADDR_CONST(0x9020)
> +#define SDP_S_LUT_LO_START_0_LUT_LO_START_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_S_LUT_LO_START_0_LUT_LO_START_FIELD			_MK_FIELD_CONST(0xffffffff, SDP_S_LUT_LO_START_0_LUT_LO_START_SHIFT)
> +
> +
> +// Register SDP_S_LUT_LO_END_0
> +#define SDP_S_LUT_LO_END_0			_MK_ADDR_CONST(0x9024)
> +#define SDP_S_LUT_LO_END_0_LUT_LO_END_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_S_LUT_LO_END_0_LUT_LO_END_FIELD			_MK_FIELD_CONST(0xffffffff, SDP_S_LUT_LO_END_0_LUT_LO_END_SHIFT)
> +
> +
> +// Register SDP_S_LUT_LE_SLOPE_SCALE_0
> +#define SDP_S_LUT_LE_SLOPE_SCALE_0			_MK_ADDR_CONST(0x9028)
> +#define SDP_S_LUT_LE_SLOPE_SCALE_0_LUT_LE_SLOPE_UFLOW_SCALE_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_S_LUT_LE_SLOPE_SCALE_0_LUT_LE_SLOPE_UFLOW_SCALE_FIELD			_MK_FIELD_CONST(0xffff, SDP_S_LUT_LE_SLOPE_SCALE_0_LUT_LE_SLOPE_UFLOW_SCALE_SHIFT)
> +#define SDP_S_LUT_LE_SLOPE_SCALE_0_LUT_LE_SLOPE_OFLOW_SCALE_SHIFT			_MK_SHIFT_CONST(16)
> +#define SDP_S_LUT_LE_SLOPE_SCALE_0_LUT_LE_SLOPE_OFLOW_SCALE_FIELD			_MK_FIELD_CONST(0xffff, SDP_S_LUT_LE_SLOPE_SCALE_0_LUT_LE_SLOPE_OFLOW_SCALE_SHIFT)
> +
> +
> +// Register SDP_S_LUT_LE_SLOPE_SHIFT_0
> +#define SDP_S_LUT_LE_SLOPE_SHIFT_0			_MK_ADDR_CONST(0x902c)
> +#define SDP_S_LUT_LE_SLOPE_SHIFT_0_LUT_LE_SLOPE_UFLOW_SHIFT_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_S_LUT_LE_SLOPE_SHIFT_0_LUT_LE_SLOPE_UFLOW_SHIFT_FIELD			_MK_FIELD_CONST(0x1f, SDP_S_LUT_LE_SLOPE_SHIFT_0_LUT_LE_SLOPE_UFLOW_SHIFT_SHIFT)
> +#define SDP_S_LUT_LE_SLOPE_SHIFT_0_LUT_LE_SLOPE_OFLOW_SHIFT_SHIFT			_MK_SHIFT_CONST(5)
> +#define SDP_S_LUT_LE_SLOPE_SHIFT_0_LUT_LE_SLOPE_OFLOW_SHIFT_FIELD			_MK_FIELD_CONST(0x1f, SDP_S_LUT_LE_SLOPE_SHIFT_0_LUT_LE_SLOPE_OFLOW_SHIFT_SHIFT)
> +
> +
> +// Register SDP_S_LUT_LO_SLOPE_SCALE_0
> +#define SDP_S_LUT_LO_SLOPE_SCALE_0			_MK_ADDR_CONST(0x9030)
> +#define SDP_S_LUT_LO_SLOPE_SCALE_0_LUT_LO_SLOPE_UFLOW_SCALE_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_S_LUT_LO_SLOPE_SCALE_0_LUT_LO_SLOPE_UFLOW_SCALE_FIELD			_MK_FIELD_CONST(0xffff, SDP_S_LUT_LO_SLOPE_SCALE_0_LUT_LO_SLOPE_UFLOW_SCALE_SHIFT)
> +#define SDP_S_LUT_LO_SLOPE_SCALE_0_LUT_LO_SLOPE_OFLOW_SCALE_SHIFT			_MK_SHIFT_CONST(16)
> +#define SDP_S_LUT_LO_SLOPE_SCALE_0_LUT_LO_SLOPE_OFLOW_SCALE_FIELD			_MK_FIELD_CONST(0xffff, SDP_S_LUT_LO_SLOPE_SCALE_0_LUT_LO_SLOPE_OFLOW_SCALE_SHIFT)
> +
> +
> +// Register SDP_S_LUT_LO_SLOPE_SHIFT_0
> +#define SDP_S_LUT_LO_SLOPE_SHIFT_0			_MK_ADDR_CONST(0x9034)
> +#define SDP_S_LUT_LO_SLOPE_SHIFT_0_LUT_LO_SLOPE_UFLOW_SHIFT_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_S_LUT_LO_SLOPE_SHIFT_0_LUT_LO_SLOPE_UFLOW_SHIFT_FIELD			_MK_FIELD_CONST(0x1f, SDP_S_LUT_LO_SLOPE_SHIFT_0_LUT_LO_SLOPE_UFLOW_SHIFT_SHIFT)
> +#define SDP_S_LUT_LO_SLOPE_SHIFT_0_LUT_LO_SLOPE_OFLOW_SHIFT_SHIFT			_MK_SHIFT_CONST(5)
> +#define SDP_S_LUT_LO_SLOPE_SHIFT_0_LUT_LO_SLOPE_OFLOW_SHIFT_FIELD			_MK_FIELD_CONST(0x1f, SDP_S_LUT_LO_SLOPE_SHIFT_0_LUT_LO_SLOPE_OFLOW_SHIFT_SHIFT)
> +
> +
> +// Register SDP_D_OP_ENABLE_0
> +#define SDP_D_OP_ENABLE_0			_MK_ADDR_CONST(0x9038)
> +#define SDP_D_OP_ENABLE_0_OP_EN_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_D_OP_ENABLE_0_OP_EN_FIELD			_MK_FIELD_CONST(0x1, SDP_D_OP_ENABLE_0_OP_EN_SHIFT)
> +#define SDP_D_OP_ENABLE_0_OP_EN_DISABLE			_MK_ENUM_CONST(0x0)
> +#define SDP_D_OP_ENABLE_0_OP_EN_ENABLE			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register SDP_D_DATA_CUBE_WIDTH_0
> +#define SDP_D_DATA_CUBE_WIDTH_0			_MK_ADDR_CONST(0x903c)
> +#define SDP_D_DATA_CUBE_WIDTH_0_WIDTH_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_D_DATA_CUBE_WIDTH_0_WIDTH_FIELD			_MK_FIELD_CONST(0x1fff, SDP_D_DATA_CUBE_WIDTH_0_WIDTH_SHIFT)
> +
> +
> +// Register SDP_D_DATA_CUBE_HEIGHT_0
> +#define SDP_D_DATA_CUBE_HEIGHT_0			_MK_ADDR_CONST(0x9040)
> +#define SDP_D_DATA_CUBE_HEIGHT_0_HEIGHT_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_D_DATA_CUBE_HEIGHT_0_HEIGHT_FIELD			_MK_FIELD_CONST(0x1fff, SDP_D_DATA_CUBE_HEIGHT_0_HEIGHT_SHIFT)
> +
> +
> +// Register SDP_D_DATA_CUBE_CHANNEL_0
> +#define SDP_D_DATA_CUBE_CHANNEL_0			_MK_ADDR_CONST(0x9044)
> +#define SDP_D_DATA_CUBE_CHANNEL_0_CHANNEL_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_D_DATA_CUBE_CHANNEL_0_CHANNEL_FIELD			_MK_FIELD_CONST(0x1fff, SDP_D_DATA_CUBE_CHANNEL_0_CHANNEL_SHIFT)
> +
> +
> +// Register SDP_D_DST_BASE_ADDR_LOW_0
> +#define SDP_D_DST_BASE_ADDR_LOW_0			_MK_ADDR_CONST(0x9048)
> +#define SDP_D_DST_BASE_ADDR_LOW_0_DST_BASE_ADDR_LOW_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_D_DST_BASE_ADDR_LOW_0_DST_BASE_ADDR_LOW_FIELD			_MK_FIELD_CONST(0xffffffff, SDP_D_DST_BASE_ADDR_LOW_0_DST_BASE_ADDR_LOW_SHIFT)
> +
> +
> +// Register SDP_D_DST_BASE_ADDR_HIGH_0
> +#define SDP_D_DST_BASE_ADDR_HIGH_0			_MK_ADDR_CONST(0x904c)
> +#define SDP_D_DST_BASE_ADDR_HIGH_0_DST_BASE_ADDR_HIGH_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_D_DST_BASE_ADDR_HIGH_0_DST_BASE_ADDR_HIGH_FIELD			_MK_FIELD_CONST(0xffffffff, SDP_D_DST_BASE_ADDR_HIGH_0_DST_BASE_ADDR_HIGH_SHIFT)
> +
> +
> +// Register SDP_D_DST_LINE_STRIDE_0
> +#define SDP_D_DST_LINE_STRIDE_0			_MK_ADDR_CONST(0x9050)
> +#define SDP_D_DST_LINE_STRIDE_0_DST_LINE_STRIDE_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_D_DST_LINE_STRIDE_0_DST_LINE_STRIDE_FIELD			_MK_FIELD_CONST(0xffffffff, SDP_D_DST_LINE_STRIDE_0_DST_LINE_STRIDE_SHIFT)
> +
> +
> +// Register SDP_D_DST_SURFACE_STRIDE_0
> +#define SDP_D_DST_SURFACE_STRIDE_0			_MK_ADDR_CONST(0x9054)
> +#define SDP_D_DST_SURFACE_STRIDE_0_DST_SURFACE_STRIDE_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_D_DST_SURFACE_STRIDE_0_DST_SURFACE_STRIDE_FIELD			_MK_FIELD_CONST(0xffffffff, SDP_D_DST_SURFACE_STRIDE_0_DST_SURFACE_STRIDE_SHIFT)
> +
> +
> +// Register SDP_D_DP_BS_CFG_0
> +#define SDP_D_DP_BS_CFG_0			_MK_ADDR_CONST(0x9058)
> +#define SDP_D_DP_BS_CFG_0_BS_BYPASS_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_D_DP_BS_CFG_0_BS_BYPASS_FIELD			_MK_FIELD_CONST(0x1, SDP_D_DP_BS_CFG_0_BS_BYPASS_SHIFT)
> +#define SDP_D_DP_BS_CFG_0_BS_BYPASS_NO			_MK_ENUM_CONST(0x0)
> +#define SDP_D_DP_BS_CFG_0_BS_BYPASS_YES			_MK_ENUM_CONST(0x1)
> +#define SDP_D_DP_BS_CFG_0_BS_ALU_BYPASS_SHIFT			_MK_SHIFT_CONST(1)
> +#define SDP_D_DP_BS_CFG_0_BS_ALU_BYPASS_FIELD			_MK_FIELD_CONST(0x1, SDP_D_DP_BS_CFG_0_BS_ALU_BYPASS_SHIFT)
> +#define SDP_D_DP_BS_CFG_0_BS_ALU_BYPASS_NO			_MK_ENUM_CONST(0x0)
> +#define SDP_D_DP_BS_CFG_0_BS_ALU_BYPASS_YES			_MK_ENUM_CONST(0x1)
> +#define SDP_D_DP_BS_CFG_0_BS_ALU_ALGO_SHIFT			_MK_SHIFT_CONST(2)
> +#define SDP_D_DP_BS_CFG_0_BS_ALU_ALGO_FIELD			_MK_FIELD_CONST(0x3, SDP_D_DP_BS_CFG_0_BS_ALU_ALGO_SHIFT)
> +#define SDP_D_DP_BS_CFG_0_BS_ALU_ALGO_MAX			_MK_ENUM_CONST(0x0)
> +#define SDP_D_DP_BS_CFG_0_BS_ALU_ALGO_MIN			_MK_ENUM_CONST(0x1)
> +#define SDP_D_DP_BS_CFG_0_BS_ALU_ALGO_SUM			_MK_ENUM_CONST(0x2)
> +#define SDP_D_DP_BS_CFG_0_BS_MUL_BYPASS_SHIFT			_MK_SHIFT_CONST(4)
> +#define SDP_D_DP_BS_CFG_0_BS_MUL_BYPASS_FIELD			_MK_FIELD_CONST(0x1, SDP_D_DP_BS_CFG_0_BS_MUL_BYPASS_SHIFT)
> +#define SDP_D_DP_BS_CFG_0_BS_MUL_BYPASS_NO			_MK_ENUM_CONST(0x0)
> +#define SDP_D_DP_BS_CFG_0_BS_MUL_BYPASS_YES			_MK_ENUM_CONST(0x1)
> +#define SDP_D_DP_BS_CFG_0_BS_MUL_PRELU_SHIFT			_MK_SHIFT_CONST(5)
> +#define SDP_D_DP_BS_CFG_0_BS_MUL_PRELU_FIELD			_MK_FIELD_CONST(0x1, SDP_D_DP_BS_CFG_0_BS_MUL_PRELU_SHIFT)
> +#define SDP_D_DP_BS_CFG_0_BS_MUL_PRELU_NO			_MK_ENUM_CONST(0x0)
> +#define SDP_D_DP_BS_CFG_0_BS_MUL_PRELU_YES			_MK_ENUM_CONST(0x1)
> +#define SDP_D_DP_BS_CFG_0_BS_RELU_BYPASS_SHIFT			_MK_SHIFT_CONST(6)
> +#define SDP_D_DP_BS_CFG_0_BS_RELU_BYPASS_FIELD			_MK_FIELD_CONST(0x1, SDP_D_DP_BS_CFG_0_BS_RELU_BYPASS_SHIFT)
> +#define SDP_D_DP_BS_CFG_0_BS_RELU_BYPASS_NO			_MK_ENUM_CONST(0x0)
> +#define SDP_D_DP_BS_CFG_0_BS_RELU_BYPASS_YES			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register SDP_D_DP_BS_ALU_CFG_0
> +#define SDP_D_DP_BS_ALU_CFG_0			_MK_ADDR_CONST(0x905c)
> +#define SDP_D_DP_BS_ALU_CFG_0_BS_ALU_SRC_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_D_DP_BS_ALU_CFG_0_BS_ALU_SRC_FIELD			_MK_FIELD_CONST(0x1, SDP_D_DP_BS_ALU_CFG_0_BS_ALU_SRC_SHIFT)
> +#define SDP_D_DP_BS_ALU_CFG_0_BS_ALU_SRC_REG			_MK_ENUM_CONST(0x0)
> +#define SDP_D_DP_BS_ALU_CFG_0_BS_ALU_SRC_MEM			_MK_ENUM_CONST(0x1)
> +#define SDP_D_DP_BS_ALU_CFG_0_BS_ALU_SHIFT_VALUE_SHIFT			_MK_SHIFT_CONST(8)
> +#define SDP_D_DP_BS_ALU_CFG_0_BS_ALU_SHIFT_VALUE_FIELD			_MK_FIELD_CONST(0x3f, SDP_D_DP_BS_ALU_CFG_0_BS_ALU_SHIFT_VALUE_SHIFT)
> +
> +
> +// Register SDP_D_DP_BS_ALU_SRC_VALUE_0
> +#define SDP_D_DP_BS_ALU_SRC_VALUE_0			_MK_ADDR_CONST(0x9060)
> +#define SDP_D_DP_BS_ALU_SRC_VALUE_0_BS_ALU_OPERAND_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_D_DP_BS_ALU_SRC_VALUE_0_BS_ALU_OPERAND_FIELD			_MK_FIELD_CONST(0xffff, SDP_D_DP_BS_ALU_SRC_VALUE_0_BS_ALU_OPERAND_SHIFT)
> +
> +
> +// Register SDP_D_DP_BS_MUL_CFG_0
> +#define SDP_D_DP_BS_MUL_CFG_0			_MK_ADDR_CONST(0x9064)
> +#define SDP_D_DP_BS_MUL_CFG_0_BS_MUL_SRC_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_D_DP_BS_MUL_CFG_0_BS_MUL_SRC_FIELD			_MK_FIELD_CONST(0x1, SDP_D_DP_BS_MUL_CFG_0_BS_MUL_SRC_SHIFT)
> +#define SDP_D_DP_BS_MUL_CFG_0_BS_MUL_SRC_REG			_MK_ENUM_CONST(0x0)
> +#define SDP_D_DP_BS_MUL_CFG_0_BS_MUL_SRC_MEM			_MK_ENUM_CONST(0x1)
> +#define SDP_D_DP_BS_MUL_CFG_0_BS_MUL_SHIFT_VALUE_SHIFT			_MK_SHIFT_CONST(8)
> +#define SDP_D_DP_BS_MUL_CFG_0_BS_MUL_SHIFT_VALUE_FIELD			_MK_FIELD_CONST(0xff, SDP_D_DP_BS_MUL_CFG_0_BS_MUL_SHIFT_VALUE_SHIFT)
> +
> +
> +// Register SDP_D_DP_BS_MUL_SRC_VALUE_0
> +#define SDP_D_DP_BS_MUL_SRC_VALUE_0			_MK_ADDR_CONST(0x9068)
> +#define SDP_D_DP_BS_MUL_SRC_VALUE_0_BS_MUL_OPERAND_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_D_DP_BS_MUL_SRC_VALUE_0_BS_MUL_OPERAND_FIELD			_MK_FIELD_CONST(0xffff, SDP_D_DP_BS_MUL_SRC_VALUE_0_BS_MUL_OPERAND_SHIFT)
> +
> +
> +// Register SDP_D_DP_BN_CFG_0
> +#define SDP_D_DP_BN_CFG_0			_MK_ADDR_CONST(0x906c)
> +#define SDP_D_DP_BN_CFG_0_BN_BYPASS_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_D_DP_BN_CFG_0_BN_BYPASS_FIELD			_MK_FIELD_CONST(0x1, SDP_D_DP_BN_CFG_0_BN_BYPASS_SHIFT)
> +#define SDP_D_DP_BN_CFG_0_BN_BYPASS_NO			_MK_ENUM_CONST(0x0)
> +#define SDP_D_DP_BN_CFG_0_BN_BYPASS_YES			_MK_ENUM_CONST(0x1)
> +#define SDP_D_DP_BN_CFG_0_BN_ALU_BYPASS_SHIFT			_MK_SHIFT_CONST(1)
> +#define SDP_D_DP_BN_CFG_0_BN_ALU_BYPASS_FIELD			_MK_FIELD_CONST(0x1, SDP_D_DP_BN_CFG_0_BN_ALU_BYPASS_SHIFT)
> +#define SDP_D_DP_BN_CFG_0_BN_ALU_BYPASS_NO			_MK_ENUM_CONST(0x0)
> +#define SDP_D_DP_BN_CFG_0_BN_ALU_BYPASS_YES			_MK_ENUM_CONST(0x1)
> +#define SDP_D_DP_BN_CFG_0_BN_ALU_ALGO_SHIFT			_MK_SHIFT_CONST(2)
> +#define SDP_D_DP_BN_CFG_0_BN_ALU_ALGO_FIELD			_MK_FIELD_CONST(0x3, SDP_D_DP_BN_CFG_0_BN_ALU_ALGO_SHIFT)
> +#define SDP_D_DP_BN_CFG_0_BN_ALU_ALGO_MAX			_MK_ENUM_CONST(0x0)
> +#define SDP_D_DP_BN_CFG_0_BN_ALU_ALGO_MIN			_MK_ENUM_CONST(0x1)
> +#define SDP_D_DP_BN_CFG_0_BN_ALU_ALGO_SUM			_MK_ENUM_CONST(0x2)
> +#define SDP_D_DP_BN_CFG_0_BN_MUL_BYPASS_SHIFT			_MK_SHIFT_CONST(4)
> +#define SDP_D_DP_BN_CFG_0_BN_MUL_BYPASS_FIELD			_MK_FIELD_CONST(0x1, SDP_D_DP_BN_CFG_0_BN_MUL_BYPASS_SHIFT)
> +#define SDP_D_DP_BN_CFG_0_BN_MUL_BYPASS_NO			_MK_ENUM_CONST(0x0)
> +#define SDP_D_DP_BN_CFG_0_BN_MUL_BYPASS_YES			_MK_ENUM_CONST(0x1)
> +#define SDP_D_DP_BN_CFG_0_BN_MUL_PRELU_SHIFT			_MK_SHIFT_CONST(5)
> +#define SDP_D_DP_BN_CFG_0_BN_MUL_PRELU_FIELD			_MK_FIELD_CONST(0x1, SDP_D_DP_BN_CFG_0_BN_MUL_PRELU_SHIFT)
> +#define SDP_D_DP_BN_CFG_0_BN_MUL_PRELU_NO			_MK_ENUM_CONST(0x0)
> +#define SDP_D_DP_BN_CFG_0_BN_MUL_PRELU_YES			_MK_ENUM_CONST(0x1)
> +#define SDP_D_DP_BN_CFG_0_BN_RELU_BYPASS_SHIFT			_MK_SHIFT_CONST(6)
> +#define SDP_D_DP_BN_CFG_0_BN_RELU_BYPASS_FIELD			_MK_FIELD_CONST(0x1, SDP_D_DP_BN_CFG_0_BN_RELU_BYPASS_SHIFT)
> +#define SDP_D_DP_BN_CFG_0_BN_RELU_BYPASS_NO			_MK_ENUM_CONST(0x0)
> +#define SDP_D_DP_BN_CFG_0_BN_RELU_BYPASS_YES			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register SDP_D_DP_BN_ALU_CFG_0
> +#define SDP_D_DP_BN_ALU_CFG_0			_MK_ADDR_CONST(0x9070)
> +#define SDP_D_DP_BN_ALU_CFG_0_BN_ALU_SRC_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_D_DP_BN_ALU_CFG_0_BN_ALU_SRC_FIELD			_MK_FIELD_CONST(0x1, SDP_D_DP_BN_ALU_CFG_0_BN_ALU_SRC_SHIFT)
> +#define SDP_D_DP_BN_ALU_CFG_0_BN_ALU_SRC_REG			_MK_ENUM_CONST(0x0)
> +#define SDP_D_DP_BN_ALU_CFG_0_BN_ALU_SRC_MEM			_MK_ENUM_CONST(0x1)
> +#define SDP_D_DP_BN_ALU_CFG_0_BN_ALU_SHIFT_VALUE_SHIFT			_MK_SHIFT_CONST(8)
> +#define SDP_D_DP_BN_ALU_CFG_0_BN_ALU_SHIFT_VALUE_FIELD			_MK_FIELD_CONST(0x3f, SDP_D_DP_BN_ALU_CFG_0_BN_ALU_SHIFT_VALUE_SHIFT)
> +
> +
> +// Register SDP_D_DP_BN_ALU_SRC_VALUE_0
> +#define SDP_D_DP_BN_ALU_SRC_VALUE_0			_MK_ADDR_CONST(0x9074)
> +#define SDP_D_DP_BN_ALU_SRC_VALUE_0_BN_ALU_OPERAND_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_D_DP_BN_ALU_SRC_VALUE_0_BN_ALU_OPERAND_FIELD			_MK_FIELD_CONST(0xffff, SDP_D_DP_BN_ALU_SRC_VALUE_0_BN_ALU_OPERAND_SHIFT)
> +
> +
> +// Register SDP_D_DP_BN_MUL_CFG_0
> +#define SDP_D_DP_BN_MUL_CFG_0			_MK_ADDR_CONST(0x9078)
> +#define SDP_D_DP_BN_MUL_CFG_0_BN_MUL_SRC_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_D_DP_BN_MUL_CFG_0_BN_MUL_SRC_FIELD			_MK_FIELD_CONST(0x1, SDP_D_DP_BN_MUL_CFG_0_BN_MUL_SRC_SHIFT)
> +#define SDP_D_DP_BN_MUL_CFG_0_BN_MUL_SRC_REG			_MK_ENUM_CONST(0x0)
> +#define SDP_D_DP_BN_MUL_CFG_0_BN_MUL_SRC_MEM			_MK_ENUM_CONST(0x1)
> +#define SDP_D_DP_BN_MUL_CFG_0_BN_MUL_SHIFT_VALUE_SHIFT			_MK_SHIFT_CONST(8)
> +#define SDP_D_DP_BN_MUL_CFG_0_BN_MUL_SHIFT_VALUE_FIELD			_MK_FIELD_CONST(0xff, SDP_D_DP_BN_MUL_CFG_0_BN_MUL_SHIFT_VALUE_SHIFT)
> +
> +
> +// Register SDP_D_DP_BN_MUL_SRC_VALUE_0
> +#define SDP_D_DP_BN_MUL_SRC_VALUE_0			_MK_ADDR_CONST(0x907c)
> +#define SDP_D_DP_BN_MUL_SRC_VALUE_0_BN_MUL_OPERAND_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_D_DP_BN_MUL_SRC_VALUE_0_BN_MUL_OPERAND_FIELD			_MK_FIELD_CONST(0xffff, SDP_D_DP_BN_MUL_SRC_VALUE_0_BN_MUL_OPERAND_SHIFT)
> +
> +
> +// Register SDP_D_DP_EW_CFG_0
> +#define SDP_D_DP_EW_CFG_0			_MK_ADDR_CONST(0x9080)
> +#define SDP_D_DP_EW_CFG_0_EW_BYPASS_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_D_DP_EW_CFG_0_EW_BYPASS_FIELD			_MK_FIELD_CONST(0x1, SDP_D_DP_EW_CFG_0_EW_BYPASS_SHIFT)
> +#define SDP_D_DP_EW_CFG_0_EW_BYPASS_NO			_MK_ENUM_CONST(0x0)
> +#define SDP_D_DP_EW_CFG_0_EW_BYPASS_YES			_MK_ENUM_CONST(0x1)
> +#define SDP_D_DP_EW_CFG_0_EW_ALU_BYPASS_SHIFT			_MK_SHIFT_CONST(1)
> +#define SDP_D_DP_EW_CFG_0_EW_ALU_BYPASS_FIELD			_MK_FIELD_CONST(0x1, SDP_D_DP_EW_CFG_0_EW_ALU_BYPASS_SHIFT)
> +#define SDP_D_DP_EW_CFG_0_EW_ALU_BYPASS_NO			_MK_ENUM_CONST(0x0)
> +#define SDP_D_DP_EW_CFG_0_EW_ALU_BYPASS_YES			_MK_ENUM_CONST(0x1)
> +#define SDP_D_DP_EW_CFG_0_EW_ALU_ALGO_SHIFT			_MK_SHIFT_CONST(2)
> +#define SDP_D_DP_EW_CFG_0_EW_ALU_ALGO_FIELD			_MK_FIELD_CONST(0x3, SDP_D_DP_EW_CFG_0_EW_ALU_ALGO_SHIFT)
> +#define SDP_D_DP_EW_CFG_0_EW_ALU_ALGO_MAX			_MK_ENUM_CONST(0x0)
> +#define SDP_D_DP_EW_CFG_0_EW_ALU_ALGO_MIN			_MK_ENUM_CONST(0x1)
> +#define SDP_D_DP_EW_CFG_0_EW_ALU_ALGO_SUM			_MK_ENUM_CONST(0x2)
> +#define SDP_D_DP_EW_CFG_0_EW_ALU_ALGO_EQL			_MK_ENUM_CONST(0x3)
> +#define SDP_D_DP_EW_CFG_0_EW_MUL_BYPASS_SHIFT			_MK_SHIFT_CONST(4)
> +#define SDP_D_DP_EW_CFG_0_EW_MUL_BYPASS_FIELD			_MK_FIELD_CONST(0x1, SDP_D_DP_EW_CFG_0_EW_MUL_BYPASS_SHIFT)
> +#define SDP_D_DP_EW_CFG_0_EW_MUL_BYPASS_NO			_MK_ENUM_CONST(0x0)
> +#define SDP_D_DP_EW_CFG_0_EW_MUL_BYPASS_YES			_MK_ENUM_CONST(0x1)
> +#define SDP_D_DP_EW_CFG_0_EW_MUL_PRELU_SHIFT			_MK_SHIFT_CONST(5)
> +#define SDP_D_DP_EW_CFG_0_EW_MUL_PRELU_FIELD			_MK_FIELD_CONST(0x1, SDP_D_DP_EW_CFG_0_EW_MUL_PRELU_SHIFT)
> +#define SDP_D_DP_EW_CFG_0_EW_MUL_PRELU_NO			_MK_ENUM_CONST(0x0)
> +#define SDP_D_DP_EW_CFG_0_EW_MUL_PRELU_YES			_MK_ENUM_CONST(0x1)
> +#define SDP_D_DP_EW_CFG_0_EW_LUT_BYPASS_SHIFT			_MK_SHIFT_CONST(6)
> +#define SDP_D_DP_EW_CFG_0_EW_LUT_BYPASS_FIELD			_MK_FIELD_CONST(0x1, SDP_D_DP_EW_CFG_0_EW_LUT_BYPASS_SHIFT)
> +#define SDP_D_DP_EW_CFG_0_EW_LUT_BYPASS_NO			_MK_ENUM_CONST(0x0)
> +#define SDP_D_DP_EW_CFG_0_EW_LUT_BYPASS_YES			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register SDP_D_DP_EW_ALU_CFG_0
> +#define SDP_D_DP_EW_ALU_CFG_0			_MK_ADDR_CONST(0x9084)
> +#define SDP_D_DP_EW_ALU_CFG_0_EW_ALU_SRC_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_D_DP_EW_ALU_CFG_0_EW_ALU_SRC_FIELD			_MK_FIELD_CONST(0x1, SDP_D_DP_EW_ALU_CFG_0_EW_ALU_SRC_SHIFT)
> +#define SDP_D_DP_EW_ALU_CFG_0_EW_ALU_SRC_REG			_MK_ENUM_CONST(0x0)
> +#define SDP_D_DP_EW_ALU_CFG_0_EW_ALU_SRC_MEM			_MK_ENUM_CONST(0x1)
> +#define SDP_D_DP_EW_ALU_CFG_0_EW_ALU_CVT_BYPASS_SHIFT			_MK_SHIFT_CONST(1)
> +#define SDP_D_DP_EW_ALU_CFG_0_EW_ALU_CVT_BYPASS_FIELD			_MK_FIELD_CONST(0x1, SDP_D_DP_EW_ALU_CFG_0_EW_ALU_CVT_BYPASS_SHIFT)
> +#define SDP_D_DP_EW_ALU_CFG_0_EW_ALU_CVT_BYPASS_NO			_MK_ENUM_CONST(0x0)
> +#define SDP_D_DP_EW_ALU_CFG_0_EW_ALU_CVT_BYPASS_YES			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register SDP_D_DP_EW_ALU_SRC_VALUE_0
> +#define SDP_D_DP_EW_ALU_SRC_VALUE_0			_MK_ADDR_CONST(0x9088)
> +#define SDP_D_DP_EW_ALU_SRC_VALUE_0_EW_ALU_OPERAND_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_D_DP_EW_ALU_SRC_VALUE_0_EW_ALU_OPERAND_FIELD			_MK_FIELD_CONST(0xffffffff, SDP_D_DP_EW_ALU_SRC_VALUE_0_EW_ALU_OPERAND_SHIFT)
> +
> +
> +// Register SDP_D_DP_EW_ALU_CVT_OFFSET_VALUE_0
> +#define SDP_D_DP_EW_ALU_CVT_OFFSET_VALUE_0			_MK_ADDR_CONST(0x908c)
> +#define SDP_D_DP_EW_ALU_CVT_OFFSET_VALUE_0_EW_ALU_CVT_OFFSET_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_D_DP_EW_ALU_CVT_OFFSET_VALUE_0_EW_ALU_CVT_OFFSET_FIELD			_MK_FIELD_CONST(0xffffffff, SDP_D_DP_EW_ALU_CVT_OFFSET_VALUE_0_EW_ALU_CVT_OFFSET_SHIFT)
> +
> +
> +// Register SDP_D_DP_EW_ALU_CVT_SCALE_VALUE_0
> +#define SDP_D_DP_EW_ALU_CVT_SCALE_VALUE_0			_MK_ADDR_CONST(0x9090)
> +#define SDP_D_DP_EW_ALU_CVT_SCALE_VALUE_0_EW_ALU_CVT_SCALE_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_D_DP_EW_ALU_CVT_SCALE_VALUE_0_EW_ALU_CVT_SCALE_FIELD			_MK_FIELD_CONST(0xffff, SDP_D_DP_EW_ALU_CVT_SCALE_VALUE_0_EW_ALU_CVT_SCALE_SHIFT)
> +
> +
> +// Register SDP_D_DP_EW_ALU_CVT_TRUNCATE_VALUE_0
> +#define SDP_D_DP_EW_ALU_CVT_TRUNCATE_VALUE_0			_MK_ADDR_CONST(0x9094)
> +#define SDP_D_DP_EW_ALU_CVT_TRUNCATE_VALUE_0_EW_ALU_CVT_TRUNCATE_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_D_DP_EW_ALU_CVT_TRUNCATE_VALUE_0_EW_ALU_CVT_TRUNCATE_FIELD			_MK_FIELD_CONST(0x3f, SDP_D_DP_EW_ALU_CVT_TRUNCATE_VALUE_0_EW_ALU_CVT_TRUNCATE_SHIFT)
> +
> +
> +// Register SDP_D_DP_EW_MUL_CFG_0
> +#define SDP_D_DP_EW_MUL_CFG_0			_MK_ADDR_CONST(0x9098)
> +#define SDP_D_DP_EW_MUL_CFG_0_EW_MUL_SRC_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_D_DP_EW_MUL_CFG_0_EW_MUL_SRC_FIELD			_MK_FIELD_CONST(0x1, SDP_D_DP_EW_MUL_CFG_0_EW_MUL_SRC_SHIFT)
> +#define SDP_D_DP_EW_MUL_CFG_0_EW_MUL_SRC_REG			_MK_ENUM_CONST(0x0)
> +#define SDP_D_DP_EW_MUL_CFG_0_EW_MUL_SRC_MEM			_MK_ENUM_CONST(0x1)
> +#define SDP_D_DP_EW_MUL_CFG_0_EW_MUL_CVT_BYPASS_SHIFT			_MK_SHIFT_CONST(1)
> +#define SDP_D_DP_EW_MUL_CFG_0_EW_MUL_CVT_BYPASS_FIELD			_MK_FIELD_CONST(0x1, SDP_D_DP_EW_MUL_CFG_0_EW_MUL_CVT_BYPASS_SHIFT)
> +#define SDP_D_DP_EW_MUL_CFG_0_EW_MUL_CVT_BYPASS_NO			_MK_ENUM_CONST(0x0)
> +#define SDP_D_DP_EW_MUL_CFG_0_EW_MUL_CVT_BYPASS_YES			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register SDP_D_DP_EW_MUL_SRC_VALUE_0
> +#define SDP_D_DP_EW_MUL_SRC_VALUE_0			_MK_ADDR_CONST(0x909c)
> +#define SDP_D_DP_EW_MUL_SRC_VALUE_0_EW_MUL_OPERAND_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_D_DP_EW_MUL_SRC_VALUE_0_EW_MUL_OPERAND_FIELD			_MK_FIELD_CONST(0xffffffff, SDP_D_DP_EW_MUL_SRC_VALUE_0_EW_MUL_OPERAND_SHIFT)
> +
> +
> +// Register SDP_D_DP_EW_MUL_CVT_OFFSET_VALUE_0
> +#define SDP_D_DP_EW_MUL_CVT_OFFSET_VALUE_0			_MK_ADDR_CONST(0x90a0)
> +#define SDP_D_DP_EW_MUL_CVT_OFFSET_VALUE_0_EW_MUL_CVT_OFFSET_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_D_DP_EW_MUL_CVT_OFFSET_VALUE_0_EW_MUL_CVT_OFFSET_FIELD			_MK_FIELD_CONST(0xffffffff, SDP_D_DP_EW_MUL_CVT_OFFSET_VALUE_0_EW_MUL_CVT_OFFSET_SHIFT)
> +
> +
> +// Register SDP_D_DP_EW_MUL_CVT_SCALE_VALUE_0
> +#define SDP_D_DP_EW_MUL_CVT_SCALE_VALUE_0			_MK_ADDR_CONST(0x90a4)
> +#define SDP_D_DP_EW_MUL_CVT_SCALE_VALUE_0_EW_MUL_CVT_SCALE_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_D_DP_EW_MUL_CVT_SCALE_VALUE_0_EW_MUL_CVT_SCALE_FIELD			_MK_FIELD_CONST(0xffff, SDP_D_DP_EW_MUL_CVT_SCALE_VALUE_0_EW_MUL_CVT_SCALE_SHIFT)
> +
> +
> +// Register SDP_D_DP_EW_MUL_CVT_TRUNCATE_VALUE_0
> +#define SDP_D_DP_EW_MUL_CVT_TRUNCATE_VALUE_0			_MK_ADDR_CONST(0x90a8)
> +#define SDP_D_DP_EW_MUL_CVT_TRUNCATE_VALUE_0_EW_MUL_CVT_TRUNCATE_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_D_DP_EW_MUL_CVT_TRUNCATE_VALUE_0_EW_MUL_CVT_TRUNCATE_FIELD			_MK_FIELD_CONST(0x3f, SDP_D_DP_EW_MUL_CVT_TRUNCATE_VALUE_0_EW_MUL_CVT_TRUNCATE_SHIFT)
> +
> +
> +// Register SDP_D_DP_EW_TRUNCATE_VALUE_0
> +#define SDP_D_DP_EW_TRUNCATE_VALUE_0			_MK_ADDR_CONST(0x90ac)
> +#define SDP_D_DP_EW_TRUNCATE_VALUE_0_EW_TRUNCATE_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_D_DP_EW_TRUNCATE_VALUE_0_EW_TRUNCATE_FIELD			_MK_FIELD_CONST(0x3ff, SDP_D_DP_EW_TRUNCATE_VALUE_0_EW_TRUNCATE_SHIFT)
> +
> +
> +// Register SDP_D_FEATURE_MODE_CFG_0
> +#define SDP_D_FEATURE_MODE_CFG_0			_MK_ADDR_CONST(0x90b0)
> +#define SDP_D_FEATURE_MODE_CFG_0_FLYING_MODE_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_D_FEATURE_MODE_CFG_0_FLYING_MODE_FIELD			_MK_FIELD_CONST(0x1, SDP_D_FEATURE_MODE_CFG_0_FLYING_MODE_SHIFT)
> +#define SDP_D_FEATURE_MODE_CFG_0_FLYING_MODE_OFF			_MK_ENUM_CONST(0x0)
> +#define SDP_D_FEATURE_MODE_CFG_0_FLYING_MODE_ON			_MK_ENUM_CONST(0x1)
> +#define SDP_D_FEATURE_MODE_CFG_0_OUTPUT_DST_SHIFT			_MK_SHIFT_CONST(1)
> +#define SDP_D_FEATURE_MODE_CFG_0_OUTPUT_DST_FIELD			_MK_FIELD_CONST(0x1, SDP_D_FEATURE_MODE_CFG_0_OUTPUT_DST_SHIFT)
> +#define SDP_D_FEATURE_MODE_CFG_0_OUTPUT_DST_MEM			_MK_ENUM_CONST(0x0)
> +#define SDP_D_FEATURE_MODE_CFG_0_OUTPUT_DST_PDP			_MK_ENUM_CONST(0x1)
> +#define SDP_D_FEATURE_MODE_CFG_0_WINOGRAD_SHIFT			_MK_SHIFT_CONST(2)
> +#define SDP_D_FEATURE_MODE_CFG_0_WINOGRAD_FIELD			_MK_FIELD_CONST(0x1, SDP_D_FEATURE_MODE_CFG_0_WINOGRAD_SHIFT)
> +#define SDP_D_FEATURE_MODE_CFG_0_WINOGRAD_OFF			_MK_ENUM_CONST(0x0)
> +#define SDP_D_FEATURE_MODE_CFG_0_WINOGRAD_ON			_MK_ENUM_CONST(0x1)
> +#define SDP_D_FEATURE_MODE_CFG_0_NAN_TO_ZERO_SHIFT			_MK_SHIFT_CONST(3)
> +#define SDP_D_FEATURE_MODE_CFG_0_NAN_TO_ZERO_FIELD			_MK_FIELD_CONST(0x1, SDP_D_FEATURE_MODE_CFG_0_NAN_TO_ZERO_SHIFT)
> +#define SDP_D_FEATURE_MODE_CFG_0_NAN_TO_ZERO_DISABLE			_MK_ENUM_CONST(0x0)
> +#define SDP_D_FEATURE_MODE_CFG_0_NAN_TO_ZERO_ENABLE			_MK_ENUM_CONST(0x1)
> +#define SDP_D_FEATURE_MODE_CFG_0_BATCH_NUMBER_SHIFT			_MK_SHIFT_CONST(8)
> +#define SDP_D_FEATURE_MODE_CFG_0_BATCH_NUMBER_FIELD			_MK_FIELD_CONST(0x1f, SDP_D_FEATURE_MODE_CFG_0_BATCH_NUMBER_SHIFT)
> +
> +
> +// Register SDP_D_DST_DMA_CFG_0
> +#define SDP_D_DST_DMA_CFG_0			_MK_ADDR_CONST(0x90b4)
> +#define SDP_D_DST_DMA_CFG_0_DST_RAM_TYPE_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_D_DST_DMA_CFG_0_DST_RAM_TYPE_FIELD			_MK_FIELD_CONST(0x1, SDP_D_DST_DMA_CFG_0_DST_RAM_TYPE_SHIFT)
> +#define SDP_D_DST_DMA_CFG_0_DST_RAM_TYPE_CV			_MK_ENUM_CONST(0x0)
> +#define SDP_D_DST_DMA_CFG_0_DST_RAM_TYPE_MC			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register SDP_D_DST_BATCH_STRIDE_0
> +#define SDP_D_DST_BATCH_STRIDE_0			_MK_ADDR_CONST(0x90b8)
> +#define SDP_D_DST_BATCH_STRIDE_0_DST_BATCH_STRIDE_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_D_DST_BATCH_STRIDE_0_DST_BATCH_STRIDE_FIELD			_MK_FIELD_CONST(0xffffffff, SDP_D_DST_BATCH_STRIDE_0_DST_BATCH_STRIDE_SHIFT)
> +
> +
> +// Register SDP_D_DATA_FORMAT_0
> +#define SDP_D_DATA_FORMAT_0			_MK_ADDR_CONST(0x90bc)
> +#define SDP_D_DATA_FORMAT_0_PROC_PRECISION_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_D_DATA_FORMAT_0_PROC_PRECISION_FIELD			_MK_FIELD_CONST(0x3, SDP_D_DATA_FORMAT_0_PROC_PRECISION_SHIFT)
> +#define SDP_D_DATA_FORMAT_0_PROC_PRECISION_INT8			_MK_ENUM_CONST(0x0)
> +#define SDP_D_DATA_FORMAT_0_PROC_PRECISION_INT16			_MK_ENUM_CONST(0x1)
> +#define SDP_D_DATA_FORMAT_0_PROC_PRECISION_FP16			_MK_ENUM_CONST(0x2)
> +#define SDP_D_DATA_FORMAT_0_OUT_PRECISION_SHIFT			_MK_SHIFT_CONST(2)
> +#define SDP_D_DATA_FORMAT_0_OUT_PRECISION_FIELD			_MK_FIELD_CONST(0x3, SDP_D_DATA_FORMAT_0_OUT_PRECISION_SHIFT)
> +#define SDP_D_DATA_FORMAT_0_OUT_PRECISION_INT8			_MK_ENUM_CONST(0x0)
> +#define SDP_D_DATA_FORMAT_0_OUT_PRECISION_INT16			_MK_ENUM_CONST(0x1)
> +#define SDP_D_DATA_FORMAT_0_OUT_PRECISION_FP16			_MK_ENUM_CONST(0x2)
> +
> +
> +// Register SDP_D_CVT_OFFSET_0
> +#define SDP_D_CVT_OFFSET_0			_MK_ADDR_CONST(0x90c0)
> +#define SDP_D_CVT_OFFSET_0_CVT_OFFSET_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_D_CVT_OFFSET_0_CVT_OFFSET_FIELD			_MK_FIELD_CONST(0xffffffff, SDP_D_CVT_OFFSET_0_CVT_OFFSET_SHIFT)
> +
> +
> +// Register SDP_D_CVT_SCALE_0
> +#define SDP_D_CVT_SCALE_0			_MK_ADDR_CONST(0x90c4)
> +#define SDP_D_CVT_SCALE_0_CVT_SCALE_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_D_CVT_SCALE_0_CVT_SCALE_FIELD			_MK_FIELD_CONST(0xffff, SDP_D_CVT_SCALE_0_CVT_SCALE_SHIFT)
> +
> +
> +// Register SDP_D_CVT_SHIFT_0
> +#define SDP_D_CVT_SHIFT_0			_MK_ADDR_CONST(0x90c8)
> +#define SDP_D_CVT_SHIFT_0_CVT_SHIFT_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_D_CVT_SHIFT_0_CVT_SHIFT_FIELD			_MK_FIELD_CONST(0x3f, SDP_D_CVT_SHIFT_0_CVT_SHIFT_SHIFT)
> +
> +
> +// Register SDP_D_STATUS_0
> +#define SDP_D_STATUS_0			_MK_ADDR_CONST(0x90cc)
> +#define SDP_D_STATUS_0_STATUS_UNEQUAL_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_D_STATUS_0_STATUS_UNEQUAL_FIELD			_MK_FIELD_CONST(0x1, SDP_D_STATUS_0_STATUS_UNEQUAL_SHIFT)
> +
> +
> +// Register SDP_D_STATUS_NAN_INPUT_NUM_0
> +#define SDP_D_STATUS_NAN_INPUT_NUM_0			_MK_ADDR_CONST(0x90d0)
> +#define SDP_D_STATUS_NAN_INPUT_NUM_0_STATUS_NAN_INPUT_NUM_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_D_STATUS_NAN_INPUT_NUM_0_STATUS_NAN_INPUT_NUM_FIELD			_MK_FIELD_CONST(0xffffffff, SDP_D_STATUS_NAN_INPUT_NUM_0_STATUS_NAN_INPUT_NUM_SHIFT)
> +
> +
> +// Register SDP_D_STATUS_INF_INPUT_NUM_0
> +#define SDP_D_STATUS_INF_INPUT_NUM_0			_MK_ADDR_CONST(0x90d4)
> +#define SDP_D_STATUS_INF_INPUT_NUM_0_STATUS_INF_INPUT_NUM_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_D_STATUS_INF_INPUT_NUM_0_STATUS_INF_INPUT_NUM_FIELD			_MK_FIELD_CONST(0xffffffff, SDP_D_STATUS_INF_INPUT_NUM_0_STATUS_INF_INPUT_NUM_SHIFT)
> +
> +
> +// Register SDP_D_STATUS_NAN_OUTPUT_NUM_0
> +#define SDP_D_STATUS_NAN_OUTPUT_NUM_0			_MK_ADDR_CONST(0x90d8)
> +#define SDP_D_STATUS_NAN_OUTPUT_NUM_0_STATUS_NAN_OUTPUT_NUM_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_D_STATUS_NAN_OUTPUT_NUM_0_STATUS_NAN_OUTPUT_NUM_FIELD			_MK_FIELD_CONST(0xffffffff, SDP_D_STATUS_NAN_OUTPUT_NUM_0_STATUS_NAN_OUTPUT_NUM_SHIFT)
> +
> +
> +// Register SDP_D_PERF_ENABLE_0
> +#define SDP_D_PERF_ENABLE_0			_MK_ADDR_CONST(0x90dc)
> +#define SDP_D_PERF_ENABLE_0_PERF_DMA_EN_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_D_PERF_ENABLE_0_PERF_DMA_EN_FIELD			_MK_FIELD_CONST(0x1, SDP_D_PERF_ENABLE_0_PERF_DMA_EN_SHIFT)
> +#define SDP_D_PERF_ENABLE_0_PERF_DMA_EN_NO			_MK_ENUM_CONST(0x0)
> +#define SDP_D_PERF_ENABLE_0_PERF_DMA_EN_YES			_MK_ENUM_CONST(0x1)
> +#define SDP_D_PERF_ENABLE_0_PERF_LUT_EN_SHIFT			_MK_SHIFT_CONST(1)
> +#define SDP_D_PERF_ENABLE_0_PERF_LUT_EN_FIELD			_MK_FIELD_CONST(0x1, SDP_D_PERF_ENABLE_0_PERF_LUT_EN_SHIFT)
> +#define SDP_D_PERF_ENABLE_0_PERF_LUT_EN_NO			_MK_ENUM_CONST(0x0)
> +#define SDP_D_PERF_ENABLE_0_PERF_LUT_EN_YES			_MK_ENUM_CONST(0x1)
> +#define SDP_D_PERF_ENABLE_0_PERF_SAT_EN_SHIFT			_MK_SHIFT_CONST(2)
> +#define SDP_D_PERF_ENABLE_0_PERF_SAT_EN_FIELD			_MK_FIELD_CONST(0x1, SDP_D_PERF_ENABLE_0_PERF_SAT_EN_SHIFT)
> +#define SDP_D_PERF_ENABLE_0_PERF_SAT_EN_NO			_MK_ENUM_CONST(0x0)
> +#define SDP_D_PERF_ENABLE_0_PERF_SAT_EN_YES			_MK_ENUM_CONST(0x1)
> +#define SDP_D_PERF_ENABLE_0_PERF_NAN_INF_COUNT_EN_SHIFT			_MK_SHIFT_CONST(3)
> +#define SDP_D_PERF_ENABLE_0_PERF_NAN_INF_COUNT_EN_FIELD			_MK_FIELD_CONST(0x1, SDP_D_PERF_ENABLE_0_PERF_NAN_INF_COUNT_EN_SHIFT)
> +#define SDP_D_PERF_ENABLE_0_PERF_NAN_INF_COUNT_EN_NO			_MK_ENUM_CONST(0x0)
> +#define SDP_D_PERF_ENABLE_0_PERF_NAN_INF_COUNT_EN_YES			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register SDP_D_PERF_WDMA_WRITE_STALL_0
> +#define SDP_D_PERF_WDMA_WRITE_STALL_0			_MK_ADDR_CONST(0x90e0)
> +#define SDP_D_PERF_WDMA_WRITE_STALL_0_WDMA_STALL_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_D_PERF_WDMA_WRITE_STALL_0_WDMA_STALL_FIELD			_MK_FIELD_CONST(0xffffffff, SDP_D_PERF_WDMA_WRITE_STALL_0_WDMA_STALL_SHIFT)
> +
> +
> +// Register SDP_D_PERF_LUT_UFLOW_0
> +#define SDP_D_PERF_LUT_UFLOW_0			_MK_ADDR_CONST(0x90e4)
> +#define SDP_D_PERF_LUT_UFLOW_0_LUT_UFLOW_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_D_PERF_LUT_UFLOW_0_LUT_UFLOW_FIELD			_MK_FIELD_CONST(0xffffffff, SDP_D_PERF_LUT_UFLOW_0_LUT_UFLOW_SHIFT)
> +
> +
> +// Register SDP_D_PERF_LUT_OFLOW_0
> +#define SDP_D_PERF_LUT_OFLOW_0			_MK_ADDR_CONST(0x90e8)
> +#define SDP_D_PERF_LUT_OFLOW_0_LUT_OFLOW_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_D_PERF_LUT_OFLOW_0_LUT_OFLOW_FIELD			_MK_FIELD_CONST(0xffffffff, SDP_D_PERF_LUT_OFLOW_0_LUT_OFLOW_SHIFT)
> +
> +
> +// Register SDP_D_PERF_OUT_SATURATION_0
> +#define SDP_D_PERF_OUT_SATURATION_0			_MK_ADDR_CONST(0x90ec)
> +#define SDP_D_PERF_OUT_SATURATION_0_OUT_SATURATION_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_D_PERF_OUT_SATURATION_0_OUT_SATURATION_FIELD			_MK_FIELD_CONST(0xffffffff, SDP_D_PERF_OUT_SATURATION_0_OUT_SATURATION_SHIFT)
> +
> +
> +// Register SDP_D_PERF_LUT_HYBRID_0
> +#define SDP_D_PERF_LUT_HYBRID_0			_MK_ADDR_CONST(0x90f0)
> +#define SDP_D_PERF_LUT_HYBRID_0_LUT_HYBRID_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_D_PERF_LUT_HYBRID_0_LUT_HYBRID_FIELD			_MK_FIELD_CONST(0xffffffff, SDP_D_PERF_LUT_HYBRID_0_LUT_HYBRID_SHIFT)
> +
> +
> +// Register SDP_D_PERF_LUT_LE_HIT_0
> +#define SDP_D_PERF_LUT_LE_HIT_0			_MK_ADDR_CONST(0x90f4)
> +#define SDP_D_PERF_LUT_LE_HIT_0_LUT_LE_HIT_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_D_PERF_LUT_LE_HIT_0_LUT_LE_HIT_FIELD			_MK_FIELD_CONST(0xffffffff, SDP_D_PERF_LUT_LE_HIT_0_LUT_LE_HIT_SHIFT)
> +
> +
> +// Register SDP_D_PERF_LUT_LO_HIT_0
> +#define SDP_D_PERF_LUT_LO_HIT_0			_MK_ADDR_CONST(0x90f8)
> +#define SDP_D_PERF_LUT_LO_HIT_0_LUT_LO_HIT_SHIFT			_MK_SHIFT_CONST(0)
> +#define SDP_D_PERF_LUT_LO_HIT_0_LUT_LO_HIT_FIELD			_MK_FIELD_CONST(0xffffffff, SDP_D_PERF_LUT_LO_HIT_0_LUT_LO_HIT_SHIFT)
> +
> +
> +
> +// To satisfy various compilers and platforms,
> +// we let users control the types and syntax of certain constants, using macros.
> +#ifndef _MK_SHIFT_CONST
> +  #define _MK_SHIFT_CONST(_constant_) _constant_
> +#endif
> +#ifndef _MK_MASK_CONST
> +  #define _MK_MASK_CONST(_constant_) _constant_
> +#endif
> +#ifndef _MK_ENUM_CONST
> +  #define _MK_ENUM_CONST(_constant_) (_constant_ ## UL)
> +#endif
> +#ifndef _MK_ADDR_CONST
> +  #define _MK_ADDR_CONST(_constant_) _constant_
> +#endif
> +#ifndef _MK_FIELD_CONST
> +  #define _MK_FIELD_CONST(_mask_, _shift_) (_MK_MASK_CONST(_mask_) << _MK_SHIFT_CONST(_shift_))
> +#endif
> +
> +
> +// Register PDP_RDMA_S_STATUS_0
> +#define PDP_RDMA_S_STATUS_0			_MK_ADDR_CONST(0xa000)
> +#define PDP_RDMA_S_STATUS_0_STATUS_0_SHIFT			_MK_SHIFT_CONST(0)
> +#define PDP_RDMA_S_STATUS_0_STATUS_0_FIELD			_MK_FIELD_CONST(0x3, PDP_RDMA_S_STATUS_0_STATUS_0_SHIFT)
> +#define PDP_RDMA_S_STATUS_0_STATUS_0_IDLE			_MK_ENUM_CONST(0x0)
> +#define PDP_RDMA_S_STATUS_0_STATUS_0_RUNNING			_MK_ENUM_CONST(0x1)
> +#define PDP_RDMA_S_STATUS_0_STATUS_0_PENDING			_MK_ENUM_CONST(0x2)
> +#define PDP_RDMA_S_STATUS_0_STATUS_1_SHIFT			_MK_SHIFT_CONST(16)
> +#define PDP_RDMA_S_STATUS_0_STATUS_1_FIELD			_MK_FIELD_CONST(0x3, PDP_RDMA_S_STATUS_0_STATUS_1_SHIFT)
> +#define PDP_RDMA_S_STATUS_0_STATUS_1_IDLE			_MK_ENUM_CONST(0x0)
> +#define PDP_RDMA_S_STATUS_0_STATUS_1_RUNNING			_MK_ENUM_CONST(0x1)
> +#define PDP_RDMA_S_STATUS_0_STATUS_1_PENDING			_MK_ENUM_CONST(0x2)
> +
> +
> +// Register PDP_RDMA_S_POINTER_0
> +#define PDP_RDMA_S_POINTER_0			_MK_ADDR_CONST(0xa004)
> +#define PDP_RDMA_S_POINTER_0_PRODUCER_SHIFT			_MK_SHIFT_CONST(0)
> +#define PDP_RDMA_S_POINTER_0_PRODUCER_FIELD			_MK_FIELD_CONST(0x1, PDP_RDMA_S_POINTER_0_PRODUCER_SHIFT)
> +#define PDP_RDMA_S_POINTER_0_PRODUCER_GROUP_0			_MK_ENUM_CONST(0x0)
> +#define PDP_RDMA_S_POINTER_0_PRODUCER_GROUP_1			_MK_ENUM_CONST(0x1)
> +#define PDP_RDMA_S_POINTER_0_CONSUMER_SHIFT			_MK_SHIFT_CONST(16)
> +#define PDP_RDMA_S_POINTER_0_CONSUMER_FIELD			_MK_FIELD_CONST(0x1, PDP_RDMA_S_POINTER_0_CONSUMER_SHIFT)
> +#define PDP_RDMA_S_POINTER_0_CONSUMER_GROUP_0			_MK_ENUM_CONST(0x0)
> +#define PDP_RDMA_S_POINTER_0_CONSUMER_GROUP_1			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register PDP_RDMA_D_OP_ENABLE_0
> +#define PDP_RDMA_D_OP_ENABLE_0			_MK_ADDR_CONST(0xa008)
> +#define PDP_RDMA_D_OP_ENABLE_0_OP_EN_SHIFT			_MK_SHIFT_CONST(0)
> +#define PDP_RDMA_D_OP_ENABLE_0_OP_EN_FIELD			_MK_FIELD_CONST(0x1, PDP_RDMA_D_OP_ENABLE_0_OP_EN_SHIFT)
> +#define PDP_RDMA_D_OP_ENABLE_0_OP_EN_DISABLE			_MK_ENUM_CONST(0x0)
> +#define PDP_RDMA_D_OP_ENABLE_0_OP_EN_ENABLE			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register PDP_RDMA_D_DATA_CUBE_IN_WIDTH_0
> +#define PDP_RDMA_D_DATA_CUBE_IN_WIDTH_0			_MK_ADDR_CONST(0xa00c)
> +#define PDP_RDMA_D_DATA_CUBE_IN_WIDTH_0_CUBE_IN_WIDTH_SHIFT			_MK_SHIFT_CONST(0)
> +#define PDP_RDMA_D_DATA_CUBE_IN_WIDTH_0_CUBE_IN_WIDTH_FIELD			_MK_FIELD_CONST(0x1fff, PDP_RDMA_D_DATA_CUBE_IN_WIDTH_0_CUBE_IN_WIDTH_SHIFT)
> +
> +
> +// Register PDP_RDMA_D_DATA_CUBE_IN_HEIGHT_0
> +#define PDP_RDMA_D_DATA_CUBE_IN_HEIGHT_0			_MK_ADDR_CONST(0xa010)
> +#define PDP_RDMA_D_DATA_CUBE_IN_HEIGHT_0_CUBE_IN_HEIGHT_SHIFT			_MK_SHIFT_CONST(0)
> +#define PDP_RDMA_D_DATA_CUBE_IN_HEIGHT_0_CUBE_IN_HEIGHT_FIELD			_MK_FIELD_CONST(0x1fff, PDP_RDMA_D_DATA_CUBE_IN_HEIGHT_0_CUBE_IN_HEIGHT_SHIFT)
> +
> +
> +// Register PDP_RDMA_D_DATA_CUBE_IN_CHANNEL_0
> +#define PDP_RDMA_D_DATA_CUBE_IN_CHANNEL_0			_MK_ADDR_CONST(0xa014)
> +#define PDP_RDMA_D_DATA_CUBE_IN_CHANNEL_0_CUBE_IN_CHANNEL_SHIFT			_MK_SHIFT_CONST(0)
> +#define PDP_RDMA_D_DATA_CUBE_IN_CHANNEL_0_CUBE_IN_CHANNEL_FIELD			_MK_FIELD_CONST(0x1fff, PDP_RDMA_D_DATA_CUBE_IN_CHANNEL_0_CUBE_IN_CHANNEL_SHIFT)
> +
> +
> +// Register PDP_RDMA_D_FLYING_MODE_0
> +#define PDP_RDMA_D_FLYING_MODE_0			_MK_ADDR_CONST(0xa018)
> +#define PDP_RDMA_D_FLYING_MODE_0_FLYING_MODE_SHIFT			_MK_SHIFT_CONST(0)
> +#define PDP_RDMA_D_FLYING_MODE_0_FLYING_MODE_FIELD			_MK_FIELD_CONST(0x1, PDP_RDMA_D_FLYING_MODE_0_FLYING_MODE_SHIFT)
> +#define PDP_RDMA_D_FLYING_MODE_0_FLYING_MODE_ON_FLYING			_MK_ENUM_CONST(0x0)
> +#define PDP_RDMA_D_FLYING_MODE_0_FLYING_MODE_OFF_FLYING			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register PDP_RDMA_D_SRC_BASE_ADDR_LOW_0
> +#define PDP_RDMA_D_SRC_BASE_ADDR_LOW_0			_MK_ADDR_CONST(0xa01c)
> +#define PDP_RDMA_D_SRC_BASE_ADDR_LOW_0_SRC_BASE_ADDR_LOW_SHIFT			_MK_SHIFT_CONST(0)
> +#define PDP_RDMA_D_SRC_BASE_ADDR_LOW_0_SRC_BASE_ADDR_LOW_FIELD			_MK_FIELD_CONST(0xffffffff, PDP_RDMA_D_SRC_BASE_ADDR_LOW_0_SRC_BASE_ADDR_LOW_SHIFT)
> +
> +
> +// Register PDP_RDMA_D_SRC_BASE_ADDR_HIGH_0
> +#define PDP_RDMA_D_SRC_BASE_ADDR_HIGH_0			_MK_ADDR_CONST(0xa020)
> +#define PDP_RDMA_D_SRC_BASE_ADDR_HIGH_0_SRC_BASE_ADDR_HIGH_SHIFT			_MK_SHIFT_CONST(0)
> +#define PDP_RDMA_D_SRC_BASE_ADDR_HIGH_0_SRC_BASE_ADDR_HIGH_FIELD			_MK_FIELD_CONST(0xffffffff, PDP_RDMA_D_SRC_BASE_ADDR_HIGH_0_SRC_BASE_ADDR_HIGH_SHIFT)
> +
> +
> +// Register PDP_RDMA_D_SRC_LINE_STRIDE_0
> +#define PDP_RDMA_D_SRC_LINE_STRIDE_0			_MK_ADDR_CONST(0xa024)
> +#define PDP_RDMA_D_SRC_LINE_STRIDE_0_SRC_LINE_STRIDE_SHIFT			_MK_SHIFT_CONST(0)
> +#define PDP_RDMA_D_SRC_LINE_STRIDE_0_SRC_LINE_STRIDE_FIELD			_MK_FIELD_CONST(0xffffffff, PDP_RDMA_D_SRC_LINE_STRIDE_0_SRC_LINE_STRIDE_SHIFT)
> +
> +
> +// Register PDP_RDMA_D_SRC_SURFACE_STRIDE_0
> +#define PDP_RDMA_D_SRC_SURFACE_STRIDE_0			_MK_ADDR_CONST(0xa028)
> +#define PDP_RDMA_D_SRC_SURFACE_STRIDE_0_SRC_SURFACE_STRIDE_SHIFT			_MK_SHIFT_CONST(0)
> +#define PDP_RDMA_D_SRC_SURFACE_STRIDE_0_SRC_SURFACE_STRIDE_FIELD			_MK_FIELD_CONST(0xffffffff, PDP_RDMA_D_SRC_SURFACE_STRIDE_0_SRC_SURFACE_STRIDE_SHIFT)
> +
> +
> +// Register PDP_RDMA_D_SRC_RAM_CFG_0
> +#define PDP_RDMA_D_SRC_RAM_CFG_0			_MK_ADDR_CONST(0xa02c)
> +#define PDP_RDMA_D_SRC_RAM_CFG_0_SRC_RAM_TYPE_SHIFT			_MK_SHIFT_CONST(0)
> +#define PDP_RDMA_D_SRC_RAM_CFG_0_SRC_RAM_TYPE_FIELD			_MK_FIELD_CONST(0x1, PDP_RDMA_D_SRC_RAM_CFG_0_SRC_RAM_TYPE_SHIFT)
> +#define PDP_RDMA_D_SRC_RAM_CFG_0_SRC_RAM_TYPE_CV			_MK_ENUM_CONST(0x0)
> +#define PDP_RDMA_D_SRC_RAM_CFG_0_SRC_RAM_TYPE_MC			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register PDP_RDMA_D_DATA_FORMAT_0
> +#define PDP_RDMA_D_DATA_FORMAT_0			_MK_ADDR_CONST(0xa030)
> +#define PDP_RDMA_D_DATA_FORMAT_0_INPUT_DATA_SHIFT			_MK_SHIFT_CONST(0)
> +#define PDP_RDMA_D_DATA_FORMAT_0_INPUT_DATA_FIELD			_MK_FIELD_CONST(0x3, PDP_RDMA_D_DATA_FORMAT_0_INPUT_DATA_SHIFT)
> +#define PDP_RDMA_D_DATA_FORMAT_0_INPUT_DATA_INT8			_MK_ENUM_CONST(0x0)
> +#define PDP_RDMA_D_DATA_FORMAT_0_INPUT_DATA_INT16			_MK_ENUM_CONST(0x1)
> +#define PDP_RDMA_D_DATA_FORMAT_0_INPUT_DATA_FP16			_MK_ENUM_CONST(0x2)
> +
> +
> +// Register PDP_RDMA_D_OPERATION_MODE_CFG_0
> +#define PDP_RDMA_D_OPERATION_MODE_CFG_0			_MK_ADDR_CONST(0xa034)
> +#define PDP_RDMA_D_OPERATION_MODE_CFG_0_SPLIT_NUM_SHIFT			_MK_SHIFT_CONST(0)
> +#define PDP_RDMA_D_OPERATION_MODE_CFG_0_SPLIT_NUM_FIELD			_MK_FIELD_CONST(0xff, PDP_RDMA_D_OPERATION_MODE_CFG_0_SPLIT_NUM_SHIFT)
> +
> +
> +// Register PDP_RDMA_D_POOLING_KERNEL_CFG_0
> +#define PDP_RDMA_D_POOLING_KERNEL_CFG_0			_MK_ADDR_CONST(0xa038)
> +#define PDP_RDMA_D_POOLING_KERNEL_CFG_0_KERNEL_WIDTH_SHIFT			_MK_SHIFT_CONST(0)
> +#define PDP_RDMA_D_POOLING_KERNEL_CFG_0_KERNEL_WIDTH_FIELD			_MK_FIELD_CONST(0xf, PDP_RDMA_D_POOLING_KERNEL_CFG_0_KERNEL_WIDTH_SHIFT)
> +#define PDP_RDMA_D_POOLING_KERNEL_CFG_0_KERNEL_WIDTH_KERNEL_WIDTH_1			_MK_ENUM_CONST(0x0)
> +#define PDP_RDMA_D_POOLING_KERNEL_CFG_0_KERNEL_WIDTH_KERNEL_WIDTH_2			_MK_ENUM_CONST(0x1)
> +#define PDP_RDMA_D_POOLING_KERNEL_CFG_0_KERNEL_WIDTH_KERNEL_WIDTH_3			_MK_ENUM_CONST(0x2)
> +#define PDP_RDMA_D_POOLING_KERNEL_CFG_0_KERNEL_WIDTH_KERNEL_WIDTH_4			_MK_ENUM_CONST(0x3)
> +#define PDP_RDMA_D_POOLING_KERNEL_CFG_0_KERNEL_WIDTH_KERNEL_WIDTH_5			_MK_ENUM_CONST(0x4)
> +#define PDP_RDMA_D_POOLING_KERNEL_CFG_0_KERNEL_WIDTH_KERNEL_WIDTH_6			_MK_ENUM_CONST(0x5)
> +#define PDP_RDMA_D_POOLING_KERNEL_CFG_0_KERNEL_WIDTH_KERNEL_WIDTH_7			_MK_ENUM_CONST(0x6)
> +#define PDP_RDMA_D_POOLING_KERNEL_CFG_0_KERNEL_WIDTH_KERNEL_WIDTH_8			_MK_ENUM_CONST(0x7)
> +#define PDP_RDMA_D_POOLING_KERNEL_CFG_0_KERNEL_STRIDE_WIDTH_SHIFT			_MK_SHIFT_CONST(4)
> +#define PDP_RDMA_D_POOLING_KERNEL_CFG_0_KERNEL_STRIDE_WIDTH_FIELD			_MK_FIELD_CONST(0xf, PDP_RDMA_D_POOLING_KERNEL_CFG_0_KERNEL_STRIDE_WIDTH_SHIFT)
> +
> +
> +// Register PDP_RDMA_D_POOLING_PADDING_CFG_0
> +#define PDP_RDMA_D_POOLING_PADDING_CFG_0			_MK_ADDR_CONST(0xa03c)
> +#define PDP_RDMA_D_POOLING_PADDING_CFG_0_PAD_WIDTH_SHIFT			_MK_SHIFT_CONST(0)
> +#define PDP_RDMA_D_POOLING_PADDING_CFG_0_PAD_WIDTH_FIELD			_MK_FIELD_CONST(0xf, PDP_RDMA_D_POOLING_PADDING_CFG_0_PAD_WIDTH_SHIFT)
> +
> +
> +// Register PDP_RDMA_D_PARTIAL_WIDTH_IN_0
> +#define PDP_RDMA_D_PARTIAL_WIDTH_IN_0			_MK_ADDR_CONST(0xa040)
> +#define PDP_RDMA_D_PARTIAL_WIDTH_IN_0_PARTIAL_WIDTH_IN_FIRST_SHIFT			_MK_SHIFT_CONST(0)
> +#define PDP_RDMA_D_PARTIAL_WIDTH_IN_0_PARTIAL_WIDTH_IN_FIRST_FIELD			_MK_FIELD_CONST(0x3ff, PDP_RDMA_D_PARTIAL_WIDTH_IN_0_PARTIAL_WIDTH_IN_FIRST_SHIFT)
> +#define PDP_RDMA_D_PARTIAL_WIDTH_IN_0_PARTIAL_WIDTH_IN_LAST_SHIFT			_MK_SHIFT_CONST(10)
> +#define PDP_RDMA_D_PARTIAL_WIDTH_IN_0_PARTIAL_WIDTH_IN_LAST_FIELD			_MK_FIELD_CONST(0x3ff, PDP_RDMA_D_PARTIAL_WIDTH_IN_0_PARTIAL_WIDTH_IN_LAST_SHIFT)
> +#define PDP_RDMA_D_PARTIAL_WIDTH_IN_0_PARTIAL_WIDTH_IN_MID_SHIFT			_MK_SHIFT_CONST(20)
> +#define PDP_RDMA_D_PARTIAL_WIDTH_IN_0_PARTIAL_WIDTH_IN_MID_FIELD			_MK_FIELD_CONST(0x3ff, PDP_RDMA_D_PARTIAL_WIDTH_IN_0_PARTIAL_WIDTH_IN_MID_SHIFT)
> +
> +
> +// Register PDP_RDMA_D_PERF_ENABLE_0
> +#define PDP_RDMA_D_PERF_ENABLE_0			_MK_ADDR_CONST(0xa044)
> +#define PDP_RDMA_D_PERF_ENABLE_0_DMA_EN_SHIFT			_MK_SHIFT_CONST(0)
> +#define PDP_RDMA_D_PERF_ENABLE_0_DMA_EN_FIELD			_MK_FIELD_CONST(0x1, PDP_RDMA_D_PERF_ENABLE_0_DMA_EN_SHIFT)
> +#define PDP_RDMA_D_PERF_ENABLE_0_DMA_EN_DISABLE			_MK_ENUM_CONST(0x0)
> +#define PDP_RDMA_D_PERF_ENABLE_0_DMA_EN_ENABLE			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register PDP_RDMA_D_PERF_READ_STALL_0
> +#define PDP_RDMA_D_PERF_READ_STALL_0			_MK_ADDR_CONST(0xa048)
> +#define PDP_RDMA_D_PERF_READ_STALL_0_PERF_READ_STALL_SHIFT			_MK_SHIFT_CONST(0)
> +#define PDP_RDMA_D_PERF_READ_STALL_0_PERF_READ_STALL_FIELD			_MK_FIELD_CONST(0xffffffff, PDP_RDMA_D_PERF_READ_STALL_0_PERF_READ_STALL_SHIFT)
> +
> +
> +// Register PDP_RDMA_D_CYA_0
> +#define PDP_RDMA_D_CYA_0			_MK_ADDR_CONST(0xa04c)
> +#define PDP_RDMA_D_CYA_0_CYA_SHIFT			_MK_SHIFT_CONST(0)
> +#define PDP_RDMA_D_CYA_0_CYA_FIELD			_MK_FIELD_CONST(0xffffffff, PDP_RDMA_D_CYA_0_CYA_SHIFT)
> +
> +
> +
> +// To satisfy various compilers and platforms,
> +// we let users control the types and syntax of certain constants, using macros.
> +#ifndef _MK_SHIFT_CONST
> +  #define _MK_SHIFT_CONST(_constant_) _constant_
> +#endif
> +#ifndef _MK_MASK_CONST
> +  #define _MK_MASK_CONST(_constant_) _constant_
> +#endif
> +#ifndef _MK_ENUM_CONST
> +  #define _MK_ENUM_CONST(_constant_) (_constant_ ## UL)
> +#endif
> +#ifndef _MK_ADDR_CONST
> +  #define _MK_ADDR_CONST(_constant_) _constant_
> +#endif
> +#ifndef _MK_FIELD_CONST
> +  #define _MK_FIELD_CONST(_mask_, _shift_) (_MK_MASK_CONST(_mask_) << _MK_SHIFT_CONST(_shift_))
> +#endif
> +
> +
> +// Register PDP_S_STATUS_0
> +#define PDP_S_STATUS_0			_MK_ADDR_CONST(0xb000)
> +#define PDP_S_STATUS_0_STATUS_0_SHIFT			_MK_SHIFT_CONST(0)
> +#define PDP_S_STATUS_0_STATUS_0_FIELD			_MK_FIELD_CONST(0x3, PDP_S_STATUS_0_STATUS_0_SHIFT)
> +#define PDP_S_STATUS_0_STATUS_0_IDLE			_MK_ENUM_CONST(0x0)
> +#define PDP_S_STATUS_0_STATUS_0_RUNNING			_MK_ENUM_CONST(0x1)
> +#define PDP_S_STATUS_0_STATUS_0_PENDING			_MK_ENUM_CONST(0x2)
> +#define PDP_S_STATUS_0_STATUS_1_SHIFT			_MK_SHIFT_CONST(16)
> +#define PDP_S_STATUS_0_STATUS_1_FIELD			_MK_FIELD_CONST(0x3, PDP_S_STATUS_0_STATUS_1_SHIFT)
> +#define PDP_S_STATUS_0_STATUS_1_IDLE			_MK_ENUM_CONST(0x0)
> +#define PDP_S_STATUS_0_STATUS_1_RUNNING			_MK_ENUM_CONST(0x1)
> +#define PDP_S_STATUS_0_STATUS_1_PENDING			_MK_ENUM_CONST(0x2)
> +
> +
> +// Register PDP_S_POINTER_0
> +#define PDP_S_POINTER_0			_MK_ADDR_CONST(0xb004)
> +#define PDP_S_POINTER_0_PRODUCER_SHIFT			_MK_SHIFT_CONST(0)
> +#define PDP_S_POINTER_0_PRODUCER_FIELD			_MK_FIELD_CONST(0x1, PDP_S_POINTER_0_PRODUCER_SHIFT)
> +#define PDP_S_POINTER_0_PRODUCER_GROUP_0			_MK_ENUM_CONST(0x0)
> +#define PDP_S_POINTER_0_PRODUCER_GROUP_1			_MK_ENUM_CONST(0x1)
> +#define PDP_S_POINTER_0_CONSUMER_SHIFT			_MK_SHIFT_CONST(16)
> +#define PDP_S_POINTER_0_CONSUMER_FIELD			_MK_FIELD_CONST(0x1, PDP_S_POINTER_0_CONSUMER_SHIFT)
> +#define PDP_S_POINTER_0_CONSUMER_GROUP_0			_MK_ENUM_CONST(0x0)
> +#define PDP_S_POINTER_0_CONSUMER_GROUP_1			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register PDP_D_OP_ENABLE_0
> +#define PDP_D_OP_ENABLE_0			_MK_ADDR_CONST(0xb008)
> +#define PDP_D_OP_ENABLE_0_OP_EN_SHIFT			_MK_SHIFT_CONST(0)
> +#define PDP_D_OP_ENABLE_0_OP_EN_FIELD			_MK_FIELD_CONST(0x1, PDP_D_OP_ENABLE_0_OP_EN_SHIFT)
> +#define PDP_D_OP_ENABLE_0_OP_EN_DISABLE			_MK_ENUM_CONST(0x0)
> +#define PDP_D_OP_ENABLE_0_OP_EN_ENABLE			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register PDP_D_DATA_CUBE_IN_WIDTH_0
> +#define PDP_D_DATA_CUBE_IN_WIDTH_0			_MK_ADDR_CONST(0xb00c)
> +#define PDP_D_DATA_CUBE_IN_WIDTH_0_CUBE_IN_WIDTH_SHIFT			_MK_SHIFT_CONST(0)
> +#define PDP_D_DATA_CUBE_IN_WIDTH_0_CUBE_IN_WIDTH_FIELD			_MK_FIELD_CONST(0x1fff, PDP_D_DATA_CUBE_IN_WIDTH_0_CUBE_IN_WIDTH_SHIFT)
> +
> +
> +// Register PDP_D_DATA_CUBE_IN_HEIGHT_0
> +#define PDP_D_DATA_CUBE_IN_HEIGHT_0			_MK_ADDR_CONST(0xb010)
> +#define PDP_D_DATA_CUBE_IN_HEIGHT_0_CUBE_IN_HEIGHT_SHIFT			_MK_SHIFT_CONST(0)
> +#define PDP_D_DATA_CUBE_IN_HEIGHT_0_CUBE_IN_HEIGHT_FIELD			_MK_FIELD_CONST(0x1fff, PDP_D_DATA_CUBE_IN_HEIGHT_0_CUBE_IN_HEIGHT_SHIFT)
> +
> +
> +// Register PDP_D_DATA_CUBE_IN_CHANNEL_0
> +#define PDP_D_DATA_CUBE_IN_CHANNEL_0			_MK_ADDR_CONST(0xb014)
> +#define PDP_D_DATA_CUBE_IN_CHANNEL_0_CUBE_IN_CHANNEL_SHIFT			_MK_SHIFT_CONST(0)
> +#define PDP_D_DATA_CUBE_IN_CHANNEL_0_CUBE_IN_CHANNEL_FIELD			_MK_FIELD_CONST(0x1fff, PDP_D_DATA_CUBE_IN_CHANNEL_0_CUBE_IN_CHANNEL_SHIFT)
> +
> +
> +// Register PDP_D_DATA_CUBE_OUT_WIDTH_0
> +#define PDP_D_DATA_CUBE_OUT_WIDTH_0			_MK_ADDR_CONST(0xb018)
> +#define PDP_D_DATA_CUBE_OUT_WIDTH_0_CUBE_OUT_WIDTH_SHIFT			_MK_SHIFT_CONST(0)
> +#define PDP_D_DATA_CUBE_OUT_WIDTH_0_CUBE_OUT_WIDTH_FIELD			_MK_FIELD_CONST(0x1fff, PDP_D_DATA_CUBE_OUT_WIDTH_0_CUBE_OUT_WIDTH_SHIFT)
> +
> +
> +// Register PDP_D_DATA_CUBE_OUT_HEIGHT_0
> +#define PDP_D_DATA_CUBE_OUT_HEIGHT_0			_MK_ADDR_CONST(0xb01c)
> +#define PDP_D_DATA_CUBE_OUT_HEIGHT_0_CUBE_OUT_HEIGHT_SHIFT			_MK_SHIFT_CONST(0)
> +#define PDP_D_DATA_CUBE_OUT_HEIGHT_0_CUBE_OUT_HEIGHT_FIELD			_MK_FIELD_CONST(0x1fff, PDP_D_DATA_CUBE_OUT_HEIGHT_0_CUBE_OUT_HEIGHT_SHIFT)
> +
> +
> +// Register PDP_D_DATA_CUBE_OUT_CHANNEL_0
> +#define PDP_D_DATA_CUBE_OUT_CHANNEL_0			_MK_ADDR_CONST(0xb020)
> +#define PDP_D_DATA_CUBE_OUT_CHANNEL_0_CUBE_OUT_CHANNEL_SHIFT			_MK_SHIFT_CONST(0)
> +#define PDP_D_DATA_CUBE_OUT_CHANNEL_0_CUBE_OUT_CHANNEL_FIELD			_MK_FIELD_CONST(0x1fff, PDP_D_DATA_CUBE_OUT_CHANNEL_0_CUBE_OUT_CHANNEL_SHIFT)
> +
> +
> +// Register PDP_D_OPERATION_MODE_CFG_0
> +#define PDP_D_OPERATION_MODE_CFG_0			_MK_ADDR_CONST(0xb024)
> +#define PDP_D_OPERATION_MODE_CFG_0_POOLING_METHOD_SHIFT			_MK_SHIFT_CONST(0)
> +#define PDP_D_OPERATION_MODE_CFG_0_POOLING_METHOD_FIELD			_MK_FIELD_CONST(0x3, PDP_D_OPERATION_MODE_CFG_0_POOLING_METHOD_SHIFT)
> +#define PDP_D_OPERATION_MODE_CFG_0_POOLING_METHOD_POOLING_METHOD_AVERAGE			_MK_ENUM_CONST(0x0)
> +#define PDP_D_OPERATION_MODE_CFG_0_POOLING_METHOD_POOLING_METHOD_MAX			_MK_ENUM_CONST(0x1)
> +#define PDP_D_OPERATION_MODE_CFG_0_POOLING_METHOD_POOLING_METHOD_MIN			_MK_ENUM_CONST(0x2)
> +#define PDP_D_OPERATION_MODE_CFG_0_FLYING_MODE_SHIFT			_MK_SHIFT_CONST(4)
> +#define PDP_D_OPERATION_MODE_CFG_0_FLYING_MODE_FIELD			_MK_FIELD_CONST(0x1, PDP_D_OPERATION_MODE_CFG_0_FLYING_MODE_SHIFT)
> +#define PDP_D_OPERATION_MODE_CFG_0_FLYING_MODE_ON_FLYING			_MK_ENUM_CONST(0x0)
> +#define PDP_D_OPERATION_MODE_CFG_0_FLYING_MODE_OFF_FLYING			_MK_ENUM_CONST(0x1)
> +#define PDP_D_OPERATION_MODE_CFG_0_SPLIT_NUM_SHIFT			_MK_SHIFT_CONST(8)
> +#define PDP_D_OPERATION_MODE_CFG_0_SPLIT_NUM_FIELD			_MK_FIELD_CONST(0xff, PDP_D_OPERATION_MODE_CFG_0_SPLIT_NUM_SHIFT)
> +
> +
> +// Register PDP_D_NAN_FLUSH_TO_ZERO_0
> +#define PDP_D_NAN_FLUSH_TO_ZERO_0			_MK_ADDR_CONST(0xb028)
> +#define PDP_D_NAN_FLUSH_TO_ZERO_0_NAN_TO_ZERO_SHIFT			_MK_SHIFT_CONST(0)
> +#define PDP_D_NAN_FLUSH_TO_ZERO_0_NAN_TO_ZERO_FIELD			_MK_FIELD_CONST(0x1, PDP_D_NAN_FLUSH_TO_ZERO_0_NAN_TO_ZERO_SHIFT)
> +#define PDP_D_NAN_FLUSH_TO_ZERO_0_NAN_TO_ZERO_DISABLE			_MK_ENUM_CONST(0x0)
> +#define PDP_D_NAN_FLUSH_TO_ZERO_0_NAN_TO_ZERO_ENABLE			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register PDP_D_PARTIAL_WIDTH_IN_0
> +#define PDP_D_PARTIAL_WIDTH_IN_0			_MK_ADDR_CONST(0xb02c)
> +#define PDP_D_PARTIAL_WIDTH_IN_0_PARTIAL_WIDTH_IN_FIRST_SHIFT			_MK_SHIFT_CONST(0)
> +#define PDP_D_PARTIAL_WIDTH_IN_0_PARTIAL_WIDTH_IN_FIRST_FIELD			_MK_FIELD_CONST(0x3ff, PDP_D_PARTIAL_WIDTH_IN_0_PARTIAL_WIDTH_IN_FIRST_SHIFT)
> +#define PDP_D_PARTIAL_WIDTH_IN_0_PARTIAL_WIDTH_IN_LAST_SHIFT			_MK_SHIFT_CONST(10)
> +#define PDP_D_PARTIAL_WIDTH_IN_0_PARTIAL_WIDTH_IN_LAST_FIELD			_MK_FIELD_CONST(0x3ff, PDP_D_PARTIAL_WIDTH_IN_0_PARTIAL_WIDTH_IN_LAST_SHIFT)
> +#define PDP_D_PARTIAL_WIDTH_IN_0_PARTIAL_WIDTH_IN_MID_SHIFT			_MK_SHIFT_CONST(20)
> +#define PDP_D_PARTIAL_WIDTH_IN_0_PARTIAL_WIDTH_IN_MID_FIELD			_MK_FIELD_CONST(0x3ff, PDP_D_PARTIAL_WIDTH_IN_0_PARTIAL_WIDTH_IN_MID_SHIFT)
> +
> +
> +// Register PDP_D_PARTIAL_WIDTH_OUT_0
> +#define PDP_D_PARTIAL_WIDTH_OUT_0			_MK_ADDR_CONST(0xb030)
> +#define PDP_D_PARTIAL_WIDTH_OUT_0_PARTIAL_WIDTH_OUT_FIRST_SHIFT			_MK_SHIFT_CONST(0)
> +#define PDP_D_PARTIAL_WIDTH_OUT_0_PARTIAL_WIDTH_OUT_FIRST_FIELD			_MK_FIELD_CONST(0x3ff, PDP_D_PARTIAL_WIDTH_OUT_0_PARTIAL_WIDTH_OUT_FIRST_SHIFT)
> +#define PDP_D_PARTIAL_WIDTH_OUT_0_PARTIAL_WIDTH_OUT_LAST_SHIFT			_MK_SHIFT_CONST(10)
> +#define PDP_D_PARTIAL_WIDTH_OUT_0_PARTIAL_WIDTH_OUT_LAST_FIELD			_MK_FIELD_CONST(0x3ff, PDP_D_PARTIAL_WIDTH_OUT_0_PARTIAL_WIDTH_OUT_LAST_SHIFT)
> +#define PDP_D_PARTIAL_WIDTH_OUT_0_PARTIAL_WIDTH_OUT_MID_SHIFT			_MK_SHIFT_CONST(20)
> +#define PDP_D_PARTIAL_WIDTH_OUT_0_PARTIAL_WIDTH_OUT_MID_FIELD			_MK_FIELD_CONST(0x3ff, PDP_D_PARTIAL_WIDTH_OUT_0_PARTIAL_WIDTH_OUT_MID_SHIFT)
> +
> +
> +// Register PDP_D_POOLING_KERNEL_CFG_0
> +#define PDP_D_POOLING_KERNEL_CFG_0			_MK_ADDR_CONST(0xb034)
> +#define PDP_D_POOLING_KERNEL_CFG_0_KERNEL_WIDTH_SHIFT			_MK_SHIFT_CONST(0)
> +#define PDP_D_POOLING_KERNEL_CFG_0_KERNEL_WIDTH_FIELD			_MK_FIELD_CONST(0xf, PDP_D_POOLING_KERNEL_CFG_0_KERNEL_WIDTH_SHIFT)
> +#define PDP_D_POOLING_KERNEL_CFG_0_KERNEL_WIDTH_KERNEL_WIDTH_1			_MK_ENUM_CONST(0x0)
> +#define PDP_D_POOLING_KERNEL_CFG_0_KERNEL_WIDTH_KERNEL_WIDTH_2			_MK_ENUM_CONST(0x1)
> +#define PDP_D_POOLING_KERNEL_CFG_0_KERNEL_WIDTH_KERNEL_WIDTH_3			_MK_ENUM_CONST(0x2)
> +#define PDP_D_POOLING_KERNEL_CFG_0_KERNEL_WIDTH_KERNEL_WIDTH_4			_MK_ENUM_CONST(0x3)
> +#define PDP_D_POOLING_KERNEL_CFG_0_KERNEL_WIDTH_KERNEL_WIDTH_5			_MK_ENUM_CONST(0x4)
> +#define PDP_D_POOLING_KERNEL_CFG_0_KERNEL_WIDTH_KERNEL_WIDTH_6			_MK_ENUM_CONST(0x5)
> +#define PDP_D_POOLING_KERNEL_CFG_0_KERNEL_WIDTH_KERNEL_WIDTH_7			_MK_ENUM_CONST(0x6)
> +#define PDP_D_POOLING_KERNEL_CFG_0_KERNEL_WIDTH_KERNEL_WIDTH_8			_MK_ENUM_CONST(0x7)
> +#define PDP_D_POOLING_KERNEL_CFG_0_KERNEL_HEIGHT_SHIFT			_MK_SHIFT_CONST(8)
> +#define PDP_D_POOLING_KERNEL_CFG_0_KERNEL_HEIGHT_FIELD			_MK_FIELD_CONST(0xf, PDP_D_POOLING_KERNEL_CFG_0_KERNEL_HEIGHT_SHIFT)
> +#define PDP_D_POOLING_KERNEL_CFG_0_KERNEL_HEIGHT_KERNEL_HEIGHT_1			_MK_ENUM_CONST(0x0)
> +#define PDP_D_POOLING_KERNEL_CFG_0_KERNEL_HEIGHT_KERNEL_HEIGHT_2			_MK_ENUM_CONST(0x1)
> +#define PDP_D_POOLING_KERNEL_CFG_0_KERNEL_HEIGHT_KERNEL_HEIGHT_3			_MK_ENUM_CONST(0x2)
> +#define PDP_D_POOLING_KERNEL_CFG_0_KERNEL_HEIGHT_KERNEL_HEIGHT_4			_MK_ENUM_CONST(0x3)
> +#define PDP_D_POOLING_KERNEL_CFG_0_KERNEL_HEIGHT_KERNEL_HEIGHT_5			_MK_ENUM_CONST(0x4)
> +#define PDP_D_POOLING_KERNEL_CFG_0_KERNEL_HEIGHT_KERNEL_HEIGHT_6			_MK_ENUM_CONST(0x5)
> +#define PDP_D_POOLING_KERNEL_CFG_0_KERNEL_HEIGHT_KERNEL_HEIGHT_7			_MK_ENUM_CONST(0x6)
> +#define PDP_D_POOLING_KERNEL_CFG_0_KERNEL_HEIGHT_KERNEL_HEIGHT_8			_MK_ENUM_CONST(0x7)
> +#define PDP_D_POOLING_KERNEL_CFG_0_KERNEL_STRIDE_WIDTH_SHIFT			_MK_SHIFT_CONST(16)
> +#define PDP_D_POOLING_KERNEL_CFG_0_KERNEL_STRIDE_WIDTH_FIELD			_MK_FIELD_CONST(0xf, PDP_D_POOLING_KERNEL_CFG_0_KERNEL_STRIDE_WIDTH_SHIFT)
> +#define PDP_D_POOLING_KERNEL_CFG_0_KERNEL_STRIDE_HEIGHT_SHIFT			_MK_SHIFT_CONST(20)
> +#define PDP_D_POOLING_KERNEL_CFG_0_KERNEL_STRIDE_HEIGHT_FIELD			_MK_FIELD_CONST(0xf, PDP_D_POOLING_KERNEL_CFG_0_KERNEL_STRIDE_HEIGHT_SHIFT)
> +
> +
> +// Register PDP_D_RECIP_KERNEL_WIDTH_0
> +#define PDP_D_RECIP_KERNEL_WIDTH_0			_MK_ADDR_CONST(0xb038)
> +#define PDP_D_RECIP_KERNEL_WIDTH_0_RECIP_KERNEL_WIDTH_SHIFT			_MK_SHIFT_CONST(0)
> +#define PDP_D_RECIP_KERNEL_WIDTH_0_RECIP_KERNEL_WIDTH_FIELD			_MK_FIELD_CONST(0x1ffff, PDP_D_RECIP_KERNEL_WIDTH_0_RECIP_KERNEL_WIDTH_SHIFT)
> +
> +
> +// Register PDP_D_RECIP_KERNEL_HEIGHT_0
> +#define PDP_D_RECIP_KERNEL_HEIGHT_0			_MK_ADDR_CONST(0xb03c)
> +#define PDP_D_RECIP_KERNEL_HEIGHT_0_RECIP_KERNEL_HEIGHT_SHIFT			_MK_SHIFT_CONST(0)
> +#define PDP_D_RECIP_KERNEL_HEIGHT_0_RECIP_KERNEL_HEIGHT_FIELD			_MK_FIELD_CONST(0x1ffff, PDP_D_RECIP_KERNEL_HEIGHT_0_RECIP_KERNEL_HEIGHT_SHIFT)
> +
> +
> +// Register PDP_D_POOLING_PADDING_CFG_0
> +#define PDP_D_POOLING_PADDING_CFG_0			_MK_ADDR_CONST(0xb040)
> +#define PDP_D_POOLING_PADDING_CFG_0_PAD_LEFT_SHIFT			_MK_SHIFT_CONST(0)
> +#define PDP_D_POOLING_PADDING_CFG_0_PAD_LEFT_FIELD			_MK_FIELD_CONST(0x7, PDP_D_POOLING_PADDING_CFG_0_PAD_LEFT_SHIFT)
> +#define PDP_D_POOLING_PADDING_CFG_0_PAD_TOP_SHIFT			_MK_SHIFT_CONST(4)
> +#define PDP_D_POOLING_PADDING_CFG_0_PAD_TOP_FIELD			_MK_FIELD_CONST(0x7, PDP_D_POOLING_PADDING_CFG_0_PAD_TOP_SHIFT)
> +#define PDP_D_POOLING_PADDING_CFG_0_PAD_RIGHT_SHIFT			_MK_SHIFT_CONST(8)
> +#define PDP_D_POOLING_PADDING_CFG_0_PAD_RIGHT_FIELD			_MK_FIELD_CONST(0x7, PDP_D_POOLING_PADDING_CFG_0_PAD_RIGHT_SHIFT)
> +#define PDP_D_POOLING_PADDING_CFG_0_PAD_BOTTOM_SHIFT			_MK_SHIFT_CONST(12)
> +#define PDP_D_POOLING_PADDING_CFG_0_PAD_BOTTOM_FIELD			_MK_FIELD_CONST(0x7, PDP_D_POOLING_PADDING_CFG_0_PAD_BOTTOM_SHIFT)
> +
> +
> +// Register PDP_D_POOLING_PADDING_VALUE_1_CFG_0
> +#define PDP_D_POOLING_PADDING_VALUE_1_CFG_0			_MK_ADDR_CONST(0xb044)
> +#define PDP_D_POOLING_PADDING_VALUE_1_CFG_0_PAD_VALUE_1X_SHIFT			_MK_SHIFT_CONST(0)
> +#define PDP_D_POOLING_PADDING_VALUE_1_CFG_0_PAD_VALUE_1X_FIELD			_MK_FIELD_CONST(0x7ffff, PDP_D_POOLING_PADDING_VALUE_1_CFG_0_PAD_VALUE_1X_SHIFT)
> +
> +
> +// Register PDP_D_POOLING_PADDING_VALUE_2_CFG_0
> +#define PDP_D_POOLING_PADDING_VALUE_2_CFG_0			_MK_ADDR_CONST(0xb048)
> +#define PDP_D_POOLING_PADDING_VALUE_2_CFG_0_PAD_VALUE_2X_SHIFT			_MK_SHIFT_CONST(0)
> +#define PDP_D_POOLING_PADDING_VALUE_2_CFG_0_PAD_VALUE_2X_FIELD			_MK_FIELD_CONST(0x7ffff, PDP_D_POOLING_PADDING_VALUE_2_CFG_0_PAD_VALUE_2X_SHIFT)
> +
> +
> +// Register PDP_D_POOLING_PADDING_VALUE_3_CFG_0
> +#define PDP_D_POOLING_PADDING_VALUE_3_CFG_0			_MK_ADDR_CONST(0xb04c)
> +#define PDP_D_POOLING_PADDING_VALUE_3_CFG_0_PAD_VALUE_3X_SHIFT			_MK_SHIFT_CONST(0)
> +#define PDP_D_POOLING_PADDING_VALUE_3_CFG_0_PAD_VALUE_3X_FIELD			_MK_FIELD_CONST(0x7ffff, PDP_D_POOLING_PADDING_VALUE_3_CFG_0_PAD_VALUE_3X_SHIFT)
> +
> +
> +// Register PDP_D_POOLING_PADDING_VALUE_4_CFG_0
> +#define PDP_D_POOLING_PADDING_VALUE_4_CFG_0			_MK_ADDR_CONST(0xb050)
> +#define PDP_D_POOLING_PADDING_VALUE_4_CFG_0_PAD_VALUE_4X_SHIFT			_MK_SHIFT_CONST(0)
> +#define PDP_D_POOLING_PADDING_VALUE_4_CFG_0_PAD_VALUE_4X_FIELD			_MK_FIELD_CONST(0x7ffff, PDP_D_POOLING_PADDING_VALUE_4_CFG_0_PAD_VALUE_4X_SHIFT)
> +
> +
> +// Register PDP_D_POOLING_PADDING_VALUE_5_CFG_0
> +#define PDP_D_POOLING_PADDING_VALUE_5_CFG_0			_MK_ADDR_CONST(0xb054)
> +#define PDP_D_POOLING_PADDING_VALUE_5_CFG_0_PAD_VALUE_5X_SHIFT			_MK_SHIFT_CONST(0)
> +#define PDP_D_POOLING_PADDING_VALUE_5_CFG_0_PAD_VALUE_5X_FIELD			_MK_FIELD_CONST(0x7ffff, PDP_D_POOLING_PADDING_VALUE_5_CFG_0_PAD_VALUE_5X_SHIFT)
> +
> +
> +// Register PDP_D_POOLING_PADDING_VALUE_6_CFG_0
> +#define PDP_D_POOLING_PADDING_VALUE_6_CFG_0			_MK_ADDR_CONST(0xb058)
> +#define PDP_D_POOLING_PADDING_VALUE_6_CFG_0_PAD_VALUE_6X_SHIFT			_MK_SHIFT_CONST(0)
> +#define PDP_D_POOLING_PADDING_VALUE_6_CFG_0_PAD_VALUE_6X_FIELD			_MK_FIELD_CONST(0x7ffff, PDP_D_POOLING_PADDING_VALUE_6_CFG_0_PAD_VALUE_6X_SHIFT)
> +
> +
> +// Register PDP_D_POOLING_PADDING_VALUE_7_CFG_0
> +#define PDP_D_POOLING_PADDING_VALUE_7_CFG_0			_MK_ADDR_CONST(0xb05c)
> +#define PDP_D_POOLING_PADDING_VALUE_7_CFG_0_PAD_VALUE_7X_SHIFT			_MK_SHIFT_CONST(0)
> +#define PDP_D_POOLING_PADDING_VALUE_7_CFG_0_PAD_VALUE_7X_FIELD			_MK_FIELD_CONST(0x7ffff, PDP_D_POOLING_PADDING_VALUE_7_CFG_0_PAD_VALUE_7X_SHIFT)
> +
> +
> +// Register PDP_D_SRC_BASE_ADDR_LOW_0
> +#define PDP_D_SRC_BASE_ADDR_LOW_0			_MK_ADDR_CONST(0xb060)
> +#define PDP_D_SRC_BASE_ADDR_LOW_0_SRC_BASE_ADDR_LOW_SHIFT			_MK_SHIFT_CONST(0)
> +#define PDP_D_SRC_BASE_ADDR_LOW_0_SRC_BASE_ADDR_LOW_FIELD			_MK_FIELD_CONST(0xffffffff, PDP_D_SRC_BASE_ADDR_LOW_0_SRC_BASE_ADDR_LOW_SHIFT)
> +
> +
> +// Register PDP_D_SRC_BASE_ADDR_HIGH_0
> +#define PDP_D_SRC_BASE_ADDR_HIGH_0			_MK_ADDR_CONST(0xb064)
> +#define PDP_D_SRC_BASE_ADDR_HIGH_0_SRC_BASE_ADDR_HIGH_SHIFT			_MK_SHIFT_CONST(0)
> +#define PDP_D_SRC_BASE_ADDR_HIGH_0_SRC_BASE_ADDR_HIGH_FIELD			_MK_FIELD_CONST(0xffffffff, PDP_D_SRC_BASE_ADDR_HIGH_0_SRC_BASE_ADDR_HIGH_SHIFT)
> +
> +
> +// Register PDP_D_SRC_LINE_STRIDE_0
> +#define PDP_D_SRC_LINE_STRIDE_0			_MK_ADDR_CONST(0xb068)
> +#define PDP_D_SRC_LINE_STRIDE_0_SRC_LINE_STRIDE_SHIFT			_MK_SHIFT_CONST(0)
> +#define PDP_D_SRC_LINE_STRIDE_0_SRC_LINE_STRIDE_FIELD			_MK_FIELD_CONST(0xffffffff, PDP_D_SRC_LINE_STRIDE_0_SRC_LINE_STRIDE_SHIFT)
> +
> +
> +// Register PDP_D_SRC_SURFACE_STRIDE_0
> +#define PDP_D_SRC_SURFACE_STRIDE_0			_MK_ADDR_CONST(0xb06c)
> +#define PDP_D_SRC_SURFACE_STRIDE_0_SRC_SURFACE_STRIDE_SHIFT			_MK_SHIFT_CONST(0)
> +#define PDP_D_SRC_SURFACE_STRIDE_0_SRC_SURFACE_STRIDE_FIELD			_MK_FIELD_CONST(0xffffffff, PDP_D_SRC_SURFACE_STRIDE_0_SRC_SURFACE_STRIDE_SHIFT)
> +
> +
> +// Register PDP_D_DST_BASE_ADDR_LOW_0
> +#define PDP_D_DST_BASE_ADDR_LOW_0			_MK_ADDR_CONST(0xb070)
> +#define PDP_D_DST_BASE_ADDR_LOW_0_DST_BASE_ADDR_LOW_SHIFT			_MK_SHIFT_CONST(0)
> +#define PDP_D_DST_BASE_ADDR_LOW_0_DST_BASE_ADDR_LOW_FIELD			_MK_FIELD_CONST(0xffffffff, PDP_D_DST_BASE_ADDR_LOW_0_DST_BASE_ADDR_LOW_SHIFT)
> +
> +
> +// Register PDP_D_DST_BASE_ADDR_HIGH_0
> +#define PDP_D_DST_BASE_ADDR_HIGH_0			_MK_ADDR_CONST(0xb074)
> +#define PDP_D_DST_BASE_ADDR_HIGH_0_DST_BASE_ADDR_HIGH_SHIFT			_MK_SHIFT_CONST(0)
> +#define PDP_D_DST_BASE_ADDR_HIGH_0_DST_BASE_ADDR_HIGH_FIELD			_MK_FIELD_CONST(0xffffffff, PDP_D_DST_BASE_ADDR_HIGH_0_DST_BASE_ADDR_HIGH_SHIFT)
> +
> +
> +// Register PDP_D_DST_LINE_STRIDE_0
> +#define PDP_D_DST_LINE_STRIDE_0			_MK_ADDR_CONST(0xb078)
> +#define PDP_D_DST_LINE_STRIDE_0_DST_LINE_STRIDE_SHIFT			_MK_SHIFT_CONST(0)
> +#define PDP_D_DST_LINE_STRIDE_0_DST_LINE_STRIDE_FIELD			_MK_FIELD_CONST(0xffffffff, PDP_D_DST_LINE_STRIDE_0_DST_LINE_STRIDE_SHIFT)
> +
> +
> +// Register PDP_D_DST_SURFACE_STRIDE_0
> +#define PDP_D_DST_SURFACE_STRIDE_0			_MK_ADDR_CONST(0xb07c)
> +#define PDP_D_DST_SURFACE_STRIDE_0_DST_SURFACE_STRIDE_SHIFT			_MK_SHIFT_CONST(0)
> +#define PDP_D_DST_SURFACE_STRIDE_0_DST_SURFACE_STRIDE_FIELD			_MK_FIELD_CONST(0xffffffff, PDP_D_DST_SURFACE_STRIDE_0_DST_SURFACE_STRIDE_SHIFT)
> +
> +
> +// Register PDP_D_DST_RAM_CFG_0
> +#define PDP_D_DST_RAM_CFG_0			_MK_ADDR_CONST(0xb080)
> +#define PDP_D_DST_RAM_CFG_0_DST_RAM_TYPE_SHIFT			_MK_SHIFT_CONST(0)
> +#define PDP_D_DST_RAM_CFG_0_DST_RAM_TYPE_FIELD			_MK_FIELD_CONST(0x1, PDP_D_DST_RAM_CFG_0_DST_RAM_TYPE_SHIFT)
> +#define PDP_D_DST_RAM_CFG_0_DST_RAM_TYPE_CV			_MK_ENUM_CONST(0x0)
> +#define PDP_D_DST_RAM_CFG_0_DST_RAM_TYPE_MC			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register PDP_D_DATA_FORMAT_0
> +#define PDP_D_DATA_FORMAT_0			_MK_ADDR_CONST(0xb084)
> +#define PDP_D_DATA_FORMAT_0_INPUT_DATA_SHIFT			_MK_SHIFT_CONST(0)
> +#define PDP_D_DATA_FORMAT_0_INPUT_DATA_FIELD			_MK_FIELD_CONST(0x3, PDP_D_DATA_FORMAT_0_INPUT_DATA_SHIFT)
> +#define PDP_D_DATA_FORMAT_0_INPUT_DATA_INT8			_MK_ENUM_CONST(0x0)
> +#define PDP_D_DATA_FORMAT_0_INPUT_DATA_INT16			_MK_ENUM_CONST(0x1)
> +#define PDP_D_DATA_FORMAT_0_INPUT_DATA_FP16			_MK_ENUM_CONST(0x2)
> +
> +
> +// Register PDP_D_INF_INPUT_NUM_0
> +#define PDP_D_INF_INPUT_NUM_0			_MK_ADDR_CONST(0xb088)
> +#define PDP_D_INF_INPUT_NUM_0_INF_INPUT_NUM_SHIFT			_MK_SHIFT_CONST(0)
> +#define PDP_D_INF_INPUT_NUM_0_INF_INPUT_NUM_FIELD			_MK_FIELD_CONST(0xffffffff, PDP_D_INF_INPUT_NUM_0_INF_INPUT_NUM_SHIFT)
> +
> +
> +// Register PDP_D_NAN_INPUT_NUM_0
> +#define PDP_D_NAN_INPUT_NUM_0			_MK_ADDR_CONST(0xb08c)
> +#define PDP_D_NAN_INPUT_NUM_0_NAN_INPUT_NUM_SHIFT			_MK_SHIFT_CONST(0)
> +#define PDP_D_NAN_INPUT_NUM_0_NAN_INPUT_NUM_FIELD			_MK_FIELD_CONST(0xffffffff, PDP_D_NAN_INPUT_NUM_0_NAN_INPUT_NUM_SHIFT)
> +
> +
> +// Register PDP_D_NAN_OUTPUT_NUM_0
> +#define PDP_D_NAN_OUTPUT_NUM_0			_MK_ADDR_CONST(0xb090)
> +#define PDP_D_NAN_OUTPUT_NUM_0_NAN_OUTPUT_NUM_SHIFT			_MK_SHIFT_CONST(0)
> +#define PDP_D_NAN_OUTPUT_NUM_0_NAN_OUTPUT_NUM_FIELD			_MK_FIELD_CONST(0xffffffff, PDP_D_NAN_OUTPUT_NUM_0_NAN_OUTPUT_NUM_SHIFT)
> +
> +
> +// Register PDP_D_PERF_ENABLE_0
> +#define PDP_D_PERF_ENABLE_0			_MK_ADDR_CONST(0xb094)
> +#define PDP_D_PERF_ENABLE_0_DMA_EN_SHIFT			_MK_SHIFT_CONST(0)
> +#define PDP_D_PERF_ENABLE_0_DMA_EN_FIELD			_MK_FIELD_CONST(0x1, PDP_D_PERF_ENABLE_0_DMA_EN_SHIFT)
> +#define PDP_D_PERF_ENABLE_0_DMA_EN_DISABLE			_MK_ENUM_CONST(0x0)
> +#define PDP_D_PERF_ENABLE_0_DMA_EN_ENABLE			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register PDP_D_PERF_WRITE_STALL_0
> +#define PDP_D_PERF_WRITE_STALL_0			_MK_ADDR_CONST(0xb098)
> +#define PDP_D_PERF_WRITE_STALL_0_PERF_WRITE_STALL_SHIFT			_MK_SHIFT_CONST(0)
> +#define PDP_D_PERF_WRITE_STALL_0_PERF_WRITE_STALL_FIELD			_MK_FIELD_CONST(0xffffffff, PDP_D_PERF_WRITE_STALL_0_PERF_WRITE_STALL_SHIFT)
> +
> +
> +// Register PDP_D_CYA_0
> +#define PDP_D_CYA_0			_MK_ADDR_CONST(0xb09c)
> +#define PDP_D_CYA_0_CYA_SHIFT			_MK_SHIFT_CONST(0)
> +#define PDP_D_CYA_0_CYA_FIELD			_MK_FIELD_CONST(0xffffffff, PDP_D_CYA_0_CYA_SHIFT)
> +
> +
> +
> +// To satisfy various compilers and platforms,
> +// we let users control the types and syntax of certain constants, using macros.
> +#ifndef _MK_SHIFT_CONST
> +  #define _MK_SHIFT_CONST(_constant_) _constant_
> +#endif
> +#ifndef _MK_MASK_CONST
> +  #define _MK_MASK_CONST(_constant_) _constant_
> +#endif
> +#ifndef _MK_ENUM_CONST
> +  #define _MK_ENUM_CONST(_constant_) (_constant_ ## UL)
> +#endif
> +#ifndef _MK_ADDR_CONST
> +  #define _MK_ADDR_CONST(_constant_) _constant_
> +#endif
> +#ifndef _MK_FIELD_CONST
> +  #define _MK_FIELD_CONST(_mask_, _shift_) (_MK_MASK_CONST(_mask_) << _MK_SHIFT_CONST(_shift_))
> +#endif
> +
> +
> +// Register CDP_RDMA_S_STATUS_0
> +#define CDP_RDMA_S_STATUS_0			_MK_ADDR_CONST(0xc000)
> +#define CDP_RDMA_S_STATUS_0_STATUS_0_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDP_RDMA_S_STATUS_0_STATUS_0_FIELD			_MK_FIELD_CONST(0x3, CDP_RDMA_S_STATUS_0_STATUS_0_SHIFT)
> +#define CDP_RDMA_S_STATUS_0_STATUS_0_IDLE			_MK_ENUM_CONST(0x0)
> +#define CDP_RDMA_S_STATUS_0_STATUS_0_RUNNING			_MK_ENUM_CONST(0x1)
> +#define CDP_RDMA_S_STATUS_0_STATUS_0_PENDING			_MK_ENUM_CONST(0x2)
> +#define CDP_RDMA_S_STATUS_0_STATUS_1_SHIFT			_MK_SHIFT_CONST(16)
> +#define CDP_RDMA_S_STATUS_0_STATUS_1_FIELD			_MK_FIELD_CONST(0x3, CDP_RDMA_S_STATUS_0_STATUS_1_SHIFT)
> +#define CDP_RDMA_S_STATUS_0_STATUS_1_IDLE			_MK_ENUM_CONST(0x0)
> +#define CDP_RDMA_S_STATUS_0_STATUS_1_RUNNING			_MK_ENUM_CONST(0x1)
> +#define CDP_RDMA_S_STATUS_0_STATUS_1_PENDING			_MK_ENUM_CONST(0x2)
> +
> +
> +// Register CDP_RDMA_S_POINTER_0
> +#define CDP_RDMA_S_POINTER_0			_MK_ADDR_CONST(0xc004)
> +#define CDP_RDMA_S_POINTER_0_PRODUCER_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDP_RDMA_S_POINTER_0_PRODUCER_FIELD			_MK_FIELD_CONST(0x1, CDP_RDMA_S_POINTER_0_PRODUCER_SHIFT)
> +#define CDP_RDMA_S_POINTER_0_PRODUCER_GROUP_0			_MK_ENUM_CONST(0x0)
> +#define CDP_RDMA_S_POINTER_0_PRODUCER_GROUP_1			_MK_ENUM_CONST(0x1)
> +#define CDP_RDMA_S_POINTER_0_CONSUMER_SHIFT			_MK_SHIFT_CONST(16)
> +#define CDP_RDMA_S_POINTER_0_CONSUMER_FIELD			_MK_FIELD_CONST(0x1, CDP_RDMA_S_POINTER_0_CONSUMER_SHIFT)
> +#define CDP_RDMA_S_POINTER_0_CONSUMER_GROUP_0			_MK_ENUM_CONST(0x0)
> +#define CDP_RDMA_S_POINTER_0_CONSUMER_GROUP_1			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register CDP_RDMA_D_OP_ENABLE_0
> +#define CDP_RDMA_D_OP_ENABLE_0			_MK_ADDR_CONST(0xc008)
> +#define CDP_RDMA_D_OP_ENABLE_0_OP_EN_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDP_RDMA_D_OP_ENABLE_0_OP_EN_FIELD			_MK_FIELD_CONST(0x1, CDP_RDMA_D_OP_ENABLE_0_OP_EN_SHIFT)
> +#define CDP_RDMA_D_OP_ENABLE_0_OP_EN_DISABLE			_MK_ENUM_CONST(0x0)
> +#define CDP_RDMA_D_OP_ENABLE_0_OP_EN_ENABLE			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register CDP_RDMA_D_DATA_CUBE_WIDTH_0
> +#define CDP_RDMA_D_DATA_CUBE_WIDTH_0			_MK_ADDR_CONST(0xc00c)
> +#define CDP_RDMA_D_DATA_CUBE_WIDTH_0_WIDTH_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDP_RDMA_D_DATA_CUBE_WIDTH_0_WIDTH_FIELD			_MK_FIELD_CONST(0x1fff, CDP_RDMA_D_DATA_CUBE_WIDTH_0_WIDTH_SHIFT)
> +
> +
> +// Register CDP_RDMA_D_DATA_CUBE_HEIGHT_0
> +#define CDP_RDMA_D_DATA_CUBE_HEIGHT_0			_MK_ADDR_CONST(0xc010)
> +#define CDP_RDMA_D_DATA_CUBE_HEIGHT_0_HEIGHT_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDP_RDMA_D_DATA_CUBE_HEIGHT_0_HEIGHT_FIELD			_MK_FIELD_CONST(0x1fff, CDP_RDMA_D_DATA_CUBE_HEIGHT_0_HEIGHT_SHIFT)
> +
> +
> +// Register CDP_RDMA_D_DATA_CUBE_CHANNEL_0
> +#define CDP_RDMA_D_DATA_CUBE_CHANNEL_0			_MK_ADDR_CONST(0xc014)
> +#define CDP_RDMA_D_DATA_CUBE_CHANNEL_0_CHANNEL_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDP_RDMA_D_DATA_CUBE_CHANNEL_0_CHANNEL_FIELD			_MK_FIELD_CONST(0x1fff, CDP_RDMA_D_DATA_CUBE_CHANNEL_0_CHANNEL_SHIFT)
> +
> +
> +// Register CDP_RDMA_D_SRC_BASE_ADDR_LOW_0
> +#define CDP_RDMA_D_SRC_BASE_ADDR_LOW_0			_MK_ADDR_CONST(0xc018)
> +#define CDP_RDMA_D_SRC_BASE_ADDR_LOW_0_SRC_BASE_ADDR_LOW_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDP_RDMA_D_SRC_BASE_ADDR_LOW_0_SRC_BASE_ADDR_LOW_FIELD			_MK_FIELD_CONST(0xffffffff, CDP_RDMA_D_SRC_BASE_ADDR_LOW_0_SRC_BASE_ADDR_LOW_SHIFT)
> +
> +
> +// Register CDP_RDMA_D_SRC_BASE_ADDR_HIGH_0
> +#define CDP_RDMA_D_SRC_BASE_ADDR_HIGH_0			_MK_ADDR_CONST(0xc01c)
> +#define CDP_RDMA_D_SRC_BASE_ADDR_HIGH_0_SRC_BASE_ADDR_HIGH_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDP_RDMA_D_SRC_BASE_ADDR_HIGH_0_SRC_BASE_ADDR_HIGH_FIELD			_MK_FIELD_CONST(0xffffffff, CDP_RDMA_D_SRC_BASE_ADDR_HIGH_0_SRC_BASE_ADDR_HIGH_SHIFT)
> +
> +
> +// Register CDP_RDMA_D_SRC_LINE_STRIDE_0
> +#define CDP_RDMA_D_SRC_LINE_STRIDE_0			_MK_ADDR_CONST(0xc020)
> +#define CDP_RDMA_D_SRC_LINE_STRIDE_0_SRC_LINE_STRIDE_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDP_RDMA_D_SRC_LINE_STRIDE_0_SRC_LINE_STRIDE_FIELD			_MK_FIELD_CONST(0xffffffff, CDP_RDMA_D_SRC_LINE_STRIDE_0_SRC_LINE_STRIDE_SHIFT)
> +
> +
> +// Register CDP_RDMA_D_SRC_SURFACE_STRIDE_0
> +#define CDP_RDMA_D_SRC_SURFACE_STRIDE_0			_MK_ADDR_CONST(0xc024)
> +#define CDP_RDMA_D_SRC_SURFACE_STRIDE_0_SRC_SURFACE_STRIDE_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDP_RDMA_D_SRC_SURFACE_STRIDE_0_SRC_SURFACE_STRIDE_FIELD			_MK_FIELD_CONST(0xffffffff, CDP_RDMA_D_SRC_SURFACE_STRIDE_0_SRC_SURFACE_STRIDE_SHIFT)
> +
> +
> +// Register CDP_RDMA_D_SRC_DMA_CFG_0
> +#define CDP_RDMA_D_SRC_DMA_CFG_0			_MK_ADDR_CONST(0xc028)
> +#define CDP_RDMA_D_SRC_DMA_CFG_0_SRC_RAM_TYPE_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDP_RDMA_D_SRC_DMA_CFG_0_SRC_RAM_TYPE_FIELD			_MK_FIELD_CONST(0x1, CDP_RDMA_D_SRC_DMA_CFG_0_SRC_RAM_TYPE_SHIFT)
> +#define CDP_RDMA_D_SRC_DMA_CFG_0_SRC_RAM_TYPE_CV			_MK_ENUM_CONST(0x0)
> +#define CDP_RDMA_D_SRC_DMA_CFG_0_SRC_RAM_TYPE_MC			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register CDP_RDMA_D_SRC_COMPRESSION_EN_0
> +#define CDP_RDMA_D_SRC_COMPRESSION_EN_0			_MK_ADDR_CONST(0xc02c)
> +#define CDP_RDMA_D_SRC_COMPRESSION_EN_0_SRC_COMPRESSION_EN_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDP_RDMA_D_SRC_COMPRESSION_EN_0_SRC_COMPRESSION_EN_FIELD			_MK_FIELD_CONST(0x1, CDP_RDMA_D_SRC_COMPRESSION_EN_0_SRC_COMPRESSION_EN_SHIFT)
> +#define CDP_RDMA_D_SRC_COMPRESSION_EN_0_SRC_COMPRESSION_EN_DISABLE			_MK_ENUM_CONST(0x0)
> +#define CDP_RDMA_D_SRC_COMPRESSION_EN_0_SRC_COMPRESSION_EN_ENABLE			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register CDP_RDMA_D_OPERATION_MODE_0
> +#define CDP_RDMA_D_OPERATION_MODE_0			_MK_ADDR_CONST(0xc030)
> +#define CDP_RDMA_D_OPERATION_MODE_0_OPERATION_MODE_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDP_RDMA_D_OPERATION_MODE_0_OPERATION_MODE_FIELD			_MK_FIELD_CONST(0x3, CDP_RDMA_D_OPERATION_MODE_0_OPERATION_MODE_SHIFT)
> +#define CDP_RDMA_D_OPERATION_MODE_0_OPERATION_MODE_READPHILE			_MK_ENUM_CONST(0x0)
> +#define CDP_RDMA_D_OPERATION_MODE_0_OPERATION_MODE_WRITEPHILE			_MK_ENUM_CONST(0x1)
> +#define CDP_RDMA_D_OPERATION_MODE_0_OPERATION_MODE_ORDINARY			_MK_ENUM_CONST(0x2)
> +
> +
> +// Register CDP_RDMA_D_DATA_FORMAT_0
> +#define CDP_RDMA_D_DATA_FORMAT_0			_MK_ADDR_CONST(0xc034)
> +#define CDP_RDMA_D_DATA_FORMAT_0_INPUT_DATA_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDP_RDMA_D_DATA_FORMAT_0_INPUT_DATA_FIELD			_MK_FIELD_CONST(0x3, CDP_RDMA_D_DATA_FORMAT_0_INPUT_DATA_SHIFT)
> +#define CDP_RDMA_D_DATA_FORMAT_0_INPUT_DATA_INT8			_MK_ENUM_CONST(0x0)
> +#define CDP_RDMA_D_DATA_FORMAT_0_INPUT_DATA_INT16			_MK_ENUM_CONST(0x1)
> +#define CDP_RDMA_D_DATA_FORMAT_0_INPUT_DATA_FP16			_MK_ENUM_CONST(0x2)
> +
> +
> +// Register CDP_RDMA_D_PERF_ENABLE_0
> +#define CDP_RDMA_D_PERF_ENABLE_0			_MK_ADDR_CONST(0xc038)
> +#define CDP_RDMA_D_PERF_ENABLE_0_DMA_EN_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDP_RDMA_D_PERF_ENABLE_0_DMA_EN_FIELD			_MK_FIELD_CONST(0x1, CDP_RDMA_D_PERF_ENABLE_0_DMA_EN_SHIFT)
> +#define CDP_RDMA_D_PERF_ENABLE_0_DMA_EN_DISABLE			_MK_ENUM_CONST(0x0)
> +#define CDP_RDMA_D_PERF_ENABLE_0_DMA_EN_ENABLE			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register CDP_RDMA_D_PERF_READ_STALL_0
> +#define CDP_RDMA_D_PERF_READ_STALL_0			_MK_ADDR_CONST(0xc03c)
> +#define CDP_RDMA_D_PERF_READ_STALL_0_PERF_READ_STALL_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDP_RDMA_D_PERF_READ_STALL_0_PERF_READ_STALL_FIELD			_MK_FIELD_CONST(0xffffffff, CDP_RDMA_D_PERF_READ_STALL_0_PERF_READ_STALL_SHIFT)
> +
> +
> +// Register CDP_RDMA_D_CYA_0
> +#define CDP_RDMA_D_CYA_0			_MK_ADDR_CONST(0xc040)
> +#define CDP_RDMA_D_CYA_0_CYA_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDP_RDMA_D_CYA_0_CYA_FIELD			_MK_FIELD_CONST(0xffffffff, CDP_RDMA_D_CYA_0_CYA_SHIFT)
> +
> +
> +
> +// To satisfy various compilers and platforms,
> +// we let users control the types and syntax of certain constants, using macros.
> +#ifndef _MK_SHIFT_CONST
> +  #define _MK_SHIFT_CONST(_constant_) _constant_
> +#endif
> +#ifndef _MK_MASK_CONST
> +  #define _MK_MASK_CONST(_constant_) _constant_
> +#endif
> +#ifndef _MK_ENUM_CONST
> +  #define _MK_ENUM_CONST(_constant_) (_constant_ ## UL)
> +#endif
> +#ifndef _MK_ADDR_CONST
> +  #define _MK_ADDR_CONST(_constant_) _constant_
> +#endif
> +#ifndef _MK_FIELD_CONST
> +  #define _MK_FIELD_CONST(_mask_, _shift_) (_MK_MASK_CONST(_mask_) << _MK_SHIFT_CONST(_shift_))
> +#endif
> +
> +
> +// Register CDP_S_STATUS_0
> +#define CDP_S_STATUS_0			_MK_ADDR_CONST(0xd000)
> +#define CDP_S_STATUS_0_STATUS_0_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDP_S_STATUS_0_STATUS_0_FIELD			_MK_FIELD_CONST(0x3, CDP_S_STATUS_0_STATUS_0_SHIFT)
> +#define CDP_S_STATUS_0_STATUS_0_IDLE			_MK_ENUM_CONST(0x0)
> +#define CDP_S_STATUS_0_STATUS_0_RUNNING			_MK_ENUM_CONST(0x1)
> +#define CDP_S_STATUS_0_STATUS_0_PENDING			_MK_ENUM_CONST(0x2)
> +#define CDP_S_STATUS_0_STATUS_1_SHIFT			_MK_SHIFT_CONST(16)
> +#define CDP_S_STATUS_0_STATUS_1_FIELD			_MK_FIELD_CONST(0x3, CDP_S_STATUS_0_STATUS_1_SHIFT)
> +#define CDP_S_STATUS_0_STATUS_1_IDLE			_MK_ENUM_CONST(0x0)
> +#define CDP_S_STATUS_0_STATUS_1_RUNNING			_MK_ENUM_CONST(0x1)
> +#define CDP_S_STATUS_0_STATUS_1_PENDING			_MK_ENUM_CONST(0x2)
> +
> +
> +// Register CDP_S_POINTER_0
> +#define CDP_S_POINTER_0			_MK_ADDR_CONST(0xd004)
> +#define CDP_S_POINTER_0_PRODUCER_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDP_S_POINTER_0_PRODUCER_FIELD			_MK_FIELD_CONST(0x1, CDP_S_POINTER_0_PRODUCER_SHIFT)
> +#define CDP_S_POINTER_0_PRODUCER_GROUP_0			_MK_ENUM_CONST(0x0)
> +#define CDP_S_POINTER_0_PRODUCER_GROUP_1			_MK_ENUM_CONST(0x1)
> +#define CDP_S_POINTER_0_CONSUMER_SHIFT			_MK_SHIFT_CONST(16)
> +#define CDP_S_POINTER_0_CONSUMER_FIELD			_MK_FIELD_CONST(0x1, CDP_S_POINTER_0_CONSUMER_SHIFT)
> +#define CDP_S_POINTER_0_CONSUMER_GROUP_0			_MK_ENUM_CONST(0x0)
> +#define CDP_S_POINTER_0_CONSUMER_GROUP_1			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register CDP_S_LUT_ACCESS_CFG_0
> +#define CDP_S_LUT_ACCESS_CFG_0			_MK_ADDR_CONST(0xd008)
> +#define CDP_S_LUT_ACCESS_CFG_0_LUT_ADDR_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDP_S_LUT_ACCESS_CFG_0_LUT_ADDR_FIELD			_MK_FIELD_CONST(0x3ff, CDP_S_LUT_ACCESS_CFG_0_LUT_ADDR_SHIFT)
> +#define CDP_S_LUT_ACCESS_CFG_0_LUT_TABLE_ID_SHIFT			_MK_SHIFT_CONST(16)
> +#define CDP_S_LUT_ACCESS_CFG_0_LUT_TABLE_ID_FIELD			_MK_FIELD_CONST(0x1, CDP_S_LUT_ACCESS_CFG_0_LUT_TABLE_ID_SHIFT)
> +#define CDP_S_LUT_ACCESS_CFG_0_LUT_TABLE_ID_LE			_MK_ENUM_CONST(0x0)
> +#define CDP_S_LUT_ACCESS_CFG_0_LUT_TABLE_ID_LO			_MK_ENUM_CONST(0x1)
> +#define CDP_S_LUT_ACCESS_CFG_0_LUT_ACCESS_TYPE_SHIFT			_MK_SHIFT_CONST(17)
> +#define CDP_S_LUT_ACCESS_CFG_0_LUT_ACCESS_TYPE_FIELD			_MK_FIELD_CONST(0x1, CDP_S_LUT_ACCESS_CFG_0_LUT_ACCESS_TYPE_SHIFT)
> +#define CDP_S_LUT_ACCESS_CFG_0_LUT_ACCESS_TYPE_READ			_MK_ENUM_CONST(0x0)
> +#define CDP_S_LUT_ACCESS_CFG_0_LUT_ACCESS_TYPE_WRITE			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register CDP_S_LUT_ACCESS_DATA_0
> +#define CDP_S_LUT_ACCESS_DATA_0			_MK_ADDR_CONST(0xd00c)
> +#define CDP_S_LUT_ACCESS_DATA_0_LUT_DATA_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDP_S_LUT_ACCESS_DATA_0_LUT_DATA_FIELD			_MK_FIELD_CONST(0xffff, CDP_S_LUT_ACCESS_DATA_0_LUT_DATA_SHIFT)
> +
> +
> +// Register CDP_S_LUT_CFG_0
> +#define CDP_S_LUT_CFG_0			_MK_ADDR_CONST(0xd010)
> +#define CDP_S_LUT_CFG_0_LUT_LE_FUNCTION_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDP_S_LUT_CFG_0_LUT_LE_FUNCTION_FIELD			_MK_FIELD_CONST(0x1, CDP_S_LUT_CFG_0_LUT_LE_FUNCTION_SHIFT)
> +#define CDP_S_LUT_CFG_0_LUT_LE_FUNCTION_EXPONENT			_MK_ENUM_CONST(0x0)
> +#define CDP_S_LUT_CFG_0_LUT_LE_FUNCTION_LINEAR			_MK_ENUM_CONST(0x1)
> +#define CDP_S_LUT_CFG_0_LUT_UFLOW_PRIORITY_SHIFT			_MK_SHIFT_CONST(4)
> +#define CDP_S_LUT_CFG_0_LUT_UFLOW_PRIORITY_FIELD			_MK_FIELD_CONST(0x1, CDP_S_LUT_CFG_0_LUT_UFLOW_PRIORITY_SHIFT)
> +#define CDP_S_LUT_CFG_0_LUT_UFLOW_PRIORITY_LE			_MK_ENUM_CONST(0x0)
> +#define CDP_S_LUT_CFG_0_LUT_UFLOW_PRIORITY_LO			_MK_ENUM_CONST(0x1)
> +#define CDP_S_LUT_CFG_0_LUT_OFLOW_PRIORITY_SHIFT			_MK_SHIFT_CONST(5)
> +#define CDP_S_LUT_CFG_0_LUT_OFLOW_PRIORITY_FIELD			_MK_FIELD_CONST(0x1, CDP_S_LUT_CFG_0_LUT_OFLOW_PRIORITY_SHIFT)
> +#define CDP_S_LUT_CFG_0_LUT_OFLOW_PRIORITY_LE			_MK_ENUM_CONST(0x0)
> +#define CDP_S_LUT_CFG_0_LUT_OFLOW_PRIORITY_LO			_MK_ENUM_CONST(0x1)
> +#define CDP_S_LUT_CFG_0_LUT_HYBRID_PRIORITY_SHIFT			_MK_SHIFT_CONST(6)
> +#define CDP_S_LUT_CFG_0_LUT_HYBRID_PRIORITY_FIELD			_MK_FIELD_CONST(0x1, CDP_S_LUT_CFG_0_LUT_HYBRID_PRIORITY_SHIFT)
> +#define CDP_S_LUT_CFG_0_LUT_HYBRID_PRIORITY_LE			_MK_ENUM_CONST(0x0)
> +#define CDP_S_LUT_CFG_0_LUT_HYBRID_PRIORITY_LO			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register CDP_S_LUT_INFO_0
> +#define CDP_S_LUT_INFO_0			_MK_ADDR_CONST(0xd014)
> +#define CDP_S_LUT_INFO_0_LUT_LE_INDEX_OFFSET_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDP_S_LUT_INFO_0_LUT_LE_INDEX_OFFSET_FIELD			_MK_FIELD_CONST(0xff, CDP_S_LUT_INFO_0_LUT_LE_INDEX_OFFSET_SHIFT)
> +#define CDP_S_LUT_INFO_0_LUT_LE_INDEX_SELECT_SHIFT			_MK_SHIFT_CONST(8)
> +#define CDP_S_LUT_INFO_0_LUT_LE_INDEX_SELECT_FIELD			_MK_FIELD_CONST(0xff, CDP_S_LUT_INFO_0_LUT_LE_INDEX_SELECT_SHIFT)
> +#define CDP_S_LUT_INFO_0_LUT_LO_INDEX_SELECT_SHIFT			_MK_SHIFT_CONST(16)
> +#define CDP_S_LUT_INFO_0_LUT_LO_INDEX_SELECT_FIELD			_MK_FIELD_CONST(0xff, CDP_S_LUT_INFO_0_LUT_LO_INDEX_SELECT_SHIFT)
> +
> +
> +// Register CDP_S_LUT_LE_START_LOW_0
> +#define CDP_S_LUT_LE_START_LOW_0			_MK_ADDR_CONST(0xd018)
> +#define CDP_S_LUT_LE_START_LOW_0_LUT_LE_START_LOW_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDP_S_LUT_LE_START_LOW_0_LUT_LE_START_LOW_FIELD			_MK_FIELD_CONST(0xffffffff, CDP_S_LUT_LE_START_LOW_0_LUT_LE_START_LOW_SHIFT)
> +
> +
> +// Register CDP_S_LUT_LE_START_HIGH_0
> +#define CDP_S_LUT_LE_START_HIGH_0			_MK_ADDR_CONST(0xd01c)
> +#define CDP_S_LUT_LE_START_HIGH_0_LUT_LE_START_HIGH_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDP_S_LUT_LE_START_HIGH_0_LUT_LE_START_HIGH_FIELD			_MK_FIELD_CONST(0x3f, CDP_S_LUT_LE_START_HIGH_0_LUT_LE_START_HIGH_SHIFT)
> +
> +
> +// Register CDP_S_LUT_LE_END_LOW_0
> +#define CDP_S_LUT_LE_END_LOW_0			_MK_ADDR_CONST(0xd020)
> +#define CDP_S_LUT_LE_END_LOW_0_LUT_LE_END_LOW_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDP_S_LUT_LE_END_LOW_0_LUT_LE_END_LOW_FIELD			_MK_FIELD_CONST(0xffffffff, CDP_S_LUT_LE_END_LOW_0_LUT_LE_END_LOW_SHIFT)
> +
> +
> +// Register CDP_S_LUT_LE_END_HIGH_0
> +#define CDP_S_LUT_LE_END_HIGH_0			_MK_ADDR_CONST(0xd024)
> +#define CDP_S_LUT_LE_END_HIGH_0_LUT_LE_END_HIGH_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDP_S_LUT_LE_END_HIGH_0_LUT_LE_END_HIGH_FIELD			_MK_FIELD_CONST(0x3f, CDP_S_LUT_LE_END_HIGH_0_LUT_LE_END_HIGH_SHIFT)
> +
> +
> +// Register CDP_S_LUT_LO_START_LOW_0
> +#define CDP_S_LUT_LO_START_LOW_0			_MK_ADDR_CONST(0xd028)
> +#define CDP_S_LUT_LO_START_LOW_0_LUT_LO_START_LOW_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDP_S_LUT_LO_START_LOW_0_LUT_LO_START_LOW_FIELD			_MK_FIELD_CONST(0xffffffff, CDP_S_LUT_LO_START_LOW_0_LUT_LO_START_LOW_SHIFT)
> +
> +
> +// Register CDP_S_LUT_LO_START_HIGH_0
> +#define CDP_S_LUT_LO_START_HIGH_0			_MK_ADDR_CONST(0xd02c)
> +#define CDP_S_LUT_LO_START_HIGH_0_LUT_LO_START_HIGH_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDP_S_LUT_LO_START_HIGH_0_LUT_LO_START_HIGH_FIELD			_MK_FIELD_CONST(0x3f, CDP_S_LUT_LO_START_HIGH_0_LUT_LO_START_HIGH_SHIFT)
> +
> +
> +// Register CDP_S_LUT_LO_END_LOW_0
> +#define CDP_S_LUT_LO_END_LOW_0			_MK_ADDR_CONST(0xd030)
> +#define CDP_S_LUT_LO_END_LOW_0_LUT_LO_END_LOW_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDP_S_LUT_LO_END_LOW_0_LUT_LO_END_LOW_FIELD			_MK_FIELD_CONST(0xffffffff, CDP_S_LUT_LO_END_LOW_0_LUT_LO_END_LOW_SHIFT)
> +
> +
> +// Register CDP_S_LUT_LO_END_HIGH_0
> +#define CDP_S_LUT_LO_END_HIGH_0			_MK_ADDR_CONST(0xd034)
> +#define CDP_S_LUT_LO_END_HIGH_0_LUT_LO_END_HIGH_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDP_S_LUT_LO_END_HIGH_0_LUT_LO_END_HIGH_FIELD			_MK_FIELD_CONST(0x3f, CDP_S_LUT_LO_END_HIGH_0_LUT_LO_END_HIGH_SHIFT)
> +
> +
> +// Register CDP_S_LUT_LE_SLOPE_SCALE_0
> +#define CDP_S_LUT_LE_SLOPE_SCALE_0			_MK_ADDR_CONST(0xd038)
> +#define CDP_S_LUT_LE_SLOPE_SCALE_0_LUT_LE_SLOPE_UFLOW_SCALE_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDP_S_LUT_LE_SLOPE_SCALE_0_LUT_LE_SLOPE_UFLOW_SCALE_FIELD			_MK_FIELD_CONST(0xffff, CDP_S_LUT_LE_SLOPE_SCALE_0_LUT_LE_SLOPE_UFLOW_SCALE_SHIFT)
> +#define CDP_S_LUT_LE_SLOPE_SCALE_0_LUT_LE_SLOPE_OFLOW_SCALE_SHIFT			_MK_SHIFT_CONST(16)
> +#define CDP_S_LUT_LE_SLOPE_SCALE_0_LUT_LE_SLOPE_OFLOW_SCALE_FIELD			_MK_FIELD_CONST(0xffff, CDP_S_LUT_LE_SLOPE_SCALE_0_LUT_LE_SLOPE_OFLOW_SCALE_SHIFT)
> +
> +
> +// Register CDP_S_LUT_LE_SLOPE_SHIFT_0
> +#define CDP_S_LUT_LE_SLOPE_SHIFT_0			_MK_ADDR_CONST(0xd03c)
> +#define CDP_S_LUT_LE_SLOPE_SHIFT_0_LUT_LE_SLOPE_UFLOW_SHIFT_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDP_S_LUT_LE_SLOPE_SHIFT_0_LUT_LE_SLOPE_UFLOW_SHIFT_FIELD			_MK_FIELD_CONST(0x1f, CDP_S_LUT_LE_SLOPE_SHIFT_0_LUT_LE_SLOPE_UFLOW_SHIFT_SHIFT)
> +#define CDP_S_LUT_LE_SLOPE_SHIFT_0_LUT_LE_SLOPE_OFLOW_SHIFT_SHIFT			_MK_SHIFT_CONST(5)
> +#define CDP_S_LUT_LE_SLOPE_SHIFT_0_LUT_LE_SLOPE_OFLOW_SHIFT_FIELD			_MK_FIELD_CONST(0x1f, CDP_S_LUT_LE_SLOPE_SHIFT_0_LUT_LE_SLOPE_OFLOW_SHIFT_SHIFT)
> +
> +
> +// Register CDP_S_LUT_LO_SLOPE_SCALE_0
> +#define CDP_S_LUT_LO_SLOPE_SCALE_0			_MK_ADDR_CONST(0xd040)
> +#define CDP_S_LUT_LO_SLOPE_SCALE_0_LUT_LO_SLOPE_UFLOW_SCALE_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDP_S_LUT_LO_SLOPE_SCALE_0_LUT_LO_SLOPE_UFLOW_SCALE_FIELD			_MK_FIELD_CONST(0xffff, CDP_S_LUT_LO_SLOPE_SCALE_0_LUT_LO_SLOPE_UFLOW_SCALE_SHIFT)
> +#define CDP_S_LUT_LO_SLOPE_SCALE_0_LUT_LO_SLOPE_OFLOW_SCALE_SHIFT			_MK_SHIFT_CONST(16)
> +#define CDP_S_LUT_LO_SLOPE_SCALE_0_LUT_LO_SLOPE_OFLOW_SCALE_FIELD			_MK_FIELD_CONST(0xffff, CDP_S_LUT_LO_SLOPE_SCALE_0_LUT_LO_SLOPE_OFLOW_SCALE_SHIFT)
> +
> +
> +// Register CDP_S_LUT_LO_SLOPE_SHIFT_0
> +#define CDP_S_LUT_LO_SLOPE_SHIFT_0			_MK_ADDR_CONST(0xd044)
> +#define CDP_S_LUT_LO_SLOPE_SHIFT_0_LUT_LO_SLOPE_UFLOW_SHIFT_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDP_S_LUT_LO_SLOPE_SHIFT_0_LUT_LO_SLOPE_UFLOW_SHIFT_FIELD			_MK_FIELD_CONST(0x1f, CDP_S_LUT_LO_SLOPE_SHIFT_0_LUT_LO_SLOPE_UFLOW_SHIFT_SHIFT)
> +#define CDP_S_LUT_LO_SLOPE_SHIFT_0_LUT_LO_SLOPE_OFLOW_SHIFT_SHIFT			_MK_SHIFT_CONST(5)
> +#define CDP_S_LUT_LO_SLOPE_SHIFT_0_LUT_LO_SLOPE_OFLOW_SHIFT_FIELD			_MK_FIELD_CONST(0x1f, CDP_S_LUT_LO_SLOPE_SHIFT_0_LUT_LO_SLOPE_OFLOW_SHIFT_SHIFT)
> +
> +
> +// Register CDP_D_OP_ENABLE_0
> +#define CDP_D_OP_ENABLE_0			_MK_ADDR_CONST(0xd048)
> +#define CDP_D_OP_ENABLE_0_OP_EN_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDP_D_OP_ENABLE_0_OP_EN_FIELD			_MK_FIELD_CONST(0x1, CDP_D_OP_ENABLE_0_OP_EN_SHIFT)
> +#define CDP_D_OP_ENABLE_0_OP_EN_DISABLE			_MK_ENUM_CONST(0x0)
> +#define CDP_D_OP_ENABLE_0_OP_EN_ENABLE			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register CDP_D_FUNC_BYPASS_0
> +#define CDP_D_FUNC_BYPASS_0			_MK_ADDR_CONST(0xd04c)
> +#define CDP_D_FUNC_BYPASS_0_SQSUM_BYPASS_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDP_D_FUNC_BYPASS_0_SQSUM_BYPASS_FIELD			_MK_FIELD_CONST(0x1, CDP_D_FUNC_BYPASS_0_SQSUM_BYPASS_SHIFT)
> +#define CDP_D_FUNC_BYPASS_0_SQSUM_BYPASS_DISABLE			_MK_ENUM_CONST(0x0)
> +#define CDP_D_FUNC_BYPASS_0_SQSUM_BYPASS_ENABLE			_MK_ENUM_CONST(0x1)
> +#define CDP_D_FUNC_BYPASS_0_MUL_BYPASS_SHIFT			_MK_SHIFT_CONST(1)
> +#define CDP_D_FUNC_BYPASS_0_MUL_BYPASS_FIELD			_MK_FIELD_CONST(0x1, CDP_D_FUNC_BYPASS_0_MUL_BYPASS_SHIFT)
> +#define CDP_D_FUNC_BYPASS_0_MUL_BYPASS_DISABLE			_MK_ENUM_CONST(0x0)
> +#define CDP_D_FUNC_BYPASS_0_MUL_BYPASS_ENABLE			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register CDP_D_DST_BASE_ADDR_LOW_0
> +#define CDP_D_DST_BASE_ADDR_LOW_0			_MK_ADDR_CONST(0xd050)
> +#define CDP_D_DST_BASE_ADDR_LOW_0_DST_BASE_ADDR_LOW_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDP_D_DST_BASE_ADDR_LOW_0_DST_BASE_ADDR_LOW_FIELD			_MK_FIELD_CONST(0xffffffff, CDP_D_DST_BASE_ADDR_LOW_0_DST_BASE_ADDR_LOW_SHIFT)
> +
> +
> +// Register CDP_D_DST_BASE_ADDR_HIGH_0
> +#define CDP_D_DST_BASE_ADDR_HIGH_0			_MK_ADDR_CONST(0xd054)
> +#define CDP_D_DST_BASE_ADDR_HIGH_0_DST_BASE_ADDR_HIGH_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDP_D_DST_BASE_ADDR_HIGH_0_DST_BASE_ADDR_HIGH_FIELD			_MK_FIELD_CONST(0xffffffff, CDP_D_DST_BASE_ADDR_HIGH_0_DST_BASE_ADDR_HIGH_SHIFT)
> +
> +
> +// Register CDP_D_DST_LINE_STRIDE_0
> +#define CDP_D_DST_LINE_STRIDE_0			_MK_ADDR_CONST(0xd058)
> +#define CDP_D_DST_LINE_STRIDE_0_DST_LINE_STRIDE_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDP_D_DST_LINE_STRIDE_0_DST_LINE_STRIDE_FIELD			_MK_FIELD_CONST(0xffffffff, CDP_D_DST_LINE_STRIDE_0_DST_LINE_STRIDE_SHIFT)
> +
> +
> +// Register CDP_D_DST_SURFACE_STRIDE_0
> +#define CDP_D_DST_SURFACE_STRIDE_0			_MK_ADDR_CONST(0xd05c)
> +#define CDP_D_DST_SURFACE_STRIDE_0_DST_SURFACE_STRIDE_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDP_D_DST_SURFACE_STRIDE_0_DST_SURFACE_STRIDE_FIELD			_MK_FIELD_CONST(0xffffffff, CDP_D_DST_SURFACE_STRIDE_0_DST_SURFACE_STRIDE_SHIFT)
> +
> +
> +// Register CDP_D_DST_DMA_CFG_0
> +#define CDP_D_DST_DMA_CFG_0			_MK_ADDR_CONST(0xd060)
> +#define CDP_D_DST_DMA_CFG_0_DST_RAM_TYPE_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDP_D_DST_DMA_CFG_0_DST_RAM_TYPE_FIELD			_MK_FIELD_CONST(0x1, CDP_D_DST_DMA_CFG_0_DST_RAM_TYPE_SHIFT)
> +#define CDP_D_DST_DMA_CFG_0_DST_RAM_TYPE_CV			_MK_ENUM_CONST(0x0)
> +#define CDP_D_DST_DMA_CFG_0_DST_RAM_TYPE_MC			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register CDP_D_DST_COMPRESSION_EN_0
> +#define CDP_D_DST_COMPRESSION_EN_0			_MK_ADDR_CONST(0xd064)
> +#define CDP_D_DST_COMPRESSION_EN_0_DST_COMPRESSION_EN_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDP_D_DST_COMPRESSION_EN_0_DST_COMPRESSION_EN_FIELD			_MK_FIELD_CONST(0x1, CDP_D_DST_COMPRESSION_EN_0_DST_COMPRESSION_EN_SHIFT)
> +#define CDP_D_DST_COMPRESSION_EN_0_DST_COMPRESSION_EN_DISABLE			_MK_ENUM_CONST(0x0)
> +#define CDP_D_DST_COMPRESSION_EN_0_DST_COMPRESSION_EN_ENABLE			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register CDP_D_DATA_FORMAT_0
> +#define CDP_D_DATA_FORMAT_0			_MK_ADDR_CONST(0xd068)
> +#define CDP_D_DATA_FORMAT_0_INPUT_DATA_TYPE_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDP_D_DATA_FORMAT_0_INPUT_DATA_TYPE_FIELD			_MK_FIELD_CONST(0x3, CDP_D_DATA_FORMAT_0_INPUT_DATA_TYPE_SHIFT)
> +#define CDP_D_DATA_FORMAT_0_INPUT_DATA_TYPE_INT8			_MK_ENUM_CONST(0x0)
> +#define CDP_D_DATA_FORMAT_0_INPUT_DATA_TYPE_INT16			_MK_ENUM_CONST(0x1)
> +#define CDP_D_DATA_FORMAT_0_INPUT_DATA_TYPE_FP16			_MK_ENUM_CONST(0x2)
> +
> +
> +// Register CDP_D_NAN_FLUSH_TO_ZERO_0
> +#define CDP_D_NAN_FLUSH_TO_ZERO_0			_MK_ADDR_CONST(0xd06c)
> +#define CDP_D_NAN_FLUSH_TO_ZERO_0_NAN_TO_ZERO_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDP_D_NAN_FLUSH_TO_ZERO_0_NAN_TO_ZERO_FIELD			_MK_FIELD_CONST(0x1, CDP_D_NAN_FLUSH_TO_ZERO_0_NAN_TO_ZERO_SHIFT)
> +#define CDP_D_NAN_FLUSH_TO_ZERO_0_NAN_TO_ZERO_DISABLE			_MK_ENUM_CONST(0x0)
> +#define CDP_D_NAN_FLUSH_TO_ZERO_0_NAN_TO_ZERO_ENABLE			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register CDP_D_LRN_CFG_0
> +#define CDP_D_LRN_CFG_0			_MK_ADDR_CONST(0xd070)
> +#define CDP_D_LRN_CFG_0_NORMALZ_LEN_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDP_D_LRN_CFG_0_NORMALZ_LEN_FIELD			_MK_FIELD_CONST(0x3, CDP_D_LRN_CFG_0_NORMALZ_LEN_SHIFT)
> +#define CDP_D_LRN_CFG_0_NORMALZ_LEN_LEN3			_MK_ENUM_CONST(0x0)
> +#define CDP_D_LRN_CFG_0_NORMALZ_LEN_LEN5			_MK_ENUM_CONST(0x1)
> +#define CDP_D_LRN_CFG_0_NORMALZ_LEN_LEN7			_MK_ENUM_CONST(0x2)
> +#define CDP_D_LRN_CFG_0_NORMALZ_LEN_LEN9			_MK_ENUM_CONST(0x3)
> +
> +
> +// Register CDP_D_DATIN_OFFSET_0
> +#define CDP_D_DATIN_OFFSET_0			_MK_ADDR_CONST(0xd074)
> +#define CDP_D_DATIN_OFFSET_0_DATIN_OFFSET_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDP_D_DATIN_OFFSET_0_DATIN_OFFSET_FIELD			_MK_FIELD_CONST(0xffff, CDP_D_DATIN_OFFSET_0_DATIN_OFFSET_SHIFT)
> +
> +
> +// Register CDP_D_DATIN_SCALE_0
> +#define CDP_D_DATIN_SCALE_0			_MK_ADDR_CONST(0xd078)
> +#define CDP_D_DATIN_SCALE_0_DATIN_SCALE_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDP_D_DATIN_SCALE_0_DATIN_SCALE_FIELD			_MK_FIELD_CONST(0xffff, CDP_D_DATIN_SCALE_0_DATIN_SCALE_SHIFT)
> +
> +
> +// Register CDP_D_DATIN_SHIFTER_0
> +#define CDP_D_DATIN_SHIFTER_0			_MK_ADDR_CONST(0xd07c)
> +#define CDP_D_DATIN_SHIFTER_0_DATIN_SHIFTER_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDP_D_DATIN_SHIFTER_0_DATIN_SHIFTER_FIELD			_MK_FIELD_CONST(0x1f, CDP_D_DATIN_SHIFTER_0_DATIN_SHIFTER_SHIFT)
> +
> +
> +// Register CDP_D_DATOUT_OFFSET_0
> +#define CDP_D_DATOUT_OFFSET_0			_MK_ADDR_CONST(0xd080)
> +#define CDP_D_DATOUT_OFFSET_0_DATOUT_OFFSET_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDP_D_DATOUT_OFFSET_0_DATOUT_OFFSET_FIELD			_MK_FIELD_CONST(0xffffffff, CDP_D_DATOUT_OFFSET_0_DATOUT_OFFSET_SHIFT)
> +
> +
> +// Register CDP_D_DATOUT_SCALE_0
> +#define CDP_D_DATOUT_SCALE_0			_MK_ADDR_CONST(0xd084)
> +#define CDP_D_DATOUT_SCALE_0_DATOUT_SCALE_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDP_D_DATOUT_SCALE_0_DATOUT_SCALE_FIELD			_MK_FIELD_CONST(0xffff, CDP_D_DATOUT_SCALE_0_DATOUT_SCALE_SHIFT)
> +
> +
> +// Register CDP_D_DATOUT_SHIFTER_0
> +#define CDP_D_DATOUT_SHIFTER_0			_MK_ADDR_CONST(0xd088)
> +#define CDP_D_DATOUT_SHIFTER_0_DATOUT_SHIFTER_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDP_D_DATOUT_SHIFTER_0_DATOUT_SHIFTER_FIELD			_MK_FIELD_CONST(0x3f, CDP_D_DATOUT_SHIFTER_0_DATOUT_SHIFTER_SHIFT)
> +
> +
> +// Register CDP_D_NAN_INPUT_NUM_0
> +#define CDP_D_NAN_INPUT_NUM_0			_MK_ADDR_CONST(0xd08c)
> +#define CDP_D_NAN_INPUT_NUM_0_NAN_INPUT_NUM_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDP_D_NAN_INPUT_NUM_0_NAN_INPUT_NUM_FIELD			_MK_FIELD_CONST(0xffffffff, CDP_D_NAN_INPUT_NUM_0_NAN_INPUT_NUM_SHIFT)
> +
> +
> +// Register CDP_D_INF_INPUT_NUM_0
> +#define CDP_D_INF_INPUT_NUM_0			_MK_ADDR_CONST(0xd090)
> +#define CDP_D_INF_INPUT_NUM_0_INF_INPUT_NUM_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDP_D_INF_INPUT_NUM_0_INF_INPUT_NUM_FIELD			_MK_FIELD_CONST(0xffffffff, CDP_D_INF_INPUT_NUM_0_INF_INPUT_NUM_SHIFT)
> +
> +
> +// Register CDP_D_NAN_OUTPUT_NUM_0
> +#define CDP_D_NAN_OUTPUT_NUM_0			_MK_ADDR_CONST(0xd094)
> +#define CDP_D_NAN_OUTPUT_NUM_0_NAN_OUTPUT_NUM_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDP_D_NAN_OUTPUT_NUM_0_NAN_OUTPUT_NUM_FIELD			_MK_FIELD_CONST(0xffffffff, CDP_D_NAN_OUTPUT_NUM_0_NAN_OUTPUT_NUM_SHIFT)
> +
> +
> +// Register CDP_D_OUT_SATURATION_0
> +#define CDP_D_OUT_SATURATION_0			_MK_ADDR_CONST(0xd098)
> +#define CDP_D_OUT_SATURATION_0_OUT_SATURATION_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDP_D_OUT_SATURATION_0_OUT_SATURATION_FIELD			_MK_FIELD_CONST(0xffffffff, CDP_D_OUT_SATURATION_0_OUT_SATURATION_SHIFT)
> +
> +
> +// Register CDP_D_PERF_ENABLE_0
> +#define CDP_D_PERF_ENABLE_0			_MK_ADDR_CONST(0xd09c)
> +#define CDP_D_PERF_ENABLE_0_DMA_EN_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDP_D_PERF_ENABLE_0_DMA_EN_FIELD			_MK_FIELD_CONST(0x1, CDP_D_PERF_ENABLE_0_DMA_EN_SHIFT)
> +#define CDP_D_PERF_ENABLE_0_DMA_EN_DISABLE			_MK_ENUM_CONST(0x0)
> +#define CDP_D_PERF_ENABLE_0_DMA_EN_ENABLE			_MK_ENUM_CONST(0x1)
> +#define CDP_D_PERF_ENABLE_0_LUT_EN_SHIFT			_MK_SHIFT_CONST(1)
> +#define CDP_D_PERF_ENABLE_0_LUT_EN_FIELD			_MK_FIELD_CONST(0x1, CDP_D_PERF_ENABLE_0_LUT_EN_SHIFT)
> +#define CDP_D_PERF_ENABLE_0_LUT_EN_DISABLE			_MK_ENUM_CONST(0x0)
> +#define CDP_D_PERF_ENABLE_0_LUT_EN_ENABLE			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register CDP_D_PERF_WRITE_STALL_0
> +#define CDP_D_PERF_WRITE_STALL_0			_MK_ADDR_CONST(0xd0a0)
> +#define CDP_D_PERF_WRITE_STALL_0_PERF_WRITE_STALL_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDP_D_PERF_WRITE_STALL_0_PERF_WRITE_STALL_FIELD			_MK_FIELD_CONST(0xffffffff, CDP_D_PERF_WRITE_STALL_0_PERF_WRITE_STALL_SHIFT)
> +
> +
> +// Register CDP_D_PERF_LUT_UFLOW_0
> +#define CDP_D_PERF_LUT_UFLOW_0			_MK_ADDR_CONST(0xd0a4)
> +#define CDP_D_PERF_LUT_UFLOW_0_PERF_LUT_UFLOW_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDP_D_PERF_LUT_UFLOW_0_PERF_LUT_UFLOW_FIELD			_MK_FIELD_CONST(0xffffffff, CDP_D_PERF_LUT_UFLOW_0_PERF_LUT_UFLOW_SHIFT)
> +
> +
> +// Register CDP_D_PERF_LUT_OFLOW_0
> +#define CDP_D_PERF_LUT_OFLOW_0			_MK_ADDR_CONST(0xd0a8)
> +#define CDP_D_PERF_LUT_OFLOW_0_PERF_LUT_OFLOW_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDP_D_PERF_LUT_OFLOW_0_PERF_LUT_OFLOW_FIELD			_MK_FIELD_CONST(0xffffffff, CDP_D_PERF_LUT_OFLOW_0_PERF_LUT_OFLOW_SHIFT)
> +
> +
> +// Register CDP_D_PERF_LUT_HYBRID_0
> +#define CDP_D_PERF_LUT_HYBRID_0			_MK_ADDR_CONST(0xd0ac)
> +#define CDP_D_PERF_LUT_HYBRID_0_PERF_LUT_HYBRID_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDP_D_PERF_LUT_HYBRID_0_PERF_LUT_HYBRID_FIELD			_MK_FIELD_CONST(0xffffffff, CDP_D_PERF_LUT_HYBRID_0_PERF_LUT_HYBRID_SHIFT)
> +
> +
> +// Register CDP_D_PERF_LUT_LE_HIT_0
> +#define CDP_D_PERF_LUT_LE_HIT_0			_MK_ADDR_CONST(0xd0b0)
> +#define CDP_D_PERF_LUT_LE_HIT_0_PERF_LUT_LE_HIT_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDP_D_PERF_LUT_LE_HIT_0_PERF_LUT_LE_HIT_FIELD			_MK_FIELD_CONST(0xffffffff, CDP_D_PERF_LUT_LE_HIT_0_PERF_LUT_LE_HIT_SHIFT)
> +
> +
> +// Register CDP_D_PERF_LUT_LO_HIT_0
> +#define CDP_D_PERF_LUT_LO_HIT_0			_MK_ADDR_CONST(0xd0b4)
> +#define CDP_D_PERF_LUT_LO_HIT_0_PERF_LUT_LO_HIT_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDP_D_PERF_LUT_LO_HIT_0_PERF_LUT_LO_HIT_FIELD			_MK_FIELD_CONST(0xffffffff, CDP_D_PERF_LUT_LO_HIT_0_PERF_LUT_LO_HIT_SHIFT)
> +
> +
> +// Register CDP_D_CYA_0
> +#define CDP_D_CYA_0			_MK_ADDR_CONST(0xd0b8)
> +#define CDP_D_CYA_0_CYA_SHIFT			_MK_SHIFT_CONST(0)
> +#define CDP_D_CYA_0_CYA_FIELD			_MK_FIELD_CONST(0xffffffff, CDP_D_CYA_0_CYA_SHIFT)
> +
> +
> +
> +// To satisfy various compilers and platforms,
> +// we let users control the types and syntax of certain constants, using macros.
> +#ifndef _MK_SHIFT_CONST
> +  #define _MK_SHIFT_CONST(_constant_) _constant_
> +#endif
> +#ifndef _MK_MASK_CONST
> +  #define _MK_MASK_CONST(_constant_) _constant_
> +#endif
> +#ifndef _MK_ENUM_CONST
> +  #define _MK_ENUM_CONST(_constant_) (_constant_ ## UL)
> +#endif
> +#ifndef _MK_ADDR_CONST
> +  #define _MK_ADDR_CONST(_constant_) _constant_
> +#endif
> +#ifndef _MK_FIELD_CONST
> +  #define _MK_FIELD_CONST(_mask_, _shift_) (_MK_MASK_CONST(_mask_) << _MK_SHIFT_CONST(_shift_))
> +#endif
> +
> +
> +// Register NVDLA_GEC_FEATURE_0
> +#define NVDLA_GEC_FEATURE_0			_MK_ADDR_CONST(0xe000)
> +#define NVDLA_GEC_FEATURE_0_NUM_ERR_SLICES_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_GEC_FEATURE_0_NUM_ERR_SLICES_FIELD			_MK_FIELD_CONST(0x3f, NVDLA_GEC_FEATURE_0_NUM_ERR_SLICES_SHIFT)
> +#define NVDLA_GEC_FEATURE_0_NUM_ERR_SHIFT			_MK_SHIFT_CONST(16)
> +#define NVDLA_GEC_FEATURE_0_NUM_ERR_FIELD			_MK_FIELD_CONST(0xffff, NVDLA_GEC_FEATURE_0_NUM_ERR_SHIFT)
> +
> +
> +// Register NVDLA_GEC_SWRESET_0
> +#define NVDLA_GEC_SWRESET_0			_MK_ADDR_CONST(0xe004)
> +#define NVDLA_GEC_SWRESET_0_SWRST_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_GEC_SWRESET_0_SWRST_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_SWRESET_0_SWRST_SHIFT)
> +
> +
> +// Register NVDLA_GEC_MISSIONERR_TYPE_0
> +#define NVDLA_GEC_MISSIONERR_TYPE_0			_MK_ADDR_CONST(0xe008)
> +#define NVDLA_GEC_MISSIONERR_TYPE_0_CODE_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_GEC_MISSIONERR_TYPE_0_CODE_FIELD			_MK_FIELD_CONST(0x3f, NVDLA_GEC_MISSIONERR_TYPE_0_CODE_SHIFT)
> +
> +
> +// Register NVDLA_GEC_CURRENT_COUNTER_VALUE_0
> +#define NVDLA_GEC_CURRENT_COUNTER_VALUE_0			_MK_ADDR_CONST(0xe00c)
> +#define NVDLA_GEC_CURRENT_COUNTER_VALUE_0_VALUE_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_GEC_CURRENT_COUNTER_VALUE_0_VALUE_FIELD			_MK_FIELD_CONST(0x1ff, NVDLA_GEC_CURRENT_COUNTER_VALUE_0_VALUE_SHIFT)
> +
> +
> +// Register NVDLA_GEC_MISSIONERR_INDEX_0
> +#define NVDLA_GEC_MISSIONERR_INDEX_0			_MK_ADDR_CONST(0xe014)
> +#define NVDLA_GEC_MISSIONERR_INDEX_0_IDX_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_GEC_MISSIONERR_INDEX_0_IDX_FIELD			_MK_FIELD_CONST(0x7f, NVDLA_GEC_MISSIONERR_INDEX_0_IDX_SHIFT)
> +
> +
> +// Register NVDLA_GEC_CORRECTABLE_THRESHOLD_0
> +#define NVDLA_GEC_CORRECTABLE_THRESHOLD_0			_MK_ADDR_CONST(0xe018)
> +#define NVDLA_GEC_CORRECTABLE_THRESHOLD_0_COUNT_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_GEC_CORRECTABLE_THRESHOLD_0_COUNT_FIELD			_MK_FIELD_CONST(0xff, NVDLA_GEC_CORRECTABLE_THRESHOLD_0_COUNT_SHIFT)
> +
> +
> +// Register NVDLA_GEC_MISSIONERR_INJECT_UNLOCK_0
> +#define NVDLA_GEC_MISSIONERR_INJECT_UNLOCK_0			_MK_ADDR_CONST(0xe01c)
> +#define NVDLA_GEC_MISSIONERR_INJECT_UNLOCK_0_VALUE_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_GEC_MISSIONERR_INJECT_UNLOCK_0_VALUE_FIELD			_MK_FIELD_CONST(0xff, NVDLA_GEC_MISSIONERR_INJECT_UNLOCK_0_VALUE_SHIFT)
> +#define NVDLA_GEC_MISSIONERR_INJECT_UNLOCK_0_VALUE_LOCK			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_MISSIONERR_INJECT_UNLOCK_0_VALUE_UNLOCK			_MK_ENUM_CONST(0xe1)
> +
> +
> +// Register NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0			_MK_ADDR_CONST(0xe030)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR0_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR0_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR0_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR0_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR0_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR1_SHIFT			_MK_SHIFT_CONST(1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR1_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR1_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR1_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR1_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR2_SHIFT			_MK_SHIFT_CONST(2)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR2_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR2_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR2_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR2_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR3_SHIFT			_MK_SHIFT_CONST(3)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR3_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR3_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR3_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR3_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR4_SHIFT			_MK_SHIFT_CONST(4)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR4_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR4_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR4_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR4_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR5_SHIFT			_MK_SHIFT_CONST(5)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR5_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR5_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR5_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR5_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR6_SHIFT			_MK_SHIFT_CONST(6)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR6_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR6_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR6_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR6_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR7_SHIFT			_MK_SHIFT_CONST(7)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR7_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR7_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR7_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR7_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR8_SHIFT			_MK_SHIFT_CONST(8)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR8_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR8_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR8_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR8_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR9_SHIFT			_MK_SHIFT_CONST(9)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR9_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR9_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR9_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR9_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR10_SHIFT			_MK_SHIFT_CONST(10)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR10_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR10_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR10_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR10_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR11_SHIFT			_MK_SHIFT_CONST(11)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR11_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR11_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR11_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR11_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR12_SHIFT			_MK_SHIFT_CONST(12)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR12_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR12_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR12_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR12_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR13_SHIFT			_MK_SHIFT_CONST(13)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR13_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR13_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR13_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR13_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR14_SHIFT			_MK_SHIFT_CONST(14)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR14_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR14_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR14_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR14_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR15_SHIFT			_MK_SHIFT_CONST(15)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR15_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR15_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR15_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR15_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR16_SHIFT			_MK_SHIFT_CONST(16)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR16_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR16_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR16_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR16_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR17_SHIFT			_MK_SHIFT_CONST(17)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR17_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR17_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR17_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR17_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR18_SHIFT			_MK_SHIFT_CONST(18)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR18_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR18_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR18_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR18_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR19_SHIFT			_MK_SHIFT_CONST(19)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR19_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR19_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR19_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR19_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR20_SHIFT			_MK_SHIFT_CONST(20)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR20_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR20_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR20_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR20_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR21_SHIFT			_MK_SHIFT_CONST(21)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR21_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR21_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR21_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR21_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR22_SHIFT			_MK_SHIFT_CONST(22)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR22_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR22_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR22_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR22_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR23_SHIFT			_MK_SHIFT_CONST(23)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR23_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR23_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR23_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR23_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR24_SHIFT			_MK_SHIFT_CONST(24)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR24_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR24_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR24_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR24_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR25_SHIFT			_MK_SHIFT_CONST(25)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR25_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR25_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR25_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR25_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR26_SHIFT			_MK_SHIFT_CONST(26)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR26_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR26_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR26_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR26_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR27_SHIFT			_MK_SHIFT_CONST(27)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR27_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR27_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR27_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR27_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR28_SHIFT			_MK_SHIFT_CONST(28)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR28_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR28_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR28_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR28_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR29_SHIFT			_MK_SHIFT_CONST(29)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR29_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR29_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR29_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR29_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR30_SHIFT			_MK_SHIFT_CONST(30)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR30_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR30_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR30_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR30_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR31_SHIFT			_MK_SHIFT_CONST(31)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR31_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR31_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR31_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE_0_ERR31_ENABLE			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0			_MK_ADDR_CONST(0xe034)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR0_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR0_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR0_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR0_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR0_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR1_SHIFT			_MK_SHIFT_CONST(1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR1_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR1_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR1_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR1_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR2_SHIFT			_MK_SHIFT_CONST(2)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR2_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR2_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR2_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR2_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR3_SHIFT			_MK_SHIFT_CONST(3)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR3_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR3_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR3_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR3_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR4_SHIFT			_MK_SHIFT_CONST(4)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR4_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR4_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR4_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR4_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR5_SHIFT			_MK_SHIFT_CONST(5)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR5_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR5_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR5_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR5_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR6_SHIFT			_MK_SHIFT_CONST(6)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR6_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR6_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR6_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR6_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR7_SHIFT			_MK_SHIFT_CONST(7)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR7_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR7_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR7_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR7_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR8_SHIFT			_MK_SHIFT_CONST(8)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR8_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR8_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR8_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR8_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR9_SHIFT			_MK_SHIFT_CONST(9)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR9_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR9_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR9_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR9_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR10_SHIFT			_MK_SHIFT_CONST(10)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR10_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR10_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR10_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR10_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR11_SHIFT			_MK_SHIFT_CONST(11)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR11_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR11_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR11_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR11_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR12_SHIFT			_MK_SHIFT_CONST(12)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR12_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR12_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR12_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR12_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR13_SHIFT			_MK_SHIFT_CONST(13)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR13_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR13_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR13_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR13_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR14_SHIFT			_MK_SHIFT_CONST(14)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR14_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR14_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR14_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR14_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR15_SHIFT			_MK_SHIFT_CONST(15)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR15_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR15_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR15_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR15_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR16_SHIFT			_MK_SHIFT_CONST(16)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR16_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR16_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR16_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR16_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR17_SHIFT			_MK_SHIFT_CONST(17)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR17_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR17_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR17_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR17_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR18_SHIFT			_MK_SHIFT_CONST(18)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR18_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR18_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR18_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR18_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR19_SHIFT			_MK_SHIFT_CONST(19)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR19_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR19_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR19_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR19_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR20_SHIFT			_MK_SHIFT_CONST(20)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR20_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR20_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR20_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR20_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR21_SHIFT			_MK_SHIFT_CONST(21)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR21_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR21_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR21_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR21_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR22_SHIFT			_MK_SHIFT_CONST(22)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR22_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR22_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR22_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR22_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR23_SHIFT			_MK_SHIFT_CONST(23)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR23_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR23_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR23_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR23_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR24_SHIFT			_MK_SHIFT_CONST(24)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR24_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR24_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR24_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR24_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR25_SHIFT			_MK_SHIFT_CONST(25)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR25_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR25_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR25_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR25_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR26_SHIFT			_MK_SHIFT_CONST(26)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR26_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR26_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR26_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR26_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR27_SHIFT			_MK_SHIFT_CONST(27)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR27_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR27_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR27_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR27_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR28_SHIFT			_MK_SHIFT_CONST(28)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR28_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR28_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR28_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR28_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR29_SHIFT			_MK_SHIFT_CONST(29)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR29_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR29_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR29_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR29_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR30_SHIFT			_MK_SHIFT_CONST(30)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR30_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR30_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR30_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR30_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR31_SHIFT			_MK_SHIFT_CONST(31)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR31_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR31_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR31_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE_0_ERR31_FORCE			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0			_MK_ADDR_CONST(0xe038)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR0_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR0_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR0_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR1_SHIFT			_MK_SHIFT_CONST(1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR1_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR1_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR2_SHIFT			_MK_SHIFT_CONST(2)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR2_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR2_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR3_SHIFT			_MK_SHIFT_CONST(3)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR3_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR3_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR4_SHIFT			_MK_SHIFT_CONST(4)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR4_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR4_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR5_SHIFT			_MK_SHIFT_CONST(5)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR5_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR5_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR6_SHIFT			_MK_SHIFT_CONST(6)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR6_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR6_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR7_SHIFT			_MK_SHIFT_CONST(7)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR7_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR7_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR8_SHIFT			_MK_SHIFT_CONST(8)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR8_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR8_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR9_SHIFT			_MK_SHIFT_CONST(9)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR9_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR9_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR10_SHIFT			_MK_SHIFT_CONST(10)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR10_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR10_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR11_SHIFT			_MK_SHIFT_CONST(11)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR11_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR11_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR12_SHIFT			_MK_SHIFT_CONST(12)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR12_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR12_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR13_SHIFT			_MK_SHIFT_CONST(13)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR13_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR13_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR14_SHIFT			_MK_SHIFT_CONST(14)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR14_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR14_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR15_SHIFT			_MK_SHIFT_CONST(15)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR15_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR15_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR16_SHIFT			_MK_SHIFT_CONST(16)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR16_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR16_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR17_SHIFT			_MK_SHIFT_CONST(17)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR17_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR17_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR18_SHIFT			_MK_SHIFT_CONST(18)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR18_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR18_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR19_SHIFT			_MK_SHIFT_CONST(19)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR19_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR19_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR20_SHIFT			_MK_SHIFT_CONST(20)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR20_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR20_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR21_SHIFT			_MK_SHIFT_CONST(21)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR21_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR21_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR22_SHIFT			_MK_SHIFT_CONST(22)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR22_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR22_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR23_SHIFT			_MK_SHIFT_CONST(23)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR23_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR23_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR24_SHIFT			_MK_SHIFT_CONST(24)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR24_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR24_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR25_SHIFT			_MK_SHIFT_CONST(25)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR25_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR25_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR26_SHIFT			_MK_SHIFT_CONST(26)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR26_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR26_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR27_SHIFT			_MK_SHIFT_CONST(27)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR27_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR27_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR28_SHIFT			_MK_SHIFT_CONST(28)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR28_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR28_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR29_SHIFT			_MK_SHIFT_CONST(29)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR29_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR29_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR30_SHIFT			_MK_SHIFT_CONST(30)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR30_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR30_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR31_SHIFT			_MK_SHIFT_CONST(31)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR31_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS_0_ERR31_SHIFT)
> +
> +
> +// Register NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0			_MK_ADDR_CONST(0xe03c)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR0_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR0_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR0_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR0_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR0_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR1_SHIFT			_MK_SHIFT_CONST(1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR1_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR1_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR1_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR1_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR2_SHIFT			_MK_SHIFT_CONST(2)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR2_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR2_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR2_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR2_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR3_SHIFT			_MK_SHIFT_CONST(3)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR3_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR3_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR3_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR3_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR4_SHIFT			_MK_SHIFT_CONST(4)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR4_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR4_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR4_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR4_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR5_SHIFT			_MK_SHIFT_CONST(5)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR5_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR5_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR5_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR5_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR6_SHIFT			_MK_SHIFT_CONST(6)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR6_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR6_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR6_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR6_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR7_SHIFT			_MK_SHIFT_CONST(7)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR7_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR7_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR7_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR7_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR8_SHIFT			_MK_SHIFT_CONST(8)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR8_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR8_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR8_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR8_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR15_SHIFT			_MK_SHIFT_CONST(15)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR15_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR15_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR15_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR15_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR16_SHIFT			_MK_SHIFT_CONST(16)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR16_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR16_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR16_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR16_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR17_SHIFT			_MK_SHIFT_CONST(17)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR17_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR17_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR17_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR17_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR18_SHIFT			_MK_SHIFT_CONST(18)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR18_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR18_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR18_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR18_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR19_SHIFT			_MK_SHIFT_CONST(19)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR19_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR19_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR19_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR19_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR20_SHIFT			_MK_SHIFT_CONST(20)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR20_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR20_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR20_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR20_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR21_SHIFT			_MK_SHIFT_CONST(21)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR21_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR21_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR21_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR21_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR22_SHIFT			_MK_SHIFT_CONST(22)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR22_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR22_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR22_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR22_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR23_SHIFT			_MK_SHIFT_CONST(23)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR23_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR23_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR23_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR23_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR24_SHIFT			_MK_SHIFT_CONST(24)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR24_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR24_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR24_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR24_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR25_SHIFT			_MK_SHIFT_CONST(25)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR25_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR25_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR25_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR25_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR26_SHIFT			_MK_SHIFT_CONST(26)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR26_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR26_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR26_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR26_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR27_SHIFT			_MK_SHIFT_CONST(27)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR27_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR27_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR27_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR27_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR28_SHIFT			_MK_SHIFT_CONST(28)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR28_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR28_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR28_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR28_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR29_SHIFT			_MK_SHIFT_CONST(29)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR29_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR29_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR29_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR29_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR30_SHIFT			_MK_SHIFT_CONST(30)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR30_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR30_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR30_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR30_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR31_SHIFT			_MK_SHIFT_CONST(31)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR31_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR31_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR31_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT_0_ERR31_ENABLE			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0			_MK_ADDR_CONST(0xe040)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR0_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR0_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR0_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR0_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR0_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR1_SHIFT			_MK_SHIFT_CONST(1)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR1_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR1_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR1_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR1_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR2_SHIFT			_MK_SHIFT_CONST(2)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR2_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR2_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR2_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR2_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR3_SHIFT			_MK_SHIFT_CONST(3)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR3_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR3_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR3_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR3_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR4_SHIFT			_MK_SHIFT_CONST(4)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR4_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR4_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR4_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR4_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR5_SHIFT			_MK_SHIFT_CONST(5)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR5_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR5_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR5_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR5_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR6_SHIFT			_MK_SHIFT_CONST(6)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR6_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR6_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR6_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR6_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR7_SHIFT			_MK_SHIFT_CONST(7)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR7_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR7_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR7_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR7_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR8_SHIFT			_MK_SHIFT_CONST(8)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR8_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR8_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR8_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR8_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR9_SHIFT			_MK_SHIFT_CONST(9)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR9_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR9_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR9_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR9_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR10_SHIFT			_MK_SHIFT_CONST(10)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR10_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR10_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR10_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR10_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR11_SHIFT			_MK_SHIFT_CONST(11)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR11_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR11_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR11_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR11_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR12_SHIFT			_MK_SHIFT_CONST(12)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR12_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR12_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR12_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR12_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR13_SHIFT			_MK_SHIFT_CONST(13)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR13_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR13_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR13_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR13_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR14_SHIFT			_MK_SHIFT_CONST(14)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR14_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR14_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR14_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR14_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR15_SHIFT			_MK_SHIFT_CONST(15)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR15_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR15_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR15_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR15_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR16_SHIFT			_MK_SHIFT_CONST(16)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR16_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR16_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR16_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR16_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR17_SHIFT			_MK_SHIFT_CONST(17)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR17_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR17_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR17_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR17_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR18_SHIFT			_MK_SHIFT_CONST(18)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR18_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR18_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR18_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR18_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR19_SHIFT			_MK_SHIFT_CONST(19)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR19_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR19_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR19_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR19_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR20_SHIFT			_MK_SHIFT_CONST(20)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR20_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR20_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR20_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR20_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR21_SHIFT			_MK_SHIFT_CONST(21)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR21_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR21_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR21_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR21_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR22_SHIFT			_MK_SHIFT_CONST(22)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR22_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR22_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR22_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR22_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR23_SHIFT			_MK_SHIFT_CONST(23)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR23_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR23_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR23_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR23_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR24_SHIFT			_MK_SHIFT_CONST(24)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR24_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR24_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR24_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR24_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR25_SHIFT			_MK_SHIFT_CONST(25)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR25_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR25_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR25_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR25_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR26_SHIFT			_MK_SHIFT_CONST(26)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR26_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR26_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR26_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR26_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR27_SHIFT			_MK_SHIFT_CONST(27)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR27_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR27_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR27_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR27_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR28_SHIFT			_MK_SHIFT_CONST(28)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR28_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR28_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR28_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR28_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR29_SHIFT			_MK_SHIFT_CONST(29)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR29_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR29_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR29_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR29_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR30_SHIFT			_MK_SHIFT_CONST(30)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR30_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR30_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR30_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR30_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR31_SHIFT			_MK_SHIFT_CONST(31)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR31_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR31_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR31_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE_0_ERR31_ENABLE			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0			_MK_ADDR_CONST(0xe044)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR0_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR0_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR0_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR0_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR0_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR1_SHIFT			_MK_SHIFT_CONST(1)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR1_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR1_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR1_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR1_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR2_SHIFT			_MK_SHIFT_CONST(2)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR2_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR2_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR2_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR2_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR3_SHIFT			_MK_SHIFT_CONST(3)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR3_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR3_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR3_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR3_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR4_SHIFT			_MK_SHIFT_CONST(4)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR4_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR4_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR4_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR4_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR5_SHIFT			_MK_SHIFT_CONST(5)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR5_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR5_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR5_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR5_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR6_SHIFT			_MK_SHIFT_CONST(6)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR6_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR6_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR6_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR6_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR7_SHIFT			_MK_SHIFT_CONST(7)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR7_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR7_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR7_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR7_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR8_SHIFT			_MK_SHIFT_CONST(8)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR8_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR8_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR8_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR8_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR9_SHIFT			_MK_SHIFT_CONST(9)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR9_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR9_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR9_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR9_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR10_SHIFT			_MK_SHIFT_CONST(10)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR10_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR10_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR10_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR10_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR11_SHIFT			_MK_SHIFT_CONST(11)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR11_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR11_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR11_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR11_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR12_SHIFT			_MK_SHIFT_CONST(12)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR12_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR12_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR12_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR12_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR13_SHIFT			_MK_SHIFT_CONST(13)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR13_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR13_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR13_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR13_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR14_SHIFT			_MK_SHIFT_CONST(14)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR14_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR14_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR14_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR14_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR15_SHIFT			_MK_SHIFT_CONST(15)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR15_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR15_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR15_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR15_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR16_SHIFT			_MK_SHIFT_CONST(16)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR16_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR16_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR16_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR16_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR17_SHIFT			_MK_SHIFT_CONST(17)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR17_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR17_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR17_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR17_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR18_SHIFT			_MK_SHIFT_CONST(18)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR18_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR18_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR18_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR18_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR19_SHIFT			_MK_SHIFT_CONST(19)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR19_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR19_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR19_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR19_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR20_SHIFT			_MK_SHIFT_CONST(20)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR20_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR20_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR20_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR20_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR21_SHIFT			_MK_SHIFT_CONST(21)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR21_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR21_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR21_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR21_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR22_SHIFT			_MK_SHIFT_CONST(22)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR22_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR22_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR22_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR22_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR23_SHIFT			_MK_SHIFT_CONST(23)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR23_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR23_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR23_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR23_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR24_SHIFT			_MK_SHIFT_CONST(24)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR24_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR24_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR24_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR24_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR25_SHIFT			_MK_SHIFT_CONST(25)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR25_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR25_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR25_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR25_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR26_SHIFT			_MK_SHIFT_CONST(26)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR26_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR26_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR26_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR26_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR27_SHIFT			_MK_SHIFT_CONST(27)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR27_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR27_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR27_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR27_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR28_SHIFT			_MK_SHIFT_CONST(28)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR28_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR28_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR28_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR28_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR29_SHIFT			_MK_SHIFT_CONST(29)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR29_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR29_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR29_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR29_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR30_SHIFT			_MK_SHIFT_CONST(30)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR30_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR30_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR30_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR30_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR31_SHIFT			_MK_SHIFT_CONST(31)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR31_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR31_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR31_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE_0_ERR31_FORCE			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0			_MK_ADDR_CONST(0xe048)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR0_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR0_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR0_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR1_SHIFT			_MK_SHIFT_CONST(1)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR1_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR1_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR2_SHIFT			_MK_SHIFT_CONST(2)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR2_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR2_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR3_SHIFT			_MK_SHIFT_CONST(3)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR3_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR3_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR4_SHIFT			_MK_SHIFT_CONST(4)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR4_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR4_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR5_SHIFT			_MK_SHIFT_CONST(5)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR5_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR5_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR6_SHIFT			_MK_SHIFT_CONST(6)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR6_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR6_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR7_SHIFT			_MK_SHIFT_CONST(7)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR7_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR7_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR8_SHIFT			_MK_SHIFT_CONST(8)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR8_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR8_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR9_SHIFT			_MK_SHIFT_CONST(9)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR9_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR9_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR10_SHIFT			_MK_SHIFT_CONST(10)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR10_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR10_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR11_SHIFT			_MK_SHIFT_CONST(11)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR11_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR11_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR12_SHIFT			_MK_SHIFT_CONST(12)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR12_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR12_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR13_SHIFT			_MK_SHIFT_CONST(13)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR13_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR13_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR14_SHIFT			_MK_SHIFT_CONST(14)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR14_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR14_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR15_SHIFT			_MK_SHIFT_CONST(15)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR15_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR15_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR16_SHIFT			_MK_SHIFT_CONST(16)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR16_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR16_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR17_SHIFT			_MK_SHIFT_CONST(17)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR17_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR17_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR18_SHIFT			_MK_SHIFT_CONST(18)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR18_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR18_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR19_SHIFT			_MK_SHIFT_CONST(19)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR19_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR19_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR20_SHIFT			_MK_SHIFT_CONST(20)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR20_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR20_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR21_SHIFT			_MK_SHIFT_CONST(21)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR21_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR21_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR22_SHIFT			_MK_SHIFT_CONST(22)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR22_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR22_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR23_SHIFT			_MK_SHIFT_CONST(23)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR23_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR23_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR24_SHIFT			_MK_SHIFT_CONST(24)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR24_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR24_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR25_SHIFT			_MK_SHIFT_CONST(25)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR25_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR25_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR26_SHIFT			_MK_SHIFT_CONST(26)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR26_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR26_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR27_SHIFT			_MK_SHIFT_CONST(27)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR27_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR27_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR28_SHIFT			_MK_SHIFT_CONST(28)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR28_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR28_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR29_SHIFT			_MK_SHIFT_CONST(29)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR29_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR29_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR30_SHIFT			_MK_SHIFT_CONST(30)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR30_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR30_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR31_SHIFT			_MK_SHIFT_CONST(31)
> +#define NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR31_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS_0_ERR31_SHIFT)
> +
> +
> +// Register NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0			_MK_ADDR_CONST(0xe050)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR0_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR0_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR0_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR0_NORELOAD			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR0_RELOAD			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR1_SHIFT			_MK_SHIFT_CONST(1)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR1_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR1_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR1_NORELOAD			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR1_RELOAD			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR2_SHIFT			_MK_SHIFT_CONST(2)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR2_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR2_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR2_NORELOAD			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR2_RELOAD			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR3_SHIFT			_MK_SHIFT_CONST(3)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR3_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR3_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR3_NORELOAD			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR3_RELOAD			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR4_SHIFT			_MK_SHIFT_CONST(4)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR4_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR4_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR4_NORELOAD			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR4_RELOAD			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR5_SHIFT			_MK_SHIFT_CONST(5)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR5_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR5_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR5_NORELOAD			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR5_RELOAD			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR6_SHIFT			_MK_SHIFT_CONST(6)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR6_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR6_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR6_NORELOAD			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR6_RELOAD			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR7_SHIFT			_MK_SHIFT_CONST(7)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR7_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR7_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR7_NORELOAD			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR7_RELOAD			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR8_SHIFT			_MK_SHIFT_CONST(8)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR8_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR8_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR8_NORELOAD			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR8_RELOAD			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR9_SHIFT			_MK_SHIFT_CONST(9)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR9_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR9_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR9_NORELOAD			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR9_RELOAD			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR10_SHIFT			_MK_SHIFT_CONST(10)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR10_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR10_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR10_NORELOAD			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR10_RELOAD			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR11_SHIFT			_MK_SHIFT_CONST(11)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR11_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR11_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR11_NORELOAD			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR11_RELOAD			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR12_SHIFT			_MK_SHIFT_CONST(12)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR12_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR12_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR12_NORELOAD			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR12_RELOAD			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR13_SHIFT			_MK_SHIFT_CONST(13)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR13_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR13_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR13_NORELOAD			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR13_RELOAD			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR14_SHIFT			_MK_SHIFT_CONST(14)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR14_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR14_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR14_NORELOAD			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR14_RELOAD			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR15_SHIFT			_MK_SHIFT_CONST(15)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR15_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR15_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR15_NORELOAD			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR15_RELOAD			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR16_SHIFT			_MK_SHIFT_CONST(16)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR16_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR16_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR16_NORELOAD			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR16_RELOAD			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR17_SHIFT			_MK_SHIFT_CONST(17)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR17_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR17_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR17_NORELOAD			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR17_RELOAD			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR18_SHIFT			_MK_SHIFT_CONST(18)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR18_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR18_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR18_NORELOAD			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR18_RELOAD			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR19_SHIFT			_MK_SHIFT_CONST(19)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR19_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR19_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR19_NORELOAD			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR19_RELOAD			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR20_SHIFT			_MK_SHIFT_CONST(20)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR20_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR20_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR20_NORELOAD			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR20_RELOAD			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR21_SHIFT			_MK_SHIFT_CONST(21)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR21_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR21_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR21_NORELOAD			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR21_RELOAD			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR22_SHIFT			_MK_SHIFT_CONST(22)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR22_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR22_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR22_NORELOAD			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR22_RELOAD			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR23_SHIFT			_MK_SHIFT_CONST(23)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR23_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR23_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR23_NORELOAD			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR23_RELOAD			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR24_SHIFT			_MK_SHIFT_CONST(24)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR24_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR24_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR24_NORELOAD			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR24_RELOAD			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR25_SHIFT			_MK_SHIFT_CONST(25)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR25_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR25_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR25_NORELOAD			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR25_RELOAD			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR26_SHIFT			_MK_SHIFT_CONST(26)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR26_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR26_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR26_NORELOAD			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR26_RELOAD			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR27_SHIFT			_MK_SHIFT_CONST(27)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR27_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR27_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR27_NORELOAD			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR27_RELOAD			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR28_SHIFT			_MK_SHIFT_CONST(28)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR28_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR28_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR28_NORELOAD			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR28_RELOAD			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR29_SHIFT			_MK_SHIFT_CONST(29)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR29_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR29_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR29_NORELOAD			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR29_RELOAD			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR30_SHIFT			_MK_SHIFT_CONST(30)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR30_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR30_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR30_NORELOAD			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR30_RELOAD			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR31_SHIFT			_MK_SHIFT_CONST(31)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR31_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR31_SHIFT)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR31_NORELOAD			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD_0_ERR31_RELOAD			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0			_MK_ADDR_CONST(0xe060)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR32_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR32_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR32_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR32_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR32_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR33_SHIFT			_MK_SHIFT_CONST(1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR33_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR33_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR33_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR33_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR34_SHIFT			_MK_SHIFT_CONST(2)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR34_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR34_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR34_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR34_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR35_SHIFT			_MK_SHIFT_CONST(3)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR35_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR35_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR35_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR35_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR36_SHIFT			_MK_SHIFT_CONST(4)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR36_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR36_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR36_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR36_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR37_SHIFT			_MK_SHIFT_CONST(5)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR37_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR37_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR37_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR37_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR38_SHIFT			_MK_SHIFT_CONST(6)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR38_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR38_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR38_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR38_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR39_SHIFT			_MK_SHIFT_CONST(7)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR39_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR39_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR39_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR39_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR40_SHIFT			_MK_SHIFT_CONST(8)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR40_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR40_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR40_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR40_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR41_SHIFT			_MK_SHIFT_CONST(9)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR41_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR41_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR41_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR41_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR42_SHIFT			_MK_SHIFT_CONST(10)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR42_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR42_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR42_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR42_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR43_SHIFT			_MK_SHIFT_CONST(11)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR43_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR43_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR43_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR43_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR44_SHIFT			_MK_SHIFT_CONST(12)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR44_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR44_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR44_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR44_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR45_SHIFT			_MK_SHIFT_CONST(13)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR45_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR45_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR45_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR45_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR46_SHIFT			_MK_SHIFT_CONST(14)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR46_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR46_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR46_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR46_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR47_SHIFT			_MK_SHIFT_CONST(15)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR47_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR47_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR47_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR47_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR48_SHIFT			_MK_SHIFT_CONST(16)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR48_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR48_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR48_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR48_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR49_SHIFT			_MK_SHIFT_CONST(17)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR49_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR49_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR49_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR49_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR50_SHIFT			_MK_SHIFT_CONST(18)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR50_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR50_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR50_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR50_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR51_SHIFT			_MK_SHIFT_CONST(19)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR51_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR51_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR51_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR51_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR52_SHIFT			_MK_SHIFT_CONST(20)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR52_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR52_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR52_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR52_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR53_SHIFT			_MK_SHIFT_CONST(21)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR53_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR53_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR53_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR53_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR54_SHIFT			_MK_SHIFT_CONST(22)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR54_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR54_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR54_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR54_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR55_SHIFT			_MK_SHIFT_CONST(23)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR55_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR55_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR55_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR55_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR56_SHIFT			_MK_SHIFT_CONST(24)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR56_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR56_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR56_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR56_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR57_SHIFT			_MK_SHIFT_CONST(25)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR57_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR57_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR57_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR57_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR58_SHIFT			_MK_SHIFT_CONST(26)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR58_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR58_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR58_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR58_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR59_SHIFT			_MK_SHIFT_CONST(27)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR59_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR59_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR59_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR59_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR60_SHIFT			_MK_SHIFT_CONST(28)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR60_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR60_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR60_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR60_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR61_SHIFT			_MK_SHIFT_CONST(29)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR61_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR61_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR61_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR61_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR62_SHIFT			_MK_SHIFT_CONST(30)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR62_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR62_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR62_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR62_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR63_SHIFT			_MK_SHIFT_CONST(31)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR63_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR63_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR63_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE_0_ERR63_ENABLE			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0			_MK_ADDR_CONST(0xe064)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR32_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR32_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR32_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR32_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR32_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR33_SHIFT			_MK_SHIFT_CONST(1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR33_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR33_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR33_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR33_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR34_SHIFT			_MK_SHIFT_CONST(2)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR34_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR34_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR34_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR34_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR35_SHIFT			_MK_SHIFT_CONST(3)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR35_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR35_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR35_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR35_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR36_SHIFT			_MK_SHIFT_CONST(4)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR36_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR36_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR36_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR36_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR37_SHIFT			_MK_SHIFT_CONST(5)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR37_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR37_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR37_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR37_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR38_SHIFT			_MK_SHIFT_CONST(6)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR38_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR38_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR38_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR38_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR39_SHIFT			_MK_SHIFT_CONST(7)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR39_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR39_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR39_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR39_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR40_SHIFT			_MK_SHIFT_CONST(8)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR40_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR40_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR40_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR40_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR41_SHIFT			_MK_SHIFT_CONST(9)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR41_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR41_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR41_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR41_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR42_SHIFT			_MK_SHIFT_CONST(10)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR42_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR42_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR42_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR42_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR43_SHIFT			_MK_SHIFT_CONST(11)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR43_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR43_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR43_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR43_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR44_SHIFT			_MK_SHIFT_CONST(12)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR44_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR44_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR44_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR44_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR45_SHIFT			_MK_SHIFT_CONST(13)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR45_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR45_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR45_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR45_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR46_SHIFT			_MK_SHIFT_CONST(14)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR46_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR46_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR46_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR46_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR47_SHIFT			_MK_SHIFT_CONST(15)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR47_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR47_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR47_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR47_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR48_SHIFT			_MK_SHIFT_CONST(16)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR48_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR48_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR48_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR48_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR49_SHIFT			_MK_SHIFT_CONST(17)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR49_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR49_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR49_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR49_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR50_SHIFT			_MK_SHIFT_CONST(18)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR50_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR50_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR50_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR50_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR51_SHIFT			_MK_SHIFT_CONST(19)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR51_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR51_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR51_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR51_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR52_SHIFT			_MK_SHIFT_CONST(20)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR52_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR52_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR52_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR52_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR53_SHIFT			_MK_SHIFT_CONST(21)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR53_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR53_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR53_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR53_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR54_SHIFT			_MK_SHIFT_CONST(22)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR54_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR54_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR54_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR54_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR55_SHIFT			_MK_SHIFT_CONST(23)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR55_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR55_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR55_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR55_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR56_SHIFT			_MK_SHIFT_CONST(24)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR56_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR56_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR56_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR56_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR57_SHIFT			_MK_SHIFT_CONST(25)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR57_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR57_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR57_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR57_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR58_SHIFT			_MK_SHIFT_CONST(26)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR58_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR58_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR58_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR58_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR59_SHIFT			_MK_SHIFT_CONST(27)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR59_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR59_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR59_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR59_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR60_SHIFT			_MK_SHIFT_CONST(28)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR60_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR60_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR60_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR60_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR61_SHIFT			_MK_SHIFT_CONST(29)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR61_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR61_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR61_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR61_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR62_SHIFT			_MK_SHIFT_CONST(30)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR62_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR62_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR62_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR62_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR63_SHIFT			_MK_SHIFT_CONST(31)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR63_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR63_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR63_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE_0_ERR63_FORCE			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0			_MK_ADDR_CONST(0xe068)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR32_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR32_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR32_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR33_SHIFT			_MK_SHIFT_CONST(1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR33_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR33_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR34_SHIFT			_MK_SHIFT_CONST(2)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR34_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR34_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR35_SHIFT			_MK_SHIFT_CONST(3)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR35_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR35_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR36_SHIFT			_MK_SHIFT_CONST(4)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR36_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR36_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR37_SHIFT			_MK_SHIFT_CONST(5)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR37_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR37_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR38_SHIFT			_MK_SHIFT_CONST(6)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR38_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR38_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR39_SHIFT			_MK_SHIFT_CONST(7)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR39_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR39_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR40_SHIFT			_MK_SHIFT_CONST(8)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR40_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR40_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR41_SHIFT			_MK_SHIFT_CONST(9)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR41_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR41_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR42_SHIFT			_MK_SHIFT_CONST(10)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR42_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR42_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR43_SHIFT			_MK_SHIFT_CONST(11)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR43_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR43_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR44_SHIFT			_MK_SHIFT_CONST(12)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR44_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR44_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR45_SHIFT			_MK_SHIFT_CONST(13)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR45_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR45_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR46_SHIFT			_MK_SHIFT_CONST(14)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR46_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR46_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR47_SHIFT			_MK_SHIFT_CONST(15)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR47_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR47_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR48_SHIFT			_MK_SHIFT_CONST(16)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR48_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR48_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR49_SHIFT			_MK_SHIFT_CONST(17)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR49_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR49_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR50_SHIFT			_MK_SHIFT_CONST(18)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR50_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR50_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR51_SHIFT			_MK_SHIFT_CONST(19)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR51_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR51_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR52_SHIFT			_MK_SHIFT_CONST(20)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR52_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR52_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR53_SHIFT			_MK_SHIFT_CONST(21)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR53_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR53_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR54_SHIFT			_MK_SHIFT_CONST(22)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR54_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR54_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR55_SHIFT			_MK_SHIFT_CONST(23)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR55_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR55_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR56_SHIFT			_MK_SHIFT_CONST(24)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR56_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR56_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR57_SHIFT			_MK_SHIFT_CONST(25)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR57_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR57_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR58_SHIFT			_MK_SHIFT_CONST(26)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR58_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR58_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR59_SHIFT			_MK_SHIFT_CONST(27)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR59_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR59_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR60_SHIFT			_MK_SHIFT_CONST(28)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR60_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR60_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR61_SHIFT			_MK_SHIFT_CONST(29)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR61_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR61_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR62_SHIFT			_MK_SHIFT_CONST(30)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR62_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR62_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR63_SHIFT			_MK_SHIFT_CONST(31)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR63_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS_0_ERR63_SHIFT)
> +
> +
> +// Register NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0			_MK_ADDR_CONST(0xe06c)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR32_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR32_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR32_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR32_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR32_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR33_SHIFT			_MK_SHIFT_CONST(1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR33_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR33_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR33_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR33_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR34_SHIFT			_MK_SHIFT_CONST(2)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR34_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR34_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR34_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR34_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR35_SHIFT			_MK_SHIFT_CONST(3)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR35_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR35_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR35_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR35_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR36_SHIFT			_MK_SHIFT_CONST(4)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR36_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR36_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR36_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR36_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR37_SHIFT			_MK_SHIFT_CONST(5)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR37_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR37_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR37_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR37_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR38_SHIFT			_MK_SHIFT_CONST(6)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR38_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR38_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR38_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR38_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR39_SHIFT			_MK_SHIFT_CONST(7)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR39_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR39_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR39_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR39_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR40_SHIFT			_MK_SHIFT_CONST(8)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR40_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR40_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR40_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR40_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR41_SHIFT			_MK_SHIFT_CONST(9)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR41_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR41_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR41_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR41_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR42_SHIFT			_MK_SHIFT_CONST(10)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR42_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR42_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR42_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR42_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR43_SHIFT			_MK_SHIFT_CONST(11)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR43_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR43_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR43_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR43_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR44_SHIFT			_MK_SHIFT_CONST(12)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR44_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR44_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR44_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR44_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR45_SHIFT			_MK_SHIFT_CONST(13)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR45_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR45_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR45_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR45_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR46_SHIFT			_MK_SHIFT_CONST(14)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR46_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR46_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR46_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR46_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR47_SHIFT			_MK_SHIFT_CONST(15)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR47_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR47_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR47_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR47_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR48_SHIFT			_MK_SHIFT_CONST(16)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR48_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR48_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR48_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR48_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR49_SHIFT			_MK_SHIFT_CONST(17)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR49_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR49_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR49_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR49_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR50_SHIFT			_MK_SHIFT_CONST(18)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR50_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR50_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR50_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR50_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR51_SHIFT			_MK_SHIFT_CONST(19)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR51_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR51_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR51_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR51_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR52_SHIFT			_MK_SHIFT_CONST(20)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR52_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR52_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR52_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR52_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR53_SHIFT			_MK_SHIFT_CONST(21)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR53_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR53_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR53_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR53_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR54_SHIFT			_MK_SHIFT_CONST(22)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR54_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR54_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR54_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR54_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR55_SHIFT			_MK_SHIFT_CONST(23)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR55_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR55_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR55_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR55_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR56_SHIFT			_MK_SHIFT_CONST(24)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR56_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR56_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR56_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR56_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR57_SHIFT			_MK_SHIFT_CONST(25)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR57_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR57_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR57_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR57_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR58_SHIFT			_MK_SHIFT_CONST(26)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR58_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR58_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR58_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR58_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR59_SHIFT			_MK_SHIFT_CONST(27)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR59_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR59_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR59_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR59_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR60_SHIFT			_MK_SHIFT_CONST(28)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR60_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR60_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR60_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR60_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR61_SHIFT			_MK_SHIFT_CONST(29)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR61_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR61_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR61_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR61_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR62_SHIFT			_MK_SHIFT_CONST(30)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR62_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR62_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR62_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR62_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR63_SHIFT			_MK_SHIFT_CONST(31)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR63_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR63_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR63_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT_0_ERR63_ENABLE			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0			_MK_ADDR_CONST(0xe070)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR32_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR32_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR32_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR32_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR32_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR33_SHIFT			_MK_SHIFT_CONST(1)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR33_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR33_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR33_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR33_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR34_SHIFT			_MK_SHIFT_CONST(2)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR34_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR34_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR34_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR34_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR35_SHIFT			_MK_SHIFT_CONST(3)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR35_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR35_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR35_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR35_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR36_SHIFT			_MK_SHIFT_CONST(4)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR36_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR36_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR36_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR36_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR37_SHIFT			_MK_SHIFT_CONST(5)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR37_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR37_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR37_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR37_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR38_SHIFT			_MK_SHIFT_CONST(6)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR38_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR38_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR38_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR38_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR39_SHIFT			_MK_SHIFT_CONST(7)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR39_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR39_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR39_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR39_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR40_SHIFT			_MK_SHIFT_CONST(8)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR40_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR40_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR40_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR40_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR41_SHIFT			_MK_SHIFT_CONST(9)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR41_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR41_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR41_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR41_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR42_SHIFT			_MK_SHIFT_CONST(10)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR42_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR42_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR42_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR42_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR43_SHIFT			_MK_SHIFT_CONST(11)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR43_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR43_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR43_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR43_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR44_SHIFT			_MK_SHIFT_CONST(12)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR44_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR44_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR44_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR44_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR45_SHIFT			_MK_SHIFT_CONST(13)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR45_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR45_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR45_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR45_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR46_SHIFT			_MK_SHIFT_CONST(14)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR46_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR46_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR46_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR46_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR47_SHIFT			_MK_SHIFT_CONST(15)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR47_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR47_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR47_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR47_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR48_SHIFT			_MK_SHIFT_CONST(16)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR48_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR48_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR48_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR48_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR49_SHIFT			_MK_SHIFT_CONST(17)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR49_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR49_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR49_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR49_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR50_SHIFT			_MK_SHIFT_CONST(18)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR50_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR50_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR50_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR50_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR51_SHIFT			_MK_SHIFT_CONST(19)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR51_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR51_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR51_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR51_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR52_SHIFT			_MK_SHIFT_CONST(20)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR52_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR52_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR52_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR52_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR53_SHIFT			_MK_SHIFT_CONST(21)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR53_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR53_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR53_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR53_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR54_SHIFT			_MK_SHIFT_CONST(22)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR54_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR54_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR54_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR54_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR55_SHIFT			_MK_SHIFT_CONST(23)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR55_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR55_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR55_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR55_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR56_SHIFT			_MK_SHIFT_CONST(24)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR56_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR56_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR56_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR56_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR57_SHIFT			_MK_SHIFT_CONST(25)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR57_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR57_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR57_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR57_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR58_SHIFT			_MK_SHIFT_CONST(26)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR58_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR58_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR58_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR58_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR59_SHIFT			_MK_SHIFT_CONST(27)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR59_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR59_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR59_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR59_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR60_SHIFT			_MK_SHIFT_CONST(28)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR60_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR60_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR60_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR60_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR61_SHIFT			_MK_SHIFT_CONST(29)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR61_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR61_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR61_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR61_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR62_SHIFT			_MK_SHIFT_CONST(30)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR62_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR62_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR62_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR62_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR63_SHIFT			_MK_SHIFT_CONST(31)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR63_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR63_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR63_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE_0_ERR63_ENABLE			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0			_MK_ADDR_CONST(0xe074)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR32_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR32_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR32_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR32_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR32_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR33_SHIFT			_MK_SHIFT_CONST(1)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR33_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR33_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR33_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR33_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR34_SHIFT			_MK_SHIFT_CONST(2)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR34_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR34_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR34_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR34_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR35_SHIFT			_MK_SHIFT_CONST(3)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR35_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR35_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR35_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR35_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR36_SHIFT			_MK_SHIFT_CONST(4)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR36_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR36_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR36_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR36_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR37_SHIFT			_MK_SHIFT_CONST(5)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR37_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR37_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR37_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR37_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR38_SHIFT			_MK_SHIFT_CONST(6)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR38_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR38_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR38_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR38_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR39_SHIFT			_MK_SHIFT_CONST(7)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR39_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR39_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR39_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR39_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR40_SHIFT			_MK_SHIFT_CONST(8)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR40_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR40_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR40_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR40_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR41_SHIFT			_MK_SHIFT_CONST(9)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR41_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR41_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR41_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR41_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR42_SHIFT			_MK_SHIFT_CONST(10)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR42_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR42_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR42_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR42_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR43_SHIFT			_MK_SHIFT_CONST(11)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR43_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR43_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR43_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR43_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR44_SHIFT			_MK_SHIFT_CONST(12)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR44_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR44_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR44_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR44_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR45_SHIFT			_MK_SHIFT_CONST(13)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR45_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR45_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR45_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR45_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR46_SHIFT			_MK_SHIFT_CONST(14)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR46_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR46_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR46_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR46_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR47_SHIFT			_MK_SHIFT_CONST(15)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR47_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR47_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR47_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR47_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR48_SHIFT			_MK_SHIFT_CONST(16)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR48_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR48_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR48_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR48_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR49_SHIFT			_MK_SHIFT_CONST(17)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR49_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR49_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR49_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR49_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR50_SHIFT			_MK_SHIFT_CONST(18)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR50_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR50_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR50_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR50_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR51_SHIFT			_MK_SHIFT_CONST(19)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR51_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR51_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR51_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR51_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR52_SHIFT			_MK_SHIFT_CONST(20)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR52_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR52_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR52_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR52_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR53_SHIFT			_MK_SHIFT_CONST(21)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR53_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR53_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR53_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR53_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR54_SHIFT			_MK_SHIFT_CONST(22)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR54_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR54_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR54_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR54_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR55_SHIFT			_MK_SHIFT_CONST(23)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR55_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR55_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR55_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR55_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR56_SHIFT			_MK_SHIFT_CONST(24)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR56_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR56_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR56_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR56_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR57_SHIFT			_MK_SHIFT_CONST(25)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR57_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR57_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR57_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR57_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR58_SHIFT			_MK_SHIFT_CONST(26)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR58_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR58_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR58_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR58_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR59_SHIFT			_MK_SHIFT_CONST(27)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR59_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR59_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR59_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR59_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR60_SHIFT			_MK_SHIFT_CONST(28)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR60_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR60_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR60_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR60_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR61_SHIFT			_MK_SHIFT_CONST(29)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR61_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR61_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR61_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR61_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR62_SHIFT			_MK_SHIFT_CONST(30)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR62_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR62_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR62_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR62_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR63_SHIFT			_MK_SHIFT_CONST(31)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR63_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR63_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR63_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE_0_ERR63_FORCE			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0			_MK_ADDR_CONST(0xe078)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR32_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR32_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR32_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR33_SHIFT			_MK_SHIFT_CONST(1)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR33_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR33_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR34_SHIFT			_MK_SHIFT_CONST(2)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR34_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR34_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR35_SHIFT			_MK_SHIFT_CONST(3)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR35_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR35_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR36_SHIFT			_MK_SHIFT_CONST(4)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR36_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR36_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR37_SHIFT			_MK_SHIFT_CONST(5)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR37_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR37_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR38_SHIFT			_MK_SHIFT_CONST(6)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR38_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR38_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR39_SHIFT			_MK_SHIFT_CONST(7)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR39_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR39_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR40_SHIFT			_MK_SHIFT_CONST(8)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR40_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR40_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR41_SHIFT			_MK_SHIFT_CONST(9)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR41_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR41_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR42_SHIFT			_MK_SHIFT_CONST(10)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR42_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR42_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR43_SHIFT			_MK_SHIFT_CONST(11)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR43_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR43_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR44_SHIFT			_MK_SHIFT_CONST(12)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR44_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR44_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR45_SHIFT			_MK_SHIFT_CONST(13)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR45_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR45_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR46_SHIFT			_MK_SHIFT_CONST(14)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR46_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR46_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR47_SHIFT			_MK_SHIFT_CONST(15)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR47_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR47_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR48_SHIFT			_MK_SHIFT_CONST(16)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR48_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR48_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR49_SHIFT			_MK_SHIFT_CONST(17)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR49_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR49_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR50_SHIFT			_MK_SHIFT_CONST(18)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR50_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR50_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR51_SHIFT			_MK_SHIFT_CONST(19)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR51_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR51_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR52_SHIFT			_MK_SHIFT_CONST(20)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR52_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR52_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR53_SHIFT			_MK_SHIFT_CONST(21)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR53_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR53_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR54_SHIFT			_MK_SHIFT_CONST(22)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR54_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR54_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR55_SHIFT			_MK_SHIFT_CONST(23)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR55_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR55_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR56_SHIFT			_MK_SHIFT_CONST(24)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR56_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR56_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR57_SHIFT			_MK_SHIFT_CONST(25)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR57_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR57_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR58_SHIFT			_MK_SHIFT_CONST(26)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR58_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR58_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR59_SHIFT			_MK_SHIFT_CONST(27)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR59_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR59_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR60_SHIFT			_MK_SHIFT_CONST(28)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR60_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR60_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR61_SHIFT			_MK_SHIFT_CONST(29)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR61_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR61_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR62_SHIFT			_MK_SHIFT_CONST(30)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR62_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR62_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR63_SHIFT			_MK_SHIFT_CONST(31)
> +#define NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR63_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS_0_ERR63_SHIFT)
> +
> +
> +// Register NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0			_MK_ADDR_CONST(0xe080)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR32_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR32_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR32_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR32_NORELOAD			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR32_RELOAD			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR33_SHIFT			_MK_SHIFT_CONST(1)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR33_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR33_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR33_NORELOAD			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR33_RELOAD			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR34_SHIFT			_MK_SHIFT_CONST(2)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR34_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR34_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR34_NORELOAD			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR34_RELOAD			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR35_SHIFT			_MK_SHIFT_CONST(3)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR35_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR35_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR35_NORELOAD			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR35_RELOAD			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR36_SHIFT			_MK_SHIFT_CONST(4)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR36_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR36_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR36_NORELOAD			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR36_RELOAD			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR37_SHIFT			_MK_SHIFT_CONST(5)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR37_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR37_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR37_NORELOAD			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR37_RELOAD			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR38_SHIFT			_MK_SHIFT_CONST(6)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR38_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR38_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR38_NORELOAD			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR38_RELOAD			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR39_SHIFT			_MK_SHIFT_CONST(7)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR39_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR39_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR39_NORELOAD			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR39_RELOAD			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR40_SHIFT			_MK_SHIFT_CONST(8)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR40_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR40_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR40_NORELOAD			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR40_RELOAD			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR41_SHIFT			_MK_SHIFT_CONST(9)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR41_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR41_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR41_NORELOAD			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR41_RELOAD			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR42_SHIFT			_MK_SHIFT_CONST(10)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR42_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR42_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR42_NORELOAD			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR42_RELOAD			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR43_SHIFT			_MK_SHIFT_CONST(11)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR43_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR43_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR43_NORELOAD			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR43_RELOAD			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR44_SHIFT			_MK_SHIFT_CONST(12)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR44_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR44_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR44_NORELOAD			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR44_RELOAD			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR45_SHIFT			_MK_SHIFT_CONST(13)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR45_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR45_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR45_NORELOAD			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR45_RELOAD			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR46_SHIFT			_MK_SHIFT_CONST(14)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR46_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR46_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR46_NORELOAD			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR46_RELOAD			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR47_SHIFT			_MK_SHIFT_CONST(15)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR47_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR47_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR47_NORELOAD			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR47_RELOAD			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR48_SHIFT			_MK_SHIFT_CONST(16)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR48_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR48_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR48_NORELOAD			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR48_RELOAD			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR49_SHIFT			_MK_SHIFT_CONST(17)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR49_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR49_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR49_NORELOAD			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR49_RELOAD			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR50_SHIFT			_MK_SHIFT_CONST(18)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR50_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR50_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR50_NORELOAD			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR50_RELOAD			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR51_SHIFT			_MK_SHIFT_CONST(19)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR51_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR51_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR51_NORELOAD			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR51_RELOAD			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR52_SHIFT			_MK_SHIFT_CONST(20)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR52_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR52_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR52_NORELOAD			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR52_RELOAD			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR53_SHIFT			_MK_SHIFT_CONST(21)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR53_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR53_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR53_NORELOAD			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR53_RELOAD			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR54_SHIFT			_MK_SHIFT_CONST(22)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR54_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR54_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR54_NORELOAD			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR54_RELOAD			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR55_SHIFT			_MK_SHIFT_CONST(23)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR55_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR55_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR55_NORELOAD			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR55_RELOAD			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR56_SHIFT			_MK_SHIFT_CONST(24)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR56_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR56_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR56_NORELOAD			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR56_RELOAD			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR57_SHIFT			_MK_SHIFT_CONST(25)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR57_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR57_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR57_NORELOAD			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR57_RELOAD			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR58_SHIFT			_MK_SHIFT_CONST(26)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR58_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR58_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR58_NORELOAD			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR58_RELOAD			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR59_SHIFT			_MK_SHIFT_CONST(27)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR59_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR59_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR59_NORELOAD			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR59_RELOAD			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR60_SHIFT			_MK_SHIFT_CONST(28)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR60_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR60_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR60_NORELOAD			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR60_RELOAD			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR61_SHIFT			_MK_SHIFT_CONST(29)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR61_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR61_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR61_NORELOAD			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR61_RELOAD			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR62_SHIFT			_MK_SHIFT_CONST(30)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR62_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR62_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR62_NORELOAD			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR62_RELOAD			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR63_SHIFT			_MK_SHIFT_CONST(31)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR63_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR63_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR63_NORELOAD			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD_0_ERR63_RELOAD			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register NVDLA_GEC_ERRSLICE1_MISSIONERR_ECC_CORRECTION_DIS_0
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ECC_CORRECTION_DIS_0			_MK_ADDR_CONST(0xe084)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ECC_CORRECTION_DIS_0_ERR63_SHIFT			_MK_SHIFT_CONST(31)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ECC_CORRECTION_DIS_0_ERR63_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE1_MISSIONERR_ECC_CORRECTION_DIS_0_ERR63_SHIFT)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ECC_CORRECTION_DIS_0_ERR63_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE1_MISSIONERR_ECC_CORRECTION_DIS_0_ERR63_ENABLE			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register NVDLA_GEC_ERRSLICE2_MISSIONERR_ENABLE_0
> +#define NVDLA_GEC_ERRSLICE2_MISSIONERR_ENABLE_0			_MK_ADDR_CONST(0xe090)
> +#define NVDLA_GEC_ERRSLICE2_MISSIONERR_ENABLE_0_ERR64_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_GEC_ERRSLICE2_MISSIONERR_ENABLE_0_ERR64_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE2_MISSIONERR_ENABLE_0_ERR64_SHIFT)
> +#define NVDLA_GEC_ERRSLICE2_MISSIONERR_ENABLE_0_ERR64_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE2_MISSIONERR_ENABLE_0_ERR64_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE2_MISSIONERR_ENABLE_0_ERR65_SHIFT			_MK_SHIFT_CONST(1)
> +#define NVDLA_GEC_ERRSLICE2_MISSIONERR_ENABLE_0_ERR65_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE2_MISSIONERR_ENABLE_0_ERR65_SHIFT)
> +#define NVDLA_GEC_ERRSLICE2_MISSIONERR_ENABLE_0_ERR65_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE2_MISSIONERR_ENABLE_0_ERR65_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE2_MISSIONERR_ENABLE_0_ERR66_SHIFT			_MK_SHIFT_CONST(2)
> +#define NVDLA_GEC_ERRSLICE2_MISSIONERR_ENABLE_0_ERR66_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE2_MISSIONERR_ENABLE_0_ERR66_SHIFT)
> +#define NVDLA_GEC_ERRSLICE2_MISSIONERR_ENABLE_0_ERR66_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE2_MISSIONERR_ENABLE_0_ERR66_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE2_MISSIONERR_ENABLE_0_ERR67_SHIFT			_MK_SHIFT_CONST(3)
> +#define NVDLA_GEC_ERRSLICE2_MISSIONERR_ENABLE_0_ERR67_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE2_MISSIONERR_ENABLE_0_ERR67_SHIFT)
> +#define NVDLA_GEC_ERRSLICE2_MISSIONERR_ENABLE_0_ERR67_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE2_MISSIONERR_ENABLE_0_ERR67_ENABLE			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register NVDLA_GEC_ERRSLICE2_MISSIONERR_FORCE_0
> +#define NVDLA_GEC_ERRSLICE2_MISSIONERR_FORCE_0			_MK_ADDR_CONST(0xe094)
> +#define NVDLA_GEC_ERRSLICE2_MISSIONERR_FORCE_0_ERR64_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_GEC_ERRSLICE2_MISSIONERR_FORCE_0_ERR64_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE2_MISSIONERR_FORCE_0_ERR64_SHIFT)
> +#define NVDLA_GEC_ERRSLICE2_MISSIONERR_FORCE_0_ERR64_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE2_MISSIONERR_FORCE_0_ERR64_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE2_MISSIONERR_FORCE_0_ERR65_SHIFT			_MK_SHIFT_CONST(1)
> +#define NVDLA_GEC_ERRSLICE2_MISSIONERR_FORCE_0_ERR65_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE2_MISSIONERR_FORCE_0_ERR65_SHIFT)
> +#define NVDLA_GEC_ERRSLICE2_MISSIONERR_FORCE_0_ERR65_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE2_MISSIONERR_FORCE_0_ERR65_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE2_MISSIONERR_FORCE_0_ERR66_SHIFT			_MK_SHIFT_CONST(2)
> +#define NVDLA_GEC_ERRSLICE2_MISSIONERR_FORCE_0_ERR66_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE2_MISSIONERR_FORCE_0_ERR66_SHIFT)
> +#define NVDLA_GEC_ERRSLICE2_MISSIONERR_FORCE_0_ERR66_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE2_MISSIONERR_FORCE_0_ERR66_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE2_MISSIONERR_FORCE_0_ERR67_SHIFT			_MK_SHIFT_CONST(3)
> +#define NVDLA_GEC_ERRSLICE2_MISSIONERR_FORCE_0_ERR67_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE2_MISSIONERR_FORCE_0_ERR67_SHIFT)
> +#define NVDLA_GEC_ERRSLICE2_MISSIONERR_FORCE_0_ERR67_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE2_MISSIONERR_FORCE_0_ERR67_FORCE			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register NVDLA_GEC_ERRSLICE2_MISSIONERR_STATUS_0
> +#define NVDLA_GEC_ERRSLICE2_MISSIONERR_STATUS_0			_MK_ADDR_CONST(0xe098)
> +#define NVDLA_GEC_ERRSLICE2_MISSIONERR_STATUS_0_ERR64_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_GEC_ERRSLICE2_MISSIONERR_STATUS_0_ERR64_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE2_MISSIONERR_STATUS_0_ERR64_SHIFT)
> +#define NVDLA_GEC_ERRSLICE2_MISSIONERR_STATUS_0_ERR65_SHIFT			_MK_SHIFT_CONST(1)
> +#define NVDLA_GEC_ERRSLICE2_MISSIONERR_STATUS_0_ERR65_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE2_MISSIONERR_STATUS_0_ERR65_SHIFT)
> +#define NVDLA_GEC_ERRSLICE2_MISSIONERR_STATUS_0_ERR66_SHIFT			_MK_SHIFT_CONST(2)
> +#define NVDLA_GEC_ERRSLICE2_MISSIONERR_STATUS_0_ERR66_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE2_MISSIONERR_STATUS_0_ERR66_SHIFT)
> +#define NVDLA_GEC_ERRSLICE2_MISSIONERR_STATUS_0_ERR67_SHIFT			_MK_SHIFT_CONST(3)
> +#define NVDLA_GEC_ERRSLICE2_MISSIONERR_STATUS_0_ERR67_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE2_MISSIONERR_STATUS_0_ERR67_SHIFT)
> +
> +
> +// Register NVDLA_GEC_ERRSLICE2_MISSIONERR_INJECT_0
> +#define NVDLA_GEC_ERRSLICE2_MISSIONERR_INJECT_0			_MK_ADDR_CONST(0xe09c)
> +#define NVDLA_GEC_ERRSLICE2_MISSIONERR_INJECT_0_ERR64_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_GEC_ERRSLICE2_MISSIONERR_INJECT_0_ERR64_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE2_MISSIONERR_INJECT_0_ERR64_SHIFT)
> +#define NVDLA_GEC_ERRSLICE2_MISSIONERR_INJECT_0_ERR64_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE2_MISSIONERR_INJECT_0_ERR64_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE2_MISSIONERR_INJECT_0_ERR65_SHIFT			_MK_SHIFT_CONST(1)
> +#define NVDLA_GEC_ERRSLICE2_MISSIONERR_INJECT_0_ERR65_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE2_MISSIONERR_INJECT_0_ERR65_SHIFT)
> +#define NVDLA_GEC_ERRSLICE2_MISSIONERR_INJECT_0_ERR65_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE2_MISSIONERR_INJECT_0_ERR65_ENABLE			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register NVDLA_GEC_ERRSLICE2_LATENTERR_ENABLE_0
> +#define NVDLA_GEC_ERRSLICE2_LATENTERR_ENABLE_0			_MK_ADDR_CONST(0xe0a0)
> +#define NVDLA_GEC_ERRSLICE2_LATENTERR_ENABLE_0_ERR64_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_GEC_ERRSLICE2_LATENTERR_ENABLE_0_ERR64_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE2_LATENTERR_ENABLE_0_ERR64_SHIFT)
> +#define NVDLA_GEC_ERRSLICE2_LATENTERR_ENABLE_0_ERR64_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE2_LATENTERR_ENABLE_0_ERR64_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE2_LATENTERR_ENABLE_0_ERR65_SHIFT			_MK_SHIFT_CONST(1)
> +#define NVDLA_GEC_ERRSLICE2_LATENTERR_ENABLE_0_ERR65_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE2_LATENTERR_ENABLE_0_ERR65_SHIFT)
> +#define NVDLA_GEC_ERRSLICE2_LATENTERR_ENABLE_0_ERR65_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE2_LATENTERR_ENABLE_0_ERR65_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE2_LATENTERR_ENABLE_0_ERR66_SHIFT			_MK_SHIFT_CONST(2)
> +#define NVDLA_GEC_ERRSLICE2_LATENTERR_ENABLE_0_ERR66_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE2_LATENTERR_ENABLE_0_ERR66_SHIFT)
> +#define NVDLA_GEC_ERRSLICE2_LATENTERR_ENABLE_0_ERR66_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE2_LATENTERR_ENABLE_0_ERR66_ENABLE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE2_LATENTERR_ENABLE_0_ERR67_SHIFT			_MK_SHIFT_CONST(3)
> +#define NVDLA_GEC_ERRSLICE2_LATENTERR_ENABLE_0_ERR67_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE2_LATENTERR_ENABLE_0_ERR67_SHIFT)
> +#define NVDLA_GEC_ERRSLICE2_LATENTERR_ENABLE_0_ERR67_DISABLE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE2_LATENTERR_ENABLE_0_ERR67_ENABLE			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register NVDLA_GEC_ERRSLICE2_LATENTERR_FORCE_0
> +#define NVDLA_GEC_ERRSLICE2_LATENTERR_FORCE_0			_MK_ADDR_CONST(0xe0a4)
> +#define NVDLA_GEC_ERRSLICE2_LATENTERR_FORCE_0_ERR64_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_GEC_ERRSLICE2_LATENTERR_FORCE_0_ERR64_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE2_LATENTERR_FORCE_0_ERR64_SHIFT)
> +#define NVDLA_GEC_ERRSLICE2_LATENTERR_FORCE_0_ERR64_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE2_LATENTERR_FORCE_0_ERR64_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE2_LATENTERR_FORCE_0_ERR65_SHIFT			_MK_SHIFT_CONST(1)
> +#define NVDLA_GEC_ERRSLICE2_LATENTERR_FORCE_0_ERR65_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE2_LATENTERR_FORCE_0_ERR65_SHIFT)
> +#define NVDLA_GEC_ERRSLICE2_LATENTERR_FORCE_0_ERR65_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE2_LATENTERR_FORCE_0_ERR65_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE2_LATENTERR_FORCE_0_ERR66_SHIFT			_MK_SHIFT_CONST(2)
> +#define NVDLA_GEC_ERRSLICE2_LATENTERR_FORCE_0_ERR66_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE2_LATENTERR_FORCE_0_ERR66_SHIFT)
> +#define NVDLA_GEC_ERRSLICE2_LATENTERR_FORCE_0_ERR66_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE2_LATENTERR_FORCE_0_ERR66_FORCE			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE2_LATENTERR_FORCE_0_ERR67_SHIFT			_MK_SHIFT_CONST(3)
> +#define NVDLA_GEC_ERRSLICE2_LATENTERR_FORCE_0_ERR67_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE2_LATENTERR_FORCE_0_ERR67_SHIFT)
> +#define NVDLA_GEC_ERRSLICE2_LATENTERR_FORCE_0_ERR67_NOFORCE			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE2_LATENTERR_FORCE_0_ERR67_FORCE			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register NVDLA_GEC_ERRSLICE2_LATENTERR_STATUS_0
> +#define NVDLA_GEC_ERRSLICE2_LATENTERR_STATUS_0			_MK_ADDR_CONST(0xe0a8)
> +#define NVDLA_GEC_ERRSLICE2_LATENTERR_STATUS_0_ERR64_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_GEC_ERRSLICE2_LATENTERR_STATUS_0_ERR64_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE2_LATENTERR_STATUS_0_ERR64_SHIFT)
> +#define NVDLA_GEC_ERRSLICE2_LATENTERR_STATUS_0_ERR65_SHIFT			_MK_SHIFT_CONST(1)
> +#define NVDLA_GEC_ERRSLICE2_LATENTERR_STATUS_0_ERR65_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE2_LATENTERR_STATUS_0_ERR65_SHIFT)
> +#define NVDLA_GEC_ERRSLICE2_LATENTERR_STATUS_0_ERR66_SHIFT			_MK_SHIFT_CONST(2)
> +#define NVDLA_GEC_ERRSLICE2_LATENTERR_STATUS_0_ERR66_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE2_LATENTERR_STATUS_0_ERR66_SHIFT)
> +#define NVDLA_GEC_ERRSLICE2_LATENTERR_STATUS_0_ERR67_SHIFT			_MK_SHIFT_CONST(3)
> +#define NVDLA_GEC_ERRSLICE2_LATENTERR_STATUS_0_ERR67_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE2_LATENTERR_STATUS_0_ERR67_SHIFT)
> +
> +
> +// Register NVDLA_GEC_ERRSLICE2_COUNTER_RELOAD_0
> +#define NVDLA_GEC_ERRSLICE2_COUNTER_RELOAD_0			_MK_ADDR_CONST(0xe0b0)
> +#define NVDLA_GEC_ERRSLICE2_COUNTER_RELOAD_0_ERR64_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_GEC_ERRSLICE2_COUNTER_RELOAD_0_ERR64_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE2_COUNTER_RELOAD_0_ERR64_SHIFT)
> +#define NVDLA_GEC_ERRSLICE2_COUNTER_RELOAD_0_ERR64_NORELOAD			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE2_COUNTER_RELOAD_0_ERR64_RELOAD			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE2_COUNTER_RELOAD_0_ERR65_SHIFT			_MK_SHIFT_CONST(1)
> +#define NVDLA_GEC_ERRSLICE2_COUNTER_RELOAD_0_ERR65_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE2_COUNTER_RELOAD_0_ERR65_SHIFT)
> +#define NVDLA_GEC_ERRSLICE2_COUNTER_RELOAD_0_ERR65_NORELOAD			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE2_COUNTER_RELOAD_0_ERR65_RELOAD			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE2_COUNTER_RELOAD_0_ERR66_SHIFT			_MK_SHIFT_CONST(2)
> +#define NVDLA_GEC_ERRSLICE2_COUNTER_RELOAD_0_ERR66_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE2_COUNTER_RELOAD_0_ERR66_SHIFT)
> +#define NVDLA_GEC_ERRSLICE2_COUNTER_RELOAD_0_ERR66_NORELOAD			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE2_COUNTER_RELOAD_0_ERR66_RELOAD			_MK_ENUM_CONST(0x1)
> +#define NVDLA_GEC_ERRSLICE2_COUNTER_RELOAD_0_ERR67_SHIFT			_MK_SHIFT_CONST(3)
> +#define NVDLA_GEC_ERRSLICE2_COUNTER_RELOAD_0_ERR67_FIELD			_MK_FIELD_CONST(0x1, NVDLA_GEC_ERRSLICE2_COUNTER_RELOAD_0_ERR67_SHIFT)
> +#define NVDLA_GEC_ERRSLICE2_COUNTER_RELOAD_0_ERR67_NORELOAD			_MK_ENUM_CONST(0x0)
> +#define NVDLA_GEC_ERRSLICE2_COUNTER_RELOAD_0_ERR67_RELOAD			_MK_ENUM_CONST(0x1)
> +
> +
> +
> +// To satisfy various compilers and platforms,
> +// we let users control the types and syntax of certain constants, using macros.
> +#ifndef _MK_SHIFT_CONST
> +  #define _MK_SHIFT_CONST(_constant_) _constant_
> +#endif
> +#ifndef _MK_MASK_CONST
> +  #define _MK_MASK_CONST(_constant_) _constant_
> +#endif
> +#ifndef _MK_ENUM_CONST
> +  #define _MK_ENUM_CONST(_constant_) (_constant_ ## UL)
> +#endif
> +#ifndef _MK_ADDR_CONST
> +  #define _MK_ADDR_CONST(_constant_) _constant_
> +#endif
> +#ifndef _MK_FIELD_CONST
> +  #define _MK_FIELD_CONST(_mask_, _shift_) (_MK_MASK_CONST(_mask_) << _MK_SHIFT_CONST(_shift_))
> +#endif
> +
> +
> +// Register NVDLA_CVIF_CFG_RD_WEIGHT_0_0
> +#define NVDLA_CVIF_CFG_RD_WEIGHT_0_0			_MK_ADDR_CONST(0xf000)
> +#define NVDLA_CVIF_CFG_RD_WEIGHT_0_0_RD_WEIGHT_BDMA_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CVIF_CFG_RD_WEIGHT_0_0_RD_WEIGHT_BDMA_FIELD			_MK_FIELD_CONST(0xff, NVDLA_CVIF_CFG_RD_WEIGHT_0_0_RD_WEIGHT_BDMA_SHIFT)
> +#define NVDLA_CVIF_CFG_RD_WEIGHT_0_0_RD_WEIGHT_SDP_SHIFT			_MK_SHIFT_CONST(8)
> +#define NVDLA_CVIF_CFG_RD_WEIGHT_0_0_RD_WEIGHT_SDP_FIELD			_MK_FIELD_CONST(0xff, NVDLA_CVIF_CFG_RD_WEIGHT_0_0_RD_WEIGHT_SDP_SHIFT)
> +#define NVDLA_CVIF_CFG_RD_WEIGHT_0_0_RD_WEIGHT_PDP_SHIFT			_MK_SHIFT_CONST(16)
> +#define NVDLA_CVIF_CFG_RD_WEIGHT_0_0_RD_WEIGHT_PDP_FIELD			_MK_FIELD_CONST(0xff, NVDLA_CVIF_CFG_RD_WEIGHT_0_0_RD_WEIGHT_PDP_SHIFT)
> +#define NVDLA_CVIF_CFG_RD_WEIGHT_0_0_RD_WEIGHT_CDP_SHIFT			_MK_SHIFT_CONST(24)
> +#define NVDLA_CVIF_CFG_RD_WEIGHT_0_0_RD_WEIGHT_CDP_FIELD			_MK_FIELD_CONST(0xff, NVDLA_CVIF_CFG_RD_WEIGHT_0_0_RD_WEIGHT_CDP_SHIFT)
> +
> +
> +// Register NVDLA_CVIF_CFG_RD_WEIGHT_1_0
> +#define NVDLA_CVIF_CFG_RD_WEIGHT_1_0			_MK_ADDR_CONST(0xf004)
> +#define NVDLA_CVIF_CFG_RD_WEIGHT_1_0_RD_WEIGHT_SDP_B_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CVIF_CFG_RD_WEIGHT_1_0_RD_WEIGHT_SDP_B_FIELD			_MK_FIELD_CONST(0xff, NVDLA_CVIF_CFG_RD_WEIGHT_1_0_RD_WEIGHT_SDP_B_SHIFT)
> +#define NVDLA_CVIF_CFG_RD_WEIGHT_1_0_RD_WEIGHT_SDP_N_SHIFT			_MK_SHIFT_CONST(8)
> +#define NVDLA_CVIF_CFG_RD_WEIGHT_1_0_RD_WEIGHT_SDP_N_FIELD			_MK_FIELD_CONST(0xff, NVDLA_CVIF_CFG_RD_WEIGHT_1_0_RD_WEIGHT_SDP_N_SHIFT)
> +#define NVDLA_CVIF_CFG_RD_WEIGHT_1_0_RD_WEIGHT_SDP_E_SHIFT			_MK_SHIFT_CONST(16)
> +#define NVDLA_CVIF_CFG_RD_WEIGHT_1_0_RD_WEIGHT_SDP_E_FIELD			_MK_FIELD_CONST(0xff, NVDLA_CVIF_CFG_RD_WEIGHT_1_0_RD_WEIGHT_SDP_E_SHIFT)
> +#define NVDLA_CVIF_CFG_RD_WEIGHT_1_0_RD_WEIGHT_CDMA_DAT_SHIFT			_MK_SHIFT_CONST(24)
> +#define NVDLA_CVIF_CFG_RD_WEIGHT_1_0_RD_WEIGHT_CDMA_DAT_FIELD			_MK_FIELD_CONST(0xff, NVDLA_CVIF_CFG_RD_WEIGHT_1_0_RD_WEIGHT_CDMA_DAT_SHIFT)
> +
> +
> +// Register NVDLA_CVIF_CFG_RD_WEIGHT_2_0
> +#define NVDLA_CVIF_CFG_RD_WEIGHT_2_0			_MK_ADDR_CONST(0xf008)
> +#define NVDLA_CVIF_CFG_RD_WEIGHT_2_0_RD_WEIGHT_CDMA_WT_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CVIF_CFG_RD_WEIGHT_2_0_RD_WEIGHT_CDMA_WT_FIELD			_MK_FIELD_CONST(0xff, NVDLA_CVIF_CFG_RD_WEIGHT_2_0_RD_WEIGHT_CDMA_WT_SHIFT)
> +#define NVDLA_CVIF_CFG_RD_WEIGHT_2_0_RD_WEIGHT_RBK_SHIFT			_MK_SHIFT_CONST(8)
> +#define NVDLA_CVIF_CFG_RD_WEIGHT_2_0_RD_WEIGHT_RBK_FIELD			_MK_FIELD_CONST(0xff, NVDLA_CVIF_CFG_RD_WEIGHT_2_0_RD_WEIGHT_RBK_SHIFT)
> +#define NVDLA_CVIF_CFG_RD_WEIGHT_2_0_RD_WEIGHT_RSV_1_SHIFT			_MK_SHIFT_CONST(16)
> +#define NVDLA_CVIF_CFG_RD_WEIGHT_2_0_RD_WEIGHT_RSV_1_FIELD			_MK_FIELD_CONST(0xff, NVDLA_CVIF_CFG_RD_WEIGHT_2_0_RD_WEIGHT_RSV_1_SHIFT)
> +#define NVDLA_CVIF_CFG_RD_WEIGHT_2_0_RD_WEIGHT_RSV_0_SHIFT			_MK_SHIFT_CONST(24)
> +#define NVDLA_CVIF_CFG_RD_WEIGHT_2_0_RD_WEIGHT_RSV_0_FIELD			_MK_FIELD_CONST(0xff, NVDLA_CVIF_CFG_RD_WEIGHT_2_0_RD_WEIGHT_RSV_0_SHIFT)
> +
> +
> +// Register NVDLA_CVIF_CFG_WR_WEIGHT_0_0
> +#define NVDLA_CVIF_CFG_WR_WEIGHT_0_0			_MK_ADDR_CONST(0xf00c)
> +#define NVDLA_CVIF_CFG_WR_WEIGHT_0_0_WR_WEIGHT_BDMA_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CVIF_CFG_WR_WEIGHT_0_0_WR_WEIGHT_BDMA_FIELD			_MK_FIELD_CONST(0xff, NVDLA_CVIF_CFG_WR_WEIGHT_0_0_WR_WEIGHT_BDMA_SHIFT)
> +#define NVDLA_CVIF_CFG_WR_WEIGHT_0_0_WR_WEIGHT_SDP_SHIFT			_MK_SHIFT_CONST(8)
> +#define NVDLA_CVIF_CFG_WR_WEIGHT_0_0_WR_WEIGHT_SDP_FIELD			_MK_FIELD_CONST(0xff, NVDLA_CVIF_CFG_WR_WEIGHT_0_0_WR_WEIGHT_SDP_SHIFT)
> +#define NVDLA_CVIF_CFG_WR_WEIGHT_0_0_WR_WEIGHT_PDP_SHIFT			_MK_SHIFT_CONST(16)
> +#define NVDLA_CVIF_CFG_WR_WEIGHT_0_0_WR_WEIGHT_PDP_FIELD			_MK_FIELD_CONST(0xff, NVDLA_CVIF_CFG_WR_WEIGHT_0_0_WR_WEIGHT_PDP_SHIFT)
> +#define NVDLA_CVIF_CFG_WR_WEIGHT_0_0_WR_WEIGHT_CDP_SHIFT			_MK_SHIFT_CONST(24)
> +#define NVDLA_CVIF_CFG_WR_WEIGHT_0_0_WR_WEIGHT_CDP_FIELD			_MK_FIELD_CONST(0xff, NVDLA_CVIF_CFG_WR_WEIGHT_0_0_WR_WEIGHT_CDP_SHIFT)
> +
> +
> +// Register NVDLA_CVIF_CFG_WR_WEIGHT_1_0
> +#define NVDLA_CVIF_CFG_WR_WEIGHT_1_0			_MK_ADDR_CONST(0xf010)
> +#define NVDLA_CVIF_CFG_WR_WEIGHT_1_0_WR_WEIGHT_RBK_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CVIF_CFG_WR_WEIGHT_1_0_WR_WEIGHT_RBK_FIELD			_MK_FIELD_CONST(0xff, NVDLA_CVIF_CFG_WR_WEIGHT_1_0_WR_WEIGHT_RBK_SHIFT)
> +#define NVDLA_CVIF_CFG_WR_WEIGHT_1_0_WR_WEIGHT_RSV_2_SHIFT			_MK_SHIFT_CONST(8)
> +#define NVDLA_CVIF_CFG_WR_WEIGHT_1_0_WR_WEIGHT_RSV_2_FIELD			_MK_FIELD_CONST(0xff, NVDLA_CVIF_CFG_WR_WEIGHT_1_0_WR_WEIGHT_RSV_2_SHIFT)
> +#define NVDLA_CVIF_CFG_WR_WEIGHT_1_0_WR_WEIGHT_RSV_1_SHIFT			_MK_SHIFT_CONST(16)
> +#define NVDLA_CVIF_CFG_WR_WEIGHT_1_0_WR_WEIGHT_RSV_1_FIELD			_MK_FIELD_CONST(0xff, NVDLA_CVIF_CFG_WR_WEIGHT_1_0_WR_WEIGHT_RSV_1_SHIFT)
> +#define NVDLA_CVIF_CFG_WR_WEIGHT_1_0_WR_WEIGHT_RSV_0_SHIFT			_MK_SHIFT_CONST(24)
> +#define NVDLA_CVIF_CFG_WR_WEIGHT_1_0_WR_WEIGHT_RSV_0_FIELD			_MK_FIELD_CONST(0xff, NVDLA_CVIF_CFG_WR_WEIGHT_1_0_WR_WEIGHT_RSV_0_SHIFT)
> +
> +
> +// Register NVDLA_CVIF_CFG_OUTSTANDING_CNT_0
> +#define NVDLA_CVIF_CFG_OUTSTANDING_CNT_0			_MK_ADDR_CONST(0xf014)
> +#define NVDLA_CVIF_CFG_OUTSTANDING_CNT_0_RD_OS_CNT_SHIFT			_MK_SHIFT_CONST(0)
> +#define NVDLA_CVIF_CFG_OUTSTANDING_CNT_0_RD_OS_CNT_FIELD			_MK_FIELD_CONST(0xff, NVDLA_CVIF_CFG_OUTSTANDING_CNT_0_RD_OS_CNT_SHIFT)
> +#define NVDLA_CVIF_CFG_OUTSTANDING_CNT_0_WR_OS_CNT_SHIFT			_MK_SHIFT_CONST(8)
> +#define NVDLA_CVIF_CFG_OUTSTANDING_CNT_0_WR_OS_CNT_FIELD			_MK_FIELD_CONST(0xff, NVDLA_CVIF_CFG_OUTSTANDING_CNT_0_WR_OS_CNT_SHIFT)
> +
> +
> +// Register NVDLA_CVIF_STATUS_0
> +#define NVDLA_CVIF_STATUS_0			_MK_ADDR_CONST(0xf018)
> +#define NVDLA_CVIF_STATUS_0_IDLE_SHIFT			_MK_SHIFT_CONST(8)
> +#define NVDLA_CVIF_STATUS_0_IDLE_FIELD			_MK_FIELD_CONST(0x1, NVDLA_CVIF_STATUS_0_IDLE_SHIFT)
> +#define NVDLA_CVIF_STATUS_0_IDLE_NO			_MK_ENUM_CONST(0x0)
> +#define NVDLA_CVIF_STATUS_0_IDLE_YES			_MK_ENUM_CONST(0x1)
> +
> +
> +
> +// To satisfy various compilers and platforms,
> +// we let users control the types and syntax of certain constants, using macros.
> +#ifndef _MK_SHIFT_CONST
> +  #define _MK_SHIFT_CONST(_constant_) _constant_
> +#endif
> +#ifndef _MK_MASK_CONST
> +  #define _MK_MASK_CONST(_constant_) _constant_
> +#endif
> +#ifndef _MK_ENUM_CONST
> +  #define _MK_ENUM_CONST(_constant_) (_constant_ ## UL)
> +#endif
> +#ifndef _MK_ADDR_CONST
> +  #define _MK_ADDR_CONST(_constant_) _constant_
> +#endif
> +#ifndef _MK_FIELD_CONST
> +  #define _MK_FIELD_CONST(_mask_, _shift_) (_MK_MASK_CONST(_mask_) << _MK_SHIFT_CONST(_shift_))
> +#endif
> +
> +
> +// Register BDMA_CFG_SRC_ADDR_LOW_0
> +#define BDMA_CFG_SRC_ADDR_LOW_0			_MK_ADDR_CONST(0x10000)
> +#define BDMA_CFG_SRC_ADDR_LOW_0_V32_SHIFT			_MK_SHIFT_CONST(5)
> +#define BDMA_CFG_SRC_ADDR_LOW_0_V32_FIELD			_MK_FIELD_CONST(0x7ffffff, BDMA_CFG_SRC_ADDR_LOW_0_V32_SHIFT)
> +
> +
> +// Register BDMA_CFG_SRC_ADDR_HIGH_0
> +#define BDMA_CFG_SRC_ADDR_HIGH_0			_MK_ADDR_CONST(0x10004)
> +#define BDMA_CFG_SRC_ADDR_HIGH_0_V8_SHIFT			_MK_SHIFT_CONST(0)
> +#define BDMA_CFG_SRC_ADDR_HIGH_0_V8_FIELD			_MK_FIELD_CONST(0xffffffff, BDMA_CFG_SRC_ADDR_HIGH_0_V8_SHIFT)
> +
> +
> +// Register BDMA_CFG_DST_ADDR_LOW_0
> +#define BDMA_CFG_DST_ADDR_LOW_0			_MK_ADDR_CONST(0x10008)
> +#define BDMA_CFG_DST_ADDR_LOW_0_V32_SHIFT			_MK_SHIFT_CONST(5)
> +#define BDMA_CFG_DST_ADDR_LOW_0_V32_FIELD			_MK_FIELD_CONST(0x7ffffff, BDMA_CFG_DST_ADDR_LOW_0_V32_SHIFT)
> +
> +
> +// Register BDMA_CFG_DST_ADDR_HIGH_0
> +#define BDMA_CFG_DST_ADDR_HIGH_0			_MK_ADDR_CONST(0x1000c)
> +#define BDMA_CFG_DST_ADDR_HIGH_0_V8_SHIFT			_MK_SHIFT_CONST(0)
> +#define BDMA_CFG_DST_ADDR_HIGH_0_V8_FIELD			_MK_FIELD_CONST(0xffffffff, BDMA_CFG_DST_ADDR_HIGH_0_V8_SHIFT)
> +
> +
> +// Register BDMA_CFG_LINE_0
> +#define BDMA_CFG_LINE_0			_MK_ADDR_CONST(0x10010)
> +#define BDMA_CFG_LINE_0_SIZE_SHIFT			_MK_SHIFT_CONST(0)
> +#define BDMA_CFG_LINE_0_SIZE_FIELD			_MK_FIELD_CONST(0x1fff, BDMA_CFG_LINE_0_SIZE_SHIFT)
> +
> +
> +// Register BDMA_CFG_CMD_0
> +#define BDMA_CFG_CMD_0			_MK_ADDR_CONST(0x10014)
> +#define BDMA_CFG_CMD_0_SRC_RAM_TYPE_SHIFT			_MK_SHIFT_CONST(0)
> +#define BDMA_CFG_CMD_0_SRC_RAM_TYPE_FIELD			_MK_FIELD_CONST(0x1, BDMA_CFG_CMD_0_SRC_RAM_TYPE_SHIFT)
> +#define BDMA_CFG_CMD_0_SRC_RAM_TYPE_CVSRAM			_MK_ENUM_CONST(0x0)
> +#define BDMA_CFG_CMD_0_SRC_RAM_TYPE_MC			_MK_ENUM_CONST(0x1)
> +#define BDMA_CFG_CMD_0_DST_RAM_TYPE_SHIFT			_MK_SHIFT_CONST(1)
> +#define BDMA_CFG_CMD_0_DST_RAM_TYPE_FIELD			_MK_FIELD_CONST(0x1, BDMA_CFG_CMD_0_DST_RAM_TYPE_SHIFT)
> +#define BDMA_CFG_CMD_0_DST_RAM_TYPE_CVSRAM			_MK_ENUM_CONST(0x0)
> +#define BDMA_CFG_CMD_0_DST_RAM_TYPE_MC			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register BDMA_CFG_LINE_REPEAT_0
> +#define BDMA_CFG_LINE_REPEAT_0			_MK_ADDR_CONST(0x10018)
> +#define BDMA_CFG_LINE_REPEAT_0_NUMBER_SHIFT			_MK_SHIFT_CONST(0)
> +#define BDMA_CFG_LINE_REPEAT_0_NUMBER_FIELD			_MK_FIELD_CONST(0xffffff, BDMA_CFG_LINE_REPEAT_0_NUMBER_SHIFT)
> +
> +
> +// Register BDMA_CFG_SRC_LINE_0
> +#define BDMA_CFG_SRC_LINE_0			_MK_ADDR_CONST(0x1001c)
> +#define BDMA_CFG_SRC_LINE_0_STRIDE_SHIFT			_MK_SHIFT_CONST(5)
> +#define BDMA_CFG_SRC_LINE_0_STRIDE_FIELD			_MK_FIELD_CONST(0x7ffffff, BDMA_CFG_SRC_LINE_0_STRIDE_SHIFT)
> +
> +
> +// Register BDMA_CFG_DST_LINE_0
> +#define BDMA_CFG_DST_LINE_0			_MK_ADDR_CONST(0x10020)
> +#define BDMA_CFG_DST_LINE_0_STRIDE_SHIFT			_MK_SHIFT_CONST(5)
> +#define BDMA_CFG_DST_LINE_0_STRIDE_FIELD			_MK_FIELD_CONST(0x7ffffff, BDMA_CFG_DST_LINE_0_STRIDE_SHIFT)
> +
> +
> +// Register BDMA_CFG_SURF_REPEAT_0
> +#define BDMA_CFG_SURF_REPEAT_0			_MK_ADDR_CONST(0x10024)
> +#define BDMA_CFG_SURF_REPEAT_0_NUMBER_SHIFT			_MK_SHIFT_CONST(0)
> +#define BDMA_CFG_SURF_REPEAT_0_NUMBER_FIELD			_MK_FIELD_CONST(0xffffff, BDMA_CFG_SURF_REPEAT_0_NUMBER_SHIFT)
> +
> +
> +// Register BDMA_CFG_SRC_SURF_0
> +#define BDMA_CFG_SRC_SURF_0			_MK_ADDR_CONST(0x10028)
> +#define BDMA_CFG_SRC_SURF_0_STRIDE_SHIFT			_MK_SHIFT_CONST(5)
> +#define BDMA_CFG_SRC_SURF_0_STRIDE_FIELD			_MK_FIELD_CONST(0x7ffffff, BDMA_CFG_SRC_SURF_0_STRIDE_SHIFT)
> +
> +
> +// Register BDMA_CFG_DST_SURF_0
> +#define BDMA_CFG_DST_SURF_0			_MK_ADDR_CONST(0x1002c)
> +#define BDMA_CFG_DST_SURF_0_STRIDE_SHIFT			_MK_SHIFT_CONST(5)
> +#define BDMA_CFG_DST_SURF_0_STRIDE_FIELD			_MK_FIELD_CONST(0x7ffffff, BDMA_CFG_DST_SURF_0_STRIDE_SHIFT)
> +
> +
> +// Register BDMA_CFG_OP_0
> +#define BDMA_CFG_OP_0			_MK_ADDR_CONST(0x10030)
> +#define BDMA_CFG_OP_0_EN_SHIFT			_MK_SHIFT_CONST(0)
> +#define BDMA_CFG_OP_0_EN_FIELD			_MK_FIELD_CONST(0x1, BDMA_CFG_OP_0_EN_SHIFT)
> +#define BDMA_CFG_OP_0_EN_DISABLE			_MK_ENUM_CONST(0x0)
> +#define BDMA_CFG_OP_0_EN_ENABLE			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register BDMA_CFG_LAUNCH0_0
> +#define BDMA_CFG_LAUNCH0_0			_MK_ADDR_CONST(0x10034)
> +#define BDMA_CFG_LAUNCH0_0_GRP0_LAUNCH_SHIFT			_MK_SHIFT_CONST(0)
> +#define BDMA_CFG_LAUNCH0_0_GRP0_LAUNCH_FIELD			_MK_FIELD_CONST(0x1, BDMA_CFG_LAUNCH0_0_GRP0_LAUNCH_SHIFT)
> +#define BDMA_CFG_LAUNCH0_0_GRP0_LAUNCH_NO			_MK_ENUM_CONST(0x0)
> +#define BDMA_CFG_LAUNCH0_0_GRP0_LAUNCH_YES			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register BDMA_CFG_LAUNCH1_0
> +#define BDMA_CFG_LAUNCH1_0			_MK_ADDR_CONST(0x10038)
> +#define BDMA_CFG_LAUNCH1_0_GRP1_LAUNCH_SHIFT			_MK_SHIFT_CONST(0)
> +#define BDMA_CFG_LAUNCH1_0_GRP1_LAUNCH_FIELD			_MK_FIELD_CONST(0x1, BDMA_CFG_LAUNCH1_0_GRP1_LAUNCH_SHIFT)
> +#define BDMA_CFG_LAUNCH1_0_GRP1_LAUNCH_NO			_MK_ENUM_CONST(0x0)
> +#define BDMA_CFG_LAUNCH1_0_GRP1_LAUNCH_YES			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register BDMA_CFG_STATUS_0
> +#define BDMA_CFG_STATUS_0			_MK_ADDR_CONST(0x1003c)
> +#define BDMA_CFG_STATUS_0_STALL_COUNT_EN_SHIFT			_MK_SHIFT_CONST(0)
> +#define BDMA_CFG_STATUS_0_STALL_COUNT_EN_FIELD			_MK_FIELD_CONST(0x1, BDMA_CFG_STATUS_0_STALL_COUNT_EN_SHIFT)
> +#define BDMA_CFG_STATUS_0_STALL_COUNT_EN_NO			_MK_ENUM_CONST(0x0)
> +#define BDMA_CFG_STATUS_0_STALL_COUNT_EN_YES			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register BDMA_STATUS_0
> +#define BDMA_STATUS_0			_MK_ADDR_CONST(0x10040)
> +#define BDMA_STATUS_0_FREE_SLOT_SHIFT			_MK_SHIFT_CONST(0)
> +#define BDMA_STATUS_0_FREE_SLOT_FIELD			_MK_FIELD_CONST(0xff, BDMA_STATUS_0_FREE_SLOT_SHIFT)
> +#define BDMA_STATUS_0_IDLE_SHIFT			_MK_SHIFT_CONST(8)
> +#define BDMA_STATUS_0_IDLE_FIELD			_MK_FIELD_CONST(0x1, BDMA_STATUS_0_IDLE_SHIFT)
> +#define BDMA_STATUS_0_IDLE_NO			_MK_ENUM_CONST(0x0)
> +#define BDMA_STATUS_0_IDLE_YES			_MK_ENUM_CONST(0x1)
> +#define BDMA_STATUS_0_GRP0_BUSY_SHIFT			_MK_SHIFT_CONST(9)
> +#define BDMA_STATUS_0_GRP0_BUSY_FIELD			_MK_FIELD_CONST(0x1, BDMA_STATUS_0_GRP0_BUSY_SHIFT)
> +#define BDMA_STATUS_0_GRP0_BUSY_NO			_MK_ENUM_CONST(0x0)
> +#define BDMA_STATUS_0_GRP0_BUSY_YES			_MK_ENUM_CONST(0x1)
> +#define BDMA_STATUS_0_GRP1_BUSY_SHIFT			_MK_SHIFT_CONST(10)
> +#define BDMA_STATUS_0_GRP1_BUSY_FIELD			_MK_FIELD_CONST(0x1, BDMA_STATUS_0_GRP1_BUSY_SHIFT)
> +#define BDMA_STATUS_0_GRP1_BUSY_NO			_MK_ENUM_CONST(0x0)
> +#define BDMA_STATUS_0_GRP1_BUSY_YES			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register BDMA_STATUS_GRP0_READ_STALL_0
> +#define BDMA_STATUS_GRP0_READ_STALL_0			_MK_ADDR_CONST(0x10044)
> +#define BDMA_STATUS_GRP0_READ_STALL_0_COUNT_SHIFT			_MK_SHIFT_CONST(0)
> +#define BDMA_STATUS_GRP0_READ_STALL_0_COUNT_FIELD			_MK_FIELD_CONST(0xffffffff, BDMA_STATUS_GRP0_READ_STALL_0_COUNT_SHIFT)
> +
> +
> +// Register BDMA_STATUS_GRP0_WRITE_STALL_0
> +#define BDMA_STATUS_GRP0_WRITE_STALL_0			_MK_ADDR_CONST(0x10048)
> +#define BDMA_STATUS_GRP0_WRITE_STALL_0_COUNT_SHIFT			_MK_SHIFT_CONST(0)
> +#define BDMA_STATUS_GRP0_WRITE_STALL_0_COUNT_FIELD			_MK_FIELD_CONST(0xffffffff, BDMA_STATUS_GRP0_WRITE_STALL_0_COUNT_SHIFT)
> +
> +
> +// Register BDMA_STATUS_GRP1_READ_STALL_0
> +#define BDMA_STATUS_GRP1_READ_STALL_0			_MK_ADDR_CONST(0x1004c)
> +#define BDMA_STATUS_GRP1_READ_STALL_0_COUNT_SHIFT			_MK_SHIFT_CONST(0)
> +#define BDMA_STATUS_GRP1_READ_STALL_0_COUNT_FIELD			_MK_FIELD_CONST(0xffffffff, BDMA_STATUS_GRP1_READ_STALL_0_COUNT_SHIFT)
> +
> +
> +// Register BDMA_STATUS_GRP1_WRITE_STALL_0
> +#define BDMA_STATUS_GRP1_WRITE_STALL_0			_MK_ADDR_CONST(0x10050)
> +#define BDMA_STATUS_GRP1_WRITE_STALL_0_COUNT_SHIFT			_MK_SHIFT_CONST(0)
> +#define BDMA_STATUS_GRP1_WRITE_STALL_0_COUNT_FIELD			_MK_FIELD_CONST(0xffffffff, BDMA_STATUS_GRP1_WRITE_STALL_0_COUNT_SHIFT)
> +
> +
> +
> +// To satisfy various compilers and platforms,
> +// we let users control the types and syntax of certain constants, using macros.
> +#ifndef _MK_SHIFT_CONST
> +  #define _MK_SHIFT_CONST(_constant_) _constant_
> +#endif
> +#ifndef _MK_MASK_CONST
> +  #define _MK_MASK_CONST(_constant_) _constant_
> +#endif
> +#ifndef _MK_ENUM_CONST
> +  #define _MK_ENUM_CONST(_constant_) (_constant_ ## UL)
> +#endif
> +#ifndef _MK_ADDR_CONST
> +  #define _MK_ADDR_CONST(_constant_) _constant_
> +#endif
> +#ifndef _MK_FIELD_CONST
> +  #define _MK_FIELD_CONST(_mask_, _shift_) (_MK_MASK_CONST(_mask_) << _MK_SHIFT_CONST(_shift_))
> +#endif
> +
> +
> +// Register RBK_S_STATUS_0
> +#define RBK_S_STATUS_0			_MK_ADDR_CONST(0x11000)
> +#define RBK_S_STATUS_0_STATUS_0_SHIFT			_MK_SHIFT_CONST(0)
> +#define RBK_S_STATUS_0_STATUS_0_FIELD			_MK_FIELD_CONST(0x3, RBK_S_STATUS_0_STATUS_0_SHIFT)
> +#define RBK_S_STATUS_0_STATUS_0_IDLE			_MK_ENUM_CONST(0x0)
> +#define RBK_S_STATUS_0_STATUS_0_RUNNING			_MK_ENUM_CONST(0x1)
> +#define RBK_S_STATUS_0_STATUS_0_PENDING			_MK_ENUM_CONST(0x2)
> +#define RBK_S_STATUS_0_STATUS_1_SHIFT			_MK_SHIFT_CONST(16)
> +#define RBK_S_STATUS_0_STATUS_1_FIELD			_MK_FIELD_CONST(0x3, RBK_S_STATUS_0_STATUS_1_SHIFT)
> +#define RBK_S_STATUS_0_STATUS_1_IDLE			_MK_ENUM_CONST(0x0)
> +#define RBK_S_STATUS_0_STATUS_1_RUNNING			_MK_ENUM_CONST(0x1)
> +#define RBK_S_STATUS_0_STATUS_1_PENDING			_MK_ENUM_CONST(0x2)
> +
> +
> +// Register RBK_S_POINTER_0
> +#define RBK_S_POINTER_0			_MK_ADDR_CONST(0x11004)
> +#define RBK_S_POINTER_0_PRODUCER_SHIFT			_MK_SHIFT_CONST(0)
> +#define RBK_S_POINTER_0_PRODUCER_FIELD			_MK_FIELD_CONST(0x1, RBK_S_POINTER_0_PRODUCER_SHIFT)
> +#define RBK_S_POINTER_0_PRODUCER_GROUP_0			_MK_ENUM_CONST(0x0)
> +#define RBK_S_POINTER_0_PRODUCER_GROUP_1			_MK_ENUM_CONST(0x1)
> +#define RBK_S_POINTER_0_CONSUMER_SHIFT			_MK_SHIFT_CONST(16)
> +#define RBK_S_POINTER_0_CONSUMER_FIELD			_MK_FIELD_CONST(0x1, RBK_S_POINTER_0_CONSUMER_SHIFT)
> +#define RBK_S_POINTER_0_CONSUMER_GROUP_0			_MK_ENUM_CONST(0x0)
> +#define RBK_S_POINTER_0_CONSUMER_GROUP_1			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register RBK_D_OP_ENABLE_0
> +#define RBK_D_OP_ENABLE_0			_MK_ADDR_CONST(0x11008)
> +#define RBK_D_OP_ENABLE_0_OP_EN_SHIFT			_MK_SHIFT_CONST(0)
> +#define RBK_D_OP_ENABLE_0_OP_EN_FIELD			_MK_FIELD_CONST(0x1, RBK_D_OP_ENABLE_0_OP_EN_SHIFT)
> +#define RBK_D_OP_ENABLE_0_OP_EN_DISABLE			_MK_ENUM_CONST(0x0)
> +#define RBK_D_OP_ENABLE_0_OP_EN_ENABLE			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register RBK_D_MISC_CFG_0
> +#define RBK_D_MISC_CFG_0			_MK_ADDR_CONST(0x1100c)
> +#define RBK_D_MISC_CFG_0_RUBIK_MODE_SHIFT			_MK_SHIFT_CONST(0)
> +#define RBK_D_MISC_CFG_0_RUBIK_MODE_FIELD			_MK_FIELD_CONST(0x3, RBK_D_MISC_CFG_0_RUBIK_MODE_SHIFT)
> +#define RBK_D_MISC_CFG_0_RUBIK_MODE_CONTRACT			_MK_ENUM_CONST(0x0)
> +#define RBK_D_MISC_CFG_0_RUBIK_MODE_SPLIT			_MK_ENUM_CONST(0x1)
> +#define RBK_D_MISC_CFG_0_RUBIK_MODE_MERGE			_MK_ENUM_CONST(0x2)
> +#define RBK_D_MISC_CFG_0_IN_PRECISION_SHIFT			_MK_SHIFT_CONST(8)
> +#define RBK_D_MISC_CFG_0_IN_PRECISION_FIELD			_MK_FIELD_CONST(0x3, RBK_D_MISC_CFG_0_IN_PRECISION_SHIFT)
> +#define RBK_D_MISC_CFG_0_IN_PRECISION_INT8			_MK_ENUM_CONST(0x0)
> +#define RBK_D_MISC_CFG_0_IN_PRECISION_INT16			_MK_ENUM_CONST(0x1)
> +#define RBK_D_MISC_CFG_0_IN_PRECISION_FP16			_MK_ENUM_CONST(0x2)
> +
> +
> +// Register RBK_D_DAIN_RAM_TYPE_0
> +#define RBK_D_DAIN_RAM_TYPE_0			_MK_ADDR_CONST(0x11010)
> +#define RBK_D_DAIN_RAM_TYPE_0_DATAIN_RAM_TYPE_SHIFT			_MK_SHIFT_CONST(0)
> +#define RBK_D_DAIN_RAM_TYPE_0_DATAIN_RAM_TYPE_FIELD			_MK_FIELD_CONST(0x1, RBK_D_DAIN_RAM_TYPE_0_DATAIN_RAM_TYPE_SHIFT)
> +#define RBK_D_DAIN_RAM_TYPE_0_DATAIN_RAM_TYPE_CVIF			_MK_ENUM_CONST(0x0)
> +#define RBK_D_DAIN_RAM_TYPE_0_DATAIN_RAM_TYPE_MCIF			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register RBK_D_DATAIN_SIZE_0_0
> +#define RBK_D_DATAIN_SIZE_0_0			_MK_ADDR_CONST(0x11014)
> +#define RBK_D_DATAIN_SIZE_0_0_DATAIN_WIDTH_SHIFT			_MK_SHIFT_CONST(0)
> +#define RBK_D_DATAIN_SIZE_0_0_DATAIN_WIDTH_FIELD			_MK_FIELD_CONST(0x1fff, RBK_D_DATAIN_SIZE_0_0_DATAIN_WIDTH_SHIFT)
> +#define RBK_D_DATAIN_SIZE_0_0_DATAIN_HEIGHT_SHIFT			_MK_SHIFT_CONST(16)
> +#define RBK_D_DATAIN_SIZE_0_0_DATAIN_HEIGHT_FIELD			_MK_FIELD_CONST(0x1fff, RBK_D_DATAIN_SIZE_0_0_DATAIN_HEIGHT_SHIFT)
> +
> +
> +// Register RBK_D_DATAIN_SIZE_1_0
> +#define RBK_D_DATAIN_SIZE_1_0			_MK_ADDR_CONST(0x11018)
> +#define RBK_D_DATAIN_SIZE_1_0_DATAIN_CHANNEL_SHIFT			_MK_SHIFT_CONST(0)
> +#define RBK_D_DATAIN_SIZE_1_0_DATAIN_CHANNEL_FIELD			_MK_FIELD_CONST(0x1fff, RBK_D_DATAIN_SIZE_1_0_DATAIN_CHANNEL_SHIFT)
> +
> +
> +// Register RBK_D_DAIN_ADDR_HIGH_0
> +#define RBK_D_DAIN_ADDR_HIGH_0			_MK_ADDR_CONST(0x1101c)
> +#define RBK_D_DAIN_ADDR_HIGH_0_DAIN_ADDR_HIGH_SHIFT			_MK_SHIFT_CONST(0)
> +#define RBK_D_DAIN_ADDR_HIGH_0_DAIN_ADDR_HIGH_FIELD			_MK_FIELD_CONST(0xffffffff, RBK_D_DAIN_ADDR_HIGH_0_DAIN_ADDR_HIGH_SHIFT)
> +
> +
> +// Register RBK_D_DAIN_ADDR_LOW_0
> +#define RBK_D_DAIN_ADDR_LOW_0			_MK_ADDR_CONST(0x11020)
> +#define RBK_D_DAIN_ADDR_LOW_0_DAIN_ADDR_LOW_SHIFT			_MK_SHIFT_CONST(5)
> +#define RBK_D_DAIN_ADDR_LOW_0_DAIN_ADDR_LOW_FIELD			_MK_FIELD_CONST(0x7ffffff, RBK_D_DAIN_ADDR_LOW_0_DAIN_ADDR_LOW_SHIFT)
> +
> +
> +// Register RBK_D_DAIN_LINE_STRIDE_0
> +#define RBK_D_DAIN_LINE_STRIDE_0			_MK_ADDR_CONST(0x11024)
> +#define RBK_D_DAIN_LINE_STRIDE_0_DAIN_LINE_STRIDE_SHIFT			_MK_SHIFT_CONST(5)
> +#define RBK_D_DAIN_LINE_STRIDE_0_DAIN_LINE_STRIDE_FIELD			_MK_FIELD_CONST(0x7ffffff, RBK_D_DAIN_LINE_STRIDE_0_DAIN_LINE_STRIDE_SHIFT)
> +
> +
> +// Register RBK_D_DAIN_SURF_STRIDE_0
> +#define RBK_D_DAIN_SURF_STRIDE_0			_MK_ADDR_CONST(0x11028)
> +#define RBK_D_DAIN_SURF_STRIDE_0_DAIN_SURF_STRIDE_SHIFT			_MK_SHIFT_CONST(5)
> +#define RBK_D_DAIN_SURF_STRIDE_0_DAIN_SURF_STRIDE_FIELD			_MK_FIELD_CONST(0x7ffffff, RBK_D_DAIN_SURF_STRIDE_0_DAIN_SURF_STRIDE_SHIFT)
> +
> +
> +// Register RBK_D_DAIN_PLANAR_STRIDE_0
> +#define RBK_D_DAIN_PLANAR_STRIDE_0			_MK_ADDR_CONST(0x1102c)
> +#define RBK_D_DAIN_PLANAR_STRIDE_0_DAIN_PLANAR_STRIDE_SHIFT			_MK_SHIFT_CONST(5)
> +#define RBK_D_DAIN_PLANAR_STRIDE_0_DAIN_PLANAR_STRIDE_FIELD			_MK_FIELD_CONST(0x7ffffff, RBK_D_DAIN_PLANAR_STRIDE_0_DAIN_PLANAR_STRIDE_SHIFT)
> +
> +
> +// Register RBK_D_DAOUT_RAM_TYPE_0
> +#define RBK_D_DAOUT_RAM_TYPE_0			_MK_ADDR_CONST(0x11030)
> +#define RBK_D_DAOUT_RAM_TYPE_0_DATAOUT_RAM_TYPE_SHIFT			_MK_SHIFT_CONST(0)
> +#define RBK_D_DAOUT_RAM_TYPE_0_DATAOUT_RAM_TYPE_FIELD			_MK_FIELD_CONST(0x1, RBK_D_DAOUT_RAM_TYPE_0_DATAOUT_RAM_TYPE_SHIFT)
> +#define RBK_D_DAOUT_RAM_TYPE_0_DATAOUT_RAM_TYPE_CVIF			_MK_ENUM_CONST(0x0)
> +#define RBK_D_DAOUT_RAM_TYPE_0_DATAOUT_RAM_TYPE_MCIF			_MK_ENUM_CONST(0x1)
> +
> +
> +// Register RBK_D_DATAOUT_SIZE_1_0
> +#define RBK_D_DATAOUT_SIZE_1_0			_MK_ADDR_CONST(0x11034)
> +#define RBK_D_DATAOUT_SIZE_1_0_DATAOUT_CHANNEL_SHIFT			_MK_SHIFT_CONST(0)
> +#define RBK_D_DATAOUT_SIZE_1_0_DATAOUT_CHANNEL_FIELD			_MK_FIELD_CONST(0x1fff, RBK_D_DATAOUT_SIZE_1_0_DATAOUT_CHANNEL_SHIFT)
> +
> +
> +// Register RBK_D_DAOUT_ADDR_HIGH_0
> +#define RBK_D_DAOUT_ADDR_HIGH_0			_MK_ADDR_CONST(0x11038)
> +#define RBK_D_DAOUT_ADDR_HIGH_0_DAOUT_ADDR_HIGH_SHIFT			_MK_SHIFT_CONST(0)
> +#define RBK_D_DAOUT_ADDR_HIGH_0_DAOUT_ADDR_HIGH_FIELD			_MK_FIELD_CONST(0xffffffff, RBK_D_DAOUT_ADDR_HIGH_0_DAOUT_ADDR_HIGH_SHIFT)
> +
> +
> +// Register RBK_D_DAOUT_ADDR_LOW_0
> +#define RBK_D_DAOUT_ADDR_LOW_0			_MK_ADDR_CONST(0x1103c)
> +#define RBK_D_DAOUT_ADDR_LOW_0_DAOUT_ADDR_LOW_SHIFT			_MK_SHIFT_CONST(5)
> +#define RBK_D_DAOUT_ADDR_LOW_0_DAOUT_ADDR_LOW_FIELD			_MK_FIELD_CONST(0x7ffffff, RBK_D_DAOUT_ADDR_LOW_0_DAOUT_ADDR_LOW_SHIFT)
> +
> +
> +// Register RBK_D_DAOUT_LINE_STRIDE_0
> +#define RBK_D_DAOUT_LINE_STRIDE_0			_MK_ADDR_CONST(0x11040)
> +#define RBK_D_DAOUT_LINE_STRIDE_0_DAOUT_LINE_STRIDE_SHIFT			_MK_SHIFT_CONST(5)
> +#define RBK_D_DAOUT_LINE_STRIDE_0_DAOUT_LINE_STRIDE_FIELD			_MK_FIELD_CONST(0x7ffffff, RBK_D_DAOUT_LINE_STRIDE_0_DAOUT_LINE_STRIDE_SHIFT)
> +
> +
> +// Register RBK_D_CONTRACT_STRIDE_0_0
> +#define RBK_D_CONTRACT_STRIDE_0_0			_MK_ADDR_CONST(0x11044)
> +#define RBK_D_CONTRACT_STRIDE_0_0_CONTRACT_STRIDE_0_SHIFT			_MK_SHIFT_CONST(5)
> +#define RBK_D_CONTRACT_STRIDE_0_0_CONTRACT_STRIDE_0_FIELD			_MK_FIELD_CONST(0x7ffffff, RBK_D_CONTRACT_STRIDE_0_0_CONTRACT_STRIDE_0_SHIFT)
> +
> +
> +// Register RBK_D_CONTRACT_STRIDE_1_0
> +#define RBK_D_CONTRACT_STRIDE_1_0			_MK_ADDR_CONST(0x11048)
> +#define RBK_D_CONTRACT_STRIDE_1_0_CONTRACT_STRIDE_1_SHIFT			_MK_SHIFT_CONST(5)
> +#define RBK_D_CONTRACT_STRIDE_1_0_CONTRACT_STRIDE_1_FIELD			_MK_FIELD_CONST(0x7ffffff, RBK_D_CONTRACT_STRIDE_1_0_CONTRACT_STRIDE_1_SHIFT)
> +
> +
> +// Register RBK_D_DAOUT_SURF_STRIDE_0
> +#define RBK_D_DAOUT_SURF_STRIDE_0			_MK_ADDR_CONST(0x1104c)
> +#define RBK_D_DAOUT_SURF_STRIDE_0_DAOUT_SURF_STRIDE_SHIFT			_MK_SHIFT_CONST(5)
> +#define RBK_D_DAOUT_SURF_STRIDE_0_DAOUT_SURF_STRIDE_FIELD			_MK_FIELD_CONST(0x7ffffff, RBK_D_DAOUT_SURF_STRIDE_0_DAOUT_SURF_STRIDE_SHIFT)
> +
> +
> +// Register RBK_D_DAOUT_PLANAR_STRIDE_0
> +#define RBK_D_DAOUT_PLANAR_STRIDE_0			_MK_ADDR_CONST(0x11050)
> +#define RBK_D_DAOUT_PLANAR_STRIDE_0_DAOUT_PLANAR_STRIDE_SHIFT			_MK_SHIFT_CONST(5)
> +#define RBK_D_DAOUT_PLANAR_STRIDE_0_DAOUT_PLANAR_STRIDE_FIELD			_MK_FIELD_CONST(0x7ffffff, RBK_D_DAOUT_PLANAR_STRIDE_0_DAOUT_PLANAR_STRIDE_SHIFT)
> +
> +
> +// Register RBK_D_DECONV_STRIDE_0
> +#define RBK_D_DECONV_STRIDE_0			_MK_ADDR_CONST(0x11054)
> +#define RBK_D_DECONV_STRIDE_0_DECONV_X_STRIDE_SHIFT			_MK_SHIFT_CONST(0)
> +#define RBK_D_DECONV_STRIDE_0_DECONV_X_STRIDE_FIELD			_MK_FIELD_CONST(0x1f, RBK_D_DECONV_STRIDE_0_DECONV_X_STRIDE_SHIFT)
> +#define RBK_D_DECONV_STRIDE_0_DECONV_Y_STRIDE_SHIFT			_MK_SHIFT_CONST(16)
> +#define RBK_D_DECONV_STRIDE_0_DECONV_Y_STRIDE_FIELD			_MK_FIELD_CONST(0x1f, RBK_D_DECONV_STRIDE_0_DECONV_Y_STRIDE_SHIFT)
> +
> +
> +// Register RBK_D_PERF_ENABLE_0
> +#define RBK_D_PERF_ENABLE_0			_MK_ADDR_CONST(0x11058)
> +#define RBK_D_PERF_ENABLE_0_PERF_EN_SHIFT			_MK_SHIFT_CONST(0)
> +#define RBK_D_PERF_ENABLE_0_PERF_EN_FIELD			_MK_FIELD_CONST(0x1, RBK_D_PERF_ENABLE_0_PERF_EN_SHIFT)
> +
> +
> +// Register RBK_D_PERF_READ_STALL_0
> +#define RBK_D_PERF_READ_STALL_0			_MK_ADDR_CONST(0x1105c)
> +#define RBK_D_PERF_READ_STALL_0_RD_STALL_CNT_SHIFT			_MK_SHIFT_CONST(0)
> +#define RBK_D_PERF_READ_STALL_0_RD_STALL_CNT_FIELD			_MK_FIELD_CONST(0xffffffff, RBK_D_PERF_READ_STALL_0_RD_STALL_CNT_SHIFT)
> +
> +
> +// Register RBK_D_PERF_WRITE_STALL_0
> +#define RBK_D_PERF_WRITE_STALL_0			_MK_ADDR_CONST(0x11060)
> +#define RBK_D_PERF_WRITE_STALL_0_WR_STALL_CNT_SHIFT			_MK_SHIFT_CONST(0)
> +#define RBK_D_PERF_WRITE_STALL_0_WR_STALL_CNT_FIELD			_MK_FIELD_CONST(0xffffffff, RBK_D_PERF_WRITE_STALL_0_WR_STALL_CNT_SHIFT)
> +
> +
> +
> +// To satisfy various compilers and platforms,
> +// we let users control the types and syntax of certain constants, using macros.
> +#ifndef _MK_SHIFT_CONST
> +  #define _MK_SHIFT_CONST(_constant_) _constant_
> +#endif
> +#ifndef _MK_MASK_CONST
> +  #define _MK_MASK_CONST(_constant_) _constant_
> +#endif
> +#ifndef _MK_ENUM_CONST
> +  #define _MK_ENUM_CONST(_constant_) (_constant_ ## UL)
> +#endif
> +#ifndef _MK_ADDR_CONST
> +  #define _MK_ADDR_CONST(_constant_) _constant_
> +#endif
> +#ifndef _MK_FIELD_CONST
> +  #define _MK_FIELD_CONST(_mask_, _shift_) (_MK_MASK_CONST(_mask_) << _MK_SHIFT_CONST(_shift_))
> +#endif
> +
> +
> +
> +//
> +// ADDRESS SPACES
> +//
> +
> +#define BASE_ADDRESS_NVDLA_CFGROM	0x0
> +#define BASE_ADDRESS_NVDLA_GLB	0x1000
> +#define BASE_ADDRESS_NVDLA_MCIF	0x2000
> +#define BASE_ADDRESS_NVDLA_CDMA	0x3000
> +#define BASE_ADDRESS_NVDLA_CSC	0x4000
> +#define BASE_ADDRESS_NVDLA_CMAC_A	0x5000
> +#define BASE_ADDRESS_NVDLA_CMAC_B	0x6000
> +#define BASE_ADDRESS_NVDLA_CACC	0x7000
> +#define BASE_ADDRESS_NVDLA_SDP_RDMA	0x8000
> +#define BASE_ADDRESS_NVDLA_SDP	0x9000
> +#define BASE_ADDRESS_NVDLA_PDP_RDMA	0xa000
> +#define BASE_ADDRESS_NVDLA_PDP	0xb000
> +#define BASE_ADDRESS_NVDLA_CDP_RDMA	0xc000
> +#define BASE_ADDRESS_NVDLA_CDP	0xd000
> +#define BASE_ADDRESS_NVDLA_GEC	0xe000
> +#define BASE_ADDRESS_NVDLA_CVIF	0xf000
> +#define BASE_ADDRESS_NVDLA_BDMA	0x10000
> +#define BASE_ADDRESS_NVDLA_RBK	0x11000
> +
> +#endif
> diff --git a/drivers/gpu/drm/nvdla/nvdla_rubik.c b/drivers/gpu/drm/nvdla/nvdla_rubik.c
> new file mode 100644
> index 000000000000..3bfb3b0cb786
> --- /dev/null
> +++ b/drivers/gpu/drm/nvdla/nvdla_rubik.c
> @@ -0,0 +1,217 @@
> +// SPDX-License-Identifier: BSD-3-Clause OR GPL-2.0
> +/*
> + * Copyright (C) 2017-2018 NVIDIA CORPORATION
> + * Copyright (C) 2022 Cai Huoqing
> + */
> +
> +#include "nvdla_common.h"
> +#include "nvdla_drm.h"
> +#include "nvdla_reg.h"
> +#include "nvdla_engine.h"
> +
> +static uint8_t map_rubik_mode[] = {
> +	FIELD_ENUM(RBK_D_MISC_CFG_0, RUBIK_MODE, CONTRACT),
> +	FIELD_ENUM(RBK_D_MISC_CFG_0, RUBIK_MODE, SPLIT),
> +	FIELD_ENUM(RBK_D_MISC_CFG_0, RUBIK_MODE, MERGE),
> +};
> +
> +static uint8_t  map_ram_type[] = {
> +	FIELD_ENUM(RBK_D_DAIN_RAM_TYPE_0, DATAIN_RAM_TYPE, MCIF),
> +	FIELD_ENUM(RBK_D_DAIN_RAM_TYPE_0, DATAIN_RAM_TYPE, CVIF),
> +};
> +
> +static uint8_t  map_precision[] = {
> +	FIELD_ENUM(RBK_D_MISC_CFG_0, IN_PRECISION, INT8),
> +	FIELD_ENUM(RBK_D_MISC_CFG_0, IN_PRECISION, INT16),
> +	FIELD_ENUM(RBK_D_MISC_CFG_0, IN_PRECISION, FP16),
> +};
> +
> +static uint8_t map_bpe[] = {
> +	BPE_PRECISION_INT8,
> +	BPE_PRECISION_INT16,
> +	BPE_PRECISION_FP16,
> +};
> +
> +void
> +dla_rubik_set_producer(struct dla_engine *engine, int32_t group_id, int32_t __unused)
> +{
> +	uint32_t reg;
> +
> +	/**
> +	 * set producer pointer for all sub-modules
> +	 */
> +	reg = group_id << SHIFT(RBK_S_POINTER_0, PRODUCER);
> +	rubik_reg_write(engine, S_POINTER, reg);
> +}
> +
> +int
> +dla_rubik_enable(struct dla_engine *engine, struct dla_processor_group *group)
> +{
> +	uint32_t reg;
> +
> +	/**
> +	 * enable all sub-modules
> +	 */
> +	reg = FIELD_ENUM(RBK_D_OP_ENABLE_0, OP_EN, ENABLE);
> +	rubik_reg_write(engine, D_OP_ENABLE, reg);
> +
> +	return 0;
> +}
> +
> +void
> +dla_rubik_rdma_check(struct dla_processor_group *group)
> +{
> +	group->is_rdma_needed = 0;
> +}
> +
> +static int32_t
> +processor_rubik_program(struct dla_engine *engine, struct dla_processor_group *group)
> +{
> +	int32_t ret = 0;
> +	uint32_t reg, high, low;
> +	uint64_t input_address = 0;
> +	uint64_t output_address = 0;
> +	struct dla_rubik_op_desc *rubik_op;
> +	struct dla_rubik_surface_desc *rubik_surface;
> +
> +	rubik_op = &group->operation_desc->rubik_op;
> +	rubik_surface = &group->surface_desc->rubik_surface;
> +
> +	/* Argument check */
> +	ASSERT_GOTO((rubik_surface->src_data.type != DLA_MEM_HW),
> +		ret, -EINVAL, exit);
> +	ASSERT_GOTO((rubik_surface->dst_data.type != DLA_MEM_HW),
> +		ret, -EINVAL, exit);
> +
> +	/* get the addresses from task descriptor */
> +	ret = dla_read_input_address(engine, &rubik_surface->src_data,
> +						&input_address,
> +						group->op_desc->index,
> +						group->roi_index,
> +						1);
> +	if (ret)
> +		goto exit;
> +
> +	dla_get_dma_cube_address(engine->driver_context,
> +				engine->task->task_data,
> +				rubik_surface->dst_data.address,
> +				rubik_surface->dst_data.offset,
> +				(void *)&output_address,
> +				DESTINATION_DMA);
> +
> +	/* config rubik */
> +	reg = (((uint32_t)map_rubik_mode[rubik_op->mode]) <<
> +			SHIFT(RBK_D_MISC_CFG_0, RUBIK_MODE)) |
> +			(((uint32_t)map_precision[rubik_op->precision]) <<
> +			SHIFT(RBK_D_MISC_CFG_0, IN_PRECISION));
> +	rubik_reg_write(engine, D_MISC_CFG, reg);
> +	reg = (((uint32_t)map_ram_type[rubik_surface->src_data.type]) <<
> +			SHIFT(RBK_D_DAIN_RAM_TYPE_0, DATAIN_RAM_TYPE));
> +	rubik_reg_write(engine, D_DAIN_RAM_TYPE, reg);
> +	reg =  ((rubik_surface->src_data.width-1) <<
> +			SHIFT(RBK_D_DATAIN_SIZE_0_0, DATAIN_WIDTH)) |
> +			((rubik_surface->src_data.height-1) <<
> +			SHIFT(RBK_D_DATAIN_SIZE_0_0, DATAIN_HEIGHT));
> +	rubik_reg_write(engine, D_DATAIN_SIZE_0, reg);
> +	reg =  ((rubik_surface->src_data.channel-1) <<
> +			SHIFT(RBK_D_DATAIN_SIZE_1_0, DATAIN_CHANNEL));
> +	rubik_reg_write(engine, D_DATAIN_SIZE_1, reg);
> +
> +	high = upper_32_bits(input_address);
> +	low = lower_32_bits(input_address);
> +	rubik_reg_write(engine, D_DAIN_ADDR_LOW, low);
> +	rubik_reg_write(engine, D_DAIN_ADDR_HIGH, high);
> +	if (rubik_op->mode == RUBIK_MODE_MERGE) {
> +		ASSERT_GOTO((rubik_surface->src_data.plane_stride != 0),
> +			ret, -EINVAL, exit);
> +		ASSERT_GOTO(((rubik_surface->src_data.plane_stride&0x1F) == 0),
> +			ret, -EINVAL, exit);
> +		rubik_reg_write(engine, D_DAIN_PLANAR_STRIDE,
> +			rubik_surface->src_data.plane_stride);
> +	} else {
> +		rubik_reg_write(engine, D_DAIN_SURF_STRIDE,
> +			rubik_surface->src_data.surf_stride);
> +	}
> +	rubik_reg_write(engine, D_DAIN_LINE_STRIDE,
> +				rubik_surface->src_data.line_stride);
> +
> +	reg = (((uint32_t)map_ram_type[rubik_surface->dst_data.type]) <<
> +			SHIFT(RBK_D_DAOUT_RAM_TYPE_0, DATAOUT_RAM_TYPE));
> +	rubik_reg_write(engine, D_DAOUT_RAM_TYPE, reg);
> +	reg =  ((rubik_surface->dst_data.channel-1) <<
> +			SHIFT(RBK_D_DATAOUT_SIZE_1_0, DATAOUT_CHANNEL));
> +	rubik_reg_write(engine, D_DATAOUT_SIZE_1, reg);
> +
> +	high = upper_32_bits(output_address);
> +	low = lower_32_bits(output_address);
> +	rubik_reg_write(engine, D_DAOUT_ADDR_LOW, low);
> +	rubik_reg_write(engine, D_DAOUT_ADDR_HIGH, high);
> +
> +	rubik_reg_write(engine, D_DAOUT_LINE_STRIDE,
> +			rubik_surface->dst_data.line_stride);
> +	if (rubik_op->mode != RUBIK_MODE_SPLIT) {
> +		rubik_reg_write(engine, D_DAOUT_SURF_STRIDE,
> +				rubik_surface->dst_data.surf_stride);
> +		if (rubik_op->mode == RUBIK_MODE_CONTRACT) {
> +			reg = ((rubik_surface->dst_data.channel *
> +				map_bpe[rubik_op->precision] + 31) >> 5) *
> +				rubik_surface->src_data.surf_stride;
> +			rubik_reg_write(engine, D_CONTRACT_STRIDE_0, reg);
> +
> +			reg = rubik_op->stride_y *
> +				rubik_surface->dst_data.line_stride;
> +			rubik_reg_write(engine, D_CONTRACT_STRIDE_1, reg);
> +
> +			reg = (((uint32_t)(rubik_op->stride_x-1)) <<
> +			SHIFT(RBK_D_DECONV_STRIDE_0, DECONV_X_STRIDE)) |
> +				(((uint32_t)(rubik_op->stride_y-1)) <<
> +			SHIFT(RBK_D_DECONV_STRIDE_0, DECONV_Y_STRIDE));
> +			rubik_reg_write(engine, D_DECONV_STRIDE, reg);
> +		}
> +	} else {
> +		rubik_reg_write(engine, D_DAOUT_PLANAR_STRIDE,
> +				rubik_surface->dst_data.plane_stride);
> +	}
> +
> +exit:
> +	return ret;
> +}
> +
> +int
> +dla_rubik_is_ready(struct dla_processor *processor,
> +			     struct dla_processor_group *group)
> +{
> +	return 1;
> +}
> +
> +void
> +dla_rubik_dump_config(struct dla_processor_group *group)
> +{
> +	struct dla_rubik_op_desc *rubik_op;
> +	struct dla_rubik_surface_desc *rubik_surface;
> +
> +	rubik_surface = &group->surface_desc->rubik_surface;
> +	rubik_op = &group->operation_desc->rubik_op;
> +}
> +
> +int
> +dla_rubik_program(struct dla_engine *engine, struct dla_processor_group *group)
> +{
> +	int32_t ret = 0;
> +
> +	if (!engine->config_data->rubik_enable) {
> +		pr_err("RUBIK is not supported for this configuration\n");
> +		ret = -EINVAL;
> +		goto exit;
> +	}
> +
> +	dla_enable_intr(engine, MASK(GLB_S_INTR_MASK_0, RUBIK_DONE_MASK1) |
> +			MASK(GLB_S_INTR_MASK_0, RUBIK_DONE_MASK0));
> +
> +	ret = processor_rubik_program(engine, group);
> +	if (ret)
> +		goto exit;
> +
> +exit:
> +	return ret;
> +}
> diff --git a/drivers/gpu/drm/nvdla/nvdla_sched.h b/drivers/gpu/drm/nvdla/nvdla_sched.h
> new file mode 100644
> index 000000000000..d3a198127006
> --- /dev/null
> +++ b/drivers/gpu/drm/nvdla/nvdla_sched.h
> @@ -0,0 +1,52 @@
> +/* SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause */
> +/*
> + * Copyright (C) 2017-2018 NVIDIA CORPORATION.
> + * Copyright (C) 2022 Cai Huoqing
> + */
> +
> +#ifndef __NVDLA_SCHED_H_
> +#define __NVDLA_SCHED_H_
> +
> +struct dla_task {
> +	/* platform specific data to communicate with portability layer */
> +	void *task_data;
> +	/* task state */
> +	uint32_t state;
> +	/* Task base address */
> +	uint64_t base;
> +	/* start address of a list of dla_operation_container */
> +	uint64_t operation_desc_addr;
> +	/* start address of a list of dla_surface_container */
> +	uint64_t surface_desc_addr;
> +	/* start address of a list of dla_common_op_desc */
> +	uint64_t dependency_graph_addr;
> +	/* start address of a list of dla_lut_param */
> +	uint64_t lut_data_addr;
> +	/*
> +	 * start address of a list of dla_roi_desc,
> +	 * the first one is dla_roi_array_desc
> +	 * valid when network.dynamic_roi is true
> +	 */
> +	uint64_t roi_array_addr;
> +	/* start address of a list of dla_surface_container */
> +	uint64_t surface_addr;
> +	/* start address of a list of dla_stat_container */
> +	uint64_t stat_data_addr;
> +} __packed __aligned(256);
> +
> +/**
> + * @brief			Configuration parameters supported by the engine
> + *
> + * atom_size			Memory smallest access size
> + * bdma_enable			Defines whether bdma is supported
> + * rubik_enable			Defines whether rubik is supported
> + * weight_compress_support	Defines whether weight data compression is supported
> + */
> +struct dla_config {
> +	uint32_t atom_size;
> +	bool bdma_enable;
> +	bool rubik_enable;
> +	bool weight_compress_support;
> +};
> +
> +#endif
> diff --git a/drivers/gpu/drm/nvdla/nvdla_scheduler.c b/drivers/gpu/drm/nvdla/nvdla_scheduler.c
> new file mode 100644
> index 000000000000..b814077478c6
> --- /dev/null
> +++ b/drivers/gpu/drm/nvdla/nvdla_scheduler.c
> @@ -0,0 +1,1005 @@
> +// SPDX-License-Identifier: BSD-3-Clause OR GPL-2.0
> +/*
> + * Copyright (C) 2017-2018 NVIDIA CORPORATION
> + * Copyright (C) 2022 Cai Huoqing
> + */
> +
> +#include "nvdla_common.h"
> +#include "nvdla_drm.h"
> +#include "nvdla_reg.h"
> +#include "nvdla_engine.h"
> +
> +#define MAX_NUM_ADDRESSES	256
> +
> +static uint64_t roi_array_length __aligned(8);
> +static struct dla_network_desc network;
> +
> +static int
> +dla_update_consumers(struct dla_engine *engine,
> +					 struct dla_processor_group *group,
> +					 struct dla_common_op_desc *op, uint8_t event);
> +
> +static int32_t
> +dla_read_address_list(struct dla_engine *engine)
> +{
> +	return 0;
> +}
> +
> +int32_t
> +dla_read_lut(struct dla_engine *engine, int16_t index, void *dst)
> +{
> +	int32_t ret = 0;
> +	uint64_t src_addr;
> +
> +	if (index == -1) {
> +		ret = -EINVAL;
> +		goto exit;
> +	}
> +
> +	src_addr = engine->task->lut_data_addr;
> +
> +	ret = dla_data_read(engine->driver_context,
> +			engine->task->task_data,
> +			src_addr, (void *)dst,
> +			sizeof(struct dla_lut_param),
> +			(sizeof(struct dla_lut_param) * (uint64_t)index));
> +
> +exit:
> +	return ret;
> +}
> +
> +static int
> +dla_op_enabled(struct dla_engine *engine, struct dla_processor_group *group)
> +{
> +	int32_t ret;
> +	struct dla_common_op_desc *op_desc;
> +
> +	op_desc = group->op_desc;
> +
> +	group->active = 1;
> +
> +	/* update dependency graph for this task */
> +	ret = dla_update_consumers(engine, group, op_desc, DLA_EVENT_OP_ENABLED);
> +
> +	return ret;
> +}
> +
> +static int
> +dla_op_programmed(struct dla_engine *engine, struct dla_processor *processor,
> +		  struct dla_processor_group *group,
> +		  uint8_t rdma_id)
> +{
> +	int32_t ret;
> +	struct dla_common_op_desc *op_desc;
> +
> +	op_desc = group->op_desc;
> +
> +	group->pending = 0;
> +
> +	/* update dependency graph for this task */
> +	ret = dla_update_consumers(engine, group, op_desc, DLA_EVENT_OP_PROGRAMMED);
> +
> +	return ret;
> +}
> +
> +static int32_t
> +dla_read_config(struct dla_engine *engine, struct dla_task *task,
> +				struct dla_processor *processor,
> +				struct dla_processor_group *group)
> +{
> +	int32_t ret;
> +	uint64_t base;
> +	int16_t index;
> +	uint8_t roi_index;
> +
> +	roi_index = group->roi_index;
> +	index = group->op_desc->index;
> +
> +	base = (sizeof(union dla_operation_container) *
> +			(uint64_t)engine->network->num_operations *
> +			(uint64_t)roi_index);
> +	base = base + (sizeof(union dla_operation_container) *
> +			(uint64_t)index);
> +
> +	ret = dla_data_read(engine->driver_context, task->task_data,
> +				task->operation_desc_addr,
> +				(void *)group->operation_desc,
> +				sizeof(union dla_operation_container),
> +				base);
> +	if (ret)
> +		goto exit;
> +
> +	base = (sizeof(union dla_surface_container) *
> +			(uint64_t)engine->network->num_operations *
> +			(uint64_t)roi_index);
> +
> +	base = base + (sizeof(union dla_surface_container) *
> +			(uint64_t)index);
> +
> +	ret = dla_data_read(engine->driver_context, task->task_data,
> +				task->surface_desc_addr,
> +				(void *)group->surface_desc,
> +				sizeof(union dla_surface_container), base);
> +	if (ret)
> +		goto exit;
> +
> +	processor->dump_config(group);
> +
> +exit:
> +	return ret;
> +}
> +
> +static void
> +dla_reset_group(struct dla_engine *engine, struct dla_processor_group *group)
> +{
> +	int32_t i;
> +
> +	for (i = 0; i < DLA_OP_NUM; i++) {
> +		dla_put_op_desc(engine, group->consumers[i]);
> +		group->consumers[i] = NULL;
> +	}
> +
> +	dla_put_op_desc(engine, group->fused_parent);
> +	group->fused_parent = NULL;
> +
> +	dla_put_op_desc(engine, group->op_desc);
> +	group->op_desc = NULL;
> +}
> +
> +static int
> +dla_prepare_operation(struct dla_engine *engine,
> +					  struct dla_processor *processor,
> +					  struct dla_common_op_desc *op_desc,
> +					  uint8_t roi_index, uint32_t *group_number)
> +{
> +	int32_t ret = 0;
> +	uint8_t group_id;
> +	uint8_t rdma_id;
> +	struct dla_processor_group *group;
> +
> +	/*
> +	 * If not already programmed then find out if
> +	 * processor is free and which group is free
> +	 */
> +	ret = utils_get_free_group(engine, processor, &group_id, &rdma_id);
> +	if (ret) {
> +		pr_debug("processor:%s register groups are busy\n",
> +			processor->name);
> +		goto exit;
> +	} else {
> +		pr_info("processor:%s group:%d, rdma_group:%d available\n",
> +				processor->name, group_id, rdma_id);
> +	}
> +	*group_number = group_id;
> +	group = &processor->groups[group_id];
> +
> +	/*
> +	 * update operation descriptor
> +	 */
> +	group->op_desc = op_desc;
> +	dla_get_refcount(op_desc);
> +	group->id = group_id;
> +	group->roi_index = roi_index;
> +	group->rdma_id = rdma_id;
> +
> +	ret = dla_read_config(engine, engine->task, processor, group);
> +	if (ret)
> +		goto exit;
> +
> +	group->pending = 1;
> +
> +	processor->group_status |= (1 << group->id);
> +
> +	processor->rdma_check(group);
> +	if (group->is_rdma_needed) {
> +		group->rdma_id = rdma_id;
> +		processor->rdma_status |= (1 << rdma_id);
> +	}
> +
> +	processor->tail_op = op_desc;
> +exit:
> +	return ret;
> +}
> +
> +static int
> +dla_program_operation(struct dla_engine *engine,
> +					  struct dla_processor *processor,
> +					  struct dla_processor_group *group)
> +{
> +	int32_t i;
> +	int32_t ret = 0;
> +	struct dla_common_op_desc *op_desc;
> +
> +	pr_info("Program %s operation index %d ROI %d Group[%d]\n",
> +					processor->name,
> +					group->op_desc->index,
> +					group->roi_index,
> +					group->id);
> +
> +	group->programming = 1;
> +
> +	op_desc = group->op_desc;
> +
> +	processor->set_producer(engine, group->id, group->rdma_id);
> +
> +	ret = processor->program(engine, group);
> +	if (ret)
> +		goto exit;
> +
> +	/**
> +	 * Pre-fetch consumers
> +	 */
> +	for (i = 0; i < DLA_OP_NUM; i++) {
> +		group->consumers[i] = dla_get_op_desc(engine, engine->task,
> +					op_desc->consumers[i].index, i,
> +					group->roi_index);
> +	}
> +
> +	group->fused_parent = dla_get_op_desc(engine, engine->task,
> +					op_desc->fused_parent.index,
> +					op_desc->op_type - 1,
> +					group->roi_index);
> +
> +	if (group->fused_parent != NULL) {
> +		if (group->fused_parent->op_type != (op_desc->op_type - 1)) {
> +			ret = -EINVAL;
> +			goto exit;
> +		}
> +	}
> +
> +	ret = dla_op_programmed(engine, processor, group, group->rdma_id);
> +	if (!ret)
> +		goto exit;
> +
> +exit:
> +	group->programming = 0;
> +	return ret;
> +}
> +
> +static int
> +dla_enable_operation(struct dla_engine *engine,
> +					 struct dla_processor *processor,
> +					 struct dla_common_op_desc *op_desc)
> +{
> +	int32_t ret = 0;
> +	int32_t group_id;
> +	struct dla_processor_group *group;
> +
> +	/**
> +	 * If some operation has reported error then skip
> +	 * enabling next operations
> +	 */
> +	if (engine->status)
> +		goto exit;
> +
> +	/**
> +	 * Find out if operation is already programmed
> +	 */
> +	group_id = 0;
> +	group = &processor->groups[group_id];
> +	if ((processor->group_status & (1 << group_id)) &&
> +			group->op_desc->index == op_desc->index &&
> +			group->roi_index == op_desc->roi_index &&
> +			!group->pending)
> +		goto enable_op;
> +
> +	group_id = 1;
> +	group = &processor->groups[group_id];
> +	if ((processor->group_status & (1 << group_id)) &&
> +			group->op_desc->index == op_desc->index &&
> +			group->roi_index == op_desc->roi_index &&
> +			!group->pending)
> +		goto enable_op;
> +
> +	/**
> +	 * Operation is not programmed yet, ignore
> +	 */
> +	pr_debug("exit %s without actual enable due to processor "
> +				"hasn't been programmed\n", __func__);
> +	goto exit;
> +
> +enable_op:
> +	/**
> +	 * If this event is triggered as part of programming same
> +	 * group then skip enable, it will get enabled after programming
> +	 * is complete
> +	 */
> +	if (group->programming)
> +		goto exit;
> +
> +	if (group->active) {
> +		pr_debug("Processor:%s already enabled on group:%d\n",
> +			processor->name, group_id);
> +		goto exit;
> +	}
> +
> +	pr_info("Enable %s operation index %d ROI %d\n",
> +					processor->name,
> +					group->op_desc->index,
> +					group->roi_index);
> +
> +	processor->set_producer(engine, group->id, group->rdma_id);
> +
> +	ret = processor->enable(engine, group);
> +	if (ret)
> +		goto exit;
> +
> +	ret = dla_op_enabled(engine, group);
> +exit:
> +	return ret;
> +}
> +
> +static int
> +dla_submit_operation(struct dla_engine *engine,
> +					 struct dla_processor *processor,
> +					 struct dla_common_op_desc *op_desc,
> +					 uint8_t roi_index)
> +{
> +	int32_t err;
> +	uint32_t group_id = 0;
> +
> +	pr_info("Prepare %s operation index %d ROI %d dep_count %d\n",
> +			processor->name, op_desc->index, roi_index,
> +			op_desc->dependency_count);
> +	err = dla_prepare_operation(engine, processor, op_desc, roi_index, &group_id);
> +	if (err)
> +		goto exit;
> +
> +	if (!processor->is_ready(processor, &processor->groups[group_id]))
> +		goto exit;
> +
> +	err = dla_program_operation(engine, processor, &processor->groups[group_id]);
> +	if (err)
> +		goto exit;
> +
> +	if (op_desc->dependency_count == 0)
> +		err = dla_enable_operation(engine, processor, op_desc);
> +
> +exit:
> +	return err;
> +}
> +
> +/**
> + * Dequeue next operation of same type from list of operations
> + */
> +static int32_t
> +dla_dequeue_operation(struct dla_engine *engine,
> +					  struct dla_processor *processor)
> +{
> +	int32_t ret = 0;
> +	int16_t index;
> +	struct dla_common_op_desc *consumer;
> +
> +	if (engine->status) {
> +		pr_debug("Skip dequeue op as engine has reported error\n");
> +		goto exit;
> +	}
> +
> +	/**
> +	 * If we are done processing all ROIs for current op then
> +	 * load next op of same type otherwise reload same op for
> +	 * next ROI.
> +	 */
> +	if (processor->roi_index == (engine->network->num_rois - 1)) {
> +		index = processor->tail_op->consumers[processor->op_type].index;
> +		if (-1 == index) {
> +			/**
> +			 * It means we are done processing
> +			 * all ops of this type
> +			 */
> +			pr_debug("exit %s as there's no further operation\n",
> +				processor->name);
> +			goto exit;
> +		}
> +		processor->roi_index = 0;
> +	} else {
> +		processor->roi_index++;
> +		index = processor->tail_op->index;
> +	}
> +
> +	pr_debug("Dequeue op from %s processor, index=%d ROI=%d\n",
> +			processor->name, index, processor->roi_index);
> +
> +	/**
> +	 * Get operation descriptor
> +	 */
> +	consumer = dla_get_op_desc(engine, engine->task, index,
> +				processor->op_type, processor->roi_index);
> +	if (consumer == NULL) {
> +		ret = -ENOMEM;
> +		pr_err("Failed to allocate op_desc");
> +		goto exit;
> +	}
> +
> +	ret = dla_submit_operation(engine, processor, consumer, processor->roi_index);
> +	dla_put_op_desc(engine, consumer);
> +
> +exit:
> +	return ret;
> +}
> +
> +static int
> +dla_update_dependency(struct dla_engine *engine,
> +					  struct dla_consumer *consumer,
> +					  struct dla_common_op_desc *op_desc,
> +					  uint8_t event, uint8_t roi_index)
> +{
> +	int32_t ret = 0;
> +	struct dla_processor *processor;
> +
> +	if (consumer->index == -1)
> +		goto exit;
> +
> +	/* Update dependency only if event matches */
> +	if (event != consumer->event)
> +		goto exit;
> +
> +	/**
> +	 * If consumer index is valid but op desc is NULL means
> +	 * op desc for consumer was not pre-fetched
> +	 */
> +	if (op_desc == NULL) {
> +		ret = -EINVAL;
> +		pr_err("Operation descriptor is NULL, consumer index %d",
> +				consumer->index);
> +		goto exit;
> +	}
> +
> +	pr_debug("Update dependency operation index %d ROI %d DEP_COUNT=%d\n",
> +					op_desc->index, op_desc->roi_index,
> +					op_desc->dependency_count);
> +	op_desc->dependency_count--;
> +
> +	if (op_desc->dependency_count == 0) {
> +		processor = &engine->processors[op_desc->op_type];
> +		pr_debug("enable %s in %s as depdency are resolved\n",
> +			processor->name, __func__);
> +
> +		ret = dla_enable_operation(engine, processor, op_desc);
> +		if (ret)
> +			goto exit;
> +	}
> +exit:
> +	return ret;
> +}
> +
> +static int
> +dla_update_consumers(struct dla_engine *engine,
> +					 struct dla_processor_group *group,
> +					 struct dla_common_op_desc *op,
> +					 uint8_t event)
> +{
> +	int32_t i;
> +	int32_t ret = 0;
> +
> +	if (engine->status) {
> +		pr_debug("Skip update as engine has reported error\n");
> +		goto exit;
> +	}
> +
> +	for (i = 0; i < DLA_OP_NUM; i++) {
> +		ret = dla_update_dependency(engine, &op->consumers[i],
> +						group->consumers[i],
> +						event, group->roi_index);
> +		if (ret) {
> +			pr_err("Failed to update dependency for consumer %d, ROI %d",
> +				   i, group->roi_index);
> +			goto exit;
> +		}
> +	}
> +
> +	ret = dla_update_dependency(engine, &op->fused_parent,
> +					group->fused_parent,
> +					event, group->roi_index);
> +	if (ret) {
> +		pr_err("Failed to update dependency for "
> +			"fused parent, ROI %d", group->roi_index);
> +		goto exit;
> +	}
> +
> +exit:
> +	return ret;
> +}
> +
> +/**
> + * Handle operation completion notification
> + */
> +int
> +dla_op_completion(struct dla_engine *engine,
> +				  struct dla_processor *processor,
> +				  struct dla_processor_group *group)
> +{
> +	int32_t ret;
> +	struct dla_task *task;
> +	struct dla_common_op_desc *op_desc;
> +	struct dla_processor_group *next_group;
> +
> +	pr_info("Completed %s operation index %d ROI %d\n",
> +			processor->name, group->op_desc->index,
> +			group->roi_index);
> +
> +	task = engine->task;
> +
> +	/**
> +	 * Mark OP as done only when all ROIs are done for that
> +	 * operation
> +	 */
> +	if (group->roi_index == (engine->network->num_rois - 1))
> +		engine->num_proc_hwl++;
> +
> +	op_desc = group->op_desc;
> +
> +	/**
> +	 * Get an extra reference count to keep op descriptor
> +	 * in cache until this operation completes
> +	 */
> +	dla_get_refcount(op_desc);
> +
> +	processor->group_status &= ~(1 << group->id);
> +	if (group->is_rdma_needed) {
> +		group->is_rdma_needed = 0;
> +		processor->rdma_status &= ~(1 << group->rdma_id);
> +		group->rdma_id = 0;
> +	}
> +	group->active = 0;
> +	group->lut_index = -1;
> +	processor->last_group = group->id;
> +
> +	/**
> +	 * Switch consumer pointer to next group
> +	 */
> +	processor->consumer_ptr = !group->id;
> +
> +	/**
> +	 * update dependency graph for this task
> +	 * TODO: Add proper error handling
> +	 */
> +	ret = dla_update_consumers(engine, group, op_desc, DLA_EVENT_OP_COMPLETED);
> +	if (ret)
> +		goto exit;
> +
> +	pr_info("%d HWLs done, totally %d layers\n",
> +				engine->num_proc_hwl,
> +				engine->network->num_operations);
> +
> +	/* free operation descriptor from cache */
> +	dla_reset_group(engine, group);
> +
> +	/* if not hwl pending, means network completed */
> +	if (engine->network->num_operations == engine->num_proc_hwl) {
> +		dla_put_op_desc(engine, op_desc);
> +		goto exit;
> +	}
> +
> +	next_group = &processor->groups[!group->id];
> +	if (next_group->pending && !engine->status) {
> +		/**
> +		 * Next group must be ready here for programming,
> +		 * if not means it is an error
> +		 */
> +		if (!processor->is_ready(processor, next_group))
> +			goto dequeue_op;
> +
> +		ret = dla_program_operation(engine, processor, next_group);
> +		if (ret)
> +			goto exit;
> +
> +		if (next_group->op_desc->dependency_count != 0)
> +			goto dequeue_op;
> +
> +		ret = dla_enable_operation(engine, processor,
> +					   next_group->op_desc);
> +		if (ret)
> +			goto exit;
> +	}
> +
> +dequeue_op:
> +	/* dequeue operation from this processor */
> +	ret = dla_dequeue_operation(engine, processor);
> +
> +exit:
> +	dla_put_op_desc(engine, op_desc);
> +	pr_debug("Exit:%s processor %s group%u status=%d\n",
> +				__func__, processor->name,
> +				group->id, ret);
> +
> +	return ret;
> +}
> +
> +/**
> + * Read network configuration from DRAM, network descriptor address
> + * is always first in the address list. Network configuration contains
> + * offset in address list for addresses of other lists used to
> + * execute network
> + *
> + * @engine: Engine instance
> + * @return: 0 for success
> + */
> +static int
> +dla_read_network_config(struct dla_engine *engine)
> +{
> +	int32_t ret;
> +	uint64_t network_addr;
> +	struct dla_task *task = engine->task;
> +
> +	/**
> +	 * Read address list from DRAM to DMEM
> +	 */
> +	ret = dla_read_address_list(engine);
> +	if (ret) {
> +		pr_err("Failed to read address list");
> +		goto exit;
> +	}
> +
> +	/**
> +	 * Read network descriptor address from address list. It is always
> +	 * at index 0.
> +	 */
> +	ret = dla_get_dma_address(engine->driver_context, task->task_data,
> +							  0, (void *)&network_addr,
> +							  DESTINATION_PROCESSOR);
> +	if (ret) {
> +		pr_err("Failed to read network desc address");
> +		goto exit;
> +	}
> +
> +	/**
> +	 * Read network descriptor, it has information for a network
> +	 * such as all address indexes.
> +	 */
> +	ret = dla_data_read(engine->driver_context, task->task_data,
> +						network_addr, (void *)&network,
> +						sizeof(struct dla_network_desc), 0);
> +	if (ret) {
> +		pr_err("Failed to read network descriptor");
> +		goto exit;
> +	}
> +
> +	if (network.num_operations == 0)
> +		goto exit;
> +
> +	/**
> +	 * Read operation descriptor list address from address list
> +	 */
> +	ret = dla_get_dma_address(engine->driver_context, task->task_data,
> +							  network.operation_desc_index,
> +							  (void *)&task->operation_desc_addr,
> +							  DESTINATION_PROCESSOR);
> +	if (ret) {
> +		pr_err("Failed to read operation desc list address");
> +		goto exit;
> +	}
> +
> +	/**
> +	 * Read surface descriptor list address from address list
> +	 */
> +	ret = dla_get_dma_address(engine->driver_context, task->task_data,
> +							  network.surface_desc_index,
> +							  (void *)&task->surface_desc_addr,
> +							  DESTINATION_PROCESSOR);
> +	if (ret) {
> +		pr_err("Failed to read surface desc list address");
> +		goto exit;
> +	}
> +
> +	/**
> +	 * Read dependency graph address from address list
> +	 */
> +	ret = dla_get_dma_address(engine->driver_context, task->task_data,
> +							  network.dependency_graph_index,
> +							  (void *)&task->dependency_graph_addr,
> +							  DESTINATION_PROCESSOR);
> +	if (ret) {
> +		pr_err("Failed to ready dependency graph address");
> +		goto exit;
> +	}
> +
> +	/**
> +	 * Read LUT data list address from address list
> +	 */
> +	if (network.num_luts) {
> +		ret = dla_get_dma_address(engine->driver_context,
> +								  task->task_data,
> +								  network.lut_data_index,
> +								  (void *)&task->lut_data_addr,
> +								  DESTINATION_PROCESSOR);
> +		if (ret) {
> +			pr_err("Failed to read LUT list address");
> +			goto exit;
> +		}
> +	}
> +
> +	/**
> +	 * Read address for ROI information
> +	 */
> +	if (network.dynamic_roi) {
> +		/**
> +		 * Read ROI array address from address list
> +		 */
> +		ret = dla_get_dma_address(engine->driver_context,
> +								  task->task_data,
> +								  network.roi_array_index,
> +								  (void *)&task->roi_array_addr,
> +								  DESTINATION_PROCESSOR);
> +		if (ret) {
> +			pr_err("Failed to read ROI array address");
> +			goto exit;
> +		}
> +
> +		ret = dla_data_read(engine->driver_context, task->task_data,
> +							task->roi_array_addr,
> +							(void *)&roi_array_length,
> +							sizeof(uint64_t), 0);
> +		if (ret) {
> +			pr_err("Failed to read ROI array length");
> +			goto exit;
> +		}
> +
> +		/**
> +		 * Number of ROIs detected can't be greater than maximum number
> +		 * ROIs this network can process
> +		 */
> +		if (roi_array_length > network.num_rois) {
> +			pr_err("Invalid number of ROIs detected");
> +			ret = -EINVAL;
> +			goto exit;
> +		}
> +
> +		network.num_rois = roi_array_length;
> +
> +		/**
> +		 * Read surface address from address list
> +		 */
> +		ret = dla_get_dma_address(engine->driver_context,
> +								  task->task_data,
> +								  network.surface_index,
> +								  (void *)&task->surface_addr,
> +								  DESTINATION_DMA);
> +		if (ret) {
> +			pr_err("Failed to read surface address");
> +			goto exit;
> +		}
> +	}
> +
> +exit:
> +	return ret;
> +}
> +
> +static int
> +dla_initiate_processors(struct dla_engine *engine)
> +{
> +	int32_t i;
> +	int32_t ret = 0;
> +	int16_t index;
> +	struct dla_processor *processor;
> +	struct dla_common_op_desc *consumer;
> +	struct dla_network_desc *nw;
> +
> +	if (!engine) {
> +		ret = -EINVAL;
> +		goto exit;
> +	}
> +
> +	nw = engine->network;
> +
> +	/* Validate operation heads before initiating processors */
> +	for (i = 0; i < DLA_OP_NUM; i++) {
> +		if (nw->op_head[i] >= nw->num_operations) {
> +			ret = -EINVAL;
> +			pr_err("Invalid op_head %d for op %d",
> +						nw->op_head[i], i);
> +			goto exit;
> +		}
> +	}
> +
> +	for (i = 0; i < DLA_OP_NUM; i++) {
> +		index = nw->op_head[i];
> +
> +		/* If there is no op for this type then continue */
> +		if (-1 == index)
> +			continue;
> +
> +		consumer = dla_get_op_desc(engine, engine->task, index, i, 0);
> +		/*
> +		 * if consumer is NULL, it means either data copy error
> +		 * or cache insufficient - we should fix it
> +		 **/
> +		if (consumer == NULL) {
> +			pr_err("Failed to allocate memory for op_head[%d]=%d",
> +							i, index);
> +			ret = -ENOMEM;
> +			goto exit;
> +		}
> +
> +		processor = &engine->processors[consumer->op_type];
> +
> +		ret = dla_submit_operation(engine, processor, consumer, 0);
> +		dla_put_op_desc(engine, consumer);
> +		if (ret && ret != -EBUSY) {
> +			pr_err("Failed to submit %s op from index %u\n",
> +						processor->name, index);
> +			goto exit;
> +		}
> +
> +		ret = dla_dequeue_operation(engine, processor);
> +		if (ret) {
> +			pr_err("Failed to dequeue op for %s processor",
> +							processor->name);
> +			goto exit;
> +		}
> +	}
> +exit:
> +	return ret;
> +}
> +
> +static int
> +dla_handle_events(struct dla_engine *engine, struct dla_processor *processor)
> +{
> +	int32_t j;
> +	int32_t ret = 0;
> +	uint8_t group_id;
> +	struct dla_processor_group *group;
> +
> +	pr_debug("Enter:%s, processor:%s\n", __func__, processor->name);
> +
> +	group_id = !processor->last_group;
> +
> +	for (j = 0; j < DLA_NUM_GROUPS; j++) {
> +		group = &processor->groups[group_id];
> +
> +		if ((1 << DLA_EVENT_CDMA_WT_DONE) & group->events) {
> +			pr_info("Handle cdma weight done event, processor %s group %u\n",
> +					processor->name, group->id);
> +
> +			ret = dla_update_consumers(engine, group, group->op_desc,
> +									   DLA_EVENT_CDMA_WT_DONE);
> +			if (ret)
> +				goto exit;
> +		}
> +
> +		if ((1 << DLA_EVENT_CDMA_DT_DONE) & group->events) {
> +			pr_info("Handle cdma data done event, processor %s group %u\n",
> +					processor->name, group->id);
> +
> +			ret = dla_update_consumers(engine, group,
> +									   group->op_desc,
> +									   DLA_EVENT_CDMA_DT_DONE);
> +			if (ret)
> +				goto exit;
> +		}
> +
> +		/**
> +		 * Handle complete after all other events
> +		 */
> +		if ((1 << DLA_EVENT_OP_COMPLETED) & group->events) {
> +			pr_info("Handle op complete event, processor %s group %u\n",
> +					processor->name, group->id);
> +
> +			ret = dla_op_completion(engine, processor, group);
> +			if (ret)
> +				goto exit;
> +		}
> +
> +		/**
> +		 * Clear all events
> +		 */
> +		group->events = 0;
> +		group_id = !group_id;
> +	}
> +exit:
> +	return ret;
> +}
> +
> +int
> +dla_process_events(struct dla_engine *engine, uint32_t *task_complete)
> +{
> +	int32_t i;
> +	int32_t ret = 0;
> +
> +	for (i = 0; i < DLA_OP_NUM; i++) {
> +		struct dla_processor *processor;
> +
> +		processor = &engine->processors[i];
> +		ret = dla_handle_events(engine, processor);
> +		/**
> +		 * Incase engine status is non-zero, then don't
> +		 * update the engine status. We should keep its
> +		 * status for later cleaning of engine.
> +		 */
> +		if (!engine->status)
> +			engine->status = ret;
> +	}
> +
> +	if (engine->network->num_operations == engine->num_proc_hwl)
> +		*task_complete = 1;
> +
> +	return ret;
> +}
> +
> +/**
> + * Execute task selected by task scheduler
> + *
> + * 1. Read network configuration for the task
> + * 2. Initiate processors with head of list for same op
> + * 3. Start processing events received
> + */
> +int
> +dla_execute_task(struct dla_engine *engine_context, void *task_data, void *config_data)
> +{
> +	int32_t ret;
> +	struct dla_engine *engine = engine_context;
> +
> +	if (engine == NULL) {
> +		pr_err("engine is NULL\n");
> +		ret = -EINVAL;
> +		goto complete;
> +	}
> +
> +	if (engine->task == NULL) {
> +		pr_err("task is NULL\n");
> +		ret = -EINVAL;
> +		goto complete;
> +	}
> +
> +	if (engine->task->task_data != NULL) {
> +		/* We have on the fly tasks running */
> +		pr_warn("Already some task in progress");
> +		ret = -EBUSY;
> +		goto complete;
> +	}
> +
> +	engine->task->task_data = task_data;
> +	engine->config_data = config_data;
> +	engine->network = &network;
> +	engine->num_proc_hwl = 0;
> +
> +	ret = dla_read_network_config(engine);
> +	if (ret)
> +		goto complete;
> +
> +	/* If no operations in a task means nothing to do, NULL task */
> +	if (engine->network->num_operations == 0)
> +		goto complete;
> +
> +	ret = dla_initiate_processors(engine);
> +	engine->status = ret;
> +
> +complete:
> +	return ret;
> +}
> +
> +void
> +dla_clear_task(struct dla_engine *engine_context)
> +{
> +	int32_t i, j;
> +	struct dla_engine *engine = engine_context;
> +
> +	for (i = 0; i < DLA_OP_NUM; i++) {
> +		struct dla_processor *processor = &engine->processors[i];
> +
> +		processor->roi_index = 0;
> +		processor->group_status = 0;
> +		processor->rdma_status = 0;
> +
> +		processor->tail_op = NULL;
> +
> +		for (j = 0; j < DLA_NUM_GROUPS; j++) {
> +			struct dla_processor_group *group =
> +						&processor->groups[j];
> +
> +			group->rdma_id = group->id;
> +			group->active = 0;
> +			group->events = 0;
> +			group->roi_index = 0;
> +			group->is_rdma_needed = 0;
> +			group->lut_index = -1;
> +		}
> +	}
> +
> +	engine->task->task_data = NULL;
> +	engine->network = NULL;
> +	engine->num_proc_hwl = 0;
> +	engine->status = 0;
> +
> +	pr_info("reset engine done\n");
> +}
> diff --git a/drivers/gpu/drm/nvdla/nvdla_sdp.c b/drivers/gpu/drm/nvdla/nvdla_sdp.c
> new file mode 100644
> index 000000000000..655ec7195ee9
> --- /dev/null
> +++ b/drivers/gpu/drm/nvdla/nvdla_sdp.c
> @@ -0,0 +1,728 @@
> +// SPDX-License-Identifier: BSD-3-Clause OR GPL-2.0
> +/*
> + * Copyright (C) 2017-2018 NVIDIA CORPORATION
> + * Copyright (C) 2022 Cai Huoqing
> + */
> +
> +#include "nvdla_drm.h"
> +#include "nvdla_reg.h"
> +#include "nvdla_common.h"
> +#include "nvdla_engine.h"
> +
> +static const uint8_t map_ena[] = {
> +	FIELD_ENUM(SDP_RDMA_D_BRDMA_CFG_0, BRDMA_DISABLE, YES),
> +	FIELD_ENUM(SDP_RDMA_D_BRDMA_CFG_0, BRDMA_DISABLE, NO),
> +};
> +
> +static const uint8_t map_prelu[] = {
> +	FIELD_ENUM(SDP_D_DP_BS_CFG_0, BS_MUL_PRELU, NO),
> +	FIELD_ENUM(SDP_D_DP_BS_CFG_0, BS_MUL_PRELU, YES),
> +};
> +
> +static const uint8_t map_bypass[] = {
> +	FIELD_ENUM(SDP_D_DP_BS_CFG_0, BS_BYPASS, YES),
> +	FIELD_ENUM(SDP_D_DP_BS_CFG_0, BS_BYPASS, NO),
> +};
> +
> +static const uint8_t map_alu_op[] = {
> +	FIELD_ENUM(SDP_D_DP_EW_CFG_0, EW_ALU_ALGO, MAX),
> +	FIELD_ENUM(SDP_D_DP_EW_CFG_0, EW_ALU_ALGO, MIN),
> +	FIELD_ENUM(SDP_D_DP_EW_CFG_0, EW_ALU_ALGO, SUM),
> +	FIELD_ENUM(SDP_D_DP_EW_CFG_0, EW_ALU_ALGO, EQL),
> +};
> +
> +static const uint8_t map_alu_src[] = {
> +	FIELD_ENUM(SDP_D_DP_BS_ALU_CFG_0, BS_ALU_SRC, MEM),
> +	FIELD_ENUM(SDP_D_DP_BS_ALU_CFG_0, BS_ALU_SRC, REG),
> +};
> +
> +static const uint8_t map_fly[] = {
> +	FIELD_ENUM(SDP_D_FEATURE_MODE_CFG_0, FLYING_MODE, OFF),
> +	FIELD_ENUM(SDP_D_FEATURE_MODE_CFG_0, FLYING_MODE, ON),
> +};
> +
> +static const uint8_t map_dst[] = {
> +	FIELD_ENUM(SDP_D_FEATURE_MODE_CFG_0, OUTPUT_DST, MEM),
> +	FIELD_ENUM(SDP_D_FEATURE_MODE_CFG_0, OUTPUT_DST, PDP),
> +};
> +
> +
> +static const uint8_t map_wg[] = {
> +	FIELD_ENUM(SDP_D_FEATURE_MODE_CFG_0, WINOGRAD, OFF),
> +	FIELD_ENUM(SDP_D_FEATURE_MODE_CFG_0, WINOGRAD, ON),
> +};
> +
> +static const uint8_t map_precision[] = {
> +	FIELD_ENUM(SDP_RDMA_D_FEATURE_MODE_CFG_0, IN_PRECISION, INT8),
> +	FIELD_ENUM(SDP_RDMA_D_FEATURE_MODE_CFG_0, IN_PRECISION, INT16),
> +	FIELD_ENUM(SDP_RDMA_D_FEATURE_MODE_CFG_0, IN_PRECISION, FP16),
> +};
> +
> +static const uint32_t map_proc_precision[3][3] = {
> +	{
> +		FIELD_ENUM(SDP_RDMA_D_FEATURE_MODE_CFG_0, IN_PRECISION, INT8),
> +		FIELD_ENUM(SDP_RDMA_D_FEATURE_MODE_CFG_0, IN_PRECISION, INT8),
> +		FIELD_ENUM(SDP_RDMA_D_FEATURE_MODE_CFG_0, IN_PRECISION, FP16),
> +	},
> +	{
> +		FIELD_ENUM(SDP_RDMA_D_FEATURE_MODE_CFG_0, IN_PRECISION, INT8),
> +		FIELD_ENUM(SDP_RDMA_D_FEATURE_MODE_CFG_0, IN_PRECISION, INT16),
> +		FIELD_ENUM(SDP_RDMA_D_FEATURE_MODE_CFG_0, IN_PRECISION, FP16),
> +	},
> +	{
> +		FIELD_ENUM(SDP_RDMA_D_FEATURE_MODE_CFG_0, IN_PRECISION, INT8),
> +		FIELD_ENUM(SDP_RDMA_D_FEATURE_MODE_CFG_0, IN_PRECISION, INT16),
> +		FIELD_ENUM(SDP_RDMA_D_FEATURE_MODE_CFG_0, IN_PRECISION, FP16),
> +	},
> +};
> +
> +static const uint8_t map_op_type[] = {
> +	FIELD_ENUM(SDP_RDMA_D_BRDMA_CFG_0, BRDMA_DATA_USE, MUL),
> +	FIELD_ENUM(SDP_RDMA_D_BRDMA_CFG_0, BRDMA_DATA_USE, MUL),
> +	FIELD_ENUM(SDP_RDMA_D_BRDMA_CFG_0, BRDMA_DATA_USE, ALU),
> +	FIELD_ENUM(SDP_RDMA_D_BRDMA_CFG_0, BRDMA_DATA_USE, BOTH),
> +};
> +
> +static const uint8_t map_element_size[] = {
> +	FIELD_ENUM(SDP_RDMA_D_BRDMA_CFG_0, BRDMA_DATA_SIZE, ONE_BYTE),
> +	FIELD_ENUM(SDP_RDMA_D_BRDMA_CFG_0, BRDMA_DATA_SIZE, TWO_BYTE),
> +	FIELD_ENUM(SDP_RDMA_D_BRDMA_CFG_0, BRDMA_DATA_SIZE, TWO_BYTE),
> +};
> +
> +static const uint8_t map_op_mode[] = {
> +	FIELD_ENUM(SDP_RDMA_D_BRDMA_CFG_0, BRDMA_DATA_MODE, PER_ELEMENT),
> +	FIELD_ENUM(SDP_RDMA_D_BRDMA_CFG_0, BRDMA_DATA_MODE, PER_KERNEL),
> +	FIELD_ENUM(SDP_RDMA_D_BRDMA_CFG_0, BRDMA_DATA_MODE, PER_ELEMENT),
> +};
> +
> +static const uint8_t map_ram_type[] = {
> +	FIELD_ENUM(SDP_RDMA_D_BRDMA_CFG_0, BRDMA_RAM_TYPE, MC),
> +	FIELD_ENUM(SDP_RDMA_D_BRDMA_CFG_0, BRDMA_RAM_TYPE, CV),
> +};
> +
> +static const uint8_t map_perf_dma[] = {
> +	FIELD_ENUM(SDP_D_PERF_ENABLE_0, PERF_DMA_EN, NO),
> +	FIELD_ENUM(SDP_D_PERF_ENABLE_0, PERF_DMA_EN, YES),
> +};
> +
> +static const uint8_t map_perf_lut[] = {
> +	FIELD_ENUM(SDP_D_PERF_ENABLE_0, PERF_LUT_EN, NO),
> +	FIELD_ENUM(SDP_D_PERF_ENABLE_0, PERF_LUT_EN, YES),
> +};
> +
> +static const uint8_t map_perf_sat[] = {
> +	FIELD_ENUM(SDP_D_PERF_ENABLE_0, PERF_SAT_EN, NO),
> +	FIELD_ENUM(SDP_D_PERF_ENABLE_0, PERF_SAT_EN, YES),
> +};
> +
> +static const uint8_t map_perf_nan_inf[] = {
> +	FIELD_ENUM(SDP_D_PERF_ENABLE_0, PERF_NAN_INF_COUNT_EN, NO),
> +	FIELD_ENUM(SDP_D_PERF_ENABLE_0, PERF_NAN_INF_COUNT_EN, YES),
> +};
> +
> +void
> +dla_sdp_set_producer(struct dla_engine *engine, int32_t group_id, int32_t rdma_group_id)
> +{
> +	uint32_t reg;
> +
> +	/**
> +	 * set producer pointer for all sub-modules
> +	 */
> +	reg = group_id << SHIFT(SDP_S_POINTER_0, PRODUCER);
> +	sdp_reg_write(engine, S_POINTER, reg);
> +	reg = rdma_group_id << SHIFT(SDP_RDMA_S_POINTER_0, PRODUCER);
> +	sdp_rdma_reg_write(engine, S_POINTER, reg);
> +}
> +
> +int
> +dla_sdp_enable(struct dla_engine *engine, struct dla_processor_group *group)
> +{
> +	uint32_t reg;
> +
> +	/**
> +	 * enable all sub-modules
> +	 */
> +	if (group->is_rdma_needed) {
> +		reg = FIELD_ENUM(SDP_RDMA_D_OP_ENABLE_0, OP_EN, ENABLE);
> +		sdp_rdma_reg_write(engine, D_OP_ENABLE, reg);
> +	}
> +	reg = FIELD_ENUM(SDP_D_OP_ENABLE_0, OP_EN, ENABLE);
> +	sdp_reg_write(engine, D_OP_ENABLE, reg);
> +
> +	return 0;
> +}
> +
> +void
> +dla_sdp_rdma_check(struct dla_processor_group *group)
> +{
> +	uint8_t x1_rdma_ena;
> +	uint8_t x2_rdma_ena;
> +	uint8_t y_rdma_ena;
> +	uint8_t fly;
> +	struct dla_sdp_op_desc *sdp_op;
> +	struct dla_sdp_surface_desc *sdp_surface;
> +
> +	sdp_op = &group->operation_desc->sdp_op;
> +	sdp_surface = &group->surface_desc->sdp_surface;
> +
> +	x1_rdma_ena = sdp_op->x1_op.enable;
> +	x2_rdma_ena = sdp_op->x2_op.enable;
> +	y_rdma_ena  = sdp_op->y_op.enable;
> +
> +	x1_rdma_ena &= (sdp_op->x1_op.mode != SDP_OP_PER_LAYER);
> +	x2_rdma_ena &= (sdp_op->x2_op.mode != SDP_OP_PER_LAYER);
> +	y_rdma_ena &= (sdp_op->y_op.mode != SDP_OP_PER_LAYER);
> +
> +	fly = sdp_surface->src_data.type == DLA_MEM_HW;
> +
> +	group->is_rdma_needed = (!fly) || (x1_rdma_ena ||
> +					x2_rdma_ena || y_rdma_ena);
> +}
> +
> +static int32_t
> +processor_sdp_program(struct dla_engine *engine, struct dla_processor_group *group)
> +{
> +	int32_t ret = 0;
> +	uint64_t src_addr = -1, x1_addr = -1, x2_addr = -1;
> +	uint64_t  y_addr = -1, dst_addr = -1;
> +	uint32_t reg, high, low;
> +	uint8_t fly;
> +	uint32_t atom_size;
> +	struct dla_sdp_op *x1_op;
> +	struct dla_sdp_op *x2_op;
> +	struct dla_sdp_op *y_op;
> +	uint8_t x1_rdma_ena;
> +	uint8_t x2_rdma_ena;
> +	uint8_t y_rdma_ena;
> +	uint8_t out_dma_ena;
> +	struct dla_lut_param lut;
> +	struct dla_sdp_op_desc *sdp_op;
> +	struct dla_sdp_surface_desc *sdp_surface;
> +
> +	atom_size = engine->config_data->atom_size;
> +
> +	sdp_op = &group->operation_desc->sdp_op;
> +	sdp_surface = &group->surface_desc->sdp_surface;
> +
> +	fly = sdp_surface->src_data.type == DLA_MEM_HW;
> +	out_dma_ena = sdp_surface->dst_data.type != DLA_MEM_HW;
> +	x1_op = &sdp_op->x1_op;
> +	x2_op = &sdp_op->x2_op;
> +	y_op = &sdp_op->y_op;
> +	x1_rdma_ena = x1_op->enable && x1_op->type != SDP_OP_NONE;
> +	x2_rdma_ena = x2_op->enable && x2_op->type != SDP_OP_NONE;
> +	y_rdma_ena  = y_op->enable && y_op->type != SDP_OP_NONE;
> +
> +	/* load address */
> +	if (!fly) {
> +		ret = dla_read_input_address(engine, &sdp_surface->src_data,
> +						&src_addr,
> +						group->op_desc->index,
> +						group->roi_index,
> +					    1);
> +		if (ret)
> +			goto exit;
> +	}
> +
> +	if (out_dma_ena) {
> +		dla_get_dma_cube_address(engine->driver_context,
> +					engine->task->task_data,
> +					sdp_surface->dst_data.address,
> +					sdp_surface->dst_data.offset,
> +					(void *)&dst_addr,
> +					DESTINATION_DMA);
> +	}
> +
> +	if (sdp_op->lut_index >= 0) {
> +		group->lut_index = sdp_op->lut_index;
> +		dla_read_lut(engine, sdp_op->lut_index, (void *)&lut);
> +	}
> +
> +
> +	x1_rdma_ena &= (x1_op->mode != SDP_OP_PER_LAYER);
> +	x2_rdma_ena &= (x2_op->mode != SDP_OP_PER_LAYER);
> +	y_rdma_ena &= (y_op->mode != SDP_OP_PER_LAYER);
> +
> +	if (x1_rdma_ena) {
> +		dla_get_dma_cube_address(engine->driver_context,
> +					engine->task->task_data,
> +					sdp_surface->x1_data.address,
> +					sdp_surface->x1_data.offset,
> +					(void *)&x1_addr,
> +					DESTINATION_DMA);
> +	}
> +	if (x2_rdma_ena) {
> +		dla_get_dma_cube_address(engine->driver_context,
> +					engine->task->task_data,
> +					sdp_surface->x2_data.address,
> +					sdp_surface->x2_data.offset,
> +					(void *)&x2_addr,
> +					DESTINATION_DMA);
> +	}
> +	if (y_rdma_ena) {
> +		dla_get_dma_cube_address(engine->driver_context,
> +					engine->task->task_data,
> +					sdp_surface->y_data.address,
> +					sdp_surface->y_data.offset,
> +					(void *)&y_addr,
> +					DESTINATION_DMA);
> +	}
> +
> +	reg = (map_fly[0] << SHIFT(SDP_RDMA_D_FEATURE_MODE_CFG_0, FLYING_MODE));
> +	sdp_rdma_reg_write(engine, D_FEATURE_MODE_CFG, reg);
> +
> +	reg = (map_ena[1] << SHIFT(SDP_RDMA_D_BRDMA_CFG_0, BRDMA_DISABLE));
> +	sdp_rdma_reg_write(engine, D_BRDMA_CFG, reg);
> +	reg = (map_ena[1] << SHIFT(SDP_RDMA_D_NRDMA_CFG_0, NRDMA_DISABLE));
> +	sdp_rdma_reg_write(engine, D_NRDMA_CFG, reg);
> +	reg = (map_ena[1] << SHIFT(SDP_RDMA_D_ERDMA_CFG_0, ERDMA_DISABLE));
> +	sdp_rdma_reg_write(engine, D_ERDMA_CFG, reg);
> +
> +	reg = (map_fly[fly] <<
> +			SHIFT(SDP_RDMA_D_FEATURE_MODE_CFG_0, FLYING_MODE)) |
> +	(map_wg[sdp_op->conv_mode == CONV_MODE_WINOGRAD] <<
> +			SHIFT(SDP_RDMA_D_FEATURE_MODE_CFG_0, WINOGRAD)) |
> +	(map_precision[sdp_op->src_precision] <<
> +			SHIFT(SDP_RDMA_D_FEATURE_MODE_CFG_0, IN_PRECISION)) |
> +	(map_precision[sdp_op->dst_precision] <<
> +			SHIFT(SDP_RDMA_D_FEATURE_MODE_CFG_0, OUT_PRECISION)) |
> +	(map_proc_precision[sdp_op->dst_precision][sdp_op->src_precision] <<
> +			SHIFT(SDP_RDMA_D_FEATURE_MODE_CFG_0, PROC_PRECISION)) |
> +	((sdp_op->batch_num-1) <<
> +			SHIFT(SDP_RDMA_D_FEATURE_MODE_CFG_0, BATCH_NUMBER));
> +	sdp_rdma_reg_write(engine, D_FEATURE_MODE_CFG, reg);
> +
> +	if (group->is_rdma_needed) {
> +
> +		sdp_rdma_reg_write(engine, D_DATA_CUBE_WIDTH,
> +					sdp_surface->src_data.width - 1);
> +		sdp_rdma_reg_write(engine, D_DATA_CUBE_HEIGHT,
> +					sdp_surface->src_data.height - 1);
> +		sdp_rdma_reg_write(engine, D_DATA_CUBE_CHANNEL,
> +					sdp_surface->src_data.channel - 1);
> +
> +		/* config SDP source info */
> +		if (!fly) {
> +			/**
> +			 * if not on-the-fly, we have to config
> +			 * the source cube info
> +			 */
> +			high = upper_32_bits(src_addr);
> +			low = lower_32_bits(src_addr);
> +			sdp_rdma_reg_write(engine, D_SRC_BASE_ADDR_LOW, low);
> +			sdp_rdma_reg_write(engine, D_SRC_BASE_ADDR_HIGH, high);
> +			sdp_rdma_reg_write(engine, D_SRC_LINE_STRIDE,
> +					sdp_surface->src_data.line_stride);
> +			sdp_rdma_reg_write(engine, D_SRC_SURFACE_STRIDE,
> +					sdp_surface->src_data.surf_stride);
> +			sdp_rdma_reg_write(engine, D_SRC_DMA_CFG,
> +				map_ram_type[sdp_surface->src_data.type]);
> +		}
> +
> +		/* config x1 source info */
> +		reg = (map_ena[x1_rdma_ena] <<
> +				SHIFT(SDP_RDMA_D_BRDMA_CFG_0,
> +				BRDMA_DISABLE)) |
> +			(map_op_type[x1_op->type] <<
> +				SHIFT(SDP_RDMA_D_BRDMA_CFG_0,
> +				BRDMA_DATA_USE)) |
> +			(map_element_size[x1_op->precision] <<
> +				SHIFT(SDP_RDMA_D_BRDMA_CFG_0,
> +				BRDMA_DATA_SIZE)) |
> +			(map_op_mode[x1_op->mode] <<
> +				SHIFT(SDP_RDMA_D_BRDMA_CFG_0,
> +				BRDMA_DATA_MODE)) |
> +			(map_ram_type[sdp_surface->x1_data.type] <<
> +				SHIFT(SDP_RDMA_D_BRDMA_CFG_0,
> +				BRDMA_RAM_TYPE));
> +		sdp_rdma_reg_write(engine, D_BRDMA_CFG, reg);
> +
> +		if (x1_rdma_ena) {
> +			high = upper_32_bits(x1_addr);
> +			low = lower_32_bits(x1_addr);
> +			sdp_rdma_reg_write(engine, D_BS_BASE_ADDR_LOW,
> +					low);
> +			sdp_rdma_reg_write(engine, D_BS_BASE_ADDR_HIGH,
> +					high);
> +			sdp_rdma_reg_write(engine, D_BS_LINE_STRIDE,
> +					sdp_surface->x1_data.line_stride);
> +			sdp_rdma_reg_write(engine, D_BS_SURFACE_STRIDE,
> +					sdp_surface->x1_data.surf_stride);
> +		}
> +
> +		/* config x2 source info */
> +		reg = (map_ena[x2_rdma_ena] <<
> +					SHIFT(SDP_RDMA_D_NRDMA_CFG_0,
> +					NRDMA_DISABLE)) |
> +			(map_op_type[x2_op->type] <<
> +					SHIFT(SDP_RDMA_D_NRDMA_CFG_0,
> +					NRDMA_DATA_USE)) |
> +			(map_element_size[x2_op->precision] <<
> +					SHIFT(SDP_RDMA_D_NRDMA_CFG_0,
> +					NRDMA_DATA_SIZE)) |
> +			(map_op_mode[x2_op->mode] <<
> +					SHIFT(SDP_RDMA_D_NRDMA_CFG_0,
> +					NRDMA_DATA_MODE)) |
> +			(map_ram_type[sdp_surface->x2_data.type] <<
> +					SHIFT(SDP_RDMA_D_NRDMA_CFG_0,
> +					NRDMA_RAM_TYPE));
> +
> +		sdp_rdma_reg_write(engine, D_NRDMA_CFG, reg);
> +
> +		if (x2_rdma_ena) {
> +			high = upper_32_bits(x2_addr);
> +			low = lower_32_bits(x2_addr);
> +			sdp_rdma_reg_write(engine, D_BN_BASE_ADDR_LOW,
> +					low);
> +			sdp_rdma_reg_write(engine, D_BN_BASE_ADDR_HIGH,
> +					high);
> +			sdp_rdma_reg_write(engine, D_BN_LINE_STRIDE,
> +					sdp_surface->x2_data.line_stride);
> +			sdp_rdma_reg_write(engine, D_BN_SURFACE_STRIDE,
> +					sdp_surface->x2_data.surf_stride);
> +		}
> +
> +		/* config y source info */
> +		reg = (map_ena[y_rdma_ena] <<
> +				SHIFT(SDP_RDMA_D_ERDMA_CFG_0,
> +				ERDMA_DISABLE)) |
> +			(map_op_type[y_op->type] <<
> +				SHIFT(SDP_RDMA_D_ERDMA_CFG_0,
> +				ERDMA_DATA_USE)) |
> +			(map_element_size[y_op->precision] <<
> +				SHIFT(SDP_RDMA_D_ERDMA_CFG_0,
> +				ERDMA_DATA_SIZE)) |
> +			(map_op_mode[y_op->mode] <<
> +				SHIFT(SDP_RDMA_D_ERDMA_CFG_0,
> +				ERDMA_DATA_MODE)) |
> +			(map_ram_type[sdp_surface->y_data.type] <<
> +				SHIFT(SDP_RDMA_D_ERDMA_CFG_0,
> +				ERDMA_RAM_TYPE));
> +
> +		sdp_rdma_reg_write(engine, D_ERDMA_CFG, reg);
> +		if (y_rdma_ena) {
> +			high = upper_32_bits(y_addr);
> +			low = lower_32_bits(y_addr);
> +			sdp_rdma_reg_write(engine, D_EW_BASE_ADDR_LOW,
> +					low);
> +			sdp_rdma_reg_write(engine, D_EW_BASE_ADDR_HIGH,
> +					high);
> +			sdp_rdma_reg_write(engine, D_EW_LINE_STRIDE,
> +					sdp_surface->y_data.line_stride);
> +			sdp_rdma_reg_write(engine, D_EW_SURFACE_STRIDE,
> +					sdp_surface->y_data.surf_stride);
> +		}
> +	}
> +
> +	if (sdp_op->lut_index >= 0)
> +		update_lut(engine, SDP_S_LUT_ACCESS_CFG_0, &lut,
> +					sdp_op->src_precision);
> +
> +	sdp_reg_write(engine, D_DATA_CUBE_WIDTH, sdp_surface->src_data.width - 1);
> +	sdp_reg_write(engine, D_DATA_CUBE_HEIGHT, sdp_surface->src_data.height - 1);
> +	sdp_reg_write(engine, D_DATA_CUBE_CHANNEL, sdp_surface->src_data.channel - 1);
> +
> +	if (out_dma_ena) {
> +		high = upper_32_bits(dst_addr);
> +		low = lower_32_bits(dst_addr);
> +		sdp_reg_write(engine, D_DST_BASE_ADDR_HIGH,
> +				high);
> +		sdp_reg_write(engine, D_DST_BASE_ADDR_LOW,
> +				low);
> +		sdp_reg_write(engine, D_DST_LINE_STRIDE,
> +				sdp_surface->dst_data.line_stride);
> +		sdp_reg_write(engine, D_DST_SURFACE_STRIDE,
> +				sdp_surface->dst_data.surf_stride);
> +	}
> +
> +	/* Config BS module */
> +	reg = (map_bypass[x1_op->enable] <<
> +			SHIFT(SDP_D_DP_BS_CFG_0,
> +			BS_BYPASS)) |
> +		(map_bypass[x1_op->type != SDP_OP_MUL &&
> +				x1_op->type != SDP_OP_NONE] <<
> +			SHIFT(SDP_D_DP_BS_CFG_0,
> +			BS_ALU_BYPASS)) |
> +		(map_alu_op[x1_op->alu_type] <<
> +			SHIFT(SDP_D_DP_BS_CFG_0,
> +			BS_ALU_ALGO)) |
> +		(map_bypass[x1_op->type != SDP_OP_ADD &&
> +			x1_op->type != SDP_OP_NONE] <<
> +			SHIFT(SDP_D_DP_BS_CFG_0,
> +			BS_MUL_BYPASS)) |
> +		(map_prelu[x1_op->act == ACTIVATION_PRELU]
> +			<< SHIFT(SDP_D_DP_BS_CFG_0,
> +			BS_MUL_PRELU)) |
> +		(map_bypass[x1_op->act == ACTIVATION_RELU] <<
> +			SHIFT(SDP_D_DP_BS_CFG_0,
> +			BS_RELU_BYPASS));
> +	sdp_reg_write(engine, D_DP_BS_CFG, reg);
> +
> +	if (x1_op->enable) {
> +		if (x1_op->type == SDP_OP_ADD ||
> +				x1_op->type == SDP_OP_BOTH) {
> +			reg = (map_alu_src[x1_op->mode == SDP_OP_PER_LAYER] <<
> +					SHIFT(SDP_D_DP_BS_ALU_CFG_0,
> +					BS_ALU_SRC)) |
> +				(x1_op->shift_value <<
> +					SHIFT(SDP_D_DP_BS_ALU_CFG_0,
> +					BS_ALU_SHIFT_VALUE));
> +			sdp_reg_write(engine, D_DP_BS_ALU_CFG, reg);
> +		}
> +
> +		if (x1_op->mode == SDP_OP_PER_LAYER) {
> +			sdp_reg_write(engine, D_DP_BS_ALU_SRC_VALUE,
> +					x1_op->alu_operand);
> +			sdp_reg_write(engine, D_DP_BS_MUL_SRC_VALUE,
> +					x1_op->mul_operand);
> +		}
> +
> +		/**
> +		 * MUL truncate will take effect no matter
> +		 * MUL is bypassed or not
> +		 */
> +		reg = (map_alu_src[x1_op->mode == SDP_OP_PER_LAYER] <<
> +			SHIFT(SDP_D_DP_BS_MUL_CFG_0,
> +			BS_MUL_SRC)) |
> +		(x1_op->truncate <<
> +			SHIFT(SDP_D_DP_BS_MUL_CFG_0,
> +			BS_MUL_SHIFT_VALUE));
> +		sdp_reg_write(engine, D_DP_BS_MUL_CFG, reg);
> +	}
> +
> +	/* Config BN module */
> +	reg = (map_bypass[x2_op->enable] <<
> +			SHIFT(SDP_D_DP_BN_CFG_0,
> +			BN_BYPASS)) |
> +		(map_bypass[x2_op->type != SDP_OP_MUL &&
> +			x2_op->type != SDP_OP_NONE] <<
> +			SHIFT(SDP_D_DP_BN_CFG_0,
> +			BN_ALU_BYPASS)) |
> +		(map_alu_op[x2_op->alu_type] <<
> +			SHIFT(SDP_D_DP_BN_CFG_0,
> +			BN_ALU_ALGO)) |
> +		(map_bypass[x2_op->type != SDP_OP_ADD &&
> +			x2_op->type != SDP_OP_NONE] <<
> +			SHIFT(SDP_D_DP_BN_CFG_0,
> +			BN_MUL_BYPASS)) |
> +		(map_prelu[x2_op->act == ACTIVATION_PRELU]
> +			<< SHIFT(SDP_D_DP_BN_CFG_0,
> +			BN_MUL_PRELU)) |
> +		(map_bypass[x2_op->act == ACTIVATION_RELU]
> +			<< SHIFT(SDP_D_DP_BN_CFG_0,
> +			BN_RELU_BYPASS));
> +	sdp_reg_write(engine, D_DP_BN_CFG, reg);
> +
> +	if (x2_op->enable) {
> +		if (x2_op->type == SDP_OP_ADD ||
> +			x2_op->type == SDP_OP_BOTH) {
> +			reg = (map_alu_src[x2_op->mode == SDP_OP_PER_LAYER] <<
> +					SHIFT(SDP_D_DP_BN_ALU_CFG_0,
> +					BN_ALU_SRC)) |
> +				(x2_op->shift_value <<
> +					SHIFT(SDP_D_DP_BN_ALU_CFG_0,
> +					BN_ALU_SHIFT_VALUE));
> +			sdp_reg_write(engine, D_DP_BN_ALU_CFG, reg);
> +		}
> +
> +		if (x2_op->mode == SDP_OP_PER_LAYER) {
> +			sdp_reg_write(engine, D_DP_BN_ALU_SRC_VALUE,
> +					x2_op->alu_operand);
> +			sdp_reg_write(engine, D_DP_BN_MUL_SRC_VALUE,
> +					x2_op->mul_operand);
> +		}
> +
> +		reg = (map_alu_src[x2_op->mode == SDP_OP_PER_LAYER] <<
> +				SHIFT(SDP_D_DP_BN_MUL_CFG_0,
> +				BN_MUL_SRC)) |
> +			(x2_op->truncate <<
> +				SHIFT(SDP_D_DP_BN_MUL_CFG_0,
> +				BN_MUL_SHIFT_VALUE));
> +		sdp_reg_write(engine, D_DP_BN_MUL_CFG, reg);
> +	}
> +
> +	/* Config EW module */
> +	reg = (map_bypass[y_op->enable] <<
> +			SHIFT(SDP_D_DP_EW_CFG_0,
> +			EW_BYPASS)) |
> +		(map_bypass[y_op->type != SDP_OP_MUL &&
> +			y_op->type != SDP_OP_NONE] <<
> +			SHIFT(SDP_D_DP_EW_CFG_0,
> +			EW_ALU_BYPASS)) |
> +		(map_alu_op[y_op->alu_type] <<
> +			SHIFT(SDP_D_DP_EW_CFG_0,
> +			EW_ALU_ALGO)) |
> +		(map_bypass[y_op->type != SDP_OP_ADD &&
> +			y_op->type != SDP_OP_NONE] <<
> +			SHIFT(SDP_D_DP_EW_CFG_0,
> +			EW_MUL_BYPASS)) |
> +		((map_prelu[y_op->act == ACTIVATION_PRELU]) <<
> +			SHIFT(SDP_D_DP_EW_CFG_0,
> +			EW_MUL_PRELU)) |
> +		(map_bypass[y_op->act == ACTIVATION_LUT] <<
> +			SHIFT(SDP_D_DP_EW_CFG_0,
> +			EW_LUT_BYPASS));
> +	sdp_reg_write(engine, D_DP_EW_CFG, reg);
> +
> +	if (y_op->enable) {
> +		if (y_op->type == SDP_OP_ADD || y_op->type == SDP_OP_BOTH) {
> +			reg = (map_alu_src[y_op->mode == SDP_OP_PER_LAYER] <<
> +					SHIFT(SDP_D_DP_EW_ALU_CFG_0,
> +					EW_ALU_SRC)) |
> +				(map_bypass[y_op->cvt.alu_cvt.enable] <<
> +					SHIFT(SDP_D_DP_EW_ALU_CFG_0,
> +					EW_ALU_CVT_BYPASS));
> +			sdp_reg_write(engine, D_DP_EW_ALU_CFG, reg);
> +
> +			if (y_op->mode == SDP_OP_PER_LAYER) {
> +				sdp_reg_write(engine, D_DP_EW_ALU_SRC_VALUE,
> +						y_op->alu_operand);
> +			} else {
> +				sdp_reg_write(engine, D_DP_EW_ALU_CVT_OFFSET_VALUE,
> +						y_op->cvt.alu_cvt.offset);
> +				sdp_reg_write(engine, D_DP_EW_ALU_CVT_SCALE_VALUE,
> +						y_op->cvt.alu_cvt.scale);
> +				sdp_reg_write(engine, D_DP_EW_ALU_CVT_TRUNCATE_VALUE,
> +						y_op->cvt.alu_cvt.truncate);
> +			}
> +		}
> +
> +		if (y_op->type == SDP_OP_MUL || y_op->type == SDP_OP_BOTH) {
> +			reg = (map_alu_src[y_op->mode == SDP_OP_PER_LAYER] <<
> +					SHIFT(SDP_D_DP_EW_MUL_CFG_0,
> +					EW_MUL_SRC)) |
> +				(map_bypass[y_op->cvt.mul_cvt.enable] <<
> +					SHIFT(SDP_D_DP_EW_MUL_CFG_0,
> +					EW_MUL_CVT_BYPASS));
> +			sdp_reg_write(engine, D_DP_EW_MUL_CFG, reg);
> +
> +			if (y_op->mode == SDP_OP_PER_LAYER) {
> +				sdp_reg_write(engine, D_DP_EW_MUL_SRC_VALUE,
> +						y_op->mul_operand);
> +			} else {
> +				sdp_reg_write(engine, D_DP_EW_MUL_CVT_OFFSET_VALUE,
> +						y_op->cvt.mul_cvt.offset);
> +				sdp_reg_write(engine, D_DP_EW_MUL_CVT_SCALE_VALUE,
> +						y_op->cvt.mul_cvt.scale);
> +				sdp_reg_write(engine, D_DP_EW_MUL_CVT_TRUNCATE_VALUE,
> +						y_op->cvt.mul_cvt.truncate);
> +			}
> +		}
> +
> +		sdp_reg_write(engine, D_DP_EW_TRUNCATE_VALUE, y_op->truncate);
> +	}
> +
> +	reg = (map_fly[sdp_surface->src_data.type == DLA_MEM_HW] <<
> +			SHIFT(SDP_D_FEATURE_MODE_CFG_0,
> +			FLYING_MODE)) |
> +		(map_dst[sdp_surface->dst_data.type == DLA_MEM_HW] <<
> +			SHIFT(SDP_D_FEATURE_MODE_CFG_0,
> +			OUTPUT_DST)) |
> +		(map_wg[sdp_op->conv_mode == CONV_MODE_WINOGRAD] <<
> +			SHIFT(SDP_D_FEATURE_MODE_CFG_0,
> +			WINOGRAD)) |
> +		((sdp_op->batch_num - 1) <<
> +			SHIFT(SDP_D_FEATURE_MODE_CFG_0,
> +			BATCH_NUMBER));
> +	sdp_reg_write(engine, D_FEATURE_MODE_CFG, reg);
> +	sdp_reg_write(engine, D_DST_DMA_CFG,
> +			map_ram_type[sdp_surface->dst_data.type]);
> +	if (sdp_op->batch_num > 1)
> +		sdp_reg_write(engine, D_DST_BATCH_STRIDE, sdp_op->batch_stride);
> +
> +	reg =
> +	(map_proc_precision[sdp_op->dst_precision][sdp_op->src_precision] <<
> +			SHIFT(SDP_D_DATA_FORMAT_0,
> +			PROC_PRECISION)) |
> +		(map_precision[sdp_op->dst_precision] <<
> +			SHIFT(SDP_D_DATA_FORMAT_0,
> +			OUT_PRECISION));
> +	sdp_reg_write(engine, D_DATA_FORMAT, reg);
> +	sdp_reg_write(engine, D_CVT_OFFSET, sdp_op->out_cvt.offset);
> +	sdp_reg_write(engine, D_CVT_SCALE, sdp_op->out_cvt.scale);
> +	sdp_reg_write(engine, D_CVT_SHIFT, sdp_op->out_cvt.truncate);
> +
> +exit:
> +	return ret;
> +}
> +
> +int
> +dla_sdp_is_ready(struct dla_processor *processor,
> +			   struct dla_processor_group *group)
> +{
> +	struct dla_processor_group *next_group;
> +	struct dla_sdp_op_desc *sdp_op;
> +
> +	sdp_op = &group->operation_desc->sdp_op;
> +	next_group = &processor->groups[!group->id];
> +
> +	/**
> +	 * Single LUT is shared between two SDP groups, need to make
> +	 * sure that usage does not conflict. Also, LUT write
> +	 * access is locked when SDP sub-engine is active, so delay
> +	 * writing LUT when another group is active.
> +	 */
> +
> +	/**
> +	 * if no LUT required for current group then it can be programmed
> +	 * without further checks
> +	 */
> +	if (sdp_op->lut_index == -1)
> +		return 1;
> +
> +	/**
> +	 * if same LUT is used for both groups then it can be programmed
> +	 * without more checks. Even if another group is active and LUT
> +	 * is locked, it would have been programmed by another group.
> +	 */
> +	if (next_group->lut_index == sdp_op->lut_index)
> +		return 1;
> +
> +	/**
> +	 * if LUT index of another group is not -1 means some LUT is programmed,
> +	 * then do not program current LUT as we already know current LUT is not
> +	 * -1 and neither same as another group.
> +	 */
> +	if (next_group->lut_index != -1)
> +		return 0;
> +
> +	/**
> +	 * if current group needs LUT different than another group and that
> +	 * group is not active then program it.
> +	 */
> +	if (!next_group->active)
> +		return 1;
> +
> +	/**
> +	 * if control is here it means current group is using LUT different than
> +	 * another group and that group is active. Wait for another group to
> +	 * become idle.
> +	 */
> +	return 0;
> +}
> +
> +void
> +dla_sdp_dump_config(struct dla_processor_group *group)
> +{
> +	struct dla_sdp_op_desc *sdp_op;
> +	struct dla_sdp_surface_desc *sdp_surface;
> +
> +	sdp_surface = &group->surface_desc->sdp_surface;
> +	sdp_op = &group->operation_desc->sdp_op;
> +}
> +
> +int
> +dla_sdp_program(struct dla_engine *engine, struct dla_processor_group *group)
> +{
> +	int32_t ret;
> +
> +	dla_enable_intr(engine, MASK(GLB_S_INTR_MASK_0, SDP_DONE_MASK1) |
> +			MASK(GLB_S_INTR_MASK_0, SDP_DONE_MASK0));
> +
> +	ret = processor_sdp_program(engine, group);
> +	if (ret)
> +		goto exit;
> +
> +exit:
> +	return ret;
> +}
> -- 
> 2.25.1
> 

-- 
Daniel Vetter
Software Engineer, Intel Corporation
http://blog.ffwll.ch

